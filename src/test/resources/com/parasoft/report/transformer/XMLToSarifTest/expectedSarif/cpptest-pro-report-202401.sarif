{ "$schema": "https://docs.oasis-open.org/sarif/sarif/v2.1.0/errata01/os/schemas/sarif-schema-2.1.0.json", "version": "2.1.0", "runs": [ {"tool": { "driver": {"name": "C++test", "semanticVersion": "2024.1.0.20240522B2484","rules": [{ "id": "APSC_DV-001850-a", "name": "Avoid passing sensitive data to functions that write to log files", "shortDescription": { "text": "Avoid passing sensitive data to functions that write to log files" }, "fullDescription": { "text": "Avoid passing sensitive data to functions that write to log files [APSC_DV-001850-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid passing sensitive data to functions that write to log files [APSC_DV-001850-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-001850 The application must not display passwords\/PINs as clear text." ], "security-severity": "9.5" } }, { "id": "APSC_DV-001750-a", "name": "Avoid passing sensitive data to functions that write to log files", "shortDescription": { "text": "Avoid passing sensitive data to functions that write to log files" }, "fullDescription": { "text": "Avoid passing sensitive data to functions that write to log files [APSC_DV-001750-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid passing sensitive data to functions that write to log files [APSC_DV-001750-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-001750 The application must transmit only cryptographically-protected passwords." ], "security-severity": "9.5" } }, { "id": "APSC_DV-000480-a", "name": "Protect against SQL injection", "shortDescription": { "text": "Protect against SQL injection" }, "fullDescription": { "text": "Protect against SQL injection [APSC_DV-000480-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against SQL injection [APSC_DV-000480-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-000480 The application must enforce approved authorizations for controlling the flow of information within the system based on organization-defined information flow control policies." ], "security-severity": "8" } }, { "id": "APSC_DV-000160-a", "name": "Do not use weak encryption functions", "shortDescription": { "text": "Do not use weak encryption functions" }, "fullDescription": { "text": "Do not use weak encryption functions [APSC_DV-000160-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use weak encryption functions [APSC_DV-000160-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-000160 The application must implement DoD-approved encryption to protect the confidentiality of remote access sessions." ], "security-severity": "8" } }, { "id": "APSC_DV-002460-a", "name": "Avoid passing sensitive data to functions that write to log files", "shortDescription": { "text": "Avoid passing sensitive data to functions that write to log files" }, "fullDescription": { "text": "Avoid passing sensitive data to functions that write to log files [APSC_DV-002460-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid passing sensitive data to functions that write to log files [APSC_DV-002460-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002460 The application must maintain the confidentiality and integrity of information during preparation for transmission." ], "security-severity": "8" } }, { "id": "APSC_DV-002560-a", "name": "Protect against environment injection", "shortDescription": { "text": "Protect against environment injection" }, "fullDescription": { "text": "Protect against environment injection [APSC_DV-002560-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against environment injection [APSC_DV-002560-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002560 The application must not be subject to input handling vulnerabilities." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002560-b", "name": "Protect against file name injection", "shortDescription": { "text": "Protect against file name injection" }, "fullDescription": { "text": "Protect against file name injection [APSC_DV-002560-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against file name injection [APSC_DV-002560-b]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002560 The application must not be subject to input handling vulnerabilities." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002560-c", "name": "Protect against SQL injection", "shortDescription": { "text": "Protect against SQL injection" }, "fullDescription": { "text": "Protect against SQL injection [APSC_DV-002560-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against SQL injection [APSC_DV-002560-c]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002560 The application must not be subject to input handling vulnerabilities." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002560-d", "name": "Never use unfiltered data from an untrusted user as the format parameter", "shortDescription": { "text": "Never use unfiltered data from an untrusted user as the format parameter" }, "fullDescription": { "text": "Never use unfiltered data from an untrusted user as the format parameter [APSC_DV-002560-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Never use unfiltered data from an untrusted user as the format parameter [APSC_DV-002560-d]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002560 The application must not be subject to input handling vulnerabilities." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002560-e", "name": "Avoid tainted data in array indexes", "shortDescription": { "text": "Avoid tainted data in array indexes" }, "fullDescription": { "text": "Avoid tainted data in array indexes [APSC_DV-002560-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid tainted data in array indexes [APSC_DV-002560-e]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002560 The application must not be subject to input handling vulnerabilities." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002560-f", "name": "Avoid potential integer overflow\/underflow on tainted data", "shortDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data" }, "fullDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data [APSC_DV-002560-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid potential integer overflow\/underflow on tainted data [APSC_DV-002560-f]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002560 The application must not be subject to input handling vulnerabilities." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002560-g", "name": "Avoid passing unvalidated binary data to log methods", "shortDescription": { "text": "Avoid passing unvalidated binary data to log methods" }, "fullDescription": { "text": "Avoid passing unvalidated binary data to log methods [APSC_DV-002560-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid passing unvalidated binary data to log methods [APSC_DV-002560-g]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002560 The application must not be subject to input handling vulnerabilities." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002560-h", "name": "Protect against command injection", "shortDescription": { "text": "Protect against command injection" }, "fullDescription": { "text": "Protect against command injection [APSC_DV-002560-h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against command injection [APSC_DV-002560-h]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002560 The application must not be subject to input handling vulnerabilities." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002560-i", "name": "Avoid printing tainted data on the output console", "shortDescription": { "text": "Avoid printing tainted data on the output console" }, "fullDescription": { "text": "Avoid printing tainted data on the output console [APSC_DV-002560-i]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid printing tainted data on the output console [APSC_DV-002560-i]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002560 The application must not be subject to input handling vulnerabilities." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002560-j", "name": "Exclude unsanitized user input from format strings", "shortDescription": { "text": "Exclude unsanitized user input from format strings" }, "fullDescription": { "text": "Exclude unsanitized user input from format strings [APSC_DV-002560-j]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Exclude unsanitized user input from format strings [APSC_DV-002560-j]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002560 The application must not be subject to input handling vulnerabilities." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002560-k", "name": "Untrusted data is used as a loop boundary", "shortDescription": { "text": "Untrusted data is used as a loop boundary" }, "fullDescription": { "text": "Untrusted data is used as a loop boundary [APSC_DV-002560-k]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Untrusted data is used as a loop boundary [APSC_DV-002560-k]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002560 The application must not be subject to input handling vulnerabilities." ], "security-severity": "9.5" } }, { "id": "APSC_DV-003110-a", "name": "Do not hard code string literals", "shortDescription": { "text": "Do not hard code string literals" }, "fullDescription": { "text": "Do not hard code string literals [APSC_DV-003110-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not hard code string literals [APSC_DV-003110-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-003110 The application must not contain embedded authentication data." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002000-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [APSC_DV-002000-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure resources are freed [APSC_DV-002000-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002000 The application must terminate all network connections associated with a communications session at the end of the session." ], "security-severity": "8" } }, { "id": "APSC_DV-002440-a", "name": "Avoid passing sensitive data to functions that write to log files", "shortDescription": { "text": "Avoid passing sensitive data to functions that write to log files" }, "fullDescription": { "text": "Avoid passing sensitive data to functions that write to log files [APSC_DV-002440-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid passing sensitive data to functions that write to log files [APSC_DV-002440-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002440 The application must protect the confidentiality and integrity of transmitted information." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002540-a", "name": "Protect against SQL injection", "shortDescription": { "text": "Protect against SQL injection" }, "fullDescription": { "text": "Protect against SQL injection [APSC_DV-002540-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against SQL injection [APSC_DV-002540-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002540 The application must not be vulnerable to SQL Injection." ], "security-severity": "9.5" } }, { "id": "APSC_DV-000500-a", "name": "Observe correct revocation order while relinquishing privileges", "shortDescription": { "text": "Observe correct revocation order while relinquishing privileges" }, "fullDescription": { "text": "Observe correct revocation order while relinquishing privileges [APSC_DV-000500-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Observe correct revocation order while relinquishing privileges [APSC_DV-000500-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-000500 The application must prevent non-privileged users from executing privileged functions to include disabling, circumventing, or altering implemented security safeguards\/countermeasures." ], "security-severity": "8" } }, { "id": "APSC_DV-001995-a", "name": "Avoid race conditions when using fork and file descriptors", "shortDescription": { "text": "Avoid race conditions when using fork and file descriptors" }, "fullDescription": { "text": "Avoid race conditions when using fork and file descriptors [APSC_DV-001995-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid race conditions when using fork and file descriptors [APSC_DV-001995-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-001995 The application must not be vulnerable to race conditions." ], "security-severity": "8" } }, { "id": "APSC_DV-001995-b", "name": "Avoid race conditions while checking for the existence of a symbolic link", "shortDescription": { "text": "Avoid race conditions while checking for the existence of a symbolic link" }, "fullDescription": { "text": "Avoid race conditions while checking for the existence of a symbolic link [APSC_DV-001995-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid race conditions while checking for the existence of a symbolic link [APSC_DV-001995-b]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-001995 The application must not be vulnerable to race conditions." ], "security-severity": "8" } }, { "id": "APSC_DV-001995-c", "name": "Avoid race conditions while accessing files", "shortDescription": { "text": "Avoid race conditions while accessing files" }, "fullDescription": { "text": "Avoid race conditions while accessing files [APSC_DV-001995-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid race conditions while accessing files [APSC_DV-001995-c]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-001995 The application must not be vulnerable to race conditions." ], "security-severity": "8" } }, { "id": "APSC_DV-001995-d", "name": "Use locks to prevent race conditions when modifying bit fields", "shortDescription": { "text": "Use locks to prevent race conditions when modifying bit fields" }, "fullDescription": { "text": "Use locks to prevent race conditions when modifying bit fields [APSC_DV-001995-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use locks to prevent race conditions when modifying bit fields [APSC_DV-001995-d]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-001995 The application must not be vulnerable to race conditions." ], "security-severity": "8" } }, { "id": "APSC_DV-001995-e", "name": "Do not use global variable with different locks set", "shortDescription": { "text": "Do not use global variable with different locks set" }, "fullDescription": { "text": "Do not use global variable with different locks set [APSC_DV-001995-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use global variable with different locks set [APSC_DV-001995-e]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-001995 The application must not be vulnerable to race conditions." ], "security-severity": "8" } }, { "id": "APSC_DV-001995-f", "name": "Avoid using thread-unsafe functions", "shortDescription": { "text": "Avoid using thread-unsafe functions" }, "fullDescription": { "text": "Avoid using thread-unsafe functions [APSC_DV-001995-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using thread-unsafe functions [APSC_DV-001995-f]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-001995 The application must not be vulnerable to race conditions." ], "security-severity": "8" } }, { "id": "APSC_DV-001995-g", "name": "Usage of functions prone to race is not allowed", "shortDescription": { "text": "Usage of functions prone to race is not allowed" }, "fullDescription": { "text": "Usage of functions prone to race is not allowed [APSC_DV-001995-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Usage of functions prone to race is not allowed [APSC_DV-001995-g]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-001995 The application must not be vulnerable to race conditions." ], "security-severity": "8" } }, { "id": "APSC_DV-001995-h", "name": "Avoid using the 'vfork()' function", "shortDescription": { "text": "Avoid using the 'vfork()' function" }, "fullDescription": { "text": "Avoid using the 'vfork()' function [APSC_DV-001995-h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using the 'vfork()' function [APSC_DV-001995-h]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-001995 The application must not be vulnerable to race conditions." ], "security-severity": "8" } }, { "id": "APSC_DV-001995-i", "name": "Properly define signal handlers", "shortDescription": { "text": "Properly define signal handlers" }, "fullDescription": { "text": "Properly define signal handlers [APSC_DV-001995-i]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly define signal handlers [APSC_DV-001995-i]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-001995 The application must not be vulnerable to race conditions." ], "security-severity": "8" } }, { "id": "APSC_DV-002520-a", "name": "Protect against environment injection", "shortDescription": { "text": "Protect against environment injection" }, "fullDescription": { "text": "Protect against environment injection [APSC_DV-002520-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against environment injection [APSC_DV-002520-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002520 The application must protect from canonical representation vulnerabilities." ], "security-severity": "8" } }, { "id": "APSC_DV-002520-b", "name": "Protect against file name injection", "shortDescription": { "text": "Protect against file name injection" }, "fullDescription": { "text": "Protect against file name injection [APSC_DV-002520-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against file name injection [APSC_DV-002520-b]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002520 The application must protect from canonical representation vulnerabilities." ], "security-severity": "8" } }, { "id": "APSC_DV-002520-c", "name": "Protect against SQL injection", "shortDescription": { "text": "Protect against SQL injection" }, "fullDescription": { "text": "Protect against SQL injection [APSC_DV-002520-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against SQL injection [APSC_DV-002520-c]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002520 The application must protect from canonical representation vulnerabilities." ], "security-severity": "8" } }, { "id": "APSC_DV-002520-d", "name": "Never use unfiltered data from an untrusted user as the format parameter", "shortDescription": { "text": "Never use unfiltered data from an untrusted user as the format parameter" }, "fullDescription": { "text": "Never use unfiltered data from an untrusted user as the format parameter [APSC_DV-002520-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Never use unfiltered data from an untrusted user as the format parameter [APSC_DV-002520-d]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002520 The application must protect from canonical representation vulnerabilities." ], "security-severity": "8" } }, { "id": "APSC_DV-002520-e", "name": "Avoid tainted data in array indexes", "shortDescription": { "text": "Avoid tainted data in array indexes" }, "fullDescription": { "text": "Avoid tainted data in array indexes [APSC_DV-002520-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid tainted data in array indexes [APSC_DV-002520-e]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002520 The application must protect from canonical representation vulnerabilities." ], "security-severity": "8" } }, { "id": "APSC_DV-002520-f", "name": "Avoid potential integer overflow\/underflow on tainted data", "shortDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data" }, "fullDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data [APSC_DV-002520-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid potential integer overflow\/underflow on tainted data [APSC_DV-002520-f]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002520 The application must protect from canonical representation vulnerabilities." ], "security-severity": "8" } }, { "id": "APSC_DV-002520-g", "name": "Avoid passing unvalidated binary data to log methods", "shortDescription": { "text": "Avoid passing unvalidated binary data to log methods" }, "fullDescription": { "text": "Avoid passing unvalidated binary data to log methods [APSC_DV-002520-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid passing unvalidated binary data to log methods [APSC_DV-002520-g]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002520 The application must protect from canonical representation vulnerabilities." ], "security-severity": "8" } }, { "id": "APSC_DV-002520-h", "name": "Protect against command injection", "shortDescription": { "text": "Protect against command injection" }, "fullDescription": { "text": "Protect against command injection [APSC_DV-002520-h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against command injection [APSC_DV-002520-h]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002520 The application must protect from canonical representation vulnerabilities." ], "security-severity": "8" } }, { "id": "APSC_DV-002520-i", "name": "Avoid printing tainted data on the output console", "shortDescription": { "text": "Avoid printing tainted data on the output console" }, "fullDescription": { "text": "Avoid printing tainted data on the output console [APSC_DV-002520-i]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid printing tainted data on the output console [APSC_DV-002520-i]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002520 The application must protect from canonical representation vulnerabilities." ], "security-severity": "8" } }, { "id": "APSC_DV-002520-j", "name": "Exclude unsanitized user input from format strings", "shortDescription": { "text": "Exclude unsanitized user input from format strings" }, "fullDescription": { "text": "Exclude unsanitized user input from format strings [APSC_DV-002520-j]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Exclude unsanitized user input from format strings [APSC_DV-002520-j]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002520 The application must protect from canonical representation vulnerabilities." ], "security-severity": "8" } }, { "id": "APSC_DV-002520-k", "name": "Untrusted data is used as a loop boundary", "shortDescription": { "text": "Untrusted data is used as a loop boundary" }, "fullDescription": { "text": "Untrusted data is used as a loop boundary [APSC_DV-002520-k]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Untrusted data is used as a loop boundary [APSC_DV-002520-k]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002520 The application must protect from canonical representation vulnerabilities." ], "security-severity": "8" } }, { "id": "APSC_DV-003235-a", "name": "The value returned by a POSIX library function that may return an error should be used", "shortDescription": { "text": "The value returned by a POSIX library function that may return an error should be used" }, "fullDescription": { "text": "The value returned by a POSIX library function that may return an error should be used [APSC_DV-003235-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value returned by a POSIX library function that may return an error should be used [APSC_DV-003235-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-003235 The application must not be subject to error handling vulnerabilities." ], "security-severity": "8" } }, { "id": "APSC_DV-003235-b", "name": "Empty 'catch' blocks should not be used", "shortDescription": { "text": "Empty 'catch' blocks should not be used" }, "fullDescription": { "text": "Empty 'catch' blocks should not be used [APSC_DV-003235-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Empty 'catch' blocks should not be used [APSC_DV-003235-b]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-003235 The application must not be subject to error handling vulnerabilities." ], "security-severity": "8" } }, { "id": "APSC_DV-002400-a", "name": "Exclude unsanitized user input from format strings", "shortDescription": { "text": "Exclude unsanitized user input from format strings" }, "fullDescription": { "text": "Exclude unsanitized user input from format strings [APSC_DV-002400-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Exclude unsanitized user input from format strings [APSC_DV-002400-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002400 The application must restrict the ability to launch Denial of Service (DoS) attacks against itself or other information systems." ], "security-severity": "8" } }, { "id": "APSC_DV-002400-b", "name": "The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception", "shortDescription": { "text": "The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" }, "fullDescription": { "text": "The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception [APSC_DV-002400-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception [APSC_DV-002400-b]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002400 The application must restrict the ability to launch Denial of Service (DoS) attacks against itself or other information systems." ], "security-severity": "8" } }, { "id": "APSC_DV-002400-c", "name": "Avoid using the 'vfork()' function", "shortDescription": { "text": "Avoid using the 'vfork()' function" }, "fullDescription": { "text": "Avoid using the 'vfork()' function [APSC_DV-002400-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using the 'vfork()' function [APSC_DV-002400-c]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002400 The application must restrict the ability to launch Denial of Service (DoS) attacks against itself or other information systems." ], "security-severity": "8" } }, { "id": "APSC_DV-002400-d", "name": "Avoid using thread-unsafe functions", "shortDescription": { "text": "Avoid using thread-unsafe functions" }, "fullDescription": { "text": "Avoid using thread-unsafe functions [APSC_DV-002400-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using thread-unsafe functions [APSC_DV-002400-d]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002400 The application must restrict the ability to launch Denial of Service (DoS) attacks against itself or other information systems." ], "security-severity": "8" } }, { "id": "APSC_DV-002290-a", "name": "Do not use the rand() function for generating pseudorandom numbers", "shortDescription": { "text": "Do not use the rand() function for generating pseudorandom numbers" }, "fullDescription": { "text": "Do not use the rand() function for generating pseudorandom numbers [APSC_DV-002290-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use the rand() function for generating pseudorandom numbers [APSC_DV-002290-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002290 The application must use the Federal Information Processing Standard (FIPS) 140-2-validated cryptographic modules and random number generator if the application implements encryption, key exchange, digital signature, and hash functionality." ], "security-severity": "8" } }, { "id": "APSC_DV-002290-b", "name": "Properly seed pseudorandom number generators", "shortDescription": { "text": "Properly seed pseudorandom number generators" }, "fullDescription": { "text": "Properly seed pseudorandom number generators [APSC_DV-002290-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly seed pseudorandom number generators [APSC_DV-002290-b]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002290 The application must use the Federal Information Processing Standard (FIPS) 140-2-validated cryptographic modules and random number generator if the application implements encryption, key exchange, digital signature, and hash functionality." ], "security-severity": "8" } }, { "id": "APSC_DV-002290-c", "name": "The 'random_shuffle' identifier should not be used", "shortDescription": { "text": "The 'random_shuffle' identifier should not be used" }, "fullDescription": { "text": "The 'random_shuffle' identifier should not be used [APSC_DV-002290-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'random_shuffle' identifier should not be used [APSC_DV-002290-c]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002290 The application must use the Federal Information Processing Standard (FIPS) 140-2-validated cryptographic modules and random number generator if the application implements encryption, key exchange, digital signature, and hash functionality." ], "security-severity": "8" } }, { "id": "APSC_DV-002290-d", "name": "The random number generator functions 'rand()' and 'srand()' should not be used", "shortDescription": { "text": "The random number generator functions 'rand()' and 'srand()' should not be used" }, "fullDescription": { "text": "The random number generator functions 'rand()' and 'srand()' should not be used [APSC_DV-002290-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The random number generator functions 'rand()' and 'srand()' should not be used [APSC_DV-002290-d]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002290 The application must use the Federal Information Processing Standard (FIPS) 140-2-validated cryptographic modules and random number generator if the application implements encryption, key exchange, digital signature, and hash functionality." ], "security-severity": "8" } }, { "id": "APSC_DV-002390-a", "name": "Disable resolving XML external entities (XXE) in libxerces-c", "shortDescription": { "text": "Disable resolving XML external entities (XXE) in libxerces-c" }, "fullDescription": { "text": "Disable resolving XML external entities (XXE) in libxerces-c [APSC_DV-002390-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Disable resolving XML external entities (XXE) in libxerces-c [APSC_DV-002390-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002390 XML-based applications must mitigate DoS attacks by using XML filters, parser options, or gateways." ], "security-severity": "8" } }, { "id": "APSC_DV-002390-b", "name": "Do not process structured text data natively", "shortDescription": { "text": "Do not process structured text data natively" }, "fullDescription": { "text": "Do not process structured text data natively [APSC_DV-002390-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not process structured text data natively [APSC_DV-002390-b]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002390 XML-based applications must mitigate DoS attacks by using XML filters, parser options, or gateways." ], "security-severity": "8" } }, { "id": "APSC_DV-002390-c", "name": "Do not use scanf and fscanf functions without specifying variable size in format string", "shortDescription": { "text": "Do not use scanf and fscanf functions without specifying variable size in format string" }, "fullDescription": { "text": "Do not use scanf and fscanf functions without specifying variable size in format string [APSC_DV-002390-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use scanf and fscanf functions without specifying variable size in format string [APSC_DV-002390-c]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002390 XML-based applications must mitigate DoS attacks by using XML filters, parser options, or gateways." ], "security-severity": "8" } }, { "id": "APSC_DV-002390-d", "name": "Do not use mbstowcs() function", "shortDescription": { "text": "Do not use mbstowcs() function" }, "fullDescription": { "text": "Do not use mbstowcs() function [APSC_DV-002390-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use mbstowcs() function [APSC_DV-002390-d]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002390 XML-based applications must mitigate DoS attacks by using XML filters, parser options, or gateways." ], "security-severity": "8" } }, { "id": "APSC_DV-002590-a", "name": "Avoid buffer overflow due to defining incorrect format limits", "shortDescription": { "text": "Avoid buffer overflow due to defining incorrect format limits" }, "fullDescription": { "text": "Avoid buffer overflow due to defining incorrect format limits [APSC_DV-002590-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer overflow due to defining incorrect format limits [APSC_DV-002590-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002590 The application must not be vulnerable to overflow attacks." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002590-b", "name": "Avoid overflow due to reading a not zero terminated string", "shortDescription": { "text": "Avoid overflow due to reading a not zero terminated string" }, "fullDescription": { "text": "Avoid overflow due to reading a not zero terminated string [APSC_DV-002590-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow due to reading a not zero terminated string [APSC_DV-002590-b]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002590 The application must not be vulnerable to overflow attacks." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002590-c", "name": "Avoid overflow when reading from a buffer", "shortDescription": { "text": "Avoid overflow when reading from a buffer" }, "fullDescription": { "text": "Avoid overflow when reading from a buffer [APSC_DV-002590-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when reading from a buffer [APSC_DV-002590-c]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002590 The application must not be vulnerable to overflow attacks." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002590-d", "name": "Avoid overflow when writing to a buffer", "shortDescription": { "text": "Avoid overflow when writing to a buffer" }, "fullDescription": { "text": "Avoid overflow when writing to a buffer [APSC_DV-002590-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when writing to a buffer [APSC_DV-002590-d]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002590 The application must not be vulnerable to overflow attacks." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002590-e", "name": "Avoid wraparounds when performing arithmetic integer operations", "shortDescription": { "text": "Avoid wraparounds when performing arithmetic integer operations" }, "fullDescription": { "text": "Avoid wraparounds when performing arithmetic integer operations [APSC_DV-002590-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid wraparounds when performing arithmetic integer operations [APSC_DV-002590-e]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002590 The application must not be vulnerable to overflow attacks." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002590-f", "name": "Prevent buffer overflows from tainted data", "shortDescription": { "text": "Prevent buffer overflows from tainted data" }, "fullDescription": { "text": "Prevent buffer overflows from tainted data [APSC_DV-002590-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Prevent buffer overflows from tainted data [APSC_DV-002590-f]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002590 The application must not be vulnerable to overflow attacks." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002590-g", "name": "Avoid potential integer overflow\/underflow on tainted data", "shortDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data" }, "fullDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data [APSC_DV-002590-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid potential integer overflow\/underflow on tainted data [APSC_DV-002590-g]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002590 The application must not be vulnerable to overflow attacks." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002590-h", "name": "Avoid buffer overflow from tainted data due to defining incorrect format limits", "shortDescription": { "text": "Avoid buffer overflow from tainted data due to defining incorrect format limits" }, "fullDescription": { "text": "Avoid buffer overflow from tainted data due to defining incorrect format limits [APSC_DV-002590-h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer overflow from tainted data due to defining incorrect format limits [APSC_DV-002590-h]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002590 The application must not be vulnerable to overflow attacks." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002590-i", "name": "Avoid buffer read overflow from tainted data", "shortDescription": { "text": "Avoid buffer read overflow from tainted data" }, "fullDescription": { "text": "Avoid buffer read overflow from tainted data [APSC_DV-002590-i]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer read overflow from tainted data [APSC_DV-002590-i]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002590 The application must not be vulnerable to overflow attacks." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002590-j", "name": "Avoid buffer write overflow from tainted data", "shortDescription": { "text": "Avoid buffer write overflow from tainted data" }, "fullDescription": { "text": "Avoid buffer write overflow from tainted data [APSC_DV-002590-j]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer write overflow from tainted data [APSC_DV-002590-j]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002590 The application must not be vulnerable to overflow attacks." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002590-k", "name": "Ensure the output buffer is large enough when using path manipulation functions", "shortDescription": { "text": "Ensure the output buffer is large enough when using path manipulation functions" }, "fullDescription": { "text": "Ensure the output buffer is large enough when using path manipulation functions [APSC_DV-002590-k]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure the output buffer is large enough when using path manipulation functions [APSC_DV-002590-k]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002590 The application must not be vulnerable to overflow attacks." ], "security-severity": "9.5" } }, { "id": "APSC_DV-000170-a", "name": "Do not use weak encryption functions", "shortDescription": { "text": "Do not use weak encryption functions" }, "fullDescription": { "text": "Do not use weak encryption functions [APSC_DV-000170-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use weak encryption functions [APSC_DV-000170-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-000170 The application must implement cryptographic mechanisms to protect the integrity of remote access sessions." ], "security-severity": "8" } }, { "id": "APSC_DV-001300-a", "name": "Protect against SQL injection", "shortDescription": { "text": "Protect against SQL injection" }, "fullDescription": { "text": "Protect against SQL injection [APSC_DV-001300-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against SQL injection [APSC_DV-001300-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-001300 The application must protect audit information from unauthorized deletion." ], "security-severity": "8" } }, { "id": "APSC_DV-001740-a", "name": "Avoid passing sensitive data to functions that write to log files", "shortDescription": { "text": "Avoid passing sensitive data to functions that write to log files" }, "fullDescription": { "text": "Avoid passing sensitive data to functions that write to log files [APSC_DV-001740-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid passing sensitive data to functions that write to log files [APSC_DV-001740-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-001740 The application must only store cryptographic representations of passwords." ], "security-severity": "9.5" } }, { "id": "APSC_DV-000650-a", "name": "Do not print potentially sensitive information, resulting from an application error into exception messages", "shortDescription": { "text": "Do not print potentially sensitive information, resulting from an application error into exception messages" }, "fullDescription": { "text": "Do not print potentially sensitive information, resulting from an application error into exception messages [APSC_DV-000650-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not print potentially sensitive information, resulting from an application error into exception messages [APSC_DV-000650-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-000650 The application must not write sensitive data into the application logs." ], "security-severity": "8" } }, { "id": "APSC_DV-001860-a", "name": "Do not use weak encryption functions", "shortDescription": { "text": "Do not use weak encryption functions" }, "fullDescription": { "text": "Do not use weak encryption functions [APSC_DV-001860-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use weak encryption functions [APSC_DV-001860-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-001860 The application must use mechanisms meeting the requirements of applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance for authentication to a cryptographic module." ], "security-severity": "8" } }, { "id": "APSC_DV-002470-a", "name": "Avoid passing sensitive data to functions that write to log files", "shortDescription": { "text": "Avoid passing sensitive data to functions that write to log files" }, "fullDescription": { "text": "Avoid passing sensitive data to functions that write to log files [APSC_DV-002470-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid passing sensitive data to functions that write to log files [APSC_DV-002470-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002470 The application must maintain the confidentiality and integrity of information during reception." ], "security-severity": "8" } }, { "id": "APSC_DV-002350-a", "name": "Do not use weak encryption functions", "shortDescription": { "text": "Do not use weak encryption functions" }, "fullDescription": { "text": "Do not use weak encryption functions [APSC_DV-002350-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use weak encryption functions [APSC_DV-002350-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002350 The application must use appropriate cryptography in order to protect stored DoD information when required by the information owner or DoD policy." ], "security-severity": "8" } }, { "id": "APSC_DV-002570-a", "name": "Avoid passing sensitive data to functions that write to log files", "shortDescription": { "text": "Avoid passing sensitive data to functions that write to log files" }, "fullDescription": { "text": "Avoid passing sensitive data to functions that write to log files [APSC_DV-002570-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid passing sensitive data to functions that write to log files [APSC_DV-002570-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002570 The application must generate error messages that provide information necessary for corrective actions without revealing information that could be exploited by adversaries." ], "security-severity": "8" } }, { "id": "APSC_DV-002570-b", "name": "Do not print potentially sensitive information, resulting from an application error into exception messages", "shortDescription": { "text": "Do not print potentially sensitive information, resulting from an application error into exception messages" }, "fullDescription": { "text": "Do not print potentially sensitive information, resulting from an application error into exception messages [APSC_DV-002570-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not print potentially sensitive information, resulting from an application error into exception messages [APSC_DV-002570-b]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002570 The application must generate error messages that provide information necessary for corrective actions without revealing information that could be exploited by adversaries." ], "security-severity": "8" } }, { "id": "APSC_DV-002010-a", "name": "Do not use weak encryption functions", "shortDescription": { "text": "Do not use weak encryption functions" }, "fullDescription": { "text": "Do not use weak encryption functions [APSC_DV-002010-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use weak encryption functions [APSC_DV-002010-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002010 The application must implement NSA-approved cryptography to protect classified information in accordance with applicable federal laws, Executive Orders, directives, policies, regulations, and standards." ], "security-severity": "8" } }, { "id": "APSC_DV-002550-a", "name": "Protect against environment injection", "shortDescription": { "text": "Protect against environment injection" }, "fullDescription": { "text": "Protect against environment injection [APSC_DV-002550-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against environment injection [APSC_DV-002550-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002550 The application must not be vulnerable to XML-oriented attacks." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002550-b", "name": "Protect against file name injection", "shortDescription": { "text": "Protect against file name injection" }, "fullDescription": { "text": "Protect against file name injection [APSC_DV-002550-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against file name injection [APSC_DV-002550-b]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002550 The application must not be vulnerable to XML-oriented attacks." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002550-c", "name": "Protect against SQL injection", "shortDescription": { "text": "Protect against SQL injection" }, "fullDescription": { "text": "Protect against SQL injection [APSC_DV-002550-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against SQL injection [APSC_DV-002550-c]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002550 The application must not be vulnerable to XML-oriented attacks." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002550-d", "name": "Never use unfiltered data from an untrusted user as the format parameter", "shortDescription": { "text": "Never use unfiltered data from an untrusted user as the format parameter" }, "fullDescription": { "text": "Never use unfiltered data from an untrusted user as the format parameter [APSC_DV-002550-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Never use unfiltered data from an untrusted user as the format parameter [APSC_DV-002550-d]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002550 The application must not be vulnerable to XML-oriented attacks." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002550-e", "name": "Avoid tainted data in array indexes", "shortDescription": { "text": "Avoid tainted data in array indexes" }, "fullDescription": { "text": "Avoid tainted data in array indexes [APSC_DV-002550-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid tainted data in array indexes [APSC_DV-002550-e]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002550 The application must not be vulnerable to XML-oriented attacks." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002550-f", "name": "Avoid potential integer overflow\/underflow on tainted data", "shortDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data" }, "fullDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data [APSC_DV-002550-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid potential integer overflow\/underflow on tainted data [APSC_DV-002550-f]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002550 The application must not be vulnerable to XML-oriented attacks." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002550-g", "name": "Avoid passing unvalidated binary data to log methods", "shortDescription": { "text": "Avoid passing unvalidated binary data to log methods" }, "fullDescription": { "text": "Avoid passing unvalidated binary data to log methods [APSC_DV-002550-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid passing unvalidated binary data to log methods [APSC_DV-002550-g]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002550 The application must not be vulnerable to XML-oriented attacks." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002550-h", "name": "Protect against command injection", "shortDescription": { "text": "Protect against command injection" }, "fullDescription": { "text": "Protect against command injection [APSC_DV-002550-h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against command injection [APSC_DV-002550-h]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002550 The application must not be vulnerable to XML-oriented attacks." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002550-i", "name": "Avoid printing tainted data on the output console", "shortDescription": { "text": "Avoid printing tainted data on the output console" }, "fullDescription": { "text": "Avoid printing tainted data on the output console [APSC_DV-002550-i]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid printing tainted data on the output console [APSC_DV-002550-i]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002550 The application must not be vulnerable to XML-oriented attacks." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002550-j", "name": "Exclude unsanitized user input from format strings", "shortDescription": { "text": "Exclude unsanitized user input from format strings" }, "fullDescription": { "text": "Exclude unsanitized user input from format strings [APSC_DV-002550-j]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Exclude unsanitized user input from format strings [APSC_DV-002550-j]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002550 The application must not be vulnerable to XML-oriented attacks." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002550-k", "name": "Untrusted data is used as a loop boundary", "shortDescription": { "text": "Untrusted data is used as a loop boundary" }, "fullDescription": { "text": "Untrusted data is used as a loop boundary [APSC_DV-002550-k]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Untrusted data is used as a loop boundary [APSC_DV-002550-k]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002550 The application must not be vulnerable to XML-oriented attacks." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002530-a", "name": "Protect against environment injection", "shortDescription": { "text": "Protect against environment injection" }, "fullDescription": { "text": "Protect against environment injection [APSC_DV-002530-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against environment injection [APSC_DV-002530-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002530 The application must validate all input." ], "security-severity": "8" } }, { "id": "APSC_DV-002530-b", "name": "Protect against file name injection", "shortDescription": { "text": "Protect against file name injection" }, "fullDescription": { "text": "Protect against file name injection [APSC_DV-002530-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against file name injection [APSC_DV-002530-b]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002530 The application must validate all input." ], "security-severity": "8" } }, { "id": "APSC_DV-002530-c", "name": "Protect against SQL injection", "shortDescription": { "text": "Protect against SQL injection" }, "fullDescription": { "text": "Protect against SQL injection [APSC_DV-002530-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against SQL injection [APSC_DV-002530-c]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002530 The application must validate all input." ], "security-severity": "8" } }, { "id": "APSC_DV-002530-d", "name": "Never use unfiltered data from an untrusted user as the format parameter", "shortDescription": { "text": "Never use unfiltered data from an untrusted user as the format parameter" }, "fullDescription": { "text": "Never use unfiltered data from an untrusted user as the format parameter [APSC_DV-002530-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Never use unfiltered data from an untrusted user as the format parameter [APSC_DV-002530-d]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002530 The application must validate all input." ], "security-severity": "8" } }, { "id": "APSC_DV-002530-e", "name": "Avoid tainted data in array indexes", "shortDescription": { "text": "Avoid tainted data in array indexes" }, "fullDescription": { "text": "Avoid tainted data in array indexes [APSC_DV-002530-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid tainted data in array indexes [APSC_DV-002530-e]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002530 The application must validate all input." ], "security-severity": "8" } }, { "id": "APSC_DV-002530-f", "name": "Avoid potential integer overflow\/underflow on tainted data", "shortDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data" }, "fullDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data [APSC_DV-002530-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid potential integer overflow\/underflow on tainted data [APSC_DV-002530-f]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002530 The application must validate all input." ], "security-severity": "8" } }, { "id": "APSC_DV-002530-g", "name": "Avoid passing unvalidated binary data to log methods", "shortDescription": { "text": "Avoid passing unvalidated binary data to log methods" }, "fullDescription": { "text": "Avoid passing unvalidated binary data to log methods [APSC_DV-002530-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid passing unvalidated binary data to log methods [APSC_DV-002530-g]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002530 The application must validate all input." ], "security-severity": "8" } }, { "id": "APSC_DV-002530-h", "name": "Protect against command injection", "shortDescription": { "text": "Protect against command injection" }, "fullDescription": { "text": "Protect against command injection [APSC_DV-002530-h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against command injection [APSC_DV-002530-h]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002530 The application must validate all input." ], "security-severity": "8" } }, { "id": "APSC_DV-002530-i", "name": "Avoid printing tainted data on the output console", "shortDescription": { "text": "Avoid printing tainted data on the output console" }, "fullDescription": { "text": "Avoid printing tainted data on the output console [APSC_DV-002530-i]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid printing tainted data on the output console [APSC_DV-002530-i]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002530 The application must validate all input." ], "security-severity": "8" } }, { "id": "APSC_DV-002530-j", "name": "Exclude unsanitized user input from format strings", "shortDescription": { "text": "Exclude unsanitized user input from format strings" }, "fullDescription": { "text": "Exclude unsanitized user input from format strings [APSC_DV-002530-j]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Exclude unsanitized user input from format strings [APSC_DV-002530-j]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002530 The application must validate all input." ], "security-severity": "8" } }, { "id": "APSC_DV-002530-k", "name": "Untrusted data is used as a loop boundary", "shortDescription": { "text": "Untrusted data is used as a loop boundary" }, "fullDescription": { "text": "Untrusted data is used as a loop boundary [APSC_DV-002530-k]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Untrusted data is used as a loop boundary [APSC_DV-002530-k]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002530 The application must validate all input." ], "security-severity": "8" } }, { "id": "APSC_DV-002510-a", "name": "Protect against command injection", "shortDescription": { "text": "Protect against command injection" }, "fullDescription": { "text": "Protect against command injection [APSC_DV-002510-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against command injection [APSC_DV-002510-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002510 The application must protect from command injection." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002480-a", "name": "Do not print potentially sensitive information, resulting from an application error into exception messages", "shortDescription": { "text": "Do not print potentially sensitive information, resulting from an application error into exception messages" }, "fullDescription": { "text": "Do not print potentially sensitive information, resulting from an application error into exception messages [APSC_DV-002480-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not print potentially sensitive information, resulting from an application error into exception messages [APSC_DV-002480-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002480 The application must not disclose unnecessary information to users." ], "security-severity": "8" } }, { "id": "APSC_DV-001290-a", "name": "Protect against SQL injection", "shortDescription": { "text": "Protect against SQL injection" }, "fullDescription": { "text": "Protect against SQL injection [APSC_DV-001290-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against SQL injection [APSC_DV-001290-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-001290 The application must protect audit information from unauthorized modification." ], "security-severity": "8" } }, { "id": "APSC_DV-001290-b", "name": "Untrusted data is used as a loop boundary", "shortDescription": { "text": "Untrusted data is used as a loop boundary" }, "fullDescription": { "text": "Untrusted data is used as a loop boundary [APSC_DV-001290-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Untrusted data is used as a loop boundary [APSC_DV-001290-b]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-001290 The application must protect audit information from unauthorized modification." ], "security-severity": "8" } }, { "id": "APSC_DV-001290-c", "name": "Avoid passing user input into methods as parameters", "shortDescription": { "text": "Avoid passing user input into methods as parameters" }, "fullDescription": { "text": "Avoid passing user input into methods as parameters [APSC_DV-001290-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid passing user input into methods as parameters [APSC_DV-001290-c]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-001290 The application must protect audit information from unauthorized modification." ], "security-severity": "8" } }, { "id": "APSC_DV-001290-d", "name": "Avoid using unsecured shell functions that may be affected by shell metacharacters", "shortDescription": { "text": "Avoid using unsecured shell functions that may be affected by shell metacharacters" }, "fullDescription": { "text": "Avoid using unsecured shell functions that may be affected by shell metacharacters [APSC_DV-001290-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using unsecured shell functions that may be affected by shell metacharacters [APSC_DV-001290-d]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-001290 The application must protect audit information from unauthorized modification." ], "security-severity": "8" } }, { "id": "AUTOSAR-A16_6_1-a", "name": "#error directive shall not be used", "shortDescription": { "text": "#error directive shall not be used" }, "fullDescription": { "text": "#error directive shall not be used [AUTOSAR-A16_6_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "#error directive shall not be used [AUTOSAR-A16_6_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A16-6-1 #error directive shall not be used" ] } }, { "id": "AUTOSAR-A7_3_1-a", "name": "Member functions declared in derived class should not hide functions declared in base classes", "shortDescription": { "text": "Member functions declared in derived class should not hide functions declared in base classes" }, "fullDescription": { "text": "Member functions declared in derived class should not hide functions declared in base classes [AUTOSAR-A7_3_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Member functions declared in derived class should not hide functions declared in base classes [AUTOSAR-A7_3_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A7-3-1 All overloads of a function shall be visible from where it is called" ] } }, { "id": "AUTOSAR-M8_5_2-a", "name": "The initializer for an aggregate or union shall be enclosed in braces", "shortDescription": { "text": "The initializer for an aggregate or union shall be enclosed in braces" }, "fullDescription": { "text": "The initializer for an aggregate or union shall be enclosed in braces [AUTOSAR-M8_5_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The initializer for an aggregate or union shall be enclosed in braces [AUTOSAR-M8_5_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M8-5-2 Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" ] } }, { "id": "AUTOSAR-M8_5_2-b", "name": "Arrays shall not be partially initialized", "shortDescription": { "text": "Arrays shall not be partially initialized" }, "fullDescription": { "text": "Arrays shall not be partially initialized [AUTOSAR-M8_5_2-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Arrays shall not be partially initialized [AUTOSAR-M8_5_2-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M8-5-2 Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" ] } }, { "id": "AUTOSAR-M8_5_2-c", "name": "The non-zero initialization of structures requires an explicit initializer for each element", "shortDescription": { "text": "The non-zero initialization of structures requires an explicit initializer for each element" }, "fullDescription": { "text": "The non-zero initialization of structures requires an explicit initializer for each element [AUTOSAR-M8_5_2-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The non-zero initialization of structures requires an explicit initializer for each element [AUTOSAR-M8_5_2-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M8-5-2 Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" ] } }, { "id": "AUTOSAR-A6_5_1-a", "name": "A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used", "shortDescription": { "text": "A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" }, "fullDescription": { "text": "A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used [AUTOSAR-A6_5_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used [AUTOSAR-A6_5_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A6-5-1 A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" ] } }, { "id": "AUTOSAR-A25_4_1-a", "name": "For associative containers never use comparison function returning true for equal values", "shortDescription": { "text": "For associative containers never use comparison function returning true for equal values" }, "fullDescription": { "text": "For associative containers never use comparison function returning true for equal values [AUTOSAR-A25_4_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "For associative containers never use comparison function returning true for equal values [AUTOSAR-A25_4_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A25-4-1 Ordering predicates used with associative containers and STL sorting and related algorithms shall adhere to a strict weak ordering relation" ] } }, { "id": "AUTOSAR-M15_1_1-a", "name": "The assignment-expression of a throw statement shall not itself cause an exception to be thrown", "shortDescription": { "text": "The assignment-expression of a throw statement shall not itself cause an exception to be thrown" }, "fullDescription": { "text": "The assignment-expression of a throw statement shall not itself cause an exception to be thrown [AUTOSAR-M15_1_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The assignment-expression of a throw statement shall not itself cause an exception to be thrown [AUTOSAR-M15_1_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M15-1-1 The assignment-expression of a throw statement shall not itself cause an exception to be thrown" ] } }, { "id": "AUTOSAR-M15_1_3-a", "name": "An empty throw shall only be used in the compound-statement of a catch handler", "shortDescription": { "text": "An empty throw shall only be used in the compound-statement of a catch handler" }, "fullDescription": { "text": "An empty throw shall only be used in the compound-statement of a catch handler [AUTOSAR-M15_1_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An empty throw shall only be used in the compound-statement of a catch handler [AUTOSAR-M15_1_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M15-1-3 An empty throw (throw;) shall only be used in the compound statement of a catch handler" ] } }, { "id": "AUTOSAR-M15_1_2-a", "name": "NULL shall not be thrown explicitly", "shortDescription": { "text": "NULL shall not be thrown explicitly" }, "fullDescription": { "text": "NULL shall not be thrown explicitly [AUTOSAR-M15_1_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "NULL shall not be thrown explicitly [AUTOSAR-M15_1_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M15-1-2 NULL shall not be thrown explicitly" ] } }, { "id": "AUTOSAR-A12_7_1-a", "name": "Define special members as =default when the behavior is equivalent to the compiler's behavior", "shortDescription": { "text": "Define special members as =default when the behavior is equivalent to the compiler's behavior" }, "fullDescription": { "text": "Define special members as =default when the behavior is equivalent to the compiler's behavior [AUTOSAR-A12_7_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Define special members as =default when the behavior is equivalent to the compiler's behavior [AUTOSAR-A12_7_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A12-7-1 If the behavior of a user-defined special member function is identical to implicitly defined special member function, then it shall be defined \"=default\" or be left undefined" ] } }, { "id": "AUTOSAR-M5_3_2-a", "name": "The unary minus operator shall not be applied to an expression whose underlying type is unsigned", "shortDescription": { "text": "The unary minus operator shall not be applied to an expression whose underlying type is unsigned" }, "fullDescription": { "text": "The unary minus operator shall not be applied to an expression whose underlying type is unsigned [AUTOSAR-M5_3_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The unary minus operator shall not be applied to an expression whose underlying type is unsigned [AUTOSAR-M5_3_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-3-2 The unary minus operator shall not be applied to an expression whose underlying type is unsigned" ] } }, { "id": "AUTOSAR-M5_3_1-a", "name": "Each operand of the ! operator, the logical && or the logical || operators shall have type bool", "shortDescription": { "text": "Each operand of the ! operator, the logical && or the logical || operators shall have type bool" }, "fullDescription": { "text": "Each operand of the ! operator, the logical && or the logical || operators shall have type bool [AUTOSAR-M5_3_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Each operand of the ! operator, the logical && or the logical || operators shall have type bool [AUTOSAR-M5_3_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-3-1 Each operand of the ! operator, the logical && or the logical || operators shall have type bool" ] } }, { "id": "AUTOSAR-M5_3_4-a", "name": "The operand of the sizeof operator shall not contain any expression which has side effects", "shortDescription": { "text": "The operand of the sizeof operator shall not contain any expression which has side effects" }, "fullDescription": { "text": "The operand of the sizeof operator shall not contain any expression which has side effects [AUTOSAR-M5_3_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The operand of the sizeof operator shall not contain any expression which has side effects [AUTOSAR-M5_3_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-3-4 Evaluation of the operand to the sizeof operator shall not contain side effects" ] } }, { "id": "AUTOSAR-M5_3_4-b", "name": "Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator", "shortDescription": { "text": "Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" }, "fullDescription": { "text": "Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator [AUTOSAR-M5_3_4-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator [AUTOSAR-M5_3_4-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-3-4 Evaluation of the operand to the sizeof operator shall not contain side effects" ] } }, { "id": "AUTOSAR-M5_3_4-c", "name": "The function call that causes the side effect shall not be the operand of the sizeof operator", "shortDescription": { "text": "The function call that causes the side effect shall not be the operand of the sizeof operator" }, "fullDescription": { "text": "The function call that causes the side effect shall not be the operand of the sizeof operator [AUTOSAR-M5_3_4-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The function call that causes the side effect shall not be the operand of the sizeof operator [AUTOSAR-M5_3_4-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-3-4 Evaluation of the operand to the sizeof operator shall not contain side effects" ] } }, { "id": "AUTOSAR-M5_3_3-a", "name": "The unary & operator shall not be overloaded", "shortDescription": { "text": "The unary & operator shall not be overloaded" }, "fullDescription": { "text": "The unary & operator shall not be overloaded [AUTOSAR-M5_3_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The unary & operator shall not be overloaded [AUTOSAR-M5_3_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-3-3 The unary & operator shall not be overloaded" ] } }, { "id": "AUTOSAR-A13_5_2-a", "name": "User-conversion cast operators should be made explicit", "shortDescription": { "text": "User-conversion cast operators should be made explicit" }, "fullDescription": { "text": "User-conversion cast operators should be made explicit [AUTOSAR-A13_5_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "User-conversion cast operators should be made explicit [AUTOSAR-A13_5_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A13-5-2 All user-defined conversion operators shall be defined explicit" ] } }, { "id": "AUTOSAR-A13_5_3-a", "name": "Do not use user-defined conversion functions", "shortDescription": { "text": "Do not use user-defined conversion functions" }, "fullDescription": { "text": "Do not use user-defined conversion functions [AUTOSAR-A13_5_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use user-defined conversion functions [AUTOSAR-A13_5_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A13-5-3 User-defined conversion operators should not be used" ] } }, { "id": "AUTOSAR-A6_6_1-a", "name": "The goto statement shall not be used", "shortDescription": { "text": "The goto statement shall not be used" }, "fullDescription": { "text": "The goto statement shall not be used [AUTOSAR-A6_6_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The goto statement shall not be used [AUTOSAR-A6_6_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A6-6-1 The goto statement shall not be used" ] } }, { "id": "AUTOSAR-M27_0_1-a", "name": "The input\/output library stdio.h shall not be used", "shortDescription": { "text": "The input\/output library stdio.h shall not be used" }, "fullDescription": { "text": "The input\/output library stdio.h shall not be used [AUTOSAR-M27_0_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The input\/output library stdio.h shall not be used [AUTOSAR-M27_0_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M27-0-1 The stream input\/output library <cstdio> shall not be used" ] } }, { "id": "AUTOSAR-A13_5_1-a", "name": "When overloading the subscript operator (operator[]), implement both const and non-const versions", "shortDescription": { "text": "When overloading the subscript operator (operator[]), implement both const and non-const versions" }, "fullDescription": { "text": "When overloading the subscript operator (operator[]), implement both const and non-const versions [AUTOSAR-A13_5_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "When overloading the subscript operator (operator[]), implement both const and non-const versions [AUTOSAR-A13_5_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A13-5-1 If \"operator[]\" is to be overloaded with a non-const version, const version shall also be implemented" ] } }, { "id": "AUTOSAR-A5_16_1-a", "name": "The conditional operator should not be used as a sub-expression", "shortDescription": { "text": "The conditional operator should not be used as a sub-expression" }, "fullDescription": { "text": "The conditional operator should not be used as a sub-expression [AUTOSAR-A5_16_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The conditional operator should not be used as a sub-expression [AUTOSAR-A5_16_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-16-1 The ternary conditional operator shall not be used as a sub-expression" ] } }, { "id": "AUTOSAR-A13_5_4-b", "name": "If two opposite equality operators ('==', '!=') are defined in a class, one shall be defined in terms of the other", "shortDescription": { "text": "If two opposite equality operators ('==', '!=') are defined in a class, one shall be defined in terms of the other" }, "fullDescription": { "text": "If two opposite equality operators ('==', '!=') are defined in a class, one shall be defined in terms of the other [AUTOSAR-A13_5_4-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If two opposite equality operators ('==', '!=') are defined in a class, one shall be defined in terms of the other [AUTOSAR-A13_5_4-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A13-5-4 If two opposite operators are defined, one shall be defined in terms of the other" ] } }, { "id": "AUTOSAR-A13_5_5-a", "name": "Comparison operators shall be non-member functions", "shortDescription": { "text": "Comparison operators shall be non-member functions" }, "fullDescription": { "text": "Comparison operators shall be non-member functions [AUTOSAR-A13_5_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Comparison operators shall be non-member functions [AUTOSAR-A13_5_5-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A13-5-5 Comparison operators shall be non-member functions with identical parameter types and noexcept" ] } }, { "id": "AUTOSAR-A13_5_5-b", "name": "Comparison operators shall be non-member functions with identical parameter types and noexcept", "shortDescription": { "text": "Comparison operators shall be non-member functions with identical parameter types and noexcept" }, "fullDescription": { "text": "Comparison operators shall be non-member functions with identical parameter types and noexcept [AUTOSAR-A13_5_5-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Comparison operators shall be non-member functions with identical parameter types and noexcept [AUTOSAR-A13_5_5-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A13-5-5 Comparison operators shall be non-member functions with identical parameter types and noexcept" ] } }, { "id": "AUTOSAR-A23_0_2-a", "name": "Do not modify container while iterating over it", "shortDescription": { "text": "Do not modify container while iterating over it" }, "fullDescription": { "text": "Do not modify container while iterating over it [AUTOSAR-A23_0_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not modify container while iterating over it [AUTOSAR-A23_0_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A23-0-2 Elements of a container shall only be accessed via valid references, iterators, and pointers" ] } }, { "id": "AUTOSAR-A23_0_2-b", "name": "Use valid references, pointers, and iterators to reference elements of a basic_string", "shortDescription": { "text": "Use valid references, pointers, and iterators to reference elements of a basic_string" }, "fullDescription": { "text": "Use valid references, pointers, and iterators to reference elements of a basic_string [AUTOSAR-A23_0_2-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use valid references, pointers, and iterators to reference elements of a basic_string [AUTOSAR-A23_0_2-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A23-0-2 Elements of a container shall only be accessed via valid references, iterators, and pointers" ] } }, { "id": "AUTOSAR-A15_1_4-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [AUTOSAR-A15_1_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure resources are freed [AUTOSAR-A15_1_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-1-4 If a function exits with an exception, then before a throw, the function shall place all objects\/resources that the function constructed in valid states or it shall delete them" ] } }, { "id": "AUTOSAR-A23_0_1-a", "name": "Use const container calls when the result is immediately converted to a const iterator", "shortDescription": { "text": "Use const container calls when the result is immediately converted to a const iterator" }, "fullDescription": { "text": "Use const container calls when the result is immediately converted to a const iterator [AUTOSAR-A23_0_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use const container calls when the result is immediately converted to a const iterator [AUTOSAR-A23_0_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A23-0-1 An iterator shall not be implicitly converted to const_iterator" ] } }, { "id": "AUTOSAR-M4_5_3-a", "name": "Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary & operator", "shortDescription": { "text": "Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary & operator" }, "fullDescription": { "text": "Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary & operator [AUTOSAR-M4_5_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary & operator [AUTOSAR-M4_5_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M4-5-3 Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary & operator" ] } }, { "id": "AUTOSAR-A15_1_5-a", "name": "Do not throw an exception across execution boundaries", "shortDescription": { "text": "Do not throw an exception across execution boundaries" }, "fullDescription": { "text": "Do not throw an exception across execution boundaries [AUTOSAR-A15_1_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not throw an exception across execution boundaries [AUTOSAR-A15_1_5-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-1-5 Exceptions shall not be thrown across execution boundaries" ] } }, { "id": "AUTOSAR-M5_17_1-a", "name": "The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator", "shortDescription": { "text": "The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" }, "fullDescription": { "text": "The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator [AUTOSAR-M5_17_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator [AUTOSAR-M5_17_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-17-1 The semantic equivalence between a binary operator and its assignment operator form shall be preserved" ] } }, { "id": "AUTOSAR-A15_1_2-a", "name": "An exception object should not have pointer type", "shortDescription": { "text": "An exception object should not have pointer type" }, "fullDescription": { "text": "An exception object should not have pointer type [AUTOSAR-A15_1_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An exception object should not have pointer type [AUTOSAR-A15_1_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-1-2 An exception object shall not be a pointer" ] } }, { "id": "AUTOSAR-M4_5_1-a", "name": "Expressions that are effectively Boolean should not be used as operands to operators other than (&&, ||, !, =, ==, !=, ?:)", "shortDescription": { "text": "Expressions that are effectively Boolean should not be used as operands to operators other than (&&, ||, !, =, ==, !=, ?:)" }, "fullDescription": { "text": "Expressions that are effectively Boolean should not be used as operands to operators other than (&&, ||, !, =, ==, !=, ?:) [AUTOSAR-M4_5_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Expressions that are effectively Boolean should not be used as operands to operators other than (&&, ||, !, =, ==, !=, ?:) [AUTOSAR-M4_5_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M4-5-1 Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &&, ||, !, the equality operators == and !=, the unary & operator, and the conditional operator" ] } }, { "id": "AUTOSAR-M0_1_10-a", "name": "Every defined function with external linkage shall be used at least once", "shortDescription": { "text": "Every defined function with external linkage shall be used at least once" }, "fullDescription": { "text": "Every defined function with external linkage shall be used at least once [AUTOSAR-M0_1_10-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Every defined function with external linkage shall be used at least once [AUTOSAR-M0_1_10-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-10 Every defined function should be called at least once" ] } }, { "id": "AUTOSAR-M0_1_10-b", "name": "Every defined function with internal linkage shall be used at least once", "shortDescription": { "text": "Every defined function with internal linkage shall be used at least once" }, "fullDescription": { "text": "Every defined function with internal linkage shall be used at least once [AUTOSAR-M0_1_10-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Every defined function with internal linkage shall be used at least once [AUTOSAR-M0_1_10-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-10 Every defined function should be called at least once" ] } }, { "id": "AUTOSAR-A15_1_1-a", "name": "Only use instances of std::exception for exceptions", "shortDescription": { "text": "Only use instances of std::exception for exceptions" }, "fullDescription": { "text": "Only use instances of std::exception for exceptions [AUTOSAR-A15_1_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Only use instances of std::exception for exceptions [AUTOSAR-A15_1_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-1-1 Only instances of types derived from std::exception shall be thrown" ] } }, { "id": "AUTOSAR-A10_4_1-a", "name": "Hierarchies should be based on abstract classes", "shortDescription": { "text": "Hierarchies should be based on abstract classes" }, "fullDescription": { "text": "Hierarchies should be based on abstract classes [AUTOSAR-A10_4_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hierarchies should be based on abstract classes [AUTOSAR-A10_4_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A10-4-1 Hierarchies should be based on interface classes" ] } }, { "id": "AUTOSAR-A16_7_1-a", "name": "The #pragma directive shall not be used", "shortDescription": { "text": "The #pragma directive shall not be used" }, "fullDescription": { "text": "The #pragma directive shall not be used [AUTOSAR-A16_7_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The #pragma directive shall not be used [AUTOSAR-A16_7_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A16-7-1 The #pragma directive shall not be used" ] } }, { "id": "AUTOSAR-A11_0_1-a", "name": "A non-POD type should be defined as class", "shortDescription": { "text": "A non-POD type should be defined as class" }, "fullDescription": { "text": "A non-POD type should be defined as class [AUTOSAR-A11_0_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A non-POD type should be defined as class [AUTOSAR-A11_0_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A11-0-1 A non-POD type should be defined as class" ] } }, { "id": "AUTOSAR-A11_0_2-a", "name": "Structs should only contain public data members and should not be a base or inherit", "shortDescription": { "text": "Structs should only contain public data members and should not be a base or inherit" }, "fullDescription": { "text": "Structs should only contain public data members and should not be a base or inherit [AUTOSAR-A11_0_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Structs should only contain public data members and should not be a base or inherit [AUTOSAR-A11_0_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A11-0-2 A type defined as struct shall: (1) provide only public data members, (2) not provide any special member functions or methods, (3) not be a base of another struct or class, (4) not inherit from another struct or class" ] } }, { "id": "AUTOSAR-A7_2_3-a", "name": "Prefer Scoped Enums to Unscoped Enums", "shortDescription": { "text": "Prefer Scoped Enums to Unscoped Enums" }, "fullDescription": { "text": "Prefer Scoped Enums to Unscoped Enums [AUTOSAR-A7_2_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Prefer Scoped Enums to Unscoped Enums [AUTOSAR-A7_2_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A7-2-3 Enumerations shall be declared as scoped enum classes" ] } }, { "id": "AUTOSAR-M8_4_4-a", "name": "A function identifier shall only be used with either a preceding '&', or with a parenthesised parameter list, which may be empty", "shortDescription": { "text": "A function identifier shall only be used with either a preceding '&', or with a parenthesised parameter list, which may be empty" }, "fullDescription": { "text": "A function identifier shall only be used with either a preceding '&', or with a parenthesised parameter list, which may be empty [AUTOSAR-M8_4_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A function identifier shall only be used with either a preceding '&', or with a parenthesised parameter list, which may be empty [AUTOSAR-M8_4_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &" ] } }, { "id": "AUTOSAR-A7_2_2-a", "name": "Use an explicit enumeration base and ensure that it is large enough to store all enumerators", "shortDescription": { "text": "Use an explicit enumeration base and ensure that it is large enough to store all enumerators" }, "fullDescription": { "text": "Use an explicit enumeration base and ensure that it is large enough to store all enumerators [AUTOSAR-A7_2_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use an explicit enumeration base and ensure that it is large enough to store all enumerators [AUTOSAR-A7_2_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A7-2-2 Enumeration underlying base type shall be explicitly defined" ] } }, { "id": "AUTOSAR-A7_2_1-a", "name": "An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration", "shortDescription": { "text": "An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" }, "fullDescription": { "text": "An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration [AUTOSAR-A7_2_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration [AUTOSAR-A7_2_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A7-2-1 An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" ] } }, { "id": "AUTOSAR-M8_4_2-a", "name": "The identifiers used in the declaration and definition of a function shall be identical", "shortDescription": { "text": "The identifiers used in the declaration and definition of a function shall be identical" }, "fullDescription": { "text": "The identifiers used in the declaration and definition of a function shall be identical [AUTOSAR-M8_4_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The identifiers used in the declaration and definition of a function shall be identical [AUTOSAR-M8_4_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M8-4-2 The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration" ] } }, { "id": "AUTOSAR-A2_7_1-a", "name": "Line-splicing shall not be used in \/\/ comments", "shortDescription": { "text": "Line-splicing shall not be used in \/\/ comments" }, "fullDescription": { "text": "Line-splicing shall not be used in \/\/ comments [AUTOSAR-A2_7_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Line-splicing shall not be used in \/\/ comments [AUTOSAR-A2_7_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-7-1 The character \\ shall not occur as a last character of a C++ comment" ] } }, { "id": "AUTOSAR-M3_9_1-a", "name": "The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations", "shortDescription": { "text": "The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" }, "fullDescription": { "text": "The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations [AUTOSAR-M3_9_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations [AUTOSAR-M3_9_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M3-9-1 The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" ] } }, { "id": "AUTOSAR-A2_7_3-a", "name": "All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag", "shortDescription": { "text": "All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" }, "fullDescription": { "text": "All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag [AUTOSAR-A2_7_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag [AUTOSAR-A2_7_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-7-3 All declarations of \"user-defined\" types, static and non-static data members, functions and methods shall be preceded by documentation using \"\/\/\/\" comments and \"@tag\" tags" ] } }, { "id": "AUTOSAR-A2_7_3-b", "name": "Function parameters and return type should be documented in a comment that precedes the function declaration", "shortDescription": { "text": "Function parameters and return type should be documented in a comment that precedes the function declaration" }, "fullDescription": { "text": "Function parameters and return type should be documented in a comment that precedes the function declaration [AUTOSAR-A2_7_3-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Function parameters and return type should be documented in a comment that precedes the function declaration [AUTOSAR-A2_7_3-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-7-3 All declarations of \"user-defined\" types, static and non-static data members, functions and methods shall be preceded by documentation using \"\/\/\/\" comments and \"@tag\" tags" ] } }, { "id": "AUTOSAR-A2_7_2-a", "name": "Sections of code should not be \"commented out\"", "shortDescription": { "text": "Sections of code should not be \"commented out\"" }, "fullDescription": { "text": "Sections of code should not be \"commented out\" [AUTOSAR-A2_7_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Sections of code should not be \"commented out\" [AUTOSAR-A2_7_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-7-2 Sections of code shall not be \"commented out\"" ] } }, { "id": "AUTOSAR-M12_1_1-a", "name": "Do not use dynamic type of an object under construction", "shortDescription": { "text": "Do not use dynamic type of an object under construction" }, "fullDescription": { "text": "Do not use dynamic type of an object under construction [AUTOSAR-M12_1_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use dynamic type of an object under construction [AUTOSAR-M12_1_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M12-1-1 An object's dynamic type shall not be used from the body of its constructor or destructor" ] } }, { "id": "AUTOSAR-M3_9_3-a", "name": "The underlying bit representations of floating-point values shall not be used", "shortDescription": { "text": "The underlying bit representations of floating-point values shall not be used" }, "fullDescription": { "text": "The underlying bit representations of floating-point values shall not be used [AUTOSAR-M3_9_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The underlying bit representations of floating-point values shall not be used [AUTOSAR-M3_9_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M3-9-3 The underlying bit representations of floating-point values shall not be used" ] } }, { "id": "AUTOSAR-A1_1_1-a", "name": "The 'register' storage class specifier shall not be used", "shortDescription": { "text": "The 'register' storage class specifier shall not be used" }, "fullDescription": { "text": "The 'register' storage class specifier shall not be used [AUTOSAR-A1_1_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'register' storage class specifier shall not be used [AUTOSAR-A1_1_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A1-1-1 All code shall conform to ISO\/IEC 14882:2014 - Programming Language C++ and shall not use deprecated features" ] } }, { "id": "AUTOSAR-A1_1_1-b", "name": "A copy assignment operator should be declared when a copy constructor is declared (and vice versa)", "shortDescription": { "text": "A copy assignment operator should be declared when a copy constructor is declared (and vice versa)" }, "fullDescription": { "text": "A copy assignment operator should be declared when a copy constructor is declared (and vice versa) [AUTOSAR-A1_1_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A copy assignment operator should be declared when a copy constructor is declared (and vice versa) [AUTOSAR-A1_1_1-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A1-1-1 All code shall conform to ISO\/IEC 14882:2014 - Programming Language C++ and shall not use deprecated features" ] } }, { "id": "AUTOSAR-A1_1_1-c", "name": "Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor", "shortDescription": { "text": "Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor" }, "fullDescription": { "text": "Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor [AUTOSAR-A1_1_1-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor [AUTOSAR-A1_1_1-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A1-1-1 All code shall conform to ISO\/IEC 14882:2014 - Programming Language C++ and shall not use deprecated features" ] } }, { "id": "AUTOSAR-A1_1_1-d", "name": "The C library shall not be used", "shortDescription": { "text": "The C library shall not be used" }, "fullDescription": { "text": "The C library shall not be used [AUTOSAR-A1_1_1-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The C library shall not be used [AUTOSAR-A1_1_1-d]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A1-1-1 All code shall conform to ISO\/IEC 14882:2014 - Programming Language C++ and shall not use deprecated features" ] } }, { "id": "AUTOSAR-A1_1_1-e", "name": "Prefer lambdas over std::bind, std::bind1st and std::bind2nd", "shortDescription": { "text": "Prefer lambdas over std::bind, std::bind1st and std::bind2nd" }, "fullDescription": { "text": "Prefer lambdas over std::bind, std::bind1st and std::bind2nd [AUTOSAR-A1_1_1-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Prefer lambdas over std::bind, std::bind1st and std::bind2nd [AUTOSAR-A1_1_1-e]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A1-1-1 All code shall conform to ISO\/IEC 14882:2014 - Programming Language C++ and shall not use deprecated features" ] } }, { "id": "AUTOSAR-A1_1_1-f", "name": "The 'binder1st' and 'binder2nd' identifiers should not be used", "shortDescription": { "text": "The 'binder1st' and 'binder2nd' identifiers should not be used" }, "fullDescription": { "text": "The 'binder1st' and 'binder2nd' identifiers should not be used [AUTOSAR-A1_1_1-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'binder1st' and 'binder2nd' identifiers should not be used [AUTOSAR-A1_1_1-f]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A1-1-1 All code shall conform to ISO\/IEC 14882:2014 - Programming Language C++ and shall not use deprecated features" ] } }, { "id": "AUTOSAR-A1_1_1-g", "name": "Prefer to use std::unique_ptr instead of std::auto_ptr", "shortDescription": { "text": "Prefer to use std::unique_ptr instead of std::auto_ptr" }, "fullDescription": { "text": "Prefer to use std::unique_ptr instead of std::auto_ptr [AUTOSAR-A1_1_1-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Prefer to use std::unique_ptr instead of std::auto_ptr [AUTOSAR-A1_1_1-g]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A1-1-1 All code shall conform to ISO\/IEC 14882:2014 - Programming Language C++ and shall not use deprecated features" ] } }, { "id": "AUTOSAR-A1_1_1-h", "name": "The 'random_shuffle' identifier should not be used", "shortDescription": { "text": "The 'random_shuffle' identifier should not be used" }, "fullDescription": { "text": "The 'random_shuffle' identifier should not be used [AUTOSAR-A1_1_1-h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'random_shuffle' identifier should not be used [AUTOSAR-A1_1_1-h]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A1-1-1 All code shall conform to ISO\/IEC 14882:2014 - Programming Language C++ and shall not use deprecated features" ] } }, { "id": "AUTOSAR-A1_1_1-i", "name": "Do not use the increment operator (++) on an operand of type 'bool'", "shortDescription": { "text": "Do not use the increment operator (++) on an operand of type 'bool'" }, "fullDescription": { "text": "Do not use the increment operator (++) on an operand of type 'bool' [AUTOSAR-A1_1_1-i]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use the increment operator (++) on an operand of type 'bool' [AUTOSAR-A1_1_1-i]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A1-1-1 All code shall conform to ISO\/IEC 14882:2014 - Programming Language C++ and shall not use deprecated features" ] } }, { "id": "AUTOSAR-A1_1_1-j", "name": "The 'set_unexpected' identifier should not be used", "shortDescription": { "text": "The 'set_unexpected' identifier should not be used" }, "fullDescription": { "text": "The 'set_unexpected' identifier should not be used [AUTOSAR-A1_1_1-j]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'set_unexpected' identifier should not be used [AUTOSAR-A1_1_1-j]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A1-1-1 All code shall conform to ISO\/IEC 14882:2014 - Programming Language C++ and shall not use deprecated features" ] } }, { "id": "AUTOSAR-A1_1_1-k", "name": "Do not use throw exception specifications", "shortDescription": { "text": "Do not use throw exception specifications" }, "fullDescription": { "text": "Do not use throw exception specifications [AUTOSAR-A1_1_1-k]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use throw exception specifications [AUTOSAR-A1_1_1-k]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A1-1-1 All code shall conform to ISO\/IEC 14882:2014 - Programming Language C++ and shall not use deprecated features" ] } }, { "id": "AUTOSAR-M3_1_2-a", "name": "Always declare functions at file scope", "shortDescription": { "text": "Always declare functions at file scope" }, "fullDescription": { "text": "Always declare functions at file scope [AUTOSAR-M3_1_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Always declare functions at file scope [AUTOSAR-M3_1_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M3-1-2 Functions shall not be declared at block scope" ] } }, { "id": "AUTOSAR-A6_4_1-a", "name": "Every switch statement will have at least two cases and a potential default", "shortDescription": { "text": "Every switch statement will have at least two cases and a potential default" }, "fullDescription": { "text": "Every switch statement will have at least two cases and a potential default [AUTOSAR-A6_4_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Every switch statement will have at least two cases and a potential default [AUTOSAR-A6_4_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A6-4-1 A switch statement shall have at least two case-clauses, distinct from the default label" ] } }, { "id": "AUTOSAR-A12_6_1-a", "name": "Prefer initialization to assignment in constructors", "shortDescription": { "text": "Prefer initialization to assignment in constructors" }, "fullDescription": { "text": "Prefer initialization to assignment in constructors [AUTOSAR-A12_6_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Prefer initialization to assignment in constructors [AUTOSAR-A12_6_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A12-6-1 All class data members that are initialized by the constructor shall be initialized using member initializers" ] } }, { "id": "AUTOSAR-M15_0_3-a", "name": "Control shall not be transferred into a try or catch block using a goto or a switch statement", "shortDescription": { "text": "Control shall not be transferred into a try or catch block using a goto or a switch statement" }, "fullDescription": { "text": "Control shall not be transferred into a try or catch block using a goto or a switch statement [AUTOSAR-M15_0_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Control shall not be transferred into a try or catch block using a goto or a switch statement [AUTOSAR-M15_0_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M15-0-3 Control shall not be transferred into a try or catch block using a goto or a switch statement" ] } }, { "id": "AUTOSAR-M5_2_6-a", "name": "A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type", "shortDescription": { "text": "A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" }, "fullDescription": { "text": "A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type [AUTOSAR-M5_2_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type [AUTOSAR-M5_2_6-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-2-6 A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" ] } }, { "id": "AUTOSAR-M5_2_9-a", "name": "A cast should not convert a pointer type to an integral type", "shortDescription": { "text": "A cast should not convert a pointer type to an integral type" }, "fullDescription": { "text": "A cast should not convert a pointer type to an integral type [AUTOSAR-M5_2_9-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A cast should not convert a pointer type to an integral type [AUTOSAR-M5_2_9-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-2-9 A cast shall not convert a pointer type to an integral type" ] } }, { "id": "AUTOSAR-M14_5_3-a", "name": "A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter", "shortDescription": { "text": "A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" }, "fullDescription": { "text": "A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter [AUTOSAR-M14_5_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter [AUTOSAR-M14_5_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M14-5-3 A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" ] } }, { "id": "AUTOSAR-M18_2_1-a", "name": "The macro offsetof, in library stddef.h, shall not be used", "shortDescription": { "text": "The macro offsetof, in library stddef.h, shall not be used" }, "fullDescription": { "text": "The macro offsetof, in library stddef.h, shall not be used [AUTOSAR-M18_2_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The macro offsetof, in library stddef.h, shall not be used [AUTOSAR-M18_2_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M18-2-1 The macro offsetof shall not be used" ] } }, { "id": "AUTOSAR-M5_2_8-a", "name": "An object with integer type or pointer to void type shall not be converted to an object with pointer type", "shortDescription": { "text": "An object with integer type or pointer to void type shall not be converted to an object with pointer type" }, "fullDescription": { "text": "An object with integer type or pointer to void type shall not be converted to an object with pointer type [AUTOSAR-M5_2_8-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An object with integer type or pointer to void type shall not be converted to an object with pointer type [AUTOSAR-M5_2_8-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-2-8 An object with integer type or pointer to void type shall not be converted to an object with pointer type" ] } }, { "id": "AUTOSAR-A5_6_1-a", "name": "Avoid division by zero", "shortDescription": { "text": "Avoid division by zero" }, "fullDescription": { "text": "Avoid division by zero [AUTOSAR-A5_6_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid division by zero [AUTOSAR-A5_6_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-6-1 The right hand operand of the integer division or remainder operators shall not be equal to zero" ] } }, { "id": "AUTOSAR-M5_2_3-a", "name": "Casts from a base class to a derived class should not be performed on polymorphic types", "shortDescription": { "text": "Casts from a base class to a derived class should not be performed on polymorphic types" }, "fullDescription": { "text": "Casts from a base class to a derived class should not be performed on polymorphic types [AUTOSAR-M5_2_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Casts from a base class to a derived class should not be performed on polymorphic types [AUTOSAR-M5_2_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-2-3 Casts from a base class to a derived class should not be performed on polymorphic types" ] } }, { "id": "AUTOSAR-M5_2_2-a", "name": "A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast", "shortDescription": { "text": "A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" }, "fullDescription": { "text": "A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast [AUTOSAR-M5_2_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast [AUTOSAR-M5_2_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-2-2 A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" ] } }, { "id": "AUTOSAR-A6_5_3-a", "name": "'Do' statements should not be used except in a function-like macro", "shortDescription": { "text": "'Do' statements should not be used except in a function-like macro" }, "fullDescription": { "text": "'Do' statements should not be used except in a function-like macro [AUTOSAR-A6_5_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "'Do' statements should not be used except in a function-like macro [AUTOSAR-A6_5_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A6-5-3 Do statements should not be used" ] } }, { "id": "AUTOSAR-A6_5_2-a", "name": "A for loop shall contain a single loop-counter which shall not have floating type", "shortDescription": { "text": "A for loop shall contain a single loop-counter which shall not have floating type" }, "fullDescription": { "text": "A for loop shall contain a single loop-counter which shall not have floating type [AUTOSAR-A6_5_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A for loop shall contain a single loop-counter which shall not have floating type [AUTOSAR-A6_5_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A6-5-2 A for loop shall contain a single loop-counter which shall not have floating-point type" ] } }, { "id": "AUTOSAR-A2_13_5-a", "name": "Hexadecimal constants will be represented using all uppercase letters", "shortDescription": { "text": "Hexadecimal constants will be represented using all uppercase letters" }, "fullDescription": { "text": "Hexadecimal constants will be represented using all uppercase letters [AUTOSAR-A2_13_5-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hexadecimal constants will be represented using all uppercase letters [AUTOSAR-A2_13_5-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-13-5 Hexadecimal constants should be upper case" ] } }, { "id": "AUTOSAR-A2_13_6-a", "name": "Universal character names shall be used only inside character or string literals", "shortDescription": { "text": "Universal character names shall be used only inside character or string literals" }, "fullDescription": { "text": "Universal character names shall be used only inside character or string literals [AUTOSAR-A2_13_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Universal character names shall be used only inside character or string literals [AUTOSAR-A2_13_6-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-13-6 Universal character names shall be used only inside character or string literals" ] } }, { "id": "AUTOSAR-A6_5_4-a", "name": "The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter", "shortDescription": { "text": "The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter" }, "fullDescription": { "text": "The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter [AUTOSAR-A6_5_4-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter [AUTOSAR-A6_5_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A6-5-4 For-init-statement and expression should not perform actions other than loop-counter initialization and modification" ] } }, { "id": "AUTOSAR-A6_5_4-b", "name": "The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop", "shortDescription": { "text": "The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop" }, "fullDescription": { "text": "The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop [AUTOSAR-A6_5_4-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop [AUTOSAR-A6_5_4-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A6-5-4 For-init-statement and expression should not perform actions other than loop-counter initialization and modification" ] } }, { "id": "AUTOSAR-A2_13_3-a", "name": "Type wchar_t shall not be used", "shortDescription": { "text": "Type wchar_t shall not be used" }, "fullDescription": { "text": "Type wchar_t shall not be used [AUTOSAR-A2_13_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Type wchar_t shall not be used [AUTOSAR-A2_13_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-13-3 Type wchar_t shall not be used" ] } }, { "id": "AUTOSAR-A2_13_4-a", "name": "A string literal shall not be modified", "shortDescription": { "text": "A string literal shall not be modified" }, "fullDescription": { "text": "A string literal shall not be modified [AUTOSAR-A2_13_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A string literal shall not be modified [AUTOSAR-A2_13_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-13-4 String literals shall not be assigned to non-constant pointers" ] } }, { "id": "AUTOSAR-A2_13_1-a", "name": "Only those escape sequences that are defined in ISO\/IEC 14882:2014 shall be used", "shortDescription": { "text": "Only those escape sequences that are defined in ISO\/IEC 14882:2014 shall be used" }, "fullDescription": { "text": "Only those escape sequences that are defined in ISO\/IEC 14882:2014 shall be used [AUTOSAR-A2_13_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Only those escape sequences that are defined in ISO\/IEC 14882:2014 shall be used [AUTOSAR-A2_13_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-13-1 Only those escape sequences that are defined in ISO\/IEC 14882:2014 shall be used" ] } }, { "id": "AUTOSAR-A2_13_2-a", "name": "String literals with different encoding prefixes shall not be concatenated", "shortDescription": { "text": "String literals with different encoding prefixes shall not be concatenated" }, "fullDescription": { "text": "String literals with different encoding prefixes shall not be concatenated [AUTOSAR-A2_13_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "String literals with different encoding prefixes shall not be concatenated [AUTOSAR-A2_13_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-13-2 String literals with different encoding prefixes shall not be concatenated" ] } }, { "id": "AUTOSAR-M5_0_15-a", "name": "Array indexing shall be the only allowed form of pointer arithmetic", "shortDescription": { "text": "Array indexing shall be the only allowed form of pointer arithmetic" }, "fullDescription": { "text": "Array indexing shall be the only allowed form of pointer arithmetic [AUTOSAR-M5_0_15-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Array indexing shall be the only allowed form of pointer arithmetic [AUTOSAR-M5_0_15-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-15 Array indexing shall be the only form of pointer arithmetic" ] } }, { "id": "AUTOSAR-M5_0_16-a", "name": "Avoid accessing arrays out of bounds", "shortDescription": { "text": "Avoid accessing arrays out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays out of bounds [AUTOSAR-M5_0_16-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays out of bounds [AUTOSAR-M5_0_16-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-16 A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" ] } }, { "id": "AUTOSAR-M5_0_16-b", "name": "A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array", "shortDescription": { "text": "A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" }, "fullDescription": { "text": "A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array [AUTOSAR-M5_0_16-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array [AUTOSAR-M5_0_16-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-16 A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" ] } }, { "id": "AUTOSAR-M5_0_17-a", "name": "Do not subtract two pointers that do not address elements of the same array", "shortDescription": { "text": "Do not subtract two pointers that do not address elements of the same array" }, "fullDescription": { "text": "Do not subtract two pointers that do not address elements of the same array [AUTOSAR-M5_0_17-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not subtract two pointers that do not address elements of the same array [AUTOSAR-M5_0_17-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-17 Subtraction between pointers shall only be applied to pointers that address elements of the same array" ] } }, { "id": "AUTOSAR-M5_0_18-a", "name": "Do not compare two unrelated pointers", "shortDescription": { "text": "Do not compare two unrelated pointers" }, "fullDescription": { "text": "Do not compare two unrelated pointers [AUTOSAR-M5_0_18-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not compare two unrelated pointers [AUTOSAR-M5_0_18-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-18 >, >=, <, <= shall not be applied to objects of pointer type, except where they point to the same array" ] } }, { "id": "AUTOSAR-A15_0_2-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [AUTOSAR-A15_0_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure resources are freed [AUTOSAR-A15_0_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-0-2 At least the basic guarantee for exception safety shall be provided for all operations. In addition, each function may offer either the strong guarantee or the nothrow guarantee" ] } }, { "id": "AUTOSAR-M9_3_1-a", "name": "Const member functions shall not return non-const pointers or references to class-data", "shortDescription": { "text": "Const member functions shall not return non-const pointers or references to class-data" }, "fullDescription": { "text": "Const member functions shall not return non-const pointers or references to class-data [AUTOSAR-M9_3_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Const member functions shall not return non-const pointers or references to class-data [AUTOSAR-M9_3_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M9-3-1 Const member functions shall not return non-const pointers or references to class-data" ] } }, { "id": "AUTOSAR-M5_0_10-a", "name": "If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand", "shortDescription": { "text": "If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" }, "fullDescription": { "text": "If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand [AUTOSAR-M5_0_10-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand [AUTOSAR-M5_0_10-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-10 If the bitwise operators ~ and << are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" ] } }, { "id": "AUTOSAR-M9_3_3-a", "name": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const", "shortDescription": { "text": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" }, "fullDescription": { "text": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const [AUTOSAR-M9_3_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const [AUTOSAR-M9_3_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" ] } }, { "id": "AUTOSAR-M5_0_11-a", "name": "The plain char type shall be used only for the storage and use of character values", "shortDescription": { "text": "The plain char type shall be used only for the storage and use of character values" }, "fullDescription": { "text": "The plain char type shall be used only for the storage and use of character values [AUTOSAR-M5_0_11-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The plain char type shall be used only for the storage and use of character values [AUTOSAR-M5_0_11-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-11 The plain char type shall only be used for the storage and use of character values" ] } }, { "id": "AUTOSAR-M5_0_12-a", "name": "signed and unsigned char type shall be used only for the storage and use of numeric values", "shortDescription": { "text": "signed and unsigned char type shall be used only for the storage and use of numeric values" }, "fullDescription": { "text": "signed and unsigned char type shall be used only for the storage and use of numeric values [AUTOSAR-M5_0_12-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "signed and unsigned char type shall be used only for the storage and use of numeric values [AUTOSAR-M5_0_12-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-12 Signed char and unsigned char type shall only be used for the storage and use of numeric values" ] } }, { "id": "AUTOSAR-M5_0_14-a", "name": "The first operand of a conditional-operator shall have type bool", "shortDescription": { "text": "The first operand of a conditional-operator shall have type bool" }, "fullDescription": { "text": "The first operand of a conditional-operator shall have type bool [AUTOSAR-M5_0_14-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The first operand of a conditional-operator shall have type bool [AUTOSAR-M5_0_14-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-14 The first operand of a conditional-operator shall have type bool" ] } }, { "id": "AUTOSAR-M7_1_2-a", "name": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object", "shortDescription": { "text": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" }, "fullDescription": { "text": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object [AUTOSAR-M7_1_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object [AUTOSAR-M7_1_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified" ] } }, { "id": "AUTOSAR-M7_1_2-b", "name": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object", "shortDescription": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" }, "fullDescription": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object [AUTOSAR-M7_1_2-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object [AUTOSAR-M7_1_2-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified" ] } }, { "id": "AUTOSAR-M7_1_2-c", "name": "Declare reference parameters as const references whenever possible", "shortDescription": { "text": "Declare reference parameters as const references whenever possible" }, "fullDescription": { "text": "Declare reference parameters as const references whenever possible [AUTOSAR-M7_1_2-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Declare reference parameters as const references whenever possible [AUTOSAR-M7_1_2-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified" ] } }, { "id": "AUTOSAR-A7_1_4-a", "name": "The 'register' storage class specifier shall not be used", "shortDescription": { "text": "The 'register' storage class specifier shall not be used" }, "fullDescription": { "text": "The 'register' storage class specifier shall not be used [AUTOSAR-A7_1_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'register' storage class specifier shall not be used [AUTOSAR-A7_1_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A7-1-4 The register keyword shall not be used" ] } }, { "id": "AUTOSAR-A7_1_3-a", "name": "CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name", "shortDescription": { "text": "CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name" }, "fullDescription": { "text": "CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name [AUTOSAR-A7_1_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name [AUTOSAR-A7_1_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A7-1-3 CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name" ] } }, { "id": "AUTOSAR-A7_1_2-a", "name": "Use constexpr to declare const variables whenever possible", "shortDescription": { "text": "Use constexpr to declare const variables whenever possible" }, "fullDescription": { "text": "Use constexpr to declare const variables whenever possible [AUTOSAR-A7_1_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use constexpr to declare const variables whenever possible [AUTOSAR-A7_1_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A7-1-2 The constexpr specifier shall be used for values that can be determined at compile time" ] } }, { "id": "AUTOSAR-A7_1_2-b", "name": "Use constexpr to declare functions whenever possible", "shortDescription": { "text": "Use constexpr to declare functions whenever possible" }, "fullDescription": { "text": "Use constexpr to declare functions whenever possible [AUTOSAR-A7_1_2-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use constexpr to declare functions whenever possible [AUTOSAR-A7_1_2-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A7-1-2 The constexpr specifier shall be used for values that can be determined at compile time" ] } }, { "id": "AUTOSAR-A7_1_1-a", "name": "Declare local variable as const whenever possible", "shortDescription": { "text": "Declare local variable as const whenever possible" }, "fullDescription": { "text": "Declare local variable as const whenever possible [AUTOSAR-A7_1_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Declare local variable as const whenever possible [AUTOSAR-A7_1_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A7-1-1 Constexpr or const specifiers shall be used for immutable data declaration" ] } }, { "id": "AUTOSAR-A2_8_1-a", "name": "An include file for a class should have a file name of the form <class name> + extension", "shortDescription": { "text": "An include file for a class should have a file name of the form <class name> + extension" }, "fullDescription": { "text": "An include file for a class should have a file name of the form <class name> + extension [AUTOSAR-A2_8_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An include file for a class should have a file name of the form <class name> + extension [AUTOSAR-A2_8_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-8-1 A header file name shall be identical to a type name declared in it if it declares a type" ] } }, { "id": "AUTOSAR-A2_11_1-a", "name": "Do not use the volatile keyword", "shortDescription": { "text": "Do not use the volatile keyword" }, "fullDescription": { "text": "Do not use the volatile keyword [AUTOSAR-A2_11_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use the volatile keyword [AUTOSAR-A2_11_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-11-1 Volatile keyword shall not be used" ] } }, { "id": "AUTOSAR-A9_5_1-a", "name": "Unions shall not be used", "shortDescription": { "text": "Unions shall not be used" }, "fullDescription": { "text": "Unions shall not be used [AUTOSAR-A9_5_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Unions shall not be used [AUTOSAR-A9_5_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A9-5-1 Unions shall not be used" ] } }, { "id": "AUTOSAR-M6_3_1-a", "name": "The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement", "shortDescription": { "text": "The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" }, "fullDescription": { "text": "The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement [AUTOSAR-M6_3_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement [AUTOSAR-M6_3_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement" ] } }, { "id": "AUTOSAR-M5_0_20-a", "name": "Non-constant operands to a binary bitwise operator shall have the same underlying type", "shortDescription": { "text": "Non-constant operands to a binary bitwise operator shall have the same underlying type" }, "fullDescription": { "text": "Non-constant operands to a binary bitwise operator shall have the same underlying type [AUTOSAR-M5_0_20-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Non-constant operands to a binary bitwise operator shall have the same underlying type [AUTOSAR-M5_0_20-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-20 Non-constant operands to a binary bitwise operator shall have the same underlying type" ] } }, { "id": "AUTOSAR-M5_0_21-a", "name": "Bitwise operators shall only be applied to operands of unsigned underlying type (with exceptions)", "shortDescription": { "text": "Bitwise operators shall only be applied to operands of unsigned underlying type (with exceptions)" }, "fullDescription": { "text": "Bitwise operators shall only be applied to operands of unsigned underlying type (with exceptions) [AUTOSAR-M5_0_21-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Bitwise operators shall only be applied to operands of unsigned underlying type (with exceptions) [AUTOSAR-M5_0_21-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-21 Bitwise operators shall only be applied to operands of unsigned underlying type" ] } }, { "id": "AUTOSAR-A18_0_1-a", "name": "The C library shall not be used", "shortDescription": { "text": "The C library shall not be used" }, "fullDescription": { "text": "The C library shall not be used [AUTOSAR-A18_0_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The C library shall not be used [AUTOSAR-A18_0_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-0-1 The C library facilities shall only be accessed through C++ library headers" ] } }, { "id": "AUTOSAR-A18_0_3-a", "name": "Do not include <locale.h> header", "shortDescription": { "text": "Do not include <locale.h> header" }, "fullDescription": { "text": "Do not include <locale.h> header [AUTOSAR-A18_0_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not include <locale.h> header [AUTOSAR-A18_0_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-0-3 The library <clocale> (locale.h) and the setlocale function shall not be used" ] } }, { "id": "AUTOSAR-A18_0_3-b", "name": "The 'setlocale' function should not be used", "shortDescription": { "text": "The 'setlocale' function should not be used" }, "fullDescription": { "text": "The 'setlocale' function should not be used [AUTOSAR-A18_0_3-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'setlocale' function should not be used [AUTOSAR-A18_0_3-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-0-3 The library <clocale> (locale.h) and the setlocale function shall not be used" ] } }, { "id": "AUTOSAR-M0_4_2-a", "name": "Use of floating-point arithmetic shall be documented", "shortDescription": { "text": "Use of floating-point arithmetic shall be documented" }, "fullDescription": { "text": "Use of floating-point arithmetic shall be documented [AUTOSAR-M0_4_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use of floating-point arithmetic shall be documented [AUTOSAR-M0_4_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-4-2 Use of floating-point arithmetic shall be documented" ] } }, { "id": "AUTOSAR-A18_0_2-a", "name": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used", "shortDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" }, "fullDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [AUTOSAR-A18_0_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [AUTOSAR-A18_0_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-0-2 The error state of a conversion from string to a numeric value shall be checked" ] } }, { "id": "AUTOSAR-A13_3_1-a", "name": "Avoid Overloading on Forwarding References", "shortDescription": { "text": "Avoid Overloading on Forwarding References" }, "fullDescription": { "text": "Avoid Overloading on Forwarding References [AUTOSAR-A13_3_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid Overloading on Forwarding References [AUTOSAR-A13_3_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A13-3-1 A function that contains \"forwarding reference\" as its argument shall not be overloaded" ] } }, { "id": "AUTOSAR-A5_5_1-a", "name": "A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type", "shortDescription": { "text": "A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" }, "fullDescription": { "text": "A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type [AUTOSAR-A5_5_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type [AUTOSAR-A5_5_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-5-1 A pointer to member shall not access non-existent class members" ] } }, { "id": "AUTOSAR-M14_6_1-a", "name": "In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->", "shortDescription": { "text": "In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" }, "fullDescription": { "text": "In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this-> [AUTOSAR-M14_6_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this-> [AUTOSAR-M14_6_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M14-6-1 In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" ] } }, { "id": "AUTOSAR-A0_4_2-a", "name": "Type long double shall not be used", "shortDescription": { "text": "Type long double shall not be used" }, "fullDescription": { "text": "Type long double shall not be used [AUTOSAR-A0_4_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Type long double shall not be used [AUTOSAR-A0_4_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A0-4-2 Type long double shall not be used" ] } }, { "id": "AUTOSAR-A0_4_4-a", "name": "Validate values passed to library functions", "shortDescription": { "text": "Validate values passed to library functions" }, "fullDescription": { "text": "Validate values passed to library functions [AUTOSAR-A0_4_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Validate values passed to library functions [AUTOSAR-A0_4_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A0-4-4 Range, domain and pole errors shall be checked when using math functions" ] } }, { "id": "AUTOSAR-A4_7_1-a", "name": "Avoid implicit conversions from signed to unsigned type", "shortDescription": { "text": "Avoid implicit conversions from signed to unsigned type" }, "fullDescription": { "text": "Avoid implicit conversions from signed to unsigned type [AUTOSAR-A4_7_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid implicit conversions from signed to unsigned type [AUTOSAR-A4_7_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A4-7-1 An integer expression shall not lead to data loss" ] } }, { "id": "AUTOSAR-A4_7_1-b", "name": "Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used", "shortDescription": { "text": "Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" }, "fullDescription": { "text": "Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used [AUTOSAR-A4_7_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used [AUTOSAR-A4_7_1-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A4-7-1 An integer expression shall not lead to data loss" ] } }, { "id": "AUTOSAR-A4_7_1-c", "name": "Avoid conversions of constant values to a narrower type", "shortDescription": { "text": "Avoid conversions of constant values to a narrower type" }, "fullDescription": { "text": "Avoid conversions of constant values to a narrower type [AUTOSAR-A4_7_1-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid conversions of constant values to a narrower type [AUTOSAR-A4_7_1-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A4-7-1 An integer expression shall not lead to data loss" ] } }, { "id": "AUTOSAR-A4_7_1-d", "name": "Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used", "shortDescription": { "text": "Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" }, "fullDescription": { "text": "Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used [AUTOSAR-A4_7_1-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used [AUTOSAR-A4_7_1-d]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A4-7-1 An integer expression shall not lead to data loss" ] } }, { "id": "AUTOSAR-A4_7_1-e", "name": "Avoid implicit conversions from wider to narrower floating type", "shortDescription": { "text": "Avoid implicit conversions from wider to narrower floating type" }, "fullDescription": { "text": "Avoid implicit conversions from wider to narrower floating type [AUTOSAR-A4_7_1-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid implicit conversions from wider to narrower floating type [AUTOSAR-A4_7_1-e]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A4-7-1 An integer expression shall not lead to data loss" ] } }, { "id": "AUTOSAR-A4_7_1-f", "name": "Avoid implicit conversions from floating to integral type", "shortDescription": { "text": "Avoid implicit conversions from floating to integral type" }, "fullDescription": { "text": "Avoid implicit conversions from floating to integral type [AUTOSAR-A4_7_1-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid implicit conversions from floating to integral type [AUTOSAR-A4_7_1-f]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A4-7-1 An integer expression shall not lead to data loss" ] } }, { "id": "AUTOSAR-A4_7_1-g", "name": "Implicit conversions from integral to floating type which may result in a loss of information shall not be used", "shortDescription": { "text": "Implicit conversions from integral to floating type which may result in a loss of information shall not be used" }, "fullDescription": { "text": "Implicit conversions from integral to floating type which may result in a loss of information shall not be used [AUTOSAR-A4_7_1-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Implicit conversions from integral to floating type which may result in a loss of information shall not be used [AUTOSAR-A4_7_1-g]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A4-7-1 An integer expression shall not lead to data loss" ] } }, { "id": "AUTOSAR-A4_7_1-h", "name": "Avoid wraparounds when performing arithmetic integer operations", "shortDescription": { "text": "Avoid wraparounds when performing arithmetic integer operations" }, "fullDescription": { "text": "Avoid wraparounds when performing arithmetic integer operations [AUTOSAR-A4_7_1-h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid wraparounds when performing arithmetic integer operations [AUTOSAR-A4_7_1-h]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A4-7-1 An integer expression shall not lead to data loss" ] } }, { "id": "AUTOSAR-A7_2_5-a", "name": "Enumeration types shall be used instead of integer types (and constants) as case labels", "shortDescription": { "text": "Enumeration types shall be used instead of integer types (and constants) as case labels" }, "fullDescription": { "text": "Enumeration types shall be used instead of integer types (and constants) as case labels [AUTOSAR-A7_2_5-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Enumeration types shall be used instead of integer types (and constants) as case labels [AUTOSAR-A7_2_5-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A7-2-5 Enumerations should be used to represent sets of related named constants" ] } }, { "id": "AUTOSAR-A7_2_4-a", "name": "In an enumerator list, the \"=\" construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised", "shortDescription": { "text": "In an enumerator list, the \"=\" construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised" }, "fullDescription": { "text": "In an enumerator list, the \"=\" construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised [AUTOSAR-A7_2_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "In an enumerator list, the \"=\" construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised [AUTOSAR-A7_2_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A7-2-4 In an enumeration, either (1) none, (2) the first or (3) all enumerators shall be initialized" ] } }, { "id": "AUTOSAR-A20_8_6-a", "name": "Prefer 'std::make_shared' to the direct use of new", "shortDescription": { "text": "Prefer 'std::make_shared' to the direct use of new" }, "fullDescription": { "text": "Prefer 'std::make_shared' to the direct use of new [AUTOSAR-A20_8_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Prefer 'std::make_shared' to the direct use of new [AUTOSAR-A20_8_6-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A20-8-6 std::make_shared shall be used to construct objects owned by std::shared_ptr" ] } }, { "id": "AUTOSAR-A20_8_5-a", "name": "'std::make_unique' shall be used to construct objects owned by 'std::unique_ptr'", "shortDescription": { "text": "'std::make_unique' shall be used to construct objects owned by 'std::unique_ptr'" }, "fullDescription": { "text": "'std::make_unique' shall be used to construct objects owned by 'std::unique_ptr' [AUTOSAR-A20_8_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "'std::make_unique' shall be used to construct objects owned by 'std::unique_ptr' [AUTOSAR-A20_8_5-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A20-8-5 std::make_unique shall be used to construct objects owned by std::unique_ptr" ] } }, { "id": "AUTOSAR-A20_8_7-a", "name": "Avoid cyclic shared_ptr references", "shortDescription": { "text": "Avoid cyclic shared_ptr references" }, "fullDescription": { "text": "Avoid cyclic shared_ptr references [AUTOSAR-A20_8_7-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid cyclic shared_ptr references [AUTOSAR-A20_8_7-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A20-8-7 A std::weak_ptr shall be used to represent temporary shared ownership" ] } }, { "id": "AUTOSAR-A20_8_2-a", "name": "Use smart pointers when passing a pointer to an object in a thread", "shortDescription": { "text": "Use smart pointers when passing a pointer to an object in a thread" }, "fullDescription": { "text": "Use smart pointers when passing a pointer to an object in a thread [AUTOSAR-A20_8_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use smart pointers when passing a pointer to an object in a thread [AUTOSAR-A20_8_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A20-8-2 A std::unique_ptr shall be used to represent exclusive ownership" ] } }, { "id": "AUTOSAR-A20_8_1-a", "name": "Do not store an already-owned pointer value in an unrelated smart pointer", "shortDescription": { "text": "Do not store an already-owned pointer value in an unrelated smart pointer" }, "fullDescription": { "text": "Do not store an already-owned pointer value in an unrelated smart pointer [AUTOSAR-A20_8_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not store an already-owned pointer value in an unrelated smart pointer [AUTOSAR-A20_8_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A20-8-1 An already-owned pointer value shall not be stored in an unrelated smart pointer" ] } }, { "id": "AUTOSAR-A20_8_4-a", "name": "Consider using 'std::unique_ptr' instead of 'std::shared_ptr' for local objects", "shortDescription": { "text": "Consider using 'std::unique_ptr' instead of 'std::shared_ptr' for local objects" }, "fullDescription": { "text": "Consider using 'std::unique_ptr' instead of 'std::shared_ptr' for local objects [AUTOSAR-A20_8_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Consider using 'std::unique_ptr' instead of 'std::shared_ptr' for local objects [AUTOSAR-A20_8_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A20-8-4 A std::unique_ptr shall be used over std::shared_ptr if ownership sharing is not required" ] } }, { "id": "AUTOSAR-A20_8_3-a", "name": "Use smart pointers when passing a pointer to an object in a thread", "shortDescription": { "text": "Use smart pointers when passing a pointer to an object in a thread" }, "fullDescription": { "text": "Use smart pointers when passing a pointer to an object in a thread [AUTOSAR-A20_8_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use smart pointers when passing a pointer to an object in a thread [AUTOSAR-A20_8_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A20-8-3 A std::shared_ptr shall be used to represent shared ownership" ] } }, { "id": "AUTOSAR-A9_6_1-a", "name": "Types of bit-fields should have defined sizes", "shortDescription": { "text": "Types of bit-fields should have defined sizes" }, "fullDescription": { "text": "Types of bit-fields should have defined sizes [AUTOSAR-A9_6_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Types of bit-fields should have defined sizes [AUTOSAR-A9_6_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A9-6-1 Data types used for interfacing with hardware or conforming to communication protocols shall be trivial, standard-layout and only contain members of types with defined sizes" ] } }, { "id": "AUTOSAR-M6_2_3-a", "name": "A null statement shall occur on a line by itself or be followed by a comment", "shortDescription": { "text": "A null statement shall occur on a line by itself or be followed by a comment" }, "fullDescription": { "text": "A null statement shall occur on a line by itself or be followed by a comment [AUTOSAR-M6_2_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A null statement shall occur on a line by itself or be followed by a comment [AUTOSAR-M6_2_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M6-2-3 Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character" ] } }, { "id": "AUTOSAR-M6_2_2-a", "name": "Floating-point expressions shall not be tested for equality or inequality", "shortDescription": { "text": "Floating-point expressions shall not be tested for equality or inequality" }, "fullDescription": { "text": "Floating-point expressions shall not be tested for equality or inequality [AUTOSAR-M6_2_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Floating-point expressions shall not be tested for equality or inequality [AUTOSAR-M6_2_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M6-2-2 Floating-point expressions shall not be directly or indirectly tested for equality or inequality" ] } }, { "id": "AUTOSAR-A12_4_1-a", "name": "Make base class destructors public and virtual, or protected and nonvirtual", "shortDescription": { "text": "Make base class destructors public and virtual, or protected and nonvirtual" }, "fullDescription": { "text": "Make base class destructors public and virtual, or protected and nonvirtual [AUTOSAR-A12_4_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Make base class destructors public and virtual, or protected and nonvirtual [AUTOSAR-A12_4_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A12-4-1 Destructor of a base class shall be public virtual, public override or protected non-virtual" ] } }, { "id": "AUTOSAR-A2_10_1-a", "name": "Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope", "shortDescription": { "text": "Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" }, "fullDescription": { "text": "Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope [AUTOSAR-A2_10_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope [AUTOSAR-A2_10_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-10-1 An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" ] } }, { "id": "AUTOSAR-A2_10_1-b", "name": "Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope", "shortDescription": { "text": "Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" }, "fullDescription": { "text": "Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope [AUTOSAR-A2_10_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope [AUTOSAR-A2_10_1-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-10-1 An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" ] } }, { "id": "AUTOSAR-A2_10_1-c", "name": "Identifiers declared in a local scope should not hide identifiers declared in a class scope", "shortDescription": { "text": "Identifiers declared in a local scope should not hide identifiers declared in a class scope" }, "fullDescription": { "text": "Identifiers declared in a local scope should not hide identifiers declared in a class scope [AUTOSAR-A2_10_1-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers declared in a local scope should not hide identifiers declared in a class scope [AUTOSAR-A2_10_1-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-10-1 An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" ] } }, { "id": "AUTOSAR-A2_10_1-d", "name": "Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope", "shortDescription": { "text": "Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope" }, "fullDescription": { "text": "Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope [AUTOSAR-A2_10_1-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope [AUTOSAR-A2_10_1-d]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-10-1 An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" ] } }, { "id": "AUTOSAR-A2_10_1-e", "name": "Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope", "shortDescription": { "text": "Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope" }, "fullDescription": { "text": "Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope [AUTOSAR-A2_10_1-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope [AUTOSAR-A2_10_1-e]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-10-1 An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" ] } }, { "id": "AUTOSAR-M6_2_1-a", "name": "Assignment operators shall not be used in expressions that yield a Boolean value", "shortDescription": { "text": "Assignment operators shall not be used in expressions that yield a Boolean value" }, "fullDescription": { "text": "Assignment operators shall not be used in expressions that yield a Boolean value [AUTOSAR-M6_2_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Assignment operators shall not be used in expressions that yield a Boolean value [AUTOSAR-M6_2_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M6-2-1 Assignment operators shall not be used in sub-expressions" ] } }, { "id": "AUTOSAR-A6_2_2-a", "name": "Expression statements shall not be explicit calls to constructors of temporary objects only", "shortDescription": { "text": "Expression statements shall not be explicit calls to constructors of temporary objects only" }, "fullDescription": { "text": "Expression statements shall not be explicit calls to constructors of temporary objects only [AUTOSAR-A6_2_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Expression statements shall not be explicit calls to constructors of temporary objects only [AUTOSAR-A6_2_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A6-2-2 Expression statements shall not be explicit calls to constructors of temporary objects only" ] } }, { "id": "AUTOSAR-A6_2_1-a", "name": "Copy assignment operators should not have side effects that could affect copying the object", "shortDescription": { "text": "Copy assignment operators should not have side effects that could affect copying the object" }, "fullDescription": { "text": "Copy assignment operators should not have side effects that could affect copying the object [AUTOSAR-A6_2_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Copy assignment operators should not have side effects that could affect copying the object [AUTOSAR-A6_2_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A6-2-1 Move and copy assignment operators shall either move or respectively copy base classes and data members of a class, without any side effects" ] } }, { "id": "AUTOSAR-A6_2_1-b", "name": "Move assignment operators should not have side effects that could affect moving the object", "shortDescription": { "text": "Move assignment operators should not have side effects that could affect moving the object" }, "fullDescription": { "text": "Move assignment operators should not have side effects that could affect moving the object [AUTOSAR-A6_2_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Move assignment operators should not have side effects that could affect moving the object [AUTOSAR-A6_2_1-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A6-2-1 Move and copy assignment operators shall either move or respectively copy base classes and data members of a class, without any side effects" ] } }, { "id": "AUTOSAR-A9_6_2-a", "name": "Do not declare member variables as bit-fields", "shortDescription": { "text": "Do not declare member variables as bit-fields" }, "fullDescription": { "text": "Do not declare member variables as bit-fields [AUTOSAR-A9_6_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not declare member variables as bit-fields [AUTOSAR-A9_6_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A9-6-2 Bit-fields shall be used only when interfacing to hardware or conforming to communication protocols" ] } }, { "id": "AUTOSAR-A12_4_2-a", "name": "If a public destructor of a class is non-virtual, then the class should be declared final", "shortDescription": { "text": "If a public destructor of a class is non-virtual, then the class should be declared final" }, "fullDescription": { "text": "If a public destructor of a class is non-virtual, then the class should be declared final [AUTOSAR-A12_4_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If a public destructor of a class is non-virtual, then the class should be declared final [AUTOSAR-A12_4_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A12-4-2 If a public destructor of a class is non-virtual, then the class should be declared final" ] } }, { "id": "AUTOSAR-A18_5_11-a", "name": "Write operator delete if you write operator new", "shortDescription": { "text": "Write operator delete if you write operator new" }, "fullDescription": { "text": "Write operator delete if you write operator new [AUTOSAR-A18_5_11-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Write operator delete if you write operator new [AUTOSAR-A18_5_11-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-5-11 \"operator new\" and \"operator delete\" shall be defined together" ] } }, { "id": "AUTOSAR-A18_5_11-b", "name": "Write operator delete[] if you write operator new[]", "shortDescription": { "text": "Write operator delete[] if you write operator new[]" }, "fullDescription": { "text": "Write operator delete[] if you write operator new[] [AUTOSAR-A18_5_11-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Write operator delete[] if you write operator new[] [AUTOSAR-A18_5_11-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-5-11 \"operator new\" and \"operator delete\" shall be defined together" ] } }, { "id": "AUTOSAR-A8_4_11-a", "name": "A smart pointer shall only be used as a parameter type if it expresses lifetime semantics", "shortDescription": { "text": "A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" }, "fullDescription": { "text": "A smart pointer shall only be used as a parameter type if it expresses lifetime semantics [AUTOSAR-A8_4_11-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A smart pointer shall only be used as a parameter type if it expresses lifetime semantics [AUTOSAR-A8_4_11-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-4-11 A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" ] } }, { "id": "AUTOSAR-A18_5_10-a", "name": "Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new'", "shortDescription": { "text": "Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new'" }, "fullDescription": { "text": "Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new' [AUTOSAR-A18_5_10-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new' [AUTOSAR-A18_5_10-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-5-10 Placement new shall be used only with properly aligned pointers to sufficient storage capacity" ] } }, { "id": "AUTOSAR-A18_5_10-b", "name": "An overhead should be used when an array of objects is passed to the placement 'new' allocation function", "shortDescription": { "text": "An overhead should be used when an array of objects is passed to the placement 'new' allocation function" }, "fullDescription": { "text": "An overhead should be used when an array of objects is passed to the placement 'new' allocation function [AUTOSAR-A18_5_10-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An overhead should be used when an array of objects is passed to the placement 'new' allocation function [AUTOSAR-A18_5_10-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-5-10 Placement new shall be used only with properly aligned pointers to sufficient storage capacity" ] } }, { "id": "AUTOSAR-A8_4_10-a", "name": "A parameter shall be passed by reference if it can't be NULL", "shortDescription": { "text": "A parameter shall be passed by reference if it can't be NULL" }, "fullDescription": { "text": "A parameter shall be passed by reference if it can't be NULL [AUTOSAR-A8_4_10-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A parameter shall be passed by reference if it can't be NULL [AUTOSAR-A8_4_10-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-4-10 A parameter shall be passed by reference if it can't be NULL" ] } }, { "id": "AUTOSAR-A8_4_13-a", "name": "A smart pointer shall only be used as a parameter type if it expresses lifetime semantics", "shortDescription": { "text": "A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" }, "fullDescription": { "text": "A smart pointer shall only be used as a parameter type if it expresses lifetime semantics [AUTOSAR-A8_4_13-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A smart pointer shall only be used as a parameter type if it expresses lifetime semantics [AUTOSAR-A8_4_13-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-4-13 A std::shared_ptr shall be passed to a function as: (1) a copy to express the function shares ownership (2) an lvalue reference to express that the function replaces the managed object (3) a const lvalue reference to express that the function retains a reference count" ] } }, { "id": "AUTOSAR-A8_4_13-b", "name": "A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object", "shortDescription": { "text": "A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object" }, "fullDescription": { "text": "A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object [AUTOSAR-A8_4_13-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object [AUTOSAR-A8_4_13-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-4-13 A std::shared_ptr shall be passed to a function as: (1) a copy to express the function shares ownership (2) an lvalue reference to express that the function replaces the managed object (3) a const lvalue reference to express that the function retains a reference count" ] } }, { "id": "AUTOSAR-A8_4_13-c", "name": "Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr'", "shortDescription": { "text": "Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr'" }, "fullDescription": { "text": "Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr' [AUTOSAR-A8_4_13-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr' [AUTOSAR-A8_4_13-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-4-13 A std::shared_ptr shall be passed to a function as: (1) a copy to express the function shares ownership (2) an lvalue reference to express that the function replaces the managed object (3) a const lvalue reference to express that the function retains a reference count" ] } }, { "id": "AUTOSAR-A8_4_12-a", "name": "Do not pass std::unique_ptr by const reference", "shortDescription": { "text": "Do not pass std::unique_ptr by const reference" }, "fullDescription": { "text": "Do not pass std::unique_ptr by const reference [AUTOSAR-A8_4_12-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not pass std::unique_ptr by const reference [AUTOSAR-A8_4_12-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-4-12 A std::unique_ptr shall be passed to a function as: (1) a copy to express the function assumes ownership (2) an lvalue reference to express that the function replaces the managed object" ] } }, { "id": "AUTOSAR-A8_4_12-b", "name": "A smart pointer shall only be used as a parameter type if it expresses lifetime semantics", "shortDescription": { "text": "A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" }, "fullDescription": { "text": "A smart pointer shall only be used as a parameter type if it expresses lifetime semantics [AUTOSAR-A8_4_12-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A smart pointer shall only be used as a parameter type if it expresses lifetime semantics [AUTOSAR-A8_4_12-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-4-12 A std::unique_ptr shall be passed to a function as: (1) a copy to express the function assumes ownership (2) an lvalue reference to express that the function replaces the managed object" ] } }, { "id": "AUTOSAR-A8_4_12-c", "name": "A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object", "shortDescription": { "text": "A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object" }, "fullDescription": { "text": "A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object [AUTOSAR-A8_4_12-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object [AUTOSAR-A8_4_12-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-4-12 A std::unique_ptr shall be passed to a function as: (1) a copy to express the function assumes ownership (2) an lvalue reference to express that the function replaces the managed object" ] } }, { "id": "AUTOSAR-A8_4_12-d", "name": "Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr'", "shortDescription": { "text": "Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr'" }, "fullDescription": { "text": "Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr' [AUTOSAR-A8_4_12-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr' [AUTOSAR-A8_4_12-d]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-4-12 A std::unique_ptr shall be passed to a function as: (1) a copy to express the function assumes ownership (2) an lvalue reference to express that the function replaces the managed object" ] } }, { "id": "AUTOSAR-A18_1_2-a", "name": "Avoid using vector<bool>", "shortDescription": { "text": "Avoid using vector<bool>" }, "fullDescription": { "text": "Avoid using vector<bool> [AUTOSAR-A18_1_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using vector<bool> [AUTOSAR-A18_1_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-1-2 The std::vector<bool> specialization shall not be used" ] } }, { "id": "AUTOSAR-A18_1_1-a", "name": "C-style arrays shall not be used", "shortDescription": { "text": "C-style arrays shall not be used" }, "fullDescription": { "text": "C-style arrays shall not be used [AUTOSAR-A18_1_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "C-style arrays shall not be used [AUTOSAR-A18_1_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-1-1 C-style arrays shall not be used" ] } }, { "id": "AUTOSAR-A13_2_1-a", "name": "Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type", "shortDescription": { "text": "Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type" }, "fullDescription": { "text": "Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type [AUTOSAR-A13_2_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type [AUTOSAR-A13_2_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A13-2-1 An assignment operator shall return a reference to \"this\"" ] } }, { "id": "AUTOSAR-A18_1_4-a", "name": "A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type", "shortDescription": { "text": "A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" }, "fullDescription": { "text": "A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type [AUTOSAR-A18_1_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type [AUTOSAR-A18_1_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-1-4 A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" ] } }, { "id": "AUTOSAR-M18_0_3-a", "name": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used", "shortDescription": { "text": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" }, "fullDescription": { "text": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [AUTOSAR-M18_0_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [AUTOSAR-M18_0_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M18-0-3 The library functions abort, exit, getenv and system from library <cstdlib> shall not be used" ] } }, { "id": "AUTOSAR-M18_0_3-b", "name": "The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used", "shortDescription": { "text": "The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" }, "fullDescription": { "text": "The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [AUTOSAR-M18_0_3-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [AUTOSAR-M18_0_3-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M18-0-3 The library functions abort, exit, getenv and system from library <cstdlib> shall not be used" ] } }, { "id": "AUTOSAR-M18_0_3-c", "name": "The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used", "shortDescription": { "text": "The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used" }, "fullDescription": { "text": "The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used [AUTOSAR-M18_0_3-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used [AUTOSAR-M18_0_3-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M18-0-3 The library functions abort, exit, getenv and system from library <cstdlib> shall not be used" ] } }, { "id": "AUTOSAR-M18_0_3-d", "name": "The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used", "shortDescription": { "text": "The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" }, "fullDescription": { "text": "The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [AUTOSAR-M18_0_3-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [AUTOSAR-M18_0_3-d]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M18-0-3 The library functions abort, exit, getenv and system from library <cstdlib> shall not be used" ] } }, { "id": "AUTOSAR-A13_2_2-a", "name": "A binary arithmetic operator and a bitwise operator shall return a 'prvalue'", "shortDescription": { "text": "A binary arithmetic operator and a bitwise operator shall return a 'prvalue'" }, "fullDescription": { "text": "A binary arithmetic operator and a bitwise operator shall return a 'prvalue' [AUTOSAR-A13_2_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A binary arithmetic operator and a bitwise operator shall return a 'prvalue' [AUTOSAR-A13_2_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A13-2-2 A binary arithmetic operator and a bitwise operator shall return a \"prvalue\"" ] } }, { "id": "AUTOSAR-A18_1_3-a", "name": "Prefer to use std::unique_ptr instead of std::auto_ptr", "shortDescription": { "text": "Prefer to use std::unique_ptr instead of std::auto_ptr" }, "fullDescription": { "text": "Prefer to use std::unique_ptr instead of std::auto_ptr [AUTOSAR-A18_1_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Prefer to use std::unique_ptr instead of std::auto_ptr [AUTOSAR-A18_1_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-1-3 The std::auto_ptr type shall not be used" ] } }, { "id": "AUTOSAR-A18_1_6-a", "name": "All std::hash specializations for user-defined types shall have a noexcept function call operator", "shortDescription": { "text": "All std::hash specializations for user-defined types shall have a noexcept function call operator" }, "fullDescription": { "text": "All std::hash specializations for user-defined types shall have a noexcept function call operator [AUTOSAR-A18_1_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All std::hash specializations for user-defined types shall have a noexcept function call operator [AUTOSAR-A18_1_6-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-1-6 All std::hash specializations for user-defined types shall have a noexcept function call operator" ] } }, { "id": "AUTOSAR-A13_2_3-a", "name": "A relational operator shall return a boolean value", "shortDescription": { "text": "A relational operator shall return a boolean value" }, "fullDescription": { "text": "A relational operator shall return a boolean value [AUTOSAR-A13_2_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A relational operator shall return a boolean value [AUTOSAR-A13_2_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A13-2-3 A relational operator shall return a boolean value" ] } }, { "id": "AUTOSAR-M18_0_5-a", "name": "The unbounded functions of library <cstring> shall not be used", "shortDescription": { "text": "The unbounded functions of library <cstring> shall not be used" }, "fullDescription": { "text": "The unbounded functions of library <cstring> shall not be used [AUTOSAR-M18_0_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The unbounded functions of library <cstring> shall not be used [AUTOSAR-M18_0_5-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M18-0-5 The unbounded functions of library <cstring> shall not be used" ] } }, { "id": "AUTOSAR-M18_0_4-a", "name": "The standard header files <time.h> or <ctime> shall not be used", "shortDescription": { "text": "The standard header files <time.h> or <ctime> shall not be used" }, "fullDescription": { "text": "The standard header files <time.h> or <ctime> shall not be used [AUTOSAR-M18_0_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The standard header files <time.h> or <ctime> shall not be used [AUTOSAR-M18_0_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M18-0-4 The time handling functions of library <ctime> shall not be used" ] } }, { "id": "AUTOSAR-M2_10_1-a", "name": "Different identifiers shall be typographically unambiguous", "shortDescription": { "text": "Different identifiers shall be typographically unambiguous" }, "fullDescription": { "text": "Different identifiers shall be typographically unambiguous [AUTOSAR-M2_10_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Different identifiers shall be typographically unambiguous [AUTOSAR-M2_10_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M2-10-1 Different identifiers shall be typographically unambiguous" ] } }, { "id": "AUTOSAR-M5_14_1-a", "name": "The right-hand operand of a logical && or || operator shall not contain side effects", "shortDescription": { "text": "The right-hand operand of a logical && or || operator shall not contain side effects" }, "fullDescription": { "text": "The right-hand operand of a logical && or || operator shall not contain side effects [AUTOSAR-M5_14_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The right-hand operand of a logical && or || operator shall not contain side effects [AUTOSAR-M5_14_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-14-1 The right hand operand of a logical &&, || operators shall not contain side effects" ] } }, { "id": "AUTOSAR-A7_1_9-a", "name": "A class, structure, or enumeration will not be declared in the definition of its type", "shortDescription": { "text": "A class, structure, or enumeration will not be declared in the definition of its type" }, "fullDescription": { "text": "A class, structure, or enumeration will not be declared in the definition of its type [AUTOSAR-A7_1_9-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A class, structure, or enumeration will not be declared in the definition of its type [AUTOSAR-A7_1_9-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A7-1-9 A class, structure, or enumeration shall not be declared in the definition of its type" ] } }, { "id": "AUTOSAR-A7_1_8-a", "name": "Do not place type specifiers before non-type specifiers in a declaration", "shortDescription": { "text": "Do not place type specifiers before non-type specifiers in a declaration" }, "fullDescription": { "text": "Do not place type specifiers before non-type specifiers in a declaration [AUTOSAR-A7_1_8-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not place type specifiers before non-type specifiers in a declaration [AUTOSAR-A7_1_8-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A7-1-8 A non-type specifier shall be placed before a type specifier in a declaration" ] } }, { "id": "AUTOSAR-A7_1_7-a", "name": "Only one statement shall be allowed per line", "shortDescription": { "text": "Only one statement shall be allowed per line" }, "fullDescription": { "text": "Only one statement shall be allowed per line [AUTOSAR-A7_1_7-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Only one statement shall be allowed per line [AUTOSAR-A7_1_7-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A7-1-7 Each expression statement and identifier declaration shall be placed on a separate line" ] } }, { "id": "AUTOSAR-A7_1_7-b", "name": "Multiple variable declarations shall not be allowed on the same line", "shortDescription": { "text": "Multiple variable declarations shall not be allowed on the same line" }, "fullDescription": { "text": "Multiple variable declarations shall not be allowed on the same line [AUTOSAR-A7_1_7-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Multiple variable declarations shall not be allowed on the same line [AUTOSAR-A7_1_7-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A7-1-7 Each expression statement and identifier declaration shall be placed on a separate line" ] } }, { "id": "AUTOSAR-A7_1_7-c", "name": "Each variable should be declared in a separate declaration statement", "shortDescription": { "text": "Each variable should be declared in a separate declaration statement" }, "fullDescription": { "text": "Each variable should be declared in a separate declaration statement [AUTOSAR-A7_1_7-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Each variable should be declared in a separate declaration statement [AUTOSAR-A7_1_7-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A7-1-7 Each expression statement and identifier declaration shall be placed on a separate line" ] } }, { "id": "AUTOSAR-A7_1_6-a", "name": "Prefer alias declarations to typedefs", "shortDescription": { "text": "Prefer alias declarations to typedefs" }, "fullDescription": { "text": "Prefer alias declarations to typedefs [AUTOSAR-A7_1_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Prefer alias declarations to typedefs [AUTOSAR-A7_1_6-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A7-1-6 The typedef specifier shall not be used" ] } }, { "id": "AUTOSAR-A7_1_5-a", "name": "Do not overuse 'auto' specifier", "shortDescription": { "text": "Do not overuse 'auto' specifier" }, "fullDescription": { "text": "Do not overuse 'auto' specifier [AUTOSAR-A7_1_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not overuse 'auto' specifier [AUTOSAR-A7_1_5-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A7-1-5 The auto specifier shall not be used apart from following cases: (1) to declare that a variable has the same type as return type of a function call, (2) to declare that a variable has the same type as initializer of non-fundamental type, (3) to declare parameters of a generic lambda expression, (4) to declare a function template using trailing return type syntax" ] } }, { "id": "AUTOSAR-A18_9_2-a", "name": "The 'std::forward' function should be used to forward forwarding references", "shortDescription": { "text": "The 'std::forward' function should be used to forward forwarding references" }, "fullDescription": { "text": "The 'std::forward' function should be used to forward forwarding references [AUTOSAR-A18_9_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'std::forward' function should be used to forward forwarding references [AUTOSAR-A18_9_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-9-2 Forwarding values to other functions shall be done via: (1) std::move if the value is an rvalue reference, (2) std::forward if the value is forwarding reference" ] } }, { "id": "AUTOSAR-A18_9_1-a", "name": "Prefer lambdas over std::bind, std::bind1st and std::bind2nd", "shortDescription": { "text": "Prefer lambdas over std::bind, std::bind1st and std::bind2nd" }, "fullDescription": { "text": "Prefer lambdas over std::bind, std::bind1st and std::bind2nd [AUTOSAR-A18_9_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Prefer lambdas over std::bind, std::bind1st and std::bind2nd [AUTOSAR-A18_9_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-9-1 The std::bind shall not be used" ] } }, { "id": "AUTOSAR-A18_9_4-a", "name": "Do not subsequently use the argument to std::forward", "shortDescription": { "text": "Do not subsequently use the argument to std::forward" }, "fullDescription": { "text": "Do not subsequently use the argument to std::forward [AUTOSAR-A18_9_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not subsequently use the argument to std::forward [AUTOSAR-A18_9_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-9-4 An argument to std::forward shall not be subsequently used" ] } }, { "id": "AUTOSAR-A18_9_3-a", "name": "Do not use std::move on objects declared with the const or const & type", "shortDescription": { "text": "Do not use std::move on objects declared with the const or const & type" }, "fullDescription": { "text": "Do not use std::move on objects declared with the const or const & type [AUTOSAR-A18_9_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use std::move on objects declared with the const or const & type [AUTOSAR-A18_9_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-9-3 The std::move shall not be used on objects declared const or const&" ] } }, { "id": "AUTOSAR-A14_8_2-a", "name": "Overloaded function templates shall not be explicitly specialized", "shortDescription": { "text": "Overloaded function templates shall not be explicitly specialized" }, "fullDescription": { "text": "Overloaded function templates shall not be explicitly specialized [AUTOSAR-A14_8_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Overloaded function templates shall not be explicitly specialized [AUTOSAR-A14_8_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A14-8-2 Explicit specializations of function templates shall not be used" ] } }, { "id": "AUTOSAR-A3_8_1-a", "name": "Do not use resources that have been freed", "shortDescription": { "text": "Do not use resources that have been freed" }, "fullDescription": { "text": "Do not use resources that have been freed [AUTOSAR-A3_8_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use resources that have been freed [AUTOSAR-A3_8_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A3-8-1 An object shall not be accessed outside of its lifetime" ] } }, { "id": "AUTOSAR-A3_8_1-b", "name": "The address of an object with automatic storage shall not be returned from a function", "shortDescription": { "text": "The address of an object with automatic storage shall not be returned from a function" }, "fullDescription": { "text": "The address of an object with automatic storage shall not be returned from a function [AUTOSAR-A3_8_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The address of an object with automatic storage shall not be returned from a function [AUTOSAR-A3_8_1-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A3-8-1 An object shall not be accessed outside of its lifetime" ] } }, { "id": "AUTOSAR-A3_8_1-c", "name": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist", "shortDescription": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" }, "fullDescription": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist [AUTOSAR-A3_8_1-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist [AUTOSAR-A3_8_1-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A3-8-1 An object shall not be accessed outside of its lifetime" ] } }, { "id": "AUTOSAR-A3_8_1-d", "name": "Do not point to a wrapped object that has been freed", "shortDescription": { "text": "Do not point to a wrapped object that has been freed" }, "fullDescription": { "text": "Do not point to a wrapped object that has been freed [AUTOSAR-A3_8_1-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not point to a wrapped object that has been freed [AUTOSAR-A3_8_1-d]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A3-8-1 An object shall not be accessed outside of its lifetime" ] } }, { "id": "AUTOSAR-M16_3_2-a", "name": "The # and ## preprocessor operators should not be used", "shortDescription": { "text": "The # and ## preprocessor operators should not be used" }, "fullDescription": { "text": "The # and ## preprocessor operators should not be used [AUTOSAR-M16_3_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The # and ## preprocessor operators should not be used [AUTOSAR-M16_3_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M16-3-2 The # and ## operators should not be used" ] } }, { "id": "AUTOSAR-A8_5_4-a", "name": "Avoid overloading constructors with std::initializer_list", "shortDescription": { "text": "Avoid overloading constructors with std::initializer_list" }, "fullDescription": { "text": "Avoid overloading constructors with std::initializer_list [AUTOSAR-A8_5_4-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid overloading constructors with std::initializer_list [AUTOSAR-A8_5_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-5-4 If a class has a user-declared constructor that takes a parameter of type std::initializer_list, then it shall be the only constructor apart from special member function constructors" ] } }, { "id": "AUTOSAR-M16_3_1-a", "name": "There shall be at most one occurrence of the # or ## preprocessor operators in a single macro definition", "shortDescription": { "text": "There shall be at most one occurrence of the # or ## preprocessor operators in a single macro definition" }, "fullDescription": { "text": "There shall be at most one occurrence of the # or ## preprocessor operators in a single macro definition [AUTOSAR-M16_3_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be at most one occurrence of the # or ## preprocessor operators in a single macro definition [AUTOSAR-M16_3_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M16-3-1 There shall be at most one occurrence of the # or ## operators in a single macro definition" ] } }, { "id": "AUTOSAR-M7_3_2-a", "name": "The identifier main shall not be used for a function other than the global function main", "shortDescription": { "text": "The identifier main shall not be used for a function other than the global function main" }, "fullDescription": { "text": "The identifier main shall not be used for a function other than the global function main [AUTOSAR-M7_3_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The identifier main shall not be used for a function other than the global function main [AUTOSAR-M7_3_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M7-3-2 The identifier main shall not be used for a function other than the global function main" ] } }, { "id": "AUTOSAR-M7_3_1-a", "name": "The global namespace shall only contain main() and namespace declarations", "shortDescription": { "text": "The global namespace shall only contain main() and namespace declarations" }, "fullDescription": { "text": "The global namespace shall only contain main() and namespace declarations [AUTOSAR-M7_3_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The global namespace shall only contain main() and namespace declarations [AUTOSAR-M7_3_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M7-3-1 The global namespace shall only contain main, namespace declarations and extern \"C\" declarations" ] } }, { "id": "AUTOSAR-A16_2_1-a", "name": "The following character sequences shall not appear in header file names: ', \\, \/*, \/\/, or \"", "shortDescription": { "text": "The following character sequences shall not appear in header file names: ', \\, \/*, \/\/, or \"" }, "fullDescription": { "text": "The following character sequences shall not appear in header file names: ', \\, \/*, \/\/, or \" [AUTOSAR-A16_2_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The following character sequences shall not appear in header file names: ', \\, \/*, \/\/, or \" [AUTOSAR-A16_2_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A16-2-1 The ', \", \/*, \/\/, \\ characters shall not occur in a header file name or in #include directive" ] } }, { "id": "AUTOSAR-A8_5_1-a", "name": "List members in an initialization list in the order in which they are declared", "shortDescription": { "text": "List members in an initialization list in the order in which they are declared" }, "fullDescription": { "text": "List members in an initialization list in the order in which they are declared [AUTOSAR-A8_5_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "List members in an initialization list in the order in which they are declared [AUTOSAR-A8_5_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-5-1 In an initialization list, the order of initialization shall be following: (1) virtual base classes in depth and left to right order of the inheritance graph, (2) direct base classes in left to right order of inheritance list, (3) non-static data members in the order they were declared in the class definition" ] } }, { "id": "AUTOSAR-M7_3_4-a", "name": "using-directives shall not be used", "shortDescription": { "text": "using-directives shall not be used" }, "fullDescription": { "text": "using-directives shall not be used [AUTOSAR-M7_3_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "using-directives shall not be used [AUTOSAR-M7_3_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M7-3-4 Using-directives shall not be used" ] } }, { "id": "AUTOSAR-A8_5_0-a", "name": "Avoid use before initialization", "shortDescription": { "text": "Avoid use before initialization" }, "fullDescription": { "text": "Avoid use before initialization [AUTOSAR-A8_5_0-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid use before initialization [AUTOSAR-A8_5_0-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-5-0 All memory shall be initialized before it is read" ] } }, { "id": "AUTOSAR-M7_3_3-a", "name": "There shall be no unnamed namespaces in header files", "shortDescription": { "text": "There shall be no unnamed namespaces in header files" }, "fullDescription": { "text": "There shall be no unnamed namespaces in header files [AUTOSAR-M7_3_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unnamed namespaces in header files [AUTOSAR-M7_3_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M7-3-3 There shall be no unnamed namespaces in header files" ] } }, { "id": "AUTOSAR-A8_5_3-a", "name": "A variable of type auto shall not be initialized using '{}' or '={}' braced-initialization", "shortDescription": { "text": "A variable of type auto shall not be initialized using '{}' or '={}' braced-initialization" }, "fullDescription": { "text": "A variable of type auto shall not be initialized using '{}' or '={}' braced-initialization [AUTOSAR-A8_5_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A variable of type auto shall not be initialized using '{}' or '={}' braced-initialization [AUTOSAR-A8_5_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-5-3 A variable of type auto shall not be initialized using {} or ={} braced-initialization" ] } }, { "id": "AUTOSAR-M7_3_6-a", "name": "using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files", "shortDescription": { "text": "using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" }, "fullDescription": { "text": "using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files [AUTOSAR-M7_3_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files [AUTOSAR-M7_3_6-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M7-3-6 Using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" ] } }, { "id": "AUTOSAR-A16_2_2-a", "name": "A file should directly include only the headers that contain declarations and definitions required to compile that file", "shortDescription": { "text": "A file should directly include only the headers that contain declarations and definitions required to compile that file" }, "fullDescription": { "text": "A file should directly include only the headers that contain declarations and definitions required to compile that file [AUTOSAR-A16_2_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A file should directly include only the headers that contain declarations and definitions required to compile that file [AUTOSAR-A16_2_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A16-2-2 There shall be no unused include directives" ] } }, { "id": "AUTOSAR-A8_5_2-a", "name": "Braced-initialization {}, without equals sign, shall be used for variable initialization", "shortDescription": { "text": "Braced-initialization {}, without equals sign, shall be used for variable initialization" }, "fullDescription": { "text": "Braced-initialization {}, without equals sign, shall be used for variable initialization [AUTOSAR-A8_5_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Braced-initialization {}, without equals sign, shall be used for variable initialization [AUTOSAR-A8_5_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-5-2 Braced-initialization {}, without equals sign, shall be used for variable initialization" ] } }, { "id": "AUTOSAR-A17_0_1-a", "name": "Do not #define nor #undef identifier 'defined'", "shortDescription": { "text": "Do not #define nor #undef identifier 'defined'" }, "fullDescription": { "text": "Do not #define nor #undef identifier 'defined' [AUTOSAR-A17_0_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not #define nor #undef identifier 'defined' [AUTOSAR-A17_0_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A17-0-1 Reserved identifiers, macros and functions in the C++ standard library shall not be defined, redefined or undefined" ] } }, { "id": "AUTOSAR-A17_0_1-b", "name": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)", "shortDescription": { "text": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)" }, "fullDescription": { "text": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code) [AUTOSAR-A17_0_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code) [AUTOSAR-A17_0_1-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A17-0-1 Reserved identifiers, macros and functions in the C++ standard library shall not be defined, redefined or undefined" ] } }, { "id": "AUTOSAR-A17_0_1-c", "name": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)", "shortDescription": { "text": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" }, "fullDescription": { "text": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code) [AUTOSAR-A17_0_1-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code) [AUTOSAR-A17_0_1-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A17-0-1 Reserved identifiers, macros and functions in the C++ standard library shall not be defined, redefined or undefined" ] } }, { "id": "AUTOSAR-A17_0_1-d", "name": "Do not redefine reserved words", "shortDescription": { "text": "Do not redefine reserved words" }, "fullDescription": { "text": "Do not redefine reserved words [AUTOSAR-A17_0_1-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not redefine reserved words [AUTOSAR-A17_0_1-d]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A17-0-1 Reserved identifiers, macros and functions in the C++ standard library shall not be defined, redefined or undefined" ] } }, { "id": "AUTOSAR-A17_0_1-e", "name": "Do not #define or #undef identifiers with names which start with underscore", "shortDescription": { "text": "Do not #define or #undef identifiers with names which start with underscore" }, "fullDescription": { "text": "Do not #define or #undef identifiers with names which start with underscore [AUTOSAR-A17_0_1-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not #define or #undef identifiers with names which start with underscore [AUTOSAR-A17_0_1-e]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A17-0-1 Reserved identifiers, macros and functions in the C++ standard library shall not be defined, redefined or undefined" ] } }, { "id": "AUTOSAR-A9_3_1-a", "name": "Public member functions shall not return non-const handles to private\/protected class-data", "shortDescription": { "text": "Public member functions shall not return non-const handles to private\/protected class-data" }, "fullDescription": { "text": "Public member functions shall not return non-const handles to private\/protected class-data [AUTOSAR-A9_3_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Public member functions shall not return non-const handles to private\/protected class-data [AUTOSAR-A9_3_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A9-3-1 Member functions shall not return non-const \"raw\" pointers or references to private or protected data owned by the class" ] } }, { "id": "AUTOSAR-A9_3_1-b", "name": "Protected member function shall not return non-const handles to private class-data", "shortDescription": { "text": "Protected member function shall not return non-const handles to private class-data" }, "fullDescription": { "text": "Protected member function shall not return non-const handles to private class-data [AUTOSAR-A9_3_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protected member function shall not return non-const handles to private class-data [AUTOSAR-A9_3_1-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A9-3-1 Member functions shall not return non-const \"raw\" pointers or references to private or protected data owned by the class" ] } }, { "id": "AUTOSAR-M6_5_5-a", "name": "A loop-control-variable other than the loop-counter shall not be modified within condition or expression", "shortDescription": { "text": "A loop-control-variable other than the loop-counter shall not be modified within condition or expression" }, "fullDescription": { "text": "A loop-control-variable other than the loop-counter shall not be modified within condition or expression [AUTOSAR-M6_5_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A loop-control-variable other than the loop-counter shall not be modified within condition or expression [AUTOSAR-M6_5_5-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M6-5-5 A loop-control-variable other than the loop-counter shall not be modified within condition or expression" ] } }, { "id": "AUTOSAR-M6_5_4-a", "name": "The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop", "shortDescription": { "text": "The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop" }, "fullDescription": { "text": "The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop [AUTOSAR-M6_5_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop [AUTOSAR-M6_5_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M6-5-4 The loop-counter shall be modified by one of: --, ++, -= n, or += n; where n remains constant for the duration of the loop" ] } }, { "id": "AUTOSAR-M3_4_1-a", "name": "Declare variables as locally as possible", "shortDescription": { "text": "Declare variables as locally as possible" }, "fullDescription": { "text": "Declare variables as locally as possible [AUTOSAR-M3_4_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Declare variables as locally as possible [AUTOSAR-M3_4_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M3-4-1 An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" ] } }, { "id": "AUTOSAR-M3_4_1-b", "name": "Non-const objects with internal linkage should be defined at function scope if they are only accessed from within a single function", "shortDescription": { "text": "Non-const objects with internal linkage should be defined at function scope if they are only accessed from within a single function" }, "fullDescription": { "text": "Non-const objects with internal linkage should be defined at function scope if they are only accessed from within a single function [AUTOSAR-M3_4_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Non-const objects with internal linkage should be defined at function scope if they are only accessed from within a single function [AUTOSAR-M3_4_1-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M3-4-1 An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" ] } }, { "id": "AUTOSAR-M6_5_3-a", "name": "Do not modify for loop counter within a body of the loop", "shortDescription": { "text": "Do not modify for loop counter within a body of the loop" }, "fullDescription": { "text": "Do not modify for loop counter within a body of the loop [AUTOSAR-M6_5_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not modify for loop counter within a body of the loop [AUTOSAR-M6_5_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M6-5-3 The loop-counter shall not be modified within condition or statement" ] } }, { "id": "AUTOSAR-M6_5_2-a", "name": "If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=", "shortDescription": { "text": "If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=" }, "fullDescription": { "text": "If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >= [AUTOSAR-M6_5_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >= [AUTOSAR-M6_5_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=" ] } }, { "id": "AUTOSAR-M6_5_6-a", "name": "A loop-control-variable other than the loop-counter which is modified in statement shall have type bool", "shortDescription": { "text": "A loop-control-variable other than the loop-counter which is modified in statement shall have type bool" }, "fullDescription": { "text": "A loop-control-variable other than the loop-counter which is modified in statement shall have type bool [AUTOSAR-M6_5_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A loop-control-variable other than the loop-counter which is modified in statement shall have type bool [AUTOSAR-M6_5_6-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M6-5-6 A loop-control-variable other than the loop-counter which is modified in statement shall have type bool" ] } }, { "id": "AUTOSAR-A13_1_2-a", "name": "User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters", "shortDescription": { "text": "User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" }, "fullDescription": { "text": "User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters [AUTOSAR-A13_1_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters [AUTOSAR-A13_1_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A13-1-2 User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" ] } }, { "id": "AUTOSAR-M0_2_1-a", "name": "An object shall not be assigned to an overlapping object", "shortDescription": { "text": "An object shall not be assigned to an overlapping object" }, "fullDescription": { "text": "An object shall not be assigned to an overlapping object [AUTOSAR-M0_2_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An object shall not be assigned to an overlapping object [AUTOSAR-M0_2_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-2-1 An object shall not be assigned to an overlapping object" ] } }, { "id": "AUTOSAR-M0_2_1-b", "name": "An object shall not be assigned to an overlapping object", "shortDescription": { "text": "An object shall not be assigned to an overlapping object" }, "fullDescription": { "text": "An object shall not be assigned to an overlapping object [AUTOSAR-M0_2_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An object shall not be assigned to an overlapping object [AUTOSAR-M0_2_1-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-2-1 An object shall not be assigned to an overlapping object" ] } }, { "id": "AUTOSAR-M4_10_1-a", "name": "The 'NULL' identifier should not be used as an integer value", "shortDescription": { "text": "The 'NULL' identifier should not be used as an integer value" }, "fullDescription": { "text": "The 'NULL' identifier should not be used as an integer value [AUTOSAR-M4_10_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'NULL' identifier should not be used as an integer value [AUTOSAR-M4_10_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M4-10-1 NULL shall not be used as an integer value" ] } }, { "id": "AUTOSAR-A13_1_3-a", "name": "User defined literals operators shall only perform conversion of passed parameters", "shortDescription": { "text": "User defined literals operators shall only perform conversion of passed parameters" }, "fullDescription": { "text": "User defined literals operators shall only perform conversion of passed parameters [AUTOSAR-A13_1_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "User defined literals operators shall only perform conversion of passed parameters [AUTOSAR-A13_1_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A13-1-3 User defined literals operators shall only perform conversion of passed parameters" ] } }, { "id": "AUTOSAR-A5_3_3-a", "name": "Do not delete objects with incomplete class at the point of deletion", "shortDescription": { "text": "Do not delete objects with incomplete class at the point of deletion" }, "fullDescription": { "text": "Do not delete objects with incomplete class at the point of deletion [AUTOSAR-A5_3_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not delete objects with incomplete class at the point of deletion [AUTOSAR-A5_3_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-3-3 Pointers to incomplete class types shall not be deleted" ] } }, { "id": "AUTOSAR-A5_3_2-a", "name": "Avoid null pointer dereferencing", "shortDescription": { "text": "Avoid null pointer dereferencing" }, "fullDescription": { "text": "Avoid null pointer dereferencing [AUTOSAR-A5_3_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid null pointer dereferencing [AUTOSAR-A5_3_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-3-2 Null pointers shall not be dereferenced" ] } }, { "id": "AUTOSAR-A5_3_1-a", "name": "The operand of the 'typeid' operator shall not contain any expression that has side effects", "shortDescription": { "text": "The operand of the 'typeid' operator shall not contain any expression that has side effects" }, "fullDescription": { "text": "The operand of the 'typeid' operator shall not contain any expression that has side effects [AUTOSAR-A5_3_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The operand of the 'typeid' operator shall not contain any expression that has side effects [AUTOSAR-A5_3_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-3-1 Evaluation of the operand to the typeid operator shall not contain side effects" ] } }, { "id": "AUTOSAR-A5_3_1-b", "name": "The operand of the 'typeid' operator shall not contain a function call that causes side effects", "shortDescription": { "text": "The operand of the 'typeid' operator shall not contain a function call that causes side effects" }, "fullDescription": { "text": "The operand of the 'typeid' operator shall not contain a function call that causes side effects [AUTOSAR-A5_3_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The operand of the 'typeid' operator shall not contain a function call that causes side effects [AUTOSAR-A5_3_1-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-3-1 Evaluation of the operand to the typeid operator shall not contain side effects" ] } }, { "id": "AUTOSAR-M18_7_1-a", "name": "The signal handling facilities of <signal.h> shall not be used", "shortDescription": { "text": "The signal handling facilities of <signal.h> shall not be used" }, "fullDescription": { "text": "The signal handling facilities of <signal.h> shall not be used [AUTOSAR-M18_7_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The signal handling facilities of <signal.h> shall not be used [AUTOSAR-M18_7_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M18-7-1 The signal handling facilities of <csignal> shall not be used" ] } }, { "id": "AUTOSAR-M18_7_1-b", "name": "The standard header files <signal.h> or <csignal> shall not be used", "shortDescription": { "text": "The standard header files <signal.h> or <csignal> shall not be used" }, "fullDescription": { "text": "The standard header files <signal.h> or <csignal> shall not be used [AUTOSAR-M18_7_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The standard header files <signal.h> or <csignal> shall not be used [AUTOSAR-M18_7_1-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M18-7-1 The signal handling facilities of <csignal> shall not be used" ] } }, { "id": "AUTOSAR-A26_5_1-a", "name": "Do not use the rand() function for generating pseudorandom numbers", "shortDescription": { "text": "Do not use the rand() function for generating pseudorandom numbers" }, "fullDescription": { "text": "Do not use the rand() function for generating pseudorandom numbers [AUTOSAR-A26_5_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use the rand() function for generating pseudorandom numbers [AUTOSAR-A26_5_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A26-5-1 Pseudorandom numbers shall not be generated using std::rand()" ] } }, { "id": "AUTOSAR-M4_10_2-a", "name": "Literal zero (0) shall not be used as the null-pointer-constant", "shortDescription": { "text": "Literal zero (0) shall not be used as the null-pointer-constant" }, "fullDescription": { "text": "Literal zero (0) shall not be used as the null-pointer-constant [AUTOSAR-M4_10_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Literal zero (0) shall not be used as the null-pointer-constant [AUTOSAR-M4_10_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M4-10-2 Literal zero (0) shall not be used as the null-pointer-constant" ] } }, { "id": "AUTOSAR-A2_10_6-a", "name": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope", "shortDescription": { "text": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" }, "fullDescription": { "text": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope [AUTOSAR-A2_10_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope [AUTOSAR-A2_10_6-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-10-6 A class or enumeration name shall not be hidden by a variable, function or enumerator declaration in the same scope" ] } }, { "id": "AUTOSAR-A2_10_6-b", "name": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope", "shortDescription": { "text": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" }, "fullDescription": { "text": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope [AUTOSAR-A2_10_6-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope [AUTOSAR-A2_10_6-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-10-6 A class or enumeration name shall not be hidden by a variable, function or enumerator declaration in the same scope" ] } }, { "id": "AUTOSAR-A2_10_6-c", "name": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope", "shortDescription": { "text": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" }, "fullDescription": { "text": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope [AUTOSAR-A2_10_6-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope [AUTOSAR-A2_10_6-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-10-6 A class or enumeration name shall not be hidden by a variable, function or enumerator declaration in the same scope" ] } }, { "id": "AUTOSAR-A26_5_2-a", "name": "Properly seed pseudorandom number generators", "shortDescription": { "text": "Properly seed pseudorandom number generators" }, "fullDescription": { "text": "Properly seed pseudorandom number generators [AUTOSAR-A26_5_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly seed pseudorandom number generators [AUTOSAR-A26_5_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A26-5-2 Random number engines shall not be default-initialized" ] } }, { "id": "AUTOSAR-A2_10_4-a", "name": "The identifier name of a non-member object with static storage duration shall not be reused within a namespace", "shortDescription": { "text": "The identifier name of a non-member object with static storage duration shall not be reused within a namespace" }, "fullDescription": { "text": "The identifier name of a non-member object with static storage duration shall not be reused within a namespace [AUTOSAR-A2_10_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The identifier name of a non-member object with static storage duration shall not be reused within a namespace [AUTOSAR-A2_10_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-10-4 The identifier name of a non-member object with static storage duration or static function shall not be reused within a namespace" ] } }, { "id": "AUTOSAR-A2_10_4-b", "name": "The identifier name of a non-member static function shall not be reused within a namespace", "shortDescription": { "text": "The identifier name of a non-member static function shall not be reused within a namespace" }, "fullDescription": { "text": "The identifier name of a non-member static function shall not be reused within a namespace [AUTOSAR-A2_10_4-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The identifier name of a non-member static function shall not be reused within a namespace [AUTOSAR-A2_10_4-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-10-4 The identifier name of a non-member object with static storage duration or static function shall not be reused within a namespace" ] } }, { "id": "AUTOSAR-A2_10_5-a", "name": "Identifiers that define objects with external linkage shall be unique", "shortDescription": { "text": "Identifiers that define objects with external linkage shall be unique" }, "fullDescription": { "text": "Identifiers that define objects with external linkage shall be unique [AUTOSAR-A2_10_5-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers that define objects with external linkage shall be unique [AUTOSAR-A2_10_5-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-10-5 An identifier name of a function with static storage duration or a non-member object with external or internal linkage should not be reused" ] } }, { "id": "AUTOSAR-A2_10_5-b", "name": "Identifiers that define functions with external linkage shall be unique", "shortDescription": { "text": "Identifiers that define functions with external linkage shall be unique" }, "fullDescription": { "text": "Identifiers that define functions with external linkage shall be unique [AUTOSAR-A2_10_5-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers that define functions with external linkage shall be unique [AUTOSAR-A2_10_5-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-10-5 An identifier name of a function with static storage duration or a non-member object with external or internal linkage should not be reused" ] } }, { "id": "AUTOSAR-A4_5_1-a", "name": "Expressions with type enum shall not be used as operands to built-in operators other than  [ ],  =, ==, !=, <, <=, >, >=, and the unary & operator", "shortDescription": { "text": "Expressions with type enum shall not be used as operands to built-in operators other than  [ ],  =, ==, !=, <, <=, >, >=, and the unary & operator" }, "fullDescription": { "text": "Expressions with type enum shall not be used as operands to built-in operators other than  [ ],  =, ==, !=, <, <=, >, >=, and the unary & operator [AUTOSAR-A4_5_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Expressions with type enum shall not be used as operands to built-in operators other than  [ ],  =, ==, !=, <, <=, >, >=, and the unary & operator [AUTOSAR-A4_5_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A4-5-1 Expressions with type enum or enum class shall not be used as operands to built-in and overloaded operators other than the subscript operator [ ], the assignment operator =, the equality operators == and !=, the unary & operator, and the relational operators <, <=, >, >=" ] } }, { "id": "AUTOSAR-A15_5_3-a", "name": "The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception", "shortDescription": { "text": "The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" }, "fullDescription": { "text": "The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception [AUTOSAR-A15_5_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception [AUTOSAR-A15_5_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-5-3 The std::terminate() function shall not be called implicitly" ] } }, { "id": "AUTOSAR-A15_5_3-b", "name": "Never allow an exception to be thrown from a destructor, deallocation, and swap", "shortDescription": { "text": "Never allow an exception to be thrown from a destructor, deallocation, and swap" }, "fullDescription": { "text": "Never allow an exception to be thrown from a destructor, deallocation, and swap [AUTOSAR-A15_5_3-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Never allow an exception to be thrown from a destructor, deallocation, and swap [AUTOSAR-A15_5_3-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-5-3 The std::terminate() function shall not be called implicitly" ] } }, { "id": "AUTOSAR-A15_5_3-c", "name": "Do not throw from within destructor", "shortDescription": { "text": "Do not throw from within destructor" }, "fullDescription": { "text": "Do not throw from within destructor [AUTOSAR-A15_5_3-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not throw from within destructor [AUTOSAR-A15_5_3-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-5-3 The std::terminate() function shall not be called implicitly" ] } }, { "id": "AUTOSAR-A15_5_3-d", "name": "There should be at least one exception handler to catch all otherwise unhandled exceptions", "shortDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions" }, "fullDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [AUTOSAR-A15_5_3-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [AUTOSAR-A15_5_3-d]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-5-3 The std::terminate() function shall not be called implicitly" ] } }, { "id": "AUTOSAR-A15_5_3-e", "name": "An empty throw shall only be used in the compound-statement of a catch handler", "shortDescription": { "text": "An empty throw shall only be used in the compound-statement of a catch handler" }, "fullDescription": { "text": "An empty throw shall only be used in the compound-statement of a catch handler [AUTOSAR-A15_5_3-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An empty throw shall only be used in the compound-statement of a catch handler [AUTOSAR-A15_5_3-e]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-5-3 The std::terminate() function shall not be called implicitly" ] } }, { "id": "AUTOSAR-A15_5_3-f", "name": "Exceptions shall be raised only after start-up and before termination of the program", "shortDescription": { "text": "Exceptions shall be raised only after start-up and before termination of the program" }, "fullDescription": { "text": "Exceptions shall be raised only after start-up and before termination of the program [AUTOSAR-A15_5_3-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Exceptions shall be raised only after start-up and before termination of the program [AUTOSAR-A15_5_3-f]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-5-3 The std::terminate() function shall not be called implicitly" ] } }, { "id": "AUTOSAR-A15_5_3-g", "name": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point", "shortDescription": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" }, "fullDescription": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point [AUTOSAR-A15_5_3-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point [AUTOSAR-A15_5_3-g]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-5-3 The std::terminate() function shall not be called implicitly" ] } }, { "id": "AUTOSAR-A15_5_3-h", "name": "Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)", "shortDescription": { "text": "Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" }, "fullDescription": { "text": "Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s) [AUTOSAR-A15_5_3-h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s) [AUTOSAR-A15_5_3-h]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-5-3 The std::terminate() function shall not be called implicitly" ] } }, { "id": "AUTOSAR-A15_5_3-i", "name": "Function called in global or namespace scope shall not throw unhandled exceptions", "shortDescription": { "text": "Function called in global or namespace scope shall not throw unhandled exceptions" }, "fullDescription": { "text": "Function called in global or namespace scope shall not throw unhandled exceptions [AUTOSAR-A15_5_3-i]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Function called in global or namespace scope shall not throw unhandled exceptions [AUTOSAR-A15_5_3-i]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-5-3 The std::terminate() function shall not be called implicitly" ] } }, { "id": "AUTOSAR-A15_5_3-j", "name": "Always catch exceptions", "shortDescription": { "text": "Always catch exceptions" }, "fullDescription": { "text": "Always catch exceptions [AUTOSAR-A15_5_3-j]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Always catch exceptions [AUTOSAR-A15_5_3-j]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-5-3 The std::terminate() function shall not be called implicitly" ] } }, { "id": "AUTOSAR-A15_5_3-k", "name": "Properly define exit handlers", "shortDescription": { "text": "Properly define exit handlers" }, "fullDescription": { "text": "Properly define exit handlers [AUTOSAR-A15_5_3-k]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly define exit handlers [AUTOSAR-A15_5_3-k]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-5-3 The std::terminate() function shall not be called implicitly" ] } }, { "id": "AUTOSAR-A15_5_2-a", "name": "The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception", "shortDescription": { "text": "The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" }, "fullDescription": { "text": "The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception [AUTOSAR-A15_5_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception [AUTOSAR-A15_5_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-5-2 Program shall not be abruptly terminated. In particular, an implicit or explicit invocation of std::abort(), std::quick_exit(), std::_Exit(), std::terminate() shall not be done" ] } }, { "id": "AUTOSAR-A15_5_2-b", "name": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used", "shortDescription": { "text": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" }, "fullDescription": { "text": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [AUTOSAR-A15_5_2-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [AUTOSAR-A15_5_2-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-5-2 Program shall not be abruptly terminated. In particular, an implicit or explicit invocation of std::abort(), std::quick_exit(), std::_Exit(), std::terminate() shall not be done" ] } }, { "id": "AUTOSAR-A15_5_2-c", "name": "The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used", "shortDescription": { "text": "The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" }, "fullDescription": { "text": "The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used [AUTOSAR-A15_5_2-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used [AUTOSAR-A15_5_2-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-5-2 Program shall not be abruptly terminated. In particular, an implicit or explicit invocation of std::abort(), std::quick_exit(), std::_Exit(), std::terminate() shall not be done" ] } }, { "id": "AUTOSAR-A15_5_1-a", "name": "Never allow an exception to be thrown from a destructor, deallocation, and swap", "shortDescription": { "text": "Never allow an exception to be thrown from a destructor, deallocation, and swap" }, "fullDescription": { "text": "Never allow an exception to be thrown from a destructor, deallocation, and swap [AUTOSAR-A15_5_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Never allow an exception to be thrown from a destructor, deallocation, and swap [AUTOSAR-A15_5_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-5-1 All user-provided class destructors, deallocation functions, move constructors, move assignment operators and swap functions shall not exit with an exception. A noexcept exception specification shall be added to these functions as appropriate" ] } }, { "id": "AUTOSAR-A15_5_1-b", "name": "All user-provided move constructors and move assignment operators shall not exit with an exception", "shortDescription": { "text": "All user-provided move constructors and move assignment operators shall not exit with an exception" }, "fullDescription": { "text": "All user-provided move constructors and move assignment operators shall not exit with an exception [AUTOSAR-A15_5_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All user-provided move constructors and move assignment operators shall not exit with an exception [AUTOSAR-A15_5_1-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-5-1 All user-provided class destructors, deallocation functions, move constructors, move assignment operators and swap functions shall not exit with an exception. A noexcept exception specification shall be added to these functions as appropriate" ] } }, { "id": "AUTOSAR-M9_6_4-a", "name": "Named bit-fields with signed integer type shall have a length of more than one bit", "shortDescription": { "text": "Named bit-fields with signed integer type shall have a length of more than one bit" }, "fullDescription": { "text": "Named bit-fields with signed integer type shall have a length of more than one bit [AUTOSAR-M9_6_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Named bit-fields with signed integer type shall have a length of more than one bit [AUTOSAR-M9_6_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M9-6-4 Named bit-fields with signed integer type shall have a length of more than one bit" ] } }, { "id": "AUTOSAR-M5_2_10-a", "name": "The increment (++) and decrement (--) operators should not be mixed with arithmetic operators in an expression", "shortDescription": { "text": "The increment (++) and decrement (--) operators should not be mixed with arithmetic operators in an expression" }, "fullDescription": { "text": "The increment (++) and decrement (--) operators should not be mixed with arithmetic operators in an expression [AUTOSAR-M5_2_10-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The increment (++) and decrement (--) operators should not be mixed with arithmetic operators in an expression [AUTOSAR-M5_2_10-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-2-10 The increment (++) and decrement (--) operators shall not be mixed with other operators in an expression" ] } }, { "id": "AUTOSAR-M5_2_12-a", "name": "An object of array type with a specified size should not decay to a pointer when it is passed as a function argument", "shortDescription": { "text": "An object of array type with a specified size should not decay to a pointer when it is passed as a function argument" }, "fullDescription": { "text": "An object of array type with a specified size should not decay to a pointer when it is passed as a function argument [AUTOSAR-M5_2_12-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An object of array type with a specified size should not decay to a pointer when it is passed as a function argument [AUTOSAR-M5_2_12-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-2-12 An identifier with array type passed as a function argument shall not decay to a pointer" ] } }, { "id": "AUTOSAR-M5_2_11-a", "name": "Avoid overloading comma operator \",\"", "shortDescription": { "text": "Avoid overloading comma operator \",\"" }, "fullDescription": { "text": "Avoid overloading comma operator \",\" [AUTOSAR-M5_2_11-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overloading comma operator \",\" [AUTOSAR-M5_2_11-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-2-11 The comma operator, && operator and the || operator shall not be overloaded" ] } }, { "id": "AUTOSAR-M5_2_11-b", "name": "Avoid overloading logical operators AND, OR (&&, ||)", "shortDescription": { "text": "Avoid overloading logical operators AND, OR (&&, ||)" }, "fullDescription": { "text": "Avoid overloading logical operators AND, OR (&&, ||) [AUTOSAR-M5_2_11-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overloading logical operators AND, OR (&&, ||) [AUTOSAR-M5_2_11-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-2-11 The comma operator, && operator and the || operator shall not be overloaded" ] } }, { "id": "AUTOSAR-A14_7_2-a", "name": "Template specialization shall be declared in the same file as the primary template or a user-defined type, for which the specialization is declared", "shortDescription": { "text": "Template specialization shall be declared in the same file as the primary template or a user-defined type, for which the specialization is declared" }, "fullDescription": { "text": "Template specialization shall be declared in the same file as the primary template or a user-defined type, for which the specialization is declared [AUTOSAR-A14_7_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Template specialization shall be declared in the same file as the primary template or a user-defined type, for which the specialization is declared [AUTOSAR-A14_7_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A14-7-2 Template specialization shall be declared in the same file (1) as the primary template (2) as a user-defined type, for which the specialization is declared" ] } }, { "id": "AUTOSAR-A3_9_1-b", "name": "Fixed width integer types from <cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types", "shortDescription": { "text": "Fixed width integer types from <cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" }, "fullDescription": { "text": "Fixed width integer types from <cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types [AUTOSAR-A3_9_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Fixed width integer types from <cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types [AUTOSAR-A3_9_1-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A3-9-1 Fixed width integer types from <cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" ] } }, { "id": "AUTOSAR-M16_2_3-a", "name": "Use multiple include guards", "shortDescription": { "text": "Use multiple include guards" }, "fullDescription": { "text": "Use multiple include guards [AUTOSAR-M16_2_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use multiple include guards [AUTOSAR-M16_2_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M16-2-3 Include guards shall be provided" ] } }, { "id": "AUTOSAR-A3_1_6-a", "name": "Trivial accessor and mutator functions should be inlined", "shortDescription": { "text": "Trivial accessor and mutator functions should be inlined" }, "fullDescription": { "text": "Trivial accessor and mutator functions should be inlined [AUTOSAR-A3_1_6-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Trivial accessor and mutator functions should be inlined [AUTOSAR-A3_1_6-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A3-1-6 Trivial accessor and mutator functions should be inlined" ] } }, { "id": "AUTOSAR-A3_1_5-a", "name": "A function definition should not be placed in a class specification unless the function is intended to be inlined", "shortDescription": { "text": "A function definition should not be placed in a class specification unless the function is intended to be inlined" }, "fullDescription": { "text": "A function definition should not be placed in a class specification unless the function is intended to be inlined [AUTOSAR-A3_1_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A function definition should not be placed in a class specification unless the function is intended to be inlined [AUTOSAR-A3_1_5-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A3-1-5 A function definition shall only be placed in a class definition if (1) the function is intended to be inlined (2) it is a member function template (3) it is a member function of a class template" ] } }, { "id": "AUTOSAR-A3_1_4-a", "name": "When an array with external linkage is declared, its size should be explicitly specified", "shortDescription": { "text": "When an array with external linkage is declared, its size should be explicitly specified" }, "fullDescription": { "text": "When an array with external linkage is declared, its size should be explicitly specified [AUTOSAR-A3_1_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "When an array with external linkage is declared, its size should be explicitly specified [AUTOSAR-A3_1_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A3-1-4 When an array with external linkage is declared, its size shall be stated explicitly" ] } }, { "id": "AUTOSAR-A3_1_3-a", "name": "Implementation files in C++ will always have a file name extension of \".cpp\"", "shortDescription": { "text": "Implementation files in C++ will always have a file name extension of \".cpp\"" }, "fullDescription": { "text": "Implementation files in C++ will always have a file name extension of \".cpp\" [AUTOSAR-A3_1_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Implementation files in C++ will always have a file name extension of \".cpp\" [AUTOSAR-A3_1_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A3-1-3 Implementation files, that are defined locally in the project, should have a file name extension of \".cpp\"" ] } }, { "id": "AUTOSAR-A3_1_2-a", "name": "Header files should have a file extension of: \".h\", \".hpp\" or \".hxx\"", "shortDescription": { "text": "Header files should have a file extension of: \".h\", \".hpp\" or \".hxx\"" }, "fullDescription": { "text": "Header files should have a file extension of: \".h\", \".hpp\" or \".hxx\" [AUTOSAR-A3_1_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Header files should have a file extension of: \".h\", \".hpp\" or \".hxx\" [AUTOSAR-A3_1_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A3-1-2 Header files, that are defined locally in the project, shall have a file name extension of one of: \".h\", \".hpp\" or \".hxx\"" ] } }, { "id": "AUTOSAR-A3_1_1-a", "name": "A header file shall not contain definitions of functions or objects that are non-inline and have external linkage", "shortDescription": { "text": "A header file shall not contain definitions of functions or objects that are non-inline and have external linkage" }, "fullDescription": { "text": "A header file shall not contain definitions of functions or objects that are non-inline and have external linkage [AUTOSAR-A3_1_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A header file shall not contain definitions of functions or objects that are non-inline and have external linkage [AUTOSAR-A3_1_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule" ] } }, { "id": "AUTOSAR-A2_3_1-a", "name": "Only use characters defined in the ISO C standard", "shortDescription": { "text": "Only use characters defined in the ISO C standard" }, "fullDescription": { "text": "Only use characters defined in the ISO C standard [AUTOSAR-A2_3_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Only use characters defined in the ISO C standard [AUTOSAR-A2_3_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-3-1 Only those characters specified in the C++ Language Standard basic source character set shall be used in the source code" ] } }, { "id": "AUTOSAR-M10_1_2-a", "name": "A base class shall only be declared virtual if it is used in a diamond hierarchy", "shortDescription": { "text": "A base class shall only be declared virtual if it is used in a diamond hierarchy" }, "fullDescription": { "text": "A base class shall only be declared virtual if it is used in a diamond hierarchy [AUTOSAR-M10_1_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A base class shall only be declared virtual if it is used in a diamond hierarchy [AUTOSAR-M10_1_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M10-1-2 A base class shall only be declared virtual if it is used in a diamond hierarchy" ] } }, { "id": "AUTOSAR-M10_1_1-a", "name": "Classes should not be derived from virtual bases", "shortDescription": { "text": "Classes should not be derived from virtual bases" }, "fullDescription": { "text": "Classes should not be derived from virtual bases [AUTOSAR-M10_1_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Classes should not be derived from virtual bases [AUTOSAR-M10_1_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M10-1-1 Classes should not be derived from virtual bases" ] } }, { "id": "AUTOSAR-M8_0_1-a", "name": "Each variable should be declared in a separate declaration statement", "shortDescription": { "text": "Each variable should be declared in a separate declaration statement" }, "fullDescription": { "text": "Each variable should be declared in a separate declaration statement [AUTOSAR-M8_0_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Each variable should be declared in a separate declaration statement [AUTOSAR-M8_0_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" ] } }, { "id": "AUTOSAR-M6_4_2-a", "name": "All 'if...else-if' constructs shall be terminated with an 'else' clause", "shortDescription": { "text": "All 'if...else-if' constructs shall be terminated with an 'else' clause" }, "fullDescription": { "text": "All 'if...else-if' constructs shall be terminated with an 'else' clause [AUTOSAR-M6_4_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All 'if...else-if' constructs shall be terminated with an 'else' clause [AUTOSAR-M6_4_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M6-4-2 All if ... else if constructs shall be terminated with an else clause" ] } }, { "id": "AUTOSAR-M6_4_1-a", "name": "'if' and 'else' should be followed by a compound statement", "shortDescription": { "text": "'if' and 'else' should be followed by a compound statement" }, "fullDescription": { "text": "'if' and 'else' should be followed by a compound statement [AUTOSAR-M6_4_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "'if' and 'else' should be followed by a compound statement [AUTOSAR-M6_4_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement" ] } }, { "id": "AUTOSAR-A17_1_1-a", "name": "The error indicator 'errno' shall not be used", "shortDescription": { "text": "The error indicator 'errno' shall not be used" }, "fullDescription": { "text": "The error indicator 'errno' shall not be used [AUTOSAR-A17_1_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The error indicator 'errno' shall not be used [AUTOSAR-A17_1_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A17-1-1 Use of the C Standard Library shall be encapsulated and isolated" ] } }, { "id": "AUTOSAR-A21_8_1-a", "name": "Do not pass incorrect values to ctype.h library functions", "shortDescription": { "text": "Do not pass incorrect values to ctype.h library functions" }, "fullDescription": { "text": "Do not pass incorrect values to ctype.h library functions [AUTOSAR-A21_8_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not pass incorrect values to ctype.h library functions [AUTOSAR-A21_8_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A21-8-1 Arguments to character-handling functions shall be representable as an unsigned char" ] } }, { "id": "AUTOSAR-M10_1_3-a", "name": "A base class shall not be both virtual and non-virtual in the same hierarchy", "shortDescription": { "text": "A base class shall not be both virtual and non-virtual in the same hierarchy" }, "fullDescription": { "text": "A base class shall not be both virtual and non-virtual in the same hierarchy [AUTOSAR-M10_1_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A base class shall not be both virtual and non-virtual in the same hierarchy [AUTOSAR-M10_1_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M10-1-3 An accessible base class shall not be both virtual and non-virtual in the same hierarchy" ] } }, { "id": "AUTOSAR-M6_4_6-a", "name": "The final clause of a switch statement shall be the default-clause unless all enumeration values are tested", "shortDescription": { "text": "The final clause of a switch statement shall be the default-clause unless all enumeration values are tested" }, "fullDescription": { "text": "The final clause of a switch statement shall be the default-clause unless all enumeration values are tested [AUTOSAR-M6_4_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The final clause of a switch statement shall be the default-clause unless all enumeration values are tested [AUTOSAR-M6_4_6-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M6-4-6 The final clause of a switch statement shall be the default-clause" ] } }, { "id": "AUTOSAR-A25_1_1-a", "name": "Make predicates const pure functions", "shortDescription": { "text": "Make predicates const pure functions" }, "fullDescription": { "text": "Make predicates const pure functions [AUTOSAR-A25_1_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Make predicates const pure functions [AUTOSAR-A25_1_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A25-1-1 Non-static data members or captured values of predicate function objects that are state related to this object's identity shall not be copied" ] } }, { "id": "AUTOSAR-M6_4_5-a", "name": "An unconditional throw or break statement shall terminate every non-empty switch-clause", "shortDescription": { "text": "An unconditional throw or break statement shall terminate every non-empty switch-clause" }, "fullDescription": { "text": "An unconditional throw or break statement shall terminate every non-empty switch-clause [AUTOSAR-M6_4_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An unconditional throw or break statement shall terminate every non-empty switch-clause [AUTOSAR-M6_4_5-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause" ] } }, { "id": "AUTOSAR-M6_4_4-a", "name": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement", "shortDescription": { "text": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" }, "fullDescription": { "text": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement [AUTOSAR-M6_4_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement [AUTOSAR-M6_4_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M6-4-4 A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" ] } }, { "id": "AUTOSAR-M6_4_3-a", "name": "An unconditional throw or break statement shall terminate every non-empty switch-clause", "shortDescription": { "text": "An unconditional throw or break statement shall terminate every non-empty switch-clause" }, "fullDescription": { "text": "An unconditional throw or break statement shall terminate every non-empty switch-clause [AUTOSAR-M6_4_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An unconditional throw or break statement shall terminate every non-empty switch-clause [AUTOSAR-M6_4_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M6-4-3 A switch statement shall be a well-formed switch statement" ] } }, { "id": "AUTOSAR-M6_4_3-b", "name": "The final clause of a switch statement shall be the default-clause unless all enumeration values are tested", "shortDescription": { "text": "The final clause of a switch statement shall be the default-clause unless all enumeration values are tested" }, "fullDescription": { "text": "The final clause of a switch statement shall be the default-clause unless all enumeration values are tested [AUTOSAR-M6_4_3-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The final clause of a switch statement shall be the default-clause unless all enumeration values are tested [AUTOSAR-M6_4_3-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M6-4-3 A switch statement shall be a well-formed switch statement" ] } }, { "id": "AUTOSAR-M6_4_3-c", "name": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement", "shortDescription": { "text": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" }, "fullDescription": { "text": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement [AUTOSAR-M6_4_3-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement [AUTOSAR-M6_4_3-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M6-4-3 A switch statement shall be a well-formed switch statement" ] } }, { "id": "AUTOSAR-M6_4_3-d", "name": "Every switch statement shall have at least one case clause", "shortDescription": { "text": "Every switch statement shall have at least one case clause" }, "fullDescription": { "text": "Every switch statement shall have at least one case clause [AUTOSAR-M6_4_3-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Every switch statement shall have at least one case clause [AUTOSAR-M6_4_3-d]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M6-4-3 A switch statement shall be a well-formed switch statement" ] } }, { "id": "AUTOSAR-M6_4_3-e", "name": "A switch expression shall not represent a value that is effectively Boolean", "shortDescription": { "text": "A switch expression shall not represent a value that is effectively Boolean" }, "fullDescription": { "text": "A switch expression shall not represent a value that is effectively Boolean [AUTOSAR-M6_4_3-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A switch expression shall not represent a value that is effectively Boolean [AUTOSAR-M6_4_3-e]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M6-4-3 A switch statement shall be a well-formed switch statement" ] } }, { "id": "AUTOSAR-M2_7_1-a", "name": "The character sequence \/* shall not be used within a C-style comment", "shortDescription": { "text": "The character sequence \/* shall not be used within a C-style comment" }, "fullDescription": { "text": "The character sequence \/* shall not be used within a C-style comment [AUTOSAR-M2_7_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The character sequence \/* shall not be used within a C-style comment [AUTOSAR-M2_7_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M2-7-1 The character sequence \/* shall not be used within a C-style comment" ] } }, { "id": "AUTOSAR-M6_4_7-a", "name": "A switch expression shall not represent a value that is effectively Boolean", "shortDescription": { "text": "A switch expression shall not represent a value that is effectively Boolean" }, "fullDescription": { "text": "A switch expression shall not represent a value that is effectively Boolean [AUTOSAR-M6_4_7-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A switch expression shall not represent a value that is effectively Boolean [AUTOSAR-M6_4_7-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M6-4-7 The condition of a switch statement shall not have bool type" ] } }, { "id": "AUTOSAR-A5_2_1-a", "name": "Avoid dynamic_casts", "shortDescription": { "text": "Avoid dynamic_casts" }, "fullDescription": { "text": "Avoid dynamic_casts [AUTOSAR-A5_2_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid dynamic_casts [AUTOSAR-A5_2_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-2-1 dynamic_cast should not be used" ] } }, { "id": "AUTOSAR-M0_3_2-a", "name": "If a function returns error information, then that error information shall be tested", "shortDescription": { "text": "If a function returns error information, then that error information shall be tested" }, "fullDescription": { "text": "If a function returns error information, then that error information shall be tested [AUTOSAR-M0_3_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If a function returns error information, then that error information shall be tested [AUTOSAR-M0_3_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested" ] } }, { "id": "AUTOSAR-A5_2_5-a", "name": "Avoid accessing arrays out of bounds", "shortDescription": { "text": "Avoid accessing arrays out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays out of bounds [AUTOSAR-A5_2_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays out of bounds [AUTOSAR-A5_2_5-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-2-5 An array or container shall not be accessed beyond its range" ] } }, { "id": "AUTOSAR-A5_2_5-b", "name": "Avoid accessing arrays and pointers out of bounds", "shortDescription": { "text": "Avoid accessing arrays and pointers out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays and pointers out of bounds [AUTOSAR-A5_2_5-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays and pointers out of bounds [AUTOSAR-A5_2_5-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-2-5 An array or container shall not be accessed beyond its range" ] } }, { "id": "AUTOSAR-A5_2_5-c", "name": "A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array", "shortDescription": { "text": "A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" }, "fullDescription": { "text": "A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array [AUTOSAR-A5_2_5-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array [AUTOSAR-A5_2_5-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-2-5 An array or container shall not be accessed beyond its range" ] } }, { "id": "AUTOSAR-A5_2_5-d", "name": "Avoid tainted data in array indexes", "shortDescription": { "text": "Avoid tainted data in array indexes" }, "fullDescription": { "text": "Avoid tainted data in array indexes [AUTOSAR-A5_2_5-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid tainted data in array indexes [AUTOSAR-A5_2_5-d]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-2-5 An array or container shall not be accessed beyond its range" ] } }, { "id": "AUTOSAR-M0_3_1-a", "name": "Do not subtract two pointers that do not address elements of the same array", "shortDescription": { "text": "Do not subtract two pointers that do not address elements of the same array" }, "fullDescription": { "text": "Do not subtract two pointers that do not address elements of the same array [AUTOSAR-M0_3_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not subtract two pointers that do not address elements of the same array [AUTOSAR-M0_3_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-3-1 Minimization of run-time failures shall be ensured by the use of at least one of: (a) static analysis tools\/techniques; (b) dynamic analysis tools\/techniques; (c) explicit coding of checks to handle run-time faults" ] } }, { "id": "AUTOSAR-M0_3_1-b", "name": "Avoid overflow when writing to a buffer", "shortDescription": { "text": "Avoid overflow when writing to a buffer" }, "fullDescription": { "text": "Avoid overflow when writing to a buffer [AUTOSAR-M0_3_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when writing to a buffer [AUTOSAR-M0_3_1-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-3-1 Minimization of run-time failures shall be ensured by the use of at least one of: (a) static analysis tools\/techniques; (b) dynamic analysis tools\/techniques; (c) explicit coding of checks to handle run-time faults" ] } }, { "id": "AUTOSAR-M0_3_1-c", "name": "Do not compare two unrelated pointers", "shortDescription": { "text": "Do not compare two unrelated pointers" }, "fullDescription": { "text": "Do not compare two unrelated pointers [AUTOSAR-M0_3_1-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not compare two unrelated pointers [AUTOSAR-M0_3_1-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-3-1 Minimization of run-time failures shall be ensured by the use of at least one of: (a) static analysis tools\/techniques; (b) dynamic analysis tools\/techniques; (c) explicit coding of checks to handle run-time faults" ] } }, { "id": "AUTOSAR-M0_3_1-d", "name": "Avoid accessing arrays out of bounds", "shortDescription": { "text": "Avoid accessing arrays out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays out of bounds [AUTOSAR-M0_3_1-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays out of bounds [AUTOSAR-M0_3_1-d]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-3-1 Minimization of run-time failures shall be ensured by the use of at least one of: (a) static analysis tools\/techniques; (b) dynamic analysis tools\/techniques; (c) explicit coding of checks to handle run-time faults" ] } }, { "id": "AUTOSAR-M0_3_1-e", "name": "Avoid division by zero", "shortDescription": { "text": "Avoid division by zero" }, "fullDescription": { "text": "Avoid division by zero [AUTOSAR-M0_3_1-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid division by zero [AUTOSAR-M0_3_1-e]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-3-1 Minimization of run-time failures shall be ensured by the use of at least one of: (a) static analysis tools\/techniques; (b) dynamic analysis tools\/techniques; (c) explicit coding of checks to handle run-time faults" ] } }, { "id": "AUTOSAR-M0_3_1-f", "name": "Avoid null pointer dereferencing", "shortDescription": { "text": "Avoid null pointer dereferencing" }, "fullDescription": { "text": "Avoid null pointer dereferencing [AUTOSAR-M0_3_1-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid null pointer dereferencing [AUTOSAR-M0_3_1-f]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-3-1 Minimization of run-time failures shall be ensured by the use of at least one of: (a) static analysis tools\/techniques; (b) dynamic analysis tools\/techniques; (c) explicit coding of checks to handle run-time faults" ] } }, { "id": "AUTOSAR-M0_3_1-g", "name": "Avoid overflow due to reading a not zero terminated string", "shortDescription": { "text": "Avoid overflow due to reading a not zero terminated string" }, "fullDescription": { "text": "Avoid overflow due to reading a not zero terminated string [AUTOSAR-M0_3_1-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow due to reading a not zero terminated string [AUTOSAR-M0_3_1-g]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-3-1 Minimization of run-time failures shall be ensured by the use of at least one of: (a) static analysis tools\/techniques; (b) dynamic analysis tools\/techniques; (c) explicit coding of checks to handle run-time faults" ] } }, { "id": "AUTOSAR-M0_3_1-h", "name": "Avoid buffer overflow due to defining incorrect format limits", "shortDescription": { "text": "Avoid buffer overflow due to defining incorrect format limits" }, "fullDescription": { "text": "Avoid buffer overflow due to defining incorrect format limits [AUTOSAR-M0_3_1-h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer overflow due to defining incorrect format limits [AUTOSAR-M0_3_1-h]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-3-1 Minimization of run-time failures shall be ensured by the use of at least one of: (a) static analysis tools\/techniques; (b) dynamic analysis tools\/techniques; (c) explicit coding of checks to handle run-time faults" ] } }, { "id": "AUTOSAR-M0_3_1-i", "name": "Avoid overflow when reading from a buffer", "shortDescription": { "text": "Avoid overflow when reading from a buffer" }, "fullDescription": { "text": "Avoid overflow when reading from a buffer [AUTOSAR-M0_3_1-i]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when reading from a buffer [AUTOSAR-M0_3_1-i]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-3-1 Minimization of run-time failures shall be ensured by the use of at least one of: (a) static analysis tools\/techniques; (b) dynamic analysis tools\/techniques; (c) explicit coding of checks to handle run-time faults" ] } }, { "id": "AUTOSAR-A5_2_4-a", "name": "Avoid using reinterpret_cast", "shortDescription": { "text": "Avoid using reinterpret_cast" }, "fullDescription": { "text": "Avoid using reinterpret_cast [AUTOSAR-A5_2_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using reinterpret_cast [AUTOSAR-A5_2_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-2-4 reinterpret_cast shall not be used" ] } }, { "id": "AUTOSAR-A5_2_3-a", "name": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference", "shortDescription": { "text": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" }, "fullDescription": { "text": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference [AUTOSAR-A5_2_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference [AUTOSAR-A5_2_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-2-3 A cast shall not remove any const or volatile qualification from the type of a pointer or reference" ] } }, { "id": "AUTOSAR-A5_2_2-a", "name": "C-style casts should not be used", "shortDescription": { "text": "C-style casts should not be used" }, "fullDescription": { "text": "C-style casts should not be used [AUTOSAR-A5_2_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "C-style casts should not be used [AUTOSAR-A5_2_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-2-2 Traditional C-style casts shall not be used" ] } }, { "id": "AUTOSAR-A15_4_5-a", "name": "Checked exceptions that could be thrown from a function shall be specified in the comment directly before the function declaration", "shortDescription": { "text": "Checked exceptions that could be thrown from a function shall be specified in the comment directly before the function declaration" }, "fullDescription": { "text": "Checked exceptions that could be thrown from a function shall be specified in the comment directly before the function declaration [AUTOSAR-A15_4_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Checked exceptions that could be thrown from a function shall be specified in the comment directly before the function declaration [AUTOSAR-A15_4_5-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-4-5 Checked exceptions that could be thrown from a function shall be specified together with the function declaration and they shall be identical in all function declarations and for all its overriders" ] } }, { "id": "AUTOSAR-M17_0_2-a", "name": "The names of standard library macros and objects shall not be reused", "shortDescription": { "text": "The names of standard library macros and objects shall not be reused" }, "fullDescription": { "text": "The names of standard library macros and objects shall not be reused [AUTOSAR-M17_0_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The names of standard library macros and objects shall not be reused [AUTOSAR-M17_0_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M17-0-2 The names of standard library macros and objects shall not be reused" ] } }, { "id": "AUTOSAR-A15_4_3-a", "name": "If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids", "shortDescription": { "text": "If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" }, "fullDescription": { "text": "If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids [AUTOSAR-A15_4_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids [AUTOSAR-A15_4_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-4-3 The noexcept specification of a function shall either be identical across all translation units, or identical or more restrictive between a virtual member function and an overrider" ] } }, { "id": "AUTOSAR-A15_4_4-a", "name": "Declare functions 'noexcept' if they will not emit exceptions", "shortDescription": { "text": "Declare functions 'noexcept' if they will not emit exceptions" }, "fullDescription": { "text": "Declare functions 'noexcept' if they will not emit exceptions [AUTOSAR-A15_4_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Declare functions 'noexcept' if they will not emit exceptions [AUTOSAR-A15_4_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-4-4 A declaration of non-throwing function shall contain noexcept specification" ] } }, { "id": "AUTOSAR-M17_0_3-a", "name": "The names of standard library functions shall not be overridden", "shortDescription": { "text": "The names of standard library functions shall not be overridden" }, "fullDescription": { "text": "The names of standard library functions shall not be overridden [AUTOSAR-M17_0_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The names of standard library functions shall not be overridden [AUTOSAR-M17_0_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M17-0-3 The names of standard library functions shall not be overridden" ] } }, { "id": "AUTOSAR-A15_4_1-a", "name": "Do not use throw exception specifications", "shortDescription": { "text": "Do not use throw exception specifications" }, "fullDescription": { "text": "Do not use throw exception specifications [AUTOSAR-A15_4_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use throw exception specifications [AUTOSAR-A15_4_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-4-1 Dynamic exception-specification shall not be used" ] } }, { "id": "AUTOSAR-A15_4_2-a", "name": "Avoid throwing exceptions from functions that are declared not to throw", "shortDescription": { "text": "Avoid throwing exceptions from functions that are declared not to throw" }, "fullDescription": { "text": "Avoid throwing exceptions from functions that are declared not to throw [AUTOSAR-A15_4_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid throwing exceptions from functions that are declared not to throw [AUTOSAR-A15_4_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-4-2 If a function is declared to be noexcept, noexcept(true) or noexcept(<true condition>), then it shall not exit with an exception" ] } }, { "id": "AUTOSAR-A10_1_1-a", "name": "Be wary about using multiple inheritance of classes that are not abstract interfaces", "shortDescription": { "text": "Be wary about using multiple inheritance of classes that are not abstract interfaces" }, "fullDescription": { "text": "Be wary about using multiple inheritance of classes that are not abstract interfaces [AUTOSAR-A10_1_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Be wary about using multiple inheritance of classes that are not abstract interfaces [AUTOSAR-A10_1_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A10-1-1 Class shall not be derived from more than one base class which is not an interface class" ] } }, { "id": "AUTOSAR-M17_0_5-a", "name": "The facilities provided by <setjmp.h> should not be used", "shortDescription": { "text": "The facilities provided by <setjmp.h> should not be used" }, "fullDescription": { "text": "The facilities provided by <setjmp.h> should not be used [AUTOSAR-M17_0_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The facilities provided by <setjmp.h> should not be used [AUTOSAR-M17_0_5-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M17-0-5 The setjmp macro and the longjmp function shall not be used" ] } }, { "id": "AUTOSAR-M16_1_2-a", "name": "All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related", "shortDescription": { "text": "All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" }, "fullDescription": { "text": "All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related [AUTOSAR-M16_1_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related [AUTOSAR-M16_1_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M16-1-2 All #else, #elif and #endif pre-processor directives shall reside in the same file as the #if or #ifdef directive to which they are related" ] } }, { "id": "AUTOSAR-A11_3_1-a", "name": "Friend declarations shall not be used except declarations of comparison operators", "shortDescription": { "text": "Friend declarations shall not be used except declarations of comparison operators" }, "fullDescription": { "text": "Friend declarations shall not be used except declarations of comparison operators [AUTOSAR-A11_3_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Friend declarations shall not be used except declarations of comparison operators [AUTOSAR-A11_3_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A11-3-1 Friend declarations shall not be used" ] } }, { "id": "AUTOSAR-M16_1_1-a", "name": "The defined preprocessor operator shall only be used in one of the two standard forms", "shortDescription": { "text": "The defined preprocessor operator shall only be used in one of the two standard forms" }, "fullDescription": { "text": "The defined preprocessor operator shall only be used in one of the two standard forms [AUTOSAR-M16_1_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The defined preprocessor operator shall only be used in one of the two standard forms [AUTOSAR-M16_1_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M16-1-1 The defined pre-processor operator shall only be used in one of the two standard forms" ] } }, { "id": "AUTOSAR-M7_5_2-a", "name": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist", "shortDescription": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" }, "fullDescription": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist [AUTOSAR-M7_5_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist [AUTOSAR-M7_5_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M7-5-2 The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" ] } }, { "id": "AUTOSAR-M7_5_1-a", "name": "The address of an object with automatic storage shall not be returned from a function", "shortDescription": { "text": "The address of an object with automatic storage shall not be returned from a function" }, "fullDescription": { "text": "The address of an object with automatic storage shall not be returned from a function [AUTOSAR-M7_5_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The address of an object with automatic storage shall not be returned from a function [AUTOSAR-M7_5_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M7-5-1 A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function" ] } }, { "id": "AUTOSAR-M3_2_4-a", "name": "An identifier with external linkage shall have no more then one external definition", "shortDescription": { "text": "An identifier with external linkage shall have no more then one external definition" }, "fullDescription": { "text": "An identifier with external linkage shall have no more then one external definition [AUTOSAR-M3_2_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An identifier with external linkage shall have no more then one external definition [AUTOSAR-M3_2_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M3-2-4 An identifier with external linkage shall have exactly one definition" ] } }, { "id": "AUTOSAR-A16_0_1-a", "name": "The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards", "shortDescription": { "text": "The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" }, "fullDescription": { "text": "The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards [AUTOSAR-A16_0_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards [AUTOSAR-A16_0_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include" ] } }, { "id": "AUTOSAR-A16_0_1-b", "name": "#error directive shall not be used", "shortDescription": { "text": "#error directive shall not be used" }, "fullDescription": { "text": "#error directive shall not be used [AUTOSAR-A16_0_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "#error directive shall not be used [AUTOSAR-A16_0_1-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include" ] } }, { "id": "AUTOSAR-A16_0_1-c", "name": "The #pragma directive shall not be used", "shortDescription": { "text": "The #pragma directive shall not be used" }, "fullDescription": { "text": "The #pragma directive shall not be used [AUTOSAR-A16_0_1-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The #pragma directive shall not be used [AUTOSAR-A16_0_1-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include" ] } }, { "id": "AUTOSAR-A16_0_1-d", "name": "Avoid using macro definitions", "shortDescription": { "text": "Avoid using macro definitions" }, "fullDescription": { "text": "Avoid using macro definitions [AUTOSAR-A16_0_1-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using macro definitions [AUTOSAR-A16_0_1-d]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include" ] } }, { "id": "AUTOSAR-A16_0_1-e", "name": "#undef shall not be used", "shortDescription": { "text": "#undef shall not be used" }, "fullDescription": { "text": "#undef shall not be used [AUTOSAR-A16_0_1-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "#undef shall not be used [AUTOSAR-A16_0_1-e]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include" ] } }, { "id": "AUTOSAR-M10_2_1-a", "name": "All accessible entity names within a multiple inheritance hierarchy should be unique", "shortDescription": { "text": "All accessible entity names within a multiple inheritance hierarchy should be unique" }, "fullDescription": { "text": "All accessible entity names within a multiple inheritance hierarchy should be unique [AUTOSAR-M10_2_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All accessible entity names within a multiple inheritance hierarchy should be unique [AUTOSAR-M10_2_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M10-2-1 All accessible entity names within a multiple inheritance hierarchy should be unique" ] } }, { "id": "AUTOSAR-M8_3_1-a", "name": "Do not redefine an inherited virtual function with a different default parameter value", "shortDescription": { "text": "Do not redefine an inherited virtual function with a different default parameter value" }, "fullDescription": { "text": "Do not redefine an inherited virtual function with a different default parameter value [AUTOSAR-M8_3_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not redefine an inherited virtual function with a different default parameter value [AUTOSAR-M8_3_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M8-3-1 Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments" ] } }, { "id": "AUTOSAR-A12_1_1-a", "name": "All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes", "shortDescription": { "text": "All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" }, "fullDescription": { "text": "All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes [AUTOSAR-A12_1_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes [AUTOSAR-A12_1_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A12-1-1 Constructors shall explicitly initialize all virtual base classes, all direct non-virtual base classes and all non-static data members" ] } }, { "id": "AUTOSAR-A12_1_1-b", "name": "All member variables should be initialized in constructor", "shortDescription": { "text": "All member variables should be initialized in constructor" }, "fullDescription": { "text": "All member variables should be initialized in constructor [AUTOSAR-A12_1_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All member variables should be initialized in constructor [AUTOSAR-A12_1_1-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A12-1-1 Constructors shall explicitly initialize all virtual base classes, all direct non-virtual base classes and all non-static data members" ] } }, { "id": "AUTOSAR-A12_1_2-a", "name": "Both NSDMI and a non-static member initializer in a constructor shall not be used in the same type", "shortDescription": { "text": "Both NSDMI and a non-static member initializer in a constructor shall not be used in the same type" }, "fullDescription": { "text": "Both NSDMI and a non-static member initializer in a constructor shall not be used in the same type [AUTOSAR-A12_1_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Both NSDMI and a non-static member initializer in a constructor shall not be used in the same type [AUTOSAR-A12_1_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A12-1-2 Both NSDMI and a non-static member initializer in a constructor shall not be used in the same type" ] } }, { "id": "AUTOSAR-M15_3_4-a", "name": "Function called in global or namespace scope shall not throw unhandled exceptions", "shortDescription": { "text": "Function called in global or namespace scope shall not throw unhandled exceptions" }, "fullDescription": { "text": "Function called in global or namespace scope shall not throw unhandled exceptions [AUTOSAR-M15_3_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Function called in global or namespace scope shall not throw unhandled exceptions [AUTOSAR-M15_3_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M15-3-4 Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" ] } }, { "id": "AUTOSAR-M15_3_4-b", "name": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point", "shortDescription": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" }, "fullDescription": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point [AUTOSAR-M15_3_4-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point [AUTOSAR-M15_3_4-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M15-3-4 Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" ] } }, { "id": "AUTOSAR-A12_1_3-a", "name": "User-defined constructors that initialize data members with the same constant values across all constructors should initialize using NSDMI instead", "shortDescription": { "text": "User-defined constructors that initialize data members with the same constant values across all constructors should initialize using NSDMI instead" }, "fullDescription": { "text": "User-defined constructors that initialize data members with the same constant values across all constructors should initialize using NSDMI instead [AUTOSAR-A12_1_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "User-defined constructors that initialize data members with the same constant values across all constructors should initialize using NSDMI instead [AUTOSAR-A12_1_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A12-1-3 If all user-defined constructors of a class initialize data members with constant values that are the same across all constructors, then data members shall be initialized using NSDMI instead" ] } }, { "id": "AUTOSAR-M15_3_7-a", "name": "Where multiple handlers are provided in a single 'try-catch' statement or 'function-try-block', any ellipsis (catch-all) handler shall occur last", "shortDescription": { "text": "Where multiple handlers are provided in a single 'try-catch' statement or 'function-try-block', any ellipsis (catch-all) handler shall occur last" }, "fullDescription": { "text": "Where multiple handlers are provided in a single 'try-catch' statement or 'function-try-block', any ellipsis (catch-all) handler shall occur last [AUTOSAR-M15_3_7-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Where multiple handlers are provided in a single 'try-catch' statement or 'function-try-block', any ellipsis (catch-all) handler shall occur last [AUTOSAR-M15_3_7-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M15-3-7 Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last" ] } }, { "id": "AUTOSAR-A12_1_4-a", "name": "All constructors that are callable with a single argument of fundamental type shall be declared explicit", "shortDescription": { "text": "All constructors that are callable with a single argument of fundamental type shall be declared explicit" }, "fullDescription": { "text": "All constructors that are callable with a single argument of fundamental type shall be declared explicit [AUTOSAR-A12_1_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All constructors that are callable with a single argument of fundamental type shall be declared explicit [AUTOSAR-A12_1_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A12-1-4 All constructors that are callable with a single argument of fundamental type shall be declared explicit" ] } }, { "id": "AUTOSAR-M15_3_6-a", "name": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class", "shortDescription": { "text": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" }, "fullDescription": { "text": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class [AUTOSAR-M15_3_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class [AUTOSAR-M15_3_6-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M15-3-6 Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" ] } }, { "id": "AUTOSAR-M3_2_1-a", "name": "All declarations of an object or function shall have compatible types", "shortDescription": { "text": "All declarations of an object or function shall have compatible types" }, "fullDescription": { "text": "All declarations of an object or function shall have compatible types [AUTOSAR-M3_2_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All declarations of an object or function shall have compatible types [AUTOSAR-M3_2_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M3-2-1 All declarations of an object or function shall have compatible types" ] } }, { "id": "AUTOSAR-A17_6_1-a", "name": "Do not modify the standard namespaces 'std' and 'posix'", "shortDescription": { "text": "Do not modify the standard namespaces 'std' and 'posix'" }, "fullDescription": { "text": "Do not modify the standard namespaces 'std' and 'posix' [AUTOSAR-A17_6_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not modify the standard namespaces 'std' and 'posix' [AUTOSAR-A17_6_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A17-6-1 Non-standard entities shall not be added to standard namespaces" ] } }, { "id": "AUTOSAR-M3_2_3-a", "name": "A type, object or function that is used in multiple translation units shall be declared in one and only one file", "shortDescription": { "text": "A type, object or function that is used in multiple translation units shall be declared in one and only one file" }, "fullDescription": { "text": "A type, object or function that is used in multiple translation units shall be declared in one and only one file [AUTOSAR-M3_2_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A type, object or function that is used in multiple translation units shall be declared in one and only one file [AUTOSAR-M3_2_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M3-2-3 A type, object or function that is used in multiple translation units shall be declared in one and only one file" ] } }, { "id": "AUTOSAR-A5_10_1-a", "name": "A potentially virtual pointer to member function shall only be compared with nullptr", "shortDescription": { "text": "A potentially virtual pointer to member function shall only be compared with nullptr" }, "fullDescription": { "text": "A potentially virtual pointer to member function shall only be compared with nullptr [AUTOSAR-A5_10_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A potentially virtual pointer to member function shall only be compared with nullptr [AUTOSAR-A5_10_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-10-1 A pointer to member virtual function shall only be tested for equality with null-pointer-constant" ] } }, { "id": "AUTOSAR-M3_2_2-a", "name": "The One Definition Rule shall not be violated", "shortDescription": { "text": "The One Definition Rule shall not be violated" }, "fullDescription": { "text": "The One Definition Rule shall not be violated [AUTOSAR-M3_2_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The One Definition Rule shall not be violated [AUTOSAR-M3_2_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M3-2-2 The One Definition Rule shall not be violated" ] } }, { "id": "AUTOSAR-A5_2_6-a", "name": "The operands of a logical && or || shall be parenthesized if the operands contain binary operators", "shortDescription": { "text": "The operands of a logical && or || shall be parenthesized if the operands contain binary operators" }, "fullDescription": { "text": "The operands of a logical && or || shall be parenthesized if the operands contain binary operators [AUTOSAR-A5_2_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The operands of a logical && or || shall be parenthesized if the operands contain binary operators [AUTOSAR-A5_2_6-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-2-6 The operands of a logical && or || shall be parenthesized if the operands contain binary operators" ] } }, { "id": "AUTOSAR-A12_1_5-a", "name": "Use delegating constructors to reduce code duplication", "shortDescription": { "text": "Use delegating constructors to reduce code duplication" }, "fullDescription": { "text": "Use delegating constructors to reduce code duplication [AUTOSAR-A12_1_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use delegating constructors to reduce code duplication [AUTOSAR-A12_1_5-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A12-1-5 Common class initialization for non-constant members shall be done by a delegating constructor" ] } }, { "id": "AUTOSAR-M15_3_1-a", "name": "Exceptions shall be raised only after start-up and before termination of the program", "shortDescription": { "text": "Exceptions shall be raised only after start-up and before termination of the program" }, "fullDescription": { "text": "Exceptions shall be raised only after start-up and before termination of the program [AUTOSAR-M15_3_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Exceptions shall be raised only after start-up and before termination of the program [AUTOSAR-M15_3_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M15-3-1 Exceptions shall be raised only after start-up and before termination" ] } }, { "id": "AUTOSAR-A12_1_6-a", "name": "Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors", "shortDescription": { "text": "Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors" }, "fullDescription": { "text": "Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors [AUTOSAR-A12_1_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors [AUTOSAR-A12_1_6-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A12-1-6 Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors" ] } }, { "id": "AUTOSAR-M15_3_3-a", "name": "Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases", "shortDescription": { "text": "Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" }, "fullDescription": { "text": "Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases [AUTOSAR-M15_3_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases [AUTOSAR-M15_3_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M15-3-3 Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases" ] } }, { "id": "AUTOSAR-M11_0_1-a", "name": "Member data in non-POD types shall be private", "shortDescription": { "text": "Member data in non-POD types shall be private" }, "fullDescription": { "text": "Member data in non-POD types shall be private [AUTOSAR-M11_0_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Member data in non-POD types shall be private [AUTOSAR-M11_0_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M11-0-1 Member data in non-POD class types shall be private" ] } }, { "id": "AUTOSAR-A5_1_2-a", "name": "Avoid default capture modes", "shortDescription": { "text": "Avoid default capture modes" }, "fullDescription": { "text": "Avoid default capture modes [AUTOSAR-A5_1_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid default capture modes [AUTOSAR-A5_1_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-1-2 Variables shall not be implicitly captured in a lambda expression" ] } }, { "id": "AUTOSAR-A5_1_1-a", "name": "Avoid magic numbers", "shortDescription": { "text": "Avoid magic numbers" }, "fullDescription": { "text": "Avoid magic numbers [AUTOSAR-A5_1_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid magic numbers [AUTOSAR-A5_1_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-1-1 Literal values shall not be used apart from type initialization, otherwise symbolic names shall be used instead" ] } }, { "id": "AUTOSAR-A4_10_1-a", "name": "The 'NULL' identifier should not be used", "shortDescription": { "text": "The 'NULL' identifier should not be used" }, "fullDescription": { "text": "The 'NULL' identifier should not be used [AUTOSAR-A4_10_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'NULL' identifier should not be used [AUTOSAR-A4_10_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant" ] } }, { "id": "AUTOSAR-A4_10_1-b", "name": "Prefer 'nullptr' over 'NULL' or '0'(zero)", "shortDescription": { "text": "Prefer 'nullptr' over 'NULL' or '0'(zero)" }, "fullDescription": { "text": "Prefer 'nullptr' over 'NULL' or '0'(zero) [AUTOSAR-A4_10_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Prefer 'nullptr' over 'NULL' or '0'(zero) [AUTOSAR-A4_10_1-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant" ] } }, { "id": "AUTOSAR-A5_1_6-a", "name": "Return type of a non-void return type lambda expression should be explicitly specified", "shortDescription": { "text": "Return type of a non-void return type lambda expression should be explicitly specified" }, "fullDescription": { "text": "Return type of a non-void return type lambda expression should be explicitly specified [AUTOSAR-A5_1_6-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Return type of a non-void return type lambda expression should be explicitly specified [AUTOSAR-A5_1_6-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-1-6 Return type of a non-void return type lambda expression should be explicitly specified" ] } }, { "id": "AUTOSAR-A5_1_4-a", "name": "Never return lambdas that capture local objects by reference", "shortDescription": { "text": "Never return lambdas that capture local objects by reference" }, "fullDescription": { "text": "Never return lambdas that capture local objects by reference [AUTOSAR-A5_1_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Never return lambdas that capture local objects by reference [AUTOSAR-A5_1_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-1-4 A lambda expression object shall not outlive any of its reference-captured objects" ] } }, { "id": "AUTOSAR-A5_1_4-b", "name": "Never capture local objects from an outer lambda by reference", "shortDescription": { "text": "Never capture local objects from an outer lambda by reference" }, "fullDescription": { "text": "Never capture local objects from an outer lambda by reference [AUTOSAR-A5_1_4-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Never capture local objects from an outer lambda by reference [AUTOSAR-A5_1_4-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-1-4 A lambda expression object shall not outlive any of its reference-captured objects" ] } }, { "id": "AUTOSAR-A5_1_4-c", "name": "The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime", "shortDescription": { "text": "The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime" }, "fullDescription": { "text": "The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime [AUTOSAR-A5_1_4-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime [AUTOSAR-A5_1_4-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-1-4 A lambda expression object shall not outlive any of its reference-captured objects" ] } }, { "id": "AUTOSAR-A5_1_3-a", "name": "Include a parameter list in every lambda expression", "shortDescription": { "text": "Include a parameter list in every lambda expression" }, "fullDescription": { "text": "Include a parameter list in every lambda expression [AUTOSAR-A5_1_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Include a parameter list in every lambda expression [AUTOSAR-A5_1_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-1-3 Parameter list (possibly empty) shall be included in every lambda expression" ] } }, { "id": "AUTOSAR-A15_3_4-a", "name": "Avoid using catch-all exception handlers", "shortDescription": { "text": "Avoid using catch-all exception handlers" }, "fullDescription": { "text": "Avoid using catch-all exception handlers [AUTOSAR-A15_3_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using catch-all exception handlers [AUTOSAR-A15_3_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-3-4 Catch-all (ellipsis and std::exception) handlers shall be used only in (a) main, (b) task main functions, (c) in functions that are supposed to isolate independent components and (d) when calling third-party code that uses exceptions not according to AUTOSAR C++14 guidelines" ] } }, { "id": "AUTOSAR-A15_3_5-a", "name": "A class type exception shall always be caught by reference", "shortDescription": { "text": "A class type exception shall always be caught by reference" }, "fullDescription": { "text": "A class type exception shall always be caught by reference [AUTOSAR-A15_3_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A class type exception shall always be caught by reference [AUTOSAR-A15_3_5-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-3-5 A class type exception shall be caught by reference or const reference" ] } }, { "id": "AUTOSAR-A15_3_2-a", "name": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point", "shortDescription": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" }, "fullDescription": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point [AUTOSAR-A15_3_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point [AUTOSAR-A15_3_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-3-2 If a function throws an exception, it shall be handled when meaningful actions can be taken, otherwise it shall be propagated" ] } }, { "id": "AUTOSAR-M2_13_2-a", "name": "Octal constants (other than zero) shall not be used", "shortDescription": { "text": "Octal constants (other than zero) shall not be used" }, "fullDescription": { "text": "Octal constants (other than zero) shall not be used [AUTOSAR-M2_13_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Octal constants (other than zero) shall not be used [AUTOSAR-M2_13_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M2-13-2 Octal constants (other than zero) and octal escape sequences (other than \"\\0\" ) shall not be used" ] } }, { "id": "AUTOSAR-M2_13_2-b", "name": "Octal escape sequences shall not be used", "shortDescription": { "text": "Octal escape sequences shall not be used" }, "fullDescription": { "text": "Octal escape sequences shall not be used [AUTOSAR-M2_13_2-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Octal escape sequences shall not be used [AUTOSAR-M2_13_2-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M2-13-2 Octal constants (other than zero) and octal escape sequences (other than \"\\0\" ) shall not be used" ] } }, { "id": "AUTOSAR-A15_3_3-a", "name": "There should be at least one exception handler to catch all otherwise unhandled exceptions", "shortDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions" }, "fullDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [AUTOSAR-A15_3_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [AUTOSAR-A15_3_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-3-3 Main function and a task main function shall catch at least: base class exceptions from all third-party libraries used, std::exception and all otherwise unhandled exceptions" ] } }, { "id": "AUTOSAR-A7_6_1-a", "name": "Never return from functions that should not return", "shortDescription": { "text": "Never return from functions that should not return" }, "fullDescription": { "text": "Never return from functions that should not return [AUTOSAR-A7_6_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Never return from functions that should not return [AUTOSAR-A7_6_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A7-6-1 Functions declared with the [[noreturn]] attribute shall not return" ] } }, { "id": "AUTOSAR-M2_13_4-a", "name": "Literal suffixes shall use uppercase rather than lowercase letters", "shortDescription": { "text": "Literal suffixes shall use uppercase rather than lowercase letters" }, "fullDescription": { "text": "Literal suffixes shall use uppercase rather than lowercase letters [AUTOSAR-M2_13_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Literal suffixes shall use uppercase rather than lowercase letters [AUTOSAR-M2_13_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M2-13-4 Literal suffixes shall be upper case" ] } }, { "id": "AUTOSAR-M2_13_3-a", "name": "A \"U\" suffix shall be applied to all octal or hexadecimal integer literals of unsigned type", "shortDescription": { "text": "A \"U\" suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" }, "fullDescription": { "text": "A \"U\" suffix shall be applied to all octal or hexadecimal integer literals of unsigned type [AUTOSAR-M2_13_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A \"U\" suffix shall be applied to all octal or hexadecimal integer literals of unsigned type [AUTOSAR-M2_13_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M2-13-3 A \"U\" suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" ] } }, { "id": "AUTOSAR-M5_19_1-a", "name": "Integer overflow or underflow in constant expression in '<<' operator", "shortDescription": { "text": "Integer overflow or underflow in constant expression in '<<' operator" }, "fullDescription": { "text": "Integer overflow or underflow in constant expression in '<<' operator [AUTOSAR-M5_19_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Integer overflow or underflow in constant expression in '<<' operator [AUTOSAR-M5_19_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-19-1 Evaluation of constant unsigned integer expressions shall not lead to wrap-around" ] } }, { "id": "AUTOSAR-M5_19_1-b", "name": "Integer overflow or underflow in constant expression in '+', '-', '*' operator", "shortDescription": { "text": "Integer overflow or underflow in constant expression in '+', '-', '*' operator" }, "fullDescription": { "text": "Integer overflow or underflow in constant expression in '+', '-', '*' operator [AUTOSAR-M5_19_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Integer overflow or underflow in constant expression in '+', '-', '*' operator [AUTOSAR-M5_19_1-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-19-1 Evaluation of constant unsigned integer expressions shall not lead to wrap-around" ] } }, { "id": "AUTOSAR-A14_5_1-a", "name": "A template constructor shall not participate in overload resolution for a single argument of the enclosing class type", "shortDescription": { "text": "A template constructor shall not participate in overload resolution for a single argument of the enclosing class type" }, "fullDescription": { "text": "A template constructor shall not participate in overload resolution for a single argument of the enclosing class type [AUTOSAR-A14_5_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A template constructor shall not participate in overload resolution for a single argument of the enclosing class type [AUTOSAR-A14_5_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A14-5-1 A template constructor shall not participate in overload resolution for a single argument of the enclosing class type" ] } }, { "id": "AUTOSAR-A10_2_1-a", "name": "Never redefine an inherited nonvirtual function", "shortDescription": { "text": "Never redefine an inherited nonvirtual function" }, "fullDescription": { "text": "Never redefine an inherited nonvirtual function [AUTOSAR-A10_2_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Never redefine an inherited nonvirtual function [AUTOSAR-A10_2_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A10-2-1 Non-virtual member functions shall not be redefined in derived classes" ] } }, { "id": "AUTOSAR-A10_2_1-b", "name": "Member functions declared in derived class should not hide functions declared in base classes", "shortDescription": { "text": "Member functions declared in derived class should not hide functions declared in base classes" }, "fullDescription": { "text": "Member functions declared in derived class should not hide functions declared in base classes [AUTOSAR-A10_2_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Member functions declared in derived class should not hide functions declared in base classes [AUTOSAR-A10_2_1-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A10-2-1 Non-virtual member functions shall not be redefined in derived classes" ] } }, { "id": "AUTOSAR-A8_2_1-a", "name": "Use a trailing return type syntax if the return type is preceded by the 'typename' keyword", "shortDescription": { "text": "Use a trailing return type syntax if the return type is preceded by the 'typename' keyword" }, "fullDescription": { "text": "Use a trailing return type syntax if the return type is preceded by the 'typename' keyword [AUTOSAR-A8_2_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use a trailing return type syntax if the return type is preceded by the 'typename' keyword [AUTOSAR-A8_2_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-2-1 When declaring function templates, the trailing return type syntax shall be used if the return type depends on the type of parameters" ] } }, { "id": "AUTOSAR-A14_5_3-a", "name": "A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations", "shortDescription": { "text": "A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations" }, "fullDescription": { "text": "A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations [AUTOSAR-A14_5_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations [AUTOSAR-A14_5_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A14-5-3 A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations." ] } }, { "id": "AUTOSAR-A8_4_6-a", "name": "Use std::move() on rvalue references and std::forward() on forwarding references", "shortDescription": { "text": "Use std::move() on rvalue references and std::forward() on forwarding references" }, "fullDescription": { "text": "Use std::move() on rvalue references and std::forward() on forwarding references [AUTOSAR-A8_4_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use std::move() on rvalue references and std::forward() on forwarding references [AUTOSAR-A8_4_6-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-4-6 \"forward\" parameters declared as T && shall always be forwarded" ] } }, { "id": "AUTOSAR-M16_0_5-a", "name": "Arguments to a function-like macro shall not contain tokens that look like preprocessing directives", "shortDescription": { "text": "Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" }, "fullDescription": { "text": "Arguments to a function-like macro shall not contain tokens that look like preprocessing directives [AUTOSAR-M16_0_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Arguments to a function-like macro shall not contain tokens that look like preprocessing directives [AUTOSAR-M16_0_5-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M16-0-5 Arguments to a function-like macro shall not contain tokens that look like pre-processing directives" ] } }, { "id": "AUTOSAR-A8_4_5-a", "name": "Use std::move() on rvalue references and std::forward() on forwarding references", "shortDescription": { "text": "Use std::move() on rvalue references and std::forward() on forwarding references" }, "fullDescription": { "text": "Use std::move() on rvalue references and std::forward() on forwarding references [AUTOSAR-A8_4_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use std::move() on rvalue references and std::forward() on forwarding references [AUTOSAR-A8_4_5-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-4-5 \"consume\" parameters declared as X && shall always be moved from" ] } }, { "id": "AUTOSAR-A8_4_8-a", "name": "Output parameters shall not be used", "shortDescription": { "text": "Output parameters shall not be used" }, "fullDescription": { "text": "Output parameters shall not be used [AUTOSAR-A8_4_8-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Output parameters shall not be used [AUTOSAR-A8_4_8-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-4-8 Output parameters shall not be used" ] } }, { "id": "AUTOSAR-M7_4_1-a", "name": "All usage of assembler shall be documented", "shortDescription": { "text": "All usage of assembler shall be documented" }, "fullDescription": { "text": "All usage of assembler shall be documented [AUTOSAR-M7_4_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All usage of assembler shall be documented [AUTOSAR-M7_4_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M7-4-1 All usage of assembler shall be documented" ] } }, { "id": "AUTOSAR-A8_4_7-a", "name": "A parameter of const reference to a 'cheap to copy' type should be passed by value", "shortDescription": { "text": "A parameter of const reference to a 'cheap to copy' type should be passed by value" }, "fullDescription": { "text": "A parameter of const reference to a 'cheap to copy' type should be passed by value [AUTOSAR-A8_4_7-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A parameter of const reference to a 'cheap to copy' type should be passed by value [AUTOSAR-A8_4_7-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-4-7 \"in\" parameters for \"cheap to copy\" types shall be passed by value" ] } }, { "id": "AUTOSAR-M16_0_2-a", "name": "Macros shall not be #define'd or #undef'd within a block", "shortDescription": { "text": "Macros shall not be #define'd or #undef'd within a block" }, "fullDescription": { "text": "Macros shall not be #define'd or #undef'd within a block [AUTOSAR-M16_0_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Macros shall not be #define'd or #undef'd within a block [AUTOSAR-M16_0_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M16-0-2 Macros shall only be #define'd or #undef'd in the global namespace" ] } }, { "id": "AUTOSAR-A12_8_6-a", "name": "Avoid public copy constructors and assignment operators in base classes", "shortDescription": { "text": "Avoid public copy constructors and assignment operators in base classes" }, "fullDescription": { "text": "Avoid public copy constructors and assignment operators in base classes [AUTOSAR-A12_8_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid public copy constructors and assignment operators in base classes [AUTOSAR-A12_8_6-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A12-8-6 Copy and move constructors and copy assignment and move assignment operators shall be declared protected or defined \"=delete\" in base class" ] } }, { "id": "AUTOSAR-A3_3_2-a", "name": "Static and thread-local objects shall be constant-initialized", "shortDescription": { "text": "Static and thread-local objects shall be constant-initialized" }, "fullDescription": { "text": "Static and thread-local objects shall be constant-initialized [AUTOSAR-A3_3_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Static and thread-local objects shall be constant-initialized [AUTOSAR-A3_3_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A3-3-2 Static and thread-local objects shall be constant-initialized" ] } }, { "id": "AUTOSAR-A8_4_2-a", "name": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression", "shortDescription": { "text": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" }, "fullDescription": { "text": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression [AUTOSAR-A8_4_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression [AUTOSAR-A8_4_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-4-2 All exit paths from a function with non-void return type shall have an explicit return statement with an expression" ] } }, { "id": "AUTOSAR-M16_0_1-a", "name": "#include statements in a file should only be preceded by other preprocessor directives or comments", "shortDescription": { "text": "#include statements in a file should only be preceded by other preprocessor directives or comments" }, "fullDescription": { "text": "#include statements in a file should only be preceded by other preprocessor directives or comments [AUTOSAR-M16_0_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "#include statements in a file should only be preceded by other preprocessor directives or comments [AUTOSAR-M16_0_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M16-0-1 #include directives in a file shall only be preceded by other pre-processor directives or comments" ] } }, { "id": "AUTOSAR-M7_4_3-a", "name": "Assembly language shall be encapsulated and isolated in C\/C++ functions", "shortDescription": { "text": "Assembly language shall be encapsulated and isolated in C\/C++ functions" }, "fullDescription": { "text": "Assembly language shall be encapsulated and isolated in C\/C++ functions [AUTOSAR-M7_4_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Assembly language shall be encapsulated and isolated in C\/C++ functions [AUTOSAR-M7_4_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M7-4-3 Assembly language shall be encapsulated and isolated" ] } }, { "id": "AUTOSAR-A12_8_7-a", "name": "Declare assignment operators with the ref-qualifier &", "shortDescription": { "text": "Declare assignment operators with the ref-qualifier &" }, "fullDescription": { "text": "Declare assignment operators with the ref-qualifier & [AUTOSAR-A12_8_7-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare assignment operators with the ref-qualifier & [AUTOSAR-A12_8_7-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A12-8-7 Assignment operators should be declared with the ref-qualifier &" ] } }, { "id": "AUTOSAR-A3_3_1-a", "name": "Objects or functions with external linkage shall be declared in a header file", "shortDescription": { "text": "Objects or functions with external linkage shall be declared in a header file" }, "fullDescription": { "text": "Objects or functions with external linkage shall be declared in a header file [AUTOSAR-A3_3_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Objects or functions with external linkage shall be declared in a header file [AUTOSAR-A3_3_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file" ] } }, { "id": "AUTOSAR-A3_3_1-b", "name": "A header file shall not contain definitions of functions or objects that are non-inline and have external linkage", "shortDescription": { "text": "A header file shall not contain definitions of functions or objects that are non-inline and have external linkage" }, "fullDescription": { "text": "A header file shall not contain definitions of functions or objects that are non-inline and have external linkage [AUTOSAR-A3_3_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A header file shall not contain definitions of functions or objects that are non-inline and have external linkage [AUTOSAR-A3_3_1-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file" ] } }, { "id": "AUTOSAR-A8_4_1-a", "name": "Do not use functions with variable numbers of arguments", "shortDescription": { "text": "Do not use functions with variable numbers of arguments" }, "fullDescription": { "text": "Do not use functions with variable numbers of arguments [AUTOSAR-A8_4_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use functions with variable numbers of arguments [AUTOSAR-A8_4_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-4-1 Functions shall not be defined using the ellipsis notation" ] } }, { "id": "AUTOSAR-M7_4_2-a", "name": "Assembler instructions shall only be introduced using the asm declaration", "shortDescription": { "text": "Assembler instructions shall only be introduced using the asm declaration" }, "fullDescription": { "text": "Assembler instructions shall only be introduced using the asm declaration [AUTOSAR-M7_4_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Assembler instructions shall only be introduced using the asm declaration [AUTOSAR-M7_4_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M7-4-2 Assembler instructions shall only be introduced using the asm declaration" ] } }, { "id": "AUTOSAR-A8_4_4-a", "name": "Multiple output values from a function should be returned as a struct or tuple", "shortDescription": { "text": "Multiple output values from a function should be returned as a struct or tuple" }, "fullDescription": { "text": "Multiple output values from a function should be returned as a struct or tuple [AUTOSAR-A8_4_4-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Multiple output values from a function should be returned as a struct or tuple [AUTOSAR-A8_4_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-4-4 Multiple output values from a function should be returned as a struct or tuple" ] } }, { "id": "AUTOSAR-A8_4_3-a", "name": "A parameter of a type that is not 'cheap to copy' should be passed by reference", "shortDescription": { "text": "A parameter of a type that is not 'cheap to copy' should be passed by reference" }, "fullDescription": { "text": "A parameter of a type that is not 'cheap to copy' should be passed by reference [AUTOSAR-A8_4_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A parameter of a type that is not 'cheap to copy' should be passed by reference [AUTOSAR-A8_4_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-4-3 Common ways of passing parameters should be used" ] } }, { "id": "AUTOSAR-A8_4_3-b", "name": "Declare reference parameters as const references whenever possible", "shortDescription": { "text": "Declare reference parameters as const references whenever possible" }, "fullDescription": { "text": "Declare reference parameters as const references whenever possible [AUTOSAR-A8_4_3-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare reference parameters as const references whenever possible [AUTOSAR-A8_4_3-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-4-3 Common ways of passing parameters should be used" ] } }, { "id": "AUTOSAR-A7_4_1-a", "name": "The 'asm' declaration should not be used", "shortDescription": { "text": "The 'asm' declaration should not be used" }, "fullDescription": { "text": "The 'asm' declaration should not be used [AUTOSAR-A7_4_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'asm' declaration should not be used [AUTOSAR-A7_4_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A7-4-1 The asm declaration shall not be used" ] } }, { "id": "AUTOSAR-A2_5_1-a", "name": "Trigraphs shall not be used", "shortDescription": { "text": "Trigraphs shall not be used" }, "fullDescription": { "text": "Trigraphs shall not be used [AUTOSAR-A2_5_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Trigraphs shall not be used [AUTOSAR-A2_5_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-5-1 Trigraphs shall not be used" ] } }, { "id": "AUTOSAR-A2_5_2-a", "name": "Do not use the following digraphs: <%, %>, <:, :>, %:, %:%:", "shortDescription": { "text": "Do not use the following digraphs: <%, %>, <:, :>, %:, %:%:" }, "fullDescription": { "text": "Do not use the following digraphs: <%, %>, <:, :>, %:, %:%: [AUTOSAR-A2_5_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use the following digraphs: <%, %>, <:, :>, %:, %:%: [AUTOSAR-A2_5_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-5-2 Digraphs shall not be used" ] } }, { "id": "AUTOSAR-A8_4_9-a", "name": "Declare reference parameters as const references whenever possible", "shortDescription": { "text": "Declare reference parameters as const references whenever possible" }, "fullDescription": { "text": "Declare reference parameters as const references whenever possible [AUTOSAR-A8_4_9-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Declare reference parameters as const references whenever possible [AUTOSAR-A8_4_9-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-4-9 \"in-out\" parameters declared as T & shall be modified" ] } }, { "id": "AUTOSAR-M16_0_8-a", "name": "Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor", "shortDescription": { "text": "Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" }, "fullDescription": { "text": "Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor [AUTOSAR-M16_0_8-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor [AUTOSAR-M16_0_8-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M16-0-8 If the # token appears as the first token on a line, then it shall be immediately followed by a pre-processing token" ] } }, { "id": "AUTOSAR-M16_0_7-a", "name": "Do not use in preprocessor directives #if and #elif macros not defined in translation unit", "shortDescription": { "text": "Do not use in preprocessor directives #if and #elif macros not defined in translation unit" }, "fullDescription": { "text": "Do not use in preprocessor directives #if and #elif macros not defined in translation unit [AUTOSAR-M16_0_7-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use in preprocessor directives #if and #elif macros not defined in translation unit [AUTOSAR-M16_0_7-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M16-0-7 Undefined macro identifiers shall not be used in #if or #elif pre-processor directives, except as operands to the defined operator" ] } }, { "id": "AUTOSAR-M16_0_6-a", "name": "In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##", "shortDescription": { "text": "In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" }, "fullDescription": { "text": "In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ## [AUTOSAR-M16_0_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ## [AUTOSAR-M16_0_6-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M16-0-6 In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" ] } }, { "id": "AUTOSAR-A12_0_2-a", "name": "Do not compare objects of a class that may contain padding bits with C standard library functions", "shortDescription": { "text": "Do not compare objects of a class that may contain padding bits with C standard library functions" }, "fullDescription": { "text": "Do not compare objects of a class that may contain padding bits with C standard library functions [AUTOSAR-A12_0_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not compare objects of a class that may contain padding bits with C standard library functions [AUTOSAR-A12_0_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A12-0-2 Bitwise operations and operations that assume data representation in memory shall not be performed on objects" ] } }, { "id": "AUTOSAR-M10_3_3-a", "name": "A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual", "shortDescription": { "text": "A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" }, "fullDescription": { "text": "A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual [AUTOSAR-M10_3_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual [AUTOSAR-M10_3_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M10-3-3 A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" ] } }, { "id": "AUTOSAR-M6_6_3-a", "name": "The continue statement shall only be used within a well formed for loop", "shortDescription": { "text": "The continue statement shall only be used within a well formed for loop" }, "fullDescription": { "text": "The continue statement shall only be used within a well formed for loop [AUTOSAR-M6_6_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The continue statement shall only be used within a well formed for loop [AUTOSAR-M6_6_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M6-6-3 The continue statement shall only be used within a well-formed for loop" ] } }, { "id": "AUTOSAR-M3_3_2-a", "name": "If a function has internal linkage then all re-declarations shall include the 'static' storage class specifier", "shortDescription": { "text": "If a function has internal linkage then all re-declarations shall include the 'static' storage class specifier" }, "fullDescription": { "text": "If a function has internal linkage then all re-declarations shall include the 'static' storage class specifier [AUTOSAR-M3_3_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If a function has internal linkage then all re-declarations shall include the 'static' storage class specifier [AUTOSAR-M3_3_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M3-3-2 If a function has internal linkage then all re-declarations shall include the static storage class specifier" ] } }, { "id": "AUTOSAR-M6_6_2-a", "name": "The goto statement shall jump to a label declared later in the same function body", "shortDescription": { "text": "The goto statement shall jump to a label declared later in the same function body" }, "fullDescription": { "text": "The goto statement shall jump to a label declared later in the same function body [AUTOSAR-M6_6_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The goto statement shall jump to a label declared later in the same function body [AUTOSAR-M6_6_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M6-6-2 The goto statement shall jump to a label declared later in the same function body" ] } }, { "id": "AUTOSAR-A12_0_1-a", "name": "If a class declares a copy or move operation, or a destructor, either via '=default', '=delete', or via a user-provided declaration, then all others of these five special member functions shall be declared as well", "shortDescription": { "text": "If a class declares a copy or move operation, or a destructor, either via '=default', '=delete', or via a user-provided declaration, then all others of these five special member functions shall be declared as well" }, "fullDescription": { "text": "If a class declares a copy or move operation, or a destructor, either via '=default', '=delete', or via a user-provided declaration, then all others of these five special member functions shall be declared as well [AUTOSAR-A12_0_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If a class declares a copy or move operation, or a destructor, either via '=default', '=delete', or via a user-provided declaration, then all others of these five special member functions shall be declared as well [AUTOSAR-A12_0_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A12-0-1 If a class declares a copy or move operation, or a destructor, either via \"=default\", \"=delete\", or via a user-provided declaration, then all others of these five special member functions shall be declared as well" ] } }, { "id": "AUTOSAR-M6_6_1-a", "name": "Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement", "shortDescription": { "text": "Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" }, "fullDescription": { "text": "Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement [AUTOSAR-M6_6_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement [AUTOSAR-M6_6_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M6-6-1 Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" ] } }, { "id": "AUTOSAR-A12_8_2-a", "name": "User-defined copy and move assignment operators should use user-defined no-throw swap function", "shortDescription": { "text": "User-defined copy and move assignment operators should use user-defined no-throw swap function" }, "fullDescription": { "text": "User-defined copy and move assignment operators should use user-defined no-throw swap function [AUTOSAR-A12_8_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "User-defined copy and move assignment operators should use user-defined no-throw swap function [AUTOSAR-A12_8_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A12-8-2 User-defined copy and move assignment operators should use user-defined no-throw swap function" ] } }, { "id": "AUTOSAR-A12_8_3-a", "name": "Do not rely on the value of a moved-from object", "shortDescription": { "text": "Do not rely on the value of a moved-from object" }, "fullDescription": { "text": "Do not rely on the value of a moved-from object [AUTOSAR-A12_8_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not rely on the value of a moved-from object [AUTOSAR-A12_8_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A12-8-3 Moved-from object shall not be read-accessed" ] } }, { "id": "AUTOSAR-A12_8_4-a", "name": "Use std::move() on rvalue references and std::forward() on forwarding references", "shortDescription": { "text": "Use std::move() on rvalue references and std::forward() on forwarding references" }, "fullDescription": { "text": "Use std::move() on rvalue references and std::forward() on forwarding references [AUTOSAR-A12_8_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use std::move() on rvalue references and std::forward() on forwarding references [AUTOSAR-A12_8_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A12-8-4 Move constructor shall not initialize its class members and base classes using copy semantics" ] } }, { "id": "AUTOSAR-A5_1_8-a", "name": "Lambda expressions should not be defined inside another lambda expression", "shortDescription": { "text": "Lambda expressions should not be defined inside another lambda expression" }, "fullDescription": { "text": "Lambda expressions should not be defined inside another lambda expression [AUTOSAR-A5_1_8-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Lambda expressions should not be defined inside another lambda expression [AUTOSAR-A5_1_8-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-1-8 Lambda expressions should not be defined inside another lambda expression" ] } }, { "id": "AUTOSAR-A12_8_5-a", "name": "User-provided copy assignment operators shall handle self-assignment", "shortDescription": { "text": "User-provided copy assignment operators shall handle self-assignment" }, "fullDescription": { "text": "User-provided copy assignment operators shall handle self-assignment [AUTOSAR-A12_8_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "User-provided copy assignment operators shall handle self-assignment [AUTOSAR-A12_8_5-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A12-8-5 A copy assignment and a move assignment operators shall handle self-assignment" ] } }, { "id": "AUTOSAR-A5_1_7-a", "name": "A lambda shall not be an operand to typeid", "shortDescription": { "text": "A lambda shall not be an operand to typeid" }, "fullDescription": { "text": "A lambda shall not be an operand to typeid [AUTOSAR-A5_1_7-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A lambda shall not be an operand to typeid [AUTOSAR-A5_1_7-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-1-7 A lambda shall not be an operand to decltype or typeid" ] } }, { "id": "AUTOSAR-M19_3_1-a", "name": "The error indicator 'errno' shall not be used", "shortDescription": { "text": "The error indicator 'errno' shall not be used" }, "fullDescription": { "text": "The error indicator 'errno' shall not be used [AUTOSAR-M19_3_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The error indicator 'errno' shall not be used [AUTOSAR-M19_3_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M19-3-1 The error indicator errno shall not be used" ] } }, { "id": "AUTOSAR-A12_8_1-a", "name": "A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member", "shortDescription": { "text": "A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member" }, "fullDescription": { "text": "A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member [AUTOSAR-A12_8_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member [AUTOSAR-A12_8_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A12-8-1 Move and copy constructors shall move and respectively copy base classes and data members of a class, without any side effects" ] } }, { "id": "AUTOSAR-A5_0_3-a", "name": "The declaration of objects should contain no more than 2 levels of pointer indirection", "shortDescription": { "text": "The declaration of objects should contain no more than 2 levels of pointer indirection" }, "fullDescription": { "text": "The declaration of objects should contain no more than 2 levels of pointer indirection [AUTOSAR-A5_0_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The declaration of objects should contain no more than 2 levels of pointer indirection [AUTOSAR-A5_0_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-0-3 The declaration of objects shall contain no more than two levels of pointer indirection" ] } }, { "id": "AUTOSAR-M5_0_9-a", "name": "The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression", "shortDescription": { "text": "The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" }, "fullDescription": { "text": "The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression [AUTOSAR-M5_0_9-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression [AUTOSAR-M5_0_9-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-9 An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression" ] } }, { "id": "AUTOSAR-M5_8_1-a", "name": "Avoid incorrect shift operations", "shortDescription": { "text": "Avoid incorrect shift operations" }, "fullDescription": { "text": "Avoid incorrect shift operations [AUTOSAR-M5_8_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid incorrect shift operations [AUTOSAR-M5_8_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-8-1 The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand" ] } }, { "id": "AUTOSAR-A0_1_1-a", "name": "Avoid unused values", "shortDescription": { "text": "Avoid unused values" }, "fullDescription": { "text": "Avoid unused values [AUTOSAR-A0_1_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid unused values [AUTOSAR-A0_1_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A0-1-1 A project shall not contain instances of non-volatile variables being given values that are not subsequently used" ] } }, { "id": "AUTOSAR-A5_0_2-a", "name": "The condition of an if-statement and the condition of an iteration-statement shall have type bool", "shortDescription": { "text": "The condition of an if-statement and the condition of an iteration-statement shall have type bool" }, "fullDescription": { "text": "The condition of an if-statement and the condition of an iteration-statement shall have type bool [AUTOSAR-A5_0_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The condition of an if-statement and the condition of an iteration-statement shall have type bool [AUTOSAR-A5_0_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-0-2 The condition of an if-statement and the condition of an iteration statement shall have type bool" ] } }, { "id": "AUTOSAR-M5_0_8-a", "name": "The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression", "shortDescription": { "text": "The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" }, "fullDescription": { "text": "The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression [AUTOSAR-M5_0_8-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression [AUTOSAR-M5_0_8-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-8 An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" ] } }, { "id": "AUTOSAR-M5_0_8-b", "name": "The value of a complex expression of floating type should not be cast to a wider floating type", "shortDescription": { "text": "The value of a complex expression of floating type should not be cast to a wider floating type" }, "fullDescription": { "text": "The value of a complex expression of floating type should not be cast to a wider floating type [AUTOSAR-M5_0_8-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of a complex expression of floating type should not be cast to a wider floating type [AUTOSAR-M5_0_8-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-8 An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" ] } }, { "id": "AUTOSAR-A0_1_2-a", "name": "The value returned by a function having a non-void return type that is not an overloaded operator shall always be used", "shortDescription": { "text": "The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" }, "fullDescription": { "text": "The value returned by a function having a non-void return type that is not an overloaded operator shall always be used [AUTOSAR-A0_1_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value returned by a function having a non-void return type that is not an overloaded operator shall always be used [AUTOSAR-A0_1_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used" ] } }, { "id": "AUTOSAR-A5_0_1-a", "name": "Don't write code that depends on the order of evaluation of function calls", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function calls" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function calls [AUTOSAR-A5_0_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of function calls [AUTOSAR-A5_0_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-0-1 The value of an expression shall be the same under any order of evaluation that the standard permits" ] } }, { "id": "AUTOSAR-A5_0_1-b", "name": "Do not use more than one volatile between two adjacent sequence points", "shortDescription": { "text": "Do not use more than one volatile between two adjacent sequence points" }, "fullDescription": { "text": "Do not use more than one volatile between two adjacent sequence points [AUTOSAR-A5_0_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use more than one volatile between two adjacent sequence points [AUTOSAR-A5_0_1-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-0-1 The value of an expression shall be the same under any order of evaluation that the standard permits" ] } }, { "id": "AUTOSAR-A5_0_1-c", "name": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression", "shortDescription": { "text": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" }, "fullDescription": { "text": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression [AUTOSAR-A5_0_1-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression [AUTOSAR-A5_0_1-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-0-1 The value of an expression shall be the same under any order of evaluation that the standard permits" ] } }, { "id": "AUTOSAR-A5_0_1-d", "name": "Don't write code that depends on the order of evaluation of expression that involves a function call", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call [AUTOSAR-A5_0_1-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call [AUTOSAR-A5_0_1-d]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-0-1 The value of an expression shall be the same under any order of evaluation that the standard permits" ] } }, { "id": "AUTOSAR-A5_0_1-e", "name": "Don't write code that depends on the order of evaluation of function designator and function arguments", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments [AUTOSAR-A5_0_1-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments [AUTOSAR-A5_0_1-e]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-0-1 The value of an expression shall be the same under any order of evaluation that the standard permits" ] } }, { "id": "AUTOSAR-A5_0_1-f", "name": "Don't write code that depends on the order of evaluation of function arguments", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function arguments" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function arguments [AUTOSAR-A5_0_1-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of function arguments [AUTOSAR-A5_0_1-f]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-0-1 The value of an expression shall be the same under any order of evaluation that the standard permits" ] } }, { "id": "AUTOSAR-A5_0_1-g", "name": "The value of an expression shall be the same under any order of evaluation that the standard permits", "shortDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits" }, "fullDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [AUTOSAR-A5_0_1-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [AUTOSAR-A5_0_1-g]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-0-1 The value of an expression shall be the same under any order of evaluation that the standard permits" ] } }, { "id": "AUTOSAR-M0_1_4-a", "name": "A project shall not contain non-volatile POD variables having only one use", "shortDescription": { "text": "A project shall not contain non-volatile POD variables having only one use" }, "fullDescription": { "text": "A project shall not contain non-volatile POD variables having only one use [AUTOSAR-M0_1_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain non-volatile POD variables having only one use [AUTOSAR-M0_1_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-4 A project shall not contain non-volatile POD variables having only one use" ] } }, { "id": "AUTOSAR-A0_1_3-a", "name": "Every defined function with internal linkage shall be used at least once", "shortDescription": { "text": "Every defined function with internal linkage shall be used at least once" }, "fullDescription": { "text": "Every defined function with internal linkage shall be used at least once [AUTOSAR-A0_1_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Every defined function with internal linkage shall be used at least once [AUTOSAR-A0_1_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A0-1-3 Every function defined in an anonymous namespace, or static function with internal linkage, or private member function shall be used" ] } }, { "id": "AUTOSAR-M0_1_2-a", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-aa", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-aa]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-aa]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-ab", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-ab]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-ab]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-ac", "name": "Avoid conditions that always evaluate to the same value", "shortDescription": { "text": "Avoid conditions that always evaluate to the same value" }, "fullDescription": { "text": "Avoid conditions that always evaluate to the same value [AUTOSAR-M0_1_2-ac]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid conditions that always evaluate to the same value [AUTOSAR-M0_1_2-ac]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-b", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-c", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-d", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-d]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-e", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-e]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-f", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-f]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-g", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-g]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-h", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-h]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-i", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-i]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-i]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-j", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-j]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-j]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-k", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-k]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-k]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-l", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-l]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-l]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-m", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-m]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-m]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-n", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-n]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-n]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-o", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-o]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-o]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-p", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-p]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-p]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-q", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-q]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-q]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-r", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-r]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-r]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-s", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-s]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-s]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-t", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-t]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-t]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-u", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-u]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-u]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-v", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-v]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-v]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-w", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-w]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-w]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-x", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-x]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-x]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-y", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-y]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-y]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M0_1_2-z", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-z]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [AUTOSAR-M0_1_2-z]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-2 A project shall not contain infeasible paths" ] } }, { "id": "AUTOSAR-M5_0_5-a", "name": "There shall be no implicit conversions from integral to floating type", "shortDescription": { "text": "There shall be no implicit conversions from integral to floating type" }, "fullDescription": { "text": "There shall be no implicit conversions from integral to floating type [AUTOSAR-M5_0_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no implicit conversions from integral to floating type [AUTOSAR-M5_0_5-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-5 There shall be no implicit floating-integral conversions" ] } }, { "id": "AUTOSAR-M5_0_5-b", "name": "Avoid implicit conversions from floating to integral type", "shortDescription": { "text": "Avoid implicit conversions from floating to integral type" }, "fullDescription": { "text": "Avoid implicit conversions from floating to integral type [AUTOSAR-M5_0_5-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid implicit conversions from floating to integral type [AUTOSAR-M5_0_5-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-5 There shall be no implicit floating-integral conversions" ] } }, { "id": "AUTOSAR-A27_0_4-a", "name": "Don't use unsafe C functions that do write to range-unchecked buffers", "shortDescription": { "text": "Don't use unsafe C functions that do write to range-unchecked buffers" }, "fullDescription": { "text": "Don't use unsafe C functions that do write to range-unchecked buffers [AUTOSAR-A27_0_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't use unsafe C functions that do write to range-unchecked buffers [AUTOSAR-A27_0_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A27-0-4 C-style strings shall not be used" ] } }, { "id": "AUTOSAR-A27_0_4-b", "name": "Avoid using unsafe string functions that do not check bounds", "shortDescription": { "text": "Avoid using unsafe string functions that do not check bounds" }, "fullDescription": { "text": "Avoid using unsafe string functions that do not check bounds [AUTOSAR-A27_0_4-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using unsafe string functions that do not check bounds [AUTOSAR-A27_0_4-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A27-0-4 C-style strings shall not be used" ] } }, { "id": "AUTOSAR-A27_0_4-c", "name": "Do not use the 'char' buffer to store input from 'std::cin'", "shortDescription": { "text": "Do not use the 'char' buffer to store input from 'std::cin'" }, "fullDescription": { "text": "Do not use the 'char' buffer to store input from 'std::cin' [AUTOSAR-A27_0_4-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use the 'char' buffer to store input from 'std::cin' [AUTOSAR-A27_0_4-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A27-0-4 C-style strings shall not be used" ] } }, { "id": "AUTOSAR-A27_0_4-d", "name": "C-style strings shall not be used", "shortDescription": { "text": "C-style strings shall not be used" }, "fullDescription": { "text": "C-style strings shall not be used [AUTOSAR-A27_0_4-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "C-style strings shall not be used [AUTOSAR-A27_0_4-d]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A27-0-4 C-style strings shall not be used" ] } }, { "id": "AUTOSAR-M0_1_3-a", "name": "Avoid unused local variables", "shortDescription": { "text": "Avoid unused local variables" }, "fullDescription": { "text": "Avoid unused local variables [AUTOSAR-M0_1_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid unused local variables [AUTOSAR-M0_1_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-3 A project shall not contain unused variables" ] } }, { "id": "AUTOSAR-M0_1_3-c", "name": "Avoid unused private member variables", "shortDescription": { "text": "Avoid unused private member variables" }, "fullDescription": { "text": "Avoid unused private member variables [AUTOSAR-M0_1_3-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid unused private member variables [AUTOSAR-M0_1_3-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-3 A project shall not contain unused variables" ] } }, { "id": "AUTOSAR-M5_0_4-a", "name": "Avoid implicit conversions between signed and unsigned integer types", "shortDescription": { "text": "Avoid implicit conversions between signed and unsigned integer types" }, "fullDescription": { "text": "Avoid implicit conversions between signed and unsigned integer types [AUTOSAR-M5_0_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid implicit conversions between signed and unsigned integer types [AUTOSAR-M5_0_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-4 An implicit integral conversion shall not change the signedness of the underlying type" ] } }, { "id": "AUTOSAR-A18_5_2-a", "name": "Dynamic heap memory allocation shall not be used", "shortDescription": { "text": "Dynamic heap memory allocation shall not be used" }, "fullDescription": { "text": "Dynamic heap memory allocation shall not be used [AUTOSAR-A18_5_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Dynamic heap memory allocation shall not be used [AUTOSAR-A18_5_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-5-2 Non-placement new or delete expressions shall not be used" ] } }, { "id": "AUTOSAR-A27_0_3-a", "name": "Do not alternately input and output from a stream without an intervening flush or positioning call", "shortDescription": { "text": "Do not alternately input and output from a stream without an intervening flush or positioning call" }, "fullDescription": { "text": "Do not alternately input and output from a stream without an intervening flush or positioning call [AUTOSAR-A27_0_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not alternately input and output from a stream without an intervening flush or positioning call [AUTOSAR-A27_0_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A27-0-3 Alternate input and output operations on a file stream shall not be used without an intervening flush or positioning call" ] } }, { "id": "AUTOSAR-M5_0_7-a", "name": "The value of a complex expression of floating type should not be cast to an integer type", "shortDescription": { "text": "The value of a complex expression of floating type should not be cast to an integer type" }, "fullDescription": { "text": "The value of a complex expression of floating type should not be cast to an integer type [AUTOSAR-M5_0_7-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of a complex expression of floating type should not be cast to an integer type [AUTOSAR-M5_0_7-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-7 There shall be no explicit floating-integral conversions of a cvalue expression" ] } }, { "id": "AUTOSAR-M5_0_7-b", "name": "The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression", "shortDescription": { "text": "The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" }, "fullDescription": { "text": "The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression [AUTOSAR-M5_0_7-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression [AUTOSAR-M5_0_7-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-7 There shall be no explicit floating-integral conversions of a cvalue expression" ] } }, { "id": "AUTOSAR-A18_5_1-a", "name": "Do not use calloc, malloc, realloc and free functions", "shortDescription": { "text": "Do not use calloc, malloc, realloc and free functions" }, "fullDescription": { "text": "Do not use calloc, malloc, realloc and free functions [AUTOSAR-A18_5_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use calloc, malloc, realloc and free functions [AUTOSAR-A18_5_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-5-1 Functions malloc, calloc, realloc and free shall not be used" ] } }, { "id": "AUTOSAR-A27_0_2-a", "name": "Avoid overflow due to reading a not zero terminated string", "shortDescription": { "text": "Avoid overflow due to reading a not zero terminated string" }, "fullDescription": { "text": "Avoid overflow due to reading a not zero terminated string [AUTOSAR-A27_0_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow due to reading a not zero terminated string [AUTOSAR-A27_0_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A27-0-2 A C-style string shall guarantee sufficient space for data and the null terminator" ] } }, { "id": "AUTOSAR-A27_0_2-b", "name": "Avoid overflow when writing to a buffer", "shortDescription": { "text": "Avoid overflow when writing to a buffer" }, "fullDescription": { "text": "Avoid overflow when writing to a buffer [AUTOSAR-A27_0_2-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when writing to a buffer [AUTOSAR-A27_0_2-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A27-0-2 A C-style string shall guarantee sufficient space for data and the null terminator" ] } }, { "id": "AUTOSAR-A27_0_2-c", "name": "Do not use the 'char' buffer to store input from 'std::cin'", "shortDescription": { "text": "Do not use the 'char' buffer to store input from 'std::cin'" }, "fullDescription": { "text": "Do not use the 'char' buffer to store input from 'std::cin' [AUTOSAR-A27_0_2-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use the 'char' buffer to store input from 'std::cin' [AUTOSAR-A27_0_2-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A27-0-2 A C-style string shall guarantee sufficient space for data and the null terminator" ] } }, { "id": "AUTOSAR-A27_0_2-e", "name": "Prevent buffer overflows from tainted data", "shortDescription": { "text": "Prevent buffer overflows from tainted data" }, "fullDescription": { "text": "Prevent buffer overflows from tainted data [AUTOSAR-A27_0_2-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Prevent buffer overflows from tainted data [AUTOSAR-A27_0_2-e]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A27-0-2 A C-style string shall guarantee sufficient space for data and the null terminator" ] } }, { "id": "AUTOSAR-A27_0_2-f", "name": "Avoid buffer write overflow from tainted data", "shortDescription": { "text": "Avoid buffer write overflow from tainted data" }, "fullDescription": { "text": "Avoid buffer write overflow from tainted data [AUTOSAR-A27_0_2-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer write overflow from tainted data [AUTOSAR-A27_0_2-f]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A27-0-2 A C-style string shall guarantee sufficient space for data and the null terminator" ] } }, { "id": "AUTOSAR-A5_0_4-a", "name": "Don't treat arrays polymorphically", "shortDescription": { "text": "Don't treat arrays polymorphically" }, "fullDescription": { "text": "Don't treat arrays polymorphically [AUTOSAR-A5_0_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't treat arrays polymorphically [AUTOSAR-A5_0_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-0-4 Pointer arithmetic shall not be used with pointers to non-final classes" ] } }, { "id": "AUTOSAR-A5_0_4-b", "name": "A pointer to an array of derived class objects should not be converted to a base class pointer", "shortDescription": { "text": "A pointer to an array of derived class objects should not be converted to a base class pointer" }, "fullDescription": { "text": "A pointer to an array of derived class objects should not be converted to a base class pointer [AUTOSAR-A5_0_4-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A pointer to an array of derived class objects should not be converted to a base class pointer [AUTOSAR-A5_0_4-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-0-4 Pointer arithmetic shall not be used with pointers to non-final classes" ] } }, { "id": "AUTOSAR-A5_0_4-c", "name": "Do not treat arrays polymorphically", "shortDescription": { "text": "Do not treat arrays polymorphically" }, "fullDescription": { "text": "Do not treat arrays polymorphically [AUTOSAR-A5_0_4-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not treat arrays polymorphically [AUTOSAR-A5_0_4-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-0-4 Pointer arithmetic shall not be used with pointers to non-final classes" ] } }, { "id": "AUTOSAR-M0_1_1-a", "name": "There shall be no unreachable code in \"if\/else\/while\/for\" block", "shortDescription": { "text": "There shall be no unreachable code in \"if\/else\/while\/for\" block" }, "fullDescription": { "text": "There shall be no unreachable code in \"if\/else\/while\/for\" block [AUTOSAR-M0_1_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code in \"if\/else\/while\/for\" block [AUTOSAR-M0_1_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-1 A project shall not contain unreachable code" ] } }, { "id": "AUTOSAR-M0_1_1-b", "name": "There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute", "shortDescription": { "text": "There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute" }, "fullDescription": { "text": "There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute [AUTOSAR-M0_1_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute [AUTOSAR-M0_1_1-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-1 A project shall not contain unreachable code" ] } }, { "id": "AUTOSAR-M0_1_1-c", "name": "There shall be no unreachable code in \"else\" block", "shortDescription": { "text": "There shall be no unreachable code in \"else\" block" }, "fullDescription": { "text": "There shall be no unreachable code in \"else\" block [AUTOSAR-M0_1_1-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code in \"else\" block [AUTOSAR-M0_1_1-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-1 A project shall not contain unreachable code" ] } }, { "id": "AUTOSAR-M0_1_1-d", "name": "There shall be no unreachable code after \"if\" or \"switch\" statement inside while\/for\/do...while loop", "shortDescription": { "text": "There shall be no unreachable code after \"if\" or \"switch\" statement inside while\/for\/do...while loop" }, "fullDescription": { "text": "There shall be no unreachable code after \"if\" or \"switch\" statement inside while\/for\/do...while loop [AUTOSAR-M0_1_1-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code after \"if\" or \"switch\" statement inside while\/for\/do...while loop [AUTOSAR-M0_1_1-d]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-1 A project shall not contain unreachable code" ] } }, { "id": "AUTOSAR-M0_1_1-e", "name": "There shall be no unreachable code after 'if' or 'switch' statement", "shortDescription": { "text": "There shall be no unreachable code after 'if' or 'switch' statement" }, "fullDescription": { "text": "There shall be no unreachable code after 'if' or 'switch' statement [AUTOSAR-M0_1_1-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code after 'if' or 'switch' statement [AUTOSAR-M0_1_1-e]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-1 A project shall not contain unreachable code" ] } }, { "id": "AUTOSAR-M0_1_1-f", "name": "There shall be no unreachable code in 'for' loop", "shortDescription": { "text": "There shall be no unreachable code in 'for' loop" }, "fullDescription": { "text": "There shall be no unreachable code in 'for' loop [AUTOSAR-M0_1_1-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code in 'for' loop [AUTOSAR-M0_1_1-f]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-1 A project shall not contain unreachable code" ] } }, { "id": "AUTOSAR-M0_1_1-g", "name": "There shall be no unreachable code in switch statement", "shortDescription": { "text": "There shall be no unreachable code in switch statement" }, "fullDescription": { "text": "There shall be no unreachable code in switch statement [AUTOSAR-M0_1_1-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code in switch statement [AUTOSAR-M0_1_1-g]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-1 A project shall not contain unreachable code" ] } }, { "id": "AUTOSAR-M5_0_6-a", "name": "Avoid implicit integral conversions from a wider to a narrower type", "shortDescription": { "text": "Avoid implicit integral conversions from a wider to a narrower type" }, "fullDescription": { "text": "Avoid implicit integral conversions from a wider to a narrower type [AUTOSAR-M5_0_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid implicit integral conversions from a wider to a narrower type [AUTOSAR-M5_0_6-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-6 An implicit integral or floating-point conversion shall not reduce the size of the underlying type" ] } }, { "id": "AUTOSAR-M5_0_6-b", "name": "Avoid implicit conversions from wider to narrower floating type", "shortDescription": { "text": "Avoid implicit conversions from wider to narrower floating type" }, "fullDescription": { "text": "Avoid implicit conversions from wider to narrower floating type [AUTOSAR-M5_0_6-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid implicit conversions from wider to narrower floating type [AUTOSAR-M5_0_6-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-6 An implicit integral or floating-point conversion shall not reduce the size of the underlying type" ] } }, { "id": "AUTOSAR-M5_0_6-c", "name": "Avoid implicit conversions of floating point numbers from wider to narrower floating type", "shortDescription": { "text": "Avoid implicit conversions of floating point numbers from wider to narrower floating type" }, "fullDescription": { "text": "Avoid implicit conversions of floating point numbers from wider to narrower floating type [AUTOSAR-M5_0_6-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid implicit conversions of floating point numbers from wider to narrower floating type [AUTOSAR-M5_0_6-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-6 An implicit integral or floating-point conversion shall not reduce the size of the underlying type" ] } }, { "id": "AUTOSAR-A13_6_1-a", "name": "Digit sequences separators ' shall only be used consistently", "shortDescription": { "text": "Digit sequences separators ' shall only be used consistently" }, "fullDescription": { "text": "Digit sequences separators ' shall only be used consistently [AUTOSAR-A13_6_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Digit sequences separators ' shall only be used consistently [AUTOSAR-A13_6_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A13-6-1 Digit sequences separators ' shall only be used as follows: (1) for decimal, every 3 digits, (2) for hexadecimal, every 2 digits, (3) for binary, every 4 digits" ] } }, { "id": "AUTOSAR-A27_0_1-a", "name": "Avoid calling functions printf\/wprintf with only one argument other than string constant", "shortDescription": { "text": "Avoid calling functions printf\/wprintf with only one argument other than string constant" }, "fullDescription": { "text": "Avoid calling functions printf\/wprintf with only one argument other than string constant [AUTOSAR-A27_0_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid calling functions printf\/wprintf with only one argument other than string constant [AUTOSAR-A27_0_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A27-0-1 Inputs from independent components shall be validated" ] } }, { "id": "AUTOSAR-A27_0_1-b", "name": "Avoid tainted data in array indexes", "shortDescription": { "text": "Avoid tainted data in array indexes" }, "fullDescription": { "text": "Avoid tainted data in array indexes [AUTOSAR-A27_0_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid tainted data in array indexes [AUTOSAR-A27_0_1-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A27-0-1 Inputs from independent components shall be validated" ] } }, { "id": "AUTOSAR-A27_0_1-c", "name": "Prevent buffer overflows from tainted data", "shortDescription": { "text": "Prevent buffer overflows from tainted data" }, "fullDescription": { "text": "Prevent buffer overflows from tainted data [AUTOSAR-A27_0_1-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Prevent buffer overflows from tainted data [AUTOSAR-A27_0_1-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A27-0-1 Inputs from independent components shall be validated" ] } }, { "id": "AUTOSAR-A27_0_1-d", "name": "Avoid buffer overflow from tainted data due to defining incorrect format limits", "shortDescription": { "text": "Avoid buffer overflow from tainted data due to defining incorrect format limits" }, "fullDescription": { "text": "Avoid buffer overflow from tainted data due to defining incorrect format limits [AUTOSAR-A27_0_1-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer overflow from tainted data due to defining incorrect format limits [AUTOSAR-A27_0_1-d]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A27-0-1 Inputs from independent components shall be validated" ] } }, { "id": "AUTOSAR-A27_0_1-e", "name": "Avoid buffer read overflow from tainted data", "shortDescription": { "text": "Avoid buffer read overflow from tainted data" }, "fullDescription": { "text": "Avoid buffer read overflow from tainted data [AUTOSAR-A27_0_1-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer read overflow from tainted data [AUTOSAR-A27_0_1-e]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A27-0-1 Inputs from independent components shall be validated" ] } }, { "id": "AUTOSAR-A27_0_1-f", "name": "Avoid buffer write overflow from tainted data", "shortDescription": { "text": "Avoid buffer write overflow from tainted data" }, "fullDescription": { "text": "Avoid buffer write overflow from tainted data [AUTOSAR-A27_0_1-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer write overflow from tainted data [AUTOSAR-A27_0_1-f]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A27-0-1 Inputs from independent components shall be validated" ] } }, { "id": "AUTOSAR-A27_0_1-g", "name": "Protect against command injection", "shortDescription": { "text": "Protect against command injection" }, "fullDescription": { "text": "Protect against command injection [AUTOSAR-A27_0_1-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against command injection [AUTOSAR-A27_0_1-g]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A27-0-1 Inputs from independent components shall be validated" ] } }, { "id": "AUTOSAR-A27_0_1-h", "name": "Exclude unsanitized user input from format strings", "shortDescription": { "text": "Exclude unsanitized user input from format strings" }, "fullDescription": { "text": "Exclude unsanitized user input from format strings [AUTOSAR-A27_0_1-h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Exclude unsanitized user input from format strings [AUTOSAR-A27_0_1-h]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A27-0-1 Inputs from independent components shall be validated" ] } }, { "id": "AUTOSAR-A0_1_4-a", "name": "Eliminate unused parameters", "shortDescription": { "text": "Eliminate unused parameters" }, "fullDescription": { "text": "Eliminate unused parameters [AUTOSAR-A0_1_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Eliminate unused parameters [AUTOSAR-A0_1_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A0-1-4 There shall be no unused named parameters in non-virtual functions" ] } }, { "id": "AUTOSAR-A0_1_5-a", "name": "There shall be no unused named parameters in virtual functions", "shortDescription": { "text": "There shall be no unused named parameters in virtual functions" }, "fullDescription": { "text": "There shall be no unused named parameters in virtual functions [AUTOSAR-A0_1_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unused named parameters in virtual functions [AUTOSAR-A0_1_5-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A0-1-5 There shall be no unused named parameters in the set of parameters for a virtual function and all the functions that override it" ] } }, { "id": "AUTOSAR-A0_1_6-a", "name": "A project shall not contain unused type declarations", "shortDescription": { "text": "A project shall not contain unused type declarations" }, "fullDescription": { "text": "A project shall not contain unused type declarations [AUTOSAR-A0_1_6-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A project shall not contain unused type declarations [AUTOSAR-A0_1_6-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A0-1-6 There should be no unused type declarations" ] } }, { "id": "AUTOSAR-A10_3_5-a", "name": "A user-defined assignment operator shall not be virtual", "shortDescription": { "text": "A user-defined assignment operator shall not be virtual" }, "fullDescription": { "text": "A user-defined assignment operator shall not be virtual [AUTOSAR-A10_3_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A user-defined assignment operator shall not be virtual [AUTOSAR-A10_3_5-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A10-3-5 A user-defined assignment operator shall not be virtual" ] } }, { "id": "AUTOSAR-A15_2_1-a", "name": "Function called in global or namespace scope shall not throw unhandled exceptions", "shortDescription": { "text": "Function called in global or namespace scope shall not throw unhandled exceptions" }, "fullDescription": { "text": "Function called in global or namespace scope shall not throw unhandled exceptions [AUTOSAR-A15_2_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Function called in global or namespace scope shall not throw unhandled exceptions [AUTOSAR-A15_2_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-2-1 Constructors that are not noexcept shall not be invoked before program startup" ] } }, { "id": "AUTOSAR-A15_2_1-b", "name": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point", "shortDescription": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" }, "fullDescription": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point [AUTOSAR-A15_2_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point [AUTOSAR-A15_2_1-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-2-1 Constructors that are not noexcept shall not be invoked before program startup" ] } }, { "id": "AUTOSAR-A7_5_2-a", "name": "Do not use recursion", "shortDescription": { "text": "Do not use recursion" }, "fullDescription": { "text": "Do not use recursion [AUTOSAR-A7_5_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use recursion [AUTOSAR-A7_5_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A7-5-2 Functions shall not call themselves, either directly or indirectly" ] } }, { "id": "AUTOSAR-M5_18_1-a", "name": "The comma operator shall not be used", "shortDescription": { "text": "The comma operator shall not be used" }, "fullDescription": { "text": "The comma operator shall not be used [AUTOSAR-M5_18_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The comma operator shall not be used [AUTOSAR-M5_18_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-18-1 The comma operator shall not be used" ] } }, { "id": "AUTOSAR-A7_5_1-a", "name": "A function shall not return a pointer or a reference to a parameter that is passed by const reference", "shortDescription": { "text": "A function shall not return a pointer or a reference to a parameter that is passed by const reference" }, "fullDescription": { "text": "A function shall not return a pointer or a reference to a parameter that is passed by const reference [AUTOSAR-A7_5_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A function shall not return a pointer or a reference to a parameter that is passed by const reference [AUTOSAR-A7_5_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A7-5-1 A function shall not return a reference or a pointer to a parameter that is passed by reference to const" ] } }, { "id": "AUTOSAR-A18_5_4-a", "name": "Define both sized and unsized versions of operator delete", "shortDescription": { "text": "Define both sized and unsized versions of operator delete" }, "fullDescription": { "text": "Define both sized and unsized versions of operator delete [AUTOSAR-A18_5_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Define both sized and unsized versions of operator delete [AUTOSAR-A18_5_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-5-4 If a project has sized or unsized version of operator \"delete\" globally defined, then both sized and unsized versions shall be defined" ] } }, { "id": "AUTOSAR-A18_5_3-a", "name": "Never provide brackets ([]) for delete when deallocating non-arrays", "shortDescription": { "text": "Never provide brackets ([]) for delete when deallocating non-arrays" }, "fullDescription": { "text": "Never provide brackets ([]) for delete when deallocating non-arrays [AUTOSAR-A18_5_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Never provide brackets ([]) for delete when deallocating non-arrays [AUTOSAR-A18_5_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-5-3 The form of the delete expression shall match the form of the new expression used to allocate the memory" ] } }, { "id": "AUTOSAR-A18_5_3-b", "name": "Always provide empty brackets ([]) for delete when deallocating arrays", "shortDescription": { "text": "Always provide empty brackets ([]) for delete when deallocating arrays" }, "fullDescription": { "text": "Always provide empty brackets ([]) for delete when deallocating arrays [AUTOSAR-A18_5_3-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Always provide empty brackets ([]) for delete when deallocating arrays [AUTOSAR-A18_5_3-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-5-3 The form of the delete expression shall match the form of the new expression used to allocate the memory" ] } }, { "id": "AUTOSAR-A18_5_3-c", "name": "Properly deallocate dynamically allocated resources", "shortDescription": { "text": "Properly deallocate dynamically allocated resources" }, "fullDescription": { "text": "Properly deallocate dynamically allocated resources [AUTOSAR-A18_5_3-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly deallocate dynamically allocated resources [AUTOSAR-A18_5_3-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-5-3 The form of the delete expression shall match the form of the new expression used to allocate the memory" ] } }, { "id": "AUTOSAR-M5_0_3-a", "name": "Avoid implicit conversions of complex expressions", "shortDescription": { "text": "Avoid implicit conversions of complex expressions" }, "fullDescription": { "text": "Avoid implicit conversions of complex expressions [AUTOSAR-M5_0_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid implicit conversions of complex expressions [AUTOSAR-M5_0_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-3 A cvalue expression shall not be implicitly converted to a different underlying type" ] } }, { "id": "AUTOSAR-M5_0_3-b", "name": "Avoid implicit conversions of complex expressions", "shortDescription": { "text": "Avoid implicit conversions of complex expressions" }, "fullDescription": { "text": "Avoid implicit conversions of complex expressions [AUTOSAR-M5_0_3-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid implicit conversions of complex expressions [AUTOSAR-M5_0_3-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-3 A cvalue expression shall not be implicitly converted to a different underlying type" ] } }, { "id": "AUTOSAR-M5_0_3-c", "name": "Avoid implicit conversions of complex expressions", "shortDescription": { "text": "Avoid implicit conversions of complex expressions" }, "fullDescription": { "text": "Avoid implicit conversions of complex expressions [AUTOSAR-M5_0_3-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid implicit conversions of complex expressions [AUTOSAR-M5_0_3-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-3 A cvalue expression shall not be implicitly converted to a different underlying type" ] } }, { "id": "AUTOSAR-A18_5_5-a", "name": "Use the same form in corresponding calls to new\/malloc and delete\/free", "shortDescription": { "text": "Use the same form in corresponding calls to new\/malloc and delete\/free" }, "fullDescription": { "text": "Use the same form in corresponding calls to new\/malloc and delete\/free [AUTOSAR-A18_5_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use the same form in corresponding calls to new\/malloc and delete\/free [AUTOSAR-A18_5_5-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-5-5 Memory management functions shall ensure the following: (a) deterministic behavior resulting with the existence of worst-case execution time, (b) avoiding memory fragmentation, (c) avoid running out of memory, (d) avoiding mismatched allocations or deallocations, (e) no dependence on non-deterministic calls to kernel" ] } }, { "id": "AUTOSAR-A18_5_5-b", "name": "Freed memory shouldn't be accessed under any circumstances", "shortDescription": { "text": "Freed memory shouldn't be accessed under any circumstances" }, "fullDescription": { "text": "Freed memory shouldn't be accessed under any circumstances [AUTOSAR-A18_5_5-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Freed memory shouldn't be accessed under any circumstances [AUTOSAR-A18_5_5-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-5-5 Memory management functions shall ensure the following: (a) deterministic behavior resulting with the existence of worst-case execution time, (b) avoiding memory fragmentation, (c) avoid running out of memory, (d) avoiding mismatched allocations or deallocations, (e) no dependence on non-deterministic calls to kernel" ] } }, { "id": "AUTOSAR-A18_5_5-c", "name": "Properly define new handlers", "shortDescription": { "text": "Properly define new handlers" }, "fullDescription": { "text": "Properly define new handlers [AUTOSAR-A18_5_5-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly define new handlers [AUTOSAR-A18_5_5-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-5-5 Memory management functions shall ensure the following: (a) deterministic behavior resulting with the existence of worst-case execution time, (b) avoiding memory fragmentation, (c) avoid running out of memory, (d) avoiding mismatched allocations or deallocations, (e) no dependence on non-deterministic calls to kernel" ] } }, { "id": "AUTOSAR-M5_0_2-a", "name": "Use parenthesis for the right-hand operand of an assignment operator when it contains an assignment expression", "shortDescription": { "text": "Use parenthesis for the right-hand operand of an assignment operator when it contains an assignment expression" }, "fullDescription": { "text": "Use parenthesis for the right-hand operand of an assignment operator when it contains an assignment expression [AUTOSAR-M5_0_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use parenthesis for the right-hand operand of an assignment operator when it contains an assignment expression [AUTOSAR-M5_0_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-2 Limited dependence should be placed on C++ operator precedence rules in expressions" ] } }, { "id": "AUTOSAR-M5_0_2-b", "name": "Limited dependence should be placed on C's operator precedence rules in expressions", "shortDescription": { "text": "Limited dependence should be placed on C's operator precedence rules in expressions" }, "fullDescription": { "text": "Limited dependence should be placed on C's operator precedence rules in expressions [AUTOSAR-M5_0_2-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Limited dependence should be placed on C's operator precedence rules in expressions [AUTOSAR-M5_0_2-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-2 Limited dependence should be placed on C++ operator precedence rules in expressions" ] } }, { "id": "AUTOSAR-M5_0_2-c", "name": "No parentheses are required for the operand of a unary operator", "shortDescription": { "text": "No parentheses are required for the operand of a unary operator" }, "fullDescription": { "text": "No parentheses are required for the operand of a unary operator [AUTOSAR-M5_0_2-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "No parentheses are required for the operand of a unary operator [AUTOSAR-M5_0_2-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-2 Limited dependence should be placed on C++ operator precedence rules in expressions" ] } }, { "id": "AUTOSAR-M5_0_2-d", "name": "Limited dependence should be placed on C's operator precedence rules in expressions", "shortDescription": { "text": "Limited dependence should be placed on C's operator precedence rules in expressions" }, "fullDescription": { "text": "Limited dependence should be placed on C's operator precedence rules in expressions [AUTOSAR-M5_0_2-d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Limited dependence should be placed on C's operator precedence rules in expressions [AUTOSAR-M5_0_2-d]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-2 Limited dependence should be placed on C++ operator precedence rules in expressions" ] } }, { "id": "AUTOSAR-M5_0_2-e", "name": "Use parentheses unless all operators in the expression are the same", "shortDescription": { "text": "Use parentheses unless all operators in the expression are the same" }, "fullDescription": { "text": "Use parentheses unless all operators in the expression are the same [AUTOSAR-M5_0_2-e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use parentheses unless all operators in the expression are the same [AUTOSAR-M5_0_2-e]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-2 Limited dependence should be placed on C++ operator precedence rules in expressions" ] } }, { "id": "AUTOSAR-M5_0_2-f", "name": "Limited dependence should be placed on C's operator precedence rules in expressions", "shortDescription": { "text": "Limited dependence should be placed on C's operator precedence rules in expressions" }, "fullDescription": { "text": "Limited dependence should be placed on C's operator precedence rules in expressions [AUTOSAR-M5_0_2-f]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Limited dependence should be placed on C's operator precedence rules in expressions [AUTOSAR-M5_0_2-f]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-2 Limited dependence should be placed on C++ operator precedence rules in expressions" ] } }, { "id": "AUTOSAR-A10_3_1-a", "name": "Only one of virtual, override or final should be specified in a member function declaration", "shortDescription": { "text": "Only one of virtual, override or final should be specified in a member function declaration" }, "fullDescription": { "text": "Only one of virtual, override or final should be specified in a member function declaration [AUTOSAR-A10_3_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Only one of virtual, override or final should be specified in a member function declaration [AUTOSAR-A10_3_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A10-3-1 Virtual function declaration shall contain exactly one of the three specifiers:" ] } }, { "id": "AUTOSAR-A18_5_8-a", "name": "Use allocation by declaration rather than by new or malloc", "shortDescription": { "text": "Use allocation by declaration rather than by new or malloc" }, "fullDescription": { "text": "Use allocation by declaration rather than by new or malloc [AUTOSAR-A18_5_8-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use allocation by declaration rather than by new or malloc [AUTOSAR-A18_5_8-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-5-8 Objects that do not outlive a function shall have automatic storage duration" ] } }, { "id": "AUTOSAR-A10_3_2-a", "name": "Each overriding virtual function shall be declared with the override or final specifier", "shortDescription": { "text": "Each overriding virtual function shall be declared with the override or final specifier" }, "fullDescription": { "text": "Each overriding virtual function shall be declared with the override or final specifier [AUTOSAR-A10_3_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Each overriding virtual function shall be declared with the override or final specifier [AUTOSAR-A10_3_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A10-3-2 Each overriding virtual function shall be declared with the override or final specifier" ] } }, { "id": "AUTOSAR-A10_3_3-a", "name": "Do not introduce virtual functions in a final class", "shortDescription": { "text": "Do not introduce virtual functions in a final class" }, "fullDescription": { "text": "Do not introduce virtual functions in a final class [AUTOSAR-A10_3_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not introduce virtual functions in a final class [AUTOSAR-A10_3_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A10-3-3 Virtual functions shall not be introduced in a final class" ] } }, { "id": "AUTOSAR-M0_1_8-a", "name": "All non-empty functions with void return type shall have external side effect(s)", "shortDescription": { "text": "All non-empty functions with void return type shall have external side effect(s)" }, "fullDescription": { "text": "All non-empty functions with void return type shall have external side effect(s) [AUTOSAR-M0_1_8-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All non-empty functions with void return type shall have external side effect(s) [AUTOSAR-M0_1_8-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-8 All functions with void return type shall have external side effect(s)" ] } }, { "id": "AUTOSAR-M0_1_8-b", "name": "Functions with void return type shall not be empty", "shortDescription": { "text": "Functions with void return type shall not be empty" }, "fullDescription": { "text": "Functions with void return type shall not be empty [AUTOSAR-M0_1_8-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Functions with void return type shall not be empty [AUTOSAR-M0_1_8-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-8 All functions with void return type shall have external side effect(s)" ] } }, { "id": "AUTOSAR-A18_5_9-a", "name": "The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails", "shortDescription": { "text": "The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails" }, "fullDescription": { "text": "The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails [AUTOSAR-A18_5_9-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails [AUTOSAR-A18_5_9-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-5-9 Custom implementations of dynamic memory allocation and deallocation functions shall meet the semantic requirements specified in the corresponding \"Required behaviour\" clause from the C++ Standard" ] } }, { "id": "AUTOSAR-M0_1_9-a", "name": "All non-null statements shall either have at least one side-effect however executed or cause control flow to change", "shortDescription": { "text": "All non-null statements shall either have at least one side-effect however executed or cause control flow to change" }, "fullDescription": { "text": "All non-null statements shall either have at least one side-effect however executed or cause control flow to change [AUTOSAR-M0_1_9-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All non-null statements shall either have at least one side-effect however executed or cause control flow to change [AUTOSAR-M0_1_9-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-9 There shall be no dead code" ] } }, { "id": "BD-API-BADPARAM", "name": "Do not pass incorrect values to library functions", "shortDescription": { "text": "Do not pass incorrect values to library functions" }, "fullDescription": { "text": "Do not pass incorrect values to library functions [BD-API-BADPARAM]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not pass incorrect values to library functions [BD-API-BADPARAM]" }, "properties": { "tags": [ "Flow Analysis", "Incorrect API usage" ] } }, { "id": "BD-API-NEGPARAM", "name": "Do not pass negative values to functions expecting non-negative arguments", "shortDescription": { "text": "Do not pass negative values to functions expecting non-negative arguments" }, "fullDescription": { "text": "Do not pass negative values to functions expecting non-negative arguments [BD-API-NEGPARAM]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not pass negative values to functions expecting non-negative arguments [BD-API-NEGPARAM]" }, "properties": { "tags": [ "Flow Analysis", "Incorrect API usage" ] } }, { "id": "BD-API-CTYPE", "name": "Do not pass incorrect values to ctype.h library functions", "shortDescription": { "text": "Do not pass incorrect values to ctype.h library functions" }, "fullDescription": { "text": "Do not pass incorrect values to ctype.h library functions [BD-API-CTYPE]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not pass incorrect values to ctype.h library functions [BD-API-CTYPE]" }, "properties": { "tags": [ "Flow Analysis", "Incorrect API usage" ] } }, { "id": "BD-API-REVNEGPARAM", "name": "Do not check for a non-negative value after passing as a non-negative argument", "shortDescription": { "text": "Do not check for a non-negative value after passing as a non-negative argument" }, "fullDescription": { "text": "Do not check for a non-negative value after passing as a non-negative argument [BD-API-REVNEGPARAM]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not check for a non-negative value after passing as a non-negative argument [BD-API-REVNEGPARAM]" }, "properties": { "tags": [ "Flow Analysis", "Incorrect API usage" ] } }, { "id": "BD-API-STRSIZE", "name": "The size_t argument passed to any function in string.h shall have an appropriate value", "shortDescription": { "text": "The size_t argument passed to any function in string.h shall have an appropriate value" }, "fullDescription": { "text": "The size_t argument passed to any function in string.h shall have an appropriate value [BD-API-STRSIZE]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The size_t argument passed to any function in string.h shall have an appropriate value [BD-API-STRSIZE]" }, "properties": { "tags": [ "Flow Analysis", "Incorrect API usage" ] } }, { "id": "BD-API-VALPARAM", "name": "Validate values passed to library functions", "shortDescription": { "text": "Validate values passed to library functions" }, "fullDescription": { "text": "Validate values passed to library functions [BD-API-VALPARAM]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Validate values passed to library functions [BD-API-VALPARAM]" }, "properties": { "tags": [ "Flow Analysis", "Incorrect API usage" ] } }, { "id": "BD-MISC-TRANS", "name": "Always close transactions", "shortDescription": { "text": "Always close transactions" }, "fullDescription": { "text": "Always close transactions [BD-MISC-TRANS]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Always close transactions [BD-MISC-TRANS]" }, "properties": { "tags": [ "Flow Analysis", "Miscellaneous" ] } }, { "id": "BD-MISC-DC", "name": "Prevent calling unsafe functions (custom rule)", "shortDescription": { "text": "Prevent calling unsafe functions (custom rule)" }, "fullDescription": { "text": "Prevent calling unsafe functions (custom rule) [BD-MISC-DC]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Prevent calling unsafe functions (custom rule) [BD-MISC-DC]" }, "properties": { "tags": [ "Flow Analysis", "Miscellaneous" ] } }, { "id": "BD-PB-EXCEPT", "name": "Always catch exceptions", "shortDescription": { "text": "Always catch exceptions" }, "fullDescription": { "text": "Always catch exceptions [BD-PB-EXCEPT]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Always catch exceptions [BD-PB-EXCEPT]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-MODSTR", "name": "Do not modify string literals", "shortDescription": { "text": "Do not modify string literals" }, "fullDescription": { "text": "Do not modify string literals [BD-PB-MODSTR]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not modify string literals [BD-PB-MODSTR]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-NOTINIT", "name": "Avoid use before initialization", "shortDescription": { "text": "Avoid use before initialization" }, "fullDescription": { "text": "Avoid use before initialization [BD-PB-NOTINIT]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid use before initialization [BD-PB-NOTINIT]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-NP", "name": "Avoid null pointer dereferencing", "shortDescription": { "text": "Avoid null pointer dereferencing" }, "fullDescription": { "text": "Avoid null pointer dereferencing [BD-PB-NP]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid null pointer dereferencing [BD-PB-NP]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-OVERFFMT", "name": "Avoid buffer overflow due to defining incorrect format limits", "shortDescription": { "text": "Avoid buffer overflow due to defining incorrect format limits" }, "fullDescription": { "text": "Avoid buffer overflow due to defining incorrect format limits [BD-PB-OVERFFMT]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer overflow due to defining incorrect format limits [BD-PB-OVERFFMT]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-OVERFNZT", "name": "Avoid overflow due to reading a not zero terminated string", "shortDescription": { "text": "Avoid overflow due to reading a not zero terminated string" }, "fullDescription": { "text": "Avoid overflow due to reading a not zero terminated string [BD-PB-OVERFNZT]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow due to reading a not zero terminated string [BD-PB-OVERFNZT]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-OVERFRD", "name": "Avoid overflow when reading from a buffer", "shortDescription": { "text": "Avoid overflow when reading from a buffer" }, "fullDescription": { "text": "Avoid overflow when reading from a buffer [BD-PB-OVERFRD]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when reading from a buffer [BD-PB-OVERFRD]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-OVERFWR", "name": "Avoid overflow when writing to a buffer", "shortDescription": { "text": "Avoid overflow when writing to a buffer" }, "fullDescription": { "text": "Avoid overflow when writing to a buffer [BD-PB-OVERFWR]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when writing to a buffer [BD-PB-OVERFWR]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-WRAPESC", "name": "Do not point to a wrapped object that has been freed", "shortDescription": { "text": "Do not point to a wrapped object that has been freed" }, "fullDescription": { "text": "Do not point to a wrapped object that has been freed [BD-PB-WRAPESC]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not point to a wrapped object that has been freed [BD-PB-WRAPESC]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-ZERO", "name": "Avoid division by zero", "shortDescription": { "text": "Avoid division by zero" }, "fullDescription": { "text": "Avoid division by zero [BD-PB-ZERO]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid division by zero [BD-PB-ZERO]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-ARRAY", "name": "Avoid accessing arrays out of bounds", "shortDescription": { "text": "Avoid accessing arrays out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays out of bounds [BD-PB-ARRAY]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays out of bounds [BD-PB-ARRAY]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-ARRPTR", "name": "A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type", "shortDescription": { "text": "A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" }, "fullDescription": { "text": "A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type [BD-PB-ARRPTR]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type [BD-PB-ARRPTR]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-BADSHIFT", "name": "Avoid incorrect shift operations", "shortDescription": { "text": "Avoid incorrect shift operations" }, "fullDescription": { "text": "Avoid incorrect shift operations [BD-PB-BADSHIFT]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid incorrect shift operations [BD-PB-BADSHIFT]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-BYTEORD", "name": "Use the correct byte ordering when transferring data between systems", "shortDescription": { "text": "Use the correct byte ordering when transferring data between systems" }, "fullDescription": { "text": "Use the correct byte ordering when transferring data between systems [BD-PB-BYTEORD]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use the correct byte ordering when transferring data between systems [BD-PB-BYTEORD]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-CC", "name": "Avoid conditions that always evaluate to the same value", "shortDescription": { "text": "Avoid conditions that always evaluate to the same value" }, "fullDescription": { "text": "Avoid conditions that always evaluate to the same value [BD-PB-CC]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid conditions that always evaluate to the same value [BD-PB-CC]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-CHECKRET", "name": "Consistently check the returned value of non-void functions", "shortDescription": { "text": "Consistently check the returned value of non-void functions" }, "fullDescription": { "text": "Consistently check the returned value of non-void functions [BD-PB-CHECKRET]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Consistently check the returned value of non-void functions [BD-PB-CHECKRET]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-CHECKRETGEN", "name": "Always check the returned value of non-void function", "shortDescription": { "text": "Always check the returned value of non-void function" }, "fullDescription": { "text": "Always check the returned value of non-void function [BD-PB-CHECKRETGEN]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Always check the returned value of non-void function [BD-PB-CHECKRETGEN]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-DNMPTR", "name": "Do not modify the alignment of objects by calling realloc()", "shortDescription": { "text": "Do not modify the alignment of objects by calling realloc()" }, "fullDescription": { "text": "Do not modify the alignment of objects by calling realloc() [BD-PB-DNMPTR]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not modify the alignment of objects by calling realloc() [BD-PB-DNMPTR]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-EOFCOMP", "name": "The macro EOF should be compared with the unmodified return value from the Standard Library function", "shortDescription": { "text": "The macro EOF should be compared with the unmodified return value from the Standard Library function" }, "fullDescription": { "text": "The macro EOF should be compared with the unmodified return value from the Standard Library function [BD-PB-EOFCOMP]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The macro EOF should be compared with the unmodified return value from the Standard Library function [BD-PB-EOFCOMP]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-ERRNO", "name": "Properly use errno value", "shortDescription": { "text": "Properly use errno value" }, "fullDescription": { "text": "Properly use errno value [BD-PB-ERRNO]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly use errno value [BD-PB-ERRNO]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-EXITHAN", "name": "Properly define exit handlers", "shortDescription": { "text": "Properly define exit handlers" }, "fullDescription": { "text": "Properly define exit handlers [BD-PB-EXITHAN]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly define exit handlers [BD-PB-EXITHAN]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-FGETS", "name": "Reset strings on fgets() or fgetws() failure", "shortDescription": { "text": "Reset strings on fgets() or fgetws() failure" }, "fullDescription": { "text": "Reset strings on fgets() or fgetws() failure [BD-PB-FGETS]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Reset strings on fgets() or fgetws() failure [BD-PB-FGETS]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-FSETPOS", "name": "Only use values for fsetpos() that are returned from fgetpos()", "shortDescription": { "text": "Only use values for fsetpos() that are returned from fgetpos()" }, "fullDescription": { "text": "Only use values for fsetpos() that are returned from fgetpos() [BD-PB-FSETPOS]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Only use values for fsetpos() that are returned from fgetpos() [BD-PB-FSETPOS]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-INFREC", "name": "Avoid infinite recursion", "shortDescription": { "text": "Avoid infinite recursion" }, "fullDescription": { "text": "Avoid infinite recursion [BD-PB-INFREC]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid infinite recursion [BD-PB-INFREC]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-INVENV", "name": "Do not rely on an environment pointer following an operation that may invalidate it", "shortDescription": { "text": "Do not rely on an environment pointer following an operation that may invalidate it" }, "fullDescription": { "text": "Do not rely on an environment pointer following an operation that may invalidate it [BD-PB-INVENV]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not rely on an environment pointer following an operation that may invalidate it [BD-PB-INVENV]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-INVRET", "name": "Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function", "shortDescription": { "text": "Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" }, "fullDescription": { "text": "Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function [BD-PB-INVRET]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function [BD-PB-INVRET]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-MCCSTR", "name": "The Standard Library function memcmp shall not be used to compare null terminated strings", "shortDescription": { "text": "The Standard Library function memcmp shall not be used to compare null terminated strings" }, "fullDescription": { "text": "The Standard Library function memcmp shall not be used to compare null terminated strings [BD-PB-MCCSTR]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The Standard Library function memcmp shall not be used to compare null terminated strings [BD-PB-MCCSTR]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-MEMOPT", "name": "Avoid calls to memory-setting functions that can be optimized out by the compiler", "shortDescription": { "text": "Avoid calls to memory-setting functions that can be optimized out by the compiler" }, "fullDescription": { "text": "Avoid calls to memory-setting functions that can be optimized out by the compiler [BD-PB-MEMOPT]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid calls to memory-setting functions that can be optimized out by the compiler [BD-PB-MEMOPT]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-NEWHAN", "name": "Properly define new handlers", "shortDescription": { "text": "Properly define new handlers" }, "fullDescription": { "text": "Properly define new handlers [BD-PB-NEWHAN]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly define new handlers [BD-PB-NEWHAN]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-NOEXCEPT", "name": "Avoid throwing exceptions from functions that are declared not to throw", "shortDescription": { "text": "Avoid throwing exceptions from functions that are declared not to throw" }, "fullDescription": { "text": "Avoid throwing exceptions from functions that are declared not to throw [BD-PB-NOEXCEPT]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid throwing exceptions from functions that are declared not to throw [BD-PB-NOEXCEPT]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-NORETDECL", "name": "Declare non-returning functions with the attribute that specifies that they do not return", "shortDescription": { "text": "Declare non-returning functions with the attribute that specifies that they do not return" }, "fullDescription": { "text": "Declare non-returning functions with the attribute that specifies that they do not return [BD-PB-NORETDECL]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Declare non-returning functions with the attribute that specifies that they do not return [BD-PB-NORETDECL]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-NORETURN", "name": "Never return from functions that should not return", "shortDescription": { "text": "Never return from functions that should not return" }, "fullDescription": { "text": "Never return from functions that should not return [BD-PB-NORETURN]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Never return from functions that should not return [BD-PB-NORETURN]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-OVERFARRAY", "name": "Avoid accessing arrays and pointers out of bounds", "shortDescription": { "text": "Avoid accessing arrays and pointers out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays and pointers out of bounds [BD-PB-OVERFARRAY]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays and pointers out of bounds [BD-PB-OVERFARRAY]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-OVERLAP", "name": "An object shall not be assigned or copied to an overlapping object", "shortDescription": { "text": "An object shall not be assigned or copied to an overlapping object" }, "fullDescription": { "text": "An object shall not be assigned or copied to an overlapping object [BD-PB-OVERLAP]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An object shall not be assigned or copied to an overlapping object [BD-PB-OVERLAP]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-POLARR", "name": "Do not treat arrays polymorphically", "shortDescription": { "text": "Do not treat arrays polymorphically" }, "fullDescription": { "text": "Do not treat arrays polymorphically [BD-PB-POLARR]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not treat arrays polymorphically [BD-PB-POLARR]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-PTRARR", "name": "A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array", "shortDescription": { "text": "A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" }, "fullDescription": { "text": "A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array [BD-PB-PTRARR]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array [BD-PB-PTRARR]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-PTRCMP", "name": "Do not compare two unrelated pointers", "shortDescription": { "text": "Do not compare two unrelated pointers" }, "fullDescription": { "text": "Do not compare two unrelated pointers [BD-PB-PTRCMP]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not compare two unrelated pointers [BD-PB-PTRCMP]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-PTRSUB", "name": "Do not subtract two pointers that do not address elements of the same array", "shortDescription": { "text": "Do not subtract two pointers that do not address elements of the same array" }, "fullDescription": { "text": "Do not subtract two pointers that do not address elements of the same array [BD-PB-PTRSUB]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not subtract two pointers that do not address elements of the same array [BD-PB-PTRSUB]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-PTRVALUE", "name": "Do not store an already-owned pointer value in an unrelated smart pointer", "shortDescription": { "text": "Do not store an already-owned pointer value in an unrelated smart pointer" }, "fullDescription": { "text": "Do not store an already-owned pointer value in an unrelated smart pointer [BD-PB-PTRVALUE]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not store an already-owned pointer value in an unrelated smart pointer [BD-PB-PTRVALUE]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-PUTENV", "name": "Do not call putenv() with a pointer to an automatic variable as the argument", "shortDescription": { "text": "Do not call putenv() with a pointer to an automatic variable as the argument" }, "fullDescription": { "text": "Do not call putenv() with a pointer to an automatic variable as the argument [BD-PB-PUTENV]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not call putenv() with a pointer to an automatic variable as the argument [BD-PB-PUTENV]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-SIGHAN", "name": "Properly define signal handlers", "shortDescription": { "text": "Properly define signal handlers" }, "fullDescription": { "text": "Properly define signal handlers [BD-PB-SIGHAN]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly define signal handlers [BD-PB-SIGHAN]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-SIGRETURN", "name": "Do not return from a computational exception signal handler", "shortDescription": { "text": "Do not return from a computational exception signal handler" }, "fullDescription": { "text": "Do not return from a computational exception signal handler [BD-PB-SIGRETURN]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not return from a computational exception signal handler [BD-PB-SIGRETURN]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-STREAMINOUT", "name": "Do not alternately input and output from a stream without an intervening flush or positioning call", "shortDescription": { "text": "Do not alternately input and output from a stream without an intervening flush or positioning call" }, "fullDescription": { "text": "Do not alternately input and output from a stream without an intervening flush or positioning call [BD-PB-STREAMINOUT]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not alternately input and output from a stream without an intervening flush or positioning call [BD-PB-STREAMINOUT]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-SUBSEQFRWD", "name": "Do not subsequently use the argument to std::forward", "shortDescription": { "text": "Do not subsequently use the argument to std::forward" }, "fullDescription": { "text": "Do not subsequently use the argument to std::forward [BD-PB-SUBSEQFRWD]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not subsequently use the argument to std::forward [BD-PB-SUBSEQFRWD]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-SUBSEQMOVE", "name": "Do not rely on the value of a moved-from object", "shortDescription": { "text": "Do not rely on the value of a moved-from object" }, "fullDescription": { "text": "Do not rely on the value of a moved-from object [BD-PB-SUBSEQMOVE]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not rely on the value of a moved-from object [BD-PB-SUBSEQMOVE]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-SWITCH", "name": "Avoid switch with unreachable branches", "shortDescription": { "text": "Avoid switch with unreachable branches" }, "fullDescription": { "text": "Avoid switch with unreachable branches [BD-PB-SWITCH]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid switch with unreachable branches [BD-PB-SWITCH]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-TERMHAN", "name": "Properly define terminate handlers", "shortDescription": { "text": "Properly define terminate handlers" }, "fullDescription": { "text": "Properly define terminate handlers [BD-PB-TERMHAN]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly define terminate handlers [BD-PB-TERMHAN]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-UNEXPHAN", "name": "Properly define unexpected handlers", "shortDescription": { "text": "Properly define unexpected handlers" }, "fullDescription": { "text": "Properly define unexpected handlers [BD-PB-UNEXPHAN]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly define unexpected handlers [BD-PB-UNEXPHAN]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-VCTOR", "name": "Do not use dynamic type of an object under construction", "shortDescription": { "text": "Do not use dynamic type of an object under construction" }, "fullDescription": { "text": "Do not use dynamic type of an object under construction [BD-PB-VCTOR]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use dynamic type of an object under construction [BD-PB-VCTOR]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-VDTOR", "name": "Do not use dynamic type of an object under destruction", "shortDescription": { "text": "Do not use dynamic type of an object under destruction" }, "fullDescription": { "text": "Do not use dynamic type of an object under destruction [BD-PB-VDTOR]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use dynamic type of an object under destruction [BD-PB-VDTOR]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-VLASIZE", "name": "Ensure the size of the variable length array is in valid range", "shortDescription": { "text": "Ensure the size of the variable length array is in valid range" }, "fullDescription": { "text": "Ensure the size of the variable length array is in valid range [BD-PB-VLASIZE]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure the size of the variable length array is in valid range [BD-PB-VLASIZE]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-WRRDSTR", "name": "The same file shall not be opened for read and write access at the same time on different streams", "shortDescription": { "text": "The same file shall not be opened for read and write access at the same time on different streams" }, "fullDescription": { "text": "The same file shall not be opened for read and write access at the same time on different streams [BD-PB-WRRDSTR]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The same file shall not be opened for read and write access at the same time on different streams [BD-PB-WRRDSTR]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-WRROS", "name": "Avoid writing to a stream which has been opened as read only", "shortDescription": { "text": "Avoid writing to a stream which has been opened as read only" }, "fullDescription": { "text": "Avoid writing to a stream which has been opened as read only [BD-PB-WRROS]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid writing to a stream which has been opened as read only [BD-PB-WRROS]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-NZTS", "name": "Ensure strings are zero terminated", "shortDescription": { "text": "Ensure strings are zero terminated" }, "fullDescription": { "text": "Ensure strings are zero terminated [BD-PB-NZTS]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Ensure strings are zero terminated [BD-PB-NZTS]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-PATHBUF", "name": "Ensure the output buffer is large enough when using path manipulation functions", "shortDescription": { "text": "Ensure the output buffer is large enough when using path manipulation functions" }, "fullDescription": { "text": "Ensure the output buffer is large enough when using path manipulation functions [BD-PB-PATHBUF]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Ensure the output buffer is large enough when using path manipulation functions [BD-PB-PATHBUF]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-REFPARAM", "name": "A parameter shall be passed by reference if it can't be NULL", "shortDescription": { "text": "A parameter shall be passed by reference if it can't be NULL" }, "fullDescription": { "text": "A parameter shall be passed by reference if it can't be NULL [BD-PB-REFPARAM]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A parameter shall be passed by reference if it can't be NULL [BD-PB-REFPARAM]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-STDEXC", "name": "Always throw the created std::exception object", "shortDescription": { "text": "Always throw the created std::exception object" }, "fullDescription": { "text": "Always throw the created std::exception object [BD-PB-STDEXC]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Always throw the created std::exception object [BD-PB-STDEXC]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-STREAMFLAGS", "name": "Suspicious setting of stream flags", "shortDescription": { "text": "Suspicious setting of stream flags" }, "fullDescription": { "text": "Suspicious setting of stream flags [BD-PB-STREAMFLAGS]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Suspicious setting of stream flags [BD-PB-STREAMFLAGS]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-STREAMFMT", "name": "Restore stream format", "shortDescription": { "text": "Restore stream format" }, "fullDescription": { "text": "Restore stream format [BD-PB-STREAMFMT]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Restore stream format [BD-PB-STREAMFMT]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-VARARGS", "name": "Use macros for variable arguments correctly", "shortDescription": { "text": "Use macros for variable arguments correctly" }, "fullDescription": { "text": "Use macros for variable arguments correctly [BD-PB-VARARGS]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use macros for variable arguments correctly [BD-PB-VARARGS]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-VOVR", "name": "Avoid unused values", "shortDescription": { "text": "Avoid unused values" }, "fullDescription": { "text": "Avoid unused values [BD-PB-VOVR]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid unused values [BD-PB-VOVR]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-UCMETH", "name": "Avoid unreachable methods", "shortDescription": { "text": "Avoid unreachable methods" }, "fullDescription": { "text": "Avoid unreachable methods [BD-PB-UCMETH]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid unreachable methods [BD-PB-UCMETH]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-VALRANGE", "name": "Guarantee that container indices are within the valid range", "shortDescription": { "text": "Guarantee that container indices are within the valid range" }, "fullDescription": { "text": "Guarantee that container indices are within the valid range [BD-PB-VALRANGE]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Guarantee that container indices are within the valid range [BD-PB-VALRANGE]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-RECFUN", "name": "Do not use recursion", "shortDescription": { "text": "Do not use recursion" }, "fullDescription": { "text": "Do not use recursion [BD-PB-RECFUN]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Do not use recursion [BD-PB-RECFUN]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-RES-BADDEALLOC", "name": "Properly deallocate dynamically allocated resources", "shortDescription": { "text": "Properly deallocate dynamically allocated resources" }, "fullDescription": { "text": "Properly deallocate dynamically allocated resources [BD-RES-BADDEALLOC]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly deallocate dynamically allocated resources [BD-RES-BADDEALLOC]" }, "properties": { "tags": [ "Flow Analysis", "Resources" ] } }, { "id": "BD-RES-BADFREEF", "name": "Ensure deallocation functions guarantee resource freeing", "shortDescription": { "text": "Ensure deallocation functions guarantee resource freeing" }, "fullDescription": { "text": "Ensure deallocation functions guarantee resource freeing [BD-RES-BADFREEF]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure deallocation functions guarantee resource freeing [BD-RES-BADFREEF]" }, "properties": { "tags": [ "Flow Analysis", "Resources" ] } }, { "id": "BD-RES-FREE", "name": "Do not use resources that have been freed", "shortDescription": { "text": "Do not use resources that have been freed" }, "fullDescription": { "text": "Do not use resources that have been freed [BD-RES-FREE]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use resources that have been freed [BD-RES-FREE]" }, "properties": { "tags": [ "Flow Analysis", "Resources" ] } }, { "id": "BD-RES-INSUFMEM", "name": "Allocate sufficient memory to hold an object of a given type", "shortDescription": { "text": "Allocate sufficient memory to hold an object of a given type" }, "fullDescription": { "text": "Allocate sufficient memory to hold an object of a given type [BD-RES-INSUFMEM]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Allocate sufficient memory to hold an object of a given type [BD-RES-INSUFMEM]" }, "properties": { "tags": [ "Flow Analysis", "Resources" ] } }, { "id": "BD-RES-INVFREE", "name": "Do not free resources using invalid pointers", "shortDescription": { "text": "Do not free resources using invalid pointers" }, "fullDescription": { "text": "Do not free resources using invalid pointers [BD-RES-INVFREE]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not free resources using invalid pointers [BD-RES-INVFREE]" }, "properties": { "tags": [ "Flow Analysis", "Resources" ] } }, { "id": "BD-RES-LEAKS", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [BD-RES-LEAKS]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure resources are freed [BD-RES-LEAKS]" }, "properties": { "tags": [ "Flow Analysis", "Resources" ] } }, { "id": "BD-RES-CSP", "name": "Avoid cyclic shared_ptr references", "shortDescription": { "text": "Avoid cyclic shared_ptr references" }, "fullDescription": { "text": "Avoid cyclic shared_ptr references [BD-RES-CSP]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid cyclic shared_ptr references [BD-RES-CSP]" }, "properties": { "tags": [ "Flow Analysis", "Resources" ] } }, { "id": "BD-RES-STACKLIM", "name": "Do not create variables on the stack above the defined limits", "shortDescription": { "text": "Do not create variables on the stack above the defined limits" }, "fullDescription": { "text": "Do not create variables on the stack above the defined limits [BD-RES-STACKLIM]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not create variables on the stack above the defined limits [BD-RES-STACKLIM]" }, "properties": { "tags": [ "Flow Analysis", "Resources" ] } }, { "id": "BD-SECURITY-ARRAY", "name": "Avoid tainted data in array indexes", "shortDescription": { "text": "Avoid tainted data in array indexes" }, "fullDescription": { "text": "Avoid tainted data in array indexes [BD-SECURITY-ARRAY]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid tainted data in array indexes [BD-SECURITY-ARRAY]" }, "properties": { "tags": [ "Flow Analysis", "Security" ], "security-severity": "9.5" } }, { "id": "BD-SECURITY-BUFWRITE", "name": "Prevent buffer overflows from tainted data", "shortDescription": { "text": "Prevent buffer overflows from tainted data" }, "fullDescription": { "text": "Prevent buffer overflows from tainted data [BD-SECURITY-BUFWRITE]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Prevent buffer overflows from tainted data [BD-SECURITY-BUFWRITE]" }, "properties": { "tags": [ "Flow Analysis", "Security" ], "security-severity": "9.5" } }, { "id": "BD-SECURITY-INTOVERF", "name": "Avoid unsafe use of a value obtained from arithmetic operations on tainted value", "shortDescription": { "text": "Avoid unsafe use of a value obtained from arithmetic operations on tainted value" }, "fullDescription": { "text": "Avoid unsafe use of a value obtained from arithmetic operations on tainted value [BD-SECURITY-INTOVERF]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid unsafe use of a value obtained from arithmetic operations on tainted value [BD-SECURITY-INTOVERF]" }, "properties": { "tags": [ "Flow Analysis", "Security" ], "security-severity": "9.5" } }, { "id": "BD-SECURITY-OVERFFMT", "name": "Avoid buffer overflow from tainted data due to defining incorrect format limits", "shortDescription": { "text": "Avoid buffer overflow from tainted data due to defining incorrect format limits" }, "fullDescription": { "text": "Avoid buffer overflow from tainted data due to defining incorrect format limits [BD-SECURITY-OVERFFMT]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer overflow from tainted data due to defining incorrect format limits [BD-SECURITY-OVERFFMT]" }, "properties": { "tags": [ "Flow Analysis", "Security" ], "security-severity": "9.5" } }, { "id": "BD-SECURITY-OVERFRD", "name": "Avoid buffer read overflow from tainted data", "shortDescription": { "text": "Avoid buffer read overflow from tainted data" }, "fullDescription": { "text": "Avoid buffer read overflow from tainted data [BD-SECURITY-OVERFRD]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer read overflow from tainted data [BD-SECURITY-OVERFRD]" }, "properties": { "tags": [ "Flow Analysis", "Security" ], "security-severity": "9.5" } }, { "id": "BD-SECURITY-OVERFWR", "name": "Avoid buffer write overflow from tainted data", "shortDescription": { "text": "Avoid buffer write overflow from tainted data" }, "fullDescription": { "text": "Avoid buffer write overflow from tainted data [BD-SECURITY-OVERFWR]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer write overflow from tainted data [BD-SECURITY-OVERFWR]" }, "properties": { "tags": [ "Flow Analysis", "Security" ], "security-severity": "9.5" } }, { "id": "BD-SECURITY-TDCMD", "name": "Protect against command injection", "shortDescription": { "text": "Protect against command injection" }, "fullDescription": { "text": "Protect against command injection [BD-SECURITY-TDCMD]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against command injection [BD-SECURITY-TDCMD]" }, "properties": { "tags": [ "Flow Analysis", "Security" ], "security-severity": "9.5" } }, { "id": "BD-SECURITY-TDCONSOLE", "name": "Avoid printing tainted data on the output console", "shortDescription": { "text": "Avoid printing tainted data on the output console" }, "fullDescription": { "text": "Avoid printing tainted data on the output console [BD-SECURITY-TDCONSOLE]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid printing tainted data on the output console [BD-SECURITY-TDCONSOLE]" }, "properties": { "tags": [ "Flow Analysis", "Security" ], "security-severity": "9.5" } }, { "id": "BD-SECURITY-TDENV", "name": "Protect against environment injection", "shortDescription": { "text": "Protect against environment injection" }, "fullDescription": { "text": "Protect against environment injection [BD-SECURITY-TDENV]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against environment injection [BD-SECURITY-TDENV]" }, "properties": { "tags": [ "Flow Analysis", "Security" ], "security-severity": "9.5" } }, { "id": "BD-SECURITY-TDFNAMES", "name": "Protect against file name injection", "shortDescription": { "text": "Protect against file name injection" }, "fullDescription": { "text": "Protect against file name injection [BD-SECURITY-TDFNAMES]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against file name injection [BD-SECURITY-TDFNAMES]" }, "properties": { "tags": [ "Flow Analysis", "Security" ], "security-severity": "9.5" } }, { "id": "BD-SECURITY-TDINPUT", "name": "Exclude unsanitized user input from format strings", "shortDescription": { "text": "Exclude unsanitized user input from format strings" }, "fullDescription": { "text": "Exclude unsanitized user input from format strings [BD-SECURITY-TDINPUT]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Exclude unsanitized user input from format strings [BD-SECURITY-TDINPUT]" }, "properties": { "tags": [ "Flow Analysis", "Security" ], "security-severity": "9.5" } }, { "id": "BD-SECURITY-TDLOOP", "name": "Validate potentially tainted data before it is used in the controlling expression of a loop", "shortDescription": { "text": "Validate potentially tainted data before it is used in the controlling expression of a loop" }, "fullDescription": { "text": "Validate potentially tainted data before it is used in the controlling expression of a loop [BD-SECURITY-TDLOOP]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Validate potentially tainted data before it is used in the controlling expression of a loop [BD-SECURITY-TDLOOP]" }, "properties": { "tags": [ "Flow Analysis", "Security" ], "security-severity": "9.5" } }, { "id": "BD-SECURITY-TDSQL", "name": "Protect against SQL injection", "shortDescription": { "text": "Protect against SQL injection" }, "fullDescription": { "text": "Protect against SQL injection [BD-SECURITY-TDSQL]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against SQL injection [BD-SECURITY-TDSQL]" }, "properties": { "tags": [ "Flow Analysis", "Security" ], "security-severity": "9.5" } }, { "id": "BD-SECURITY-LOG", "name": "Avoid passing unvalidated binary data to log methods", "shortDescription": { "text": "Avoid passing unvalidated binary data to log methods" }, "fullDescription": { "text": "Avoid passing unvalidated binary data to log methods [BD-SECURITY-LOG]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid passing unvalidated binary data to log methods [BD-SECURITY-LOG]" }, "properties": { "tags": [ "Flow Analysis", "Security" ], "security-severity": "8" } }, { "id": "BD-SECURITY-RAND", "name": "Properly seed pseudorandom number generators", "shortDescription": { "text": "Properly seed pseudorandom number generators" }, "fullDescription": { "text": "Properly seed pseudorandom number generators [BD-SECURITY-RAND]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly seed pseudorandom number generators [BD-SECURITY-RAND]" }, "properties": { "tags": [ "Flow Analysis", "Security" ], "security-severity": "8" } }, { "id": "BD-SECURITY-SENSFREE", "name": "Sensitive data should be cleared before being deallocated", "shortDescription": { "text": "Sensitive data should be cleared before being deallocated" }, "fullDescription": { "text": "Sensitive data should be cleared before being deallocated [BD-SECURITY-SENSFREE]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Sensitive data should be cleared before being deallocated [BD-SECURITY-SENSFREE]" }, "properties": { "tags": [ "Flow Analysis", "Security" ], "security-severity": "8" } }, { "id": "BD-SECURITY-SENSLOG", "name": "Avoid passing sensitive data to functions that write to log files", "shortDescription": { "text": "Avoid passing sensitive data to functions that write to log files" }, "fullDescription": { "text": "Avoid passing sensitive data to functions that write to log files [BD-SECURITY-SENSLOG]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid passing sensitive data to functions that write to log files [BD-SECURITY-SENSLOG]" }, "properties": { "tags": [ "Flow Analysis", "Security" ], "security-severity": "8" } }, { "id": "BD-SECURITY-TDALLOC", "name": "Validate potentially tainted data before it is used to determine the size of memory allocation", "shortDescription": { "text": "Validate potentially tainted data before it is used to determine the size of memory allocation" }, "fullDescription": { "text": "Validate potentially tainted data before it is used to determine the size of memory allocation [BD-SECURITY-TDALLOC]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Validate potentially tainted data before it is used to determine the size of memory allocation [BD-SECURITY-TDALLOC]" }, "properties": { "tags": [ "Flow Analysis", "Security" ], "security-severity": "8" } }, { "id": "BD-SECURITY-XXEXRC", "name": "Disable resolving XML external entities (XXE) in libxerces-c", "shortDescription": { "text": "Disable resolving XML external entities (XXE) in libxerces-c" }, "fullDescription": { "text": "Disable resolving XML external entities (XXE) in libxerces-c [BD-SECURITY-XXEXRC]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Disable resolving XML external entities (XXE) in libxerces-c [BD-SECURITY-XXEXRC]" }, "properties": { "tags": [ "Flow Analysis", "Security" ], "security-severity": "8" } }, { "id": "BD-CO-ITOUT", "name": "Do not access iterator out of range", "shortDescription": { "text": "Do not access iterator out of range" }, "fullDescription": { "text": "Do not access iterator out of range [BD-CO-ITOUT]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not access iterator out of range [BD-CO-ITOUT]" }, "properties": { "tags": [ "Flow Analysis", "Containers" ] } }, { "id": "BD-CO-STRMOD", "name": "Use valid references, pointers, and iterators to reference elements of a basic_string", "shortDescription": { "text": "Use valid references, pointers, and iterators to reference elements of a basic_string" }, "fullDescription": { "text": "Use valid references, pointers, and iterators to reference elements of a basic_string [BD-CO-STRMOD]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use valid references, pointers, and iterators to reference elements of a basic_string [BD-CO-STRMOD]" }, "properties": { "tags": [ "Flow Analysis", "Containers" ] } }, { "id": "BD-CO-EMPCON", "name": "Do not pass empty container iterators to std algorithms as destinations", "shortDescription": { "text": "Do not pass empty container iterators to std algorithms as destinations" }, "fullDescription": { "text": "Do not pass empty container iterators to std algorithms as destinations [BD-CO-EMPCON]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not pass empty container iterators to std algorithms as destinations [BD-CO-EMPCON]" }, "properties": { "tags": [ "Flow Analysis", "Containers" ] } }, { "id": "BD-CO-ITINVCOMP", "name": "Do not compare iterators from different containers", "shortDescription": { "text": "Do not compare iterators from different containers" }, "fullDescription": { "text": "Do not compare iterators from different containers [BD-CO-ITINVCOMP]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not compare iterators from different containers [BD-CO-ITINVCOMP]" }, "properties": { "tags": [ "Flow Analysis", "Containers" ] } }, { "id": "BD-CO-ITMOD", "name": "Do not modify container while iterating over it", "shortDescription": { "text": "Do not modify container while iterating over it" }, "fullDescription": { "text": "Do not modify container while iterating over it [BD-CO-ITMOD]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not modify container while iterating over it [BD-CO-ITMOD]" }, "properties": { "tags": [ "Flow Analysis", "Containers" ] } }, { "id": "BD-TRS-DLOCK", "name": "Avoid double locking", "shortDescription": { "text": "Avoid double locking" }, "fullDescription": { "text": "Avoid double locking [BD-TRS-DLOCK]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid double locking [BD-TRS-DLOCK]" }, "properties": { "tags": [ "Flow Analysis", "Threads & Synchronization" ] } }, { "id": "BD-TRS-FORKFILE", "name": "Avoid race conditions when using fork and file descriptors", "shortDescription": { "text": "Avoid race conditions when using fork and file descriptors" }, "fullDescription": { "text": "Avoid race conditions when using fork and file descriptors [BD-TRS-FORKFILE]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid race conditions when using fork and file descriptors [BD-TRS-FORKFILE]" }, "properties": { "tags": [ "Flow Analysis", "Threads & Synchronization" ] } }, { "id": "BD-TRS-LOCK", "name": "Do not abandon unreleased locks", "shortDescription": { "text": "Do not abandon unreleased locks" }, "fullDescription": { "text": "Do not abandon unreleased locks [BD-TRS-LOCK]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not abandon unreleased locks [BD-TRS-LOCK]" }, "properties": { "tags": [ "Flow Analysis", "Threads & Synchronization" ] } }, { "id": "BD-TRS-MLOCK", "name": "Do not use global variable with different locks set", "shortDescription": { "text": "Do not use global variable with different locks set" }, "fullDescription": { "text": "Do not use global variable with different locks set [BD-TRS-MLOCK]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use global variable with different locks set [BD-TRS-MLOCK]" }, "properties": { "tags": [ "Flow Analysis", "Threads & Synchronization" ] } }, { "id": "BD-TRS-ORDER", "name": "Do not acquire locks in different order", "shortDescription": { "text": "Do not acquire locks in different order" }, "fullDescription": { "text": "Do not acquire locks in different order [BD-TRS-ORDER]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not acquire locks in different order [BD-TRS-ORDER]" }, "properties": { "tags": [ "Flow Analysis", "Threads & Synchronization" ] } }, { "id": "BD-TRS-SYMLINK", "name": "Avoid race conditions while checking for the existence of a symbolic link", "shortDescription": { "text": "Avoid race conditions while checking for the existence of a symbolic link" }, "fullDescription": { "text": "Avoid race conditions while checking for the existence of a symbolic link [BD-TRS-SYMLINK]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid race conditions while checking for the existence of a symbolic link [BD-TRS-SYMLINK]" }, "properties": { "tags": [ "Flow Analysis", "Threads & Synchronization" ] } }, { "id": "BD-TRS-TSHL", "name": "Do not use blocking functions while holding a lock", "shortDescription": { "text": "Do not use blocking functions while holding a lock" }, "fullDescription": { "text": "Do not use blocking functions while holding a lock [BD-TRS-TSHL]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use blocking functions while holding a lock [BD-TRS-TSHL]" }, "properties": { "tags": [ "Flow Analysis", "Threads & Synchronization" ] } }, { "id": "BD-TRS-ARG", "name": "Declare objects shared between POSIX threads with appropriate storage durations", "shortDescription": { "text": "Declare objects shared between POSIX threads with appropriate storage durations" }, "fullDescription": { "text": "Declare objects shared between POSIX threads with appropriate storage durations [BD-TRS-ARG]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Declare objects shared between POSIX threads with appropriate storage durations [BD-TRS-ARG]" }, "properties": { "tags": [ "Flow Analysis", "Threads & Synchronization" ] } }, { "id": "BD-TRS-CMF", "name": "Make const member functions thread-safe", "shortDescription": { "text": "Make const member functions thread-safe" }, "fullDescription": { "text": "Make const member functions thread-safe [BD-TRS-CMF]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Make const member functions thread-safe [BD-TRS-CMF]" }, "properties": { "tags": [ "Flow Analysis", "Threads & Synchronization" ] } }, { "id": "BD-TRS-DIFCS", "name": "Variable should be used in context of single critical section", "shortDescription": { "text": "Variable should be used in context of single critical section" }, "fullDescription": { "text": "Variable should be used in context of single critical section [BD-TRS-DIFCS]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Variable should be used in context of single critical section [BD-TRS-DIFCS]" }, "properties": { "tags": [ "Flow Analysis", "Threads & Synchronization" ] } }, { "id": "BD-TRS-FRC", "name": "Avoid race conditions while accessing files", "shortDescription": { "text": "Avoid race conditions while accessing files" }, "fullDescription": { "text": "Avoid race conditions while accessing files [BD-TRS-FRC]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid race conditions while accessing files [BD-TRS-FRC]" }, "properties": { "tags": [ "Flow Analysis", "Threads & Synchronization" ] } }, { "id": "BD-TRS-JOINDETACH", "name": "Do not join or detach a thread that was previously joined or detached", "shortDescription": { "text": "Do not join or detach a thread that was previously joined or detached" }, "fullDescription": { "text": "Do not join or detach a thread that was previously joined or detached [BD-TRS-JOINDETACH]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not join or detach a thread that was previously joined or detached [BD-TRS-JOINDETACH]" }, "properties": { "tags": [ "Flow Analysis", "Threads & Synchronization" ] } }, { "id": "BD-TRS-BITLOCK", "name": "Use locks to prevent race conditions when modifying bit fields", "shortDescription": { "text": "Use locks to prevent race conditions when modifying bit fields" }, "fullDescription": { "text": "Use locks to prevent race conditions when modifying bit fields [BD-TRS-BITLOCK]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use locks to prevent race conditions when modifying bit fields [BD-TRS-BITLOCK]" }, "properties": { "tags": [ "Flow Analysis", "Threads & Synchronization" ] } }, { "id": "BD-TRS-DSTRLOCK", "name": "Do not destroy another thread's mutex", "shortDescription": { "text": "Do not destroy another thread's mutex" }, "fullDescription": { "text": "Do not destroy another thread's mutex [BD-TRS-DSTRLOCK]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not destroy another thread's mutex [BD-TRS-DSTRLOCK]" }, "properties": { "tags": [ "Flow Analysis", "Threads & Synchronization" ] } }, { "id": "BD-TRS-REVLOCK", "name": "Do not release a lock that has not been acquired", "shortDescription": { "text": "Do not release a lock that has not been acquired" }, "fullDescription": { "text": "Do not release a lock that has not been acquired [BD-TRS-REVLOCK]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not release a lock that has not been acquired [BD-TRS-REVLOCK]" }, "properties": { "tags": [ "Flow Analysis", "Threads & Synchronization" ] } }, { "id": "CDD-DUPM", "name": "Avoid function duplication", "shortDescription": { "text": "Avoid function duplication" }, "fullDescription": { "text": "Avoid function duplication [CDD-DUPM]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid function duplication [CDD-DUPM]" }, "properties": { "tags": [ "Code Duplication Detection" ] } }, { "id": "CDD-DUPC", "name": "Avoid code duplication", "shortDescription": { "text": "Avoid code duplication" }, "fullDescription": { "text": "Avoid code duplication [CDD-DUPC]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid code duplication [CDD-DUPC]" }, "properties": { "tags": [ "Code Duplication Detection" ] } }, { "id": "CDD-DUPI", "name": "Avoid duplication of #include directives", "shortDescription": { "text": "Avoid duplication of #include directives" }, "fullDescription": { "text": "Avoid duplication of #include directives [CDD-DUPI]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid duplication of #include directives [CDD-DUPI]" }, "properties": { "tags": [ "Code Duplication Detection" ] } }, { "id": "CDD-DUPS", "name": "Avoid string literal duplication", "shortDescription": { "text": "Avoid string literal duplication" }, "fullDescription": { "text": "Avoid string literal duplication [CDD-DUPS]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid string literal duplication [CDD-DUPS]" }, "properties": { "tags": [ "Code Duplication Detection" ] } }, { "id": "CERT_C-MSC12-a", "name": "There shall be no unreachable code in \"else\" block", "shortDescription": { "text": "There shall be no unreachable code in \"else\" block" }, "fullDescription": { "text": "There shall be no unreachable code in \"else\" block [CERT_C-MSC12-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code in \"else\" block [CERT_C-MSC12-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC12_C (REC) Detect and remove code that has no effect or is never executed" ] } }, { "id": "CERT_C-MSC12-b", "name": "There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute", "shortDescription": { "text": "There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute" }, "fullDescription": { "text": "There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute [CERT_C-MSC12-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute [CERT_C-MSC12-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC12_C (REC) Detect and remove code that has no effect or is never executed" ] } }, { "id": "CERT_C-MSC12-c", "name": "There shall be no unreachable code in \"if\/else\/while\/for\" block", "shortDescription": { "text": "There shall be no unreachable code in \"if\/else\/while\/for\" block" }, "fullDescription": { "text": "There shall be no unreachable code in \"if\/else\/while\/for\" block [CERT_C-MSC12-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code in \"if\/else\/while\/for\" block [CERT_C-MSC12-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC12_C (REC) Detect and remove code that has no effect or is never executed" ] } }, { "id": "CERT_C-MSC12-d", "name": "There shall be no unreachable code in switch statement", "shortDescription": { "text": "There shall be no unreachable code in switch statement" }, "fullDescription": { "text": "There shall be no unreachable code in switch statement [CERT_C-MSC12-d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code in switch statement [CERT_C-MSC12-d]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC12_C (REC) Detect and remove code that has no effect or is never executed" ] } }, { "id": "CERT_C-MSC12-e", "name": "There shall be no unreachable code in 'for' loop", "shortDescription": { "text": "There shall be no unreachable code in 'for' loop" }, "fullDescription": { "text": "There shall be no unreachable code in 'for' loop [CERT_C-MSC12-e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code in 'for' loop [CERT_C-MSC12-e]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC12_C (REC) Detect and remove code that has no effect or is never executed" ] } }, { "id": "CERT_C-MSC12-f", "name": "There shall be no unreachable code after 'if' or 'switch' statement", "shortDescription": { "text": "There shall be no unreachable code after 'if' or 'switch' statement" }, "fullDescription": { "text": "There shall be no unreachable code after 'if' or 'switch' statement [CERT_C-MSC12-f]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code after 'if' or 'switch' statement [CERT_C-MSC12-f]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC12_C (REC) Detect and remove code that has no effect or is never executed" ] } }, { "id": "CERT_C-MSC12-g", "name": "There shall be no unreachable code after \"if\" or \"switch\" statement inside while\/for\/do...while loop", "shortDescription": { "text": "There shall be no unreachable code after \"if\" or \"switch\" statement inside while\/for\/do...while loop" }, "fullDescription": { "text": "There shall be no unreachable code after \"if\" or \"switch\" statement inside while\/for\/do...while loop [CERT_C-MSC12-g]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code after \"if\" or \"switch\" statement inside while\/for\/do...while loop [CERT_C-MSC12-g]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC12_C (REC) Detect and remove code that has no effect or is never executed" ] } }, { "id": "CERT_C-MSC12-h", "name": "Avoid switch with unreachable branches", "shortDescription": { "text": "Avoid switch with unreachable branches" }, "fullDescription": { "text": "Avoid switch with unreachable branches [CERT_C-MSC12-h]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid switch with unreachable branches [CERT_C-MSC12-h]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC12_C (REC) Detect and remove code that has no effect or is never executed" ] } }, { "id": "CERT_C-MSC11-a", "name": "Assert liberally to document internal assumptions and invariants", "shortDescription": { "text": "Assert liberally to document internal assumptions and invariants" }, "fullDescription": { "text": "Assert liberally to document internal assumptions and invariants [CERT_C-MSC11-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Assert liberally to document internal assumptions and invariants [CERT_C-MSC11-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC11_C (REC) Incorporate diagnostic tests using assertions" ] } }, { "id": "CERT_C-MSC14-a", "name": "Evaluation of constant unsigned integer expressions should not lead to wrap-around", "shortDescription": { "text": "Evaluation of constant unsigned integer expressions should not lead to wrap-around" }, "fullDescription": { "text": "Evaluation of constant unsigned integer expressions should not lead to wrap-around [CERT_C-MSC14-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Evaluation of constant unsigned integer expressions should not lead to wrap-around [CERT_C-MSC14-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC14_C (REC) Do not introduce unnecessary platform dependencies" ] } }, { "id": "CERT_C-MSC13-a", "name": "Avoid unnecessary local variables", "shortDescription": { "text": "Avoid unnecessary local variables" }, "fullDescription": { "text": "Avoid unnecessary local variables [CERT_C-MSC13-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid unnecessary local variables [CERT_C-MSC13-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC13_C (REC) Detect and remove unused values" ] } }, { "id": "CERT_C-MSC15-a", "name": "Evaluation of constant unsigned integer expressions should not lead to wrap-around", "shortDescription": { "text": "Evaluation of constant unsigned integer expressions should not lead to wrap-around" }, "fullDescription": { "text": "Evaluation of constant unsigned integer expressions should not lead to wrap-around [CERT_C-MSC15-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Evaluation of constant unsigned integer expressions should not lead to wrap-around [CERT_C-MSC15-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC15_C (REC) Do not depend on undefined behavior" ] } }, { "id": "CERT_C-WIN00-a", "name": "Use care to ensure that LoadLibrary() will load the correct library", "shortDescription": { "text": "Use care to ensure that LoadLibrary() will load the correct library" }, "fullDescription": { "text": "Use care to ensure that LoadLibrary() will load the correct library [CERT_C-WIN00-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use care to ensure that LoadLibrary() will load the correct library [CERT_C-WIN00-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-WIN00_C (REC) Be specific when dynamically loading libraries" ] } }, { "id": "CERT_C-FLP03-a", "name": "Avoid division by zero", "shortDescription": { "text": "Avoid division by zero" }, "fullDescription": { "text": "Avoid division by zero [CERT_C-FLP03-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid division by zero [CERT_C-FLP03-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FLP03_C (REC) Detect and handle floating-point errors" ] } }, { "id": "CERT_C-FLP03-b", "name": "Avoid implicit conversions from wider to narrower floating type", "shortDescription": { "text": "Avoid implicit conversions from wider to narrower floating type" }, "fullDescription": { "text": "Avoid implicit conversions from wider to narrower floating type [CERT_C-FLP03-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid implicit conversions from wider to narrower floating type [CERT_C-FLP03-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FLP03_C (REC) Detect and handle floating-point errors" ] } }, { "id": "CERT_C-FLP03-c", "name": "Avoid implicit conversions from narrower to wider floating type", "shortDescription": { "text": "Avoid implicit conversions from narrower to wider floating type" }, "fullDescription": { "text": "Avoid implicit conversions from narrower to wider floating type [CERT_C-FLP03-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid implicit conversions from narrower to wider floating type [CERT_C-FLP03-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FLP03_C (REC) Detect and handle floating-point errors" ] } }, { "id": "CERT_C-FLP03-d", "name": "Avoid implicit conversions of floating point numbers from wider to narrower floating type", "shortDescription": { "text": "Avoid implicit conversions of floating point numbers from wider to narrower floating type" }, "fullDescription": { "text": "Avoid implicit conversions of floating point numbers from wider to narrower floating type [CERT_C-FLP03-d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid implicit conversions of floating point numbers from wider to narrower floating type [CERT_C-FLP03-d]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FLP03_C (REC) Detect and handle floating-point errors" ] } }, { "id": "CERT_C-MSC17-a", "name": "Missing break statement between cases in a switch statement", "shortDescription": { "text": "Missing break statement between cases in a switch statement" }, "fullDescription": { "text": "Missing break statement between cases in a switch statement [CERT_C-MSC17-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Missing break statement between cases in a switch statement [CERT_C-MSC17-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC17_C (REC) Finish every set of statements associated with a case label with a break statement" ] } }, { "id": "CERT_C-FLP02-a", "name": "Floating-point expressions shall not be tested for equality or inequality", "shortDescription": { "text": "Floating-point expressions shall not be tested for equality or inequality" }, "fullDescription": { "text": "Floating-point expressions shall not be tested for equality or inequality [CERT_C-FLP02-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Floating-point expressions shall not be tested for equality or inequality [CERT_C-FLP02-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FLP02_C (REC) Avoid using floating-point numbers when precise computation is needed" ] } }, { "id": "CERT_C-MSC19-a", "name": "Avoid accessing arrays out of bounds", "shortDescription": { "text": "Avoid accessing arrays out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays out of bounds [CERT_C-MSC19-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid accessing arrays out of bounds [CERT_C-MSC19-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC19_C (REC) For functions that return an array, prefer returning an empty array over a null value" ] } }, { "id": "CERT_C-MSC19-b", "name": "Avoid null pointer dereferencing", "shortDescription": { "text": "Avoid null pointer dereferencing" }, "fullDescription": { "text": "Avoid null pointer dereferencing [CERT_C-MSC19-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid null pointer dereferencing [CERT_C-MSC19-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC19_C (REC) For functions that return an array, prefer returning an empty array over a null value" ] } }, { "id": "CERT_C-FLP06-a", "name": "Implicit conversions from integral to floating type which may result in a loss of information shall not be used", "shortDescription": { "text": "Implicit conversions from integral to floating type which may result in a loss of information shall not be used" }, "fullDescription": { "text": "Implicit conversions from integral to floating type which may result in a loss of information shall not be used [CERT_C-FLP06-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Implicit conversions from integral to floating type which may result in a loss of information shall not be used [CERT_C-FLP06-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FLP06_C (REC) Convert integers to floating point for floating-point operations" ] } }, { "id": "CERT_C-FLP06-b", "name": "Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used", "shortDescription": { "text": "Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" }, "fullDescription": { "text": "Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used [CERT_C-FLP06-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used [CERT_C-FLP06-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FLP06_C (REC) Convert integers to floating point for floating-point operations" ] } }, { "id": "CERT_C-INT02-a", "name": "Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used", "shortDescription": { "text": "Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" }, "fullDescription": { "text": "Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used [CERT_C-INT02-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used [CERT_C-INT02-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT02_C (REC) Understand integer conversion rules" ] } }, { "id": "CERT_C-INT02-b", "name": "Avoid mixing arithmetic of different precisions in the same expression", "shortDescription": { "text": "Avoid mixing arithmetic of different precisions in the same expression" }, "fullDescription": { "text": "Avoid mixing arithmetic of different precisions in the same expression [CERT_C-INT02-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid mixing arithmetic of different precisions in the same expression [CERT_C-INT02-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT02_C (REC) Understand integer conversion rules" ] } }, { "id": "CERT_C-FLP00-a", "name": "Floating-point expressions shall not be tested for equality or inequality", "shortDescription": { "text": "Floating-point expressions shall not be tested for equality or inequality" }, "fullDescription": { "text": "Floating-point expressions shall not be tested for equality or inequality [CERT_C-FLP00-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Floating-point expressions shall not be tested for equality or inequality [CERT_C-FLP00-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FLP00_C (REC) Understand the limitations of floating-point numbers" ] } }, { "id": "CERT_C-API01-a", "name": "Avoid overflow when writing to a buffer", "shortDescription": { "text": "Avoid overflow when writing to a buffer" }, "fullDescription": { "text": "Avoid overflow when writing to a buffer [CERT_C-API01-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid overflow when writing to a buffer [CERT_C-API01-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-API01_C (REC) Avoid laying out strings in memory directly before sensitive data" ] } }, { "id": "CERT_C-API01-b", "name": "Avoid using unsafe string functions which may cause buffer overflows", "shortDescription": { "text": "Avoid using unsafe string functions which may cause buffer overflows" }, "fullDescription": { "text": "Avoid using unsafe string functions which may cause buffer overflows [CERT_C-API01-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid using unsafe string functions which may cause buffer overflows [CERT_C-API01-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-API01_C (REC) Avoid laying out strings in memory directly before sensitive data" ] } }, { "id": "CERT_C-API02-a", "name": "Avoid using unsafe string functions which may cause buffer overflows", "shortDescription": { "text": "Avoid using unsafe string functions which may cause buffer overflows" }, "fullDescription": { "text": "Avoid using unsafe string functions which may cause buffer overflows [CERT_C-API02-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using unsafe string functions which may cause buffer overflows [CERT_C-API02-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-API02_C (REC) Functions that read or write to or from an array should take an argument to specify the source or target size" ] } }, { "id": "CERT_C-API02-b", "name": "Don't use unsafe C functions that do write to range-unchecked buffers", "shortDescription": { "text": "Don't use unsafe C functions that do write to range-unchecked buffers" }, "fullDescription": { "text": "Don't use unsafe C functions that do write to range-unchecked buffers [CERT_C-API02-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't use unsafe C functions that do write to range-unchecked buffers [CERT_C-API02-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-API02_C (REC) Functions that read or write to or from an array should take an argument to specify the source or target size" ] } }, { "id": "CERT_C-INT08-a", "name": "Avoid data loss when converting between integer types", "shortDescription": { "text": "Avoid data loss when converting between integer types" }, "fullDescription": { "text": "Avoid data loss when converting between integer types [CERT_C-INT08-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid data loss when converting between integer types [CERT_C-INT08-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT08_C (REC) Verify that all integer values are in range" ] } }, { "id": "CERT_C-INT09-a", "name": "In an enumerator list, the \"=\" construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised", "shortDescription": { "text": "In an enumerator list, the \"=\" construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised" }, "fullDescription": { "text": "In an enumerator list, the \"=\" construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised [CERT_C-INT09-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "In an enumerator list, the \"=\" construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised [CERT_C-INT09-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT09_C (REC) Ensure enumeration constants map to unique values" ] } }, { "id": "CERT_C-INT07-a", "name": "The plain char type shall be used only for the storage and use of character values", "shortDescription": { "text": "The plain char type shall be used only for the storage and use of character values" }, "fullDescription": { "text": "The plain char type shall be used only for the storage and use of character values [CERT_C-INT07-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The plain char type shall be used only for the storage and use of character values [CERT_C-INT07-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT07_C (REC) Use only explicitly signed or unsigned char type for numeric values" ] } }, { "id": "CERT_C-INT07-b", "name": "signed and unsigned char type shall be used only for the storage and use of numeric values", "shortDescription": { "text": "signed and unsigned char type shall be used only for the storage and use of numeric values" }, "fullDescription": { "text": "signed and unsigned char type shall be used only for the storage and use of numeric values [CERT_C-INT07-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "signed and unsigned char type shall be used only for the storage and use of numeric values [CERT_C-INT07-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT07_C (REC) Use only explicitly signed or unsigned char type for numeric values" ] } }, { "id": "CERT_C-INT04-a", "name": "Avoid potential integer overflow\/underflow on tainted data", "shortDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data" }, "fullDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data [CERT_C-INT04-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid potential integer overflow\/underflow on tainted data [CERT_C-INT04-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT04_C (REC) Enforce limits on integer values originating from tainted sources" ] } }, { "id": "CERT_C-INT04-b", "name": "Avoid buffer read overflow from tainted data", "shortDescription": { "text": "Avoid buffer read overflow from tainted data" }, "fullDescription": { "text": "Avoid buffer read overflow from tainted data [CERT_C-INT04-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer read overflow from tainted data [CERT_C-INT04-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT04_C (REC) Enforce limits on integer values originating from tainted sources" ] } }, { "id": "CERT_C-INT04-c", "name": "Avoid buffer write overflow from tainted data", "shortDescription": { "text": "Avoid buffer write overflow from tainted data" }, "fullDescription": { "text": "Avoid buffer write overflow from tainted data [CERT_C-INT04-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer write overflow from tainted data [CERT_C-INT04-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT04_C (REC) Enforce limits on integer values originating from tainted sources" ] } }, { "id": "CERT_C-INT05-a", "name": "Avoid using unsafe string functions that do not check bounds", "shortDescription": { "text": "Avoid using unsafe string functions that do not check bounds" }, "fullDescription": { "text": "Avoid using unsafe string functions that do not check bounds [CERT_C-INT05-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid using unsafe string functions that do not check bounds [CERT_C-INT05-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT05_C (REC) Do not use input functions to convert character data if they cannot handle all possible inputs" ] } }, { "id": "CERT_C-ENV30-a", "name": "The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type", "shortDescription": { "text": "The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" }, "fullDescription": { "text": "The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type [CERT_C-ENV30-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type [CERT_C-ENV30-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ENV30_C (RULE) Do not modify the object referenced by the return value of certain functions" ] } }, { "id": "CERT_C-MSC22-a", "name": "The facilities provided by <setjmp.h> should not be used", "shortDescription": { "text": "The facilities provided by <setjmp.h> should not be used" }, "fullDescription": { "text": "The facilities provided by <setjmp.h> should not be used [CERT_C-MSC22-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The facilities provided by <setjmp.h> should not be used [CERT_C-MSC22-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC22_C (REC) Use the setjmp(), longjmp() facility securely" ] } }, { "id": "CERT_C-MSC24-a", "name": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used", "shortDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" }, "fullDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [CERT_C-MSC24-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [CERT_C-MSC24-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC24_C (REC) Do not use deprecated or obsolescent functions" ] } }, { "id": "CERT_C-MSC24-b", "name": "The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used", "shortDescription": { "text": "The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" }, "fullDescription": { "text": "The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [CERT_C-MSC24-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [CERT_C-MSC24-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC24_C (REC) Do not use deprecated or obsolescent functions" ] } }, { "id": "CERT_C-MSC24-c", "name": "Avoid using unsafe string functions which may cause buffer overflows", "shortDescription": { "text": "Avoid using unsafe string functions which may cause buffer overflows" }, "fullDescription": { "text": "Avoid using unsafe string functions which may cause buffer overflows [CERT_C-MSC24-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid using unsafe string functions which may cause buffer overflows [CERT_C-MSC24-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC24_C (REC) Do not use deprecated or obsolescent functions" ] } }, { "id": "CERT_C-MSC24-d", "name": "Don't use unsafe C functions that do write to range-unchecked buffers", "shortDescription": { "text": "Don't use unsafe C functions that do write to range-unchecked buffers" }, "fullDescription": { "text": "Don't use unsafe C functions that do write to range-unchecked buffers [CERT_C-MSC24-d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Don't use unsafe C functions that do write to range-unchecked buffers [CERT_C-MSC24-d]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC24_C (REC) Do not use deprecated or obsolescent functions" ] } }, { "id": "CERT_C-INT13-a", "name": "Operands of bitwise and complement operators shall have an unsigned type", "shortDescription": { "text": "Operands of bitwise and complement operators shall have an unsigned type" }, "fullDescription": { "text": "Operands of bitwise and complement operators shall have an unsigned type [CERT_C-INT13-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Operands of bitwise and complement operators shall have an unsigned type [CERT_C-INT13-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT13_C (REC) Use bitwise operators only on unsigned operands" ] } }, { "id": "CERT_C-INT12-a", "name": "Bit fields shall only be defined to be of type unsigned int or signed int", "shortDescription": { "text": "Bit fields shall only be defined to be of type unsigned int or signed int" }, "fullDescription": { "text": "Bit fields shall only be defined to be of type unsigned int or signed int [CERT_C-INT12-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Bit fields shall only be defined to be of type unsigned int or signed int [CERT_C-INT12-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT12_C (REC) Do not make assumptions about the type of a plain int bit-field when used in an expression" ] } }, { "id": "CERT_C-INT10-a", "name": "The operands of the remainder operator '%' should be of unsigned integer types", "shortDescription": { "text": "The operands of the remainder operator '%' should be of unsigned integer types" }, "fullDescription": { "text": "The operands of the remainder operator '%' should be of unsigned integer types [CERT_C-INT10-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The operands of the remainder operator '%' should be of unsigned integer types [CERT_C-INT10-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT10_C (REC) Do not assume a positive remainder when using the % operator" ] } }, { "id": "CERT_C-ENV33-a", "name": "The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used with an argument other than '0' (null pointer)", "shortDescription": { "text": "The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used with an argument other than '0' (null pointer)" }, "fullDescription": { "text": "The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used with an argument other than '0' (null pointer) [CERT_C-ENV33-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used with an argument other than '0' (null pointer) [CERT_C-ENV33-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ENV33_C (RULE) Do not call system()" ] } }, { "id": "CERT_C-ENV34-a", "name": "Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function", "shortDescription": { "text": "Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" }, "fullDescription": { "text": "Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function [CERT_C-ENV34-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function [CERT_C-ENV34-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ENV34_C (RULE) Do not store pointers returned by certain functions" ] } }, { "id": "CERT_C-INT18-a", "name": "Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type", "shortDescription": { "text": "Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" }, "fullDescription": { "text": "Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type [CERT_C-INT18-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type [CERT_C-INT18-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT18_C (REC) Evaluate integer expressions in a larger size before comparing or assigning to that size" ] } }, { "id": "CERT_C-INT18-b", "name": "Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type", "shortDescription": { "text": "Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type" }, "fullDescription": { "text": "Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type [CERT_C-INT18-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type [CERT_C-INT18-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT18_C (REC) Evaluate integer expressions in a larger size before comparing or assigning to that size" ] } }, { "id": "CERT_C-INT18-c", "name": "Avoid possible integer overflow in expressions in which the result is cast to a wider integer type", "shortDescription": { "text": "Avoid possible integer overflow in expressions in which the result is cast to a wider integer type" }, "fullDescription": { "text": "Avoid possible integer overflow in expressions in which the result is cast to a wider integer type [CERT_C-INT18-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid possible integer overflow in expressions in which the result is cast to a wider integer type [CERT_C-INT18-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT18_C (REC) Evaluate integer expressions in a larger size before comparing or assigning to that size" ] } }, { "id": "CERT_C-ENV31-a", "name": "Do not rely on an environment pointer following an operation that may invalidate it", "shortDescription": { "text": "Do not rely on an environment pointer following an operation that may invalidate it" }, "fullDescription": { "text": "Do not rely on an environment pointer following an operation that may invalidate it [CERT_C-ENV31-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not rely on an environment pointer following an operation that may invalidate it [CERT_C-ENV31-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ENV31_C (RULE) Do not rely on an environment pointer following an operation that may invalidate it" ] } }, { "id": "CERT_C-INT15-a", "name": "Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types", "shortDescription": { "text": "Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types" }, "fullDescription": { "text": "Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types [CERT_C-INT15-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types [CERT_C-INT15-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT15_C (REC) Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types" ] } }, { "id": "CERT_C-MSC30-a", "name": "Do not use the rand() function for generating pseudorandom numbers", "shortDescription": { "text": "Do not use the rand() function for generating pseudorandom numbers" }, "fullDescription": { "text": "Do not use the rand() function for generating pseudorandom numbers [CERT_C-MSC30-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use the rand() function for generating pseudorandom numbers [CERT_C-MSC30-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC30_C (RULE) Do not use the rand() function for generating pseudorandom numbers" ] } }, { "id": "CERT_C-ENV32-a", "name": "Properly define exit handlers", "shortDescription": { "text": "Properly define exit handlers" }, "fullDescription": { "text": "Properly define exit handlers [CERT_C-ENV32-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly define exit handlers [CERT_C-ENV32-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ENV32_C (RULE) All exit handlers must return normally" ] } }, { "id": "CERT_C-INT16-a", "name": "Bitwise operators shall only be applied to operands of unsigned underlying type (with exceptions)", "shortDescription": { "text": "Bitwise operators shall only be applied to operands of unsigned underlying type (with exceptions)" }, "fullDescription": { "text": "Bitwise operators shall only be applied to operands of unsigned underlying type (with exceptions) [CERT_C-INT16-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Bitwise operators shall only be applied to operands of unsigned underlying type (with exceptions) [CERT_C-INT16-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT16_C (REC) Do not make assumptions about representation of signed integers" ] } }, { "id": "CERT_C-MEM00-a", "name": "Do not allocate memory and expect that someone else will deallocate it later", "shortDescription": { "text": "Do not allocate memory and expect that someone else will deallocate it later" }, "fullDescription": { "text": "Do not allocate memory and expect that someone else will deallocate it later [CERT_C-MEM00-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not allocate memory and expect that someone else will deallocate it later [CERT_C-MEM00-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM00_C (REC) Allocate and free memory in the same module, at the same level of abstraction" ] } }, { "id": "CERT_C-MEM00-b", "name": "Do not allocate memory and expect that someone else will deallocate it later", "shortDescription": { "text": "Do not allocate memory and expect that someone else will deallocate it later" }, "fullDescription": { "text": "Do not allocate memory and expect that someone else will deallocate it later [CERT_C-MEM00-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not allocate memory and expect that someone else will deallocate it later [CERT_C-MEM00-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM00_C (REC) Allocate and free memory in the same module, at the same level of abstraction" ] } }, { "id": "CERT_C-MEM00-c", "name": "Do not allocate memory and expect that someone else will deallocate it later", "shortDescription": { "text": "Do not allocate memory and expect that someone else will deallocate it later" }, "fullDescription": { "text": "Do not allocate memory and expect that someone else will deallocate it later [CERT_C-MEM00-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not allocate memory and expect that someone else will deallocate it later [CERT_C-MEM00-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM00_C (REC) Allocate and free memory in the same module, at the same level of abstraction" ] } }, { "id": "CERT_C-MEM00-d", "name": "Do not use resources that have been freed", "shortDescription": { "text": "Do not use resources that have been freed" }, "fullDescription": { "text": "Do not use resources that have been freed [CERT_C-MEM00-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use resources that have been freed [CERT_C-MEM00-d]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM00_C (REC) Allocate and free memory in the same module, at the same level of abstraction" ] } }, { "id": "CERT_C-MEM00-e", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [CERT_C-MEM00-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure resources are freed [CERT_C-MEM00-e]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM00_C (REC) Allocate and free memory in the same module, at the same level of abstraction" ] } }, { "id": "CERT_C-MEM01-a", "name": "Do not use resources that have been freed", "shortDescription": { "text": "Do not use resources that have been freed" }, "fullDescription": { "text": "Do not use resources that have been freed [CERT_C-MEM01-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use resources that have been freed [CERT_C-MEM01-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM01_C (REC) Store a new value in pointers immediately after free()" ] } }, { "id": "CERT_C-MEM01-b", "name": "Always assign a new value to an expression that points to deallocated memory", "shortDescription": { "text": "Always assign a new value to an expression that points to deallocated memory" }, "fullDescription": { "text": "Always assign a new value to an expression that points to deallocated memory [CERT_C-MEM01-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Always assign a new value to an expression that points to deallocated memory [CERT_C-MEM01-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM01_C (REC) Store a new value in pointers immediately after free()" ] } }, { "id": "CERT_C-MEM01-c", "name": "Always assign a new value to global or member variable that points to deallocated memory", "shortDescription": { "text": "Always assign a new value to global or member variable that points to deallocated memory" }, "fullDescription": { "text": "Always assign a new value to global or member variable that points to deallocated memory [CERT_C-MEM01-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Always assign a new value to global or member variable that points to deallocated memory [CERT_C-MEM01-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM01_C (REC) Store a new value in pointers immediately after free()" ] } }, { "id": "CERT_C-MEM01-d", "name": "Always assign a new value to parameter or local variable that points to deallocated memory", "shortDescription": { "text": "Always assign a new value to parameter or local variable that points to deallocated memory" }, "fullDescription": { "text": "Always assign a new value to parameter or local variable that points to deallocated memory [CERT_C-MEM01-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Always assign a new value to parameter or local variable that points to deallocated memory [CERT_C-MEM01-d]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM01_C (REC) Store a new value in pointers immediately after free()" ] } }, { "id": "CERT_C-SIG30-a", "name": "Properly define signal handlers", "shortDescription": { "text": "Properly define signal handlers" }, "fullDescription": { "text": "Properly define signal handlers [CERT_C-SIG30-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly define signal handlers [CERT_C-SIG30-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-SIG30_C (RULE) Call only asynchronous-safe functions within signal handlers" ] } }, { "id": "CERT_C-MEM04-a", "name": "The validity of values passed to library functions shall be checked", "shortDescription": { "text": "The validity of values passed to library functions shall be checked" }, "fullDescription": { "text": "The validity of values passed to library functions shall be checked [CERT_C-MEM04-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The validity of values passed to library functions shall be checked [CERT_C-MEM04-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM04_C (REC) Beware of zero-length allocations" ] } }, { "id": "CERT_C-MEM05-a", "name": "Do not use recursion", "shortDescription": { "text": "Do not use recursion" }, "fullDescription": { "text": "Do not use recursion [CERT_C-MEM05-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use recursion [CERT_C-MEM05-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM05_C (REC) Avoid large stack allocations" ] } }, { "id": "CERT_C-MEM05-b", "name": "Ensure the size of the variable length array is in valid range", "shortDescription": { "text": "Ensure the size of the variable length array is in valid range" }, "fullDescription": { "text": "Ensure the size of the variable length array is in valid range [CERT_C-MEM05-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure the size of the variable length array is in valid range [CERT_C-MEM05-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM05_C (REC) Avoid large stack allocations" ] } }, { "id": "CERT_C-SIG31-a", "name": "Properly define signal handlers", "shortDescription": { "text": "Properly define signal handlers" }, "fullDescription": { "text": "Properly define signal handlers [CERT_C-SIG31-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly define signal handlers [CERT_C-SIG31-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-SIG31_C (RULE) Do not access shared objects in signal handlers" ] } }, { "id": "CERT_C-MEM02-a", "name": "The result of the memory allocation function should be cast immediately", "shortDescription": { "text": "The result of the memory allocation function should be cast immediately" }, "fullDescription": { "text": "The result of the memory allocation function should be cast immediately [CERT_C-MEM02-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The result of the memory allocation function should be cast immediately [CERT_C-MEM02-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM02_C (REC) Immediately cast the result of a memory allocation function call into a pointer to the allocated type" ] } }, { "id": "CERT_C-MEM02-b", "name": "The result of the memory allocation function should be cast immediately into a pointer to the allocated type", "shortDescription": { "text": "The result of the memory allocation function should be cast immediately into a pointer to the allocated type" }, "fullDescription": { "text": "The result of the memory allocation function should be cast immediately into a pointer to the allocated type [CERT_C-MEM02-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The result of the memory allocation function should be cast immediately into a pointer to the allocated type [CERT_C-MEM02-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM02_C (REC) Immediately cast the result of a memory allocation function call into a pointer to the allocated type" ] } }, { "id": "CERT_C-SIG34-a", "name": "Properly define signal handlers", "shortDescription": { "text": "Properly define signal handlers" }, "fullDescription": { "text": "Properly define signal handlers [CERT_C-SIG34-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Properly define signal handlers [CERT_C-SIG34-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-SIG34_C (RULE) Do not call signal() from within interruptible signal handlers" ] } }, { "id": "CERT_C-MEM03-a", "name": "Sensitive data should be cleared before being deallocated", "shortDescription": { "text": "Sensitive data should be cleared before being deallocated" }, "fullDescription": { "text": "Sensitive data should be cleared before being deallocated [CERT_C-MEM03-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Sensitive data should be cleared before being deallocated [CERT_C-MEM03-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM03_C (REC) Clear sensitive information stored in reusable resources" ] } }, { "id": "CERT_C-SIG35-a", "name": "Do not return from a computational exception signal handler", "shortDescription": { "text": "Do not return from a computational exception signal handler" }, "fullDescription": { "text": "Do not return from a computational exception signal handler [CERT_C-SIG35-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not return from a computational exception signal handler [CERT_C-SIG35-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-SIG35_C (RULE) Do not return from a computational exception signal handler" ] } }, { "id": "CERT_C-PRE31-b", "name": "Assertions should not contain assignments, increment, or decrement operators", "shortDescription": { "text": "Assertions should not contain assignments, increment, or decrement operators" }, "fullDescription": { "text": "Assertions should not contain assignments, increment, or decrement operators [CERT_C-PRE31-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Assertions should not contain assignments, increment, or decrement operators [CERT_C-PRE31-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-PRE31_C (RULE) Avoid side effects in arguments to unsafe macros" ] } }, { "id": "CERT_C-PRE31-c", "name": "Assertions should not contain function calls nor function-like macro calls", "shortDescription": { "text": "Assertions should not contain function calls nor function-like macro calls" }, "fullDescription": { "text": "Assertions should not contain function calls nor function-like macro calls [CERT_C-PRE31-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Assertions should not contain function calls nor function-like macro calls [CERT_C-PRE31-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-PRE31_C (RULE) Avoid side effects in arguments to unsafe macros" ] } }, { "id": "CERT_C-PRE31-d", "name": "Avoid side effects in arguments to unsafe macros", "shortDescription": { "text": "Avoid side effects in arguments to unsafe macros" }, "fullDescription": { "text": "Avoid side effects in arguments to unsafe macros [CERT_C-PRE31-d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid side effects in arguments to unsafe macros [CERT_C-PRE31-d]" }, "properties": { "tags": [ "SEI CERT C", "CERT-PRE31_C (RULE) Avoid side effects in arguments to unsafe macros" ] } }, { "id": "CERT_C-PRE32-a", "name": "Arguments to a function-like macro shall not contain tokens that look like preprocessing directives", "shortDescription": { "text": "Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" }, "fullDescription": { "text": "Arguments to a function-like macro shall not contain tokens that look like preprocessing directives [CERT_C-PRE32-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Arguments to a function-like macro shall not contain tokens that look like preprocessing directives [CERT_C-PRE32-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-PRE32_C (RULE) Do not use preprocessor directives in invocations of function-like macros" ] } }, { "id": "CERT_C-PRE30-a", "name": "Avoid token concatenation that may produce universal character names", "shortDescription": { "text": "Avoid token concatenation that may produce universal character names" }, "fullDescription": { "text": "Avoid token concatenation that may produce universal character names [CERT_C-PRE30-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid token concatenation that may produce universal character names [CERT_C-PRE30-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-PRE30_C (RULE) Do not create a universal character name through concatenation" ] } }, { "id": "CERT_C-ENV02-a", "name": "Usage of system properties (environment variables) should be restricted", "shortDescription": { "text": "Usage of system properties (environment variables) should be restricted" }, "fullDescription": { "text": "Usage of system properties (environment variables) should be restricted [CERT_C-ENV02-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Usage of system properties (environment variables) should be restricted [CERT_C-ENV02-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ENV02_C (REC) Beware of multiple environment variables with the same effective name" ] } }, { "id": "CERT_C-ENV01-a", "name": "Don't use unsafe C functions that do write to range-unchecked buffers", "shortDescription": { "text": "Don't use unsafe C functions that do write to range-unchecked buffers" }, "fullDescription": { "text": "Don't use unsafe C functions that do write to range-unchecked buffers [CERT_C-ENV01-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't use unsafe C functions that do write to range-unchecked buffers [CERT_C-ENV01-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ENV01_C (REC) Do not make assumptions about the size of an environment variable" ] } }, { "id": "CERT_C-ENV01-b", "name": "Avoid using unsafe string functions which may cause buffer overflows", "shortDescription": { "text": "Avoid using unsafe string functions which may cause buffer overflows" }, "fullDescription": { "text": "Avoid using unsafe string functions which may cause buffer overflows [CERT_C-ENV01-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using unsafe string functions which may cause buffer overflows [CERT_C-ENV01-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ENV01_C (REC) Do not make assumptions about the size of an environment variable" ] } }, { "id": "CERT_C-ENV01-c", "name": "Avoid overflow when writing to a buffer", "shortDescription": { "text": "Avoid overflow when writing to a buffer" }, "fullDescription": { "text": "Avoid overflow when writing to a buffer [CERT_C-ENV01-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when writing to a buffer [CERT_C-ENV01-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ENV01_C (REC) Do not make assumptions about the size of an environment variable" ] } }, { "id": "CERT_C-MSC01-a", "name": "All 'if...else-if' constructs shall be terminated with an 'else' clause", "shortDescription": { "text": "All 'if...else-if' constructs shall be terminated with an 'else' clause" }, "fullDescription": { "text": "All 'if...else-if' constructs shall be terminated with an 'else' clause [CERT_C-MSC01-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All 'if...else-if' constructs shall be terminated with an 'else' clause [CERT_C-MSC01-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC01_C (REC) Strive for logical completeness" ] } }, { "id": "CERT_C-MSC01-b", "name": "The final clause of a switch statement shall be the default clause", "shortDescription": { "text": "The final clause of a switch statement shall be the default clause" }, "fullDescription": { "text": "The final clause of a switch statement shall be the default clause [CERT_C-MSC01-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The final clause of a switch statement shall be the default clause [CERT_C-MSC01-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC01_C (REC) Strive for logical completeness" ] } }, { "id": "CERT_C-MSC04-a", "name": "The character sequence \/* shall not be used within a C-style comment", "shortDescription": { "text": "The character sequence \/* shall not be used within a C-style comment" }, "fullDescription": { "text": "The character sequence \/* shall not be used within a C-style comment [CERT_C-MSC04-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The character sequence \/* shall not be used within a C-style comment [CERT_C-MSC04-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC04_C (REC) Use comments consistently and in a readable fashion" ] } }, { "id": "CERT_C-MSC04-b", "name": "The character sequence \/\/ shall not be used within a C-style comment", "shortDescription": { "text": "The character sequence \/\/ shall not be used within a C-style comment" }, "fullDescription": { "text": "The character sequence \/\/ shall not be used within a C-style comment [CERT_C-MSC04-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The character sequence \/\/ shall not be used within a C-style comment [CERT_C-MSC04-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC04_C (REC) Use comments consistently and in a readable fashion" ] } }, { "id": "CERT_C-MSC04-c", "name": "The character sequence \/* shall not be used within a C++-style comment", "shortDescription": { "text": "The character sequence \/* shall not be used within a C++-style comment" }, "fullDescription": { "text": "The character sequence \/* shall not be used within a C++-style comment [CERT_C-MSC04-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The character sequence \/* shall not be used within a C++-style comment [CERT_C-MSC04-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC04_C (REC) Use comments consistently and in a readable fashion" ] } }, { "id": "CERT_C-MSC04-d", "name": "Line-splicing shall not be used in \/\/ comments", "shortDescription": { "text": "Line-splicing shall not be used in \/\/ comments" }, "fullDescription": { "text": "Line-splicing shall not be used in \/\/ comments [CERT_C-MSC04-d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Line-splicing shall not be used in \/\/ comments [CERT_C-MSC04-d]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC04_C (REC) Use comments consistently and in a readable fashion" ] } }, { "id": "CERT_C-MSC07-a", "name": "There shall be no unreachable code in \"else\" block", "shortDescription": { "text": "There shall be no unreachable code in \"else\" block" }, "fullDescription": { "text": "There shall be no unreachable code in \"else\" block [CERT_C-MSC07-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code in \"else\" block [CERT_C-MSC07-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC07_C (REC) Detect and remove dead code" ] } }, { "id": "CERT_C-MSC07-b", "name": "There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute", "shortDescription": { "text": "There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute" }, "fullDescription": { "text": "There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute [CERT_C-MSC07-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute [CERT_C-MSC07-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC07_C (REC) Detect and remove dead code" ] } }, { "id": "CERT_C-MSC07-c", "name": "There shall be no unreachable code in \"if\/else\/while\/for\" block", "shortDescription": { "text": "There shall be no unreachable code in \"if\/else\/while\/for\" block" }, "fullDescription": { "text": "There shall be no unreachable code in \"if\/else\/while\/for\" block [CERT_C-MSC07-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code in \"if\/else\/while\/for\" block [CERT_C-MSC07-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC07_C (REC) Detect and remove dead code" ] } }, { "id": "CERT_C-MSC07-d", "name": "There shall be no unreachable code in switch statement", "shortDescription": { "text": "There shall be no unreachable code in switch statement" }, "fullDescription": { "text": "There shall be no unreachable code in switch statement [CERT_C-MSC07-d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code in switch statement [CERT_C-MSC07-d]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC07_C (REC) Detect and remove dead code" ] } }, { "id": "CERT_C-MSC07-e", "name": "There shall be no unreachable code in 'for' loop", "shortDescription": { "text": "There shall be no unreachable code in 'for' loop" }, "fullDescription": { "text": "There shall be no unreachable code in 'for' loop [CERT_C-MSC07-e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code in 'for' loop [CERT_C-MSC07-e]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC07_C (REC) Detect and remove dead code" ] } }, { "id": "CERT_C-MSC07-f", "name": "There shall be no unreachable code after 'if' or 'switch' statement", "shortDescription": { "text": "There shall be no unreachable code after 'if' or 'switch' statement" }, "fullDescription": { "text": "There shall be no unreachable code after 'if' or 'switch' statement [CERT_C-MSC07-f]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code after 'if' or 'switch' statement [CERT_C-MSC07-f]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC07_C (REC) Detect and remove dead code" ] } }, { "id": "CERT_C-MSC07-g", "name": "There shall be no unreachable code after \"if\" or \"switch\" statement inside while\/for\/do...while loop", "shortDescription": { "text": "There shall be no unreachable code after \"if\" or \"switch\" statement inside while\/for\/do...while loop" }, "fullDescription": { "text": "There shall be no unreachable code after \"if\" or \"switch\" statement inside while\/for\/do...while loop [CERT_C-MSC07-g]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code after \"if\" or \"switch\" statement inside while\/for\/do...while loop [CERT_C-MSC07-g]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC07_C (REC) Detect and remove dead code" ] } }, { "id": "CERT_C-MSC07-h", "name": "Avoid switch with unreachable branches", "shortDescription": { "text": "Avoid switch with unreachable branches" }, "fullDescription": { "text": "Avoid switch with unreachable branches [CERT_C-MSC07-h]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid switch with unreachable branches [CERT_C-MSC07-h]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC07_C (REC) Detect and remove dead code" ] } }, { "id": "CERT_C-MSC09-a", "name": "Only use characters defined in the ISO C standard", "shortDescription": { "text": "Only use characters defined in the ISO C standard" }, "fullDescription": { "text": "Only use characters defined in the ISO C standard [CERT_C-MSC09-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Only use characters defined in the ISO C standard [CERT_C-MSC09-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC09_C (REC) Character encoding: Use subset of ASCII for safety" ] } }, { "id": "CERT_C-INT35-a", "name": "Use correct integer precisions when checking the right hand operand of the shift operator", "shortDescription": { "text": "Use correct integer precisions when checking the right hand operand of the shift operator" }, "fullDescription": { "text": "Use correct integer precisions when checking the right hand operand of the shift operator [CERT_C-INT35-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use correct integer precisions when checking the right hand operand of the shift operator [CERT_C-INT35-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT35_C (RULE) Use correct integer precisions" ] } }, { "id": "CERT_C-INT36-b", "name": "A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t'", "shortDescription": { "text": "A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t'" }, "fullDescription": { "text": "A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t' [CERT_C-INT36-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t' [CERT_C-INT36-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT36_C (RULE) Converting a pointer to integer or integer to pointer" ] } }, { "id": "CERT_C-INT33-a", "name": "Avoid division by zero", "shortDescription": { "text": "Avoid division by zero" }, "fullDescription": { "text": "Avoid division by zero [CERT_C-INT33-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid division by zero [CERT_C-INT33-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT33_C (RULE) Ensure that division and remainder operations do not result in divide-by-zero errors" ] } }, { "id": "CERT_C-INT34-a", "name": "Avoid incorrect shift operations", "shortDescription": { "text": "Avoid incorrect shift operations" }, "fullDescription": { "text": "Avoid incorrect shift operations [CERT_C-INT34-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid incorrect shift operations [CERT_C-INT34-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT34_C (RULE) Do not shift an expression by a negative number of bits or by greater than or equal to the number of bits that exist in the operand" ] } }, { "id": "CERT_C-INT31-a", "name": "An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value", "shortDescription": { "text": "An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" }, "fullDescription": { "text": "An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value [CERT_C-INT31-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value [CERT_C-INT31-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT31_C (RULE) Ensure that integer conversions do not result in lost or misinterpreted data" ] } }, { "id": "CERT_C-INT31-b", "name": "An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value", "shortDescription": { "text": "An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" }, "fullDescription": { "text": "An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value [CERT_C-INT31-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value [CERT_C-INT31-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT31_C (RULE) Ensure that integer conversions do not result in lost or misinterpreted data" ] } }, { "id": "CERT_C-INT31-c", "name": "An operand of essentially character type should not be used where an operand is interpreted as a numeric value", "shortDescription": { "text": "An operand of essentially character type should not be used where an operand is interpreted as a numeric value" }, "fullDescription": { "text": "An operand of essentially character type should not be used where an operand is interpreted as a numeric value [CERT_C-INT31-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An operand of essentially character type should not be used where an operand is interpreted as a numeric value [CERT_C-INT31-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT31_C (RULE) Ensure that integer conversions do not result in lost or misinterpreted data" ] } }, { "id": "CERT_C-INT31-d", "name": "An operand of essentially enum type should not be used in an arithmetic operation", "shortDescription": { "text": "An operand of essentially enum type should not be used in an arithmetic operation" }, "fullDescription": { "text": "An operand of essentially enum type should not be used in an arithmetic operation [CERT_C-INT31-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An operand of essentially enum type should not be used in an arithmetic operation [CERT_C-INT31-d]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT31_C (RULE) Ensure that integer conversions do not result in lost or misinterpreted data" ] } }, { "id": "CERT_C-INT31-e", "name": "Shift and bitwise operations should not be performed on operands of essentially signed or enum type", "shortDescription": { "text": "Shift and bitwise operations should not be performed on operands of essentially signed or enum type" }, "fullDescription": { "text": "Shift and bitwise operations should not be performed on operands of essentially signed or enum type [CERT_C-INT31-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Shift and bitwise operations should not be performed on operands of essentially signed or enum type [CERT_C-INT31-e]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT31_C (RULE) Ensure that integer conversions do not result in lost or misinterpreted data" ] } }, { "id": "CERT_C-INT31-f", "name": "An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator", "shortDescription": { "text": "An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" }, "fullDescription": { "text": "An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator [CERT_C-INT31-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator [CERT_C-INT31-f]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT31_C (RULE) Ensure that integer conversions do not result in lost or misinterpreted data" ] } }, { "id": "CERT_C-INT31-g", "name": "An operand of essentially unsigned type should not be used as the operand to the unary minus operator", "shortDescription": { "text": "An operand of essentially unsigned type should not be used as the operand to the unary minus operator" }, "fullDescription": { "text": "An operand of essentially unsigned type should not be used as the operand to the unary minus operator [CERT_C-INT31-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An operand of essentially unsigned type should not be used as the operand to the unary minus operator [CERT_C-INT31-g]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT31_C (RULE) Ensure that integer conversions do not result in lost or misinterpreted data" ] } }, { "id": "CERT_C-INT31-h", "name": "The value of an expression shall not be assigned to an object with a narrower essential type", "shortDescription": { "text": "The value of an expression shall not be assigned to an object with a narrower essential type" }, "fullDescription": { "text": "The value of an expression shall not be assigned to an object with a narrower essential type [CERT_C-INT31-h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of an expression shall not be assigned to an object with a narrower essential type [CERT_C-INT31-h]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT31_C (RULE) Ensure that integer conversions do not result in lost or misinterpreted data" ] } }, { "id": "CERT_C-INT31-i", "name": "The value of an expression shall not be assigned to an object of a different essential type category", "shortDescription": { "text": "The value of an expression shall not be assigned to an object of a different essential type category" }, "fullDescription": { "text": "The value of an expression shall not be assigned to an object of a different essential type category [CERT_C-INT31-i]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of an expression shall not be assigned to an object of a different essential type category [CERT_C-INT31-i]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT31_C (RULE) Ensure that integer conversions do not result in lost or misinterpreted data" ] } }, { "id": "CERT_C-INT31-j", "name": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category", "shortDescription": { "text": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" }, "fullDescription": { "text": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category [CERT_C-INT31-j]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category [CERT_C-INT31-j]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT31_C (RULE) Ensure that integer conversions do not result in lost or misinterpreted data" ] } }, { "id": "CERT_C-INT31-k", "name": "The second and third operands of the ternary operator shall have the same essential type category", "shortDescription": { "text": "The second and third operands of the ternary operator shall have the same essential type category" }, "fullDescription": { "text": "The second and third operands of the ternary operator shall have the same essential type category [CERT_C-INT31-k]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The second and third operands of the ternary operator shall have the same essential type category [CERT_C-INT31-k]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT31_C (RULE) Ensure that integer conversions do not result in lost or misinterpreted data" ] } }, { "id": "CERT_C-INT31-l", "name": "The value of a composite expression shall not be assigned to an object with wider essential type", "shortDescription": { "text": "The value of a composite expression shall not be assigned to an object with wider essential type" }, "fullDescription": { "text": "The value of a composite expression shall not be assigned to an object with wider essential type [CERT_C-INT31-l]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of a composite expression shall not be assigned to an object with wider essential type [CERT_C-INT31-l]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT31_C (RULE) Ensure that integer conversions do not result in lost or misinterpreted data" ] } }, { "id": "CERT_C-INT31-m", "name": "If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type", "shortDescription": { "text": "If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" }, "fullDescription": { "text": "If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type [CERT_C-INT31-m]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type [CERT_C-INT31-m]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT31_C (RULE) Ensure that integer conversions do not result in lost or misinterpreted data" ] } }, { "id": "CERT_C-INT31-n", "name": "If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type", "shortDescription": { "text": "If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" }, "fullDescription": { "text": "If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type [CERT_C-INT31-n]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type [CERT_C-INT31-n]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT31_C (RULE) Ensure that integer conversions do not result in lost or misinterpreted data" ] } }, { "id": "CERT_C-INT31-o", "name": "Avoid data loss when converting between integer types", "shortDescription": { "text": "Avoid data loss when converting between integer types" }, "fullDescription": { "text": "Avoid data loss when converting between integer types [CERT_C-INT31-o]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid data loss when converting between integer types [CERT_C-INT31-o]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT31_C (RULE) Ensure that integer conversions do not result in lost or misinterpreted data" ] } }, { "id": "CERT_C-INT32-a", "name": "Avoid signed integer overflows", "shortDescription": { "text": "Avoid signed integer overflows" }, "fullDescription": { "text": "Avoid signed integer overflows [CERT_C-INT32-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid signed integer overflows [CERT_C-INT32-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT32_C (RULE) Ensure that operations on signed integers do not result in overflow" ] } }, { "id": "CERT_C-INT32-b", "name": "Integer overflow or underflow in constant expression in '+', '-', '*' operator", "shortDescription": { "text": "Integer overflow or underflow in constant expression in '+', '-', '*' operator" }, "fullDescription": { "text": "Integer overflow or underflow in constant expression in '+', '-', '*' operator [CERT_C-INT32-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Integer overflow or underflow in constant expression in '+', '-', '*' operator [CERT_C-INT32-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT32_C (RULE) Ensure that operations on signed integers do not result in overflow" ] } }, { "id": "CERT_C-INT32-c", "name": "Integer overflow or underflow in constant expression in '<<' operator", "shortDescription": { "text": "Integer overflow or underflow in constant expression in '<<' operator" }, "fullDescription": { "text": "Integer overflow or underflow in constant expression in '<<' operator [CERT_C-INT32-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Integer overflow or underflow in constant expression in '<<' operator [CERT_C-INT32-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT32_C (RULE) Ensure that operations on signed integers do not result in overflow" ] } }, { "id": "CERT_C-INT30-a", "name": "Avoid wraparounds when performing arithmetic integer operations", "shortDescription": { "text": "Avoid wraparounds when performing arithmetic integer operations" }, "fullDescription": { "text": "Avoid wraparounds when performing arithmetic integer operations [CERT_C-INT30-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid wraparounds when performing arithmetic integer operations [CERT_C-INT30-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT30_C (RULE) Ensure that unsigned integer operations do not wrap" ] } }, { "id": "CERT_C-INT30-b", "name": "Integer overflow or underflow in constant expression in '+', '-', '*' operator", "shortDescription": { "text": "Integer overflow or underflow in constant expression in '+', '-', '*' operator" }, "fullDescription": { "text": "Integer overflow or underflow in constant expression in '+', '-', '*' operator [CERT_C-INT30-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Integer overflow or underflow in constant expression in '+', '-', '*' operator [CERT_C-INT30-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT30_C (RULE) Ensure that unsigned integer operations do not wrap" ] } }, { "id": "CERT_C-INT30-c", "name": "Integer overflow or underflow in constant expression in '<<' operator", "shortDescription": { "text": "Integer overflow or underflow in constant expression in '<<' operator" }, "fullDescription": { "text": "Integer overflow or underflow in constant expression in '<<' operator [CERT_C-INT30-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Integer overflow or underflow in constant expression in '<<' operator [CERT_C-INT30-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT30_C (RULE) Ensure that unsigned integer operations do not wrap" ] } }, { "id": "CERT_C-FIO34-a", "name": "The macro EOF should be compared with the unmodified return value from the Standard Library function", "shortDescription": { "text": "The macro EOF should be compared with the unmodified return value from the Standard Library function" }, "fullDescription": { "text": "The macro EOF should be compared with the unmodified return value from the Standard Library function [CERT_C-FIO34-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The macro EOF should be compared with the unmodified return value from the Standard Library function [CERT_C-FIO34-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO34_C (RULE) Distinguish between characters read from a file and EOF or WEOF" ] } }, { "id": "CERT_C-FIO32-a", "name": "Protect against file name injection", "shortDescription": { "text": "Protect against file name injection" }, "fullDescription": { "text": "Protect against file name injection [CERT_C-FIO32-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Protect against file name injection [CERT_C-FIO32-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO32_C (RULE) Do not perform operations on devices that are only appropriate for files" ] } }, { "id": "CERT_C-FIO38-a", "name": "A pointer to a FILE object shall not be dereferenced", "shortDescription": { "text": "A pointer to a FILE object shall not be dereferenced" }, "fullDescription": { "text": "A pointer to a FILE object shall not be dereferenced [CERT_C-FIO38-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A pointer to a FILE object shall not be dereferenced [CERT_C-FIO38-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO38_C (RULE) Do not copy a FILE object" ] } }, { "id": "CERT_C-FIO39-a", "name": "Do not alternately input and output from a stream without an intervening flush or positioning call", "shortDescription": { "text": "Do not alternately input and output from a stream without an intervening flush or positioning call" }, "fullDescription": { "text": "Do not alternately input and output from a stream without an intervening flush or positioning call [CERT_C-FIO39-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not alternately input and output from a stream without an intervening flush or positioning call [CERT_C-FIO39-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO39_C (RULE) Do not alternately input and output from a stream without an intervening flush or positioning call" ] } }, { "id": "CERT_C-FIO37-a", "name": "Avoid accessing arrays out of bounds", "shortDescription": { "text": "Avoid accessing arrays out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays out of bounds [CERT_C-FIO37-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays out of bounds [CERT_C-FIO37-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO37_C (RULE) Do not assume that fgets() or fgetws() returns a nonempty string when successful" ] } }, { "id": "CERT_C-EXP44-a", "name": "Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator", "shortDescription": { "text": "Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" }, "fullDescription": { "text": "Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator [CERT_C-EXP44-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator [CERT_C-EXP44-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP44_C (RULE) Do not rely on side effects in operands to sizeof, _Alignof, or _Generic" ] } }, { "id": "CERT_C-EXP44-b", "name": "The function call that causes the side effect shall not be the operand of the sizeof operator", "shortDescription": { "text": "The function call that causes the side effect shall not be the operand of the sizeof operator" }, "fullDescription": { "text": "The function call that causes the side effect shall not be the operand of the sizeof operator [CERT_C-EXP44-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The function call that causes the side effect shall not be the operand of the sizeof operator [CERT_C-EXP44-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP44_C (RULE) Do not rely on side effects in operands to sizeof, _Alignof, or _Generic" ] } }, { "id": "CERT_C-EXP45-b", "name": "Assignment operators shall not be used in conditions without brackets", "shortDescription": { "text": "Assignment operators shall not be used in conditions without brackets" }, "fullDescription": { "text": "Assignment operators shall not be used in conditions without brackets [CERT_C-EXP45-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Assignment operators shall not be used in conditions without brackets [CERT_C-EXP45-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP45_C (RULE) Do not perform assignments in selection statements" ] } }, { "id": "CERT_C-EXP45-d", "name": "Assignment operators shall not be used in expressions that yield a Boolean value", "shortDescription": { "text": "Assignment operators shall not be used in expressions that yield a Boolean value" }, "fullDescription": { "text": "Assignment operators shall not be used in expressions that yield a Boolean value [CERT_C-EXP45-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Assignment operators shall not be used in expressions that yield a Boolean value [CERT_C-EXP45-d]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP45_C (RULE) Do not perform assignments in selection statements" ] } }, { "id": "CERT_C-EXP42-a", "name": "Don't memcpy or memcmp non-PODs", "shortDescription": { "text": "Don't memcpy or memcmp non-PODs" }, "fullDescription": { "text": "Don't memcpy or memcmp non-PODs [CERT_C-EXP42-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't memcpy or memcmp non-PODs [CERT_C-EXP42-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP42_C (RULE) Do not compare padding data" ] } }, { "id": "CERT_C-EXP43-a", "name": "The restrict type qualifier shall not be used", "shortDescription": { "text": "The restrict type qualifier shall not be used" }, "fullDescription": { "text": "The restrict type qualifier shall not be used [CERT_C-EXP43-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The restrict type qualifier shall not be used [CERT_C-EXP43-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP43_C (RULE) Avoid undefined behavior when using restrict-qualified pointers" ] } }, { "id": "CERT_C-FIO30-a", "name": "Avoid calling functions printf\/wprintf with only one argument other than string constant", "shortDescription": { "text": "Avoid calling functions printf\/wprintf with only one argument other than string constant" }, "fullDescription": { "text": "Avoid calling functions printf\/wprintf with only one argument other than string constant [CERT_C-FIO30-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid calling functions printf\/wprintf with only one argument other than string constant [CERT_C-FIO30-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO30_C (RULE) Exclude user input from format strings" ] } }, { "id": "CERT_C-FIO30-b", "name": "Avoid using functions fprintf\/fwprintf with only two parameters, when second parameter is a variable", "shortDescription": { "text": "Avoid using functions fprintf\/fwprintf with only two parameters, when second parameter is a variable" }, "fullDescription": { "text": "Avoid using functions fprintf\/fwprintf with only two parameters, when second parameter is a variable [CERT_C-FIO30-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using functions fprintf\/fwprintf with only two parameters, when second parameter is a variable [CERT_C-FIO30-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO30_C (RULE) Exclude user input from format strings" ] } }, { "id": "CERT_C-FIO30-c", "name": "Never use unfiltered data from an untrusted user as the format parameter", "shortDescription": { "text": "Never use unfiltered data from an untrusted user as the format parameter" }, "fullDescription": { "text": "Never use unfiltered data from an untrusted user as the format parameter [CERT_C-FIO30-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Never use unfiltered data from an untrusted user as the format parameter [CERT_C-FIO30-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO30_C (RULE) Exclude user input from format strings" ] } }, { "id": "CERT_C-EXP46-b", "name": "Expressions that are effectively Boolean should not be used as operands to operators other than (&&, ||, !, =, ==, !=, ?:)", "shortDescription": { "text": "Expressions that are effectively Boolean should not be used as operands to operators other than (&&, ||, !, =, ==, !=, ?:)" }, "fullDescription": { "text": "Expressions that are effectively Boolean should not be used as operands to operators other than (&&, ||, !, =, ==, !=, ?:) [CERT_C-EXP46-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Expressions that are effectively Boolean should not be used as operands to operators other than (&&, ||, !, =, ==, !=, ?:) [CERT_C-EXP46-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP46_C (RULE) Do not use a bitwise operator with a Boolean-like operand" ] } }, { "id": "CERT_C-EXP47-a", "name": "Do not call va_arg with an argument of the incorrect type", "shortDescription": { "text": "Do not call va_arg with an argument of the incorrect type" }, "fullDescription": { "text": "Do not call va_arg with an argument of the incorrect type [CERT_C-EXP47-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not call va_arg with an argument of the incorrect type [CERT_C-EXP47-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP47_C (RULE) Do not call va_arg with an argument of the incorrect type" ] } }, { "id": "CERT_C-MEM12-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [CERT_C-MEM12-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Ensure resources are freed [CERT_C-MEM12-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM12_C (REC) Consider using a goto chain when leaving a function on error when using and releasing resources" ] } }, { "id": "CERT_C-STR34-b", "name": "Cast characters to unsigned char before assignment to larger integer sizes", "shortDescription": { "text": "Cast characters to unsigned char before assignment to larger integer sizes" }, "fullDescription": { "text": "Cast characters to unsigned char before assignment to larger integer sizes [CERT_C-STR34-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Cast characters to unsigned char before assignment to larger integer sizes [CERT_C-STR34-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-STR34_C (RULE) Cast characters to unsigned char before converting to larger integer sizes" ] } }, { "id": "CERT_C-STR34-c", "name": "An expressions of the 'signed char' type should not be used as an array index", "shortDescription": { "text": "An expressions of the 'signed char' type should not be used as an array index" }, "fullDescription": { "text": "An expressions of the 'signed char' type should not be used as an array index [CERT_C-STR34-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An expressions of the 'signed char' type should not be used as an array index [CERT_C-STR34-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-STR34_C (RULE) Cast characters to unsigned char before converting to larger integer sizes" ] } }, { "id": "CERT_C-STR34-d", "name": "Cast characters to unsigned char before converting to larger integer sizes", "shortDescription": { "text": "Cast characters to unsigned char before converting to larger integer sizes" }, "fullDescription": { "text": "Cast characters to unsigned char before converting to larger integer sizes [CERT_C-STR34-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Cast characters to unsigned char before converting to larger integer sizes [CERT_C-STR34-d]" }, "properties": { "tags": [ "SEI CERT C", "CERT-STR34_C (RULE) Cast characters to unsigned char before converting to larger integer sizes" ] } }, { "id": "CERT_C-STR31-a", "name": "Avoid accessing arrays out of bounds", "shortDescription": { "text": "Avoid accessing arrays out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays out of bounds [CERT_C-STR31-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays out of bounds [CERT_C-STR31-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-STR31_C (RULE) Guarantee that storage for strings has sufficient space for character data and the null terminator" ] } }, { "id": "CERT_C-STR31-b", "name": "Avoid overflow when writing to a buffer", "shortDescription": { "text": "Avoid overflow when writing to a buffer" }, "fullDescription": { "text": "Avoid overflow when writing to a buffer [CERT_C-STR31-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when writing to a buffer [CERT_C-STR31-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-STR31_C (RULE) Guarantee that storage for strings has sufficient space for character data and the null terminator" ] } }, { "id": "CERT_C-STR31-c", "name": "Prevent buffer overflows from tainted data", "shortDescription": { "text": "Prevent buffer overflows from tainted data" }, "fullDescription": { "text": "Prevent buffer overflows from tainted data [CERT_C-STR31-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Prevent buffer overflows from tainted data [CERT_C-STR31-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-STR31_C (RULE) Guarantee that storage for strings has sufficient space for character data and the null terminator" ] } }, { "id": "CERT_C-STR31-d", "name": "Avoid buffer write overflow from tainted data", "shortDescription": { "text": "Avoid buffer write overflow from tainted data" }, "fullDescription": { "text": "Avoid buffer write overflow from tainted data [CERT_C-STR31-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer write overflow from tainted data [CERT_C-STR31-d]" }, "properties": { "tags": [ "SEI CERT C", "CERT-STR31_C (RULE) Guarantee that storage for strings has sufficient space for character data and the null terminator" ] } }, { "id": "CERT_C-STR31-e", "name": "Avoid using unsafe string functions which may cause buffer overflows", "shortDescription": { "text": "Avoid using unsafe string functions which may cause buffer overflows" }, "fullDescription": { "text": "Avoid using unsafe string functions which may cause buffer overflows [CERT_C-STR31-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using unsafe string functions which may cause buffer overflows [CERT_C-STR31-e]" }, "properties": { "tags": [ "SEI CERT C", "CERT-STR31_C (RULE) Guarantee that storage for strings has sufficient space for character data and the null terminator" ] } }, { "id": "CERT_C-STR32-a", "name": "Avoid overflow due to reading a not zero terminated string", "shortDescription": { "text": "Avoid overflow due to reading a not zero terminated string" }, "fullDescription": { "text": "Avoid overflow due to reading a not zero terminated string [CERT_C-STR32-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow due to reading a not zero terminated string [CERT_C-STR32-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-STR32_C (RULE) Do not pass a non-null-terminated character sequence to a library function that expects a string" ] } }, { "id": "CERT_C-STR30-a", "name": "A string literal shall not be modified", "shortDescription": { "text": "A string literal shall not be modified" }, "fullDescription": { "text": "A string literal shall not be modified [CERT_C-STR30-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A string literal shall not be modified [CERT_C-STR30-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-STR30_C (RULE) Do not attempt to modify string literals" ] } }, { "id": "CERT_C-STR30-b", "name": "Do not modify string literals", "shortDescription": { "text": "Do not modify string literals" }, "fullDescription": { "text": "Do not modify string literals [CERT_C-STR30-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not modify string literals [CERT_C-STR30-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-STR30_C (RULE) Do not attempt to modify string literals" ] } }, { "id": "CERT_C-FIO45-a", "name": "Avoid race conditions while accessing files", "shortDescription": { "text": "Avoid race conditions while accessing files" }, "fullDescription": { "text": "Avoid race conditions while accessing files [CERT_C-FIO45-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid race conditions while accessing files [CERT_C-FIO45-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO45_C (RULE) Avoid TOCTOU race conditions while accessing files" ] } }, { "id": "CERT_C-FIO46-a", "name": "Do not use resources that have been freed", "shortDescription": { "text": "Do not use resources that have been freed" }, "fullDescription": { "text": "Do not use resources that have been freed [CERT_C-FIO46-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use resources that have been freed [CERT_C-FIO46-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO46_C (RULE) Do not access a closed file" ] } }, { "id": "CERT_C-FIO44-a", "name": "Only use values for fsetpos() that are returned from fgetpos()", "shortDescription": { "text": "Only use values for fsetpos() that are returned from fgetpos()" }, "fullDescription": { "text": "Only use values for fsetpos() that are returned from fgetpos() [CERT_C-FIO44-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Only use values for fsetpos() that are returned from fgetpos() [CERT_C-FIO44-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO44_C (RULE) Only use values for fsetpos() that are returned from fgetpos()" ] } }, { "id": "CERT_C-STR37-a", "name": "Do not pass incorrect values to ctype.h library functions", "shortDescription": { "text": "Do not pass incorrect values to ctype.h library functions" }, "fullDescription": { "text": "Do not pass incorrect values to ctype.h library functions [CERT_C-STR37-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not pass incorrect values to ctype.h library functions [CERT_C-STR37-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-STR37_C (RULE) Arguments to character-handling functions must be representable as an unsigned char" ] } }, { "id": "CERT_C-STR38-a", "name": "Do not confuse narrow and wide character strings and functions", "shortDescription": { "text": "Do not confuse narrow and wide character strings and functions" }, "fullDescription": { "text": "Do not confuse narrow and wide character strings and functions [CERT_C-STR38-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not confuse narrow and wide character strings and functions [CERT_C-STR38-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-STR38_C (RULE) Do not confuse narrow and wide character strings and functions" ] } }, { "id": "CERT_C-FIO47-a", "name": "There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function", "shortDescription": { "text": "There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function" }, "fullDescription": { "text": "There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function [CERT_C-FIO47-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function [CERT_C-FIO47-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO47_C (RULE) Use valid format strings" ] } }, { "id": "CERT_C-FIO47-b", "name": "There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function", "shortDescription": { "text": "There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" }, "fullDescription": { "text": "There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function [CERT_C-FIO47-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function [CERT_C-FIO47-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO47_C (RULE) Use valid format strings" ] } }, { "id": "CERT_C-FIO47-c", "name": "There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function", "shortDescription": { "text": "There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function" }, "fullDescription": { "text": "There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function [CERT_C-FIO47-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function [CERT_C-FIO47-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO47_C (RULE) Use valid format strings" ] } }, { "id": "CERT_C-FIO47-d", "name": "There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function", "shortDescription": { "text": "There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" }, "fullDescription": { "text": "There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function [CERT_C-FIO47-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function [CERT_C-FIO47-d]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO47_C (RULE) Use valid format strings" ] } }, { "id": "CERT_C-FIO47-e", "name": "There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function", "shortDescription": { "text": "There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" }, "fullDescription": { "text": "There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function [CERT_C-FIO47-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function [CERT_C-FIO47-e]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO47_C (RULE) Use valid format strings" ] } }, { "id": "CERT_C-FIO47-f", "name": "The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal", "shortDescription": { "text": "The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" }, "fullDescription": { "text": "The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal [CERT_C-FIO47-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal [CERT_C-FIO47-f]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO47_C (RULE) Use valid format strings" ] } }, { "id": "CERT_C-FIO41-a", "name": "Do not call 'getc()', 'putc()', 'getwc()', or 'putwc()' with a stream argument containing assignments, increment or decrement operators", "shortDescription": { "text": "Do not call 'getc()', 'putc()', 'getwc()', or 'putwc()' with a stream argument containing assignments, increment or decrement operators" }, "fullDescription": { "text": "Do not call 'getc()', 'putc()', 'getwc()', or 'putwc()' with a stream argument containing assignments, increment or decrement operators [CERT_C-FIO41-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not call 'getc()', 'putc()', 'getwc()', or 'putwc()' with a stream argument containing assignments, increment or decrement operators [CERT_C-FIO41-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO41_C (RULE) Do not call getc(), putc(), getwc(), or putwc() with a stream argument that has side effects" ] } }, { "id": "CERT_C-FIO41-b", "name": "Do not call 'getc()', 'putc()', 'getwc()', or 'putwc()' with a stream argument containing function calls or function-like macro calls", "shortDescription": { "text": "Do not call 'getc()', 'putc()', 'getwc()', or 'putwc()' with a stream argument containing function calls or function-like macro calls" }, "fullDescription": { "text": "Do not call 'getc()', 'putc()', 'getwc()', or 'putwc()' with a stream argument containing function calls or function-like macro calls [CERT_C-FIO41-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not call 'getc()', 'putc()', 'getwc()', or 'putwc()' with a stream argument containing function calls or function-like macro calls [CERT_C-FIO41-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO41_C (RULE) Do not call getc(), putc(), getwc(), or putwc() with a stream argument that has side effects" ] } }, { "id": "CERT_C-FIO42-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [CERT_C-FIO42-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Ensure resources are freed [CERT_C-FIO42-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO42_C (RULE) Close files when they are no longer needed" ] } }, { "id": "CERT_C-FIO40-a", "name": "Reset strings on fgets() or fgetws() failure", "shortDescription": { "text": "Reset strings on fgets() or fgetws() failure" }, "fullDescription": { "text": "Reset strings on fgets() or fgetws() failure [CERT_C-FIO40-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Reset strings on fgets() or fgetws() failure [CERT_C-FIO40-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO40_C (RULE) Reset strings on fgets() or fgetws() failure" ] } }, { "id": "CERT_C-MEM07-a", "name": "The validity of values passed to library functions shall be checked", "shortDescription": { "text": "The validity of values passed to library functions shall be checked" }, "fullDescription": { "text": "The validity of values passed to library functions shall be checked [CERT_C-MEM07-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The validity of values passed to library functions shall be checked [CERT_C-MEM07-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM07_C (REC) Ensure that the arguments to calloc(), when multiplied, do not wrap" ] } }, { "id": "CERT_C-MSC32-d", "name": "Properly seed pseudorandom number generators", "shortDescription": { "text": "Properly seed pseudorandom number generators" }, "fullDescription": { "text": "Properly seed pseudorandom number generators [CERT_C-MSC32-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly seed pseudorandom number generators [CERT_C-MSC32-d]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC32_C (RULE) Properly seed pseudorandom number generators" ] } }, { "id": "CERT_C-MSC33-a", "name": "The 'asctime()' and 'asctime_r()' functions should not be used", "shortDescription": { "text": "The 'asctime()' and 'asctime_r()' functions should not be used" }, "fullDescription": { "text": "The 'asctime()' and 'asctime_r()' functions should not be used [CERT_C-MSC33-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'asctime()' and 'asctime_r()' functions should not be used [CERT_C-MSC33-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC33_C (RULE) Do not pass invalid data to the asctime() function" ] } }, { "id": "CERT_C-MSC38-a", "name": "A function-like macro shall not be invoked without all of its arguments", "shortDescription": { "text": "A function-like macro shall not be invoked without all of its arguments" }, "fullDescription": { "text": "A function-like macro shall not be invoked without all of its arguments [CERT_C-MSC38-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function-like macro shall not be invoked without all of its arguments [CERT_C-MSC38-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC38_C (RULE) Do not treat a predefined identifier as an object if it might only be implemented as a macro" ] } }, { "id": "CERT_C-MSC37-a", "name": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression", "shortDescription": { "text": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" }, "fullDescription": { "text": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression [CERT_C-MSC37-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression [CERT_C-MSC37-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC37_C (RULE) Ensure that control never reaches the end of a non-void function" ] } }, { "id": "CERT_C-MSC39-a", "name": "Use macros for variable arguments correctly", "shortDescription": { "text": "Use macros for variable arguments correctly" }, "fullDescription": { "text": "Use macros for variable arguments correctly [CERT_C-MSC39-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use macros for variable arguments correctly [CERT_C-MSC39-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC39_C (RULE) Do not call va_arg() on a va_list that has an indeterminate value" ] } }, { "id": "CERT_C-EXP30-a", "name": "The value of an expression shall be the same under any order of evaluation that the standard permits", "shortDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits" }, "fullDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [CERT_C-EXP30-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [CERT_C-EXP30-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP30_C (RULE) Do not depend on the order of evaluation for side effects" ] } }, { "id": "CERT_C-EXP30-b", "name": "Don't write code that depends on the order of evaluation of function arguments", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function arguments" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function arguments [CERT_C-EXP30-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of function arguments [CERT_C-EXP30-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP30_C (RULE) Do not depend on the order of evaluation for side effects" ] } }, { "id": "CERT_C-EXP30-c", "name": "Don't write code that depends on the order of evaluation of function designator and function arguments", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments [CERT_C-EXP30-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments [CERT_C-EXP30-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP30_C (RULE) Do not depend on the order of evaluation for side effects" ] } }, { "id": "CERT_C-EXP30-d", "name": "Don't write code that depends on the order of evaluation of expression that involves a function call", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call [CERT_C-EXP30-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call [CERT_C-EXP30-d]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP30_C (RULE) Do not depend on the order of evaluation for side effects" ] } }, { "id": "CERT_C-CON40-a", "name": "Do not refer to an atomic variable twice in an expression", "shortDescription": { "text": "Do not refer to an atomic variable twice in an expression" }, "fullDescription": { "text": "Do not refer to an atomic variable twice in an expression [CERT_C-CON40-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not refer to an atomic variable twice in an expression [CERT_C-CON40-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-CON40_C (RULE) Do not refer to an atomic variable twice in an expression" ] } }, { "id": "CERT_C-EXP20-a", "name": "Avoid comparing values with the 'TRUE' identifier using equality operators (\"==\", \"!=\")", "shortDescription": { "text": "Avoid comparing values with the 'TRUE' identifier using equality operators (\"==\", \"!=\")" }, "fullDescription": { "text": "Avoid comparing values with the 'TRUE' identifier using equality operators (\"==\", \"!=\") [CERT_C-EXP20-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid comparing values with the 'TRUE' identifier using equality operators (\"==\", \"!=\") [CERT_C-EXP20-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP20_C (REC) Perform explicit tests to determine success, true and false, and equality" ] } }, { "id": "CERT_C-CON43-a", "name": "Do not use global variable with different locks set", "shortDescription": { "text": "Do not use global variable with different locks set" }, "fullDescription": { "text": "Do not use global variable with different locks set [CERT_C-CON43-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use global variable with different locks set [CERT_C-CON43-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-CON43_C (RULE) Do not allow data races in multithreaded code" ] } }, { "id": "CERT_C-CON41-a", "name": "Wrap functions that can fail spuriously in a loop", "shortDescription": { "text": "Wrap functions that can fail spuriously in a loop" }, "fullDescription": { "text": "Wrap functions that can fail spuriously in a loop [CERT_C-CON41-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Wrap functions that can fail spuriously in a loop [CERT_C-CON41-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-CON41_C (RULE) Wrap functions that can fail spuriously in a loop" ] } }, { "id": "CERT_C-MSC41-a", "name": "Do not hard code string literals", "shortDescription": { "text": "Do not hard code string literals" }, "fullDescription": { "text": "Do not hard code string literals [CERT_C-MSC41-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not hard code string literals [CERT_C-MSC41-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC41_C (RULE) Never hard code sensitive information" ] } }, { "id": "CERT_C-MSC40-a", "name": "An inline definition of a function with external linkage shall not contain definitions and uses of static objects", "shortDescription": { "text": "An inline definition of a function with external linkage shall not contain definitions and uses of static objects" }, "fullDescription": { "text": "An inline definition of a function with external linkage shall not contain definitions and uses of static objects [CERT_C-MSC40-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An inline definition of a function with external linkage shall not contain definitions and uses of static objects [CERT_C-MSC40-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC40_C (RULE) Do not violate constraints" ] } }, { "id": "CERT_C-MEM33-a", "name": "Allocate structures containing a flexible array member dynamically", "shortDescription": { "text": "Allocate structures containing a flexible array member dynamically" }, "fullDescription": { "text": "Allocate structures containing a flexible array member dynamically [CERT_C-MEM33-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Allocate structures containing a flexible array member dynamically [CERT_C-MEM33-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM33_C (RULE) Allocate and copy structures containing a flexible array member dynamically" ] } }, { "id": "CERT_C-MEM33-b", "name": "Do not copy instances of structures containing a flexible array member", "shortDescription": { "text": "Do not copy instances of structures containing a flexible array member" }, "fullDescription": { "text": "Do not copy instances of structures containing a flexible array member [CERT_C-MEM33-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not copy instances of structures containing a flexible array member [CERT_C-MEM33-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM33_C (RULE) Allocate and copy structures containing a flexible array member dynamically" ] } }, { "id": "CERT_C-MEM34-a", "name": "Do not free resources using invalid pointers", "shortDescription": { "text": "Do not free resources using invalid pointers" }, "fullDescription": { "text": "Do not free resources using invalid pointers [CERT_C-MEM34-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not free resources using invalid pointers [CERT_C-MEM34-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM34_C (RULE) Only free memory allocated dynamically" ] } }, { "id": "CERT_C-MEM31-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [CERT_C-MEM31-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure resources are freed [CERT_C-MEM31-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM31_C (RULE) Free dynamically allocated memory when no longer needed" ] } }, { "id": "CERT_C-MEM35-a", "name": "Do not use sizeof operator on pointer type to specify the size of the memory to be allocated via 'malloc', 'calloc' or 'realloc' function", "shortDescription": { "text": "Do not use sizeof operator on pointer type to specify the size of the memory to be allocated via 'malloc', 'calloc' or 'realloc' function" }, "fullDescription": { "text": "Do not use sizeof operator on pointer type to specify the size of the memory to be allocated via 'malloc', 'calloc' or 'realloc' function [CERT_C-MEM35-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use sizeof operator on pointer type to specify the size of the memory to be allocated via 'malloc', 'calloc' or 'realloc' function [CERT_C-MEM35-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM35_C (RULE) Allocate sufficient memory for an object" ] } }, { "id": "CERT_C-SIG01-a", "name": "The signal handling facilities of <signal.h> shall not be used", "shortDescription": { "text": "The signal handling facilities of <signal.h> shall not be used" }, "fullDescription": { "text": "The signal handling facilities of <signal.h> shall not be used [CERT_C-SIG01-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The signal handling facilities of <signal.h> shall not be used [CERT_C-SIG01-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-SIG01_C (REC) Understand implementation-specific details regarding signal handler persistence" ] } }, { "id": "CERT_C-MEM36-a", "name": "Do not modify the alignment of objects by calling realloc()", "shortDescription": { "text": "Do not modify the alignment of objects by calling realloc()" }, "fullDescription": { "text": "Do not modify the alignment of objects by calling realloc() [CERT_C-MEM36-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not modify the alignment of objects by calling realloc() [CERT_C-MEM36-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM36_C (RULE) Do not modify the alignment of objects by calling realloc()" ] } }, { "id": "CERT_C-SIG00-a", "name": "The signal handling facilities of <signal.h> shall not be used", "shortDescription": { "text": "The signal handling facilities of <signal.h> shall not be used" }, "fullDescription": { "text": "The signal handling facilities of <signal.h> shall not be used [CERT_C-SIG00-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The signal handling facilities of <signal.h> shall not be used [CERT_C-SIG00-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-SIG00_C (REC) Mask signals handled by noninterruptible signal handlers" ] } }, { "id": "CERT_C-API00-a", "name": "The validity of parameters must be checked inside each function", "shortDescription": { "text": "The validity of parameters must be checked inside each function" }, "fullDescription": { "text": "The validity of parameters must be checked inside each function [CERT_C-API00-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The validity of parameters must be checked inside each function [CERT_C-API00-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-API00_C (REC) Functions should validate their parameters" ] } }, { "id": "CERT_C-FIO24-a", "name": "Avoid race conditions while accessing files", "shortDescription": { "text": "Avoid race conditions while accessing files" }, "fullDescription": { "text": "Avoid race conditions while accessing files [CERT_C-FIO24-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid race conditions while accessing files [CERT_C-FIO24-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO24_C (REC) Do not open a file that is already open" ] } }, { "id": "CERT_C-SIG02-a", "name": "The signal handling facilities of <signal.h> shall not be used", "shortDescription": { "text": "The signal handling facilities of <signal.h> shall not be used" }, "fullDescription": { "text": "The signal handling facilities of <signal.h> shall not be used [CERT_C-SIG02-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The signal handling facilities of <signal.h> shall not be used [CERT_C-SIG02-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-SIG02_C (REC) Avoid using signals to implement normal functionality" ] } }, { "id": "CERT_C-FIO21-a", "name": "Usage of functions prone to race is not allowed", "shortDescription": { "text": "Usage of functions prone to race is not allowed" }, "fullDescription": { "text": "Usage of functions prone to race is not allowed [CERT_C-FIO21-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Usage of functions prone to race is not allowed [CERT_C-FIO21-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO21_C (REC) Do not create temporary files in shared directories" ] } }, { "id": "CERT_C-FIO22-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [CERT_C-FIO22-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Ensure resources are freed [CERT_C-FIO22-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO22_C (REC) Close files before spawning processes" ] } }, { "id": "CERT_C-EXP40-a", "name": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference", "shortDescription": { "text": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" }, "fullDescription": { "text": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference [CERT_C-EXP40-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference [CERT_C-EXP40-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP40_C (RULE) Do not modify constant objects" ] } }, { "id": "CERT_C-MEM30-a", "name": "Do not use resources that have been freed", "shortDescription": { "text": "Do not use resources that have been freed" }, "fullDescription": { "text": "Do not use resources that have been freed [CERT_C-MEM30-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use resources that have been freed [CERT_C-MEM30-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM30_C (RULE) Do not access freed memory" ] } }, { "id": "CERT_C-EXP33-a", "name": "Avoid use before initialization", "shortDescription": { "text": "Avoid use before initialization" }, "fullDescription": { "text": "Avoid use before initialization [CERT_C-EXP33-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid use before initialization [CERT_C-EXP33-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP33_C (RULE) Do not read uninitialized memory" ] } }, { "id": "CERT_C-EXP34-a", "name": "Avoid null pointer dereferencing", "shortDescription": { "text": "Avoid null pointer dereferencing" }, "fullDescription": { "text": "Avoid null pointer dereferencing [CERT_C-EXP34-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid null pointer dereferencing [CERT_C-EXP34-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP34_C (RULE) Do not dereference null pointers" ] } }, { "id": "CERT_C-EXP32-a", "name": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference", "shortDescription": { "text": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" }, "fullDescription": { "text": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference [CERT_C-EXP32-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference [CERT_C-EXP32-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP32_C (RULE) Do not access a volatile object through a nonvolatile reference" ] } }, { "id": "CERT_C-CON32-a", "name": "Use locks to prevent race conditions when modifying bit fields", "shortDescription": { "text": "Use locks to prevent race conditions when modifying bit fields" }, "fullDescription": { "text": "Use locks to prevent race conditions when modifying bit fields [CERT_C-CON32-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use locks to prevent race conditions when modifying bit fields [CERT_C-CON32-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-CON32_C (RULE) Prevent data races when accessing bit-fields from multiple threads" ] } }, { "id": "CERT_C-EXP37-a", "name": "Conversions shall not be performed between non compatible pointer to a function types", "shortDescription": { "text": "Conversions shall not be performed between non compatible pointer to a function types" }, "fullDescription": { "text": "Conversions shall not be performed between non compatible pointer to a function types [CERT_C-EXP37-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Conversions shall not be performed between non compatible pointer to a function types [CERT_C-EXP37-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP37_C (RULE) Call functions with the correct number and type of arguments" ] } }, { "id": "CERT_C-EXP37-b", "name": "Specify the access permission bits if a file is created using the 'open' or 'openat' system call", "shortDescription": { "text": "Specify the access permission bits if a file is created using the 'open' or 'openat' system call" }, "fullDescription": { "text": "Specify the access permission bits if a file is created using the 'open' or 'openat' system call [CERT_C-EXP37-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Specify the access permission bits if a file is created using the 'open' or 'openat' system call [CERT_C-EXP37-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP37_C (RULE) Call functions with the correct number and type of arguments" ] } }, { "id": "CERT_C-EXP37-d", "name": "Functions shall always have visible prototype at the function call", "shortDescription": { "text": "Functions shall always have visible prototype at the function call" }, "fullDescription": { "text": "Functions shall always have visible prototype at the function call [CERT_C-EXP37-d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Functions shall always have visible prototype at the function call [CERT_C-EXP37-d]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP37_C (RULE) Call functions with the correct number and type of arguments" ] } }, { "id": "CERT_C-CON33-a", "name": "Avoid using thread-unsafe functions", "shortDescription": { "text": "Avoid using thread-unsafe functions" }, "fullDescription": { "text": "Avoid using thread-unsafe functions [CERT_C-CON33-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid using thread-unsafe functions [CERT_C-CON33-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-CON33_C (RULE) Avoid race conditions when using library functions" ] } }, { "id": "CERT_C-CON30-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [CERT_C-CON30-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Ensure resources are freed [CERT_C-CON30-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-CON30_C (RULE) Clean up thread-specific storage" ] } }, { "id": "CERT_C-EXP35-a", "name": "Do not modify objects with temporary lifetime", "shortDescription": { "text": "Do not modify objects with temporary lifetime" }, "fullDescription": { "text": "Do not modify objects with temporary lifetime [CERT_C-EXP35-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not modify objects with temporary lifetime [CERT_C-EXP35-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP35_C (RULE) Do not modify objects with temporary lifetime" ] } }, { "id": "CERT_C-CON31-a", "name": "Do not destroy another thread's mutex", "shortDescription": { "text": "Do not destroy another thread's mutex" }, "fullDescription": { "text": "Do not destroy another thread's mutex [CERT_C-CON31-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not destroy another thread's mutex [CERT_C-CON31-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-CON31_C (RULE) Do not destroy a mutex while it is locked" ] } }, { "id": "CERT_C-CON31-b", "name": "Do not use resources that have been freed", "shortDescription": { "text": "Do not use resources that have been freed" }, "fullDescription": { "text": "Do not use resources that have been freed [CERT_C-CON31-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use resources that have been freed [CERT_C-CON31-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-CON31_C (RULE) Do not destroy a mutex while it is locked" ] } }, { "id": "CERT_C-CON31-c", "name": "Do not free resources using invalid pointers", "shortDescription": { "text": "Do not free resources using invalid pointers" }, "fullDescription": { "text": "Do not free resources using invalid pointers [CERT_C-CON31-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not free resources using invalid pointers [CERT_C-CON31-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-CON31_C (RULE) Do not destroy a mutex while it is locked" ] } }, { "id": "CERT_C-EXP36-a", "name": "Do not cast pointers into more strictly aligned pointer types", "shortDescription": { "text": "Do not cast pointers into more strictly aligned pointer types" }, "fullDescription": { "text": "Do not cast pointers into more strictly aligned pointer types [CERT_C-EXP36-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not cast pointers into more strictly aligned pointer types [CERT_C-EXP36-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP36_C (RULE) Do not cast pointers into more strictly aligned pointer types" ] } }, { "id": "CERT_C-CON36-a", "name": "Wrap functions that can spuriously wake up in a loop", "shortDescription": { "text": "Wrap functions that can spuriously wake up in a loop" }, "fullDescription": { "text": "Wrap functions that can spuriously wake up in a loop [CERT_C-CON36-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Wrap functions that can spuriously wake up in a loop [CERT_C-CON36-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-CON36_C (RULE) Wrap functions that can spuriously wake up in a loop" ] } }, { "id": "CERT_C-CON37-a", "name": "The signal handling facilities of <signal.h> shall not be used", "shortDescription": { "text": "The signal handling facilities of <signal.h> shall not be used" }, "fullDescription": { "text": "The signal handling facilities of <signal.h> shall not be used [CERT_C-CON37-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The signal handling facilities of <signal.h> shall not be used [CERT_C-CON37-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-CON37_C (RULE) Do not call signal() in a multithreaded program" ] } }, { "id": "CERT_C-CON34-a", "name": "Declare objects shared between POSIX threads with appropriate storage durations", "shortDescription": { "text": "Declare objects shared between POSIX threads with appropriate storage durations" }, "fullDescription": { "text": "Declare objects shared between POSIX threads with appropriate storage durations [CERT_C-CON34-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare objects shared between POSIX threads with appropriate storage durations [CERT_C-CON34-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-CON34_C (RULE) Declare objects shared between threads with appropriate storage durations" ] } }, { "id": "CERT_C-EXP39-a", "name": "There shall be no implicit conversions from integral to floating type", "shortDescription": { "text": "There shall be no implicit conversions from integral to floating type" }, "fullDescription": { "text": "There shall be no implicit conversions from integral to floating type [CERT_C-EXP39-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no implicit conversions from integral to floating type [CERT_C-EXP39-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP39_C (RULE) Do not access a variable through a pointer of an incompatible type" ] } }, { "id": "CERT_C-EXP39-b", "name": "A cast should not be performed between a pointer to object type and a different pointer to object type", "shortDescription": { "text": "A cast should not be performed between a pointer to object type and a different pointer to object type" }, "fullDescription": { "text": "A cast should not be performed between a pointer to object type and a different pointer to object type [CERT_C-EXP39-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A cast should not be performed between a pointer to object type and a different pointer to object type [CERT_C-EXP39-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP39_C (RULE) Do not access a variable through a pointer of an incompatible type" ] } }, { "id": "CERT_C-EXP39-c", "name": "Avoid accessing arrays and pointers out of bounds", "shortDescription": { "text": "Avoid accessing arrays and pointers out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays and pointers out of bounds [CERT_C-EXP39-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid accessing arrays and pointers out of bounds [CERT_C-EXP39-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP39_C (RULE) Do not access a variable through a pointer of an incompatible type" ] } }, { "id": "CERT_C-EXP39-d", "name": "Avoid buffer overflow from tainted data due to defining incorrect format limits", "shortDescription": { "text": "Avoid buffer overflow from tainted data due to defining incorrect format limits" }, "fullDescription": { "text": "Avoid buffer overflow from tainted data due to defining incorrect format limits [CERT_C-EXP39-d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid buffer overflow from tainted data due to defining incorrect format limits [CERT_C-EXP39-d]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP39_C (RULE) Do not access a variable through a pointer of an incompatible type" ] } }, { "id": "CERT_C-EXP39-e", "name": "Avoid buffer read overflow from tainted data", "shortDescription": { "text": "Avoid buffer read overflow from tainted data" }, "fullDescription": { "text": "Avoid buffer read overflow from tainted data [CERT_C-EXP39-e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid buffer read overflow from tainted data [CERT_C-EXP39-e]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP39_C (RULE) Do not access a variable through a pointer of an incompatible type" ] } }, { "id": "CERT_C-EXP39-f", "name": "Avoid buffer write overflow from tainted data", "shortDescription": { "text": "Avoid buffer write overflow from tainted data" }, "fullDescription": { "text": "Avoid buffer write overflow from tainted data [CERT_C-EXP39-f]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid buffer write overflow from tainted data [CERT_C-EXP39-f]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP39_C (RULE) Do not access a variable through a pointer of an incompatible type" ] } }, { "id": "CERT_C-CON35-a", "name": "Do not acquire locks in different order", "shortDescription": { "text": "Do not acquire locks in different order" }, "fullDescription": { "text": "Do not acquire locks in different order [CERT_C-CON35-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not acquire locks in different order [CERT_C-CON35-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-CON35_C (RULE) Avoid deadlock by locking in a predefined order" ] } }, { "id": "CERT_C-CON38-a", "name": "Use the 'cnd_signal()' function with a unique condition variable", "shortDescription": { "text": "Use the 'cnd_signal()' function with a unique condition variable" }, "fullDescription": { "text": "Use the 'cnd_signal()' function with a unique condition variable [CERT_C-CON38-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use the 'cnd_signal()' function with a unique condition variable [CERT_C-CON38-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-CON38_C (RULE) Preserve thread safety and liveness when using condition variables" ] } }, { "id": "CERT_C-CON39-a", "name": "Do not join or detach a thread that was previously joined or detached", "shortDescription": { "text": "Do not join or detach a thread that was previously joined or detached" }, "fullDescription": { "text": "Do not join or detach a thread that was previously joined or detached [CERT_C-CON39-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not join or detach a thread that was previously joined or detached [CERT_C-CON39-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-CON39_C (RULE) Do not join or detach a thread that was previously joined or detached" ] } }, { "id": "CERT_C-DCL22-a", "name": "Avoid unused values", "shortDescription": { "text": "Avoid unused values" }, "fullDescription": { "text": "Avoid unused values [CERT_C-DCL22-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid unused values [CERT_C-DCL22-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL22_C (REC) Use volatile for data that cannot be cached" ] } }, { "id": "CERT_C-DCL20-a", "name": "The number of arguments passed to a function shall match the number of parameters", "shortDescription": { "text": "The number of arguments passed to a function shall match the number of parameters" }, "fullDescription": { "text": "The number of arguments passed to a function shall match the number of parameters [CERT_C-DCL20-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The number of arguments passed to a function shall match the number of parameters [CERT_C-DCL20-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL20_C (REC) Explicitly specify void when a function accepts no arguments" ] } }, { "id": "CERT_C-EXP00-a", "name": "Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used", "shortDescription": { "text": "Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used" }, "fullDescription": { "text": "Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used [CERT_C-EXP00-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used [CERT_C-EXP00-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP00_C (REC) Use parentheses for precedence of operation" ] } }, { "id": "CERT_C-EXP05-a", "name": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference", "shortDescription": { "text": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" }, "fullDescription": { "text": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference [CERT_C-EXP05-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference [CERT_C-EXP05-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP05_C (REC) Do not cast away a const qualification" ] } }, { "id": "CERT_C-EXP02-a", "name": "The right-hand operand of a logical && or || operator shall not contain side effects", "shortDescription": { "text": "The right-hand operand of a logical && or || operator shall not contain side effects" }, "fullDescription": { "text": "The right-hand operand of a logical && or || operator shall not contain side effects [CERT_C-EXP02-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The right-hand operand of a logical && or || operator shall not contain side effects [CERT_C-EXP02-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP02_C (REC) Be aware of the short-circuit behavior of the logical AND and OR operators" ] } }, { "id": "CERT_C-EXP08-a", "name": "Pointer arithmetic should not be used", "shortDescription": { "text": "Pointer arithmetic should not be used" }, "fullDescription": { "text": "Pointer arithmetic should not be used [CERT_C-EXP08-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Pointer arithmetic should not be used [CERT_C-EXP08-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP08_C (REC) Ensure pointer arithmetic is used correctly" ] } }, { "id": "CERT_C-EXP08-b", "name": "Avoid accessing arrays out of bounds", "shortDescription": { "text": "Avoid accessing arrays out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays out of bounds [CERT_C-EXP08-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays out of bounds [CERT_C-EXP08-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP08_C (REC) Ensure pointer arithmetic is used correctly" ] } }, { "id": "CERT_C-DCL19-a", "name": "Declare variables as locally as possible", "shortDescription": { "text": "Declare variables as locally as possible" }, "fullDescription": { "text": "Declare variables as locally as possible [CERT_C-DCL19-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare variables as locally as possible [CERT_C-DCL19-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL19_C (REC) Minimize the scope of variables and functions" ] } }, { "id": "CERT_C-DCL18-a", "name": "Octal and hexadecimal escape sequences shall be terminated", "shortDescription": { "text": "Octal and hexadecimal escape sequences shall be terminated" }, "fullDescription": { "text": "Octal and hexadecimal escape sequences shall be terminated [CERT_C-DCL18-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Octal and hexadecimal escape sequences shall be terminated [CERT_C-DCL18-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL18_C (REC) Do not begin integer constants with 0 when specifying a decimal value" ] } }, { "id": "CERT_C-DCL18-b", "name": "Octal constants (other than zero) shall not be used", "shortDescription": { "text": "Octal constants (other than zero) shall not be used" }, "fullDescription": { "text": "Octal constants (other than zero) shall not be used [CERT_C-DCL18-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Octal constants (other than zero) shall not be used [CERT_C-DCL18-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL18_C (REC) Do not begin integer constants with 0 when specifying a decimal value" ] } }, { "id": "CERT_C-DCL12-a", "name": "If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden", "shortDescription": { "text": "If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" }, "fullDescription": { "text": "If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden [CERT_C-DCL12-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden [CERT_C-DCL12-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL12_C (REC) Implement abstract data types using opaque types" ] } }, { "id": "CERT_C-FIO01-a", "name": "Don't use chmod(), chown(), chgrp()", "shortDescription": { "text": "Don't use chmod(), chown(), chgrp()" }, "fullDescription": { "text": "Don't use chmod(), chown(), chgrp() [CERT_C-FIO01-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't use chmod(), chown(), chgrp() [CERT_C-FIO01-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO01_C (REC) Be careful using functions that use file names for identification" ] } }, { "id": "CERT_C-FIO01-b", "name": "Usage of functions prone to race is not allowed", "shortDescription": { "text": "Usage of functions prone to race is not allowed" }, "fullDescription": { "text": "Usage of functions prone to race is not allowed [CERT_C-FIO01-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Usage of functions prone to race is not allowed [CERT_C-FIO01-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO01_C (REC) Be careful using functions that use file names for identification" ] } }, { "id": "CERT_C-DCL11-a", "name": "There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function", "shortDescription": { "text": "There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function" }, "fullDescription": { "text": "There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function [CERT_C-DCL11-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function [CERT_C-DCL11-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL11_C (REC) Understand the type issues associated with variadic functions" ] } }, { "id": "CERT_C-DCL11-b", "name": "There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function", "shortDescription": { "text": "There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" }, "fullDescription": { "text": "There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function [CERT_C-DCL11-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function [CERT_C-DCL11-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL11_C (REC) Understand the type issues associated with variadic functions" ] } }, { "id": "CERT_C-DCL11-c", "name": "There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function", "shortDescription": { "text": "There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function" }, "fullDescription": { "text": "There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function [CERT_C-DCL11-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function [CERT_C-DCL11-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL11_C (REC) Understand the type issues associated with variadic functions" ] } }, { "id": "CERT_C-DCL11-d", "name": "There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function", "shortDescription": { "text": "There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" }, "fullDescription": { "text": "There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function [CERT_C-DCL11-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function [CERT_C-DCL11-d]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL11_C (REC) Understand the type issues associated with variadic functions" ] } }, { "id": "CERT_C-DCL11-e", "name": "There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function", "shortDescription": { "text": "There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" }, "fullDescription": { "text": "There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function [CERT_C-DCL11-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function [CERT_C-DCL11-e]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL11_C (REC) Understand the type issues associated with variadic functions" ] } }, { "id": "CERT_C-DCL11-f", "name": "The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal", "shortDescription": { "text": "The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" }, "fullDescription": { "text": "The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal [CERT_C-DCL11-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal [CERT_C-DCL11-f]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL11_C (REC) Understand the type issues associated with variadic functions" ] } }, { "id": "CERT_C-DCL10-a", "name": "The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal", "shortDescription": { "text": "The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" }, "fullDescription": { "text": "The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal [CERT_C-DCL10-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal [CERT_C-DCL10-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL10_C (REC) Maintain the contract between the writer and caller of variadic functions" ] } }, { "id": "CERT_C-DCL16-a", "name": "The lowercase form of 'L' shall not be used as the first character in a literal suffix", "shortDescription": { "text": "The lowercase form of 'L' shall not be used as the first character in a literal suffix" }, "fullDescription": { "text": "The lowercase form of 'L' shall not be used as the first character in a literal suffix [CERT_C-DCL16-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The lowercase form of 'L' shall not be used as the first character in a literal suffix [CERT_C-DCL16-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL16_C (REC) Use \"L,\" not \"l,\" to indicate a long value" ] } }, { "id": "CERT_C-DCL15-a", "name": "Objects or functions with external linkage shall be declared in a header file", "shortDescription": { "text": "Objects or functions with external linkage shall be declared in a header file" }, "fullDescription": { "text": "Objects or functions with external linkage shall be declared in a header file [CERT_C-DCL15-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Objects or functions with external linkage shall be declared in a header file [CERT_C-DCL15-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL15_C (REC) Declare file-scope objects or functions that do not need external linkage as static" ] } }, { "id": "CERT_C-DCL13-a", "name": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object", "shortDescription": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" }, "fullDescription": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object [CERT_C-DCL13-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object [CERT_C-DCL13-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL13_C (REC) Declare function parameters that are pointers to values not changed by the function as const" ] } }, { "id": "CERT_C-EXP12-a", "name": "The value returned by a function having non-void return type shall be used", "shortDescription": { "text": "The value returned by a function having non-void return type shall be used" }, "fullDescription": { "text": "The value returned by a function having non-void return type shall be used [CERT_C-EXP12-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The value returned by a function having non-void return type shall be used [CERT_C-EXP12-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP12_C (REC) Do not ignore values returned by functions" ] } }, { "id": "CERT_C-EXP12-b", "name": "The value returned by a function having non-void return type shall be used", "shortDescription": { "text": "The value returned by a function having non-void return type shall be used" }, "fullDescription": { "text": "The value returned by a function having non-void return type shall be used [CERT_C-EXP12-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The value returned by a function having non-void return type shall be used [CERT_C-EXP12-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP12_C (REC) Do not ignore values returned by functions" ] } }, { "id": "CERT_C-EXP10-a", "name": "The value of an expression shall be the same under any order of evaluation that the standard permits", "shortDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits" }, "fullDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [CERT_C-EXP10-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [CERT_C-EXP10-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP10_C (REC) Do not depend on the order of evaluation of subexpressions or the order in which side effects take place" ] } }, { "id": "CERT_C-EXP10-b", "name": "Don't write code that depends on the order of evaluation of function arguments", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function arguments" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function arguments [CERT_C-EXP10-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of function arguments [CERT_C-EXP10-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP10_C (REC) Do not depend on the order of evaluation of subexpressions or the order in which side effects take place" ] } }, { "id": "CERT_C-EXP10-c", "name": "Don't write code that depends on the order of evaluation of function designator and function arguments", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments [CERT_C-EXP10-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments [CERT_C-EXP10-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP10_C (REC) Do not depend on the order of evaluation of subexpressions or the order in which side effects take place" ] } }, { "id": "CERT_C-EXP10-d", "name": "Don't write code that depends on the order of evaluation of expression that involves a function call", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call [CERT_C-EXP10-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call [CERT_C-EXP10-d]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP10_C (REC) Do not depend on the order of evaluation of subexpressions or the order in which side effects take place" ] } }, { "id": "CERT_C-EXP15-a", "name": "Suspicious use of semicolon", "shortDescription": { "text": "Suspicious use of semicolon" }, "fullDescription": { "text": "Suspicious use of semicolon [CERT_C-EXP15-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Suspicious use of semicolon [CERT_C-EXP15-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP15_C (REC) Do not place a semicolon on the same line as an if, for, or while statement" ] } }, { "id": "CERT_C-EXP16-a", "name": "Function address should not be compared to zero", "shortDescription": { "text": "Function address should not be compared to zero" }, "fullDescription": { "text": "Function address should not be compared to zero [CERT_C-EXP16-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Function address should not be compared to zero [CERT_C-EXP16-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP16_C (REC) Do not compare function pointers to constant values" ] } }, { "id": "CERT_C-EXP14-a", "name": "Avoid mixing arithmetic of different precisions in the same expression", "shortDescription": { "text": "Avoid mixing arithmetic of different precisions in the same expression" }, "fullDescription": { "text": "Avoid mixing arithmetic of different precisions in the same expression [CERT_C-EXP14-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid mixing arithmetic of different precisions in the same expression [CERT_C-EXP14-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP14_C (REC) Beware of integer promotion when performing bitwise operations on integer types smaller than int" ] } }, { "id": "CERT_C-EXP19-a", "name": "The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement", "shortDescription": { "text": "The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" }, "fullDescription": { "text": "The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement [CERT_C-EXP19-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement [CERT_C-EXP19-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP19_C (REC) Use braces for the body of an if, for, or while statement" ] } }, { "id": "CERT_C-STR00-a", "name": "The plain char type shall be used only for the storage and use of character values", "shortDescription": { "text": "The plain char type shall be used only for the storage and use of character values" }, "fullDescription": { "text": "The plain char type shall be used only for the storage and use of character values [CERT_C-STR00-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The plain char type shall be used only for the storage and use of character values [CERT_C-STR00-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-STR00_C (REC) Represent characters using an appropriate type" ] } }, { "id": "CERT_C-STR09-a", "name": "Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary & operator", "shortDescription": { "text": "Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary & operator" }, "fullDescription": { "text": "Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary & operator [CERT_C-STR09-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary & operator [CERT_C-STR09-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-STR09_C (REC) Don't assume numeric values for expressions with type plain character" ] } }, { "id": "CERT_C-STR07-a", "name": "Avoid using unsafe string functions that do not check bounds", "shortDescription": { "text": "Avoid using unsafe string functions that do not check bounds" }, "fullDescription": { "text": "Avoid using unsafe string functions that do not check bounds [CERT_C-STR07-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using unsafe string functions that do not check bounds [CERT_C-STR07-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-STR07_C (REC) Use the bounds-checking interfaces for string manipulation" ] } }, { "id": "CERT_C-STR04-a", "name": "The plain char type shall be used only for the storage and use of character values", "shortDescription": { "text": "The plain char type shall be used only for the storage and use of character values" }, "fullDescription": { "text": "The plain char type shall be used only for the storage and use of character values [CERT_C-STR04-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The plain char type shall be used only for the storage and use of character values [CERT_C-STR04-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-STR04_C (REC) Use plain char for characters in the basic character set" ] } }, { "id": "CERT_C-STR05-a", "name": "A string literal shall not be modified", "shortDescription": { "text": "A string literal shall not be modified" }, "fullDescription": { "text": "A string literal shall not be modified [CERT_C-STR05-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A string literal shall not be modified [CERT_C-STR05-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-STR05_C (REC) Use pointers to const when referring to string literals" ] } }, { "id": "CERT_C-STR02-a", "name": "Protect against command injection", "shortDescription": { "text": "Protect against command injection" }, "fullDescription": { "text": "Protect against command injection [CERT_C-STR02-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against command injection [CERT_C-STR02-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-STR02_C (REC) Sanitize data passed to complex subsystems" ] } }, { "id": "CERT_C-STR02-b", "name": "Protect against file name injection", "shortDescription": { "text": "Protect against file name injection" }, "fullDescription": { "text": "Protect against file name injection [CERT_C-STR02-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against file name injection [CERT_C-STR02-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-STR02_C (REC) Sanitize data passed to complex subsystems" ] } }, { "id": "CERT_C-STR02-c", "name": "Protect against SQL injection", "shortDescription": { "text": "Protect against SQL injection" }, "fullDescription": { "text": "Protect against SQL injection [CERT_C-STR02-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against SQL injection [CERT_C-STR02-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-STR02_C (REC) Sanitize data passed to complex subsystems" ] } }, { "id": "CERT_C-STR03-a", "name": "Avoid overflow due to reading a not zero terminated string", "shortDescription": { "text": "Avoid overflow due to reading a not zero terminated string" }, "fullDescription": { "text": "Avoid overflow due to reading a not zero terminated string [CERT_C-STR03-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow due to reading a not zero terminated string [CERT_C-STR03-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-STR03_C (REC) Do not inadvertently truncate a string" ] } }, { "id": "CERT_C-DCL41-a", "name": "A switch statement shall only contain switch labels and switch clauses, and no other code", "shortDescription": { "text": "A switch statement shall only contain switch labels and switch clauses, and no other code" }, "fullDescription": { "text": "A switch statement shall only contain switch labels and switch clauses, and no other code [CERT_C-DCL41-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A switch statement shall only contain switch labels and switch clauses, and no other code [CERT_C-DCL41-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL41_C (RULE) Do not declare variables inside a switch statement before the first case label" ] } }, { "id": "CERT_C-DCL40-a", "name": "All declarations of an object or function shall have compatible types", "shortDescription": { "text": "All declarations of an object or function shall have compatible types" }, "fullDescription": { "text": "All declarations of an object or function shall have compatible types [CERT_C-DCL40-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All declarations of an object or function shall have compatible types [CERT_C-DCL40-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL40_C (RULE) Do not create incompatible declarations of the same function or object" ] } }, { "id": "CERT_C-DCL40-b", "name": "If objects or functions are declared more than once their types shall be compatible", "shortDescription": { "text": "If objects or functions are declared more than once their types shall be compatible" }, "fullDescription": { "text": "If objects or functions are declared more than once their types shall be compatible [CERT_C-DCL40-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If objects or functions are declared more than once their types shall be compatible [CERT_C-DCL40-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL40_C (RULE) Do not create incompatible declarations of the same function or object" ] } }, { "id": "CERT_C-CON01-a", "name": "Do not abandon unreleased locks", "shortDescription": { "text": "Do not abandon unreleased locks" }, "fullDescription": { "text": "Do not abandon unreleased locks [CERT_C-CON01-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not abandon unreleased locks [CERT_C-CON01-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-CON01_C (REC) Acquire and release synchronization primitives in the same module, at the same level of abstraction" ] } }, { "id": "CERT_C-CON02-a", "name": "Do not use the volatile keyword", "shortDescription": { "text": "Do not use the volatile keyword" }, "fullDescription": { "text": "Do not use the volatile keyword [CERT_C-CON02-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use the volatile keyword [CERT_C-CON02-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-CON02_C (REC) Do not use volatile as a synchronization primitive" ] } }, { "id": "CERT_C-CON05-a", "name": "Do not use blocking functions while holding a lock", "shortDescription": { "text": "Do not use blocking functions while holding a lock" }, "fullDescription": { "text": "Do not use blocking functions while holding a lock [CERT_C-CON05-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use blocking functions while holding a lock [CERT_C-CON05-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-CON05_C (REC) Do not perform operations that can block while holding a lock" ] } }, { "id": "CERT_C-STR11-a", "name": "Do not specify the bound of a character array initialized with a string literal", "shortDescription": { "text": "Do not specify the bound of a character array initialized with a string literal" }, "fullDescription": { "text": "Do not specify the bound of a character array initialized with a string literal [CERT_C-STR11-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not specify the bound of a character array initialized with a string literal [CERT_C-STR11-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-STR11_C (REC) Do not specify the bound of a character array initialized with a string literal" ] } }, { "id": "CERT_C-DCL39-a", "name": "A pointer to a structure should not be passed to a function that can copy data to the user space", "shortDescription": { "text": "A pointer to a structure should not be passed to a function that can copy data to the user space" }, "fullDescription": { "text": "A pointer to a structure should not be passed to a function that can copy data to the user space [CERT_C-DCL39-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A pointer to a structure should not be passed to a function that can copy data to the user space [CERT_C-DCL39-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL39_C (RULE) Avoid information leakage when passing a structure across a trust boundary" ] } }, { "id": "CERT_C-STR10-a", "name": "Narrow and wide string literals shall not be concatenated", "shortDescription": { "text": "Narrow and wide string literals shall not be concatenated" }, "fullDescription": { "text": "Narrow and wide string literals shall not be concatenated [CERT_C-STR10-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Narrow and wide string literals shall not be concatenated [CERT_C-STR10-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-STR10_C (REC) Do not concatenate different type of string literals" ] } }, { "id": "CERT_C-DCL31-a", "name": "All functions shall be declared before use", "shortDescription": { "text": "All functions shall be declared before use" }, "fullDescription": { "text": "All functions shall be declared before use [CERT_C-DCL31-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All functions shall be declared before use [CERT_C-DCL31-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL31_C (RULE) Declare identifiers before using them" ] } }, { "id": "CERT_C-DCL38-a", "name": "The final member of a structure should not be an array of size '0' or '1'", "shortDescription": { "text": "The final member of a structure should not be an array of size '0' or '1'" }, "fullDescription": { "text": "The final member of a structure should not be an array of size '0' or '1' [CERT_C-DCL38-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The final member of a structure should not be an array of size '0' or '1' [CERT_C-DCL38-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL38_C (RULE) Use the correct syntax when declaring a flexible array member" ] } }, { "id": "CERT_C-DCL37-a", "name": "Do not #define or #undef identifiers with names which start with underscore", "shortDescription": { "text": "Do not #define or #undef identifiers with names which start with underscore" }, "fullDescription": { "text": "Do not #define or #undef identifiers with names which start with underscore [CERT_C-DCL37-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not #define or #undef identifiers with names which start with underscore [CERT_C-DCL37-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL37_C (RULE) Do not declare or define a reserved identifier" ] } }, { "id": "CERT_C-DCL36-a", "name": "Identifiers shall not simultaneously have both internal and external linkage in the same translation unit", "shortDescription": { "text": "Identifiers shall not simultaneously have both internal and external linkage in the same translation unit" }, "fullDescription": { "text": "Identifiers shall not simultaneously have both internal and external linkage in the same translation unit [CERT_C-DCL36-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers shall not simultaneously have both internal and external linkage in the same translation unit [CERT_C-DCL36-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL36_C (RULE) Do not declare an identifier with conflicting linkage classifications" ] } }, { "id": "CERT_C-DCL30-a", "name": "The address of an object with automatic storage shall not be returned from a function", "shortDescription": { "text": "The address of an object with automatic storage shall not be returned from a function" }, "fullDescription": { "text": "The address of an object with automatic storage shall not be returned from a function [CERT_C-DCL30-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The address of an object with automatic storage shall not be returned from a function [CERT_C-DCL30-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL30_C (RULE) Declare objects with appropriate storage durations" ] } }, { "id": "CERT_C-DCL30-b", "name": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist", "shortDescription": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" }, "fullDescription": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist [CERT_C-DCL30-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist [CERT_C-DCL30-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL30_C (RULE) Declare objects with appropriate storage durations" ] } }, { "id": "CERT_C-ARR01-a", "name": "Do not call 'sizeof' on a pointer type", "shortDescription": { "text": "Do not call 'sizeof' on a pointer type" }, "fullDescription": { "text": "Do not call 'sizeof' on a pointer type [CERT_C-ARR01-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not call 'sizeof' on a pointer type [CERT_C-ARR01-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ARR01_C (REC) Do not apply the sizeof operator to a pointer when taking the size of an array" ] } }, { "id": "CERT_C-ARR02-a", "name": "Explicitly specify array bounds in array declarations with initializers", "shortDescription": { "text": "Explicitly specify array bounds in array declarations with initializers" }, "fullDescription": { "text": "Explicitly specify array bounds in array declarations with initializers [CERT_C-ARR02-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Explicitly specify array bounds in array declarations with initializers [CERT_C-ARR02-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ARR02_C (REC) Explicitly specify array bounds, even if implicitly defined by an initializer" ] } }, { "id": "CERT_C-PRE02-a", "name": "Enclose in parentheses whole definition of a function-like macro", "shortDescription": { "text": "Enclose in parentheses whole definition of a function-like macro" }, "fullDescription": { "text": "Enclose in parentheses whole definition of a function-like macro [CERT_C-PRE02-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Enclose in parentheses whole definition of a function-like macro [CERT_C-PRE02-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-PRE02_C (REC) Macro replacement lists should be parenthesized" ] } }, { "id": "CERT_C-PRE00-a", "name": "A function should be used in preference to a function-like macro", "shortDescription": { "text": "A function should be used in preference to a function-like macro" }, "fullDescription": { "text": "A function should be used in preference to a function-like macro [CERT_C-PRE00-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function should be used in preference to a function-like macro [CERT_C-PRE00-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-PRE00_C (REC) Prefer inline or static functions to function-like macros" ] } }, { "id": "CERT_C-PRE01-a", "name": "In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##", "shortDescription": { "text": "In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" }, "fullDescription": { "text": "In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ## [CERT_C-PRE01-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ## [CERT_C-PRE01-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-PRE01_C (REC) Use parentheses within macros around parameter names" ] } }, { "id": "CERT_C-PRE06-a", "name": "Use multiple include guards", "shortDescription": { "text": "Use multiple include guards" }, "fullDescription": { "text": "Use multiple include guards [CERT_C-PRE06-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use multiple include guards [CERT_C-PRE06-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-PRE06_C (REC) Enclose header files in an include guard" ] } }, { "id": "CERT_C-PRE07-a", "name": "Trigraphs shall not be used", "shortDescription": { "text": "Trigraphs shall not be used" }, "fullDescription": { "text": "Trigraphs shall not be used [CERT_C-PRE07-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Trigraphs shall not be used [CERT_C-PRE07-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-PRE07_C (REC) Avoid using repeated question marks" ] } }, { "id": "CERT_C-POS54-a", "name": "The value returned by a POSIX library function that may return an error should be used", "shortDescription": { "text": "The value returned by a POSIX library function that may return an error should be used" }, "fullDescription": { "text": "The value returned by a POSIX library function that may return an error should be used [CERT_C-POS54-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value returned by a POSIX library function that may return an error should be used [CERT_C-POS54-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-POS54_C (RULE) Detect and handle POSIX library errors" ] } }, { "id": "CERT_C-ERR30-a", "name": "Properly use errno value", "shortDescription": { "text": "Properly use errno value" }, "fullDescription": { "text": "Properly use errno value [CERT_C-ERR30-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly use errno value [CERT_C-ERR30-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ERR30_C (RULE) Set errno to zero before calling a library function known to set errno, and check errno only after the function returns a value indicating failure" ] } }, { "id": "CERT_C-ERR30-b", "name": "Provide error handling for file opening errors right next to the call to fopen", "shortDescription": { "text": "Provide error handling for file opening errors right next to the call to fopen" }, "fullDescription": { "text": "Provide error handling for file opening errors right next to the call to fopen [CERT_C-ERR30-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Provide error handling for file opening errors right next to the call to fopen [CERT_C-ERR30-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ERR30_C (RULE) Set errno to zero before calling a library function known to set errno, and check errno only after the function returns a value indicating failure" ] } }, { "id": "CERT_C-ERR32-a", "name": "Properly use errno value", "shortDescription": { "text": "Properly use errno value" }, "fullDescription": { "text": "Properly use errno value [CERT_C-ERR32-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Properly use errno value [CERT_C-ERR32-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ERR32_C (RULE) Do not rely on indeterminate values of errno" ] } }, { "id": "CERT_C-ERR33-a", "name": "The value returned by a standard library function that may return an error should be used", "shortDescription": { "text": "The value returned by a standard library function that may return an error should be used" }, "fullDescription": { "text": "The value returned by a standard library function that may return an error should be used [CERT_C-ERR33-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value returned by a standard library function that may return an error should be used [CERT_C-ERR33-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ERR33_C (RULE) Detect and handle standard library errors" ] } }, { "id": "CERT_C-ERR33-d", "name": "Always check the returned value of non-void function", "shortDescription": { "text": "Always check the returned value of non-void function" }, "fullDescription": { "text": "Always check the returned value of non-void function [CERT_C-ERR33-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Always check the returned value of non-void function [CERT_C-ERR33-d]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ERR33_C (RULE) Detect and handle standard library errors" ] } }, { "id": "CERT_C-ERR34-a", "name": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used", "shortDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" }, "fullDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [CERT_C-ERR34-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [CERT_C-ERR34-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ERR34_C (RULE) Detect errors when converting a string to a number" ] } }, { "id": "CERT_C-POS51-a", "name": "Do not acquire locks in different order", "shortDescription": { "text": "Do not acquire locks in different order" }, "fullDescription": { "text": "Do not acquire locks in different order [CERT_C-POS51-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not acquire locks in different order [CERT_C-POS51-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-POS51_C (RULE) Avoid deadlock with POSIX threads by locking in predefined order" ] } }, { "id": "CERT_C-POS50-a", "name": "Declare objects shared between POSIX threads with appropriate storage durations", "shortDescription": { "text": "Declare objects shared between POSIX threads with appropriate storage durations" }, "fullDescription": { "text": "Declare objects shared between POSIX threads with appropriate storage durations [CERT_C-POS50-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare objects shared between POSIX threads with appropriate storage durations [CERT_C-POS50-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-POS50_C (RULE) Declare objects shared between POSIX threads with appropriate storage durations" ] } }, { "id": "CERT_C-POS53-a", "name": "Do not use more than one mutex for concurrent waiting operations on a condition variable", "shortDescription": { "text": "Do not use more than one mutex for concurrent waiting operations on a condition variable" }, "fullDescription": { "text": "Do not use more than one mutex for concurrent waiting operations on a condition variable [CERT_C-POS53-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use more than one mutex for concurrent waiting operations on a condition variable [CERT_C-POS53-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-POS53_C (RULE) Do not use more than one mutex for concurrent waiting operations on a condition variable" ] } }, { "id": "CERT_C-POS52-a", "name": "Do not use blocking functions while holding a lock", "shortDescription": { "text": "Do not use blocking functions while holding a lock" }, "fullDescription": { "text": "Do not use blocking functions while holding a lock [CERT_C-POS52-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use blocking functions while holding a lock [CERT_C-POS52-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-POS52_C (RULE) Do not perform operations that can block while holding a POSIX lock" ] } }, { "id": "CERT_C-ERR06-a", "name": "Do not use assertions", "shortDescription": { "text": "Do not use assertions" }, "fullDescription": { "text": "Do not use assertions [CERT_C-ERR06-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use assertions [CERT_C-ERR06-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ERR06_C (REC) Understand the termination behavior of assert() and abort()" ] } }, { "id": "CERT_C-ERR07-a", "name": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used", "shortDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" }, "fullDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [CERT_C-ERR07-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [CERT_C-ERR07-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ERR07_C (REC) Prefer functions that support error checking over equivalent functions that don't" ] } }, { "id": "CERT_C-ERR07-b", "name": "The library functions 'rewind', 'setbuf' and 'ctime' should not be used", "shortDescription": { "text": "The library functions 'rewind', 'setbuf' and 'ctime' should not be used" }, "fullDescription": { "text": "The library functions 'rewind', 'setbuf' and 'ctime' should not be used [CERT_C-ERR07-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The library functions 'rewind', 'setbuf' and 'ctime' should not be used [CERT_C-ERR07-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ERR07_C (REC) Prefer functions that support error checking over equivalent functions that don't" ] } }, { "id": "CERT_C-DCL06-a", "name": "Use meaningful symbolic constants to represent literal values", "shortDescription": { "text": "Use meaningful symbolic constants to represent literal values" }, "fullDescription": { "text": "Use meaningful symbolic constants to represent literal values [CERT_C-DCL06-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use meaningful symbolic constants to represent literal values [CERT_C-DCL06-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL06_C (REC) Use meaningful symbolic constants to represent literal values" ] } }, { "id": "CERT_C-DCL01-a", "name": "Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope", "shortDescription": { "text": "Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" }, "fullDescription": { "text": "Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope [CERT_C-DCL01-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope [CERT_C-DCL01-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL01_C (REC) Do not reuse variable names in subscopes" ] } }, { "id": "CERT_C-DCL01-b", "name": "Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope", "shortDescription": { "text": "Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" }, "fullDescription": { "text": "Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope [CERT_C-DCL01-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope [CERT_C-DCL01-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL01_C (REC) Do not reuse variable names in subscopes" ] } }, { "id": "CERT_C-DCL00-a", "name": "Declare local variable as const whenever possible", "shortDescription": { "text": "Declare local variable as const whenever possible" }, "fullDescription": { "text": "Declare local variable as const whenever possible [CERT_C-DCL00-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare local variable as const whenever possible [CERT_C-DCL00-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL00_C (REC) Const-qualify immutable objects" ] } }, { "id": "CERT_C-DCL05-a", "name": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object", "shortDescription": { "text": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" }, "fullDescription": { "text": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object [CERT_C-DCL05-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object [CERT_C-DCL05-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL05_C (REC) Use typedefs of non-pointer types only" ] } }, { "id": "CERT_C-DCL04-a", "name": "Each variable should be declared in a separate declaration statement", "shortDescription": { "text": "Each variable should be declared in a separate declaration statement" }, "fullDescription": { "text": "Each variable should be declared in a separate declaration statement [CERT_C-DCL04-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each variable should be declared in a separate declaration statement [CERT_C-DCL04-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL04_C (REC) Do not declare more than one variable per declaration" ] } }, { "id": "CERT_C-DCL02-a", "name": "Use visually distinct identifiers", "shortDescription": { "text": "Use visually distinct identifiers" }, "fullDescription": { "text": "Use visually distinct identifiers [CERT_C-DCL02-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use visually distinct identifiers [CERT_C-DCL02-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL02_C (REC) Use visually distinct identifiers" ] } }, { "id": "CERT_C-POS44-a", "name": "The 'pthread_kill', 'pthread_sigqueue' and 'tgkill' functions should not be used to send signals to threads", "shortDescription": { "text": "The 'pthread_kill', 'pthread_sigqueue' and 'tgkill' functions should not be used to send signals to threads" }, "fullDescription": { "text": "The 'pthread_kill', 'pthread_sigqueue' and 'tgkill' functions should not be used to send signals to threads [CERT_C-POS44-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'pthread_kill', 'pthread_sigqueue' and 'tgkill' functions should not be used to send signals to threads [CERT_C-POS44-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-POS44_C (RULE) Do not use signals to terminate threads" ] } }, { "id": "CERT_C-POS48-a", "name": "Do not destroy another thread's mutex", "shortDescription": { "text": "Do not destroy another thread's mutex" }, "fullDescription": { "text": "Do not destroy another thread's mutex [CERT_C-POS48-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not destroy another thread's mutex [CERT_C-POS48-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-POS48_C (RULE) Do not unlock or destroy another POSIX thread's mutex" ] } }, { "id": "CERT_C-POS48-b", "name": "Do not release a lock that has not been acquired", "shortDescription": { "text": "Do not release a lock that has not been acquired" }, "fullDescription": { "text": "Do not release a lock that has not been acquired [CERT_C-POS48-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not release a lock that has not been acquired [CERT_C-POS48-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-POS48_C (RULE) Do not unlock or destroy another POSIX thread's mutex" ] } }, { "id": "CERT_C-POS47-a", "name": "The function 'pthread_setcanceltype()' should not be called with 'PTHREAD_CANCEL_ASYNCHRONOUS' argument", "shortDescription": { "text": "The function 'pthread_setcanceltype()' should not be called with 'PTHREAD_CANCEL_ASYNCHRONOUS' argument" }, "fullDescription": { "text": "The function 'pthread_setcanceltype()' should not be called with 'PTHREAD_CANCEL_ASYNCHRONOUS' argument [CERT_C-POS47-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The function 'pthread_setcanceltype()' should not be called with 'PTHREAD_CANCEL_ASYNCHRONOUS' argument [CERT_C-POS47-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-POS47_C (RULE) Do not use threads that can be canceled asynchronously" ] } }, { "id": "CERT_C-POS49-a", "name": "Use locks to prevent race conditions when modifying bit fields", "shortDescription": { "text": "Use locks to prevent race conditions when modifying bit fields" }, "fullDescription": { "text": "Use locks to prevent race conditions when modifying bit fields [CERT_C-POS49-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use locks to prevent race conditions when modifying bit fields [CERT_C-POS49-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-POS49_C (RULE) When data must be accessed by multiple threads, provide a mutex and guarantee no adjacent data is also accessed" ] } }, { "id": "CERT_C-WIN30-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [CERT_C-WIN30-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure resources are freed [CERT_C-WIN30-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-WIN30_C (RULE) Properly pair allocation and deallocation functions" ] } }, { "id": "CERT_C-ERR01-a", "name": "The error indicator 'errno' shall not be used", "shortDescription": { "text": "The error indicator 'errno' shall not be used" }, "fullDescription": { "text": "The error indicator 'errno' shall not be used [CERT_C-ERR01-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The error indicator 'errno' shall not be used [CERT_C-ERR01-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ERR01_C (REC) Use ferror() rather than errno to check for FILE stream errors" ] } }, { "id": "CERT_C-ERR02-a", "name": "The input\/output functions from the 'cstdio' and 'cwchar' libraries should not be used", "shortDescription": { "text": "The input\/output functions from the 'cstdio' and 'cwchar' libraries should not be used" }, "fullDescription": { "text": "The input\/output functions from the 'cstdio' and 'cwchar' libraries should not be used [CERT_C-ERR02-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The input\/output functions from the 'cstdio' and 'cwchar' libraries should not be used [CERT_C-ERR02-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ERR02_C (REC) Avoid in-band error indicators" ] } }, { "id": "CERT_C-ERR04-a", "name": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used", "shortDescription": { "text": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" }, "fullDescription": { "text": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [CERT_C-ERR04-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [CERT_C-ERR04-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ERR04_C (REC) Choose an appropriate termination strategy" ] } }, { "id": "CERT_C-ERR04-b", "name": "The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used", "shortDescription": { "text": "The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" }, "fullDescription": { "text": "The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [CERT_C-ERR04-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [CERT_C-ERR04-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ERR04_C (REC) Choose an appropriate termination strategy" ] } }, { "id": "CERT_C-ERR04-c", "name": "The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used", "shortDescription": { "text": "The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" }, "fullDescription": { "text": "The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used [CERT_C-ERR04-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used [CERT_C-ERR04-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ERR04_C (REC) Choose an appropriate termination strategy" ] } }, { "id": "CERT_C-ERR05-a", "name": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used", "shortDescription": { "text": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" }, "fullDescription": { "text": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [CERT_C-ERR05-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [CERT_C-ERR05-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ERR05_C (REC) Application-independent code should provide error detection without dictating error handling" ] } }, { "id": "CERT_C-ERR05-b", "name": "The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used", "shortDescription": { "text": "The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" }, "fullDescription": { "text": "The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [CERT_C-ERR05-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [CERT_C-ERR05-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ERR05_C (REC) Application-independent code should provide error detection without dictating error handling" ] } }, { "id": "CERT_C-ERR05-c", "name": "The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used", "shortDescription": { "text": "The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" }, "fullDescription": { "text": "The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used [CERT_C-ERR05-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used [CERT_C-ERR05-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ERR05_C (REC) Application-independent code should provide error detection without dictating error handling" ] } }, { "id": "CERT_C-FLP37-c", "name": "Do not use object representations to compare floating-point values", "shortDescription": { "text": "Do not use object representations to compare floating-point values" }, "fullDescription": { "text": "Do not use object representations to compare floating-point values [CERT_C-FLP37-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use object representations to compare floating-point values [CERT_C-FLP37-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FLP37_C (RULE) Do not use object representations to compare floating-point values" ] } }, { "id": "CERT_C-FLP36-a", "name": "Implicit conversions from integral to floating type which may result in a loss of information shall not be used", "shortDescription": { "text": "Implicit conversions from integral to floating type which may result in a loss of information shall not be used" }, "fullDescription": { "text": "Implicit conversions from integral to floating type which may result in a loss of information shall not be used [CERT_C-FLP36-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Implicit conversions from integral to floating type which may result in a loss of information shall not be used [CERT_C-FLP36-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FLP36_C (RULE) Preserve precision when converting integral values to floating-point type" ] } }, { "id": "CERT_C-FLP36-b", "name": "Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used", "shortDescription": { "text": "Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" }, "fullDescription": { "text": "Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used [CERT_C-FLP36-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used [CERT_C-FLP36-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FLP36_C (RULE) Preserve precision when converting integral values to floating-point type" ] } }, { "id": "CERT_C-FLP34-a", "name": "Avoid implicit conversions from wider to narrower floating type", "shortDescription": { "text": "Avoid implicit conversions from wider to narrower floating type" }, "fullDescription": { "text": "Avoid implicit conversions from wider to narrower floating type [CERT_C-FLP34-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid implicit conversions from wider to narrower floating type [CERT_C-FLP34-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FLP34_C (RULE) Ensure that floating-point conversions are within range of the new type" ] } }, { "id": "CERT_C-FLP34-b", "name": "Avoid implicit conversions of floating point numbers from wider to narrower floating type", "shortDescription": { "text": "Avoid implicit conversions of floating point numbers from wider to narrower floating type" }, "fullDescription": { "text": "Avoid implicit conversions of floating point numbers from wider to narrower floating type [CERT_C-FLP34-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid implicit conversions of floating point numbers from wider to narrower floating type [CERT_C-FLP34-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FLP34_C (RULE) Ensure that floating-point conversions are within range of the new type" ] } }, { "id": "CERT_C-POS33-a", "name": "Avoid using the 'vfork()' function", "shortDescription": { "text": "Avoid using the 'vfork()' function" }, "fullDescription": { "text": "Avoid using the 'vfork()' function [CERT_C-POS33-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using the 'vfork()' function [CERT_C-POS33-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-POS33_C (RULE) Do not use vfork()" ] } }, { "id": "CERT_C-ARR32-a", "name": "Ensure the size of the variable length array is in valid range", "shortDescription": { "text": "Ensure the size of the variable length array is in valid range" }, "fullDescription": { "text": "Ensure the size of the variable length array is in valid range [CERT_C-ARR32-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure the size of the variable length array is in valid range [CERT_C-ARR32-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ARR32_C (RULE) Ensure size arguments for variable length arrays are in a valid range" ] } }, { "id": "CERT_C-POS35-b", "name": "Avoid race conditions while checking for the existence of a symbolic link", "shortDescription": { "text": "Avoid race conditions while checking for the existence of a symbolic link" }, "fullDescription": { "text": "Avoid race conditions while checking for the existence of a symbolic link [CERT_C-POS35-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid race conditions while checking for the existence of a symbolic link [CERT_C-POS35-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-POS35_C (RULE) Avoid race conditions while checking for the existence of a symbolic link" ] } }, { "id": "CERT_C-POS34-a", "name": "Usage of system properties (environment variables) should be restricted", "shortDescription": { "text": "Usage of system properties (environment variables) should be restricted" }, "fullDescription": { "text": "Usage of system properties (environment variables) should be restricted [CERT_C-POS34-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Usage of system properties (environment variables) should be restricted [CERT_C-POS34-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-POS34_C (RULE) Do not call putenv() with a pointer to an automatic variable as the argument" ] } }, { "id": "CERT_C-POS34-b", "name": "Do not call putenv() with a pointer to an automatic variable as the argument", "shortDescription": { "text": "Do not call putenv() with a pointer to an automatic variable as the argument" }, "fullDescription": { "text": "Do not call putenv() with a pointer to an automatic variable as the argument [CERT_C-POS34-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not call putenv() with a pointer to an automatic variable as the argument [CERT_C-POS34-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-POS34_C (RULE) Do not call putenv() with a pointer to an automatic variable as the argument" ] } }, { "id": "CERT_C-ARR30-a", "name": "Avoid accessing arrays out of bounds", "shortDescription": { "text": "Avoid accessing arrays out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays out of bounds [CERT_C-ARR30-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays out of bounds [CERT_C-ARR30-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ARR30_C (RULE) Do not form or use out-of-bounds pointers or array subscripts" ] } }, { "id": "CERT_C-POS37-a", "name": "Ensure that privilege relinquishment is successful", "shortDescription": { "text": "Ensure that privilege relinquishment is successful" }, "fullDescription": { "text": "Ensure that privilege relinquishment is successful [CERT_C-POS37-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure that privilege relinquishment is successful [CERT_C-POS37-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-POS37_C (RULE) Ensure that privilege relinquishment is successful" ] } }, { "id": "CERT_C-FLP32-a", "name": "Validate values passed to library functions", "shortDescription": { "text": "Validate values passed to library functions" }, "fullDescription": { "text": "Validate values passed to library functions [CERT_C-FLP32-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Validate values passed to library functions [CERT_C-FLP32-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FLP32_C (RULE) Prevent or detect domain and range errors in math functions" ] } }, { "id": "CERT_C-POS36-a", "name": "Observe correct revocation order while relinquishing privileges", "shortDescription": { "text": "Observe correct revocation order while relinquishing privileges" }, "fullDescription": { "text": "Observe correct revocation order while relinquishing privileges [CERT_C-POS36-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Observe correct revocation order while relinquishing privileges [CERT_C-POS36-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-POS36_C (RULE) Observe correct revocation order while relinquishing privileges" ] } }, { "id": "CERT_C-POS39-a", "name": "Use the correct byte ordering when transferring data between systems", "shortDescription": { "text": "Use the correct byte ordering when transferring data between systems" }, "fullDescription": { "text": "Use the correct byte ordering when transferring data between systems [CERT_C-POS39-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use the correct byte ordering when transferring data between systems [CERT_C-POS39-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-POS39_C (RULE) Use the correct byte ordering when transferring data between systems" ] } }, { "id": "CERT_C-FLP30-a", "name": "Do not use floating point variables as loop counters", "shortDescription": { "text": "Do not use floating point variables as loop counters" }, "fullDescription": { "text": "Do not use floating point variables as loop counters [CERT_C-FLP30-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use floating point variables as loop counters [CERT_C-FLP30-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FLP30_C (RULE) Do not use floating-point variables as loop counters" ] } }, { "id": "CERT_C-POS38-a", "name": "Avoid race conditions when using fork and file descriptors", "shortDescription": { "text": "Avoid race conditions when using fork and file descriptors" }, "fullDescription": { "text": "Avoid race conditions when using fork and file descriptors [CERT_C-POS38-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid race conditions when using fork and file descriptors [CERT_C-POS38-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-POS38_C (RULE) Beware of race conditions when using fork and file descriptors" ] } }, { "id": "CERT_C-ARR39-a", "name": "Avoid accessing arrays out of bounds", "shortDescription": { "text": "Avoid accessing arrays out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays out of bounds [CERT_C-ARR39-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays out of bounds [CERT_C-ARR39-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ARR39_C (RULE) Do not add or subtract a scaled integer to a pointer" ] } }, { "id": "CERT_C-ARR39-b", "name": "Pointer arithmetic should not be used", "shortDescription": { "text": "Pointer arithmetic should not be used" }, "fullDescription": { "text": "Pointer arithmetic should not be used [CERT_C-ARR39-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Pointer arithmetic should not be used [CERT_C-ARR39-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ARR39_C (RULE) Do not add or subtract a scaled integer to a pointer" ] } }, { "id": "CERT_C-ARR39-c", "name": "Do not add or subtract a scaled integer to a pointer", "shortDescription": { "text": "Do not add or subtract a scaled integer to a pointer" }, "fullDescription": { "text": "Do not add or subtract a scaled integer to a pointer [CERT_C-ARR39-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not add or subtract a scaled integer to a pointer [CERT_C-ARR39-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ARR39_C (RULE) Do not add or subtract a scaled integer to a pointer" ] } }, { "id": "CERT_C-ARR38-a", "name": "Avoid overflow when reading from a buffer", "shortDescription": { "text": "Avoid overflow when reading from a buffer" }, "fullDescription": { "text": "Avoid overflow when reading from a buffer [CERT_C-ARR38-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when reading from a buffer [CERT_C-ARR38-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ARR38_C (RULE) Guarantee that library functions do not form invalid pointers" ] } }, { "id": "CERT_C-ARR38-b", "name": "Avoid overflow when writing to a buffer", "shortDescription": { "text": "Avoid overflow when writing to a buffer" }, "fullDescription": { "text": "Avoid overflow when writing to a buffer [CERT_C-ARR38-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when writing to a buffer [CERT_C-ARR38-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ARR38_C (RULE) Guarantee that library functions do not form invalid pointers" ] } }, { "id": "CERT_C-ARR38-c", "name": "Avoid buffer overflow due to defining incorrect format limits", "shortDescription": { "text": "Avoid buffer overflow due to defining incorrect format limits" }, "fullDescription": { "text": "Avoid buffer overflow due to defining incorrect format limits [CERT_C-ARR38-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer overflow due to defining incorrect format limits [CERT_C-ARR38-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ARR38_C (RULE) Guarantee that library functions do not form invalid pointers" ] } }, { "id": "CERT_C-ARR38-d", "name": "Avoid overflow due to reading a not zero terminated string", "shortDescription": { "text": "Avoid overflow due to reading a not zero terminated string" }, "fullDescription": { "text": "Avoid overflow due to reading a not zero terminated string [CERT_C-ARR38-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow due to reading a not zero terminated string [CERT_C-ARR38-d]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ARR38_C (RULE) Guarantee that library functions do not form invalid pointers" ] } }, { "id": "CERT_C-ARR37-a", "name": "Pointer arithmetic shall not be applied to pointers that address variables of non-array type", "shortDescription": { "text": "Pointer arithmetic shall not be applied to pointers that address variables of non-array type" }, "fullDescription": { "text": "Pointer arithmetic shall not be applied to pointers that address variables of non-array type [CERT_C-ARR37-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Pointer arithmetic shall not be applied to pointers that address variables of non-array type [CERT_C-ARR37-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ARR37_C (RULE) Do not add or subtract an integer to a pointer to a non-array object" ] } }, { "id": "CERT_C-ARR36-a", "name": "Do not subtract two pointers that do not address elements of the same array", "shortDescription": { "text": "Do not subtract two pointers that do not address elements of the same array" }, "fullDescription": { "text": "Do not subtract two pointers that do not address elements of the same array [CERT_C-ARR36-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not subtract two pointers that do not address elements of the same array [CERT_C-ARR36-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ARR36_C (RULE) Do not subtract or compare two pointers that do not refer to the same array" ] } }, { "id": "CERT_C-ARR36-b", "name": "Do not compare two unrelated pointers", "shortDescription": { "text": "Do not compare two unrelated pointers" }, "fullDescription": { "text": "Do not compare two unrelated pointers [CERT_C-ARR36-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not compare two unrelated pointers [CERT_C-ARR36-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ARR36_C (RULE) Do not subtract or compare two pointers that do not refer to the same array" ] } }, { "id": "CERT_C-POS30-a", "name": "Avoid overflow due to reading a not zero terminated string", "shortDescription": { "text": "Avoid overflow due to reading a not zero terminated string" }, "fullDescription": { "text": "Avoid overflow due to reading a not zero terminated string [CERT_C-POS30-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow due to reading a not zero terminated string [CERT_C-POS30-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-POS30_C (RULE) Use the readlink() function properly" ] } }, { "id": "CERT_C-POS30-b", "name": "The values returned by functions 'read' and 'readlink' shall be used", "shortDescription": { "text": "The values returned by functions 'read' and 'readlink' shall be used" }, "fullDescription": { "text": "The values returned by functions 'read' and 'readlink' shall be used [CERT_C-POS30-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The values returned by functions 'read' and 'readlink' shall be used [CERT_C-POS30-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-POS30_C (RULE) Use the readlink() function properly" ] } }, { "id": "CERT_C-POS30-c", "name": "Use of possibly not null-terminated string with functions expecting null-terminated string", "shortDescription": { "text": "Use of possibly not null-terminated string with functions expecting null-terminated string" }, "fullDescription": { "text": "Use of possibly not null-terminated string with functions expecting null-terminated string [CERT_C-POS30-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use of possibly not null-terminated string with functions expecting null-terminated string [CERT_C-POS30-c]" }, "properties": { "tags": [ "SEI CERT C", "CERT-POS30_C (RULE) Use the readlink() function properly" ] } }, { "id": "CERT_CPP-DCL55-a", "name": "A pointer to a structure should not be passed to a function that can copy data to the user space", "shortDescription": { "text": "A pointer to a structure should not be passed to a function that can copy data to the user space" }, "fullDescription": { "text": "A pointer to a structure should not be passed to a function that can copy data to the user space [CERT_CPP-DCL55-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A pointer to a structure should not be passed to a function that can copy data to the user space [CERT_CPP-DCL55-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-DCL55_CPP (RULE) Avoid information leakage when passing a class object across a trust boundary" ] } }, { "id": "CERT_CPP-ERR52-a", "name": "The facilities provided by <setjmp.h> should not be used", "shortDescription": { "text": "The facilities provided by <setjmp.h> should not be used" }, "fullDescription": { "text": "The facilities provided by <setjmp.h> should not be used [CERT_CPP-ERR52-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The facilities provided by <setjmp.h> should not be used [CERT_CPP-ERR52-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR52_CPP (RULE) Do not use setjmp() or longjmp()" ] } }, { "id": "CERT_CPP-ERR52-b", "name": "The standard header files <setjmp.h> or <csetjmp> shall not be used", "shortDescription": { "text": "The standard header files <setjmp.h> or <csetjmp> shall not be used" }, "fullDescription": { "text": "The standard header files <setjmp.h> or <csetjmp> shall not be used [CERT_CPP-ERR52-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The standard header files <setjmp.h> or <csetjmp> shall not be used [CERT_CPP-ERR52-b]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR52_CPP (RULE) Do not use setjmp() or longjmp()" ] } }, { "id": "CERT_CPP-DCL56-a", "name": "Avoid initialization order problems across translation units by replacing non-local static objects with local static objects", "shortDescription": { "text": "Avoid initialization order problems across translation units by replacing non-local static objects with local static objects" }, "fullDescription": { "text": "Avoid initialization order problems across translation units by replacing non-local static objects with local static objects [CERT_CPP-DCL56-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid initialization order problems across translation units by replacing non-local static objects with local static objects [CERT_CPP-DCL56-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-DCL56_CPP (RULE) Avoid cycles during initialization of static objects" ] } }, { "id": "CERT_CPP-ERR51-a", "name": "Always catch exceptions", "shortDescription": { "text": "Always catch exceptions" }, "fullDescription": { "text": "Always catch exceptions [CERT_CPP-ERR51-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Always catch exceptions [CERT_CPP-ERR51-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR51_CPP (RULE) Handle all exceptions" ] } }, { "id": "CERT_CPP-ERR51-b", "name": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point", "shortDescription": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" }, "fullDescription": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point [CERT_CPP-ERR51-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point [CERT_CPP-ERR51-b]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR51_CPP (RULE) Handle all exceptions" ] } }, { "id": "CERT_CPP-CON56-a", "name": "Avoid double locking", "shortDescription": { "text": "Avoid double locking" }, "fullDescription": { "text": "Avoid double locking [CERT_CPP-CON56-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid double locking [CERT_CPP-CON56-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-CON56_CPP (RULE) Do not speculatively lock a non-recursive mutex that is already owned by the calling thread" ] } }, { "id": "CERT_CPP-DCL53-a", "name": "Parameter names in function declarations should not be enclosed in parentheses", "shortDescription": { "text": "Parameter names in function declarations should not be enclosed in parentheses" }, "fullDescription": { "text": "Parameter names in function declarations should not be enclosed in parentheses [CERT_CPP-DCL53-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Parameter names in function declarations should not be enclosed in parentheses [CERT_CPP-DCL53-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-DCL53_CPP (RULE) Do not write syntactically ambiguous declarations" ] } }, { "id": "CERT_CPP-DCL53-b", "name": "Local variable names in variable declarations should not be enclosed in parentheses", "shortDescription": { "text": "Local variable names in variable declarations should not be enclosed in parentheses" }, "fullDescription": { "text": "Local variable names in variable declarations should not be enclosed in parentheses [CERT_CPP-DCL53-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Local variable names in variable declarations should not be enclosed in parentheses [CERT_CPP-DCL53-b]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-DCL53_CPP (RULE) Do not write syntactically ambiguous declarations" ] } }, { "id": "CERT_CPP-DCL53-c", "name": "Avoid function declarations that are syntactically ambiguous", "shortDescription": { "text": "Avoid function declarations that are syntactically ambiguous" }, "fullDescription": { "text": "Avoid function declarations that are syntactically ambiguous [CERT_CPP-DCL53-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid function declarations that are syntactically ambiguous [CERT_CPP-DCL53-c]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-DCL53_CPP (RULE) Do not write syntactically ambiguous declarations" ] } }, { "id": "CERT_CPP-ERR50-a", "name": "The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception", "shortDescription": { "text": "The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" }, "fullDescription": { "text": "The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception [CERT_CPP-ERR50-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception [CERT_CPP-ERR50-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR50_CPP (RULE) Do not abruptly terminate the program" ] } }, { "id": "CERT_CPP-ERR50-b", "name": "Never allow an exception to be thrown from a destructor, deallocation, and swap", "shortDescription": { "text": "Never allow an exception to be thrown from a destructor, deallocation, and swap" }, "fullDescription": { "text": "Never allow an exception to be thrown from a destructor, deallocation, and swap [CERT_CPP-ERR50-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Never allow an exception to be thrown from a destructor, deallocation, and swap [CERT_CPP-ERR50-b]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR50_CPP (RULE) Do not abruptly terminate the program" ] } }, { "id": "CERT_CPP-ERR50-c", "name": "Do not throw from within destructor", "shortDescription": { "text": "Do not throw from within destructor" }, "fullDescription": { "text": "Do not throw from within destructor [CERT_CPP-ERR50-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not throw from within destructor [CERT_CPP-ERR50-c]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR50_CPP (RULE) Do not abruptly terminate the program" ] } }, { "id": "CERT_CPP-ERR50-d", "name": "There should be at least one exception handler to catch all otherwise unhandled exceptions", "shortDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions" }, "fullDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [CERT_CPP-ERR50-d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [CERT_CPP-ERR50-d]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR50_CPP (RULE) Do not abruptly terminate the program" ] } }, { "id": "CERT_CPP-ERR50-e", "name": "An empty throw shall only be used in the compound-statement of a catch handler", "shortDescription": { "text": "An empty throw shall only be used in the compound-statement of a catch handler" }, "fullDescription": { "text": "An empty throw shall only be used in the compound-statement of a catch handler [CERT_CPP-ERR50-e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An empty throw shall only be used in the compound-statement of a catch handler [CERT_CPP-ERR50-e]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR50_CPP (RULE) Do not abruptly terminate the program" ] } }, { "id": "CERT_CPP-ERR50-f", "name": "Exceptions shall be raised only after start-up and before termination of the program", "shortDescription": { "text": "Exceptions shall be raised only after start-up and before termination of the program" }, "fullDescription": { "text": "Exceptions shall be raised only after start-up and before termination of the program [CERT_CPP-ERR50-f]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Exceptions shall be raised only after start-up and before termination of the program [CERT_CPP-ERR50-f]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR50_CPP (RULE) Do not abruptly terminate the program" ] } }, { "id": "CERT_CPP-ERR50-g", "name": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point", "shortDescription": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" }, "fullDescription": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point [CERT_CPP-ERR50-g]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point [CERT_CPP-ERR50-g]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR50_CPP (RULE) Do not abruptly terminate the program" ] } }, { "id": "CERT_CPP-ERR50-h", "name": "Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)", "shortDescription": { "text": "Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" }, "fullDescription": { "text": "Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s) [CERT_CPP-ERR50-h]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s) [CERT_CPP-ERR50-h]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR50_CPP (RULE) Do not abruptly terminate the program" ] } }, { "id": "CERT_CPP-ERR50-i", "name": "Function called in global or namespace scope shall not throw unhandled exceptions", "shortDescription": { "text": "Function called in global or namespace scope shall not throw unhandled exceptions" }, "fullDescription": { "text": "Function called in global or namespace scope shall not throw unhandled exceptions [CERT_CPP-ERR50-i]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Function called in global or namespace scope shall not throw unhandled exceptions [CERT_CPP-ERR50-i]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR50_CPP (RULE) Do not abruptly terminate the program" ] } }, { "id": "CERT_CPP-ERR50-j", "name": "Always catch exceptions", "shortDescription": { "text": "Always catch exceptions" }, "fullDescription": { "text": "Always catch exceptions [CERT_CPP-ERR50-j]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Always catch exceptions [CERT_CPP-ERR50-j]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR50_CPP (RULE) Do not abruptly terminate the program" ] } }, { "id": "CERT_CPP-ERR50-k", "name": "Properly define exit handlers", "shortDescription": { "text": "Properly define exit handlers" }, "fullDescription": { "text": "Properly define exit handlers [CERT_CPP-ERR50-k]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Properly define exit handlers [CERT_CPP-ERR50-k]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR50_CPP (RULE) Do not abruptly terminate the program" ] } }, { "id": "CERT_CPP-ERR50-l", "name": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used", "shortDescription": { "text": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" }, "fullDescription": { "text": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [CERT_CPP-ERR50-l]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [CERT_CPP-ERR50-l]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR50_CPP (RULE) Do not abruptly terminate the program" ] } }, { "id": "CERT_CPP-ERR50-m", "name": "Avoid throwing exceptions from functions that are declared not to throw", "shortDescription": { "text": "Avoid throwing exceptions from functions that are declared not to throw" }, "fullDescription": { "text": "Avoid throwing exceptions from functions that are declared not to throw [CERT_CPP-ERR50-m]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid throwing exceptions from functions that are declared not to throw [CERT_CPP-ERR50-m]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR50_CPP (RULE) Do not abruptly terminate the program" ] } }, { "id": "CERT_CPP-ERR50-n", "name": "The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used", "shortDescription": { "text": "The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" }, "fullDescription": { "text": "The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used [CERT_CPP-ERR50-n]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used [CERT_CPP-ERR50-n]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR50_CPP (RULE) Do not abruptly terminate the program" ] } }, { "id": "CERT_CPP-DCL54-a", "name": "Always provide new and delete together", "shortDescription": { "text": "Always provide new and delete together" }, "fullDescription": { "text": "Always provide new and delete together [CERT_CPP-DCL54-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Always provide new and delete together [CERT_CPP-DCL54-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-DCL54_CPP (RULE) Overload allocation and deallocation functions as a pair in the same scope" ] } }, { "id": "CERT_CPP-DCL59-a", "name": "There shall be no unnamed namespaces in header files", "shortDescription": { "text": "There shall be no unnamed namespaces in header files" }, "fullDescription": { "text": "There shall be no unnamed namespaces in header files [CERT_CPP-DCL59-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unnamed namespaces in header files [CERT_CPP-DCL59-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-DCL59_CPP (RULE) Do not define an unnamed namespace in a header file" ] } }, { "id": "CERT_CPP-MEM51-a", "name": "Use the same form in corresponding calls to new\/malloc and delete\/free", "shortDescription": { "text": "Use the same form in corresponding calls to new\/malloc and delete\/free" }, "fullDescription": { "text": "Use the same form in corresponding calls to new\/malloc and delete\/free [CERT_CPP-MEM51-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use the same form in corresponding calls to new\/malloc and delete\/free [CERT_CPP-MEM51-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-MEM51_CPP (RULE) Properly deallocate dynamically allocated resources" ] } }, { "id": "CERT_CPP-MEM51-b", "name": "Always provide empty brackets ([]) for delete when deallocating arrays", "shortDescription": { "text": "Always provide empty brackets ([]) for delete when deallocating arrays" }, "fullDescription": { "text": "Always provide empty brackets ([]) for delete when deallocating arrays [CERT_CPP-MEM51-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Always provide empty brackets ([]) for delete when deallocating arrays [CERT_CPP-MEM51-b]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-MEM51_CPP (RULE) Properly deallocate dynamically allocated resources" ] } }, { "id": "CERT_CPP-MEM51-c", "name": "Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor", "shortDescription": { "text": "Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor" }, "fullDescription": { "text": "Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor [CERT_CPP-MEM51-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor [CERT_CPP-MEM51-c]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-MEM51_CPP (RULE) Properly deallocate dynamically allocated resources" ] } }, { "id": "CERT_CPP-MEM51-d", "name": "Properly deallocate dynamically allocated resources", "shortDescription": { "text": "Properly deallocate dynamically allocated resources" }, "fullDescription": { "text": "Properly deallocate dynamically allocated resources [CERT_CPP-MEM51-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly deallocate dynamically allocated resources [CERT_CPP-MEM51-d]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-MEM51_CPP (RULE) Properly deallocate dynamically allocated resources" ] } }, { "id": "CERT_CPP-MEM52-a", "name": "Check the return value of new", "shortDescription": { "text": "Check the return value of new" }, "fullDescription": { "text": "Check the return value of new [CERT_CPP-MEM52-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Check the return value of new [CERT_CPP-MEM52-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-MEM52_CPP (RULE) Detect and handle memory allocation errors" ] } }, { "id": "CERT_CPP-MEM52-b", "name": "Do not allocate resources in function argument list because the order of evaluation of a function's parameters is undefined", "shortDescription": { "text": "Do not allocate resources in function argument list because the order of evaluation of a function's parameters is undefined" }, "fullDescription": { "text": "Do not allocate resources in function argument list because the order of evaluation of a function's parameters is undefined [CERT_CPP-MEM52-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not allocate resources in function argument list because the order of evaluation of a function's parameters is undefined [CERT_CPP-MEM52-b]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-MEM52_CPP (RULE) Detect and handle memory allocation errors" ] } }, { "id": "CERT_CPP-DCL57-a", "name": "Never allow an exception to be thrown from a destructor, deallocation, and swap", "shortDescription": { "text": "Never allow an exception to be thrown from a destructor, deallocation, and swap" }, "fullDescription": { "text": "Never allow an exception to be thrown from a destructor, deallocation, and swap [CERT_CPP-DCL57-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Never allow an exception to be thrown from a destructor, deallocation, and swap [CERT_CPP-DCL57-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-DCL57_CPP (RULE) Do not let exceptions escape from destructors or deallocation functions" ] } }, { "id": "CERT_CPP-DCL57-b", "name": "Always catch exceptions", "shortDescription": { "text": "Always catch exceptions" }, "fullDescription": { "text": "Always catch exceptions [CERT_CPP-DCL57-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Always catch exceptions [CERT_CPP-DCL57-b]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-DCL57_CPP (RULE) Do not let exceptions escape from destructors or deallocation functions" ] } }, { "id": "CERT_CPP-DCL58-a", "name": "Do not modify the standard namespaces 'std' and 'posix'", "shortDescription": { "text": "Do not modify the standard namespaces 'std' and 'posix'" }, "fullDescription": { "text": "Do not modify the standard namespaces 'std' and 'posix' [CERT_CPP-DCL58-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not modify the standard namespaces 'std' and 'posix' [CERT_CPP-DCL58-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-DCL58_CPP (RULE) Do not modify the standard namespaces" ] } }, { "id": "CERT_CPP-MEM50-a", "name": "Do not use resources that have been freed", "shortDescription": { "text": "Do not use resources that have been freed" }, "fullDescription": { "text": "Do not use resources that have been freed [CERT_CPP-MEM50-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use resources that have been freed [CERT_CPP-MEM50-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-MEM50_CPP (RULE) Do not access freed memory" ] } }, { "id": "CERT_CPP-CON50-a", "name": "Do not destroy another thread's mutex", "shortDescription": { "text": "Do not destroy another thread's mutex" }, "fullDescription": { "text": "Do not destroy another thread's mutex [CERT_CPP-CON50-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not destroy another thread's mutex [CERT_CPP-CON50-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-CON50_CPP (RULE) Do not destroy a mutex while it is locked" ] } }, { "id": "CERT_CPP-MEM55-a", "name": "The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails", "shortDescription": { "text": "The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails" }, "fullDescription": { "text": "The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails [CERT_CPP-MEM55-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails [CERT_CPP-MEM55-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-MEM55_CPP (RULE) Honor replacement dynamic storage management requirements" ] } }, { "id": "CERT_CPP-CON51-a", "name": "Do not call lock() directly on a mutex", "shortDescription": { "text": "Do not call lock() directly on a mutex" }, "fullDescription": { "text": "Do not call lock() directly on a mutex [CERT_CPP-CON51-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not call lock() directly on a mutex [CERT_CPP-CON51-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-CON51_CPP (RULE) Ensure actively held locks are released on exceptional conditions" ] } }, { "id": "CERT_CPP-ERR59-a", "name": "Do not throw an exception across execution boundaries", "shortDescription": { "text": "Do not throw an exception across execution boundaries" }, "fullDescription": { "text": "Do not throw an exception across execution boundaries [CERT_CPP-ERR59-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not throw an exception across execution boundaries [CERT_CPP-ERR59-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR59_CPP (RULE) Do not throw an exception across execution boundaries" ] } }, { "id": "CERT_CPP-MEM56-a", "name": "Do not store an already-owned pointer value in an unrelated smart pointer", "shortDescription": { "text": "Do not store an already-owned pointer value in an unrelated smart pointer" }, "fullDescription": { "text": "Do not store an already-owned pointer value in an unrelated smart pointer [CERT_CPP-MEM56-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not store an already-owned pointer value in an unrelated smart pointer [CERT_CPP-MEM56-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-MEM56_CPP (RULE) Do not store an already-owned pointer value in an unrelated smart pointer" ] } }, { "id": "CERT_CPP-ERR58-a", "name": "Exceptions shall be raised only after start-up and before termination of the program", "shortDescription": { "text": "Exceptions shall be raised only after start-up and before termination of the program" }, "fullDescription": { "text": "Exceptions shall be raised only after start-up and before termination of the program [CERT_CPP-ERR58-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Exceptions shall be raised only after start-up and before termination of the program [CERT_CPP-ERR58-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR58_CPP (RULE) Handle all exceptions thrown before main() begins executing" ] } }, { "id": "CERT_CPP-MEM53-a", "name": "Do not invoke malloc\/realloc for objects having constructors", "shortDescription": { "text": "Do not invoke malloc\/realloc for objects having constructors" }, "fullDescription": { "text": "Do not invoke malloc\/realloc for objects having constructors [CERT_CPP-MEM53-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not invoke malloc\/realloc for objects having constructors [CERT_CPP-MEM53-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-MEM53_CPP (RULE) Explicitly construct and destruct objects when manually managing object lifetime" ] } }, { "id": "CERT_CPP-ERR57-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [CERT_CPP-ERR57-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Ensure resources are freed [CERT_CPP-ERR57-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR57_CPP (RULE) Do not leak resources when handling exceptions" ] } }, { "id": "CERT_CPP-MEM54-a", "name": "Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new'", "shortDescription": { "text": "Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new'" }, "fullDescription": { "text": "Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new' [CERT_CPP-MEM54-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new' [CERT_CPP-MEM54-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-MEM54_CPP (RULE) Provide placement new with properly aligned pointers to sufficient storage capacity" ] } }, { "id": "CERT_CPP-MEM54-b", "name": "An overhead should be used when an array of objects is passed to the placement 'new' allocation function", "shortDescription": { "text": "An overhead should be used when an array of objects is passed to the placement 'new' allocation function" }, "fullDescription": { "text": "An overhead should be used when an array of objects is passed to the placement 'new' allocation function [CERT_CPP-MEM54-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An overhead should be used when an array of objects is passed to the placement 'new' allocation function [CERT_CPP-MEM54-b]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-MEM54_CPP (RULE) Provide placement new with properly aligned pointers to sufficient storage capacity" ] } }, { "id": "CERT_CPP-CON54-a", "name": "Wrap functions that can spuriously wake up in a loop", "shortDescription": { "text": "Wrap functions that can spuriously wake up in a loop" }, "fullDescription": { "text": "Wrap functions that can spuriously wake up in a loop [CERT_CPP-CON54-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Wrap functions that can spuriously wake up in a loop [CERT_CPP-CON54-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-CON54_CPP (RULE) Wrap functions that can spuriously wake up in a loop" ] } }, { "id": "CERT_CPP-ERR56-a", "name": "Always catch exceptions", "shortDescription": { "text": "Always catch exceptions" }, "fullDescription": { "text": "Always catch exceptions [CERT_CPP-ERR56-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Always catch exceptions [CERT_CPP-ERR56-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR56_CPP (RULE) Guarantee exception safety" ] } }, { "id": "CERT_CPP-ERR56-b", "name": "Empty 'catch' blocks should not be used", "shortDescription": { "text": "Empty 'catch' blocks should not be used" }, "fullDescription": { "text": "Empty 'catch' blocks should not be used [CERT_CPP-ERR56-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Empty 'catch' blocks should not be used [CERT_CPP-ERR56-b]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR56_CPP (RULE) Guarantee exception safety" ] } }, { "id": "CERT_CPP-CON55-a", "name": "Do not use the 'notify_one()' function when multiple threads are waiting on the same condition variable", "shortDescription": { "text": "Do not use the 'notify_one()' function when multiple threads are waiting on the same condition variable" }, "fullDescription": { "text": "Do not use the 'notify_one()' function when multiple threads are waiting on the same condition variable [CERT_CPP-CON55-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use the 'notify_one()' function when multiple threads are waiting on the same condition variable [CERT_CPP-CON55-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-CON55_CPP (RULE) Preserve thread safety and liveness when using condition variables" ] } }, { "id": "CERT_CPP-ERR55-a", "name": "Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)", "shortDescription": { "text": "Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" }, "fullDescription": { "text": "Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s) [CERT_CPP-ERR55-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s) [CERT_CPP-ERR55-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR55_CPP (RULE) Honor exception specifications" ] } }, { "id": "CERT_CPP-CON52-a", "name": "Use locks to prevent race conditions when modifying bit fields", "shortDescription": { "text": "Use locks to prevent race conditions when modifying bit fields" }, "fullDescription": { "text": "Use locks to prevent race conditions when modifying bit fields [CERT_CPP-CON52-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use locks to prevent race conditions when modifying bit fields [CERT_CPP-CON52-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-CON52_CPP (RULE) Prevent data races when accessing bit-fields from multiple threads" ] } }, { "id": "CERT_CPP-ERR54-a", "name": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class", "shortDescription": { "text": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" }, "fullDescription": { "text": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class [CERT_CPP-ERR54-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class [CERT_CPP-ERR54-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR54_CPP (RULE) Catch handlers should order their parameter types from most derived to least derived" ] } }, { "id": "CERT_CPP-MEM57-a", "name": "Avoid using the default operator 'new' for over-aligned types", "shortDescription": { "text": "Avoid using the default operator 'new' for over-aligned types" }, "fullDescription": { "text": "Avoid using the default operator 'new' for over-aligned types [CERT_CPP-MEM57-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using the default operator 'new' for over-aligned types [CERT_CPP-MEM57-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-MEM57_CPP (RULE) Avoid using default operator new for over-aligned types" ] } }, { "id": "CERT_CPP-CON53-a", "name": "Do not acquire locks in different order", "shortDescription": { "text": "Do not acquire locks in different order" }, "fullDescription": { "text": "Do not acquire locks in different order [CERT_CPP-CON53-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not acquire locks in different order [CERT_CPP-CON53-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-CON53_CPP (RULE) Avoid deadlock by locking in a predefined order" ] } }, { "id": "CERT_CPP-ERR53-a", "name": "Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases", "shortDescription": { "text": "Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" }, "fullDescription": { "text": "Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases [CERT_CPP-ERR53-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases [CERT_CPP-ERR53-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR53_CPP (RULE) Do not reference base classes or class data members in a constructor or destructor function-try-block handler" ] } }, { "id": "CERT_CPP-STR53-a", "name": "Guarantee that container indices are within the valid range", "shortDescription": { "text": "Guarantee that container indices are within the valid range" }, "fullDescription": { "text": "Guarantee that container indices are within the valid range [CERT_CPP-STR53-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Guarantee that container indices are within the valid range [CERT_CPP-STR53-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-STR53_CPP (RULE) Range check element access" ] } }, { "id": "CERT_CPP-DCL51-a", "name": "Do not #define or #undef identifiers with names which start with underscore", "shortDescription": { "text": "Do not #define or #undef identifiers with names which start with underscore" }, "fullDescription": { "text": "Do not #define or #undef identifiers with names which start with underscore [CERT_CPP-DCL51-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not #define or #undef identifiers with names which start with underscore [CERT_CPP-DCL51-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-DCL51_CPP (RULE) Do not declare or define a reserved identifier" ] } }, { "id": "CERT_CPP-DCL51-b", "name": "Do not redefine reserved words", "shortDescription": { "text": "Do not redefine reserved words" }, "fullDescription": { "text": "Do not redefine reserved words [CERT_CPP-DCL51-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not redefine reserved words [CERT_CPP-DCL51-b]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-DCL51_CPP (RULE) Do not declare or define a reserved identifier" ] } }, { "id": "CERT_CPP-DCL51-c", "name": "Do not #define nor #undef identifier 'defined'", "shortDescription": { "text": "Do not #define nor #undef identifier 'defined'" }, "fullDescription": { "text": "Do not #define nor #undef identifier 'defined' [CERT_CPP-DCL51-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not #define nor #undef identifier 'defined' [CERT_CPP-DCL51-c]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-DCL51_CPP (RULE) Do not declare or define a reserved identifier" ] } }, { "id": "CERT_CPP-DCL51-d", "name": "The names of standard library macros, objects and functions shall not be reused", "shortDescription": { "text": "The names of standard library macros, objects and functions shall not be reused" }, "fullDescription": { "text": "The names of standard library macros, objects and functions shall not be reused [CERT_CPP-DCL51-d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The names of standard library macros, objects and functions shall not be reused [CERT_CPP-DCL51-d]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-DCL51_CPP (RULE) Do not declare or define a reserved identifier" ] } }, { "id": "CERT_CPP-DCL51-e", "name": "The names of standard library macros, objects and functions shall not be reused (C90)", "shortDescription": { "text": "The names of standard library macros, objects and functions shall not be reused (C90)" }, "fullDescription": { "text": "The names of standard library macros, objects and functions shall not be reused (C90) [CERT_CPP-DCL51-e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The names of standard library macros, objects and functions shall not be reused (C90) [CERT_CPP-DCL51-e]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-DCL51_CPP (RULE) Do not declare or define a reserved identifier" ] } }, { "id": "CERT_CPP-DCL51-f", "name": "The names of standard library macros, objects and functions shall not be reused (C99)", "shortDescription": { "text": "The names of standard library macros, objects and functions shall not be reused (C99)" }, "fullDescription": { "text": "The names of standard library macros, objects and functions shall not be reused (C99) [CERT_CPP-DCL51-f]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The names of standard library macros, objects and functions shall not be reused (C99) [CERT_CPP-DCL51-f]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-DCL51_CPP (RULE) Do not declare or define a reserved identifier" ] } }, { "id": "CERT_CPP-STR50-b", "name": "Avoid overflow due to reading a not zero terminated string", "shortDescription": { "text": "Avoid overflow due to reading a not zero terminated string" }, "fullDescription": { "text": "Avoid overflow due to reading a not zero terminated string [CERT_CPP-STR50-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow due to reading a not zero terminated string [CERT_CPP-STR50-b]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-STR50_CPP (RULE) Guarantee that storage for strings has sufficient space for character data and the null terminator" ] } }, { "id": "CERT_CPP-STR50-c", "name": "Avoid overflow when writing to a buffer", "shortDescription": { "text": "Avoid overflow when writing to a buffer" }, "fullDescription": { "text": "Avoid overflow when writing to a buffer [CERT_CPP-STR50-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when writing to a buffer [CERT_CPP-STR50-c]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-STR50_CPP (RULE) Guarantee that storage for strings has sufficient space for character data and the null terminator" ] } }, { "id": "CERT_CPP-STR50-e", "name": "Prevent buffer overflows from tainted data", "shortDescription": { "text": "Prevent buffer overflows from tainted data" }, "fullDescription": { "text": "Prevent buffer overflows from tainted data [CERT_CPP-STR50-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Prevent buffer overflows from tainted data [CERT_CPP-STR50-e]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-STR50_CPP (RULE) Guarantee that storage for strings has sufficient space for character data and the null terminator" ] } }, { "id": "CERT_CPP-STR50-f", "name": "Avoid buffer write overflow from tainted data", "shortDescription": { "text": "Avoid buffer write overflow from tainted data" }, "fullDescription": { "text": "Avoid buffer write overflow from tainted data [CERT_CPP-STR50-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer write overflow from tainted data [CERT_CPP-STR50-f]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-STR50_CPP (RULE) Guarantee that storage for strings has sufficient space for character data and the null terminator" ] } }, { "id": "CERT_CPP-STR50-g", "name": "Do not use the 'char' buffer to store input from 'std::cin'", "shortDescription": { "text": "Do not use the 'char' buffer to store input from 'std::cin'" }, "fullDescription": { "text": "Do not use the 'char' buffer to store input from 'std::cin' [CERT_CPP-STR50-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use the 'char' buffer to store input from 'std::cin' [CERT_CPP-STR50-g]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-STR50_CPP (RULE) Guarantee that storage for strings has sufficient space for character data and the null terminator" ] } }, { "id": "CERT_CPP-DCL52-a", "name": "Never qualify a reference type with 'const' or 'volatile'", "shortDescription": { "text": "Never qualify a reference type with 'const' or 'volatile'" }, "fullDescription": { "text": "Never qualify a reference type with 'const' or 'volatile' [CERT_CPP-DCL52-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Never qualify a reference type with 'const' or 'volatile' [CERT_CPP-DCL52-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-DCL52_CPP (RULE) Never qualify a reference type with const or volatile" ] } }, { "id": "CERT_CPP-STR52-a", "name": "Use valid references, pointers, and iterators to reference elements of a basic_string", "shortDescription": { "text": "Use valid references, pointers, and iterators to reference elements of a basic_string" }, "fullDescription": { "text": "Use valid references, pointers, and iterators to reference elements of a basic_string [CERT_CPP-STR52-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use valid references, pointers, and iterators to reference elements of a basic_string [CERT_CPP-STR52-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-STR52_CPP (RULE) Use valid references, pointers, and iterators to reference elements of a basic_string" ] } }, { "id": "CERT_CPP-DCL50-a", "name": "Functions shall not be defined with a variable number of arguments", "shortDescription": { "text": "Functions shall not be defined with a variable number of arguments" }, "fullDescription": { "text": "Functions shall not be defined with a variable number of arguments [CERT_CPP-DCL50-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Functions shall not be defined with a variable number of arguments [CERT_CPP-DCL50-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-DCL50_CPP (RULE) Do not define a C-style variadic function" ] } }, { "id": "CERT_CPP-STR51-a", "name": "Avoid null pointer dereferencing", "shortDescription": { "text": "Avoid null pointer dereferencing" }, "fullDescription": { "text": "Avoid null pointer dereferencing [CERT_CPP-STR51-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid null pointer dereferencing [CERT_CPP-STR51-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-STR51_CPP (RULE) Do not attempt to create a std::string from a null pointer" ] } }, { "id": "CERT_CPP-OOP53-a", "name": "List members in an initialization list in the order in which they are declared", "shortDescription": { "text": "List members in an initialization list in the order in which they are declared" }, "fullDescription": { "text": "List members in an initialization list in the order in which they are declared [CERT_CPP-OOP53-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "List members in an initialization list in the order in which they are declared [CERT_CPP-OOP53-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-OOP53_CPP (RULE) Write constructor member initializers in the canonical order" ] } }, { "id": "CERT_CPP-OOP52-a", "name": "Define a virtual destructor in classes used as base classes which have virtual functions", "shortDescription": { "text": "Define a virtual destructor in classes used as base classes which have virtual functions" }, "fullDescription": { "text": "Define a virtual destructor in classes used as base classes which have virtual functions [CERT_CPP-OOP52-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Define a virtual destructor in classes used as base classes which have virtual functions [CERT_CPP-OOP52-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-OOP52_CPP (RULE) Do not delete a polymorphic object without a virtual destructor" ] } }, { "id": "CERT_CPP-OOP51-a", "name": "Do not slice derived objects", "shortDescription": { "text": "Do not slice derived objects" }, "fullDescription": { "text": "Do not slice derived objects [CERT_CPP-OOP51-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not slice derived objects [CERT_CPP-OOP51-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-OOP51_CPP (RULE) Do not slice derived objects" ] } }, { "id": "CERT_CPP-OOP50-a", "name": "Avoid calling virtual functions from constructors", "shortDescription": { "text": "Avoid calling virtual functions from constructors" }, "fullDescription": { "text": "Avoid calling virtual functions from constructors [CERT_CPP-OOP50-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid calling virtual functions from constructors [CERT_CPP-OOP50-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-OOP50_CPP (RULE) Do not invoke virtual functions from constructors or destructors" ] } }, { "id": "CERT_CPP-OOP50-b", "name": "Avoid calling virtual functions from destructors", "shortDescription": { "text": "Avoid calling virtual functions from destructors" }, "fullDescription": { "text": "Avoid calling virtual functions from destructors [CERT_CPP-OOP50-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid calling virtual functions from destructors [CERT_CPP-OOP50-b]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-OOP50_CPP (RULE) Do not invoke virtual functions from constructors or destructors" ] } }, { "id": "CERT_CPP-OOP50-c", "name": "Do not use dynamic type of an object under construction", "shortDescription": { "text": "Do not use dynamic type of an object under construction" }, "fullDescription": { "text": "Do not use dynamic type of an object under construction [CERT_CPP-OOP50-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use dynamic type of an object under construction [CERT_CPP-OOP50-c]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-OOP50_CPP (RULE) Do not invoke virtual functions from constructors or destructors" ] } }, { "id": "CERT_CPP-OOP50-d", "name": "Do not use dynamic type of an object under destruction", "shortDescription": { "text": "Do not use dynamic type of an object under destruction" }, "fullDescription": { "text": "Do not use dynamic type of an object under destruction [CERT_CPP-OOP50-d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use dynamic type of an object under destruction [CERT_CPP-OOP50-d]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-OOP50_CPP (RULE) Do not invoke virtual functions from constructors or destructors" ] } }, { "id": "CERT_CPP-OOP57-a", "name": "Do not initialize objects with a non-trivial class type using C standard library functions", "shortDescription": { "text": "Do not initialize objects with a non-trivial class type using C standard library functions" }, "fullDescription": { "text": "Do not initialize objects with a non-trivial class type using C standard library functions [CERT_CPP-OOP57-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not initialize objects with a non-trivial class type using C standard library functions [CERT_CPP-OOP57-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-OOP57_CPP (RULE) Prefer special member functions and overloaded operators to C Standard Library functions" ] } }, { "id": "CERT_CPP-OOP57-b", "name": "Do not compare objects of nonstandard-layout class type with C standard library functions", "shortDescription": { "text": "Do not compare objects of nonstandard-layout class type with C standard library functions" }, "fullDescription": { "text": "Do not compare objects of nonstandard-layout class type with C standard library functions [CERT_CPP-OOP57-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not compare objects of nonstandard-layout class type with C standard library functions [CERT_CPP-OOP57-b]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-OOP57_CPP (RULE) Prefer special member functions and overloaded operators to C Standard Library functions" ] } }, { "id": "CERT_CPP-MSC50-a", "name": "Do not use the rand() function for generating pseudorandom numbers", "shortDescription": { "text": "Do not use the rand() function for generating pseudorandom numbers" }, "fullDescription": { "text": "Do not use the rand() function for generating pseudorandom numbers [CERT_CPP-MSC50-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use the rand() function for generating pseudorandom numbers [CERT_CPP-MSC50-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-MSC50_CPP (RULE) Do not use std::rand() for generating pseudorandom numbers" ] } }, { "id": "CERT_CPP-OOP56-a", "name": "Properly define terminate handlers", "shortDescription": { "text": "Properly define terminate handlers" }, "fullDescription": { "text": "Properly define terminate handlers [CERT_CPP-OOP56-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Properly define terminate handlers [CERT_CPP-OOP56-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-OOP56_CPP (RULE) Honor replacement handler requirements" ] } }, { "id": "CERT_CPP-OOP56-b", "name": "Properly define unexpected handlers", "shortDescription": { "text": "Properly define unexpected handlers" }, "fullDescription": { "text": "Properly define unexpected handlers [CERT_CPP-OOP56-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Properly define unexpected handlers [CERT_CPP-OOP56-b]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-OOP56_CPP (RULE) Honor replacement handler requirements" ] } }, { "id": "CERT_CPP-OOP56-c", "name": "Properly define new handlers", "shortDescription": { "text": "Properly define new handlers" }, "fullDescription": { "text": "Properly define new handlers [CERT_CPP-OOP56-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Properly define new handlers [CERT_CPP-OOP56-c]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-OOP56_CPP (RULE) Honor replacement handler requirements" ] } }, { "id": "CERT_CPP-MSC51-a", "name": "Properly seed pseudorandom number generators", "shortDescription": { "text": "Properly seed pseudorandom number generators" }, "fullDescription": { "text": "Properly seed pseudorandom number generators [CERT_CPP-MSC51-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly seed pseudorandom number generators [CERT_CPP-MSC51-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-MSC51_CPP (RULE) Ensure your random number generator is properly seeded" ] } }, { "id": "CERT_CPP-OOP55-a", "name": "A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type", "shortDescription": { "text": "A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" }, "fullDescription": { "text": "A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type [CERT_CPP-OOP55-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type [CERT_CPP-OOP55-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-OOP55_CPP (RULE) Do not use pointer-to-member operators to access nonexistent members" ] } }, { "id": "CERT_CPP-MSC52-a", "name": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression", "shortDescription": { "text": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" }, "fullDescription": { "text": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression [CERT_CPP-MSC52-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression [CERT_CPP-MSC52-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-MSC52_CPP (RULE) Value-returning functions must return a value from all exit paths" ] } }, { "id": "CERT_CPP-OOP54-a", "name": "User-provided copy assignment operators shall handle self-assignment", "shortDescription": { "text": "User-provided copy assignment operators shall handle self-assignment" }, "fullDescription": { "text": "User-provided copy assignment operators shall handle self-assignment [CERT_CPP-OOP54-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "User-provided copy assignment operators shall handle self-assignment [CERT_CPP-OOP54-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-OOP54_CPP (RULE) Gracefully handle self-copy assignment" ] } }, { "id": "CERT_CPP-OOP58-a", "name": "Copy operations must not mutate the source object", "shortDescription": { "text": "Copy operations must not mutate the source object" }, "fullDescription": { "text": "Copy operations must not mutate the source object [CERT_CPP-OOP58-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Copy operations must not mutate the source object [CERT_CPP-OOP58-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-OOP58_CPP (RULE) Copy operations must not mutate the source object" ] } }, { "id": "CERT_CPP-FIO51-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [CERT_CPP-FIO51-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Ensure resources are freed [CERT_CPP-FIO51-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-FIO51_CPP (RULE) Close files when they are no longer needed" ] } }, { "id": "CERT_CPP-FIO50-a", "name": "Do not alternately input and output from a stream without an intervening flush or positioning call", "shortDescription": { "text": "Do not alternately input and output from a stream without an intervening flush or positioning call" }, "fullDescription": { "text": "Do not alternately input and output from a stream without an intervening flush or positioning call [CERT_CPP-FIO50-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not alternately input and output from a stream without an intervening flush or positioning call [CERT_CPP-FIO50-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-FIO50_CPP (RULE) Do not alternately input and output from a file stream without an intervening positioning call" ] } }, { "id": "CERT_CPP-DCL60-a", "name": "The One Definition Rule shall not be violated", "shortDescription": { "text": "The One Definition Rule shall not be violated" }, "fullDescription": { "text": "The One Definition Rule shall not be violated [CERT_CPP-DCL60-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The One Definition Rule shall not be violated [CERT_CPP-DCL60-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-DCL60_CPP (RULE) Obey the one-definition rule" ] } }, { "id": "CERT_CPP-EXP55-a", "name": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference", "shortDescription": { "text": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" }, "fullDescription": { "text": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference [CERT_CPP-EXP55-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference [CERT_CPP-EXP55-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP55_CPP (RULE) Do not access a cv-qualified object through a cv-unqualified type" ] } }, { "id": "CERT_CPP-EXP56-a", "name": "Do not call a function with a mismatched language linkage", "shortDescription": { "text": "Do not call a function with a mismatched language linkage" }, "fullDescription": { "text": "Do not call a function with a mismatched language linkage [CERT_CPP-EXP56-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not call a function with a mismatched language linkage [CERT_CPP-EXP56-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP56_CPP (RULE) Do not call a function with a mismatched language linkage" ] } }, { "id": "CERT_CPP-EXP53-a", "name": "Avoid use before initialization", "shortDescription": { "text": "Avoid use before initialization" }, "fullDescription": { "text": "Avoid use before initialization [CERT_CPP-EXP53-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid use before initialization [CERT_CPP-EXP53-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP53_CPP (RULE) Do not read uninitialized memory" ] } }, { "id": "CERT_CPP-EXP54-a", "name": "Do not use resources that have been freed", "shortDescription": { "text": "Do not use resources that have been freed" }, "fullDescription": { "text": "Do not use resources that have been freed [CERT_CPP-EXP54-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use resources that have been freed [CERT_CPP-EXP54-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP54_CPP (RULE) Do not access an object outside of its lifetime" ] } }, { "id": "CERT_CPP-EXP54-b", "name": "The address of an object with automatic storage shall not be returned from a function", "shortDescription": { "text": "The address of an object with automatic storage shall not be returned from a function" }, "fullDescription": { "text": "The address of an object with automatic storage shall not be returned from a function [CERT_CPP-EXP54-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The address of an object with automatic storage shall not be returned from a function [CERT_CPP-EXP54-b]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP54_CPP (RULE) Do not access an object outside of its lifetime" ] } }, { "id": "CERT_CPP-EXP54-c", "name": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist", "shortDescription": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" }, "fullDescription": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist [CERT_CPP-EXP54-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist [CERT_CPP-EXP54-c]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP54_CPP (RULE) Do not access an object outside of its lifetime" ] } }, { "id": "CERT_CPP-EXP59-a", "name": "Use offsetof() on valid types and members", "shortDescription": { "text": "Use offsetof() on valid types and members" }, "fullDescription": { "text": "Use offsetof() on valid types and members [CERT_CPP-EXP59-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use offsetof() on valid types and members [CERT_CPP-EXP59-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP59_CPP (RULE) Use offsetof() on valid types and members" ] } }, { "id": "CERT_CPP-EXP57-a", "name": "Do not delete objects with incomplete class at the point of deletion", "shortDescription": { "text": "Do not delete objects with incomplete class at the point of deletion" }, "fullDescription": { "text": "Do not delete objects with incomplete class at the point of deletion [CERT_CPP-EXP57-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not delete objects with incomplete class at the point of deletion [CERT_CPP-EXP57-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP57_CPP (RULE) Do not cast or delete pointers to incomplete classes" ] } }, { "id": "CERT_CPP-EXP57-b", "name": "Conversions shall not be performed between a pointer to an incomplete type and any other type", "shortDescription": { "text": "Conversions shall not be performed between a pointer to an incomplete type and any other type" }, "fullDescription": { "text": "Conversions shall not be performed between a pointer to an incomplete type and any other type [CERT_CPP-EXP57-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Conversions shall not be performed between a pointer to an incomplete type and any other type [CERT_CPP-EXP57-b]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP57_CPP (RULE) Do not cast or delete pointers to incomplete classes" ] } }, { "id": "CERT_CPP-EXP58-a", "name": "Use macros for variable arguments correctly", "shortDescription": { "text": "Use macros for variable arguments correctly" }, "fullDescription": { "text": "Use macros for variable arguments correctly [CERT_CPP-EXP58-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use macros for variable arguments correctly [CERT_CPP-EXP58-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP58_CPP (RULE) Pass an object of the correct type to va_start" ] } }, { "id": "CERT_CPP-EXP62-a", "name": "Do not compare objects of a class that may contain padding bits with C standard library functions", "shortDescription": { "text": "Do not compare objects of a class that may contain padding bits with C standard library functions" }, "fullDescription": { "text": "Do not compare objects of a class that may contain padding bits with C standard library functions [CERT_CPP-EXP62-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not compare objects of a class that may contain padding bits with C standard library functions [CERT_CPP-EXP62-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP62_CPP (RULE) Do not access the bits of an object representation that are not part of the object's value representation" ] } }, { "id": "CERT_CPP-EXP63-a", "name": "Do not rely on the value of a moved-from object", "shortDescription": { "text": "Do not rely on the value of a moved-from object" }, "fullDescription": { "text": "Do not rely on the value of a moved-from object [CERT_CPP-EXP63-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not rely on the value of a moved-from object [CERT_CPP-EXP63-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP63_CPP (RULE) Do not rely on the value of a moved-from object" ] } }, { "id": "CERT_CPP-EXP60-a", "name": "Do not pass a nonstandard-layout type object across execution boundaries", "shortDescription": { "text": "Do not pass a nonstandard-layout type object across execution boundaries" }, "fullDescription": { "text": "Do not pass a nonstandard-layout type object across execution boundaries [CERT_CPP-EXP60-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not pass a nonstandard-layout type object across execution boundaries [CERT_CPP-EXP60-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP60_CPP (RULE) Do not pass a nonstandard-layout type object across execution boundaries" ] } }, { "id": "CERT_CPP-EXP61-a", "name": "Never return lambdas that capture local objects by reference", "shortDescription": { "text": "Never return lambdas that capture local objects by reference" }, "fullDescription": { "text": "Never return lambdas that capture local objects by reference [CERT_CPP-EXP61-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Never return lambdas that capture local objects by reference [CERT_CPP-EXP61-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP61_CPP (RULE) A lambda object must not outlive any of its reference captured objects" ] } }, { "id": "CERT_CPP-EXP61-b", "name": "Never capture local objects from an outer lambda by reference", "shortDescription": { "text": "Never capture local objects from an outer lambda by reference" }, "fullDescription": { "text": "Never capture local objects from an outer lambda by reference [CERT_CPP-EXP61-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Never capture local objects from an outer lambda by reference [CERT_CPP-EXP61-b]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP61_CPP (RULE) A lambda object must not outlive any of its reference captured objects" ] } }, { "id": "CERT_CPP-EXP61-c", "name": "The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime", "shortDescription": { "text": "The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime" }, "fullDescription": { "text": "The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime [CERT_CPP-EXP61-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime [CERT_CPP-EXP61-c]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP61_CPP (RULE) A lambda object must not outlive any of its reference captured objects" ] } }, { "id": "CERT_CPP-MSC53-a", "name": "Never return from functions that should not return", "shortDescription": { "text": "Never return from functions that should not return" }, "fullDescription": { "text": "Never return from functions that should not return [CERT_CPP-MSC53-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Never return from functions that should not return [CERT_CPP-MSC53-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-MSC53_CPP (RULE) Do not return from a function declared [[noreturn]]" ] } }, { "id": "CERT_CPP-MSC54-a", "name": "Properly define signal handlers", "shortDescription": { "text": "Properly define signal handlers" }, "fullDescription": { "text": "Properly define signal handlers [CERT_CPP-MSC54-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly define signal handlers [CERT_CPP-MSC54-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-MSC54_CPP (RULE) A signal handler must be a plain old function" ] } }, { "id": "CERT_CPP-ERR62-a", "name": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used", "shortDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" }, "fullDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [CERT_CPP-ERR62-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [CERT_CPP-ERR62-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR62_CPP (RULE) Detect errors when converting a string to a number" ] } }, { "id": "CERT_CPP-ERR61-a", "name": "A class type exception shall always be caught by reference", "shortDescription": { "text": "A class type exception shall always be caught by reference" }, "fullDescription": { "text": "A class type exception shall always be caught by reference [CERT_CPP-ERR61-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A class type exception shall always be caught by reference [CERT_CPP-ERR61-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR61_CPP (RULE) Catch exceptions by lvalue reference" ] } }, { "id": "CERT_CPP-ERR61-b", "name": "Throw by value, catch by reference", "shortDescription": { "text": "Throw by value, catch by reference" }, "fullDescription": { "text": "Throw by value, catch by reference [CERT_CPP-ERR61-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Throw by value, catch by reference [CERT_CPP-ERR61-b]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR61_CPP (RULE) Catch exceptions by lvalue reference" ] } }, { "id": "CERT_CPP-ERR60-a", "name": "Exception objects must be nothrow copy constructible", "shortDescription": { "text": "Exception objects must be nothrow copy constructible" }, "fullDescription": { "text": "Exception objects must be nothrow copy constructible [CERT_CPP-ERR60-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Exception objects must be nothrow copy constructible [CERT_CPP-ERR60-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR60_CPP (RULE) Exception objects must be nothrow copy constructible" ] } }, { "id": "CERT_CPP-ERR60-b", "name": "An explicitly declared copy constructor for a class that inherits from 'std::exception' should have a non-throwing exception specification", "shortDescription": { "text": "An explicitly declared copy constructor for a class that inherits from 'std::exception' should have a non-throwing exception specification" }, "fullDescription": { "text": "An explicitly declared copy constructor for a class that inherits from 'std::exception' should have a non-throwing exception specification [CERT_CPP-ERR60-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An explicitly declared copy constructor for a class that inherits from 'std::exception' should have a non-throwing exception specification [CERT_CPP-ERR60-b]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR60_CPP (RULE) Exception objects must be nothrow copy constructible" ] } }, { "id": "CERT_CPP-CTR57-a", "name": "For associative containers never use comparison function returning true for equal values", "shortDescription": { "text": "For associative containers never use comparison function returning true for equal values" }, "fullDescription": { "text": "For associative containers never use comparison function returning true for equal values [CERT_CPP-CTR57-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "For associative containers never use comparison function returning true for equal values [CERT_CPP-CTR57-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-CTR57_CPP (RULE) Provide a valid ordering predicate" ] } }, { "id": "CERT_CPP-CTR58-a", "name": "Make predicates const pure functions", "shortDescription": { "text": "Make predicates const pure functions" }, "fullDescription": { "text": "Make predicates const pure functions [CERT_CPP-CTR58-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Make predicates const pure functions [CERT_CPP-CTR58-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-CTR58_CPP (RULE) Predicate function objects should not be mutable" ] } }, { "id": "CERT_CPP-CTR53-a", "name": "Do not use an iterator range that isn't really a range", "shortDescription": { "text": "Do not use an iterator range that isn't really a range" }, "fullDescription": { "text": "Do not use an iterator range that isn't really a range [CERT_CPP-CTR53-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use an iterator range that isn't really a range [CERT_CPP-CTR53-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-CTR53_CPP (RULE) Use valid iterator ranges" ] } }, { "id": "CERT_CPP-CTR53-b", "name": "Do not compare iterators from different containers", "shortDescription": { "text": "Do not compare iterators from different containers" }, "fullDescription": { "text": "Do not compare iterators from different containers [CERT_CPP-CTR53-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not compare iterators from different containers [CERT_CPP-CTR53-b]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-CTR53_CPP (RULE) Use valid iterator ranges" ] } }, { "id": "CERT_CPP-CTR54-a", "name": "Do not compare iterators from different containers", "shortDescription": { "text": "Do not compare iterators from different containers" }, "fullDescription": { "text": "Do not compare iterators from different containers [CERT_CPP-CTR54-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not compare iterators from different containers [CERT_CPP-CTR54-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-CTR54_CPP (RULE) Do not subtract iterators that do not refer to the same container" ] } }, { "id": "CERT_CPP-CTR54-b", "name": "Do not compare two unrelated pointers", "shortDescription": { "text": "Do not compare two unrelated pointers" }, "fullDescription": { "text": "Do not compare two unrelated pointers [CERT_CPP-CTR54-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not compare two unrelated pointers [CERT_CPP-CTR54-b]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-CTR54_CPP (RULE) Do not subtract iterators that do not refer to the same container" ] } }, { "id": "CERT_CPP-CTR54-c", "name": "Do not subtract two pointers that do not address elements of the same array", "shortDescription": { "text": "Do not subtract two pointers that do not address elements of the same array" }, "fullDescription": { "text": "Do not subtract two pointers that do not address elements of the same array [CERT_CPP-CTR54-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not subtract two pointers that do not address elements of the same array [CERT_CPP-CTR54-c]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-CTR54_CPP (RULE) Do not subtract iterators that do not refer to the same container" ] } }, { "id": "CERT_CPP-CTR55-a", "name": "Do not add or subtract a constant with a value greater than one from an iterator", "shortDescription": { "text": "Do not add or subtract a constant with a value greater than one from an iterator" }, "fullDescription": { "text": "Do not add or subtract a constant with a value greater than one from an iterator [CERT_CPP-CTR55-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not add or subtract a constant with a value greater than one from an iterator [CERT_CPP-CTR55-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-CTR55_CPP (RULE) Do not use an additive operator on an iterator if the result would overflow" ] } }, { "id": "CERT_CPP-CTR56-a", "name": "Don't treat arrays polymorphically", "shortDescription": { "text": "Don't treat arrays polymorphically" }, "fullDescription": { "text": "Don't treat arrays polymorphically [CERT_CPP-CTR56-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't treat arrays polymorphically [CERT_CPP-CTR56-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-CTR56_CPP (RULE) Do not use pointer arithmetic on polymorphic objects" ] } }, { "id": "CERT_CPP-CTR56-b", "name": "A pointer to an array of derived class objects should not be converted to a base class pointer", "shortDescription": { "text": "A pointer to an array of derived class objects should not be converted to a base class pointer" }, "fullDescription": { "text": "A pointer to an array of derived class objects should not be converted to a base class pointer [CERT_CPP-CTR56-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A pointer to an array of derived class objects should not be converted to a base class pointer [CERT_CPP-CTR56-b]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-CTR56_CPP (RULE) Do not use pointer arithmetic on polymorphic objects" ] } }, { "id": "CERT_CPP-CTR56-c", "name": "Do not treat arrays polymorphically", "shortDescription": { "text": "Do not treat arrays polymorphically" }, "fullDescription": { "text": "Do not treat arrays polymorphically [CERT_CPP-CTR56-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not treat arrays polymorphically [CERT_CPP-CTR56-c]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-CTR56_CPP (RULE) Do not use pointer arithmetic on polymorphic objects" ] } }, { "id": "CERT_CPP-CTR50-a", "name": "Guarantee that container indices are within the valid range", "shortDescription": { "text": "Guarantee that container indices are within the valid range" }, "fullDescription": { "text": "Guarantee that container indices are within the valid range [CERT_CPP-CTR50-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Guarantee that container indices are within the valid range [CERT_CPP-CTR50-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-CTR50_CPP (RULE) Guarantee that container indices and iterators are within the valid range" ] } }, { "id": "CERT_CPP-CTR51-a", "name": "Do not modify container while iterating over it", "shortDescription": { "text": "Do not modify container while iterating over it" }, "fullDescription": { "text": "Do not modify container while iterating over it [CERT_CPP-CTR51-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not modify container while iterating over it [CERT_CPP-CTR51-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-CTR51_CPP (RULE) Use valid references, pointers, and iterators to reference elements of a container" ] } }, { "id": "CERT_CPP-CTR52-a", "name": "Do not pass empty container iterators to std algorithms as destinations", "shortDescription": { "text": "Do not pass empty container iterators to std algorithms as destinations" }, "fullDescription": { "text": "Do not pass empty container iterators to std algorithms as destinations [CERT_CPP-CTR52-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not pass empty container iterators to std algorithms as destinations [CERT_CPP-CTR52-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-CTR52_CPP (RULE) Guarantee that library functions do not overflow" ] } }, { "id": "CERT_CPP-INT50-a", "name": "An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration", "shortDescription": { "text": "An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" }, "fullDescription": { "text": "An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration [CERT_CPP-INT50-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration [CERT_CPP-INT50-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-INT50_CPP (RULE) Do not cast to an out-of-range enumeration value" ] } }, { "id": "CERT_CPP-EXP51-a", "name": "Do not treat arrays polymorphically", "shortDescription": { "text": "Do not treat arrays polymorphically" }, "fullDescription": { "text": "Do not treat arrays polymorphically [CERT_CPP-EXP51-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not treat arrays polymorphically [CERT_CPP-EXP51-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP51_CPP (RULE) Do not delete an array through a pointer of the incorrect type" ] } }, { "id": "CERT_CPP-EXP52-a", "name": "The operand of the sizeof operator shall not contain any expression which has side effects", "shortDescription": { "text": "The operand of the sizeof operator shall not contain any expression which has side effects" }, "fullDescription": { "text": "The operand of the sizeof operator shall not contain any expression which has side effects [CERT_CPP-EXP52-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The operand of the sizeof operator shall not contain any expression which has side effects [CERT_CPP-EXP52-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP52_CPP (RULE) Do not rely on side effects in unevaluated operands" ] } }, { "id": "CERT_CPP-EXP52-b", "name": "Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator", "shortDescription": { "text": "Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" }, "fullDescription": { "text": "Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator [CERT_CPP-EXP52-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator [CERT_CPP-EXP52-b]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP52_CPP (RULE) Do not rely on side effects in unevaluated operands" ] } }, { "id": "CERT_CPP-EXP52-c", "name": "The function call that causes the side effect shall not be the operand of the sizeof operator", "shortDescription": { "text": "The function call that causes the side effect shall not be the operand of the sizeof operator" }, "fullDescription": { "text": "The function call that causes the side effect shall not be the operand of the sizeof operator [CERT_CPP-EXP52-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The function call that causes the side effect shall not be the operand of the sizeof operator [CERT_CPP-EXP52-c]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP52_CPP (RULE) Do not rely on side effects in unevaluated operands" ] } }, { "id": "CERT_CPP-EXP52-d", "name": "The operand of the 'typeid' operator shall not contain any expression that has side effects", "shortDescription": { "text": "The operand of the 'typeid' operator shall not contain any expression that has side effects" }, "fullDescription": { "text": "The operand of the 'typeid' operator shall not contain any expression that has side effects [CERT_CPP-EXP52-d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The operand of the 'typeid' operator shall not contain any expression that has side effects [CERT_CPP-EXP52-d]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP52_CPP (RULE) Do not rely on side effects in unevaluated operands" ] } }, { "id": "CERT_CPP-EXP52-e", "name": "The operand of the 'typeid' operator shall not contain a function call that causes side effects", "shortDescription": { "text": "The operand of the 'typeid' operator shall not contain a function call that causes side effects" }, "fullDescription": { "text": "The operand of the 'typeid' operator shall not contain a function call that causes side effects [CERT_CPP-EXP52-e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The operand of the 'typeid' operator shall not contain a function call that causes side effects [CERT_CPP-EXP52-e]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP52_CPP (RULE) Do not rely on side effects in unevaluated operands" ] } }, { "id": "CERT_CPP-EXP50-a", "name": "The value of an expression shall be the same under any order of evaluation that the standard permits", "shortDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits" }, "fullDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [CERT_CPP-EXP50-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [CERT_CPP-EXP50-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP50_CPP (RULE) Do not depend on the order of evaluation for side effects" ] } }, { "id": "CERT_CPP-EXP50-b", "name": "Don't write code that depends on the order of evaluation of function arguments", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function arguments" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function arguments [CERT_CPP-EXP50-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of function arguments [CERT_CPP-EXP50-b]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP50_CPP (RULE) Do not depend on the order of evaluation for side effects" ] } }, { "id": "CERT_CPP-EXP50-c", "name": "Don't write code that depends on the order of evaluation of function designator and function arguments", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments [CERT_CPP-EXP50-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments [CERT_CPP-EXP50-c]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP50_CPP (RULE) Do not depend on the order of evaluation for side effects" ] } }, { "id": "CERT_CPP-EXP50-d", "name": "Don't write code that depends on the order of evaluation of expression that involves a function call", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call [CERT_CPP-EXP50-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call [CERT_CPP-EXP50-d]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP50_CPP (RULE) Do not depend on the order of evaluation for side effects" ] } }, { "id": "CERT_CPP-EXP50-e", "name": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression", "shortDescription": { "text": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" }, "fullDescription": { "text": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression [CERT_CPP-EXP50-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression [CERT_CPP-EXP50-e]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP50_CPP (RULE) Do not depend on the order of evaluation for side effects" ] } }, { "id": "CERT_CPP-EXP50-f", "name": "Don't write code that depends on the order of evaluation of function calls", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function calls" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function calls [CERT_CPP-EXP50-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of function calls [CERT_CPP-EXP50-f]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP50_CPP (RULE) Do not depend on the order of evaluation for side effects" ] } }, { "id": "CODSTA-22", "name": "Local variable or parameter names and class member variable or parent class\/struct member variable names shall differ by more than a single character", "shortDescription": { "text": "Local variable or parameter names and class member variable or parent class\/struct member variable names shall differ by more than a single character" }, "fullDescription": { "text": "Local variable or parameter names and class member variable or parent class\/struct member variable names shall differ by more than a single character [CODSTA-22]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Local variable or parameter names and class member variable or parent class\/struct member variable names shall differ by more than a single character [CODSTA-22]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-39", "name": "Avoid internal or external name conflict with a C++ reserved word", "shortDescription": { "text": "Avoid internal or external name conflict with a C++ reserved word" }, "fullDescription": { "text": "Avoid internal or external name conflict with a C++ reserved word [CODSTA-39]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid internal or external name conflict with a C++ reserved word [CODSTA-39]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-44", "name": "Local variables should not use the same names as member variables", "shortDescription": { "text": "Local variables should not use the same names as member variables" }, "fullDescription": { "text": "Local variables should not use the same names as member variables [CODSTA-44]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Local variables should not use the same names as member variables [CODSTA-44]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-45", "name": "Parameters should not use the same names as member variables", "shortDescription": { "text": "Parameters should not use the same names as member variables" }, "fullDescription": { "text": "Parameters should not use the same names as member variables [CODSTA-45]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Parameters should not use the same names as member variables [CODSTA-45]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-08", "name": "Do not use break in for loops", "shortDescription": { "text": "Do not use break in for loops" }, "fullDescription": { "text": "Do not use break in for loops [CODSTA-08]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use break in for loops [CODSTA-08]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-142", "name": "Global functions shall not declare parameters with array type", "shortDescription": { "text": "Global functions shall not declare parameters with array type" }, "fullDescription": { "text": "Global functions shall not declare parameters with array type [CODSTA-142]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Global functions shall not declare parameters with array type [CODSTA-142]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-15", "name": "Do not declare the size of an array when the array is passed into a function as a parameter", "shortDescription": { "text": "Do not declare the size of an array when the array is passed into a function as a parameter" }, "fullDescription": { "text": "Do not declare the size of an array when the array is passed into a function as a parameter [CODSTA-15]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not declare the size of an array when the array is passed into a function as a parameter [CODSTA-15]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-16", "name": "Do not declare the size of an array when the array is initialized", "shortDescription": { "text": "Do not declare the size of an array when the array is initialized" }, "fullDescription": { "text": "Do not declare the size of an array when the array is initialized [CODSTA-16]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not declare the size of an array when the array is initialized [CODSTA-16]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-160", "name": "The declaration of an array parameter shall not contain the 'static' keyword between the [ ]", "shortDescription": { "text": "The declaration of an array parameter shall not contain the 'static' keyword between the [ ]" }, "fullDescription": { "text": "The declaration of an array parameter shall not contain the 'static' keyword between the [ ] [CODSTA-160]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The declaration of an array parameter shall not contain the 'static' keyword between the [ ] [CODSTA-160]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-166_a", "name": "A pointer to a FILE object shall not be dereferenced", "shortDescription": { "text": "A pointer to a FILE object shall not be dereferenced" }, "fullDescription": { "text": "A pointer to a FILE object shall not be dereferenced [CODSTA-166_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A pointer to a FILE object shall not be dereferenced [CODSTA-166_a]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-166_b", "name": "A pointer to a FILE object shall not be dereferenced by a library function", "shortDescription": { "text": "A pointer to a FILE object shall not be dereferenced by a library function" }, "fullDescription": { "text": "A pointer to a FILE object shall not be dereferenced by a library function [CODSTA-166_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A pointer to a FILE object shall not be dereferenced by a library function [CODSTA-166_b]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-182", "name": "The 'sizeof' operator shall not have an operand which is a function parameter declared as \"array of type\"", "shortDescription": { "text": "The 'sizeof' operator shall not have an operand which is a function parameter declared as \"array of type\"" }, "fullDescription": { "text": "The 'sizeof' operator shall not have an operand which is a function parameter declared as \"array of type\" [CODSTA-182]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'sizeof' operator shall not have an operand which is a function parameter declared as \"array of type\" [CODSTA-182]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-185_a", "name": "The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type", "shortDescription": { "text": "The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" }, "fullDescription": { "text": "The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type [CODSTA-185_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type [CODSTA-185_a]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-197", "name": "Do not specify the bound of a character array initialized with a string literal", "shortDescription": { "text": "Do not specify the bound of a character array initialized with a string literal" }, "fullDescription": { "text": "Do not specify the bound of a character array initialized with a string literal [CODSTA-197]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not specify the bound of a character array initialized with a string literal [CODSTA-197]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-20", "name": "EOS should be used to terminate a string rather than NULL", "shortDescription": { "text": "EOS should be used to terminate a string rather than NULL" }, "fullDescription": { "text": "EOS should be used to terminate a string rather than NULL [CODSTA-20]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "EOS should be used to terminate a string rather than NULL [CODSTA-20]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-202", "name": "An inline definition of a function with external linkage shall not contain definitions and uses of static objects", "shortDescription": { "text": "An inline definition of a function with external linkage shall not contain definitions and uses of static objects" }, "fullDescription": { "text": "An inline definition of a function with external linkage shall not contain definitions and uses of static objects [CODSTA-202]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An inline definition of a function with external linkage shall not contain definitions and uses of static objects [CODSTA-202]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-51", "name": "Literal suffixes shall use uppercase rather than lowercase letters", "shortDescription": { "text": "Literal suffixes shall use uppercase rather than lowercase letters" }, "fullDescription": { "text": "Literal suffixes shall use uppercase rather than lowercase letters [CODSTA-51]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Literal suffixes shall use uppercase rather than lowercase letters [CODSTA-51]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-55", "name": "Enumeration types shall be used instead of integer types (and constants) as case labels", "shortDescription": { "text": "Enumeration types shall be used instead of integer types (and constants) as case labels" }, "fullDescription": { "text": "Enumeration types shall be used instead of integer types (and constants) as case labels [CODSTA-55]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Enumeration types shall be used instead of integer types (and constants) as case labels [CODSTA-55]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-01", "name": "Array elements shall be accessed by the array operator [ ]", "shortDescription": { "text": "Array elements shall be accessed by the array operator [ ]" }, "fullDescription": { "text": "Array elements shall be accessed by the array operator [ ] [CODSTA-01]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Array elements shall be accessed by the array operator [ ] [CODSTA-01]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-03", "name": "Do not define constants via #define", "shortDescription": { "text": "Do not define constants via #define" }, "fullDescription": { "text": "Do not define constants via #define [CODSTA-03]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not define constants via #define [CODSTA-03]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-04", "name": "Local variables shall not have static storage duration", "shortDescription": { "text": "Local variables shall not have static storage duration" }, "fullDescription": { "text": "Local variables shall not have static storage duration [CODSTA-04]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Local variables shall not have static storage duration [CODSTA-04]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-05", "name": "Pointers to pointers should be avoided whenever possible", "shortDescription": { "text": "Pointers to pointers should be avoided whenever possible" }, "fullDescription": { "text": "Pointers to pointers should be avoided whenever possible [CODSTA-05]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Pointers to pointers should be avoided whenever possible [CODSTA-05]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-06", "name": "Avoid using the '?:' operator", "shortDescription": { "text": "Avoid using the '?:' operator" }, "fullDescription": { "text": "Avoid using the '?:' operator [CODSTA-06]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid using the '?:' operator [CODSTA-06]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-07", "name": "If a function has no parameters, use ( ) instead of ( void )", "shortDescription": { "text": "If a function has no parameters, use ( ) instead of ( void )" }, "fullDescription": { "text": "If a function has no parameters, use ( ) instead of ( void ) [CODSTA-07]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If a function has no parameters, use ( ) instead of ( void ) [CODSTA-07]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-09", "name": "Do not cast pointers to functions to pointers to primitive types", "shortDescription": { "text": "Do not cast pointers to functions to pointers to primitive types" }, "fullDescription": { "text": "Do not cast pointers to functions to pointers to primitive types [CODSTA-09]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not cast pointers to functions to pointers to primitive types [CODSTA-09]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-10", "name": "Storage type modifiers shall be associated with the type, not the variable or the function", "shortDescription": { "text": "Storage type modifiers shall be associated with the type, not the variable or the function" }, "fullDescription": { "text": "Storage type modifiers shall be associated with the type, not the variable or the function [CODSTA-10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Storage type modifiers shall be associated with the type, not the variable or the function [CODSTA-10]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-100", "name": "Signed and unsigned values shall not be mixed in arithmetic operations", "shortDescription": { "text": "Signed and unsigned values shall not be mixed in arithmetic operations" }, "fullDescription": { "text": "Signed and unsigned values shall not be mixed in arithmetic operations [CODSTA-100]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Signed and unsigned values shall not be mixed in arithmetic operations [CODSTA-100]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-101", "name": "Signed and unsigned values shall not be mixed in second and third operand of conditional operator", "shortDescription": { "text": "Signed and unsigned values shall not be mixed in second and third operand of conditional operator" }, "fullDescription": { "text": "Signed and unsigned values shall not be mixed in second and third operand of conditional operator [CODSTA-101]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Signed and unsigned values shall not be mixed in second and third operand of conditional operator [CODSTA-101]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-102", "name": "A single operation with side-effect shall only be used in the proper context", "shortDescription": { "text": "A single operation with side-effect shall only be used in the proper context" }, "fullDescription": { "text": "A single operation with side-effect shall only be used in the proper context [CODSTA-102]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A single operation with side-effect shall only be used in the proper context [CODSTA-102]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-103", "name": "A call of function with side-effect shall only be used in the proper context", "shortDescription": { "text": "A call of function with side-effect shall only be used in the proper context" }, "fullDescription": { "text": "A call of function with side-effect shall only be used in the proper context [CODSTA-103]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A call of function with side-effect shall only be used in the proper context [CODSTA-103]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-104", "name": "The operands of a logical && or || shall be parenthesized if the operands contain binary operators", "shortDescription": { "text": "The operands of a logical && or || shall be parenthesized if the operands contain binary operators" }, "fullDescription": { "text": "The operands of a logical && or || shall be parenthesized if the operands contain binary operators [CODSTA-104]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The operands of a logical && or || shall be parenthesized if the operands contain binary operators [CODSTA-104]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-107", "name": "The library functions bsearch and qsort of <stdlib.h> shall not be used", "shortDescription": { "text": "The library functions bsearch and qsort of <stdlib.h> shall not be used" }, "fullDescription": { "text": "The library functions bsearch and qsort of <stdlib.h> shall not be used [CODSTA-107]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The library functions bsearch and qsort of <stdlib.h> shall not be used [CODSTA-107]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-108", "name": "The standard header file <tgmath.h> shall not be used", "shortDescription": { "text": "The standard header file <tgmath.h> shall not be used" }, "fullDescription": { "text": "The standard header file <tgmath.h> shall not be used [CODSTA-108]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The standard header file <tgmath.h> shall not be used [CODSTA-108]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-108_b", "name": "The facilities that are specified as being provided by <tgmath.h> should not be used", "shortDescription": { "text": "The facilities that are specified as being provided by <tgmath.h> should not be used" }, "fullDescription": { "text": "The facilities that are specified as being provided by <tgmath.h> should not be used [CODSTA-108_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The facilities that are specified as being provided by <tgmath.h> should not be used [CODSTA-108_b]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-109", "name": "The features provided by <fenv.h> should not be used", "shortDescription": { "text": "The features provided by <fenv.h> should not be used" }, "fullDescription": { "text": "The features provided by <fenv.h> should not be used [CODSTA-109]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The features provided by <fenv.h> should not be used [CODSTA-109]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-110", "name": "The input\/output functions from the 'cstdio' and 'cwchar' libraries should not be used", "shortDescription": { "text": "The input\/output functions from the 'cstdio' and 'cwchar' libraries should not be used" }, "fullDescription": { "text": "The input\/output functions from the 'cstdio' and 'cwchar' libraries should not be used [CODSTA-110]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The input\/output functions from the 'cstdio' and 'cwchar' libraries should not be used [CODSTA-110]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-111", "name": "The union keyword should not be used", "shortDescription": { "text": "The union keyword should not be used" }, "fullDescription": { "text": "The union keyword should not be used [CODSTA-111]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The union keyword should not be used [CODSTA-111]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-112", "name": "Variable-length arrays should not be used", "shortDescription": { "text": "Variable-length arrays should not be used" }, "fullDescription": { "text": "Variable-length arrays should not be used [CODSTA-112]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Variable-length arrays should not be used [CODSTA-112]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-113", "name": "Flexible array members shall not be declared", "shortDescription": { "text": "Flexible array members shall not be declared" }, "fullDescription": { "text": "Flexible array members shall not be declared [CODSTA-113]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Flexible array members shall not be declared [CODSTA-113]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-114", "name": "Assembly language shall be encapsulated and isolated in C\/C++ functions", "shortDescription": { "text": "Assembly language shall be encapsulated and isolated in C\/C++ functions" }, "fullDescription": { "text": "Assembly language shall be encapsulated and isolated in C\/C++ functions [CODSTA-114]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Assembly language shall be encapsulated and isolated in C\/C++ functions [CODSTA-114]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-116", "name": "A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement", "shortDescription": { "text": "A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" }, "fullDescription": { "text": "A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement [CODSTA-116]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement [CODSTA-116]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-117", "name": "Octal and hexadecimal escape sequences shall be terminated", "shortDescription": { "text": "Octal and hexadecimal escape sequences shall be terminated" }, "fullDescription": { "text": "Octal and hexadecimal escape sequences shall be terminated [CODSTA-117]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Octal and hexadecimal escape sequences shall be terminated [CODSTA-117]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-118", "name": "A declaration shall be visible when an object or function with external linkage is defined", "shortDescription": { "text": "A declaration shall be visible when an object or function with external linkage is defined" }, "fullDescription": { "text": "A declaration shall be visible when an object or function with external linkage is defined [CODSTA-118]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A declaration shall be visible when an object or function with external linkage is defined [CODSTA-118]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-119", "name": "A 'default' label shall have a statement or a comment before terminating 'break'", "shortDescription": { "text": "A 'default' label shall have a statement or a comment before terminating 'break'" }, "fullDescription": { "text": "A 'default' label shall have a statement or a comment before terminating 'break' [CODSTA-119]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A 'default' label shall have a statement or a comment before terminating 'break' [CODSTA-119]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-12", "name": "Avoid using shift operations instead of arithmetic operations", "shortDescription": { "text": "Avoid using shift operations instead of arithmetic operations" }, "fullDescription": { "text": "Avoid using shift operations instead of arithmetic operations [CODSTA-12]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid using shift operations instead of arithmetic operations [CODSTA-12]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-120", "name": "An inline function shall be declared with the static storage class", "shortDescription": { "text": "An inline function shall be declared with the static storage class" }, "fullDescription": { "text": "An inline function shall be declared with the static storage class [CODSTA-120]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An inline function shall be declared with the static storage class [CODSTA-120]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-121", "name": "The restrict type qualifier shall not be used", "shortDescription": { "text": "The restrict type qualifier shall not be used" }, "fullDescription": { "text": "The restrict type qualifier shall not be used [CODSTA-121]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The restrict type qualifier shall not be used [CODSTA-121]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-122_a", "name": "The value returned by a function having non-void return type shall be used", "shortDescription": { "text": "The value returned by a function having non-void return type shall be used" }, "fullDescription": { "text": "The value returned by a function having non-void return type shall be used [CODSTA-122_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The value returned by a function having non-void return type shall be used [CODSTA-122_a]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-122_b", "name": "The value returned by a function having non-void return type shall be used", "shortDescription": { "text": "The value returned by a function having non-void return type shall be used" }, "fullDescription": { "text": "The value returned by a function having non-void return type shall be used [CODSTA-122_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The value returned by a function having non-void return type shall be used [CODSTA-122_b]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-124_a", "name": "Conversions shall not be performed between a pointer to a function and any other type than pointer to function", "shortDescription": { "text": "Conversions shall not be performed between a pointer to a function and any other type than pointer to function" }, "fullDescription": { "text": "Conversions shall not be performed between a pointer to a function and any other type than pointer to function [CODSTA-124_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Conversions shall not be performed between a pointer to a function and any other type than pointer to function [CODSTA-124_a]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-124_b", "name": "Conversions shall not be performed between non compatible pointer to a function types", "shortDescription": { "text": "Conversions shall not be performed between non compatible pointer to a function types" }, "fullDescription": { "text": "Conversions shall not be performed between non compatible pointer to a function types [CODSTA-124_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Conversions shall not be performed between non compatible pointer to a function types [CODSTA-124_b]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-125", "name": "Conversions shall not be performed between a pointer to an incomplete type and any other type", "shortDescription": { "text": "Conversions shall not be performed between a pointer to an incomplete type and any other type" }, "fullDescription": { "text": "Conversions shall not be performed between a pointer to an incomplete type and any other type [CODSTA-125]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Conversions shall not be performed between a pointer to an incomplete type and any other type [CODSTA-125]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-126", "name": "A cast shall not be performed between a pointer to object type and a pointer to a different object type", "shortDescription": { "text": "A cast shall not be performed between a pointer to object type and a pointer to a different object type" }, "fullDescription": { "text": "A cast shall not be performed between a pointer to object type and a pointer to a different object type [CODSTA-126]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A cast shall not be performed between a pointer to object type and a pointer to a different object type [CODSTA-126]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-129_a", "name": "A cast shall not be performed between pointer to void and an arithmetic type", "shortDescription": { "text": "A cast shall not be performed between pointer to void and an arithmetic type" }, "fullDescription": { "text": "A cast shall not be performed between pointer to void and an arithmetic type [CODSTA-129_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A cast shall not be performed between pointer to void and an arithmetic type [CODSTA-129_a]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-129_b", "name": "An implicit conversion shall not be performed between pointer to void and an arithmetic type", "shortDescription": { "text": "An implicit conversion shall not be performed between pointer to void and an arithmetic type" }, "fullDescription": { "text": "An implicit conversion shall not be performed between pointer to void and an arithmetic type [CODSTA-129_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An implicit conversion shall not be performed between pointer to void and an arithmetic type [CODSTA-129_b]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-13", "name": ">, >=, <, <= shall not be applied to pointer types except where they point to the same array", "shortDescription": { "text": ">, >=, <, <= shall not be applied to pointer types except where they point to the same array" }, "fullDescription": { "text": ">, >=, <, <= shall not be applied to pointer types except where they point to the same array [CODSTA-13]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": ">, >=, <, <= shall not be applied to pointer types except where they point to the same array [CODSTA-13]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-130", "name": "A cast shall not be performed between pointer to object and a non-integer arithmetic type", "shortDescription": { "text": "A cast shall not be performed between pointer to object and a non-integer arithmetic type" }, "fullDescription": { "text": "A cast shall not be performed between pointer to object and a non-integer arithmetic type [CODSTA-130]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A cast shall not be performed between pointer to object and a non-integer arithmetic type [CODSTA-130]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-131", "name": "Use NULL instead of literal zero (0) as the null-pointer-constant", "shortDescription": { "text": "Use NULL instead of literal zero (0) as the null-pointer-constant" }, "fullDescription": { "text": "Use NULL instead of literal zero (0) as the null-pointer-constant [CODSTA-131]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use NULL instead of literal zero (0) as the null-pointer-constant [CODSTA-131]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-133_a", "name": "A macro shall not be defined with the same name as a keyword in C90", "shortDescription": { "text": "A macro shall not be defined with the same name as a keyword in C90" }, "fullDescription": { "text": "A macro shall not be defined with the same name as a keyword in C90 [CODSTA-133_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A macro shall not be defined with the same name as a keyword in C90 [CODSTA-133_a]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-133_b", "name": "A macro shall not be defined with the same name as a keyword in C99", "shortDescription": { "text": "A macro shall not be defined with the same name as a keyword in C99" }, "fullDescription": { "text": "A macro shall not be defined with the same name as a keyword in C99 [CODSTA-133_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A macro shall not be defined with the same name as a keyword in C99 [CODSTA-133_b]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-135", "name": "Type casting from any type to or from pointers shall not be used", "shortDescription": { "text": "Type casting from any type to or from pointers shall not be used" }, "fullDescription": { "text": "Type casting from any type to or from pointers shall not be used [CODSTA-135]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Type casting from any type to or from pointers shall not be used [CODSTA-135]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-136_a", "name": "The identifiers va_list, va_arg, va_start, va_end, va_copy should not be used", "shortDescription": { "text": "The identifiers va_list, va_arg, va_start, va_end, va_copy should not be used" }, "fullDescription": { "text": "The identifiers va_list, va_arg, va_start, va_end, va_copy should not be used [CODSTA-136_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The identifiers va_list, va_arg, va_start, va_end, va_copy should not be used [CODSTA-136_a]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-136_b", "name": "The identifiers va_list, va_arg, va_start, va_end should not be used", "shortDescription": { "text": "The identifiers va_list, va_arg, va_start, va_end should not be used" }, "fullDescription": { "text": "The identifiers va_list, va_arg, va_start, va_end should not be used [CODSTA-136_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The identifiers va_list, va_arg, va_start, va_end should not be used [CODSTA-136_b]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-137", "name": "The function call shall not be the operand of the sizeof operator", "shortDescription": { "text": "The function call shall not be the operand of the sizeof operator" }, "fullDescription": { "text": "The function call shall not be the operand of the sizeof operator [CODSTA-137]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The function call shall not be the operand of the sizeof operator [CODSTA-137]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-138", "name": "The result of a built-in assignment operator should not be used", "shortDescription": { "text": "The result of a built-in assignment operator should not be used" }, "fullDescription": { "text": "The result of a built-in assignment operator should not be used [CODSTA-138]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The result of a built-in assignment operator should not be used [CODSTA-138]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-13_b", "name": "Pointer subtraction shall only be applied to pointers that address elements of the same array", "shortDescription": { "text": "Pointer subtraction shall only be applied to pointers that address elements of the same array" }, "fullDescription": { "text": "Pointer subtraction shall only be applied to pointers that address elements of the same array [CODSTA-13_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Pointer subtraction shall only be applied to pointers that address elements of the same array [CODSTA-13_b]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-14", "name": "A cast should not remove any 'const' qualification from the type of a pointer or reference", "shortDescription": { "text": "A cast should not remove any 'const' qualification from the type of a pointer or reference" }, "fullDescription": { "text": "A cast should not remove any 'const' qualification from the type of a pointer or reference [CODSTA-14]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A cast should not remove any 'const' qualification from the type of a pointer or reference [CODSTA-14]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-141_a", "name": "Initializer lists shall not contain persistent side effects", "shortDescription": { "text": "Initializer lists shall not contain persistent side effects" }, "fullDescription": { "text": "Initializer lists shall not contain persistent side effects [CODSTA-141_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Initializer lists shall not contain persistent side effects [CODSTA-141_a]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-142_b", "name": "Functions which are called with array argument shall not be declared with pointer parameter", "shortDescription": { "text": "Functions which are called with array argument shall not be declared with pointer parameter" }, "fullDescription": { "text": "Functions which are called with array argument shall not be declared with pointer parameter [CODSTA-142_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Functions which are called with array argument shall not be declared with pointer parameter [CODSTA-142_b]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-143", "name": "Suspicious use of 'strcpy' without checking size of source buffer", "shortDescription": { "text": "Suspicious use of 'strcpy' without checking size of source buffer" }, "fullDescription": { "text": "Suspicious use of 'strcpy' without checking size of source buffer [CODSTA-143]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Suspicious use of 'strcpy' without checking size of source buffer [CODSTA-143]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-144", "name": "The values returned by functions 'read' and 'readlink' shall be used", "shortDescription": { "text": "The values returned by functions 'read' and 'readlink' shall be used" }, "fullDescription": { "text": "The values returned by functions 'read' and 'readlink' shall be used [CODSTA-144]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The values returned by functions 'read' and 'readlink' shall be used [CODSTA-144]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-145", "name": "Use of possibly not null-terminated string with functions expecting null-terminated string", "shortDescription": { "text": "Use of possibly not null-terminated string with functions expecting null-terminated string" }, "fullDescription": { "text": "Use of possibly not null-terminated string with functions expecting null-terminated string [CODSTA-145]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use of possibly not null-terminated string with functions expecting null-terminated string [CODSTA-145]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-146", "name": "A value returned from a stdio character-oriented I\/O function should not be implicitly converted to a type smaller than 'int'", "shortDescription": { "text": "A value returned from a stdio character-oriented I\/O function should not be implicitly converted to a type smaller than 'int'" }, "fullDescription": { "text": "A value returned from a stdio character-oriented I\/O function should not be implicitly converted to a type smaller than 'int' [CODSTA-146]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A value returned from a stdio character-oriented I\/O function should not be implicitly converted to a type smaller than 'int' [CODSTA-146]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-147", "name": "Pointer should not be compared with NULL using relational operators <, >, >=, <=", "shortDescription": { "text": "Pointer should not be compared with NULL using relational operators <, >, >=, <=" }, "fullDescription": { "text": "Pointer should not be compared with NULL using relational operators <, >, >=, <= [CODSTA-147]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Pointer should not be compared with NULL using relational operators <, >, >=, <= [CODSTA-147]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-148", "name": "Do not use string literals as operands of equality or relational operators", "shortDescription": { "text": "Do not use string literals as operands of equality or relational operators" }, "fullDescription": { "text": "Do not use string literals as operands of equality or relational operators [CODSTA-148]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use string literals as operands of equality or relational operators [CODSTA-148]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-149", "name": "Missing break statement between cases in a switch statement", "shortDescription": { "text": "Missing break statement between cases in a switch statement" }, "fullDescription": { "text": "Missing break statement between cases in a switch statement [CODSTA-149]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Missing break statement between cases in a switch statement [CODSTA-149]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-150", "name": "Assertions should not contain assignments, increment, or decrement operators", "shortDescription": { "text": "Assertions should not contain assignments, increment, or decrement operators" }, "fullDescription": { "text": "Assertions should not contain assignments, increment, or decrement operators [CODSTA-150]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Assertions should not contain assignments, increment, or decrement operators [CODSTA-150]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-150_c", "name": "Avoid side effects in arguments to unsafe macros", "shortDescription": { "text": "Avoid side effects in arguments to unsafe macros" }, "fullDescription": { "text": "Avoid side effects in arguments to unsafe macros [CODSTA-150_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid side effects in arguments to unsafe macros [CODSTA-150_c]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-152", "name": "The value of a composite expression shall not be cast to a different essential type category or a wider essential type", "shortDescription": { "text": "The value of a composite expression shall not be cast to a different essential type category or a wider essential type" }, "fullDescription": { "text": "The value of a composite expression shall not be cast to a different essential type category or a wider essential type [CODSTA-152]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The value of a composite expression shall not be cast to a different essential type category or a wider essential type [CODSTA-152]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-154", "name": "An external object or function shall not have more than one non-defining declaration in translation unit", "shortDescription": { "text": "An external object or function shall not have more than one non-defining declaration in translation unit" }, "fullDescription": { "text": "An external object or function shall not have more than one non-defining declaration in translation unit [CODSTA-154]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An external object or function shall not have more than one non-defining declaration in translation unit [CODSTA-154]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-155", "name": "Use typedefs from stdint.h instead of declaring your own in C99 code", "shortDescription": { "text": "Use typedefs from stdint.h instead of declaring your own in C99 code" }, "fullDescription": { "text": "Use typedefs from stdint.h instead of declaring your own in C99 code [CODSTA-155]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use typedefs from stdint.h instead of declaring your own in C99 code [CODSTA-155]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-156_a", "name": "If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type", "shortDescription": { "text": "If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" }, "fullDescription": { "text": "If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type [CODSTA-156_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type [CODSTA-156_a]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-156_b", "name": "If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type", "shortDescription": { "text": "If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" }, "fullDescription": { "text": "If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type [CODSTA-156_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type [CODSTA-156_b]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-157", "name": "The value of a composite expression shall not be assigned to an object with wider essential type", "shortDescription": { "text": "The value of a composite expression shall not be assigned to an object with wider essential type" }, "fullDescription": { "text": "The value of a composite expression shall not be assigned to an object with wider essential type [CODSTA-157]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The value of a composite expression shall not be assigned to an object with wider essential type [CODSTA-157]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-158", "name": "Function types shall have named parameters", "shortDescription": { "text": "Function types shall have named parameters" }, "fullDescription": { "text": "Function types shall have named parameters [CODSTA-158]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Function types shall have named parameters [CODSTA-158]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-159", "name": "Function types shall be in prototype form", "shortDescription": { "text": "Function types shall be in prototype form" }, "fullDescription": { "text": "Function types shall be in prototype form [CODSTA-159]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Function types shall be in prototype form [CODSTA-159]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-161_a", "name": "An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value", "shortDescription": { "text": "An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" }, "fullDescription": { "text": "An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value [CODSTA-161_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value [CODSTA-161_a]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-161_b", "name": "An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value", "shortDescription": { "text": "An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" }, "fullDescription": { "text": "An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value [CODSTA-161_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value [CODSTA-161_b]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-161_c", "name": "An operand of essentially character type should not be used where an operand is interpreted as a numeric value", "shortDescription": { "text": "An operand of essentially character type should not be used where an operand is interpreted as a numeric value" }, "fullDescription": { "text": "An operand of essentially character type should not be used where an operand is interpreted as a numeric value [CODSTA-161_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An operand of essentially character type should not be used where an operand is interpreted as a numeric value [CODSTA-161_c]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-161_d", "name": "An operand of essentially enum type should not be used in an arithmetic operation", "shortDescription": { "text": "An operand of essentially enum type should not be used in an arithmetic operation" }, "fullDescription": { "text": "An operand of essentially enum type should not be used in an arithmetic operation [CODSTA-161_d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An operand of essentially enum type should not be used in an arithmetic operation [CODSTA-161_d]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-161_e", "name": "Shift and bitwise operations should not be performed on operands of essentially signed or enum type", "shortDescription": { "text": "Shift and bitwise operations should not be performed on operands of essentially signed or enum type" }, "fullDescription": { "text": "Shift and bitwise operations should not be performed on operands of essentially signed or enum type [CODSTA-161_e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Shift and bitwise operations should not be performed on operands of essentially signed or enum type [CODSTA-161_e]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-161_f", "name": "An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator", "shortDescription": { "text": "An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" }, "fullDescription": { "text": "An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator [CODSTA-161_f]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator [CODSTA-161_f]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-161_g", "name": "An operand of essentially unsigned type should not be used as the operand to the unary minus operator", "shortDescription": { "text": "An operand of essentially unsigned type should not be used as the operand to the unary minus operator" }, "fullDescription": { "text": "An operand of essentially unsigned type should not be used as the operand to the unary minus operator [CODSTA-161_g]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An operand of essentially unsigned type should not be used as the operand to the unary minus operator [CODSTA-161_g]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-162", "name": "Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations", "shortDescription": { "text": "Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" }, "fullDescription": { "text": "Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations [CODSTA-162]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations [CODSTA-162]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-163_a", "name": "The value of an expression shall not be assigned to an object with a narrower essential type", "shortDescription": { "text": "The value of an expression shall not be assigned to an object with a narrower essential type" }, "fullDescription": { "text": "The value of an expression shall not be assigned to an object with a narrower essential type [CODSTA-163_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The value of an expression shall not be assigned to an object with a narrower essential type [CODSTA-163_a]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-163_b", "name": "The value of an expression shall not be assigned to an object of a different essential type category", "shortDescription": { "text": "The value of an expression shall not be assigned to an object of a different essential type category" }, "fullDescription": { "text": "The value of an expression shall not be assigned to an object of a different essential type category [CODSTA-163_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The value of an expression shall not be assigned to an object of a different essential type category [CODSTA-163_b]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-164_a", "name": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category", "shortDescription": { "text": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" }, "fullDescription": { "text": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category [CODSTA-164_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category [CODSTA-164_a]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-164_b", "name": "The second and third operands of the ternary operator shall have the same essential type category", "shortDescription": { "text": "The second and third operands of the ternary operator shall have the same essential type category" }, "fullDescription": { "text": "The second and third operands of the ternary operator shall have the same essential type category [CODSTA-164_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The second and third operands of the ternary operator shall have the same essential type category [CODSTA-164_b]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-165_b", "name": "Do not cast from or to essentially Boolean type", "shortDescription": { "text": "Do not cast from or to essentially Boolean type" }, "fullDescription": { "text": "Do not cast from or to essentially Boolean type [CODSTA-165_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not cast from or to essentially Boolean type [CODSTA-165_b]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-167_a", "name": "A loop counter in a 'for' loop shall not have essentially floating type", "shortDescription": { "text": "A loop counter in a 'for' loop shall not have essentially floating type" }, "fullDescription": { "text": "A loop counter in a 'for' loop shall not have essentially floating type [CODSTA-167_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A loop counter in a 'for' loop shall not have essentially floating type [CODSTA-167_a]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-167_b", "name": "A loop counter in 'while' and 'do-while' loops shall not have essentially floating type", "shortDescription": { "text": "A loop counter in 'while' and 'do-while' loops shall not have essentially floating type" }, "fullDescription": { "text": "A loop counter in 'while' and 'do-while' loops shall not have essentially floating type [CODSTA-167_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A loop counter in 'while' and 'do-while' loops shall not have essentially floating type [CODSTA-167_b]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-168", "name": "There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body", "shortDescription": { "text": "There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" }, "fullDescription": { "text": "There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body [CODSTA-168]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body [CODSTA-168]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-169_a", "name": "The first clause of a 'for' loop shall be well-formed", "shortDescription": { "text": "The first clause of a 'for' loop shall be well-formed" }, "fullDescription": { "text": "The first clause of a 'for' loop shall be well-formed [CODSTA-169_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The first clause of a 'for' loop shall be well-formed [CODSTA-169_a]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-169_b", "name": "The second clause of a 'for' loop shall be well-formed", "shortDescription": { "text": "The second clause of a 'for' loop shall be well-formed" }, "fullDescription": { "text": "The second clause of a 'for' loop shall be well-formed [CODSTA-169_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The second clause of a 'for' loop shall be well-formed [CODSTA-169_b]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-169_c", "name": "The third clause of a 'for' statement shall be well-formed", "shortDescription": { "text": "The third clause of a 'for' statement shall be well-formed" }, "fullDescription": { "text": "The third clause of a 'for' statement shall be well-formed [CODSTA-169_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The third clause of a 'for' statement shall be well-formed [CODSTA-169_c]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-17", "name": "Do not use NULL identifier; use 0 instead", "shortDescription": { "text": "Do not use NULL identifier; use 0 instead" }, "fullDescription": { "text": "Do not use NULL identifier; use 0 instead [CODSTA-17]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use NULL identifier; use 0 instead [CODSTA-17]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-170_c90", "name": "The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c90)", "shortDescription": { "text": "The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c90)" }, "fullDescription": { "text": "The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c90) [CODSTA-170_c90]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c90) [CODSTA-170_c90]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-170_c99", "name": "The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c99)", "shortDescription": { "text": "The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c99)" }, "fullDescription": { "text": "The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c99) [CODSTA-170_c99]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c99) [CODSTA-170_c99]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-171_c90", "name": "The name of a macro should be distinct from the names of its parameters(c90)", "shortDescription": { "text": "The name of a macro should be distinct from the names of its parameters(c90)" }, "fullDescription": { "text": "The name of a macro should be distinct from the names of its parameters(c90) [CODSTA-171_c90]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The name of a macro should be distinct from the names of its parameters(c90) [CODSTA-171_c90]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-171_c99", "name": "The name of a macro should be distinct from the names of its parameters(c99)", "shortDescription": { "text": "The name of a macro should be distinct from the names of its parameters(c99)" }, "fullDescription": { "text": "The name of a macro should be distinct from the names of its parameters(c99) [CODSTA-171_c99]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The name of a macro should be distinct from the names of its parameters(c99) [CODSTA-171_c99]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-172_c90", "name": "The name of a macro should be distinct from the names of other macros that are currently defined(c90)", "shortDescription": { "text": "The name of a macro should be distinct from the names of other macros that are currently defined(c90)" }, "fullDescription": { "text": "The name of a macro should be distinct from the names of other macros that are currently defined(c90) [CODSTA-172_c90]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The name of a macro should be distinct from the names of other macros that are currently defined(c90) [CODSTA-172_c90]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-172_c99", "name": "The name of a macro should be distinct from the names of other macros that are currently defined(c99)", "shortDescription": { "text": "The name of a macro should be distinct from the names of other macros that are currently defined(c99)" }, "fullDescription": { "text": "The name of a macro should be distinct from the names of other macros that are currently defined(c99) [CODSTA-172_c99]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The name of a macro should be distinct from the names of other macros that are currently defined(c99) [CODSTA-172_c99]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-174_a_c90", "name": "A program should not exceed the translation limits imposed by The Standard (c90)", "shortDescription": { "text": "A program should not exceed the translation limits imposed by The Standard (c90)" }, "fullDescription": { "text": "A program should not exceed the translation limits imposed by The Standard (c90) [CODSTA-174_a_c90]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A program should not exceed the translation limits imposed by The Standard (c90) [CODSTA-174_a_c90]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-174_a_c99", "name": "A program should not exceed the translation limits imposed by The Standard (c99)", "shortDescription": { "text": "A program should not exceed the translation limits imposed by The Standard (c99)" }, "fullDescription": { "text": "A program should not exceed the translation limits imposed by The Standard (c99) [CODSTA-174_a_c99]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A program should not exceed the translation limits imposed by The Standard (c99) [CODSTA-174_a_c99]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-174_b_c90", "name": "A program should not exceed the translation limits imposed by The Standard (c90)", "shortDescription": { "text": "A program should not exceed the translation limits imposed by The Standard (c90)" }, "fullDescription": { "text": "A program should not exceed the translation limits imposed by The Standard (c90) [CODSTA-174_b_c90]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A program should not exceed the translation limits imposed by The Standard (c90) [CODSTA-174_b_c90]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-174_b_c99", "name": "A program should not exceed the translation limits imposed by The Standard (c99)", "shortDescription": { "text": "A program should not exceed the translation limits imposed by The Standard (c99)" }, "fullDescription": { "text": "A program should not exceed the translation limits imposed by The Standard (c99) [CODSTA-174_b_c99]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A program should not exceed the translation limits imposed by The Standard (c99) [CODSTA-174_b_c99]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-178", "name": "External identifiers shall be distinct", "shortDescription": { "text": "External identifiers shall be distinct" }, "fullDescription": { "text": "External identifiers shall be distinct [CODSTA-178]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "External identifiers shall be distinct [CODSTA-178]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-179_a_c90", "name": "Identifiers declared in the file scope and in the same name space shall be distinct (c90)", "shortDescription": { "text": "Identifiers declared in the file scope and in the same name space shall be distinct (c90)" }, "fullDescription": { "text": "Identifiers declared in the file scope and in the same name space shall be distinct (c90) [CODSTA-179_a_c90]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers declared in the file scope and in the same name space shall be distinct (c90) [CODSTA-179_a_c90]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-179_a_c99", "name": "Identifiers declared in the file scope and in the same name space shall be distinct (c99)", "shortDescription": { "text": "Identifiers declared in the file scope and in the same name space shall be distinct (c99)" }, "fullDescription": { "text": "Identifiers declared in the file scope and in the same name space shall be distinct (c99) [CODSTA-179_a_c99]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers declared in the file scope and in the same name space shall be distinct (c99) [CODSTA-179_a_c99]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-179_b_c90", "name": "Identifiers declared in the same block scope and name space shall be distinct (c90)", "shortDescription": { "text": "Identifiers declared in the same block scope and name space shall be distinct (c90)" }, "fullDescription": { "text": "Identifiers declared in the same block scope and name space shall be distinct (c90) [CODSTA-179_b_c90]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers declared in the same block scope and name space shall be distinct (c90) [CODSTA-179_b_c90]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-179_b_c99", "name": "Identifiers declared in the same block scope and name space shall be distinct (c99)", "shortDescription": { "text": "Identifiers declared in the same block scope and name space shall be distinct (c99)" }, "fullDescription": { "text": "Identifiers declared in the same block scope and name space shall be distinct (c99) [CODSTA-179_b_c99]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers declared in the same block scope and name space shall be distinct (c99) [CODSTA-179_b_c99]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-183", "name": "The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types", "shortDescription": { "text": "The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types" }, "fullDescription": { "text": "The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types [CODSTA-183]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types [CODSTA-183]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-184", "name": "The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type", "shortDescription": { "text": "The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" }, "fullDescription": { "text": "The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type [CODSTA-184]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type [CODSTA-184]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-185_b", "name": "Strings pointed by members of the structure 'lconv' should not be modified", "shortDescription": { "text": "Strings pointed by members of the structure 'lconv' should not be modified" }, "fullDescription": { "text": "Strings pointed by members of the structure 'lconv' should not be modified [CODSTA-185_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Strings pointed by members of the structure 'lconv' should not be modified [CODSTA-185_b]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-186", "name": "Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly", "shortDescription": { "text": "Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" }, "fullDescription": { "text": "Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly [CODSTA-186]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly [CODSTA-186]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-187_a", "name": "Cast characters to unsigned char before assignment to larger integer sizes", "shortDescription": { "text": "Cast characters to unsigned char before assignment to larger integer sizes" }, "fullDescription": { "text": "Cast characters to unsigned char before assignment to larger integer sizes [CODSTA-187_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Cast characters to unsigned char before assignment to larger integer sizes [CODSTA-187_a]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-187_b", "name": "An expressions of the 'signed char' type should not be used as an array index", "shortDescription": { "text": "An expressions of the 'signed char' type should not be used as an array index" }, "fullDescription": { "text": "An expressions of the 'signed char' type should not be used as an array index [CODSTA-187_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An expressions of the 'signed char' type should not be used as an array index [CODSTA-187_b]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-187_c", "name": "Cast characters to unsigned char before converting to larger integer sizes", "shortDescription": { "text": "Cast characters to unsigned char before converting to larger integer sizes" }, "fullDescription": { "text": "Cast characters to unsigned char before converting to larger integer sizes [CODSTA-187_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Cast characters to unsigned char before converting to larger integer sizes [CODSTA-187_c]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-188", "name": "Do not confuse narrow and wide character strings and functions", "shortDescription": { "text": "Do not confuse narrow and wide character strings and functions" }, "fullDescription": { "text": "Do not confuse narrow and wide character strings and functions [CODSTA-188]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not confuse narrow and wide character strings and functions [CODSTA-188]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-189", "name": "Do not add or subtract a scaled integer to a pointer", "shortDescription": { "text": "Do not add or subtract a scaled integer to a pointer" }, "fullDescription": { "text": "Do not add or subtract a scaled integer to a pointer [CODSTA-189]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not add or subtract a scaled integer to a pointer [CODSTA-189]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-19", "name": "Use the ctype.h facilities for character test", "shortDescription": { "text": "Use the ctype.h facilities for character test" }, "fullDescription": { "text": "Use the ctype.h facilities for character test [CODSTA-19]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use the ctype.h facilities for character test [CODSTA-19]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-190", "name": "Do not use object representations to compare floating-point values", "shortDescription": { "text": "Do not use object representations to compare floating-point values" }, "fullDescription": { "text": "Do not use object representations to compare floating-point values [CODSTA-190]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use object representations to compare floating-point values [CODSTA-190]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-191", "name": "Wrap functions that can spuriously wake up in a loop", "shortDescription": { "text": "Wrap functions that can spuriously wake up in a loop" }, "fullDescription": { "text": "Wrap functions that can spuriously wake up in a loop [CODSTA-191]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Wrap functions that can spuriously wake up in a loop [CODSTA-191]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-192", "name": "The final member of a structure should not be an array of size '0' or '1'", "shortDescription": { "text": "The final member of a structure should not be an array of size '0' or '1'" }, "fullDescription": { "text": "The final member of a structure should not be an array of size '0' or '1' [CODSTA-192]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The final member of a structure should not be an array of size '0' or '1' [CODSTA-192]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-193", "name": "Allocate structures containing a flexible array member dynamically", "shortDescription": { "text": "Allocate structures containing a flexible array member dynamically" }, "fullDescription": { "text": "Allocate structures containing a flexible array member dynamically [CODSTA-193]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Allocate structures containing a flexible array member dynamically [CODSTA-193]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-194", "name": "Wrap functions that can fail spuriously in a loop", "shortDescription": { "text": "Wrap functions that can fail spuriously in a loop" }, "fullDescription": { "text": "Wrap functions that can fail spuriously in a loop [CODSTA-194]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Wrap functions that can fail spuriously in a loop [CODSTA-194]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-195", "name": "Do not refer to an atomic variable twice in an expression", "shortDescription": { "text": "Do not refer to an atomic variable twice in an expression" }, "fullDescription": { "text": "Do not refer to an atomic variable twice in an expression [CODSTA-195]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not refer to an atomic variable twice in an expression [CODSTA-195]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-196", "name": "Do not modify objects with temporary lifetime", "shortDescription": { "text": "Do not modify objects with temporary lifetime" }, "fullDescription": { "text": "Do not modify objects with temporary lifetime [CODSTA-196]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not modify objects with temporary lifetime [CODSTA-196]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-198", "name": "The value of a complex expression of floating type should not be cast to a wider floating type", "shortDescription": { "text": "The value of a complex expression of floating type should not be cast to a wider floating type" }, "fullDescription": { "text": "The value of a complex expression of floating type should not be cast to a wider floating type [CODSTA-198]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The value of a complex expression of floating type should not be cast to a wider floating type [CODSTA-198]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-198_b", "name": "The value of a complex expression of floating type should not be cast to an integer type", "shortDescription": { "text": "The value of a complex expression of floating type should not be cast to an integer type" }, "fullDescription": { "text": "The value of a complex expression of floating type should not be cast to an integer type [CODSTA-198_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The value of a complex expression of floating type should not be cast to an integer type [CODSTA-198_b]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-199", "name": "Do not use assertions", "shortDescription": { "text": "Do not use assertions" }, "fullDescription": { "text": "Do not use assertions [CODSTA-199]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use assertions [CODSTA-199]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-200", "name": "Explicitly specify array bounds in array declarations with initializers", "shortDescription": { "text": "Explicitly specify array bounds in array declarations with initializers" }, "fullDescription": { "text": "Explicitly specify array bounds in array declarations with initializers [CODSTA-200]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Explicitly specify array bounds in array declarations with initializers [CODSTA-200]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-201", "name": "Do not process structured text data natively", "shortDescription": { "text": "Do not process structured text data natively" }, "fullDescription": { "text": "Do not process structured text data natively [CODSTA-201]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not process structured text data natively [CODSTA-201]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-204", "name": "Functions declared as 'noreturn' shall have the 'void' return type", "shortDescription": { "text": "Functions declared as 'noreturn' shall have the 'void' return type" }, "fullDescription": { "text": "Functions declared as 'noreturn' shall have the 'void' return type [CODSTA-204]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Functions declared as 'noreturn' shall have the 'void' return type [CODSTA-204]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-205", "name": "Do not cast an array to the pointer to a structure of a larger size than the size of the array", "shortDescription": { "text": "Do not cast an array to the pointer to a structure of a larger size than the size of the array" }, "fullDescription": { "text": "Do not cast an array to the pointer to a structure of a larger size than the size of the array [CODSTA-205]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not cast an array to the pointer to a structure of a larger size than the size of the array [CODSTA-205]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-206", "name": "The '_Noreturn' function specifier should not be used", "shortDescription": { "text": "The '_Noreturn' function specifier should not be used" }, "fullDescription": { "text": "The '_Noreturn' function specifier should not be used [CODSTA-206]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The '_Noreturn' function specifier should not be used [CODSTA-206]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-207", "name": "The <stdnoreturn.h> header file should not be used", "shortDescription": { "text": "The <stdnoreturn.h> header file should not be used" }, "fullDescription": { "text": "The <stdnoreturn.h> header file should not be used [CODSTA-207]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The <stdnoreturn.h> header file should not be used [CODSTA-207]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-208", "name": "The <stdalign.h> header file shall not be used", "shortDescription": { "text": "The <stdalign.h> header file shall not be used" }, "fullDescription": { "text": "The <stdalign.h> header file shall not be used [CODSTA-208]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The <stdalign.h> header file shall not be used [CODSTA-208]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-209", "name": "The facilities that are specified as being provided by <stdatomic.h> should not be used", "shortDescription": { "text": "The facilities that are specified as being provided by <stdatomic.h> should not be used" }, "fullDescription": { "text": "The facilities that are specified as being provided by <stdatomic.h> should not be used [CODSTA-209]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The facilities that are specified as being provided by <stdatomic.h> should not be used [CODSTA-209]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-210", "name": "The '_Thread_local' storage class specifier should not be used", "shortDescription": { "text": "The '_Thread_local' storage class specifier should not be used" }, "fullDescription": { "text": "The '_Thread_local' storage class specifier should not be used [CODSTA-210]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The '_Thread_local' storage class specifier should not be used [CODSTA-210]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-211", "name": "The facilities that are specified as being provided by <threads.h> should not be used", "shortDescription": { "text": "The facilities that are specified as being provided by <threads.h> should not be used" }, "fullDescription": { "text": "The facilities that are specified as being provided by <threads.h> should not be used [CODSTA-211]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The facilities that are specified as being provided by <threads.h> should not be used [CODSTA-211]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-212", "name": "The 'rsize_t' type should not be used", "shortDescription": { "text": "The 'rsize_t' type should not be used" }, "fullDescription": { "text": "The 'rsize_t' type should not be used [CODSTA-212]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'rsize_t' type should not be used [CODSTA-212]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-213", "name": "The '_Alignas' alignment specifier and the '_Alignof' operator should not be used", "shortDescription": { "text": "The '_Alignas' alignment specifier and the '_Alignof' operator should not be used" }, "fullDescription": { "text": "The '_Alignas' alignment specifier and the '_Alignof' operator should not be used [CODSTA-213]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The '_Alignas' alignment specifier and the '_Alignof' operator should not be used [CODSTA-213]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-214", "name": "The '_Atomic' type specifier and the '_Atomic' type qualifier should not be used", "shortDescription": { "text": "The '_Atomic' type specifier and the '_Atomic' type qualifier should not be used" }, "fullDescription": { "text": "The '_Atomic' type specifier and the '_Atomic' type qualifier should not be used [CODSTA-214]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The '_Atomic' type specifier and the '_Atomic' type qualifier should not be used [CODSTA-214]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-215", "name": "The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0'", "shortDescription": { "text": "The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0'" }, "fullDescription": { "text": "The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0' [CODSTA-215]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0' [CODSTA-215]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-216", "name": "The '_Generic' operator should not be used", "shortDescription": { "text": "The '_Generic' operator should not be used" }, "fullDescription": { "text": "The '_Generic' operator should not be used [CODSTA-216]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The '_Generic' operator should not be used [CODSTA-216]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-217", "name": "The 'errno_t' type should not be used", "shortDescription": { "text": "The 'errno_t' type should not be used" }, "fullDescription": { "text": "The 'errno_t' type should not be used [CODSTA-217]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'errno_t' type should not be used [CODSTA-217]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-218", "name": "Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S", "shortDescription": { "text": "Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S" }, "fullDescription": { "text": "Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S [CODSTA-218]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S [CODSTA-218]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-219", "name": "Do not use the functions defined in Annex K of ISO\/IEC 9899:2011 standard", "shortDescription": { "text": "Do not use the functions defined in Annex K of ISO\/IEC 9899:2011 standard" }, "fullDescription": { "text": "Do not use the functions defined in Annex K of ISO\/IEC 9899:2011 standard [CODSTA-219]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use the functions defined in Annex K of ISO\/IEC 9899:2011 standard [CODSTA-219]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-220", "name": "Arguments of integer-constant macros should be decimal, octal, or hexadecimal constants with appropriate values", "shortDescription": { "text": "Arguments of integer-constant macros should be decimal, octal, or hexadecimal constants with appropriate values" }, "fullDescription": { "text": "Arguments of integer-constant macros should be decimal, octal, or hexadecimal constants with appropriate values [CODSTA-220]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Arguments of integer-constant macros should be decimal, octal, or hexadecimal constants with appropriate values [CODSTA-220]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-221", "name": "Do not include any type qualifiers in the specification of a function type", "shortDescription": { "text": "Do not include any type qualifiers in the specification of a function type" }, "fullDescription": { "text": "Do not include any type qualifiers in the specification of a function type [CODSTA-221]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not include any type qualifiers in the specification of a function type [CODSTA-221]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-222", "name": "Avoid implicit integral conversions from a wider to a narrower type", "shortDescription": { "text": "Avoid implicit integral conversions from a wider to a narrower type" }, "fullDescription": { "text": "Avoid implicit integral conversions from a wider to a narrower type [CODSTA-222]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid implicit integral conversions from a wider to a narrower type [CODSTA-222]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-223", "name": "Fixed width integer types from <cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types", "shortDescription": { "text": "Fixed width integer types from <cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" }, "fullDescription": { "text": "Fixed width integer types from <cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types [CODSTA-223]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Fixed width integer types from <cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types [CODSTA-223]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-224", "name": "The conditional operator should not be used as a sub-expression", "shortDescription": { "text": "The conditional operator should not be used as a sub-expression" }, "fullDescription": { "text": "The conditional operator should not be used as a sub-expression [CODSTA-224]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The conditional operator should not be used as a sub-expression [CODSTA-224]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-23", "name": "All 'if' statements should have an 'else' clause", "shortDescription": { "text": "All 'if' statements should have an 'else' clause" }, "fullDescription": { "text": "All 'if' statements should have an 'else' clause [CODSTA-23]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All 'if' statements should have an 'else' clause [CODSTA-23]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-26", "name": "Avoid magic numbers", "shortDescription": { "text": "Avoid magic numbers" }, "fullDescription": { "text": "Avoid magic numbers [CODSTA-26]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid magic numbers [CODSTA-26]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-27", "name": "Avoid functions that modify global variables", "shortDescription": { "text": "Avoid functions that modify global variables" }, "fullDescription": { "text": "Avoid functions that modify global variables [CODSTA-27]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid functions that modify global variables [CODSTA-27]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-29", "name": "Use meaningful symbolic constants to represent literal values", "shortDescription": { "text": "Use meaningful symbolic constants to represent literal values" }, "fullDescription": { "text": "Use meaningful symbolic constants to represent literal values [CODSTA-29]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use meaningful symbolic constants to represent literal values [CODSTA-29]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-30", "name": "Avoid returning handles to function parameters", "shortDescription": { "text": "Avoid returning handles to function parameters" }, "fullDescription": { "text": "Avoid returning handles to function parameters [CODSTA-30]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid returning handles to function parameters [CODSTA-30]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-31", "name": "Avoid explicit type conversions (casts)", "shortDescription": { "text": "Avoid explicit type conversions (casts)" }, "fullDescription": { "text": "Avoid explicit type conversions (casts) [CODSTA-31]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid explicit type conversions (casts) [CODSTA-31]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-32", "name": "Do not write logical expressions of the type if(test) or if(!test)  when test is a pointer", "shortDescription": { "text": "Do not write logical expressions of the type if(test) or if(!test)  when test is a pointer" }, "fullDescription": { "text": "Do not write logical expressions of the type if(test) or if(!test)  when test is a pointer [CODSTA-32]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not write logical expressions of the type if(test) or if(!test)  when test is a pointer [CODSTA-32]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-33", "name": "Do not use operator ++ or -- in the conditional expression of if, while, or switch", "shortDescription": { "text": "Do not use operator ++ or -- in the conditional expression of if, while, or switch" }, "fullDescription": { "text": "Do not use operator ++ or -- in the conditional expression of if, while, or switch [CODSTA-33]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use operator ++ or -- in the conditional expression of if, while, or switch [CODSTA-33]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-34", "name": "Use a typedef to simplify program syntax when declaring function pointers", "shortDescription": { "text": "Use a typedef to simplify program syntax when declaring function pointers" }, "fullDescription": { "text": "Use a typedef to simplify program syntax when declaring function pointers [CODSTA-34]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use a typedef to simplify program syntax when declaring function pointers [CODSTA-34]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-35", "name": "Always provide a default branch for switch statements", "shortDescription": { "text": "Always provide a default branch for switch statements" }, "fullDescription": { "text": "Always provide a default branch for switch statements [CODSTA-35]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Always provide a default branch for switch statements [CODSTA-35]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-36", "name": "Pass built-in-types by value unless you are modifying them", "shortDescription": { "text": "Pass built-in-types by value unless you are modifying them" }, "fullDescription": { "text": "Pass built-in-types by value unless you are modifying them [CODSTA-36]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Pass built-in-types by value unless you are modifying them [CODSTA-36]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-37", "name": "Prefer const objects or enums to #defines for simple constants", "shortDescription": { "text": "Prefer const objects or enums to #defines for simple constants" }, "fullDescription": { "text": "Prefer const objects or enums to #defines for simple constants [CODSTA-37]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer const objects or enums to #defines for simple constants [CODSTA-37]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-38", "name": "Do not use a #define that prevents the compiler from checking types", "shortDescription": { "text": "Do not use a #define that prevents the compiler from checking types" }, "fullDescription": { "text": "Do not use a #define that prevents the compiler from checking types [CODSTA-38]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use a #define that prevents the compiler from checking types [CODSTA-38]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-40", "name": "'void' should be used when a function is passed or returns no values", "shortDescription": { "text": "'void' should be used when a function is passed or returns no values" }, "fullDescription": { "text": "'void' should be used when a function is passed or returns no values [CODSTA-40]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "'void' should be used when a function is passed or returns no values [CODSTA-40]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-47", "name": "All structures should be typedef'd", "shortDescription": { "text": "All structures should be typedef'd" }, "fullDescription": { "text": "All structures should be typedef'd [CODSTA-47]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All structures should be typedef'd [CODSTA-47]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-48", "name": "Do not use the following digraphs: <%, %>, <:, :>, %:, %:%:", "shortDescription": { "text": "Do not use the following digraphs: <%, %>, <:, :>, %:, %:%:" }, "fullDescription": { "text": "Do not use the following digraphs: <%, %>, <:, :>, %:, %:%: [CODSTA-48]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use the following digraphs: <%, %>, <:, :>, %:, %:%: [CODSTA-48]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-49", "name": "Null initialize or increment expressions in for loops will not be used; a while loop will be used instead", "shortDescription": { "text": "Null initialize or increment expressions in for loops will not be used; a while loop will be used instead" }, "fullDescription": { "text": "Null initialize or increment expressions in for loops will not be used; a while loop will be used instead [CODSTA-49]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Null initialize or increment expressions in for loops will not be used; a while loop will be used instead [CODSTA-49]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-50", "name": "Hexadecimal constants will be represented using all uppercase letters", "shortDescription": { "text": "Hexadecimal constants will be represented using all uppercase letters" }, "fullDescription": { "text": "Hexadecimal constants will be represented using all uppercase letters [CODSTA-50]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hexadecimal constants will be represented using all uppercase letters [CODSTA-50]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-52", "name": "The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter", "shortDescription": { "text": "The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter" }, "fullDescription": { "text": "The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter [CODSTA-52]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter [CODSTA-52]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-53", "name": "The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop", "shortDescription": { "text": "The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop" }, "fullDescription": { "text": "The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop [CODSTA-53]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop [CODSTA-53]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-54", "name": "Every switch statement will have at least two cases and a potential default", "shortDescription": { "text": "Every switch statement will have at least two cases and a potential default" }, "fullDescription": { "text": "Every switch statement will have at least two cases and a potential default [CODSTA-54]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Every switch statement will have at least two cases and a potential default [CODSTA-54]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-56", "name": "All 'case' and 'default' labels of 'switch' statement should have an explicit 'break' or a 'return' statement, or 'fall through' comment", "shortDescription": { "text": "All 'case' and 'default' labels of 'switch' statement should have an explicit 'break' or a 'return' statement, or 'fall through' comment" }, "fullDescription": { "text": "All 'case' and 'default' labels of 'switch' statement should have an explicit 'break' or a 'return' statement, or 'fall through' comment [CODSTA-56]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All 'case' and 'default' labels of 'switch' statement should have an explicit 'break' or a 'return' statement, or 'fall through' comment [CODSTA-56]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-60", "name": "Avoid comparing values with the 'TRUE' identifier using equality operators (\"==\", \"!=\")", "shortDescription": { "text": "Avoid comparing values with the 'TRUE' identifier using equality operators (\"==\", \"!=\")" }, "fullDescription": { "text": "Avoid comparing values with the 'TRUE' identifier using equality operators (\"==\", \"!=\") [CODSTA-60]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid comparing values with the 'TRUE' identifier using equality operators (\"==\", \"!=\") [CODSTA-60]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-61", "name": "The final clause of a switch statement shall be the default-clause unless all enumeration values are tested", "shortDescription": { "text": "The final clause of a switch statement shall be the default-clause unless all enumeration values are tested" }, "fullDescription": { "text": "The final clause of a switch statement shall be the default-clause unless all enumeration values are tested [CODSTA-61]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The final clause of a switch statement shall be the default-clause unless all enumeration values are tested [CODSTA-61]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-62", "name": "A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type", "shortDescription": { "text": "A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" }, "fullDescription": { "text": "A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type [CODSTA-62]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type [CODSTA-62]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-63", "name": "Bitwise operators shall only be applied to operands of unsigned underlying type (with exceptions)", "shortDescription": { "text": "Bitwise operators shall only be applied to operands of unsigned underlying type (with exceptions)" }, "fullDescription": { "text": "Bitwise operators shall only be applied to operands of unsigned underlying type (with exceptions) [CODSTA-63]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Bitwise operators shall only be applied to operands of unsigned underlying type (with exceptions) [CODSTA-63]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-64", "name": "An unconditional throw or break statement shall terminate every non-empty switch-clause", "shortDescription": { "text": "An unconditional throw or break statement shall terminate every non-empty switch-clause" }, "fullDescription": { "text": "An unconditional throw or break statement shall terminate every non-empty switch-clause [CODSTA-64]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An unconditional throw or break statement shall terminate every non-empty switch-clause [CODSTA-64]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-65", "name": "An object with integer type or pointer to void type shall not be converted to an object with pointer type", "shortDescription": { "text": "An object with integer type or pointer to void type shall not be converted to an object with pointer type" }, "fullDescription": { "text": "An object with integer type or pointer to void type shall not be converted to an object with pointer type [CODSTA-65]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An object with integer type or pointer to void type shall not be converted to an object with pointer type [CODSTA-65]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-66", "name": "Non-constant operands to a binary bitwise operator shall have the same underlying type", "shortDescription": { "text": "Non-constant operands to a binary bitwise operator shall have the same underlying type" }, "fullDescription": { "text": "Non-constant operands to a binary bitwise operator shall have the same underlying type [CODSTA-66]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Non-constant operands to a binary bitwise operator shall have the same underlying type [CODSTA-66]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-67", "name": "The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations", "shortDescription": { "text": "The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" }, "fullDescription": { "text": "The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations [CODSTA-67]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations [CODSTA-67]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-68", "name": "A \"U\" suffix shall be applied to all octal or hexadecimal integer literals of unsigned type", "shortDescription": { "text": "A \"U\" suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" }, "fullDescription": { "text": "A \"U\" suffix shall be applied to all octal or hexadecimal integer literals of unsigned type [CODSTA-68]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A \"U\" suffix shall be applied to all octal or hexadecimal integer literals of unsigned type [CODSTA-68]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-69", "name": "Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary & operator", "shortDescription": { "text": "Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary & operator" }, "fullDescription": { "text": "Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary & operator [CODSTA-69]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary & operator [CODSTA-69]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-70", "name": "Expressions with type enum shall not be used as operands to built-in operators other than  [ ],  =, ==, !=, <, <=, >, >=, and the unary & operator", "shortDescription": { "text": "Expressions with type enum shall not be used as operands to built-in operators other than  [ ],  =, ==, !=, <, <=, >, >=, and the unary & operator" }, "fullDescription": { "text": "Expressions with type enum shall not be used as operands to built-in operators other than  [ ],  =, ==, !=, <, <=, >, >=, and the unary & operator [CODSTA-70]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Expressions with type enum shall not be used as operands to built-in operators other than  [ ],  =, ==, !=, <, <=, >, >=, and the unary & operator [CODSTA-70]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-71", "name": "Named bit-fields with signed integer type shall have a length of more than one bit", "shortDescription": { "text": "Named bit-fields with signed integer type shall have a length of more than one bit" }, "fullDescription": { "text": "Named bit-fields with signed integer type shall have a length of more than one bit [CODSTA-71]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Named bit-fields with signed integer type shall have a length of more than one bit [CODSTA-71]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-73", "name": "Assembler instructions shall only be introduced using the asm declaration", "shortDescription": { "text": "Assembler instructions shall only be introduced using the asm declaration" }, "fullDescription": { "text": "Assembler instructions shall only be introduced using the asm declaration [CODSTA-73]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Assembler instructions shall only be introduced using the asm declaration [CODSTA-73]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-74", "name": "Bit-fields shall not have enum type", "shortDescription": { "text": "Bit-fields shall not have enum type" }, "fullDescription": { "text": "Bit-fields shall not have enum type [CODSTA-74]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Bit-fields shall not have enum type [CODSTA-74]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-75", "name": "Bit-fields shall be either bool type or an explicitly unsigned or signed integral type", "shortDescription": { "text": "Bit-fields shall be either bool type or an explicitly unsigned or signed integral type" }, "fullDescription": { "text": "Bit-fields shall be either bool type or an explicitly unsigned or signed integral type [CODSTA-75]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Bit-fields shall be either bool type or an explicitly unsigned or signed integral type [CODSTA-75]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-76", "name": "The identifier main shall not be used for a function other than the global function main", "shortDescription": { "text": "The identifier main shall not be used for a function other than the global function main" }, "fullDescription": { "text": "The identifier main shall not be used for a function other than the global function main [CODSTA-76]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The identifier main shall not be used for a function other than the global function main [CODSTA-76]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-77", "name": "The goto statement shall jump to a label declared later in the same function body", "shortDescription": { "text": "The goto statement shall jump to a label declared later in the same function body" }, "fullDescription": { "text": "The goto statement shall jump to a label declared later in the same function body [CODSTA-77]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The goto statement shall jump to a label declared later in the same function body [CODSTA-77]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-78", "name": "Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement", "shortDescription": { "text": "Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" }, "fullDescription": { "text": "Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement [CODSTA-78]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement [CODSTA-78]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-79", "name": "For any iteration statement there shall be no more than one break or goto statement used for loop termination", "shortDescription": { "text": "For any iteration statement there shall be no more than one break or goto statement used for loop termination" }, "fullDescription": { "text": "For any iteration statement there shall be no more than one break or goto statement used for loop termination [CODSTA-79]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "For any iteration statement there shall be no more than one break or goto statement used for loop termination [CODSTA-79]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-80", "name": "The continue statement shall only be used within a well formed for loop", "shortDescription": { "text": "The continue statement shall only be used within a well formed for loop" }, "fullDescription": { "text": "The continue statement shall only be used within a well formed for loop [CODSTA-80]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The continue statement shall only be used within a well formed for loop [CODSTA-80]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-81", "name": "If a function has internal linkage then all re-declarations shall include the 'static' storage class specifier", "shortDescription": { "text": "If a function has internal linkage then all re-declarations shall include the 'static' storage class specifier" }, "fullDescription": { "text": "If a function has internal linkage then all re-declarations shall include the 'static' storage class specifier [CODSTA-81]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If a function has internal linkage then all re-declarations shall include the 'static' storage class specifier [CODSTA-81]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-82", "name": "Avoid infinite loops", "shortDescription": { "text": "Avoid infinite loops" }, "fullDescription": { "text": "Avoid infinite loops [CODSTA-82]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid infinite loops [CODSTA-82]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-82_b", "name": "Do not use empty infinite loops", "shortDescription": { "text": "Do not use empty infinite loops" }, "fullDescription": { "text": "Do not use empty infinite loops [CODSTA-82_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use empty infinite loops [CODSTA-82_b]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-83", "name": "All loops must have a fixed upper or lower bound", "shortDescription": { "text": "All loops must have a fixed upper or lower bound" }, "fullDescription": { "text": "All loops must have a fixed upper or lower bound [CODSTA-83]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All loops must have a fixed upper or lower bound [CODSTA-83]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-85", "name": "Avoid exit points within infinite loops", "shortDescription": { "text": "Avoid exit points within infinite loops" }, "fullDescription": { "text": "Avoid exit points within infinite loops [CODSTA-85]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid exit points within infinite loops [CODSTA-85]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-86", "name": "The validity of parameters must be checked inside each function", "shortDescription": { "text": "The validity of parameters must be checked inside each function" }, "fullDescription": { "text": "The validity of parameters must be checked inside each function [CODSTA-86]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The validity of parameters must be checked inside each function [CODSTA-86]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-87", "name": "Use no more than one level of dereferencing", "shortDescription": { "text": "Use no more than one level of dereferencing" }, "fullDescription": { "text": "Use no more than one level of dereferencing [CODSTA-87]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use no more than one level of dereferencing [CODSTA-87]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-88", "name": "Function pointers are not permitted", "shortDescription": { "text": "Function pointers are not permitted" }, "fullDescription": { "text": "Function pointers are not permitted [CODSTA-88]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Function pointers are not permitted [CODSTA-88]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-89", "name": "The declaration should not contain more than one level of pointer indirection", "shortDescription": { "text": "The declaration should not contain more than one level of pointer indirection" }, "fullDescription": { "text": "The declaration should not contain more than one level of pointer indirection [CODSTA-89]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The declaration should not contain more than one level of pointer indirection [CODSTA-89]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-90", "name": "Each operand of a logical '&&' or '||' shall be a postfix-expression", "shortDescription": { "text": "Each operand of a logical '&&' or '||' shall be a postfix-expression" }, "fullDescription": { "text": "Each operand of a logical '&&' or '||' shall be a postfix-expression [CODSTA-90]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each operand of a logical '&&' or '||' shall be a postfix-expression [CODSTA-90]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-91", "name": "A function shall have at most one exit point", "shortDescription": { "text": "A function shall have at most one exit point" }, "fullDescription": { "text": "A function shall have at most one exit point [CODSTA-91]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function shall have at most one exit point [CODSTA-91]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-92", "name": "The names of standard library macros and objects shall not be reused", "shortDescription": { "text": "The names of standard library macros and objects shall not be reused" }, "fullDescription": { "text": "The names of standard library macros and objects shall not be reused [CODSTA-92]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The names of standard library macros and objects shall not be reused [CODSTA-92]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-92_a", "name": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)", "shortDescription": { "text": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" }, "fullDescription": { "text": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code) [CODSTA-92_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code) [CODSTA-92_a]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-92_b", "name": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)", "shortDescription": { "text": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)" }, "fullDescription": { "text": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code) [CODSTA-92_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code) [CODSTA-92_b]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-94", "name": "Do not declare pointer or array type", "shortDescription": { "text": "Do not declare pointer or array type" }, "fullDescription": { "text": "Do not declare pointer or array type [CODSTA-94]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not declare pointer or array type [CODSTA-94]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-95", "name": "Do not declare pointer type", "shortDescription": { "text": "Do not declare pointer type" }, "fullDescription": { "text": "Do not declare pointer type [CODSTA-95]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not declare pointer type [CODSTA-95]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-96", "name": "Bit-fields shall have explicitly unsigned integral or enumeration types only", "shortDescription": { "text": "Bit-fields shall have explicitly unsigned integral or enumeration types only" }, "fullDescription": { "text": "Bit-fields shall have explicitly unsigned integral or enumeration types only [CODSTA-96]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Bit-fields shall have explicitly unsigned integral or enumeration types only [CODSTA-96]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-97", "name": "Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used", "shortDescription": { "text": "Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used" }, "fullDescription": { "text": "Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used [CODSTA-97]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used [CODSTA-97]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-98", "name": "All 'if...else if' constructs will contain either a final else clause or a comment indicating why a final else clause is not necessary", "shortDescription": { "text": "All 'if...else if' constructs will contain either a final else clause or a comment indicating why a final else clause is not necessary" }, "fullDescription": { "text": "All 'if...else if' constructs will contain either a final else clause or a comment indicating why a final else clause is not necessary [CODSTA-98]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All 'if...else if' constructs will contain either a final else clause or a comment indicating why a final else clause is not necessary [CODSTA-98]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-99", "name": "Signed and unsigned values shall not be mixed in comparison operations", "shortDescription": { "text": "Signed and unsigned values shall not be mixed in comparison operations" }, "fullDescription": { "text": "Signed and unsigned values shall not be mixed in comparison operations [CODSTA-99]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Signed and unsigned values shall not be mixed in comparison operations [CODSTA-99]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-105", "name": "The second or third operand of a ternary operator '?:' shall not contain side effects", "shortDescription": { "text": "The second or third operand of a ternary operator '?:' shall not contain side effects" }, "fullDescription": { "text": "The second or third operand of a ternary operator '?:' shall not contain side effects [CODSTA-105]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The second or third operand of a ternary operator '?:' shall not contain side effects [CODSTA-105]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-115", "name": "If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden", "shortDescription": { "text": "If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" }, "fullDescription": { "text": "If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden [CODSTA-115]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden [CODSTA-115]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-123", "name": "A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects", "shortDescription": { "text": "A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects" }, "fullDescription": { "text": "A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects [CODSTA-123]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects [CODSTA-123]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-127", "name": "A conversion should not be performed between a pointer to object and an integer type", "shortDescription": { "text": "A conversion should not be performed between a pointer to object and an integer type" }, "fullDescription": { "text": "A conversion should not be performed between a pointer to object and an integer type [CODSTA-127]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A conversion should not be performed between a pointer to object and an integer type [CODSTA-127]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-127_b", "name": "A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t'", "shortDescription": { "text": "A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t'" }, "fullDescription": { "text": "A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t' [CODSTA-127_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t' [CODSTA-127_b]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-128", "name": "A conversion should not be performed from pointer to void into pointer to object", "shortDescription": { "text": "A conversion should not be performed from pointer to void into pointer to object" }, "fullDescription": { "text": "A conversion should not be performed from pointer to void into pointer to object [CODSTA-128]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A conversion should not be performed from pointer to void into pointer to object [CODSTA-128]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-132", "name": "A function parameter should not be modified", "shortDescription": { "text": "A function parameter should not be modified" }, "fullDescription": { "text": "A function parameter should not be modified [CODSTA-132]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function parameter should not be modified [CODSTA-132]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-134", "name": "The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements", "shortDescription": { "text": "The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" }, "fullDescription": { "text": "The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements [CODSTA-134]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements [CODSTA-134]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-151", "name": "Do not use enumerations in boolean condition", "shortDescription": { "text": "Do not use enumerations in boolean condition" }, "fullDescription": { "text": "Do not use enumerations in boolean condition [CODSTA-151]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use enumerations in boolean condition [CODSTA-151]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-165_a", "name": "The cast operation to essentially enumeration type is not allowed", "shortDescription": { "text": "The cast operation to essentially enumeration type is not allowed" }, "fullDescription": { "text": "The cast operation to essentially enumeration type is not allowed [CODSTA-165_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The cast operation to essentially enumeration type is not allowed [CODSTA-165_a]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-165_c", "name": "Do not use casts between essentially character types and essentially floating types", "shortDescription": { "text": "Do not use casts between essentially character types and essentially floating types" }, "fullDescription": { "text": "Do not use casts between essentially character types and essentially floating types [CODSTA-165_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use casts between essentially character types and essentially floating types [CODSTA-165_c]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-175_a", "name": "A function should not contain unused type declarations", "shortDescription": { "text": "A function should not contain unused type declarations" }, "fullDescription": { "text": "A function should not contain unused type declarations [CODSTA-175_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function should not contain unused type declarations [CODSTA-175_a]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-175_b", "name": "A source file should not contain unused type declarations", "shortDescription": { "text": "A source file should not contain unused type declarations" }, "fullDescription": { "text": "A source file should not contain unused type declarations [CODSTA-175_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A source file should not contain unused type declarations [CODSTA-175_b]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-176_a", "name": "A function should not contain unused local tag declarations", "shortDescription": { "text": "A function should not contain unused local tag declarations" }, "fullDescription": { "text": "A function should not contain unused local tag declarations [CODSTA-176_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function should not contain unused local tag declarations [CODSTA-176_a]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-176_b", "name": "A source file should not contain unused tag declarations", "shortDescription": { "text": "A source file should not contain unused tag declarations" }, "fullDescription": { "text": "A source file should not contain unused tag declarations [CODSTA-176_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A source file should not contain unused tag declarations [CODSTA-176_b]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-177", "name": "A source file should not contain unused macro definitions", "shortDescription": { "text": "A source file should not contain unused macro definitions" }, "fullDescription": { "text": "A source file should not contain unused macro definitions [CODSTA-177]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A source file should not contain unused macro definitions [CODSTA-177]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-181", "name": "The +, -, += and -= operators should not be applied to an expression of pointer type", "shortDescription": { "text": "The +, -, += and -= operators should not be applied to an expression of pointer type" }, "fullDescription": { "text": "The +, -, += and -= operators should not be applied to an expression of pointer type [CODSTA-181]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The +, -, += and -= operators should not be applied to an expression of pointer type [CODSTA-181]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-41", "name": "Avoid switch statements with only one case", "shortDescription": { "text": "Avoid switch statements with only one case" }, "fullDescription": { "text": "Avoid switch statements with only one case [CODSTA-41]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid switch statements with only one case [CODSTA-41]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-57", "name": "Suspicious use of semicolon", "shortDescription": { "text": "Suspicious use of semicolon" }, "fullDescription": { "text": "Suspicious use of semicolon [CODSTA-57]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Suspicious use of semicolon [CODSTA-57]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-58", "name": "Cast to void is not allowed", "shortDescription": { "text": "Cast to void is not allowed" }, "fullDescription": { "text": "Cast to void is not allowed [CODSTA-58]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Cast to void is not allowed [CODSTA-58]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-59", "name": "Hardcoded array declarations and 'malloc' calls should not be used", "shortDescription": { "text": "Hardcoded array declarations and 'malloc' calls should not be used" }, "fullDescription": { "text": "Hardcoded array declarations and 'malloc' calls should not be used [CODSTA-59]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hardcoded array declarations and 'malloc' calls should not be used [CODSTA-59]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-02", "name": "Do not declare member variables as bit-fields", "shortDescription": { "text": "Do not declare member variables as bit-fields" }, "fullDescription": { "text": "Do not declare member variables as bit-fields [CODSTA-02]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Do not declare member variables as bit-fields [CODSTA-02]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-11", "name": "Assert liberally to document internal assumptions and invariants", "shortDescription": { "text": "Assert liberally to document internal assumptions and invariants" }, "fullDescription": { "text": "Assert liberally to document internal assumptions and invariants [CODSTA-11]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Assert liberally to document internal assumptions and invariants [CODSTA-11]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-150_b", "name": "Assertions should not contain function calls nor function-like macro calls", "shortDescription": { "text": "Assertions should not contain function calls nor function-like macro calls" }, "fullDescription": { "text": "Assertions should not contain function calls nor function-like macro calls [CODSTA-150_b]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Assertions should not contain function calls nor function-like macro calls [CODSTA-150_b]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-18", "name": "Prefer 'while' statements over 'do' statements", "shortDescription": { "text": "Prefer 'while' statements over 'do' statements" }, "fullDescription": { "text": "Prefer 'while' statements over 'do' statements [CODSTA-18]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Prefer 'while' statements over 'do' statements [CODSTA-18]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-203", "name": "Do not hard code string literals", "shortDescription": { "text": "Do not hard code string literals" }, "fullDescription": { "text": "Do not hard code string literals [CODSTA-203]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Do not hard code string literals [CODSTA-203]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-21", "name": "When using enum, the values of each member should be explicitly declared", "shortDescription": { "text": "When using enum, the values of each member should be explicitly declared" }, "fullDescription": { "text": "When using enum, the values of each member should be explicitly declared [CODSTA-21]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "When using enum, the values of each member should be explicitly declared [CODSTA-21]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-24", "name": "The macro FALSE should be defined as 0 (zero)", "shortDescription": { "text": "The macro FALSE should be defined as 0 (zero)" }, "fullDescription": { "text": "The macro FALSE should be defined as 0 (zero) [CODSTA-24]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "The macro FALSE should be defined as 0 (zero) [CODSTA-24]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-25", "name": "The enumeration constant named 'FALSE' should be explicitly initialized by 0 value", "shortDescription": { "text": "The enumeration constant named 'FALSE' should be explicitly initialized by 0 value" }, "fullDescription": { "text": "The enumeration constant named 'FALSE' should be explicitly initialized by 0 value [CODSTA-25]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "The enumeration constant named 'FALSE' should be explicitly initialized by 0 value [CODSTA-25]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-28", "name": "Define fields for union declarations", "shortDescription": { "text": "Define fields for union declarations" }, "fullDescription": { "text": "Define fields for union declarations [CODSTA-28]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Define fields for union declarations [CODSTA-28]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-42", "name": "The macro TRUE should be defined as 1", "shortDescription": { "text": "The macro TRUE should be defined as 1" }, "fullDescription": { "text": "The macro TRUE should be defined as 1 [CODSTA-42]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "The macro TRUE should be defined as 1 [CODSTA-42]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-43", "name": "The enumeration constant named 'TRUE' should be explicitly initialized by 1 value", "shortDescription": { "text": "The enumeration constant named 'TRUE' should be explicitly initialized by 1 value" }, "fullDescription": { "text": "The enumeration constant named 'TRUE' should be explicitly initialized by 1 value [CODSTA-43]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "The enumeration constant named 'TRUE' should be explicitly initialized by 1 value [CODSTA-43]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-46", "name": "Use positive logic rather than negative logic whenever practical", "shortDescription": { "text": "Use positive logic rather than negative logic whenever practical" }, "fullDescription": { "text": "Use positive logic rather than negative logic whenever practical [CODSTA-46]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Use positive logic rather than negative logic whenever practical [CODSTA-46]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-93", "name": "The names of standard library functions shall not be overridden", "shortDescription": { "text": "The names of standard library functions shall not be overridden" }, "fullDescription": { "text": "The names of standard library functions shall not be overridden [CODSTA-93]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "The names of standard library functions shall not be overridden [CODSTA-93]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-CPP-04", "name": "Constructors allowing for conversion should be made explicit", "shortDescription": { "text": "Constructors allowing for conversion should be made explicit" }, "fullDescription": { "text": "Constructors allowing for conversion should be made explicit [CODSTA-CPP-04]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Constructors allowing for conversion should be made explicit [CODSTA-CPP-04]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-05", "name": "Do not use user-defined conversion functions", "shortDescription": { "text": "Do not use user-defined conversion functions" }, "fullDescription": { "text": "Do not use user-defined conversion functions [CODSTA-CPP-05]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use user-defined conversion functions [CODSTA-CPP-05]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-65", "name": "The first operand of a conditional-operator shall have type bool", "shortDescription": { "text": "The first operand of a conditional-operator shall have type bool" }, "fullDescription": { "text": "The first operand of a conditional-operator shall have type bool [CODSTA-CPP-65]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The first operand of a conditional-operator shall have type bool [CODSTA-CPP-65]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-19", "name": "Declare at least one constructor to prevent the compiler from doing so", "shortDescription": { "text": "Declare at least one constructor to prevent the compiler from doing so" }, "fullDescription": { "text": "Declare at least one constructor to prevent the compiler from doing so [CODSTA-CPP-19]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Declare at least one constructor to prevent the compiler from doing so [CODSTA-CPP-19]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-55", "name": "Arrays shall not be used in interfaces", "shortDescription": { "text": "Arrays shall not be used in interfaces" }, "fullDescription": { "text": "Arrays shall not be used in interfaces [CODSTA-CPP-55]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Arrays shall not be used in interfaces [CODSTA-CPP-55]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-55_b", "name": "Private and protected methods shall not declare parameters with array type", "shortDescription": { "text": "Private and protected methods shall not declare parameters with array type" }, "fullDescription": { "text": "Private and protected methods shall not declare parameters with array type [CODSTA-CPP-55_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Private and protected methods shall not declare parameters with array type [CODSTA-CPP-55_b]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-98", "name": "Copy operations must not mutate the source object", "shortDescription": { "text": "Copy operations must not mutate the source object" }, "fullDescription": { "text": "Copy operations must not mutate the source object [CODSTA-CPP-98]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Copy operations must not mutate the source object [CODSTA-CPP-98]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-02", "name": "Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type", "shortDescription": { "text": "Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type" }, "fullDescription": { "text": "Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type [CODSTA-CPP-02]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type [CODSTA-CPP-02]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-03", "name": "Bitwise operators, comparison operators, logical operators, comma operator should be const", "shortDescription": { "text": "Bitwise operators, comparison operators, logical operators, comma operator should be const" }, "fullDescription": { "text": "Bitwise operators, comparison operators, logical operators, comma operator should be const [CODSTA-CPP-03]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Bitwise operators, comparison operators, logical operators, comma operator should be const [CODSTA-CPP-03]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-06", "name": "Avoid returning handles to class data from member functions", "shortDescription": { "text": "Avoid returning handles to class data from member functions" }, "fullDescription": { "text": "Avoid returning handles to class data from member functions [CODSTA-CPP-06]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid returning handles to class data from member functions [CODSTA-CPP-06]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-07", "name": "Postfix increment and decrement should be implemented in terms of their prefix counterparts", "shortDescription": { "text": "Postfix increment and decrement should be implemented in terms of their prefix counterparts" }, "fullDescription": { "text": "Postfix increment and decrement should be implemented in terms of their prefix counterparts [CODSTA-CPP-07]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Postfix increment and decrement should be implemented in terms of their prefix counterparts [CODSTA-CPP-07]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-08", "name": "Avoid overloading logical operators AND, OR (&&, ||)", "shortDescription": { "text": "Avoid overloading logical operators AND, OR (&&, ||)" }, "fullDescription": { "text": "Avoid overloading logical operators AND, OR (&&, ||) [CODSTA-CPP-08]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid overloading logical operators AND, OR (&&, ||) [CODSTA-CPP-08]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-09", "name": "Avoid using reinterpret_cast", "shortDescription": { "text": "Avoid using reinterpret_cast" }, "fullDescription": { "text": "Avoid using reinterpret_cast [CODSTA-CPP-09]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid using reinterpret_cast [CODSTA-CPP-09]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-10", "name": "Do not define structs that contain member functions", "shortDescription": { "text": "Do not define structs that contain member functions" }, "fullDescription": { "text": "Do not define structs that contain member functions [CODSTA-CPP-10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not define structs that contain member functions [CODSTA-CPP-10]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-100", "name": "Do not compare objects of a class that may contain padding bits with C standard library functions", "shortDescription": { "text": "Do not compare objects of a class that may contain padding bits with C standard library functions" }, "fullDescription": { "text": "Do not compare objects of a class that may contain padding bits with C standard library functions [CODSTA-CPP-100]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not compare objects of a class that may contain padding bits with C standard library functions [CODSTA-CPP-100]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-101", "name": "A relational operator shall return a boolean value", "shortDescription": { "text": "A relational operator shall return a boolean value" }, "fullDescription": { "text": "A relational operator shall return a boolean value [CODSTA-CPP-101]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A relational operator shall return a boolean value [CODSTA-CPP-101]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-102", "name": "A binary arithmetic operator and a bitwise operator shall return a 'prvalue'", "shortDescription": { "text": "A binary arithmetic operator and a bitwise operator shall return a 'prvalue'" }, "fullDescription": { "text": "A binary arithmetic operator and a bitwise operator shall return a 'prvalue' [CODSTA-CPP-102]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A binary arithmetic operator and a bitwise operator shall return a 'prvalue' [CODSTA-CPP-102]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-103", "name": "Output parameters shall not be used", "shortDescription": { "text": "Output parameters shall not be used" }, "fullDescription": { "text": "Output parameters shall not be used [CODSTA-CPP-103]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Output parameters shall not be used [CODSTA-CPP-103]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-104", "name": "The operand of the 'typeid' operator shall not contain any expression that has side effects", "shortDescription": { "text": "The operand of the 'typeid' operator shall not contain any expression that has side effects" }, "fullDescription": { "text": "The operand of the 'typeid' operator shall not contain any expression that has side effects [CODSTA-CPP-104]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The operand of the 'typeid' operator shall not contain any expression that has side effects [CODSTA-CPP-104]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-104_b", "name": "The operand of the 'typeid' operator shall not contain a function call that causes side effects", "shortDescription": { "text": "The operand of the 'typeid' operator shall not contain a function call that causes side effects" }, "fullDescription": { "text": "The operand of the 'typeid' operator shall not contain a function call that causes side effects [CODSTA-CPP-104_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The operand of the 'typeid' operator shall not contain a function call that causes side effects [CODSTA-CPP-104_b]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-105", "name": "Define special members as =default when the behavior is equivalent to the compiler's behavior", "shortDescription": { "text": "Define special members as =default when the behavior is equivalent to the compiler's behavior" }, "fullDescription": { "text": "Define special members as =default when the behavior is equivalent to the compiler's behavior [CODSTA-CPP-105]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Define special members as =default when the behavior is equivalent to the compiler's behavior [CODSTA-CPP-105]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-106", "name": "Use delegating constructors to reduce code duplication", "shortDescription": { "text": "Use delegating constructors to reduce code duplication" }, "fullDescription": { "text": "Use delegating constructors to reduce code duplication [CODSTA-CPP-106]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use delegating constructors to reduce code duplication [CODSTA-CPP-106]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-107", "name": "Comparison operators shall be non-member functions", "shortDescription": { "text": "Comparison operators shall be non-member functions" }, "fullDescription": { "text": "Comparison operators shall be non-member functions [CODSTA-CPP-107]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Comparison operators shall be non-member functions [CODSTA-CPP-107]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-107_b", "name": "Comparison operators shall be non-member functions with identical parameter types and noexcept", "shortDescription": { "text": "Comparison operators shall be non-member functions with identical parameter types and noexcept" }, "fullDescription": { "text": "Comparison operators shall be non-member functions with identical parameter types and noexcept [CODSTA-CPP-107_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Comparison operators shall be non-member functions with identical parameter types and noexcept [CODSTA-CPP-107_b]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-11", "name": "C-style casts should not be used", "shortDescription": { "text": "C-style casts should not be used" }, "fullDescription": { "text": "C-style casts should not be used [CODSTA-CPP-11]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "C-style casts should not be used [CODSTA-CPP-11]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-12", "name": "Put classes that are used as base classes and classes that are used as member variables into separate include files", "shortDescription": { "text": "Put classes that are used as base classes and classes that are used as member variables into separate include files" }, "fullDescription": { "text": "Put classes that are used as base classes and classes that are used as member variables into separate include files [CODSTA-CPP-12]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Put classes that are used as base classes and classes that are used as member variables into separate include files [CODSTA-CPP-12]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-13", "name": "Put classes that are used as function return type into separate include files", "shortDescription": { "text": "Put classes that are used as function return type into separate include files" }, "fullDescription": { "text": "Put classes that are used as function return type into separate include files [CODSTA-CPP-13]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Put classes that are used as function return type into separate include files [CODSTA-CPP-13]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-14", "name": "Put classes that are used as argument types in function prototypes into separate include files", "shortDescription": { "text": "Put classes that are used as argument types in function prototypes into separate include files" }, "fullDescription": { "text": "Put classes that are used as argument types in function prototypes into separate include files [CODSTA-CPP-14]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Put classes that are used as argument types in function prototypes into separate include files [CODSTA-CPP-14]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-15", "name": "Put functions that are used in the body of inline member function into separate include file", "shortDescription": { "text": "Put functions that are used in the body of inline member function into separate include file" }, "fullDescription": { "text": "Put functions that are used in the body of inline member function into separate include file [CODSTA-CPP-15]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Put functions that are used in the body of inline member function into separate include file [CODSTA-CPP-15]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-16", "name": "When two operators are opposites (such as == and !=), it is appropriate to define both", "shortDescription": { "text": "When two operators are opposites (such as == and !=), it is appropriate to define both" }, "fullDescription": { "text": "When two operators are opposites (such as == and !=), it is appropriate to define both [CODSTA-CPP-16]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "When two operators are opposites (such as == and !=), it is appropriate to define both [CODSTA-CPP-16]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-17", "name": "Do not use the 'struct' keyword to declare a variable in C++", "shortDescription": { "text": "Do not use the 'struct' keyword to declare a variable in C++" }, "fullDescription": { "text": "Do not use the 'struct' keyword to declare a variable in C++ [CODSTA-CPP-17]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use the 'struct' keyword to declare a variable in C++ [CODSTA-CPP-17]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-20", "name": "If you'd like to support mixed-mode operations make operators a non-member functions", "shortDescription": { "text": "If you'd like to support mixed-mode operations make operators a non-member functions" }, "fullDescription": { "text": "If you'd like to support mixed-mode operations make operators a non-member functions [CODSTA-CPP-20]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If you'd like to support mixed-mode operations make operators a non-member functions [CODSTA-CPP-20]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-24", "name": "Avoid making any assignment operator virtual. Do not return const T& from assignment operator", "shortDescription": { "text": "Avoid making any assignment operator virtual. Do not return const T& from assignment operator" }, "fullDescription": { "text": "Avoid making any assignment operator virtual. Do not return const T& from assignment operator [CODSTA-CPP-24]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid making any assignment operator virtual. Do not return const T& from assignment operator [CODSTA-CPP-24]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-25", "name": "Consider making virtual functions nonpublic, and public functions nonvirtual", "shortDescription": { "text": "Consider making virtual functions nonpublic, and public functions nonvirtual" }, "fullDescription": { "text": "Consider making virtual functions nonpublic, and public functions nonvirtual [CODSTA-CPP-25]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Consider making virtual functions nonpublic, and public functions nonvirtual [CODSTA-CPP-25]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-26", "name": "Keep types and functions in separate namespaces unless they're specifically intended to work together", "shortDescription": { "text": "Keep types and functions in separate namespaces unless they're specifically intended to work together" }, "fullDescription": { "text": "Keep types and functions in separate namespaces unless they're specifically intended to work together [CODSTA-CPP-26]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Keep types and functions in separate namespaces unless they're specifically intended to work together [CODSTA-CPP-26]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-27", "name": "Keep a type and its nonmember function interface in the same namespace", "shortDescription": { "text": "Keep a type and its nonmember function interface in the same namespace" }, "fullDescription": { "text": "Keep a type and its nonmember function interface in the same namespace [CODSTA-CPP-27]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Keep a type and its nonmember function interface in the same namespace [CODSTA-CPP-27]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-28", "name": "When binary arithmetic operators are defined  ( + , - , * , \/ , ^ , % , | , & ), assignment versions should be provided too", "shortDescription": { "text": "When binary arithmetic operators are defined  ( + , - , * , \/ , ^ , % , | , & ), assignment versions should be provided too" }, "fullDescription": { "text": "When binary arithmetic operators are defined  ( + , - , * , \/ , ^ , % , | , & ), assignment versions should be provided too [CODSTA-CPP-28]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "When binary arithmetic operators are defined  ( + , - , * , \/ , ^ , % , | , & ), assignment versions should be provided too [CODSTA-CPP-28]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-29", "name": "Prefer the canonical forms of arithmetic and assignment operators", "shortDescription": { "text": "Prefer the canonical forms of arithmetic and assignment operators" }, "fullDescription": { "text": "Prefer the canonical forms of arithmetic and assignment operators [CODSTA-CPP-29]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer the canonical forms of arithmetic and assignment operators [CODSTA-CPP-29]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-30", "name": "Prefer non-member operators than member ones to support mixed-mode arithmetic", "shortDescription": { "text": "Prefer non-member operators than member ones to support mixed-mode arithmetic" }, "fullDescription": { "text": "Prefer non-member operators than member ones to support mixed-mode arithmetic [CODSTA-CPP-30]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer non-member operators than member ones to support mixed-mode arithmetic [CODSTA-CPP-30]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-32", "name": "A function definition should not be placed in a class specification unless the function is intended to be inlined", "shortDescription": { "text": "A function definition should not be placed in a class specification unless the function is intended to be inlined" }, "fullDescription": { "text": "A function definition should not be placed in a class specification unless the function is intended to be inlined [CODSTA-CPP-32]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function definition should not be placed in a class specification unless the function is intended to be inlined [CODSTA-CPP-32]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-33", "name": "Member functions shall not be defined within the template class definition", "shortDescription": { "text": "Member functions shall not be defined within the template class definition" }, "fullDescription": { "text": "Member functions shall not be defined within the template class definition [CODSTA-CPP-33]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Member functions shall not be defined within the template class definition [CODSTA-CPP-33]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-34", "name": "Avoid using static_cast on pointers", "shortDescription": { "text": "Avoid using static_cast on pointers" }, "fullDescription": { "text": "Avoid using static_cast on pointers [CODSTA-CPP-34]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid using static_cast on pointers [CODSTA-CPP-34]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-35", "name": "Avoid dynamic_casts", "shortDescription": { "text": "Avoid dynamic_casts" }, "fullDescription": { "text": "Avoid dynamic_casts [CODSTA-CPP-35]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid dynamic_casts [CODSTA-CPP-35]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-36", "name": "The global namespace shall only contain main() and namespace declarations", "shortDescription": { "text": "The global namespace shall only contain main() and namespace declarations" }, "fullDescription": { "text": "The global namespace shall only contain main() and namespace declarations [CODSTA-CPP-36]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The global namespace shall only contain main() and namespace declarations [CODSTA-CPP-36]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-37", "name": "Do not define class\/struct\/union inside function implementation", "shortDescription": { "text": "Do not define class\/struct\/union inside function implementation" }, "fullDescription": { "text": "Do not define class\/struct\/union inside function implementation [CODSTA-CPP-37]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not define class\/struct\/union inside function implementation [CODSTA-CPP-37]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-38", "name": "Conversion operator, operator->, operator(), operator[] should be const", "shortDescription": { "text": "Conversion operator, operator->, operator(), operator[] should be const" }, "fullDescription": { "text": "Conversion operator, operator->, operator(), operator[] should be const [CODSTA-CPP-38]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Conversion operator, operator->, operator(), operator[] should be const [CODSTA-CPP-38]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-39", "name": "Don't write namespace usings in a header file or before an #include", "shortDescription": { "text": "Don't write namespace usings in a header file or before an #include" }, "fullDescription": { "text": "Don't write namespace usings in a header file or before an #include [CODSTA-CPP-39]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Don't write namespace usings in a header file or before an #include [CODSTA-CPP-39]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-41", "name": "Do not use the 'enum' keyword to declare a variable in C++", "shortDescription": { "text": "Do not use the 'enum' keyword to declare a variable in C++" }, "fullDescription": { "text": "Do not use the 'enum' keyword to declare a variable in C++ [CODSTA-CPP-41]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use the 'enum' keyword to declare a variable in C++ [CODSTA-CPP-41]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-42", "name": "Do not declare member variables with the 'mutable' keyword", "shortDescription": { "text": "Do not declare member variables with the 'mutable' keyword" }, "fullDescription": { "text": "Do not declare member variables with the 'mutable' keyword [CODSTA-CPP-42]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not declare member variables with the 'mutable' keyword [CODSTA-CPP-42]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-43", "name": "Declare reference parameters as const references whenever possible", "shortDescription": { "text": "Declare reference parameters as const references whenever possible" }, "fullDescription": { "text": "Declare reference parameters as const references whenever possible [CODSTA-CPP-43]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare reference parameters as const references whenever possible [CODSTA-CPP-43]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-44", "name": "Have the non-const version call the const version of member function instead of duplicating the const version definition", "shortDescription": { "text": "Have the non-const version call the const version of member function instead of duplicating the const version definition" }, "fullDescription": { "text": "Have the non-const version call the const version of member function instead of duplicating the const version definition [CODSTA-CPP-44]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Have the non-const version call the const version of member function instead of duplicating the const version definition [CODSTA-CPP-44]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-45", "name": "In the private section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others", "shortDescription": { "text": "In the private section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others" }, "fullDescription": { "text": "In the private section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others [CODSTA-CPP-45]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "In the private section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others [CODSTA-CPP-45]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-46", "name": "Order of scopes in class: public before all others", "shortDescription": { "text": "Order of scopes in class: public before all others" }, "fullDescription": { "text": "Order of scopes in class: public before all others [CODSTA-CPP-46]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Order of scopes in class: public before all others [CODSTA-CPP-46]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-47", "name": "Order of scopes in classes: protected before private", "shortDescription": { "text": "Order of scopes in classes: protected before private" }, "fullDescription": { "text": "Order of scopes in classes: protected before private [CODSTA-CPP-47]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Order of scopes in classes: protected before private [CODSTA-CPP-47]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-48", "name": "In the protected section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others", "shortDescription": { "text": "In the protected section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others" }, "fullDescription": { "text": "In the protected section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others [CODSTA-CPP-48]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "In the protected section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others [CODSTA-CPP-48]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-49", "name": "In the public section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others", "shortDescription": { "text": "In the public section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others" }, "fullDescription": { "text": "In the public section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others [CODSTA-CPP-49]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "In the public section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others [CODSTA-CPP-49]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-50", "name": "Do not use static keyword except inside functions and classes", "shortDescription": { "text": "Do not use static keyword except inside functions and classes" }, "fullDescription": { "text": "Do not use static keyword except inside functions and classes [CODSTA-CPP-50]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use static keyword except inside functions and classes [CODSTA-CPP-50]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-51", "name": "Do not define inline functions in source files", "shortDescription": { "text": "Do not define inline functions in source files" }, "fullDescription": { "text": "Do not define inline functions in source files [CODSTA-CPP-51]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not define inline functions in source files [CODSTA-CPP-51]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-52", "name": "Consider using the natural relationship between the assignment version of an operator and the stand-alone version", "shortDescription": { "text": "Consider using the natural relationship between the assignment version of an operator and the stand-alone version" }, "fullDescription": { "text": "Consider using the natural relationship between the assignment version of an operator and the stand-alone version [CODSTA-CPP-52]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Consider using the natural relationship between the assignment version of an operator and the stand-alone version [CODSTA-CPP-52]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-53", "name": "Declare local variable as const whenever possible", "shortDescription": { "text": "Declare local variable as const whenever possible" }, "fullDescription": { "text": "Declare local variable as const whenever possible [CODSTA-CPP-53]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare local variable as const whenever possible [CODSTA-CPP-53]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-54", "name": "Member functions shall be declared const whenever possible", "shortDescription": { "text": "Member functions shall be declared const whenever possible" }, "fullDescription": { "text": "Member functions shall be declared const whenever possible [CODSTA-CPP-54]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Member functions shall be declared const whenever possible [CODSTA-CPP-54]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-56", "name": "A class, structure, or enumeration will not be declared in the definition of its type", "shortDescription": { "text": "A class, structure, or enumeration will not be declared in the definition of its type" }, "fullDescription": { "text": "A class, structure, or enumeration will not be declared in the definition of its type [CODSTA-CPP-56]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A class, structure, or enumeration will not be declared in the definition of its type [CODSTA-CPP-56]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-57", "name": "Namespaces will not be nested more than two levels deep", "shortDescription": { "text": "Namespaces will not be nested more than two levels deep" }, "fullDescription": { "text": "Namespaces will not be nested more than two levels deep [CODSTA-CPP-57]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Namespaces will not be nested more than two levels deep [CODSTA-CPP-57]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-58", "name": "The value returned by a function having a non-void return type that is not an overloaded operator shall always be used", "shortDescription": { "text": "The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" }, "fullDescription": { "text": "The value returned by a function having a non-void return type that is not an overloaded operator shall always be used [CODSTA-CPP-58]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The value returned by a function having a non-void return type that is not an overloaded operator shall always be used [CODSTA-CPP-58]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-59", "name": "The C library shall not be used", "shortDescription": { "text": "The C library shall not be used" }, "fullDescription": { "text": "The C library shall not be used [CODSTA-CPP-59]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The C library shall not be used [CODSTA-CPP-59]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-60", "name": "Only those escape sequences that are defined in ISO\/IEC 14882:2003 shall be used", "shortDescription": { "text": "Only those escape sequences that are defined in ISO\/IEC 14882:2003 shall be used" }, "fullDescription": { "text": "Only those escape sequences that are defined in ISO\/IEC 14882:2003 shall be used [CODSTA-CPP-60]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Only those escape sequences that are defined in ISO\/IEC 14882:2003 shall be used [CODSTA-CPP-60]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-60_b", "name": "Only those escape sequences that are defined in ISO\/IEC 14882:2014 shall be used", "shortDescription": { "text": "Only those escape sequences that are defined in ISO\/IEC 14882:2014 shall be used" }, "fullDescription": { "text": "Only those escape sequences that are defined in ISO\/IEC 14882:2014 shall be used [CODSTA-CPP-60_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Only those escape sequences that are defined in ISO\/IEC 14882:2014 shall be used [CODSTA-CPP-60_b]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-62", "name": "The 'NULL' identifier should not be used as an integer value", "shortDescription": { "text": "The 'NULL' identifier should not be used as an integer value" }, "fullDescription": { "text": "The 'NULL' identifier should not be used as an integer value [CODSTA-CPP-62]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'NULL' identifier should not be used as an integer value [CODSTA-CPP-62]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-63", "name": "Literal zero (0) shall not be used as the null-pointer-constant", "shortDescription": { "text": "Literal zero (0) shall not be used as the null-pointer-constant" }, "fullDescription": { "text": "Literal zero (0) shall not be used as the null-pointer-constant [CODSTA-CPP-63]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Literal zero (0) shall not be used as the null-pointer-constant [CODSTA-CPP-63]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-64", "name": "The condition of an if-statement and the condition of an iteration-statement shall have type bool", "shortDescription": { "text": "The condition of an if-statement and the condition of an iteration-statement shall have type bool" }, "fullDescription": { "text": "The condition of an if-statement and the condition of an iteration-statement shall have type bool [CODSTA-CPP-64]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The condition of an if-statement and the condition of an iteration-statement shall have type bool [CODSTA-CPP-64]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-66", "name": "C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used", "shortDescription": { "text": "C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" }, "fullDescription": { "text": "C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used [CODSTA-CPP-66]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used [CODSTA-CPP-66]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-67", "name": "Each operand of the ! operator, the logical && or the logical || operators shall have type bool", "shortDescription": { "text": "Each operand of the ! operator, the logical && or the logical || operators shall have type bool" }, "fullDescription": { "text": "Each operand of the ! operator, the logical && or the logical || operators shall have type bool [CODSTA-CPP-67]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each operand of the ! operator, the logical && or the logical || operators shall have type bool [CODSTA-CPP-67]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-68", "name": "The unary & operator shall not be overloaded", "shortDescription": { "text": "The unary & operator shall not be overloaded" }, "fullDescription": { "text": "The unary & operator shall not be overloaded [CODSTA-CPP-68]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The unary & operator shall not be overloaded [CODSTA-CPP-68]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-69", "name": "A for loop shall contain a single loop-counter which shall not have floating type", "shortDescription": { "text": "A for loop shall contain a single loop-counter which shall not have floating type" }, "fullDescription": { "text": "A for loop shall contain a single loop-counter which shall not have floating type [CODSTA-CPP-69]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A for loop shall contain a single loop-counter which shall not have floating type [CODSTA-CPP-69]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-70", "name": "If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=", "shortDescription": { "text": "If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=" }, "fullDescription": { "text": "If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >= [CODSTA-CPP-70]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >= [CODSTA-CPP-70]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-71", "name": "The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop", "shortDescription": { "text": "The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop" }, "fullDescription": { "text": "The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop [CODSTA-CPP-71]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop [CODSTA-CPP-71]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-72", "name": "A loop-control-variable other than the loop-counter shall not be modified within condition or expression", "shortDescription": { "text": "A loop-control-variable other than the loop-counter shall not be modified within condition or expression" }, "fullDescription": { "text": "A loop-control-variable other than the loop-counter shall not be modified within condition or expression [CODSTA-CPP-72]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A loop-control-variable other than the loop-counter shall not be modified within condition or expression [CODSTA-CPP-72]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-73", "name": "A loop-control-variable other than the loop-counter which is modified in statement shall have type bool", "shortDescription": { "text": "A loop-control-variable other than the loop-counter which is modified in statement shall have type bool" }, "fullDescription": { "text": "A loop-control-variable other than the loop-counter which is modified in statement shall have type bool [CODSTA-CPP-73]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A loop-control-variable other than the loop-counter which is modified in statement shall have type bool [CODSTA-CPP-73]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-74", "name": "There shall be no unnamed namespaces in header files", "shortDescription": { "text": "There shall be no unnamed namespaces in header files" }, "fullDescription": { "text": "There shall be no unnamed namespaces in header files [CODSTA-CPP-74]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unnamed namespaces in header files [CODSTA-CPP-74]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-75", "name": "using-directives shall not be used", "shortDescription": { "text": "using-directives shall not be used" }, "fullDescription": { "text": "using-directives shall not be used [CODSTA-CPP-75]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "using-directives shall not be used [CODSTA-CPP-75]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-76", "name": "Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier", "shortDescription": { "text": "Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier" }, "fullDescription": { "text": "Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier [CODSTA-CPP-76]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier [CODSTA-CPP-76]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-77", "name": "Const member functions shall not return non-const pointers or references to class-data", "shortDescription": { "text": "Const member functions shall not return non-const pointers or references to class-data" }, "fullDescription": { "text": "Const member functions shall not return non-const pointers or references to class-data [CODSTA-CPP-77]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Const member functions shall not return non-const pointers or references to class-data [CODSTA-CPP-77]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-78", "name": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const", "shortDescription": { "text": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" }, "fullDescription": { "text": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const [CODSTA-CPP-78]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const [CODSTA-CPP-78]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-79", "name": "Neither operand of an equality operator (== or !=) shall be a pointer to a virtual member function", "shortDescription": { "text": "Neither operand of an equality operator (== or !=) shall be a pointer to a virtual member function" }, "fullDescription": { "text": "Neither operand of an equality operator (== or !=) shall be a pointer to a virtual member function [CODSTA-CPP-79]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Neither operand of an equality operator (== or !=) shall be a pointer to a virtual member function [CODSTA-CPP-79]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-80", "name": "Avoid overloading comma operator \",\"", "shortDescription": { "text": "Avoid overloading comma operator \",\"" }, "fullDescription": { "text": "Avoid overloading comma operator \",\" [CODSTA-CPP-80]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid overloading comma operator \",\" [CODSTA-CPP-80]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-82", "name": "Global variables and static data members should not be used", "shortDescription": { "text": "Global variables and static data members should not be used" }, "fullDescription": { "text": "Global variables and static data members should not be used [CODSTA-CPP-82]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Global variables and static data members should not be used [CODSTA-CPP-82]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-83", "name": "Identifiers declared in a local scope should not hide identifiers declared in a class scope", "shortDescription": { "text": "Identifiers declared in a local scope should not hide identifiers declared in a class scope" }, "fullDescription": { "text": "Identifiers declared in a local scope should not hide identifiers declared in a class scope [CODSTA-CPP-83]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers declared in a local scope should not hide identifiers declared in a class scope [CODSTA-CPP-83]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-84", "name": "Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope", "shortDescription": { "text": "Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope" }, "fullDescription": { "text": "Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope [CODSTA-CPP-84]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope [CODSTA-CPP-84]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-85", "name": "Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope", "shortDescription": { "text": "Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope" }, "fullDescription": { "text": "Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope [CODSTA-CPP-85]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope [CODSTA-CPP-85]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-86", "name": "If two opposite equality operators ('==', '!=') are defined in a class, one shall be defined in terms of the other", "shortDescription": { "text": "If two opposite equality operators ('==', '!=') are defined in a class, one shall be defined in terms of the other" }, "fullDescription": { "text": "If two opposite equality operators ('==', '!=') are defined in a class, one shall be defined in terms of the other [CODSTA-CPP-86]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If two opposite equality operators ('==', '!=') are defined in a class, one shall be defined in terms of the other [CODSTA-CPP-86]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-87_a", "name": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope", "shortDescription": { "text": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" }, "fullDescription": { "text": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope [CODSTA-CPP-87_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope [CODSTA-CPP-87_a]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-87_b", "name": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope", "shortDescription": { "text": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" }, "fullDescription": { "text": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope [CODSTA-CPP-87_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope [CODSTA-CPP-87_b]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-87_c", "name": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope", "shortDescription": { "text": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" }, "fullDescription": { "text": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope [CODSTA-CPP-87_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope [CODSTA-CPP-87_c]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-88", "name": "The name of typedef should not be the same as the name of its basic type", "shortDescription": { "text": "The name of typedef should not be the same as the name of its basic type" }, "fullDescription": { "text": "The name of typedef should not be the same as the name of its basic type [CODSTA-CPP-88]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The name of typedef should not be the same as the name of its basic type [CODSTA-CPP-88]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-90", "name": "using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files", "shortDescription": { "text": "using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" }, "fullDescription": { "text": "using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files [CODSTA-CPP-90]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files [CODSTA-CPP-90]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-91", "name": "The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator", "shortDescription": { "text": "The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" }, "fullDescription": { "text": "The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator [CODSTA-CPP-91]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator [CODSTA-CPP-91]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-92", "name": "All accessible entity names within a multiple inheritance hierarchy should be unique", "shortDescription": { "text": "All accessible entity names within a multiple inheritance hierarchy should be unique" }, "fullDescription": { "text": "All accessible entity names within a multiple inheritance hierarchy should be unique [CODSTA-CPP-92]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All accessible entity names within a multiple inheritance hierarchy should be unique [CODSTA-CPP-92]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-93", "name": "Do not initialize objects with a non-trivial class type using C standard library functions", "shortDescription": { "text": "Do not initialize objects with a non-trivial class type using C standard library functions" }, "fullDescription": { "text": "Do not initialize objects with a non-trivial class type using C standard library functions [CODSTA-CPP-93]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not initialize objects with a non-trivial class type using C standard library functions [CODSTA-CPP-93]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-94", "name": "Do not compare objects of nonstandard-layout class type with C standard library functions", "shortDescription": { "text": "Do not compare objects of nonstandard-layout class type with C standard library functions" }, "fullDescription": { "text": "Do not compare objects of nonstandard-layout class type with C standard library functions [CODSTA-CPP-94]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not compare objects of nonstandard-layout class type with C standard library functions [CODSTA-CPP-94]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-95", "name": "Do not modify the standard namespaces 'std' and 'posix'", "shortDescription": { "text": "Do not modify the standard namespaces 'std' and 'posix'" }, "fullDescription": { "text": "Do not modify the standard namespaces 'std' and 'posix' [CODSTA-CPP-95]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not modify the standard namespaces 'std' and 'posix' [CODSTA-CPP-95]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-96", "name": "Do not call a function with a mismatched language linkage", "shortDescription": { "text": "Do not call a function with a mismatched language linkage" }, "fullDescription": { "text": "Do not call a function with a mismatched language linkage [CODSTA-CPP-96]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not call a function with a mismatched language linkage [CODSTA-CPP-96]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-97", "name": "Never qualify a reference type with 'const' or 'volatile'", "shortDescription": { "text": "Never qualify a reference type with 'const' or 'volatile'" }, "fullDescription": { "text": "Never qualify a reference type with 'const' or 'volatile' [CODSTA-CPP-97]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Never qualify a reference type with 'const' or 'volatile' [CODSTA-CPP-97]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-99", "name": "Use offsetof() on valid types and members", "shortDescription": { "text": "Use offsetof() on valid types and members" }, "fullDescription": { "text": "Use offsetof() on valid types and members [CODSTA-CPP-99]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use offsetof() on valid types and members [CODSTA-CPP-99]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-22", "name": "Prefer non-member non-friend functions to member functions", "shortDescription": { "text": "Prefer non-member non-friend functions to member functions" }, "fullDescription": { "text": "Prefer non-member non-friend functions to member functions [CODSTA-CPP-22]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer non-member non-friend functions to member functions [CODSTA-CPP-22]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-81", "name": "Classes which have only getters\/setters (accessors\/mutators) are not allowed", "shortDescription": { "text": "Classes which have only getters\/setters (accessors\/mutators) are not allowed" }, "fullDescription": { "text": "Classes which have only getters\/setters (accessors\/mutators) are not allowed [CODSTA-CPP-81]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Classes which have only getters\/setters (accessors\/mutators) are not allowed [CODSTA-CPP-81]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-89", "name": "Do not assign enumerations to bool", "shortDescription": { "text": "Do not assign enumerations to bool" }, "fullDescription": { "text": "Do not assign enumerations to bool [CODSTA-CPP-89]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not assign enumerations to bool [CODSTA-CPP-89]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-01", "name": "Prefer iostream.h to stdio.h", "shortDescription": { "text": "Prefer iostream.h to stdio.h" }, "fullDescription": { "text": "Prefer iostream.h to stdio.h [CODSTA-CPP-01]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Prefer iostream.h to stdio.h [CODSTA-CPP-01]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-18", "name": "Encapsulate global variables and constants, enumerated types, and typedefs in a class", "shortDescription": { "text": "Encapsulate global variables and constants, enumerated types, and typedefs in a class" }, "fullDescription": { "text": "Encapsulate global variables and constants, enumerated types, and typedefs in a class [CODSTA-CPP-18]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Encapsulate global variables and constants, enumerated types, and typedefs in a class [CODSTA-CPP-18]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-21", "name": "Assignment operator must return const reference", "shortDescription": { "text": "Assignment operator must return const reference" }, "fullDescription": { "text": "Assignment operator must return const reference [CODSTA-CPP-21]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Assignment operator must return const reference [CODSTA-CPP-21]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-23", "name": "Whenever a global function  is  referenced, use the :: operator", "shortDescription": { "text": "Whenever a global function  is  referenced, use the :: operator" }, "fullDescription": { "text": "Whenever a global function  is  referenced, use the :: operator [CODSTA-CPP-23]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Whenever a global function  is  referenced, use the :: operator [CODSTA-CPP-23]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-31", "name": "Do not use the keyword 'explicit' for a constructor", "shortDescription": { "text": "Do not use the keyword 'explicit' for a constructor" }, "fullDescription": { "text": "Do not use the keyword 'explicit' for a constructor [CODSTA-CPP-31]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Do not use the keyword 'explicit' for a constructor [CODSTA-CPP-31]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-40", "name": "Limiting the number of objects of a class", "shortDescription": { "text": "Limiting the number of objects of a class" }, "fullDescription": { "text": "Limiting the number of objects of a class [CODSTA-CPP-40]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Limiting the number of objects of a class [CODSTA-CPP-40]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-MCPP-07", "name": "Prefer lambdas over std::bind, std::bind1st and std::bind2nd", "shortDescription": { "text": "Prefer lambdas over std::bind, std::bind1st and std::bind2nd" }, "fullDescription": { "text": "Prefer lambdas over std::bind, std::bind1st and std::bind2nd [CODSTA-MCPP-07]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Prefer lambdas over std::bind, std::bind1st and std::bind2nd [CODSTA-MCPP-07]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-08_a", "name": "Prefer 'auto' to explicit type names in variable declarations", "shortDescription": { "text": "Prefer 'auto' to explicit type names in variable declarations" }, "fullDescription": { "text": "Prefer 'auto' to explicit type names in variable declarations [CODSTA-MCPP-08_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Prefer 'auto' to explicit type names in variable declarations [CODSTA-MCPP-08_a]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-08_b", "name": "Prefer 'auto' to explicit type names for function return types", "shortDescription": { "text": "Prefer 'auto' to explicit type names for function return types" }, "fullDescription": { "text": "Prefer 'auto' to explicit type names for function return types [CODSTA-MCPP-08_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Prefer 'auto' to explicit type names for function return types [CODSTA-MCPP-08_b]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-26", "name": "A potentially virtual pointer to member function shall only be compared with nullptr", "shortDescription": { "text": "A potentially virtual pointer to member function shall only be compared with nullptr" }, "fullDescription": { "text": "A potentially virtual pointer to member function shall only be compared with nullptr [CODSTA-MCPP-26]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A potentially virtual pointer to member function shall only be compared with nullptr [CODSTA-MCPP-26]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-27", "name": "All std::hash specializations for user-defined types shall have a noexcept function call operator", "shortDescription": { "text": "All std::hash specializations for user-defined types shall have a noexcept function call operator" }, "fullDescription": { "text": "All std::hash specializations for user-defined types shall have a noexcept function call operator [CODSTA-MCPP-27]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All std::hash specializations for user-defined types shall have a noexcept function call operator [CODSTA-MCPP-27]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-01", "name": "User-conversion cast operators should be made explicit", "shortDescription": { "text": "User-conversion cast operators should be made explicit" }, "fullDescription": { "text": "User-conversion cast operators should be made explicit [CODSTA-MCPP-01]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "User-conversion cast operators should be made explicit [CODSTA-MCPP-01]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-02", "name": "Prefer alias declarations to typedefs", "shortDescription": { "text": "Prefer alias declarations to typedefs" }, "fullDescription": { "text": "Prefer alias declarations to typedefs [CODSTA-MCPP-02]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer alias declarations to typedefs [CODSTA-MCPP-02]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-03", "name": "Prefer Scoped Enums to Unscoped Enums", "shortDescription": { "text": "Prefer Scoped Enums to Unscoped Enums" }, "fullDescription": { "text": "Prefer Scoped Enums to Unscoped Enums [CODSTA-MCPP-03]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer Scoped Enums to Unscoped Enums [CODSTA-MCPP-03]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-05", "name": "Each overriding virtual function shall be declared with the override or final specifier", "shortDescription": { "text": "Each overriding virtual function shall be declared with the override or final specifier" }, "fullDescription": { "text": "Each overriding virtual function shall be declared with the override or final specifier [CODSTA-MCPP-05]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each overriding virtual function shall be declared with the override or final specifier [CODSTA-MCPP-05]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-06_a", "name": "Declare copy constructor and copy assignment operators with the 'delete' specifier to prevent copying of class", "shortDescription": { "text": "Declare copy constructor and copy assignment operators with the 'delete' specifier to prevent copying of class" }, "fullDescription": { "text": "Declare copy constructor and copy assignment operators with the 'delete' specifier to prevent copying of class [CODSTA-MCPP-06_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare copy constructor and copy assignment operators with the 'delete' specifier to prevent copying of class [CODSTA-MCPP-06_a]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-06_b", "name": "Declare copy constructor and copy assignment operators with the 'delete' specifier instead of using a base class with private methods to prevent copying of class", "shortDescription": { "text": "Declare copy constructor and copy assignment operators with the 'delete' specifier instead of using a base class with private methods to prevent copying of class" }, "fullDescription": { "text": "Declare copy constructor and copy assignment operators with the 'delete' specifier instead of using a base class with private methods to prevent copying of class [CODSTA-MCPP-06_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare copy constructor and copy assignment operators with the 'delete' specifier instead of using a base class with private methods to prevent copying of class [CODSTA-MCPP-06_b]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-07_b", "name": "The 'binder1st' and 'binder2nd' identifiers should not be used", "shortDescription": { "text": "The 'binder1st' and 'binder2nd' identifiers should not be used" }, "fullDescription": { "text": "The 'binder1st' and 'binder2nd' identifiers should not be used [CODSTA-MCPP-07_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'binder1st' and 'binder2nd' identifiers should not be used [CODSTA-MCPP-07_b]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-09", "name": "Declare functions 'noexcept' if they will not emit exceptions", "shortDescription": { "text": "Declare functions 'noexcept' if they will not emit exceptions" }, "fullDescription": { "text": "Declare functions 'noexcept' if they will not emit exceptions [CODSTA-MCPP-09]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare functions 'noexcept' if they will not emit exceptions [CODSTA-MCPP-09]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-10_a", "name": "Prefer const iterators to iterators", "shortDescription": { "text": "Prefer const iterators to iterators" }, "fullDescription": { "text": "Prefer const iterators to iterators [CODSTA-MCPP-10_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer const iterators to iterators [CODSTA-MCPP-10_a]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-10_b", "name": "Prefer to use cbegin(), crbegin, cend(), crend() functions", "shortDescription": { "text": "Prefer to use cbegin(), crbegin, cend(), crend() functions" }, "fullDescription": { "text": "Prefer to use cbegin(), crbegin, cend(), crend() functions [CODSTA-MCPP-10_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer to use cbegin(), crbegin, cend(), crend() functions [CODSTA-MCPP-10_b]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-13", "name": "Use std::move() on rvalue references and std::forward() on forwarding references", "shortDescription": { "text": "Use std::move() on rvalue references and std::forward() on forwarding references" }, "fullDescription": { "text": "Use std::move() on rvalue references and std::forward() on forwarding references [CODSTA-MCPP-13]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use std::move() on rvalue references and std::forward() on forwarding references [CODSTA-MCPP-13]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-13_b", "name": "The 'std::forward' function should be used to forward forwarding references", "shortDescription": { "text": "The 'std::forward' function should be used to forward forwarding references" }, "fullDescription": { "text": "The 'std::forward' function should be used to forward forwarding references [CODSTA-MCPP-13_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'std::forward' function should be used to forward forwarding references [CODSTA-MCPP-13_b]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-14", "name": "Avoid Overloading on Forwarding References", "shortDescription": { "text": "Avoid Overloading on Forwarding References" }, "fullDescription": { "text": "Avoid Overloading on Forwarding References [CODSTA-MCPP-14]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid Overloading on Forwarding References [CODSTA-MCPP-14]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-15_a", "name": "Avoid default capture modes", "shortDescription": { "text": "Avoid default capture modes" }, "fullDescription": { "text": "Avoid default capture modes [CODSTA-MCPP-15_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid default capture modes [CODSTA-MCPP-15_a]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-15_b", "name": "Use the 'this' pointer explicitly in lambdas with a default by-reference capture", "shortDescription": { "text": "Use the 'this' pointer explicitly in lambdas with a default by-reference capture" }, "fullDescription": { "text": "Use the 'this' pointer explicitly in lambdas with a default by-reference capture [CODSTA-MCPP-15_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use the 'this' pointer explicitly in lambdas with a default by-reference capture [CODSTA-MCPP-15_b]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-16_c", "name": "Prefer 'std::make_shared' to the direct use of new", "shortDescription": { "text": "Prefer 'std::make_shared' to the direct use of new" }, "fullDescription": { "text": "Prefer 'std::make_shared' to the direct use of new [CODSTA-MCPP-16_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer 'std::make_shared' to the direct use of new [CODSTA-MCPP-16_c]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-16_d", "name": "Prefer to use std::unique_ptr instead of std::auto_ptr", "shortDescription": { "text": "Prefer to use std::unique_ptr instead of std::auto_ptr" }, "fullDescription": { "text": "Prefer to use std::unique_ptr instead of std::auto_ptr [CODSTA-MCPP-16_d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer to use std::unique_ptr instead of std::auto_ptr [CODSTA-MCPP-16_d]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-16_e", "name": "'std::make_unique' shall be used to construct objects owned by 'std::unique_ptr'", "shortDescription": { "text": "'std::make_unique' shall be used to construct objects owned by 'std::unique_ptr'" }, "fullDescription": { "text": "'std::make_unique' shall be used to construct objects owned by 'std::unique_ptr' [CODSTA-MCPP-16_e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "'std::make_unique' shall be used to construct objects owned by 'std::unique_ptr' [CODSTA-MCPP-16_e]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-17", "name": "Never return lambdas that capture local objects by reference", "shortDescription": { "text": "Never return lambdas that capture local objects by reference" }, "fullDescription": { "text": "Never return lambdas that capture local objects by reference [CODSTA-MCPP-17]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Never return lambdas that capture local objects by reference [CODSTA-MCPP-17]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-17_b", "name": "Never capture local objects from an outer lambda by reference", "shortDescription": { "text": "Never capture local objects from an outer lambda by reference" }, "fullDescription": { "text": "Never capture local objects from an outer lambda by reference [CODSTA-MCPP-17_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Never capture local objects from an outer lambda by reference [CODSTA-MCPP-17_b]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-17_c", "name": "The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime", "shortDescription": { "text": "The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime" }, "fullDescription": { "text": "The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime [CODSTA-MCPP-17_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime [CODSTA-MCPP-17_c]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-18_a", "name": "Avoid unnecessary default capture modes in lambda expressions", "shortDescription": { "text": "Avoid unnecessary default capture modes in lambda expressions" }, "fullDescription": { "text": "Avoid unnecessary default capture modes in lambda expressions [CODSTA-MCPP-18_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid unnecessary default capture modes in lambda expressions [CODSTA-MCPP-18_a]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-18_b", "name": "Avoid unnecessary lambda captures", "shortDescription": { "text": "Avoid unnecessary lambda captures" }, "fullDescription": { "text": "Avoid unnecessary lambda captures [CODSTA-MCPP-18_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid unnecessary lambda captures [CODSTA-MCPP-18_b]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-19", "name": "Declare assignment operators with the ref-qualifier &", "shortDescription": { "text": "Declare assignment operators with the ref-qualifier &" }, "fullDescription": { "text": "Declare assignment operators with the ref-qualifier & [CODSTA-MCPP-19]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare assignment operators with the ref-qualifier & [CODSTA-MCPP-19]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-22", "name": "Use explicit ref-qualifiers on auto declarations in range-based 'for' loops", "shortDescription": { "text": "Use explicit ref-qualifiers on auto declarations in range-based 'for' loops" }, "fullDescription": { "text": "Use explicit ref-qualifiers on auto declarations in range-based 'for' loops [CODSTA-MCPP-22]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use explicit ref-qualifiers on auto declarations in range-based 'for' loops [CODSTA-MCPP-22]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-23", "name": "If a public destructor of a class is non-virtual, then the class should be declared final", "shortDescription": { "text": "If a public destructor of a class is non-virtual, then the class should be declared final" }, "fullDescription": { "text": "If a public destructor of a class is non-virtual, then the class should be declared final [CODSTA-MCPP-23]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If a public destructor of a class is non-virtual, then the class should be declared final [CODSTA-MCPP-23]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-24", "name": "Only one of virtual, override or final should be specified in a member function declaration", "shortDescription": { "text": "Only one of virtual, override or final should be specified in a member function declaration" }, "fullDescription": { "text": "Only one of virtual, override or final should be specified in a member function declaration [CODSTA-MCPP-24]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Only one of virtual, override or final should be specified in a member function declaration [CODSTA-MCPP-24]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-25", "name": "Digit sequences separators ' shall only be used consistently", "shortDescription": { "text": "Digit sequences separators ' shall only be used consistently" }, "fullDescription": { "text": "Digit sequences separators ' shall only be used consistently [CODSTA-MCPP-25]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Digit sequences separators ' shall only be used consistently [CODSTA-MCPP-25]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-28", "name": "A lambda shall not be an operand to typeid", "shortDescription": { "text": "A lambda shall not be an operand to typeid" }, "fullDescription": { "text": "A lambda shall not be an operand to typeid [CODSTA-MCPP-28]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A lambda shall not be an operand to typeid [CODSTA-MCPP-28]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-29", "name": "Use smart pointers when passing a pointer to an object in a thread", "shortDescription": { "text": "Use smart pointers when passing a pointer to an object in a thread" }, "fullDescription": { "text": "Use smart pointers when passing a pointer to an object in a thread [CODSTA-MCPP-29]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use smart pointers when passing a pointer to an object in a thread [CODSTA-MCPP-29]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-30", "name": "Consider using 'std::unique_ptr' instead of 'std::shared_ptr' for local objects", "shortDescription": { "text": "Consider using 'std::unique_ptr' instead of 'std::shared_ptr' for local objects" }, "fullDescription": { "text": "Consider using 'std::unique_ptr' instead of 'std::shared_ptr' for local objects [CODSTA-MCPP-30]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Consider using 'std::unique_ptr' instead of 'std::shared_ptr' for local objects [CODSTA-MCPP-30]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-31", "name": "Define both sized and unsized versions of operator delete", "shortDescription": { "text": "Define both sized and unsized versions of operator delete" }, "fullDescription": { "text": "Define both sized and unsized versions of operator delete [CODSTA-MCPP-31]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Define both sized and unsized versions of operator delete [CODSTA-MCPP-31]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-32", "name": "Static and thread-local objects shall be constant-initialized", "shortDescription": { "text": "Static and thread-local objects shall be constant-initialized" }, "fullDescription": { "text": "Static and thread-local objects shall be constant-initialized [CODSTA-MCPP-32]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Static and thread-local objects shall be constant-initialized [CODSTA-MCPP-32]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-33", "name": "User defined literals operators shall only perform conversion of passed parameters", "shortDescription": { "text": "User defined literals operators shall only perform conversion of passed parameters" }, "fullDescription": { "text": "User defined literals operators shall only perform conversion of passed parameters [CODSTA-MCPP-33]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "User defined literals operators shall only perform conversion of passed parameters [CODSTA-MCPP-33]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-34", "name": "A smart pointer shall only be used as a parameter type if it expresses lifetime semantics", "shortDescription": { "text": "A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" }, "fullDescription": { "text": "A smart pointer shall only be used as a parameter type if it expresses lifetime semantics [CODSTA-MCPP-34]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A smart pointer shall only be used as a parameter type if it expresses lifetime semantics [CODSTA-MCPP-34]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-35", "name": "A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object", "shortDescription": { "text": "A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object" }, "fullDescription": { "text": "A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object [CODSTA-MCPP-35]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object [CODSTA-MCPP-35]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-36", "name": "Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr'", "shortDescription": { "text": "Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr'" }, "fullDescription": { "text": "Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr' [CODSTA-MCPP-36]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr' [CODSTA-MCPP-36]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-37", "name": "Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors", "shortDescription": { "text": "Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors" }, "fullDescription": { "text": "Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors [CODSTA-MCPP-37]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors [CODSTA-MCPP-37]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-38", "name": "Braced-initialization {}, without equals sign, shall be used for variable initialization", "shortDescription": { "text": "Braced-initialization {}, without equals sign, shall be used for variable initialization" }, "fullDescription": { "text": "Braced-initialization {}, without equals sign, shall be used for variable initialization [CODSTA-MCPP-38]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Braced-initialization {}, without equals sign, shall be used for variable initialization [CODSTA-MCPP-38]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-39", "name": "A variable of type auto shall not be initialized using '{}' or '={}' braced-initialization", "shortDescription": { "text": "A variable of type auto shall not be initialized using '{}' or '={}' braced-initialization" }, "fullDescription": { "text": "A variable of type auto shall not be initialized using '{}' or '={}' braced-initialization [CODSTA-MCPP-39]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A variable of type auto shall not be initialized using '{}' or '={}' braced-initialization [CODSTA-MCPP-39]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-40", "name": "Do not overuse 'auto' specifier", "shortDescription": { "text": "Do not overuse 'auto' specifier" }, "fullDescription": { "text": "Do not overuse 'auto' specifier [CODSTA-MCPP-40]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not overuse 'auto' specifier [CODSTA-MCPP-40]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-41", "name": "The 'random_shuffle' identifier should not be used", "shortDescription": { "text": "The 'random_shuffle' identifier should not be used" }, "fullDescription": { "text": "The 'random_shuffle' identifier should not be used [CODSTA-MCPP-41]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'random_shuffle' identifier should not be used [CODSTA-MCPP-41]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-42", "name": "Do not use the increment operator (++) on an operand of type 'bool'", "shortDescription": { "text": "Do not use the increment operator (++) on an operand of type 'bool'" }, "fullDescription": { "text": "Do not use the increment operator (++) on an operand of type 'bool' [CODSTA-MCPP-42]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use the increment operator (++) on an operand of type 'bool' [CODSTA-MCPP-42]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-43", "name": "The 'set_unexpected' identifier should not be used", "shortDescription": { "text": "The 'set_unexpected' identifier should not be used" }, "fullDescription": { "text": "The 'set_unexpected' identifier should not be used [CODSTA-MCPP-43]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'set_unexpected' identifier should not be used [CODSTA-MCPP-43]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-44", "name": "Lambda expressions should not be defined inside another lambda expression", "shortDescription": { "text": "Lambda expressions should not be defined inside another lambda expression" }, "fullDescription": { "text": "Lambda expressions should not be defined inside another lambda expression [CODSTA-MCPP-44]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Lambda expressions should not be defined inside another lambda expression [CODSTA-MCPP-44]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-45", "name": "Return type of a non-void return type lambda expression should be explicitly specified", "shortDescription": { "text": "Return type of a non-void return type lambda expression should be explicitly specified" }, "fullDescription": { "text": "Return type of a non-void return type lambda expression should be explicitly specified [CODSTA-MCPP-45]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Return type of a non-void return type lambda expression should be explicitly specified [CODSTA-MCPP-45]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-46", "name": "Include a parameter list in every lambda expression", "shortDescription": { "text": "Include a parameter list in every lambda expression" }, "fullDescription": { "text": "Include a parameter list in every lambda expression [CODSTA-MCPP-46]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Include a parameter list in every lambda expression [CODSTA-MCPP-46]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-47", "name": "Avoid overloading constructors with std::initializer_list", "shortDescription": { "text": "Avoid overloading constructors with std::initializer_list" }, "fullDescription": { "text": "Avoid overloading constructors with std::initializer_list [CODSTA-MCPP-47]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid overloading constructors with std::initializer_list [CODSTA-MCPP-47]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-48", "name": "Multiple output values from a function should be returned as a struct or tuple", "shortDescription": { "text": "Multiple output values from a function should be returned as a struct or tuple" }, "fullDescription": { "text": "Multiple output values from a function should be returned as a struct or tuple [CODSTA-MCPP-48]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Multiple output values from a function should be returned as a struct or tuple [CODSTA-MCPP-48]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-49", "name": "User-defined copy and move assignment operators should use user-defined no-throw swap function", "shortDescription": { "text": "User-defined copy and move assignment operators should use user-defined no-throw swap function" }, "fullDescription": { "text": "User-defined copy and move assignment operators should use user-defined no-throw swap function [CODSTA-MCPP-49]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "User-defined copy and move assignment operators should use user-defined no-throw swap function [CODSTA-MCPP-49]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-50", "name": "A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used", "shortDescription": { "text": "A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" }, "fullDescription": { "text": "A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used [CODSTA-MCPP-50]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used [CODSTA-MCPP-50]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-51", "name": "Use const container calls when the result is immediately converted to a const iterator", "shortDescription": { "text": "Use const container calls when the result is immediately converted to a const iterator" }, "fullDescription": { "text": "Use const container calls when the result is immediately converted to a const iterator [CODSTA-MCPP-51]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use const container calls when the result is immediately converted to a const iterator [CODSTA-MCPP-51]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-52", "name": "Do not introduce virtual functions in a final class", "shortDescription": { "text": "Do not introduce virtual functions in a final class" }, "fullDescription": { "text": "Do not introduce virtual functions in a final class [CODSTA-MCPP-52]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not introduce virtual functions in a final class [CODSTA-MCPP-52]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-53", "name": "Do not use std::move on objects declared with the const or const & type", "shortDescription": { "text": "Do not use std::move on objects declared with the const or const & type" }, "fullDescription": { "text": "Do not use std::move on objects declared with the const or const & type [CODSTA-MCPP-53]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use std::move on objects declared with the const or const & type [CODSTA-MCPP-53]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-54", "name": "Do not create an rvalue reference of std::array", "shortDescription": { "text": "Do not create an rvalue reference of std::array" }, "fullDescription": { "text": "Do not create an rvalue reference of std::array [CODSTA-MCPP-54]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not create an rvalue reference of std::array [CODSTA-MCPP-54]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-55", "name": "Use std::call_once rather than the Double-Checked Locking pattern", "shortDescription": { "text": "Use std::call_once rather than the Double-Checked Locking pattern" }, "fullDescription": { "text": "Use std::call_once rather than the Double-Checked Locking pattern [CODSTA-MCPP-55]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use std::call_once rather than the Double-Checked Locking pattern [CODSTA-MCPP-55]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-04", "name": "Prefer 'nullptr' over 'NULL' or '0'(zero)", "shortDescription": { "text": "Prefer 'nullptr' over 'NULL' or '0'(zero)" }, "fullDescription": { "text": "Prefer 'nullptr' over 'NULL' or '0'(zero) [CODSTA-MCPP-04]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer 'nullptr' over 'NULL' or '0'(zero) [CODSTA-MCPP-04]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-11_a_cpp11", "name": "Use constexpr to declare const variables whenever possible", "shortDescription": { "text": "Use constexpr to declare const variables whenever possible" }, "fullDescription": { "text": "Use constexpr to declare const variables whenever possible [CODSTA-MCPP-11_a_cpp11]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use constexpr to declare const variables whenever possible [CODSTA-MCPP-11_a_cpp11]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-11_b_cpp11", "name": "Use constexpr to declare functions whenever possible", "shortDescription": { "text": "Use constexpr to declare functions whenever possible" }, "fullDescription": { "text": "Use constexpr to declare functions whenever possible [CODSTA-MCPP-11_b_cpp11]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use constexpr to declare functions whenever possible [CODSTA-MCPP-11_b_cpp11]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-16_a", "name": "Prefer smart pointer members over raw pointer members", "shortDescription": { "text": "Prefer smart pointer members over raw pointer members" }, "fullDescription": { "text": "Prefer smart pointer members over raw pointer members [CODSTA-MCPP-16_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer smart pointer members over raw pointer members [CODSTA-MCPP-16_a]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-16_b", "name": "Prefer smart pointers over raw pointers for arrays or STL containers", "shortDescription": { "text": "Prefer smart pointers over raw pointers for arrays or STL containers" }, "fullDescription": { "text": "Prefer smart pointers over raw pointers for arrays or STL containers [CODSTA-MCPP-16_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer smart pointers over raw pointers for arrays or STL containers [CODSTA-MCPP-16_b]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-20", "name": "Prefer smart pointers over raw local pointers", "shortDescription": { "text": "Prefer smart pointers over raw local pointers" }, "fullDescription": { "text": "Prefer smart pointers over raw local pointers [CODSTA-MCPP-20]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer smart pointers over raw local pointers [CODSTA-MCPP-20]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-21", "name": "Do not call lock() directly on a mutex", "shortDescription": { "text": "Do not call lock() directly on a mutex" }, "fullDescription": { "text": "Do not call lock() directly on a mutex [CODSTA-MCPP-21]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not call lock() directly on a mutex [CODSTA-MCPP-21]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "COMMENT-13", "name": "Line-splicing shall not be used in \/\/ comments", "shortDescription": { "text": "Line-splicing shall not be used in \/\/ comments" }, "fullDescription": { "text": "Line-splicing shall not be used in \/\/ comments [COMMENT-13]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Line-splicing shall not be used in \/\/ comments [COMMENT-13]" }, "properties": { "tags": [ "Comments" ] } }, { "id": "COMMENT-01", "name": "Prefer C++ style comment", "shortDescription": { "text": "Prefer C++ style comment" }, "fullDescription": { "text": "Prefer C++ style comment [COMMENT-01]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer C++ style comment [COMMENT-01]" }, "properties": { "tags": [ "Comments" ] } }, { "id": "COMMENT-02", "name": "Provide copyright information", "shortDescription": { "text": "Provide copyright information" }, "fullDescription": { "text": "Provide copyright information [COMMENT-02]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Provide copyright information [COMMENT-02]" }, "properties": { "tags": [ "Comments" ] } }, { "id": "COMMENT-03", "name": "Every source file will be documented with an introductory comment that provides information on the file", "shortDescription": { "text": "Every source file will be documented with an introductory comment that provides information on the file" }, "fullDescription": { "text": "Every source file will be documented with an introductory comment that provides information on the file [COMMENT-03]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Every source file will be documented with an introductory comment that provides information on the file [COMMENT-03]" }, "properties": { "tags": [ "Comments" ] } }, { "id": "COMMENT-04", "name": "Document functions in comments that precede function definitions", "shortDescription": { "text": "Document functions in comments that precede function definitions" }, "fullDescription": { "text": "Document functions in comments that precede function definitions [COMMENT-04]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Document functions in comments that precede function definitions [COMMENT-04]" }, "properties": { "tags": [ "Comments" ] } }, { "id": "COMMENT-04_b", "name": "Document functions in comments that precede function declarations", "shortDescription": { "text": "Document functions in comments that precede function declarations" }, "fullDescription": { "text": "Document functions in comments that precede function declarations [COMMENT-04_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Document functions in comments that precede function declarations [COMMENT-04_b]" }, "properties": { "tags": [ "Comments" ] } }, { "id": "COMMENT-05", "name": "Each variable declaration should be commented", "shortDescription": { "text": "Each variable declaration should be commented" }, "fullDescription": { "text": "Each variable declaration should be commented [COMMENT-05]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each variable declaration should be commented [COMMENT-05]" }, "properties": { "tags": [ "Comments" ] } }, { "id": "COMMENT-06", "name": "Each typedef should be commented", "shortDescription": { "text": "Each typedef should be commented" }, "fullDescription": { "text": "Each typedef should be commented [COMMENT-06]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each typedef should be commented [COMMENT-06]" }, "properties": { "tags": [ "Comments" ] } }, { "id": "COMMENT-07", "name": "Each enumeration value should be commented", "shortDescription": { "text": "Each enumeration value should be commented" }, "fullDescription": { "text": "Each enumeration value should be commented [COMMENT-07]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each enumeration value should be commented [COMMENT-07]" }, "properties": { "tags": [ "Comments" ] } }, { "id": "COMMENT-08", "name": "Each structure member variable should be commented", "shortDescription": { "text": "Each structure member variable should be commented" }, "fullDescription": { "text": "Each structure member variable should be commented [COMMENT-08]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each structure member variable should be commented [COMMENT-08]" }, "properties": { "tags": [ "Comments" ] } }, { "id": "COMMENT-09", "name": "All usage of assembler shall be documented", "shortDescription": { "text": "All usage of assembler shall be documented" }, "fullDescription": { "text": "All usage of assembler shall be documented [COMMENT-09]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All usage of assembler shall be documented [COMMENT-09]" }, "properties": { "tags": [ "Comments" ] } }, { "id": "COMMENT-10", "name": "Use of floating-point arithmetic shall be documented", "shortDescription": { "text": "Use of floating-point arithmetic shall be documented" }, "fullDescription": { "text": "Use of floating-point arithmetic shall be documented [COMMENT-10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use of floating-point arithmetic shall be documented [COMMENT-10]" }, "properties": { "tags": [ "Comments" ] } }, { "id": "COMMENT-11", "name": "The character sequence \/\/ shall not be used within a C-style comment", "shortDescription": { "text": "The character sequence \/\/ shall not be used within a C-style comment" }, "fullDescription": { "text": "The character sequence \/\/ shall not be used within a C-style comment [COMMENT-11]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The character sequence \/\/ shall not be used within a C-style comment [COMMENT-11]" }, "properties": { "tags": [ "Comments" ] } }, { "id": "COMMENT-12", "name": "The character sequence \/* shall not be used within a C++-style comment", "shortDescription": { "text": "The character sequence \/* shall not be used within a C++-style comment" }, "fullDescription": { "text": "The character sequence \/* shall not be used within a C++-style comment [COMMENT-12]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The character sequence \/* shall not be used within a C++-style comment [COMMENT-12]" }, "properties": { "tags": [ "Comments" ] } }, { "id": "COMMENT-14", "name": "All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag", "shortDescription": { "text": "All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" }, "fullDescription": { "text": "All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag [COMMENT-14]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag [COMMENT-14]" }, "properties": { "tags": [ "Comments" ] } }, { "id": "COMMENT-14_b", "name": "Function parameters and return type should be documented in a comment that precedes the function declaration", "shortDescription": { "text": "Function parameters and return type should be documented in a comment that precedes the function declaration" }, "fullDescription": { "text": "Function parameters and return type should be documented in a comment that precedes the function declaration [COMMENT-14_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Function parameters and return type should be documented in a comment that precedes the function declaration [COMMENT-14_b]" }, "properties": { "tags": [ "Comments" ] } }, { "id": "CWE-532-a", "name": "Avoid passing sensitive data to functions that write to log files", "shortDescription": { "text": "Avoid passing sensitive data to functions that write to log files" }, "fullDescription": { "text": "Avoid passing sensitive data to functions that write to log files [CWE-532-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid passing sensitive data to functions that write to log files [CWE-532-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-532 Inclusion of Sensitive Information in Log Files" ], "security-severity": "8" } }, { "id": "CWE-772-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [CWE-772-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure resources are freed [CWE-772-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-772 Missing Release of Resource after Effective Lifetime" ], "security-severity": "9.5" } }, { "id": "CWE-772-b", "name": "Define a virtual destructor in classes used as base classes which have virtual functions", "shortDescription": { "text": "Define a virtual destructor in classes used as base classes which have virtual functions" }, "fullDescription": { "text": "Define a virtual destructor in classes used as base classes which have virtual functions [CWE-772-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Define a virtual destructor in classes used as base classes which have virtual functions [CWE-772-b]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-772 Missing Release of Resource after Effective Lifetime" ], "security-severity": "9.5" } }, { "id": "CWE-476-a", "name": "Avoid null pointer dereferencing", "shortDescription": { "text": "Avoid null pointer dereferencing" }, "fullDescription": { "text": "Avoid null pointer dereferencing [CWE-476-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid null pointer dereferencing [CWE-476-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-476 NULL Pointer Dereference" ], "security-severity": "9.5" } }, { "id": "CWE-770-a", "name": "Validate potentially tainted data before it is used to determine the size of memory allocation", "shortDescription": { "text": "Validate potentially tainted data before it is used to determine the size of memory allocation" }, "fullDescription": { "text": "Validate potentially tainted data before it is used to determine the size of memory allocation [CWE-770-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Validate potentially tainted data before it is used to determine the size of memory allocation [CWE-770-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-770 Allocation of Resources Without Limits or Throttling" ], "security-severity": "8" } }, { "id": "CWE-190-a", "name": "Avoid wraparounds when performing arithmetic integer operations", "shortDescription": { "text": "Avoid wraparounds when performing arithmetic integer operations" }, "fullDescription": { "text": "Avoid wraparounds when performing arithmetic integer operations [CWE-190-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid wraparounds when performing arithmetic integer operations [CWE-190-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-190 Integer Overflow or Wraparound" ], "security-severity": "6" } }, { "id": "CWE-190-b", "name": "Avoid possible integer overflow in expressions in which the result is cast to a wider integer type", "shortDescription": { "text": "Avoid possible integer overflow in expressions in which the result is cast to a wider integer type" }, "fullDescription": { "text": "Avoid possible integer overflow in expressions in which the result is cast to a wider integer type [CWE-190-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid possible integer overflow in expressions in which the result is cast to a wider integer type [CWE-190-b]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-190 Integer Overflow or Wraparound" ], "security-severity": "6" } }, { "id": "CWE-190-c", "name": "Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type", "shortDescription": { "text": "Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" }, "fullDescription": { "text": "Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type [CWE-190-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type [CWE-190-c]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-190 Integer Overflow or Wraparound" ], "security-severity": "6" } }, { "id": "CWE-190-d", "name": "Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type", "shortDescription": { "text": "Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type" }, "fullDescription": { "text": "Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type [CWE-190-d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type [CWE-190-d]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-190 Integer Overflow or Wraparound" ], "security-severity": "6" } }, { "id": "CWE-190-e", "name": "Integer overflow or underflow in constant expression in '+', '-', '*' operator", "shortDescription": { "text": "Integer overflow or underflow in constant expression in '+', '-', '*' operator" }, "fullDescription": { "text": "Integer overflow or underflow in constant expression in '+', '-', '*' operator [CWE-190-e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Integer overflow or underflow in constant expression in '+', '-', '*' operator [CWE-190-e]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-190 Integer Overflow or Wraparound" ], "security-severity": "6" } }, { "id": "CWE-190-f", "name": "Integer overflow or underflow in constant expression in '<<' operator", "shortDescription": { "text": "Integer overflow or underflow in constant expression in '<<' operator" }, "fullDescription": { "text": "Integer overflow or underflow in constant expression in '<<' operator [CWE-190-f]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Integer overflow or underflow in constant expression in '<<' operator [CWE-190-f]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-190 Integer Overflow or Wraparound" ], "security-severity": "4" } }, { "id": "CWE-190-g", "name": "Evaluation of constant unsigned integer expressions should not lead to wrap-around", "shortDescription": { "text": "Evaluation of constant unsigned integer expressions should not lead to wrap-around" }, "fullDescription": { "text": "Evaluation of constant unsigned integer expressions should not lead to wrap-around [CWE-190-g]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Evaluation of constant unsigned integer expressions should not lead to wrap-around [CWE-190-g]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-190 Integer Overflow or Wraparound" ], "security-severity": "2" } }, { "id": "CWE-78-a", "name": "Protect against command injection", "shortDescription": { "text": "Protect against command injection" }, "fullDescription": { "text": "Protect against command injection [CWE-78-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against command injection [CWE-78-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" ], "security-severity": "9.5" } }, { "id": "CWE-617-a", "name": "Do not use assertions", "shortDescription": { "text": "Do not use assertions" }, "fullDescription": { "text": "Do not use assertions [CWE-617-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use assertions [CWE-617-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-617 Reachable Assertion" ], "security-severity": "6" } }, { "id": "CWE-835-a", "name": "Avoid infinite loops", "shortDescription": { "text": "Avoid infinite loops" }, "fullDescription": { "text": "Avoid infinite loops [CWE-835-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid infinite loops [CWE-835-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-835 Loop with Unreachable Exit Condition ('Infinite Loop')" ], "security-severity": "6" } }, { "id": "CWE-415-a", "name": "Do not use resources that have been freed", "shortDescription": { "text": "Do not use resources that have been freed" }, "fullDescription": { "text": "Do not use resources that have been freed [CWE-415-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use resources that have been freed [CWE-415-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-415 Double Free" ], "security-severity": "9.5" } }, { "id": "CWE-119-c", "name": "Avoid buffer overflow due to defining incorrect format limits", "shortDescription": { "text": "Avoid buffer overflow due to defining incorrect format limits" }, "fullDescription": { "text": "Avoid buffer overflow due to defining incorrect format limits [CWE-119-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer overflow due to defining incorrect format limits [CWE-119-c]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer" ], "security-severity": "9.5" } }, { "id": "CWE-119-d", "name": "Avoid overflow when reading from a buffer", "shortDescription": { "text": "Avoid overflow when reading from a buffer" }, "fullDescription": { "text": "Avoid overflow when reading from a buffer [CWE-119-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when reading from a buffer [CWE-119-d]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer" ], "security-severity": "9.5" } }, { "id": "CWE-119-e", "name": "Avoid overflow when writing to a buffer", "shortDescription": { "text": "Avoid overflow when writing to a buffer" }, "fullDescription": { "text": "Avoid overflow when writing to a buffer [CWE-119-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when writing to a buffer [CWE-119-e]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer" ], "security-severity": "9.5" } }, { "id": "CWE-119-f", "name": "Avoid tainted data in array indexes", "shortDescription": { "text": "Avoid tainted data in array indexes" }, "fullDescription": { "text": "Avoid tainted data in array indexes [CWE-119-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid tainted data in array indexes [CWE-119-f]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer" ], "security-severity": "9.5" } }, { "id": "CWE-119-g", "name": "Prevent buffer overflows from tainted data", "shortDescription": { "text": "Prevent buffer overflows from tainted data" }, "fullDescription": { "text": "Prevent buffer overflows from tainted data [CWE-119-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Prevent buffer overflows from tainted data [CWE-119-g]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer" ], "security-severity": "9.5" } }, { "id": "CWE-119-h", "name": "Avoid buffer read overflow from tainted data", "shortDescription": { "text": "Avoid buffer read overflow from tainted data" }, "fullDescription": { "text": "Avoid buffer read overflow from tainted data [CWE-119-h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer read overflow from tainted data [CWE-119-h]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer" ], "security-severity": "9.5" } }, { "id": "CWE-119-i", "name": "Avoid buffer write overflow from tainted data", "shortDescription": { "text": "Avoid buffer write overflow from tainted data" }, "fullDescription": { "text": "Avoid buffer write overflow from tainted data [CWE-119-i]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer write overflow from tainted data [CWE-119-i]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer" ], "security-severity": "9.5" } }, { "id": "CWE-119-a", "name": "Avoid accessing arrays out of bounds", "shortDescription": { "text": "Avoid accessing arrays out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays out of bounds [CWE-119-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays out of bounds [CWE-119-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer" ], "security-severity": "8" } }, { "id": "CWE-119-b", "name": "Avoid accessing arrays and pointers out of bounds", "shortDescription": { "text": "Avoid accessing arrays and pointers out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays and pointers out of bounds [CWE-119-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays and pointers out of bounds [CWE-119-b]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer" ], "security-severity": "8" } }, { "id": "CWE-119-j", "name": "Suspicious use of 'strcpy' without checking size of source buffer", "shortDescription": { "text": "Suspicious use of 'strcpy' without checking size of source buffer" }, "fullDescription": { "text": "Suspicious use of 'strcpy' without checking size of source buffer [CWE-119-j]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Suspicious use of 'strcpy' without checking size of source buffer [CWE-119-j]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer" ], "security-severity": "6" } }, { "id": "CWE-119-k", "name": "Ensure the output buffer is large enough when using path manipulation functions", "shortDescription": { "text": "Ensure the output buffer is large enough when using path manipulation functions" }, "fullDescription": { "text": "Ensure the output buffer is large enough when using path manipulation functions [CWE-119-k]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Ensure the output buffer is large enough when using path manipulation functions [CWE-119-k]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer" ], "security-severity": "6" } }, { "id": "CWE-416-a", "name": "Do not use resources that have been freed", "shortDescription": { "text": "Do not use resources that have been freed" }, "fullDescription": { "text": "Do not use resources that have been freed [CWE-416-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use resources that have been freed [CWE-416-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-416 Use After Free" ], "security-severity": "9.5" } }, { "id": "CWE-416-b", "name": "Do not point to a wrapped object that has been freed", "shortDescription": { "text": "Do not point to a wrapped object that has been freed" }, "fullDescription": { "text": "Do not point to a wrapped object that has been freed [CWE-416-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not point to a wrapped object that has been freed [CWE-416-b]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-416 Use After Free" ], "security-severity": "9.5" } }, { "id": "CWE-416-c", "name": "Freed memory shouldn't be accessed under any circumstances", "shortDescription": { "text": "Freed memory shouldn't be accessed under any circumstances" }, "fullDescription": { "text": "Freed memory shouldn't be accessed under any circumstances [CWE-416-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Freed memory shouldn't be accessed under any circumstances [CWE-416-c]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-416 Use After Free" ], "security-severity": "6" } }, { "id": "CWE-611-a", "name": "Disable resolving XML external entities (XXE) in libxerces-c", "shortDescription": { "text": "Disable resolving XML external entities (XXE) in libxerces-c" }, "fullDescription": { "text": "Disable resolving XML external entities (XXE) in libxerces-c [CWE-611-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Disable resolving XML external entities (XXE) in libxerces-c [CWE-611-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-611 Improper Restriction of XML External Entity Reference" ], "security-severity": "8" } }, { "id": "CWE-732-b", "name": "Specify the access permission bits if a file is created using the 'open' or 'openat' system call", "shortDescription": { "text": "Specify the access permission bits if a file is created using the 'open' or 'openat' system call" }, "fullDescription": { "text": "Specify the access permission bits if a file is created using the 'open' or 'openat' system call [CWE-732-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Specify the access permission bits if a file is created using the 'open' or 'openat' system call [CWE-732-b]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-732 Incorrect Permission Assignment for Critical Resource" ], "security-severity": "6" } }, { "id": "CWE-732-a", "name": "Call 'umask' before calling 'mkstemp'", "shortDescription": { "text": "Call 'umask' before calling 'mkstemp'" }, "fullDescription": { "text": "Call 'umask' before calling 'mkstemp' [CWE-732-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Call 'umask' before calling 'mkstemp' [CWE-732-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-732 Incorrect Permission Assignment for Critical Resource" ], "security-severity": "4" } }, { "id": "CWE-798-a", "name": "Do not hard code string literals", "shortDescription": { "text": "Do not hard code string literals" }, "fullDescription": { "text": "Do not hard code string literals [CWE-798-a]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Do not hard code string literals [CWE-798-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-798 Use of Hard-coded Credentials" ], "security-severity": "2" } }, { "id": "CWE-125-c", "name": "Avoid overflow when reading from a buffer", "shortDescription": { "text": "Avoid overflow when reading from a buffer" }, "fullDescription": { "text": "Avoid overflow when reading from a buffer [CWE-125-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when reading from a buffer [CWE-125-c]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-125 Out-of-bounds Read" ], "security-severity": "9.5" } }, { "id": "CWE-125-d", "name": "Avoid buffer read overflow from tainted data", "shortDescription": { "text": "Avoid buffer read overflow from tainted data" }, "fullDescription": { "text": "Avoid buffer read overflow from tainted data [CWE-125-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer read overflow from tainted data [CWE-125-d]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-125 Out-of-bounds Read" ], "security-severity": "9.5" } }, { "id": "CWE-125-a", "name": "Avoid accessing arrays out of bounds", "shortDescription": { "text": "Avoid accessing arrays out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays out of bounds [CWE-125-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays out of bounds [CWE-125-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-125 Out-of-bounds Read" ], "security-severity": "8" } }, { "id": "CWE-125-b", "name": "Avoid accessing arrays and pointers out of bounds", "shortDescription": { "text": "Avoid accessing arrays and pointers out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays and pointers out of bounds [CWE-125-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays and pointers out of bounds [CWE-125-b]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-125 Out-of-bounds Read" ], "security-severity": "8" } }, { "id": "CWE-400-a", "name": "Do not create variables on the stack above the defined limits", "shortDescription": { "text": "Do not create variables on the stack above the defined limits" }, "fullDescription": { "text": "Do not create variables on the stack above the defined limits [CWE-400-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not create variables on the stack above the defined limits [CWE-400-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-400 Uncontrolled Resource Consumption" ], "security-severity": "6" } }, { "id": "CWE-269-a", "name": "Observe correct revocation order while relinquishing privileges", "shortDescription": { "text": "Observe correct revocation order while relinquishing privileges" }, "fullDescription": { "text": "Observe correct revocation order while relinquishing privileges [CWE-269-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Observe correct revocation order while relinquishing privileges [CWE-269-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-269 Improper Privilege Management" ], "security-severity": "6" } }, { "id": "CWE-269-b", "name": "Ensure that privilege relinquishment is successful", "shortDescription": { "text": "Ensure that privilege relinquishment is successful" }, "fullDescription": { "text": "Ensure that privilege relinquishment is successful [CWE-269-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Ensure that privilege relinquishment is successful [CWE-269-b]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-269 Improper Privilege Management" ], "security-severity": "6" } }, { "id": "CWE-863-a", "name": "Do not use 'cuserid' function", "shortDescription": { "text": "Do not use 'cuserid' function" }, "fullDescription": { "text": "Do not use 'cuserid' function [CWE-863-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use 'cuserid' function [CWE-863-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-863 Incorrect Authorization" ], "security-severity": "8" } }, { "id": "CWE-200-a", "name": "Do not print potentially sensitive information, resulting from an application error into exception messages", "shortDescription": { "text": "Do not print potentially sensitive information, resulting from an application error into exception messages" }, "fullDescription": { "text": "Do not print potentially sensitive information, resulting from an application error into exception messages [CWE-200-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not print potentially sensitive information, resulting from an application error into exception messages [CWE-200-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-200 Information Exposure" ], "security-severity": "8" } }, { "id": "CWE-287-a", "name": "Do not use weak encryption functions", "shortDescription": { "text": "Do not use weak encryption functions" }, "fullDescription": { "text": "Do not use weak encryption functions [CWE-287-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use weak encryption functions [CWE-287-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-287 Improper Authentication" ], "security-severity": "8" } }, { "id": "CWE-362-d", "name": "Avoid race conditions when using fork and file descriptors", "shortDescription": { "text": "Avoid race conditions when using fork and file descriptors" }, "fullDescription": { "text": "Avoid race conditions when using fork and file descriptors [CWE-362-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid race conditions when using fork and file descriptors [CWE-362-d]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-362 Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')" ], "security-severity": "9.5" } }, { "id": "CWE-362-e", "name": "Do not use global variable with different locks set", "shortDescription": { "text": "Do not use global variable with different locks set" }, "fullDescription": { "text": "Do not use global variable with different locks set [CWE-362-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use global variable with different locks set [CWE-362-e]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-362 Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')" ], "security-severity": "9.5" } }, { "id": "CWE-362-a", "name": "Usage of functions prone to race is not allowed", "shortDescription": { "text": "Usage of functions prone to race is not allowed" }, "fullDescription": { "text": "Usage of functions prone to race is not allowed [CWE-362-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Usage of functions prone to race is not allowed [CWE-362-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-362 Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')" ], "security-severity": "8" } }, { "id": "CWE-362-b", "name": "Avoid race conditions while accessing files", "shortDescription": { "text": "Avoid race conditions while accessing files" }, "fullDescription": { "text": "Avoid race conditions while accessing files [CWE-362-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid race conditions while accessing files [CWE-362-b]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-362 Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')" ], "security-severity": "8" } }, { "id": "CWE-362-c", "name": "Use locks to prevent race conditions when modifying bit fields", "shortDescription": { "text": "Use locks to prevent race conditions when modifying bit fields" }, "fullDescription": { "text": "Use locks to prevent race conditions when modifying bit fields [CWE-362-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use locks to prevent race conditions when modifying bit fields [CWE-362-c]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-362 Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')" ], "security-severity": "6" } }, { "id": "CWE-20-a", "name": "Avoid tainted data in array indexes", "shortDescription": { "text": "Avoid tainted data in array indexes" }, "fullDescription": { "text": "Avoid tainted data in array indexes [CWE-20-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid tainted data in array indexes [CWE-20-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-20 Improper Input Validation" ], "security-severity": "9.5" } }, { "id": "CWE-20-b", "name": "Avoid potential integer overflow\/underflow on tainted data", "shortDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data" }, "fullDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data [CWE-20-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid potential integer overflow\/underflow on tainted data [CWE-20-b]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-20 Improper Input Validation" ], "security-severity": "9.5" } }, { "id": "CWE-20-d", "name": "Protect against command injection", "shortDescription": { "text": "Protect against command injection" }, "fullDescription": { "text": "Protect against command injection [CWE-20-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against command injection [CWE-20-d]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-20 Improper Input Validation" ], "security-severity": "9.5" } }, { "id": "CWE-20-e", "name": "Avoid printing tainted data on the output console", "shortDescription": { "text": "Avoid printing tainted data on the output console" }, "fullDescription": { "text": "Avoid printing tainted data on the output console [CWE-20-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid printing tainted data on the output console [CWE-20-e]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-20 Improper Input Validation" ], "security-severity": "9.5" } }, { "id": "CWE-20-f", "name": "Protect against environment injection", "shortDescription": { "text": "Protect against environment injection" }, "fullDescription": { "text": "Protect against environment injection [CWE-20-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against environment injection [CWE-20-f]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-20 Improper Input Validation" ], "security-severity": "9.5" } }, { "id": "CWE-20-g", "name": "Exclude unsanitized user input from format strings", "shortDescription": { "text": "Exclude unsanitized user input from format strings" }, "fullDescription": { "text": "Exclude unsanitized user input from format strings [CWE-20-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Exclude unsanitized user input from format strings [CWE-20-g]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-20 Improper Input Validation" ], "security-severity": "9.5" } }, { "id": "CWE-20-h", "name": "Protect against SQL injection", "shortDescription": { "text": "Protect against SQL injection" }, "fullDescription": { "text": "Protect against SQL injection [CWE-20-h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against SQL injection [CWE-20-h]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-20 Improper Input Validation" ], "security-severity": "9.5" } }, { "id": "CWE-20-i", "name": "Protect against file name injection", "shortDescription": { "text": "Protect against file name injection" }, "fullDescription": { "text": "Protect against file name injection [CWE-20-i]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against file name injection [CWE-20-i]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-20 Improper Input Validation" ], "security-severity": "9.5" } }, { "id": "CWE-20-c", "name": "Avoid passing unvalidated binary data to log methods", "shortDescription": { "text": "Avoid passing unvalidated binary data to log methods" }, "fullDescription": { "text": "Avoid passing unvalidated binary data to log methods [CWE-20-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid passing unvalidated binary data to log methods [CWE-20-c]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-20 Improper Input Validation" ], "security-severity": "8" } }, { "id": "CWE-20-j", "name": "Untrusted data is used as a loop boundary", "shortDescription": { "text": "Untrusted data is used as a loop boundary" }, "fullDescription": { "text": "Untrusted data is used as a loop boundary [CWE-20-j]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Untrusted data is used as a loop boundary [CWE-20-j]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-20 Improper Input Validation" ], "security-severity": "8" } }, { "id": "CWE-22-a", "name": "Protect against file name injection", "shortDescription": { "text": "Protect against file name injection" }, "fullDescription": { "text": "Protect against file name injection [CWE-22-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against file name injection [CWE-22-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" ], "security-severity": "9.5" } }, { "id": "CWE-89-a", "name": "Protect against SQL injection", "shortDescription": { "text": "Protect against SQL injection" }, "fullDescription": { "text": "Protect against SQL injection [CWE-89-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against SQL injection [CWE-89-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" ], "security-severity": "9.5" } }, { "id": "CWE-704-a", "name": "Conversions shall not be performed between a pointer to a function and any other type than pointer to function", "shortDescription": { "text": "Conversions shall not be performed between a pointer to a function and any other type than pointer to function" }, "fullDescription": { "text": "Conversions shall not be performed between a pointer to a function and any other type than pointer to function [CWE-704-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Conversions shall not be performed between a pointer to a function and any other type than pointer to function [CWE-704-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-704 Incorrect Type Conversion or Cast" ], "security-severity": "6" } }, { "id": "CWE-704-b", "name": "Conversions shall not be performed between non compatible pointer to a function types", "shortDescription": { "text": "Conversions shall not be performed between non compatible pointer to a function types" }, "fullDescription": { "text": "Conversions shall not be performed between non compatible pointer to a function types [CWE-704-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Conversions shall not be performed between non compatible pointer to a function types [CWE-704-b]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-704 Incorrect Type Conversion or Cast" ], "security-severity": "6" } }, { "id": "CWE-704-c", "name": "Conversions shall not be performed between a pointer to an incomplete type and any other type", "shortDescription": { "text": "Conversions shall not be performed between a pointer to an incomplete type and any other type" }, "fullDescription": { "text": "Conversions shall not be performed between a pointer to an incomplete type and any other type [CWE-704-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Conversions shall not be performed between a pointer to an incomplete type and any other type [CWE-704-c]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-704 Incorrect Type Conversion or Cast" ], "security-severity": "6" } }, { "id": "CWE-704-d", "name": "A cast shall not be performed between a pointer to object type and a pointer to a different object type", "shortDescription": { "text": "A cast shall not be performed between a pointer to object type and a pointer to a different object type" }, "fullDescription": { "text": "A cast shall not be performed between a pointer to object type and a pointer to a different object type [CWE-704-d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A cast shall not be performed between a pointer to object type and a pointer to a different object type [CWE-704-d]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-704 Incorrect Type Conversion or Cast" ], "security-severity": "6" } }, { "id": "CWE-704-g", "name": "A cast shall not be performed between pointer to void and an arithmetic type", "shortDescription": { "text": "A cast shall not be performed between pointer to void and an arithmetic type" }, "fullDescription": { "text": "A cast shall not be performed between pointer to void and an arithmetic type [CWE-704-g]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A cast shall not be performed between pointer to void and an arithmetic type [CWE-704-g]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-704 Incorrect Type Conversion or Cast" ], "security-severity": "6" } }, { "id": "CWE-704-h", "name": "An implicit conversion shall not be performed between pointer to void and an arithmetic type", "shortDescription": { "text": "An implicit conversion shall not be performed between pointer to void and an arithmetic type" }, "fullDescription": { "text": "An implicit conversion shall not be performed between pointer to void and an arithmetic type [CWE-704-h]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An implicit conversion shall not be performed between pointer to void and an arithmetic type [CWE-704-h]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-704 Incorrect Type Conversion or Cast" ], "security-severity": "6" } }, { "id": "CWE-704-i", "name": "A cast shall not be performed between pointer to object and a non-integer arithmetic type", "shortDescription": { "text": "A cast shall not be performed between pointer to object and a non-integer arithmetic type" }, "fullDescription": { "text": "A cast shall not be performed between pointer to object and a non-integer arithmetic type [CWE-704-i]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A cast shall not be performed between pointer to object and a non-integer arithmetic type [CWE-704-i]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-704 Incorrect Type Conversion or Cast" ], "security-severity": "6" } }, { "id": "CWE-704-j", "name": "Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used", "shortDescription": { "text": "Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" }, "fullDescription": { "text": "Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used [CWE-704-j]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used [CWE-704-j]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-704 Incorrect Type Conversion or Cast" ], "security-severity": "6" } }, { "id": "CWE-704-k", "name": "Implicit conversions from integral to floating type which may result in a loss of information shall not be used", "shortDescription": { "text": "Implicit conversions from integral to floating type which may result in a loss of information shall not be used" }, "fullDescription": { "text": "Implicit conversions from integral to floating type which may result in a loss of information shall not be used [CWE-704-k]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Implicit conversions from integral to floating type which may result in a loss of information shall not be used [CWE-704-k]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-704 Incorrect Type Conversion or Cast" ], "security-severity": "6" } }, { "id": "CWE-704-l", "name": "Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used", "shortDescription": { "text": "Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" }, "fullDescription": { "text": "Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used [CWE-704-l]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used [CWE-704-l]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-704 Incorrect Type Conversion or Cast" ], "security-severity": "6" } }, { "id": "CWE-704-e", "name": "A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t'", "shortDescription": { "text": "A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t'" }, "fullDescription": { "text": "A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t' [CWE-704-e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t' [CWE-704-e]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-704 Incorrect Type Conversion or Cast" ], "security-severity": "4" } }, { "id": "CWE-704-f", "name": "A conversion should not be performed from pointer to void into pointer to object", "shortDescription": { "text": "A conversion should not be performed from pointer to void into pointer to object" }, "fullDescription": { "text": "A conversion should not be performed from pointer to void into pointer to object [CWE-704-f]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A conversion should not be performed from pointer to void into pointer to object [CWE-704-f]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-704 Incorrect Type Conversion or Cast" ], "security-severity": "4" } }, { "id": "CWE-426-a", "name": "Use care to ensure that LoadLibrary() will load the correct library", "shortDescription": { "text": "Use care to ensure that LoadLibrary() will load the correct library" }, "fullDescription": { "text": "Use care to ensure that LoadLibrary() will load the correct library [CWE-426-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use care to ensure that LoadLibrary() will load the correct library [CWE-426-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-426 Untrusted Search Path" ], "security-severity": "8" } }, { "id": "CWE-787-c", "name": "Avoid buffer overflow due to defining incorrect format limits", "shortDescription": { "text": "Avoid buffer overflow due to defining incorrect format limits" }, "fullDescription": { "text": "Avoid buffer overflow due to defining incorrect format limits [CWE-787-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer overflow due to defining incorrect format limits [CWE-787-c]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-787 Out-of-bounds Write" ], "security-severity": "9.5" } }, { "id": "CWE-787-d", "name": "Avoid overflow when writing to a buffer", "shortDescription": { "text": "Avoid overflow when writing to a buffer" }, "fullDescription": { "text": "Avoid overflow when writing to a buffer [CWE-787-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when writing to a buffer [CWE-787-d]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-787 Out-of-bounds Write" ], "security-severity": "9.5" } }, { "id": "CWE-787-e", "name": "Prevent buffer overflows from tainted data", "shortDescription": { "text": "Prevent buffer overflows from tainted data" }, "fullDescription": { "text": "Prevent buffer overflows from tainted data [CWE-787-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Prevent buffer overflows from tainted data [CWE-787-e]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-787 Out-of-bounds Write" ], "security-severity": "9.5" } }, { "id": "CWE-787-f", "name": "Avoid buffer write overflow from tainted data", "shortDescription": { "text": "Avoid buffer write overflow from tainted data" }, "fullDescription": { "text": "Avoid buffer write overflow from tainted data [CWE-787-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer write overflow from tainted data [CWE-787-f]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-787 Out-of-bounds Write" ], "security-severity": "9.5" } }, { "id": "CWE-787-a", "name": "Avoid accessing arrays out of bounds", "shortDescription": { "text": "Avoid accessing arrays out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays out of bounds [CWE-787-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays out of bounds [CWE-787-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-787 Out-of-bounds Write" ], "security-severity": "8" } }, { "id": "CWE-787-b", "name": "Avoid accessing arrays and pointers out of bounds", "shortDescription": { "text": "Avoid accessing arrays and pointers out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays and pointers out of bounds [CWE-787-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays and pointers out of bounds [CWE-787-b]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-787 Out-of-bounds Write" ], "security-severity": "8" } }, { "id": "CWE-787-g", "name": "Ensure the output buffer is large enough when using path manipulation functions", "shortDescription": { "text": "Ensure the output buffer is large enough when using path manipulation functions" }, "fullDescription": { "text": "Ensure the output buffer is large enough when using path manipulation functions [CWE-787-g]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Ensure the output buffer is large enough when using path manipulation functions [CWE-787-g]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-787 Out-of-bounds Write" ], "security-severity": "6" } }, { "id": "CWE-326-a", "name": "Do not use weak encryption functions", "shortDescription": { "text": "Do not use weak encryption functions" }, "fullDescription": { "text": "Do not use weak encryption functions [CWE-326-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use weak encryption functions [CWE-326-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-326 Inadequate Encryption Strength" ], "security-severity": "8" } }, { "id": "EXCEPT-01", "name": "Never allow an exception to be thrown from a destructor, deallocation, and swap", "shortDescription": { "text": "Never allow an exception to be thrown from a destructor, deallocation, and swap" }, "fullDescription": { "text": "Never allow an exception to be thrown from a destructor, deallocation, and swap [EXCEPT-01]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Never allow an exception to be thrown from a destructor, deallocation, and swap [EXCEPT-01]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "EXCEPT-02", "name": "Throw by value, catch by reference", "shortDescription": { "text": "Throw by value, catch by reference" }, "fullDescription": { "text": "Throw by value, catch by reference [EXCEPT-02]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Throw by value, catch by reference [EXCEPT-02]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "EXCEPT-03", "name": "Do not throw from within destructor", "shortDescription": { "text": "Do not throw from within destructor" }, "fullDescription": { "text": "Do not throw from within destructor [EXCEPT-03]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not throw from within destructor [EXCEPT-03]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "EXCEPT-11", "name": "The assignment-expression of a throw statement shall not itself cause an exception to be thrown", "shortDescription": { "text": "The assignment-expression of a throw statement shall not itself cause an exception to be thrown" }, "fullDescription": { "text": "The assignment-expression of a throw statement shall not itself cause an exception to be thrown [EXCEPT-11]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The assignment-expression of a throw statement shall not itself cause an exception to be thrown [EXCEPT-11]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "EXCEPT-04", "name": "All exceptions should be rethrown or logged with standard logger", "shortDescription": { "text": "All exceptions should be rethrown or logged with standard logger" }, "fullDescription": { "text": "All exceptions should be rethrown or logged with standard logger [EXCEPT-04]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All exceptions should be rethrown or logged with standard logger [EXCEPT-04]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "EXCEPT-05", "name": "C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.)", "shortDescription": { "text": "C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.)" }, "fullDescription": { "text": "C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.) [EXCEPT-05]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.) [EXCEPT-05]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "EXCEPT-06", "name": "There should be at least one exception handler to catch all otherwise unhandled exceptions", "shortDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions" }, "fullDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [EXCEPT-06]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [EXCEPT-06]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "EXCEPT-07", "name": "An empty throw shall only be used in the compound-statement of a catch handler", "shortDescription": { "text": "An empty throw shall only be used in the compound-statement of a catch handler" }, "fullDescription": { "text": "An empty throw shall only be used in the compound-statement of a catch handler [EXCEPT-07]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An empty throw shall only be used in the compound-statement of a catch handler [EXCEPT-07]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "EXCEPT-08", "name": "Exceptions shall be raised only after start-up and before termination of the program", "shortDescription": { "text": "Exceptions shall be raised only after start-up and before termination of the program" }, "fullDescription": { "text": "Exceptions shall be raised only after start-up and before termination of the program [EXCEPT-08]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Exceptions shall be raised only after start-up and before termination of the program [EXCEPT-08]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "EXCEPT-09", "name": "An exception object should not have pointer type", "shortDescription": { "text": "An exception object should not have pointer type" }, "fullDescription": { "text": "An exception object should not have pointer type [EXCEPT-09]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An exception object should not have pointer type [EXCEPT-09]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "EXCEPT-10", "name": "Control shall not be transferred into a try or catch block using a goto or a switch statement", "shortDescription": { "text": "Control shall not be transferred into a try or catch block using a goto or a switch statement" }, "fullDescription": { "text": "Control shall not be transferred into a try or catch block using a goto or a switch statement [EXCEPT-10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Control shall not be transferred into a try or catch block using a goto or a switch statement [EXCEPT-10]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "EXCEPT-12", "name": "NULL shall not be thrown explicitly", "shortDescription": { "text": "NULL shall not be thrown explicitly" }, "fullDescription": { "text": "NULL shall not be thrown explicitly [EXCEPT-12]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "NULL shall not be thrown explicitly [EXCEPT-12]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "EXCEPT-13", "name": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point", "shortDescription": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" }, "fullDescription": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point [EXCEPT-13]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point [EXCEPT-13]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "EXCEPT-14", "name": "Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)", "shortDescription": { "text": "Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" }, "fullDescription": { "text": "Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s) [EXCEPT-14]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s) [EXCEPT-14]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "EXCEPT-15", "name": "A class type exception shall always be caught by reference", "shortDescription": { "text": "A class type exception shall always be caught by reference" }, "fullDescription": { "text": "A class type exception shall always be caught by reference [EXCEPT-15]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A class type exception shall always be caught by reference [EXCEPT-15]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "EXCEPT-16", "name": "Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases", "shortDescription": { "text": "Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" }, "fullDescription": { "text": "Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases [EXCEPT-16]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases [EXCEPT-16]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "EXCEPT-17", "name": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class", "shortDescription": { "text": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" }, "fullDescription": { "text": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class [EXCEPT-17]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class [EXCEPT-17]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "EXCEPT-18", "name": "Function called in global or namespace scope shall not throw unhandled exceptions", "shortDescription": { "text": "Function called in global or namespace scope shall not throw unhandled exceptions" }, "fullDescription": { "text": "Function called in global or namespace scope shall not throw unhandled exceptions [EXCEPT-18]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Function called in global or namespace scope shall not throw unhandled exceptions [EXCEPT-18]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "EXCEPT-19", "name": "Exception objects must be nothrow copy constructible", "shortDescription": { "text": "Exception objects must be nothrow copy constructible" }, "fullDescription": { "text": "Exception objects must be nothrow copy constructible [EXCEPT-19]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Exception objects must be nothrow copy constructible [EXCEPT-19]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "EXCEPT-20", "name": "An explicitly declared copy constructor for a class that inherits from 'std::exception' should have a non-throwing exception specification", "shortDescription": { "text": "An explicitly declared copy constructor for a class that inherits from 'std::exception' should have a non-throwing exception specification" }, "fullDescription": { "text": "An explicitly declared copy constructor for a class that inherits from 'std::exception' should have a non-throwing exception specification [EXCEPT-20]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An explicitly declared copy constructor for a class that inherits from 'std::exception' should have a non-throwing exception specification [EXCEPT-20]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "EXCEPT-21", "name": "All user-provided move constructors and move assignment operators shall not exit with an exception", "shortDescription": { "text": "All user-provided move constructors and move assignment operators shall not exit with an exception" }, "fullDescription": { "text": "All user-provided move constructors and move assignment operators shall not exit with an exception [EXCEPT-21]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All user-provided move constructors and move assignment operators shall not exit with an exception [EXCEPT-21]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "EXCEPT-22", "name": "Checked exceptions that could be thrown from a function shall be specified in the comment directly before the function declaration", "shortDescription": { "text": "Checked exceptions that could be thrown from a function shall be specified in the comment directly before the function declaration" }, "fullDescription": { "text": "Checked exceptions that could be thrown from a function shall be specified in the comment directly before the function declaration [EXCEPT-22]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Checked exceptions that could be thrown from a function shall be specified in the comment directly before the function declaration [EXCEPT-22]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "EXCEPT-23", "name": "Do not use throw exception specifications", "shortDescription": { "text": "Do not use throw exception specifications" }, "fullDescription": { "text": "Do not use throw exception specifications [EXCEPT-23]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use throw exception specifications [EXCEPT-23]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "EXCEPT-24", "name": "Where multiple handlers are provided in a single 'try-catch' statement or 'function-try-block', any ellipsis (catch-all) handler shall occur last", "shortDescription": { "text": "Where multiple handlers are provided in a single 'try-catch' statement or 'function-try-block', any ellipsis (catch-all) handler shall occur last" }, "fullDescription": { "text": "Where multiple handlers are provided in a single 'try-catch' statement or 'function-try-block', any ellipsis (catch-all) handler shall occur last [EXCEPT-24]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Where multiple handlers are provided in a single 'try-catch' statement or 'function-try-block', any ellipsis (catch-all) handler shall occur last [EXCEPT-24]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "EXCEPT-25", "name": "Empty 'catch' blocks should not be used", "shortDescription": { "text": "Empty 'catch' blocks should not be used" }, "fullDescription": { "text": "Empty 'catch' blocks should not be used [EXCEPT-25]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Empty 'catch' blocks should not be used [EXCEPT-25]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "EXCEPT-26", "name": "Avoid using catch-all exception handlers", "shortDescription": { "text": "Avoid using catch-all exception handlers" }, "fullDescription": { "text": "Avoid using catch-all exception handlers [EXCEPT-26]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid using catch-all exception handlers [EXCEPT-26]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "FORMAT-02", "name": "Place an opening brace '{' on its own line", "shortDescription": { "text": "Place an opening brace '{' on its own line" }, "fullDescription": { "text": "Place an opening brace '{' on its own line [FORMAT-02]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Place an opening brace '{' on its own line [FORMAT-02]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-03", "name": "Place a closing brace '}' on its own line", "shortDescription": { "text": "Place a closing brace '}' on its own line" }, "fullDescription": { "text": "Place a closing brace '}' on its own line [FORMAT-03]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Place a closing brace '}' on its own line [FORMAT-03]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-04", "name": "Physical lines should be less than eighty characters", "shortDescription": { "text": "Physical lines should be less than eighty characters" }, "fullDescription": { "text": "Physical lines should be less than eighty characters [FORMAT-04]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Physical lines should be less than eighty characters [FORMAT-04]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-05", "name": "The length of a macro should not exceed 10 lines", "shortDescription": { "text": "The length of a macro should not exceed 10 lines" }, "fullDescription": { "text": "The length of a macro should not exceed 10 lines [FORMAT-05]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The length of a macro should not exceed 10 lines [FORMAT-05]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-06", "name": "Only one statement shall be allowed per line", "shortDescription": { "text": "Only one statement shall be allowed per line" }, "fullDescription": { "text": "Only one statement shall be allowed per line [FORMAT-06]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Only one statement shall be allowed per line [FORMAT-06]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-07", "name": "There shall be a single ASCII space character preceding assignment operators", "shortDescription": { "text": "There shall be a single ASCII space character preceding assignment operators" }, "fullDescription": { "text": "There shall be a single ASCII space character preceding assignment operators [FORMAT-07]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be a single ASCII space character preceding assignment operators [FORMAT-07]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-08", "name": "There shall be a single ASCII space character following assignment operators", "shortDescription": { "text": "There shall be a single ASCII space character following assignment operators" }, "fullDescription": { "text": "There shall be a single ASCII space character following assignment operators [FORMAT-08]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be a single ASCII space character following assignment operators [FORMAT-08]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-09", "name": "There shall be a single ASCII space character preceding bitwise operators", "shortDescription": { "text": "There shall be a single ASCII space character preceding bitwise operators" }, "fullDescription": { "text": "There shall be a single ASCII space character preceding bitwise operators [FORMAT-09]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be a single ASCII space character preceding bitwise operators [FORMAT-09]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-10", "name": "There shall be a single ASCII space character following bitwise operators", "shortDescription": { "text": "There shall be a single ASCII space character following bitwise operators" }, "fullDescription": { "text": "There shall be a single ASCII space character following bitwise operators [FORMAT-10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be a single ASCII space character following bitwise operators [FORMAT-10]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-11", "name": "There shall be a single ASCII space character preceding and following bitwise operator '&'", "shortDescription": { "text": "There shall be a single ASCII space character preceding and following bitwise operator '&'" }, "fullDescription": { "text": "There shall be a single ASCII space character preceding and following bitwise operator '&' [FORMAT-11]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be a single ASCII space character preceding and following bitwise operator '&' [FORMAT-11]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-12", "name": "There shall be a single ASCII space character between a conditional statement keyword and its opening parenthesis", "shortDescription": { "text": "There shall be a single ASCII space character between a conditional statement keyword and its opening parenthesis" }, "fullDescription": { "text": "There shall be a single ASCII space character between a conditional statement keyword and its opening parenthesis [FORMAT-12]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be a single ASCII space character between a conditional statement keyword and its opening parenthesis [FORMAT-12]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-13", "name": "There shall be a maximum of 1 ASCII space character following the opening parenthesis in conditional statements", "shortDescription": { "text": "There shall be a maximum of 1 ASCII space character following the opening parenthesis in conditional statements" }, "fullDescription": { "text": "There shall be a maximum of 1 ASCII space character following the opening parenthesis in conditional statements [FORMAT-13]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be a maximum of 1 ASCII space character following the opening parenthesis in conditional statements [FORMAT-13]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-14", "name": "There shall be a single ASCII space character preceding ternary conditional operator", "shortDescription": { "text": "There shall be a single ASCII space character preceding ternary conditional operator" }, "fullDescription": { "text": "There shall be a single ASCII space character preceding ternary conditional operator [FORMAT-14]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be a single ASCII space character preceding ternary conditional operator [FORMAT-14]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-15", "name": "There shall be a single ASCII space character following ternary conditional operator", "shortDescription": { "text": "There shall be a single ASCII space character following ternary conditional operator" }, "fullDescription": { "text": "There shall be a single ASCII space character following ternary conditional operator [FORMAT-15]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be a single ASCII space character following ternary conditional operator [FORMAT-15]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-16", "name": "There shall be a single ASCII space character preceding and following relational and equality operators", "shortDescription": { "text": "There shall be a single ASCII space character preceding and following relational and equality operators" }, "fullDescription": { "text": "There shall be a single ASCII space character preceding and following relational and equality operators [FORMAT-16]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be a single ASCII space character preceding and following relational and equality operators [FORMAT-16]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-17", "name": "There shall be no white space following '.' or '->' operator", "shortDescription": { "text": "There shall be no white space following '.' or '->' operator" }, "fullDescription": { "text": "There shall be no white space following '.' or '->' operator [FORMAT-17]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no white space following '.' or '->' operator [FORMAT-17]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-18", "name": "There shall be no white space preceding '.' or '->' operator", "shortDescription": { "text": "There shall be no white space preceding '.' or '->' operator" }, "fullDescription": { "text": "There shall be no white space preceding '.' or '->' operator [FORMAT-18]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no white space preceding '.' or '->' operator [FORMAT-18]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-19", "name": "There shall be a single ASCII space character following all commas", "shortDescription": { "text": "There shall be a single ASCII space character following all commas" }, "fullDescription": { "text": "There shall be a single ASCII space character following all commas [FORMAT-19]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be a single ASCII space character following all commas [FORMAT-19]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-20", "name": "There shall be a single ASCII space character following all semicolons", "shortDescription": { "text": "There shall be a single ASCII space character following all semicolons" }, "fullDescription": { "text": "There shall be a single ASCII space character following all semicolons [FORMAT-20]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be a single ASCII space character following all semicolons [FORMAT-20]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-21", "name": "There should be no space between a unary operator \"!\" or \"~\" and its operand", "shortDescription": { "text": "There should be no space between a unary operator \"!\" or \"~\" and its operand" }, "fullDescription": { "text": "There should be no space between a unary operator \"!\" or \"~\" and its operand [FORMAT-21]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There should be no space between a unary operator \"!\" or \"~\" and its operand [FORMAT-21]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-22", "name": "There should be no space between a increment\/decrement operator (++\/--) and its operand", "shortDescription": { "text": "There should be no space between a increment\/decrement operator (++\/--) and its operand" }, "fullDescription": { "text": "There should be no space between a increment\/decrement operator (++\/--) and its operand [FORMAT-22]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There should be no space between a increment\/decrement operator (++\/--) and its operand [FORMAT-22]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-23", "name": "There shall be no white spaces between the 'return' statement or the 'sizeof' operator and the following opening parenthesis", "shortDescription": { "text": "There shall be no white spaces between the 'return' statement or the 'sizeof' operator and the following opening parenthesis" }, "fullDescription": { "text": "There shall be no white spaces between the 'return' statement or the 'sizeof' operator and the following opening parenthesis [FORMAT-23]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no white spaces between the 'return' statement or the 'sizeof' operator and the following opening parenthesis [FORMAT-23]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-24", "name": "There shall be no spaces after the opening '(' and before closing ')' parenthesis that enclose the operand of the 'return' statement or the 'sizeof' operator", "shortDescription": { "text": "There shall be no spaces after the opening '(' and before closing ')' parenthesis that enclose the operand of the 'return' statement or the 'sizeof' operator" }, "fullDescription": { "text": "There shall be no spaces after the opening '(' and before closing ')' parenthesis that enclose the operand of the 'return' statement or the 'sizeof' operator [FORMAT-24]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no spaces after the opening '(' and before closing ')' parenthesis that enclose the operand of the 'return' statement or the 'sizeof' operator [FORMAT-24]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-25", "name": "The operand of the 'sizeof' operator should be enclosed in parentheses", "shortDescription": { "text": "The operand of the 'sizeof' operator should be enclosed in parentheses" }, "fullDescription": { "text": "The operand of the 'sizeof' operator should be enclosed in parentheses [FORMAT-25]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The operand of the 'sizeof' operator should be enclosed in parentheses [FORMAT-25]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-25_b", "name": "Parenthesis shall be used with the \"return\" statement", "shortDescription": { "text": "Parenthesis shall be used with the \"return\" statement" }, "fullDescription": { "text": "Parenthesis shall be used with the \"return\" statement [FORMAT-25_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Parenthesis shall be used with the \"return\" statement [FORMAT-25_b]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-26", "name": "There shall be a single ASCII space character preceding and following logical operators", "shortDescription": { "text": "There shall be a single ASCII space character preceding and following logical operators" }, "fullDescription": { "text": "There shall be a single ASCII space character preceding and following logical operators [FORMAT-26]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be a single ASCII space character preceding and following logical operators [FORMAT-26]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-27", "name": "Line should be indented by a multiple of four spaces", "shortDescription": { "text": "Line should be indented by a multiple of four spaces" }, "fullDescription": { "text": "Line should be indented by a multiple of four spaces [FORMAT-27]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Line should be indented by a multiple of four spaces [FORMAT-27]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-28", "name": "In a function definition, the return type of the function should be written on a separate line directly above the function name", "shortDescription": { "text": "In a function definition, the return type of the function should be written on a separate line directly above the function name" }, "fullDescription": { "text": "In a function definition, the return type of the function should be written on a separate line directly above the function name [FORMAT-28]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "In a function definition, the return type of the function should be written on a separate line directly above the function name [FORMAT-28]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-29", "name": "Multiple variable declarations shall not be allowed on the same line", "shortDescription": { "text": "Multiple variable declarations shall not be allowed on the same line" }, "fullDescription": { "text": "Multiple variable declarations shall not be allowed on the same line [FORMAT-29]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Multiple variable declarations shall not be allowed on the same line [FORMAT-29]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-30", "name": "Place left parenthesis directly after function name", "shortDescription": { "text": "Place left parenthesis directly after function name" }, "fullDescription": { "text": "Place left parenthesis directly after function name [FORMAT-30]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Place left parenthesis directly after function name [FORMAT-30]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-31", "name": "Separate logical tests in conditional expressions", "shortDescription": { "text": "Separate logical tests in conditional expressions" }, "fullDescription": { "text": "Separate logical tests in conditional expressions [FORMAT-31]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Separate logical tests in conditional expressions [FORMAT-31]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-33", "name": "Each variable should be declared in a separate declaration statement", "shortDescription": { "text": "Each variable should be declared in a separate declaration statement" }, "fullDescription": { "text": "Each variable should be declared in a separate declaration statement [FORMAT-33]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each variable should be declared in a separate declaration statement [FORMAT-33]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-34", "name": "Braces \"{}\" which enclose a block should be placed in the same column", "shortDescription": { "text": "Braces \"{}\" which enclose a block should be placed in the same column" }, "fullDescription": { "text": "Braces \"{}\" which enclose a block should be placed in the same column [FORMAT-34]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Braces \"{}\" which enclose a block should be placed in the same column [FORMAT-34]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-35", "name": "When declaring functions, the leading parenthesis and the first argument are to be written on the same line as the function name", "shortDescription": { "text": "When declaring functions, the leading parenthesis and the first argument are to be written on the same line as the function name" }, "fullDescription": { "text": "When declaring functions, the leading parenthesis and the first argument are to be written on the same line as the function name [FORMAT-35]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "When declaring functions, the leading parenthesis and the first argument are to be written on the same line as the function name [FORMAT-35]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-36", "name": "Sibling statement lines should be indented to the same level", "shortDescription": { "text": "Sibling statement lines should be indented to the same level" }, "fullDescription": { "text": "Sibling statement lines should be indented to the same level [FORMAT-36]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Sibling statement lines should be indented to the same level [FORMAT-36]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-37", "name": "First line in control statement body should be indented more than control statement keyword", "shortDescription": { "text": "First line in control statement body should be indented more than control statement keyword" }, "fullDescription": { "text": "First line in control statement body should be indented more than control statement keyword [FORMAT-37]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "First line in control statement body should be indented more than control statement keyword [FORMAT-37]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-38", "name": "When declaring functions with more than 2 parameters, the leading parenthesis and the first argument are to be written on the same line as the function name, each additional argument will be written on a separate line", "shortDescription": { "text": "When declaring functions with more than 2 parameters, the leading parenthesis and the first argument are to be written on the same line as the function name, each additional argument will be written on a separate line" }, "fullDescription": { "text": "When declaring functions with more than 2 parameters, the leading parenthesis and the first argument are to be written on the same line as the function name, each additional argument will be written on a separate line [FORMAT-38]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "When declaring functions with more than 2 parameters, the leading parenthesis and the first argument are to be written on the same line as the function name, each additional argument will be written on a separate line [FORMAT-38]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-42", "name": "Braces (\"{}\") which enclose a block will have nothing else on the line except comments", "shortDescription": { "text": "Braces (\"{}\") which enclose a block will have nothing else on the line except comments" }, "fullDescription": { "text": "Braces (\"{}\") which enclose a block will have nothing else on the line except comments [FORMAT-42]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Braces (\"{}\") which enclose a block will have nothing else on the line except comments [FORMAT-42]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-43", "name": "Braces (\"{}\") which enclose a block will be placed in the same column", "shortDescription": { "text": "Braces (\"{}\") which enclose a block will be placed in the same column" }, "fullDescription": { "text": "Braces (\"{}\") which enclose a block will be placed in the same column [FORMAT-43]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Braces (\"{}\") which enclose a block will be placed in the same column [FORMAT-43]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-44", "name": "Braces (\"{}\") which enclose a block will not have an empty line after \"{\" nor before \"}\"", "shortDescription": { "text": "Braces (\"{}\") which enclose a block will not have an empty line after \"{\" nor before \"}\"" }, "fullDescription": { "text": "Braces (\"{}\") which enclose a block will not have an empty line after \"{\" nor before \"}\" [FORMAT-44]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Braces (\"{}\") which enclose a block will not have an empty line after \"{\" nor before \"}\" [FORMAT-44]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-45", "name": "There should be no space between a unary operator \"&\", \"*\", \"+\", \"-\" and its operand", "shortDescription": { "text": "There should be no space between a unary operator \"&\", \"*\", \"+\", \"-\" and its operand" }, "fullDescription": { "text": "There should be no space between a unary operator \"&\", \"*\", \"+\", \"-\" and its operand [FORMAT-45]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There should be no space between a unary operator \"&\", \"*\", \"+\", \"-\" and its operand [FORMAT-45]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-46", "name": "There should be no space between an increment\/decrement operator (++\/--) and its operand in macro definition", "shortDescription": { "text": "There should be no space between an increment\/decrement operator (++\/--) and its operand in macro definition" }, "fullDescription": { "text": "There should be no space between an increment\/decrement operator (++\/--) and its operand in macro definition [FORMAT-46]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There should be no space between an increment\/decrement operator (++\/--) and its operand in macro definition [FORMAT-46]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-47_a", "name": "Place CV-qualifiers on the right hand side of the type they apply to", "shortDescription": { "text": "Place CV-qualifiers on the right hand side of the type they apply to" }, "fullDescription": { "text": "Place CV-qualifiers on the right hand side of the type they apply to [FORMAT-47_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Place CV-qualifiers on the right hand side of the type they apply to [FORMAT-47_a]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-47_b", "name": "CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name", "shortDescription": { "text": "CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name" }, "fullDescription": { "text": "CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name [FORMAT-47_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name [FORMAT-47_b]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-48", "name": "Parameter names in function declarations should not be enclosed in parentheses", "shortDescription": { "text": "Parameter names in function declarations should not be enclosed in parentheses" }, "fullDescription": { "text": "Parameter names in function declarations should not be enclosed in parentheses [FORMAT-48]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Parameter names in function declarations should not be enclosed in parentheses [FORMAT-48]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-49", "name": "Local variable names in variable declarations should not be enclosed in parentheses", "shortDescription": { "text": "Local variable names in variable declarations should not be enclosed in parentheses" }, "fullDescription": { "text": "Local variable names in variable declarations should not be enclosed in parentheses [FORMAT-49]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Local variable names in variable declarations should not be enclosed in parentheses [FORMAT-49]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-32", "name": "The dereference operator '*' and the address-of operator '&' should be directly connected with the type", "shortDescription": { "text": "The dereference operator '*' and the address-of operator '&' should be directly connected with the type" }, "fullDescription": { "text": "The dereference operator '*' and the address-of operator '&' should be directly connected with the type [FORMAT-32]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The dereference operator '*' and the address-of operator '&' should be directly connected with the type [FORMAT-32]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-39", "name": "Sort #include directives in alphabetical order", "shortDescription": { "text": "Sort #include directives in alphabetical order" }, "fullDescription": { "text": "Sort #include directives in alphabetical order [FORMAT-39]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Sort #include directives in alphabetical order [FORMAT-39]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-01", "name": "Tabs that do not use ASCII spaces shall not be used", "shortDescription": { "text": "Tabs that do not use ASCII spaces shall not be used" }, "fullDescription": { "text": "Tabs that do not use ASCII spaces shall not be used [FORMAT-01]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Tabs that do not use ASCII spaces shall not be used [FORMAT-01]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-40", "name": "White spaces after the opening square bracket '[' and before its closing square bracket ']' shall be used in consistent way", "shortDescription": { "text": "White spaces after the opening square bracket '[' and before its closing square bracket ']' shall be used in consistent way" }, "fullDescription": { "text": "White spaces after the opening square bracket '[' and before its closing square bracket ']' shall be used in consistent way [FORMAT-40]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "White spaces after the opening square bracket '[' and before its closing square bracket ']' shall be used in consistent way [FORMAT-40]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-41", "name": "There shall be no space between '[' opening square bracket and preceding token", "shortDescription": { "text": "There shall be no space between '[' opening square bracket and preceding token" }, "fullDescription": { "text": "There shall be no space between '[' opening square bracket and preceding token [FORMAT-41]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "There shall be no space between '[' opening square bracket and preceding token [FORMAT-41]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "GLOBAL-COMPATDECLS", "name": "All declarations of an object or function shall have compatible types", "shortDescription": { "text": "All declarations of an object or function shall have compatible types" }, "fullDescription": { "text": "All declarations of an object or function shall have compatible types [GLOBAL-COMPATDECLS]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All declarations of an object or function shall have compatible types [GLOBAL-COMPATDECLS]" }, "properties": { "tags": [ "Global Static Analysis" ] } }, { "id": "GLOBAL-CONDMUTEXVAR", "name": "Do not use more than one mutex for concurrent waiting operations on a condition variable", "shortDescription": { "text": "Do not use more than one mutex for concurrent waiting operations on a condition variable" }, "fullDescription": { "text": "Do not use more than one mutex for concurrent waiting operations on a condition variable [GLOBAL-CONDMUTEXVAR]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use more than one mutex for concurrent waiting operations on a condition variable [GLOBAL-CONDMUTEXVAR]" }, "properties": { "tags": [ "Global Static Analysis" ] } }, { "id": "GLOBAL-EXCSPECDECL", "name": "If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids", "shortDescription": { "text": "If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" }, "fullDescription": { "text": "If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids [GLOBAL-EXCSPECDECL]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids [GLOBAL-EXCSPECDECL]" }, "properties": { "tags": [ "Global Static Analysis" ] } }, { "id": "GLOBAL-ONEDEFINLINE", "name": "An inline function that is used in multiple translation units shall be defined in one and only one file", "shortDescription": { "text": "An inline function that is used in multiple translation units shall be defined in one and only one file" }, "fullDescription": { "text": "An inline function that is used in multiple translation units shall be defined in one and only one file [GLOBAL-ONEDEFINLINE]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An inline function that is used in multiple translation units shall be defined in one and only one file [GLOBAL-ONEDEFINLINE]" }, "properties": { "tags": [ "Global Static Analysis" ] } }, { "id": "GLOBAL-ONEDEFRULE", "name": "The One Definition Rule shall not be violated", "shortDescription": { "text": "The One Definition Rule shall not be violated" }, "fullDescription": { "text": "The One Definition Rule shall not be violated [GLOBAL-ONEDEFRULE]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The One Definition Rule shall not be violated [GLOBAL-ONEDEFRULE]" }, "properties": { "tags": [ "Global Static Analysis" ] } }, { "id": "GLOBAL-ONEDEFTEMPL", "name": "A function template that is used in multiple translation units shall be defined in one and only one file", "shortDescription": { "text": "A function template that is used in multiple translation units shall be defined in one and only one file" }, "fullDescription": { "text": "A function template that is used in multiple translation units shall be defined in one and only one file [GLOBAL-ONEDEFTEMPL]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function template that is used in multiple translation units shall be defined in one and only one file [GLOBAL-ONEDEFTEMPL]" }, "properties": { "tags": [ "Global Static Analysis" ] } }, { "id": "GLOBAL-ONEDEFTYPE", "name": "A type that is used in multiple translation units shall be defined in one and only one file", "shortDescription": { "text": "A type that is used in multiple translation units shall be defined in one and only one file" }, "fullDescription": { "text": "A type that is used in multiple translation units shall be defined in one and only one file [GLOBAL-ONEDEFTYPE]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A type that is used in multiple translation units shall be defined in one and only one file [GLOBAL-ONEDEFTYPE]" }, "properties": { "tags": [ "Global Static Analysis" ] } }, { "id": "GLOBAL-ONEEXTERNDEF", "name": "An identifier with external linkage shall have no more then one external definition", "shortDescription": { "text": "An identifier with external linkage shall have no more then one external definition" }, "fullDescription": { "text": "An identifier with external linkage shall have no more then one external definition [GLOBAL-ONEEXTERNDEF]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An identifier with external linkage shall have no more then one external definition [GLOBAL-ONEEXTERNDEF]" }, "properties": { "tags": [ "Global Static Analysis" ] } }, { "id": "GLOBAL-ONEFILEDECL", "name": "A type, object or function that is used in multiple translation units shall be declared in one and only one file", "shortDescription": { "text": "A type, object or function that is used in multiple translation units shall be declared in one and only one file" }, "fullDescription": { "text": "A type, object or function that is used in multiple translation units shall be declared in one and only one file [GLOBAL-ONEFILEDECL]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A type, object or function that is used in multiple translation units shall be declared in one and only one file [GLOBAL-ONEFILEDECL]" }, "properties": { "tags": [ "Global Static Analysis" ] } }, { "id": "GLOBAL-ONEUSEVAR", "name": "A project shall not contain non-volatile POD variables having only one use", "shortDescription": { "text": "A project shall not contain non-volatile POD variables having only one use" }, "fullDescription": { "text": "A project shall not contain non-volatile POD variables having only one use [GLOBAL-ONEUSEVAR]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A project shall not contain non-volatile POD variables having only one use [GLOBAL-ONEUSEVAR]" }, "properties": { "tags": [ "Global Static Analysis" ] } }, { "id": "GLOBAL-REUSEDQUALGLOBVAR", "name": "The identifier name of a non-member object with static storage duration shall not be reused within a namespace", "shortDescription": { "text": "The identifier name of a non-member object with static storage duration shall not be reused within a namespace" }, "fullDescription": { "text": "The identifier name of a non-member object with static storage duration shall not be reused within a namespace [GLOBAL-REUSEDQUALGLOBVAR]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The identifier name of a non-member object with static storage duration shall not be reused within a namespace [GLOBAL-REUSEDQUALGLOBVAR]" }, "properties": { "tags": [ "Global Static Analysis" ] } }, { "id": "GLOBAL-REUSEDQUALSTATFUN", "name": "The identifier name of a non-member static function shall not be reused within a namespace", "shortDescription": { "text": "The identifier name of a non-member static function shall not be reused within a namespace" }, "fullDescription": { "text": "The identifier name of a non-member static function shall not be reused within a namespace [GLOBAL-REUSEDQUALSTATFUN]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The identifier name of a non-member static function shall not be reused within a namespace [GLOBAL-REUSEDQUALSTATFUN]" }, "properties": { "tags": [ "Global Static Analysis" ] } }, { "id": "GLOBAL-TEMPLNOINST", "name": "All class templates, function templates, class template member functions and class template static members shall be instantiated at least one", "shortDescription": { "text": "All class templates, function templates, class template member functions and class template static members shall be instantiated at least one" }, "fullDescription": { "text": "All class templates, function templates, class template member functions and class template static members shall be instantiated at least one [GLOBAL-TEMPLNOINST]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All class templates, function templates, class template member functions and class template static members shall be instantiated at least one [GLOBAL-TEMPLNOINST]" }, "properties": { "tags": [ "Global Static Analysis" ] } }, { "id": "GLOBAL-UNIQUETYPE", "name": "A class, union or enum name (including qualification, if any) shall be a unique identifier", "shortDescription": { "text": "A class, union or enum name (including qualification, if any) shall be a unique identifier" }, "fullDescription": { "text": "A class, union or enum name (including qualification, if any) shall be a unique identifier [GLOBAL-UNIQUETYPE]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A class, union or enum name (including qualification, if any) shall be a unique identifier [GLOBAL-UNIQUETYPE]" }, "properties": { "tags": [ "Global Static Analysis" ] } }, { "id": "GLOBAL-UNIQUETYPEDEF", "name": "A typedef name (including qualification, if any) shall be a unique identifier", "shortDescription": { "text": "A typedef name (including qualification, if any) shall be a unique identifier" }, "fullDescription": { "text": "A typedef name (including qualification, if any) shall be a unique identifier [GLOBAL-UNIQUETYPEDEF]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A typedef name (including qualification, if any) shall be a unique identifier [GLOBAL-UNIQUETYPEDEF]" }, "properties": { "tags": [ "Global Static Analysis" ] } }, { "id": "GLOBAL-UNUSEDFUNC", "name": "Every defined function with external linkage shall be used at least once", "shortDescription": { "text": "Every defined function with external linkage shall be used at least once" }, "fullDescription": { "text": "Every defined function with external linkage shall be used at least once [GLOBAL-UNUSEDFUNC]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Every defined function with external linkage shall be used at least once [GLOBAL-UNUSEDFUNC]" }, "properties": { "tags": [ "Global Static Analysis" ] } }, { "id": "GLOBAL-UNUSEDTYPE", "name": "A project shall not contain unused type declarations", "shortDescription": { "text": "A project shall not contain unused type declarations" }, "fullDescription": { "text": "A project shall not contain unused type declarations [GLOBAL-UNUSEDTYPE]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A project shall not contain unused type declarations [GLOBAL-UNUSEDTYPE]" }, "properties": { "tags": [ "Global Static Analysis" ] } }, { "id": "GLOBAL-UNUSEDVIRTPARAM", "name": "There shall be no unused parameters (named or unnamed) in the set of parameters for a virtual function and all the functions that override it", "shortDescription": { "text": "There shall be no unused parameters (named or unnamed) in the set of parameters for a virtual function and all the functions that override it" }, "fullDescription": { "text": "There shall be no unused parameters (named or unnamed) in the set of parameters for a virtual function and all the functions that override it [GLOBAL-UNUSEDVIRTPARAM]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unused parameters (named or unnamed) in the set of parameters for a virtual function and all the functions that override it [GLOBAL-UNUSEDVIRTPARAM]" }, "properties": { "tags": [ "Global Static Analysis" ] } }, { "id": "GLOBAL-VIRTBASECLASS", "name": "A base class shall only be declared virtual if it is used in a diamond hierarchy", "shortDescription": { "text": "A base class shall only be declared virtual if it is used in a diamond hierarchy" }, "fullDescription": { "text": "A base class shall only be declared virtual if it is used in a diamond hierarchy [GLOBAL-VIRTBASECLASS]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A base class shall only be declared virtual if it is used in a diamond hierarchy [GLOBAL-VIRTBASECLASS]" }, "properties": { "tags": [ "Global Static Analysis" ] } }, { "id": "GLOBAL-AVOIDEXTERN", "name": "Functions and objects should not be defined with external linkage if they are referenced in only one translation unit", "shortDescription": { "text": "Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" }, "fullDescription": { "text": "Functions and objects should not be defined with external linkage if they are referenced in only one translation unit [GLOBAL-AVOIDEXTERN]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Functions and objects should not be defined with external linkage if they are referenced in only one translation unit [GLOBAL-AVOIDEXTERN]" }, "properties": { "tags": [ "Global Static Analysis" ] } }, { "id": "HICPP-7_2_2-a", "name": "Initialize all, only the first, or none of the enumerators in an enumeration", "shortDescription": { "text": "Initialize all, only the first, or none of the enumerators in an enumeration" }, "fullDescription": { "text": "Initialize all, only the first, or none of the enumerators in an enumeration [HICPP-7_2_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Initialize all, only the first, or none of the enumerators in an enumeration [HICPP-7_2_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 7.2.2 Initialize none, the first only or all enumerators in an enumeration" ] } }, { "id": "HICPP-2_1_1-a", "name": "Tabs that do not use ASCII spaces shall not be used", "shortDescription": { "text": "Tabs that do not use ASCII spaces shall not be used" }, "fullDescription": { "text": "Tabs that do not use ASCII spaces shall not be used [HICPP-2_1_1-a]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Tabs that do not use ASCII spaces shall not be used [HICPP-2_1_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 2.1.1 Do not use tab characters in source files" ] } }, { "id": "HICPP-2_5_3-a", "name": "Prefer 'nullptr' over 'NULL' or '0'(zero)", "shortDescription": { "text": "Prefer 'nullptr' over 'NULL' or '0'(zero)" }, "fullDescription": { "text": "Prefer 'nullptr' over 'NULL' or '0'(zero) [HICPP-2_5_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer 'nullptr' over 'NULL' or '0'(zero) [HICPP-2_5_3-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 2.5.3 Use nullptr for the null pointer constant" ] } }, { "id": "HICPP-15_1_1-a", "name": "Only use instances of std::exception for exceptions", "shortDescription": { "text": "Only use instances of std::exception for exceptions" }, "fullDescription": { "text": "Only use instances of std::exception for exceptions [HICPP-15_1_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Only use instances of std::exception for exceptions [HICPP-15_1_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 15.1.1 Only use instances of std::exception for exceptions" ] } }, { "id": "HICPP-15_1_1-b", "name": "Always throw the created std::exception object", "shortDescription": { "text": "Always throw the created std::exception object" }, "fullDescription": { "text": "Always throw the created std::exception object [HICPP-15_1_1-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Always throw the created std::exception object [HICPP-15_1_1-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 15.1.1 Only use instances of std::exception for exceptions" ] } }, { "id": "HICPP-2_5_2-a", "name": "Octal constants (other than zero) shall not be used", "shortDescription": { "text": "Octal constants (other than zero) shall not be used" }, "fullDescription": { "text": "Octal constants (other than zero) shall not be used [HICPP-2_5_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Octal constants (other than zero) shall not be used [HICPP-2_5_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 2.5.2 Do not use octal constants (other than zero)" ] } }, { "id": "HICPP-2_5_1-a", "name": "String literals with different encoding prefixes shall not be concatenated", "shortDescription": { "text": "String literals with different encoding prefixes shall not be concatenated" }, "fullDescription": { "text": "String literals with different encoding prefixes shall not be concatenated [HICPP-2_5_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "String literals with different encoding prefixes shall not be concatenated [HICPP-2_5_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 2.5.1 Do not concatenate strings with different encoding prefixes" ] } }, { "id": "HICPP-12_4_4-a", "name": "List members in an initialization list in the order in which they are declared", "shortDescription": { "text": "List members in an initialization list in the order in which they are declared" }, "fullDescription": { "text": "List members in an initialization list in the order in which they are declared [HICPP-12_4_4-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "List members in an initialization list in the order in which they are declared [HICPP-12_4_4-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 12.4.4 Write members in an initialization list in the order in which they are declared" ] } }, { "id": "HICPP-7_2_1-a", "name": "Use an explicit enumeration base and ensure that it is large enough to store all enumerators", "shortDescription": { "text": "Use an explicit enumeration base and ensure that it is large enough to store all enumerators" }, "fullDescription": { "text": "Use an explicit enumeration base and ensure that it is large enough to store all enumerators [HICPP-7_2_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use an explicit enumeration base and ensure that it is large enough to store all enumerators [HICPP-7_2_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 7.2.1 Use an explicit enumeration base and ensure that it is large enough to store all enumerators" ] } }, { "id": "HICPP-12_4_5-a", "name": "Use delegating constructors to reduce code duplication", "shortDescription": { "text": "Use delegating constructors to reduce code duplication" }, "fullDescription": { "text": "Use delegating constructors to reduce code duplication [HICPP-12_4_5-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use delegating constructors to reduce code duplication [HICPP-12_4_5-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 12.4.5 Use delegating constructors to reduce code duplication" ] } }, { "id": "HICPP-3_3_1-a", "name": "Do not use variables with static storage duration", "shortDescription": { "text": "Do not use variables with static storage duration" }, "fullDescription": { "text": "Do not use variables with static storage duration [HICPP-3_3_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use variables with static storage duration [HICPP-3_3_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 3.3.1 Do not use variables with static storage duration" ] } }, { "id": "HICPP-17_5_1-a", "name": "Follow remove-like algorithms by erase to remove elements from a container", "shortDescription": { "text": "Follow remove-like algorithms by erase to remove elements from a container" }, "fullDescription": { "text": "Follow remove-like algorithms by erase to remove elements from a container [HICPP-17_5_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Follow remove-like algorithms by erase to remove elements from a container [HICPP-17_5_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 17.5.1 Do not ignore the result of std::remove, std::remove if or std::unique" ] } }, { "id": "HICPP-13_2_5-a", "name": "The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator", "shortDescription": { "text": "The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" }, "fullDescription": { "text": "The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator [HICPP-13_2_5-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator [HICPP-13_2_5-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 13.2.5 Implement a minimal set of operators and use them to implement all other related operators" ] } }, { "id": "HICPP-4_1_1-a", "name": "An object of array type with a specified size should not decay to a pointer when it is passed as a function argument", "shortDescription": { "text": "An object of array type with a specified size should not decay to a pointer when it is passed as a function argument" }, "fullDescription": { "text": "An object of array type with a specified size should not decay to a pointer when it is passed as a function argument [HICPP-4_1_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An object of array type with a specified size should not decay to a pointer when it is passed as a function argument [HICPP-4_1_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 4.1.1 Ensure that a function argument does not undergo an array-to-pointer conversion" ] } }, { "id": "HICPP-8_4_2-a", "name": "The initializer for an aggregate or union shall be enclosed in braces", "shortDescription": { "text": "The initializer for an aggregate or union shall be enclosed in braces" }, "fullDescription": { "text": "The initializer for an aggregate or union shall be enclosed in braces [HICPP-8_4_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The initializer for an aggregate or union shall be enclosed in braces [HICPP-8_4_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 8.4.2 Ensure that a braced aggregate initializer matches the layout of the aggregate object" ] } }, { "id": "HICPP-8_4_1-a", "name": "Avoid use before initialization", "shortDescription": { "text": "Avoid use before initialization" }, "fullDescription": { "text": "Avoid use before initialization [HICPP-8_4_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid use before initialization [HICPP-8_4_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 8.4.1 Do not access an invalid object or an object with indeterminate value" ] } }, { "id": "HICPP-8_4_1-b", "name": "Do not use resources that have been freed", "shortDescription": { "text": "Do not use resources that have been freed" }, "fullDescription": { "text": "Do not use resources that have been freed [HICPP-8_4_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use resources that have been freed [HICPP-8_4_1-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 8.4.1 Do not access an invalid object or an object with indeterminate value" ] } }, { "id": "HICPP-8_4_1-c", "name": "All automatic variables shall have been assigned a value before being used", "shortDescription": { "text": "All automatic variables shall have been assigned a value before being used" }, "fullDescription": { "text": "All automatic variables shall have been assigned a value before being used [HICPP-8_4_1-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All automatic variables shall have been assigned a value before being used [HICPP-8_4_1-c]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 8.4.1 Do not access an invalid object or an object with indeterminate value" ] } }, { "id": "HICPP-13_1_2-a", "name": "Avoid Overloading on Forwarding References", "shortDescription": { "text": "Avoid Overloading on Forwarding References" }, "fullDescription": { "text": "Avoid Overloading on Forwarding References [HICPP-13_1_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid Overloading on Forwarding References [HICPP-13_1_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 13.1.2 If a member of a set of callable functions includes a universal reference parameter, ensure that one appears in the same position for all other members" ] } }, { "id": "HICPP-18_3_1-a", "name": "Avoid double locking", "shortDescription": { "text": "Avoid double locking" }, "fullDescription": { "text": "Avoid double locking [HICPP-18_3_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid double locking [HICPP-18_3_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 18.3.1 Within the scope of a lock, ensure that no static path results in a lock of the same mutex" ] } }, { "id": "HICPP-18_3_2-a", "name": "Do not acquire locks in different order", "shortDescription": { "text": "Do not acquire locks in different order" }, "fullDescription": { "text": "Do not acquire locks in different order [HICPP-18_3_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not acquire locks in different order [HICPP-18_3_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 18.3.2 Ensure that order of nesting of locks in a project forms a DAG" ] } }, { "id": "HICPP-18_3_5-a", "name": "Do not access the members of std::mutex directly", "shortDescription": { "text": "Do not access the members of std::mutex directly" }, "fullDescription": { "text": "Do not access the members of std::mutex directly [HICPP-18_3_5-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not access the members of std::mutex directly [HICPP-18_3_5-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 18.3.5 Do not access the members of std::mutex directly" ] } }, { "id": "HICPP-18_3_6-a", "name": "Do not use relaxed atomics", "shortDescription": { "text": "Do not use relaxed atomics" }, "fullDescription": { "text": "Do not use relaxed atomics [HICPP-18_3_6-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use relaxed atomics [HICPP-18_3_6-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 18.3.6 Do not use relaxed atomics" ] } }, { "id": "HICPP-5_3_3-c", "name": "Properly deallocate dynamically allocated resources", "shortDescription": { "text": "Properly deallocate dynamically allocated resources" }, "fullDescription": { "text": "Properly deallocate dynamically allocated resources [HICPP-5_3_3-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly deallocate dynamically allocated resources [HICPP-5_3_3-c]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.3.3 Ensure that the form of delete matches the form of new used to allocate the memory" ] } }, { "id": "HICPP-5_3_3-a", "name": "Never provide brackets ([]) for delete when deallocating non-arrays", "shortDescription": { "text": "Never provide brackets ([]) for delete when deallocating non-arrays" }, "fullDescription": { "text": "Never provide brackets ([]) for delete when deallocating non-arrays [HICPP-5_3_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Never provide brackets ([]) for delete when deallocating non-arrays [HICPP-5_3_3-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.3.3 Ensure that the form of delete matches the form of new used to allocate the memory" ] } }, { "id": "HICPP-5_3_3-b", "name": "Always provide empty brackets ([]) for delete when deallocating arrays", "shortDescription": { "text": "Always provide empty brackets ([]) for delete when deallocating arrays" }, "fullDescription": { "text": "Always provide empty brackets ([]) for delete when deallocating arrays [HICPP-5_3_3-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Always provide empty brackets ([]) for delete when deallocating arrays [HICPP-5_3_3-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.3.3 Ensure that the form of delete matches the form of new used to allocate the memory" ] } }, { "id": "HICPP-18_3_3-a", "name": "Do not use std::recursive_mutex", "shortDescription": { "text": "Do not use std::recursive_mutex" }, "fullDescription": { "text": "Do not use std::recursive_mutex [HICPP-18_3_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use std::recursive_mutex [HICPP-18_3_3-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 18.3.3 Do not use std::recursive mutex" ] } }, { "id": "HICPP-5_7_2-a", "name": "A potentially virtual pointer to member function shall only be compared with nullptr", "shortDescription": { "text": "A potentially virtual pointer to member function shall only be compared with nullptr" }, "fullDescription": { "text": "A potentially virtual pointer to member function shall only be compared with nullptr [HICPP-5_7_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A potentially virtual pointer to member function shall only be compared with nullptr [HICPP-5_7_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.7.2 Ensure that a pointer to member that is a virtual function is only compared (==) with nullptr" ] } }, { "id": "HICPP-13_1_1-a", "name": "Member functions declared in derived class should not hide functions declared in base classes", "shortDescription": { "text": "Member functions declared in derived class should not hide functions declared in base classes" }, "fullDescription": { "text": "Member functions declared in derived class should not hide functions declared in base classes [HICPP-13_1_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Member functions declared in derived class should not hide functions declared in base classes [HICPP-13_1_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 13.1.1 Ensure that all overloads of a function are visible from where it is called" ] } }, { "id": "HICPP-18_3_4-a", "name": "Only use std::unique lock when std::lock guard cannot be used", "shortDescription": { "text": "Only use std::unique lock when std::lock guard cannot be used" }, "fullDescription": { "text": "Only use std::unique lock when std::lock guard cannot be used [HICPP-18_3_4-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Only use std::unique lock when std::lock guard cannot be used [HICPP-18_3_4-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 18.3.4 Only use std::unique lock when std::lock guard cannot be used" ] } }, { "id": "HICPP-5_7_1-a", "name": "Floating-point expressions shall not be tested for equality or inequality", "shortDescription": { "text": "Floating-point expressions shall not be tested for equality or inequality" }, "fullDescription": { "text": "Floating-point expressions shall not be tested for equality or inequality [HICPP-5_7_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Floating-point expressions shall not be tested for equality or inequality [HICPP-5_7_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.7.1 Do not write code that expects floating point calculations to yield exact results" ] } }, { "id": "HICPP-5_3_2-a", "name": "Do not use calloc, malloc, realloc and free functions", "shortDescription": { "text": "Do not use calloc, malloc, realloc and free functions" }, "fullDescription": { "text": "Do not use calloc, malloc, realloc and free functions [HICPP-5_3_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use calloc, malloc, realloc and free functions [HICPP-5_3_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.3.2 Allocate memory using new and release it using delete" ] } }, { "id": "HICPP-5_3_1-a", "name": "The unary minus operator shall not be applied to an expression whose underlying type is unsigned", "shortDescription": { "text": "The unary minus operator shall not be applied to an expression whose underlying type is unsigned" }, "fullDescription": { "text": "The unary minus operator shall not be applied to an expression whose underlying type is unsigned [HICPP-5_3_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The unary minus operator shall not be applied to an expression whose underlying type is unsigned [HICPP-5_3_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.3.1 Do not apply unary minus to operands of unsigned type" ] } }, { "id": "HICPP-9_2_1-a", "name": "Bit-fields shall have explicitly unsigned integral or enumeration types only", "shortDescription": { "text": "Bit-fields shall have explicitly unsigned integral or enumeration types only" }, "fullDescription": { "text": "Bit-fields shall have explicitly unsigned integral or enumeration types only [HICPP-9_2_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Bit-fields shall have explicitly unsigned integral or enumeration types only [HICPP-9_2_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 9.2.1 Declare bit-fields with an explicitly unsigned integral or enumeration type" ] } }, { "id": "HICPP-12_3_1-a", "name": "Write operator delete if you write operator new", "shortDescription": { "text": "Write operator delete if you write operator new" }, "fullDescription": { "text": "Write operator delete if you write operator new [HICPP-12_3_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Write operator delete if you write operator new [HICPP-12_3_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 12.3.1 Correctly declare overloads for operator new and delete" ] } }, { "id": "HICPP-12_3_1-b", "name": "Write operator delete[] if you write operator new[]", "shortDescription": { "text": "Write operator delete[] if you write operator new[]" }, "fullDescription": { "text": "Write operator delete[] if you write operator new[] [HICPP-12_3_1-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Write operator delete[] if you write operator new[] [HICPP-12_3_1-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 12.3.1 Correctly declare overloads for operator new and delete" ] } }, { "id": "HICPP-6_1_4-a", "name": "Every switch statement will have at least two cases and a potential default", "shortDescription": { "text": "Every switch statement will have at least two cases and a potential default" }, "fullDescription": { "text": "Every switch statement will have at least two cases and a potential default [HICPP-6_1_4-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Every switch statement will have at least two cases and a potential default [HICPP-6_1_4-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 6.1.4 Ensure that a switch statement has at least two case labels, distinct from the default label" ] } }, { "id": "HICPP-6_1_4-b", "name": "A switch expression shall not represent a value that is effectively Boolean", "shortDescription": { "text": "A switch expression shall not represent a value that is effectively Boolean" }, "fullDescription": { "text": "A switch expression shall not represent a value that is effectively Boolean [HICPP-6_1_4-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A switch expression shall not represent a value that is effectively Boolean [HICPP-6_1_4-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 6.1.4 Ensure that a switch statement has at least two case labels, distinct from the default label" ] } }, { "id": "HICPP-11_1_1-a", "name": "Avoid \"public\" data members", "shortDescription": { "text": "Avoid \"public\" data members" }, "fullDescription": { "text": "Avoid \"public\" data members [HICPP-11_1_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid \"public\" data members [HICPP-11_1_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 11.1.1 Declare all data members private" ] } }, { "id": "HICPP-11_1_1-b", "name": "Avoid 'protected' data members", "shortDescription": { "text": "Avoid 'protected' data members" }, "fullDescription": { "text": "Avoid 'protected' data members [HICPP-11_1_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid 'protected' data members [HICPP-11_1_1-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 11.1.1 Declare all data members private" ] } }, { "id": "HICPP-6_1_3-a", "name": "Every switch branch should be unconditionally terminated", "shortDescription": { "text": "Every switch branch should be unconditionally terminated" }, "fullDescription": { "text": "Every switch branch should be unconditionally terminated [HICPP-6_1_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Every switch branch should be unconditionally terminated [HICPP-6_1_3-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 6.1.3 Ensure that a non-empty case statement block does not fall through to the next label" ] } }, { "id": "HICPP-6_1_2-a", "name": "All 'if...else-if' constructs shall be terminated with an 'else' clause", "shortDescription": { "text": "All 'if...else-if' constructs shall be terminated with an 'else' clause" }, "fullDescription": { "text": "All 'if...else-if' constructs shall be terminated with an 'else' clause [HICPP-6_1_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All 'if...else-if' constructs shall be terminated with an 'else' clause [HICPP-6_1_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 6.1.2 Explicitly cover all paths through multi-way selection statements" ] } }, { "id": "HICPP-6_1_2-b", "name": "The final clause of a switch statement shall be the default clause", "shortDescription": { "text": "The final clause of a switch statement shall be the default clause" }, "fullDescription": { "text": "The final clause of a switch statement shall be the default clause [HICPP-6_1_2-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The final clause of a switch statement shall be the default clause [HICPP-6_1_2-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 6.1.2 Explicitly cover all paths through multi-way selection statements" ] } }, { "id": "HICPP-6_1_1-a", "name": "The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement", "shortDescription": { "text": "The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" }, "fullDescription": { "text": "The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement [HICPP-6_1_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement [HICPP-6_1_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 6.1.1 Enclose the body of a selection or an iteration statement in a compound statement" ] } }, { "id": "HICPP-6_1_1-b", "name": "'if' and 'else' should be followed by a compound statement", "shortDescription": { "text": "'if' and 'else' should be followed by a compound statement" }, "fullDescription": { "text": "'if' and 'else' should be followed by a compound statement [HICPP-6_1_1-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "'if' and 'else' should be followed by a compound statement [HICPP-6_1_1-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 6.1.1 Enclose the body of a selection or an iteration statement in a compound statement" ] } }, { "id": "HICPP-7_3_1-a", "name": "using-directives shall not be used", "shortDescription": { "text": "using-directives shall not be used" }, "fullDescription": { "text": "using-directives shall not be used [HICPP-7_3_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "using-directives shall not be used [HICPP-7_3_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 7.3.1 Do not use using directives" ] } }, { "id": "HICPP-15_2_1-a", "name": "Do not throw from within destructor", "shortDescription": { "text": "Do not throw from within destructor" }, "fullDescription": { "text": "Do not throw from within destructor [HICPP-15_2_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not throw from within destructor [HICPP-15_2_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 15.2.1 Do not throw an exception from a destructor" ] } }, { "id": "HICPP-2_4_1-a", "name": "Different identifiers shall be typographically unambiguous", "shortDescription": { "text": "Different identifiers shall be typographically unambiguous" }, "fullDescription": { "text": "Different identifiers shall be typographically unambiguous [HICPP-2_4_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Different identifiers shall be typographically unambiguous [HICPP-2_4_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 2.4.1 Ensure that each identifier is distinct from any other visible identifier" ] } }, { "id": "HICPP-12_5_7-a", "name": "Declare assignment operators with the ref-qualifier &", "shortDescription": { "text": "Declare assignment operators with the ref-qualifier &" }, "fullDescription": { "text": "Declare assignment operators with the ref-qualifier & [HICPP-12_5_7-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare assignment operators with the ref-qualifier & [HICPP-12_5_7-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 12.5.7 Declare assignment operators with the ref-qualifier &" ] } }, { "id": "HICPP-10_3_1-a", "name": "Ensure that a derived class has at most one base class which is not an interface class", "shortDescription": { "text": "Ensure that a derived class has at most one base class which is not an interface class" }, "fullDescription": { "text": "Ensure that a derived class has at most one base class which is not an interface class [HICPP-10_3_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure that a derived class has at most one base class which is not an interface class [HICPP-10_3_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 10.3.1 Ensure that a derived class has at most one base class which is not an interface class" ] } }, { "id": "HICPP-12_5_8-a", "name": "The copy assignment operator shall be declared protected or private in an abstract class", "shortDescription": { "text": "The copy assignment operator shall be declared protected or private in an abstract class" }, "fullDescription": { "text": "The copy assignment operator shall be declared protected or private in an abstract class [HICPP-12_5_8-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The copy assignment operator shall be declared protected or private in an abstract class [HICPP-12_5_8-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 12.5.8 Make the copy assignment operator of an abstract class protected or define it =delete" ] } }, { "id": "HICPP-12_5_6-a", "name": "User-defined copy and move assignment operators should use user-defined no-throw swap function", "shortDescription": { "text": "User-defined copy and move assignment operators should use user-defined no-throw swap function" }, "fullDescription": { "text": "User-defined copy and move assignment operators should use user-defined no-throw swap function [HICPP-12_5_6-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "User-defined copy and move assignment operators should use user-defined no-throw swap function [HICPP-12_5_6-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 12.5.6 Use an atomic, non-throwing swap operation to implement the copy and move assignment operators" ] } }, { "id": "HICPP-12_5_3-a", "name": "A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member", "shortDescription": { "text": "A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member" }, "fullDescription": { "text": "A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member [HICPP-12_5_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member [HICPP-12_5_3-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 12.5.3 Ensure that a user defined move\/copy constructor only moves\/copies base and member objects" ] } }, { "id": "HICPP-12_5_4-a", "name": "All user-provided move constructors and move assignment operators shall not exit with an exception", "shortDescription": { "text": "All user-provided move constructors and move assignment operators shall not exit with an exception" }, "fullDescription": { "text": "All user-provided move constructors and move assignment operators shall not exit with an exception [HICPP-12_5_4-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All user-provided move constructors and move assignment operators shall not exit with an exception [HICPP-12_5_4-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 12.5.4 Declare noexcept the move constructor and move assignment operator" ] } }, { "id": "HICPP-8_1_1-a", "name": "The declaration should not contain more than one level of pointer indirection", "shortDescription": { "text": "The declaration should not contain more than one level of pointer indirection" }, "fullDescription": { "text": "The declaration should not contain more than one level of pointer indirection [HICPP-8_1_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The declaration should not contain more than one level of pointer indirection [HICPP-8_1_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 8.1.1 Do not use multiple levels of pointer indirection" ] } }, { "id": "HICPP-3_2_1-a", "name": "Always declare functions at file scope", "shortDescription": { "text": "Always declare functions at file scope" }, "fullDescription": { "text": "Always declare functions at file scope [HICPP-3_2_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Always declare functions at file scope [HICPP-3_2_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 3.2.1 Do not declare functions at block scope" ] } }, { "id": "HICPP-17_4_1-a", "name": "Use const container calls when the result is immediately converted to a const iterator", "shortDescription": { "text": "Use const container calls when the result is immediately converted to a const iterator" }, "fullDescription": { "text": "Use const container calls when the result is immediately converted to a const iterator [HICPP-17_4_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use const container calls when the result is immediately converted to a const iterator [HICPP-17_4_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 17.4.1 Use const container calls when result is immediately converted to a const iterator" ] } }, { "id": "HICPP-17_4_2-a", "name": "Prefer 'std::make_shared' to the direct use of new", "shortDescription": { "text": "Prefer 'std::make_shared' to the direct use of new" }, "fullDescription": { "text": "Prefer 'std::make_shared' to the direct use of new [HICPP-17_4_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer 'std::make_shared' to the direct use of new [HICPP-17_4_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 17.4.2 Use API calls that construct objects in place" ] } }, { "id": "HICPP-4_4_1-a", "name": "Avoid implicit conversions from floating to integral type", "shortDescription": { "text": "Avoid implicit conversions from floating to integral type" }, "fullDescription": { "text": "Avoid implicit conversions from floating to integral type [HICPP-4_4_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid implicit conversions from floating to integral type [HICPP-4_4_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 4.4.1 Do not convert floating values to integral types except through use of standard library functions" ] } }, { "id": "HICPP-13_2_1-a", "name": "Avoid overloading logical operators AND, OR (&&, ||)", "shortDescription": { "text": "Avoid overloading logical operators AND, OR (&&, ||)" }, "fullDescription": { "text": "Avoid overloading logical operators AND, OR (&&, ||) [HICPP-13_2_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid overloading logical operators AND, OR (&&, ||) [HICPP-13_2_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 13.2.1 Do not overload operators with special semantics" ] } }, { "id": "HICPP-13_2_1-b", "name": "Avoid overloading comma operator \",\"", "shortDescription": { "text": "Avoid overloading comma operator \",\"" }, "fullDescription": { "text": "Avoid overloading comma operator \",\" [HICPP-13_2_1-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid overloading comma operator \",\" [HICPP-13_2_1-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 13.2.1 Do not overload operators with special semantics" ] } }, { "id": "HICPP-18_2_2-a", "name": "Do not use global variable with different locks set", "shortDescription": { "text": "Do not use global variable with different locks set" }, "fullDescription": { "text": "Do not use global variable with different locks set [HICPP-18_2_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use global variable with different locks set [HICPP-18_2_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 18.2.2 Synchronize access to data shared between threads using a single lock" ] } }, { "id": "HICPP-18_2_2-b", "name": "Make const member functions thread-safe", "shortDescription": { "text": "Make const member functions thread-safe" }, "fullDescription": { "text": "Make const member functions thread-safe [HICPP-18_2_2-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Make const member functions thread-safe [HICPP-18_2_2-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 18.2.2 Synchronize access to data shared between threads using a single lock" ] } }, { "id": "HICPP-13_2_2-a", "name": "A relational operator shall return a boolean value", "shortDescription": { "text": "A relational operator shall return a boolean value" }, "fullDescription": { "text": "A relational operator shall return a boolean value [HICPP-13_2_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A relational operator shall return a boolean value [HICPP-13_2_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 13.2.2 Ensure that the return type of an overloaded binary operator matches the built-in counterparts" ] } }, { "id": "HICPP-13_2_2-b", "name": "A binary arithmetic operator and a bitwise operator shall return a 'prvalue'", "shortDescription": { "text": "A binary arithmetic operator and a bitwise operator shall return a 'prvalue'" }, "fullDescription": { "text": "A binary arithmetic operator and a bitwise operator shall return a 'prvalue' [HICPP-13_2_2-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A binary arithmetic operator and a bitwise operator shall return a 'prvalue' [HICPP-13_2_2-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 13.2.2 Ensure that the return type of an overloaded binary operator matches the built-in counterparts" ] } }, { "id": "HICPP-18_2_3-a", "name": "Do not share volatile data between threads", "shortDescription": { "text": "Do not share volatile data between threads" }, "fullDescription": { "text": "Do not share volatile data between threads [HICPP-18_2_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not share volatile data between threads [HICPP-18_2_3-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 18.2.3 Do not share volatile data between threads" ] } }, { "id": "HICPP-13_2_3-a", "name": "Declare binary arithmetic and bitwise operators as non-members", "shortDescription": { "text": "Declare binary arithmetic and bitwise operators as non-members" }, "fullDescription": { "text": "Declare binary arithmetic and bitwise operators as non-members [HICPP-13_2_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare binary arithmetic and bitwise operators as non-members [HICPP-13_2_3-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 13.2.3 Declare binary arithmetic and bitwise operators as non-members" ] } }, { "id": "HICPP-13_2_4-a", "name": "When overloading the subscript operator (operator[]), implement both const and non-const versions", "shortDescription": { "text": "When overloading the subscript operator (operator[]), implement both const and non-const versions" }, "fullDescription": { "text": "When overloading the subscript operator (operator[]), implement both const and non-const versions [HICPP-13_2_4-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "When overloading the subscript operator (operator[]), implement both const and non-const versions [HICPP-13_2_4-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 13.2.4 When overloading the subscript operator (operator[]) implement both const and non-const versions" ] } }, { "id": "HICPP-18_2_1-a", "name": "Use high_integrity::thread in place of std::thread", "shortDescription": { "text": "Use high_integrity::thread in place of std::thread" }, "fullDescription": { "text": "Use high_integrity::thread in place of std::thread [HICPP-18_2_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use high_integrity::thread in place of std::thread [HICPP-18_2_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 18.2.1 Use high integrity::thread in place of std::thread" ] } }, { "id": "HICPP-5_6_1-a", "name": "Bitwise operators shall only be applied to operands of unsigned underlying type (with exceptions)", "shortDescription": { "text": "Bitwise operators shall only be applied to operands of unsigned underlying type (with exceptions)" }, "fullDescription": { "text": "Bitwise operators shall only be applied to operands of unsigned underlying type (with exceptions) [HICPP-5_6_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Bitwise operators shall only be applied to operands of unsigned underlying type (with exceptions) [HICPP-5_6_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.6.1 Do not use bitwise operators with signed operands" ] } }, { "id": "HICPP-18_2_4-a", "name": "Use std::call_once rather than the Double-Checked Locking pattern", "shortDescription": { "text": "Use std::call_once rather than the Double-Checked Locking pattern" }, "fullDescription": { "text": "Use std::call_once rather than the Double-Checked Locking pattern [HICPP-18_2_4-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use std::call_once rather than the Double-Checked Locking pattern [HICPP-18_2_4-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 18.2.4 Use std::call_once rather than the Double-Checked Locking pattern" ] } }, { "id": "HICPP-5_2_1-c", "name": "Avoid null pointer dereferencing", "shortDescription": { "text": "Avoid null pointer dereferencing" }, "fullDescription": { "text": "Avoid null pointer dereferencing [HICPP-5_2_1-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid null pointer dereferencing [HICPP-5_2_1-c]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.2.1 Ensure that pointer or array access is demonstrably within bounds of a valid object" ] } }, { "id": "HICPP-5_2_1-a", "name": "Avoid accessing arrays out of bounds", "shortDescription": { "text": "Avoid accessing arrays out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays out of bounds [HICPP-5_2_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays out of bounds [HICPP-5_2_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.2.1 Ensure that pointer or array access is demonstrably within bounds of a valid object" ] } }, { "id": "HICPP-5_2_1-b", "name": "Avoid accessing arrays and pointers out of bounds", "shortDescription": { "text": "Avoid accessing arrays and pointers out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays and pointers out of bounds [HICPP-5_2_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays and pointers out of bounds [HICPP-5_2_1-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.2.1 Ensure that pointer or array access is demonstrably within bounds of a valid object" ] } }, { "id": "HICPP-5_2_2-a", "name": "Functions shall not call themselves, either directly or indirectly", "shortDescription": { "text": "Functions shall not call themselves, either directly or indirectly" }, "fullDescription": { "text": "Functions shall not call themselves, either directly or indirectly [HICPP-5_2_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Functions shall not call themselves, either directly or indirectly [HICPP-5_2_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.2.2 Ensure that functions do not call themselves, either directly or indirectly" ] } }, { "id": "HICPP-5_2_2-b", "name": "Do not use recursion", "shortDescription": { "text": "Do not use recursion" }, "fullDescription": { "text": "Do not use recursion [HICPP-5_2_2-b]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Do not use recursion [HICPP-5_2_2-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.2.2 Ensure that functions do not call themselves, either directly or indirectly" ] } }, { "id": "HICPP-12_4_2-a", "name": "All member variables should be initialized in constructor", "shortDescription": { "text": "All member variables should be initialized in constructor" }, "fullDescription": { "text": "All member variables should be initialized in constructor [HICPP-12_4_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All member variables should be initialized in constructor [HICPP-12_4_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 12.4.2 Ensure that a constructor initializes explicitly all base classes and non-static data members" ] } }, { "id": "HICPP-12_4_3-a", "name": "Do not specify both an NSDMI and a member initializer in a constructor for the same non-static member", "shortDescription": { "text": "Do not specify both an NSDMI and a member initializer in a constructor for the same non-static member" }, "fullDescription": { "text": "Do not specify both an NSDMI and a member initializer in a constructor for the same non-static member [HICPP-12_4_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not specify both an NSDMI and a member initializer in a constructor for the same non-static member [HICPP-12_4_3-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 12.4.3 Do not specify both an NSDMI and a member initializer in a constructor for the same non static member" ] } }, { "id": "HICPP-12_4_1-b", "name": "Do not use dynamic type of an object under construction", "shortDescription": { "text": "Do not use dynamic type of an object under construction" }, "fullDescription": { "text": "Do not use dynamic type of an object under construction [HICPP-12_4_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use dynamic type of an object under construction [HICPP-12_4_1-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 12.4.1 Do not use the dynamic type of an object unless the object is fully constructed" ] } }, { "id": "HICPP-12_4_1-c", "name": "Do not use dynamic type of an object under destruction", "shortDescription": { "text": "Do not use dynamic type of an object under destruction" }, "fullDescription": { "text": "Do not use dynamic type of an object under destruction [HICPP-12_4_1-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use dynamic type of an object under destruction [HICPP-12_4_1-c]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 12.4.1 Do not use the dynamic type of an object unless the object is fully constructed" ] } }, { "id": "HICPP-6_4_1-a", "name": "Declare variables as locally as possible", "shortDescription": { "text": "Declare variables as locally as possible" }, "fullDescription": { "text": "Declare variables as locally as possible [HICPP-6_4_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare variables as locally as possible [HICPP-6_4_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 6.4.1 Postpone variable definitions as long as possible" ] } }, { "id": "HICPP-6_4_1-b", "name": "Postpone variable definitions as long as possible", "shortDescription": { "text": "Postpone variable definitions as long as possible" }, "fullDescription": { "text": "Postpone variable definitions as long as possible [HICPP-6_4_1-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Postpone variable definitions as long as possible [HICPP-6_4_1-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 6.4.1 Postpone variable definitions as long as possible" ] } }, { "id": "HICPP-15_3_2-a", "name": "Always catch exceptions", "shortDescription": { "text": "Always catch exceptions" }, "fullDescription": { "text": "Always catch exceptions [HICPP-15_3_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Always catch exceptions [HICPP-15_3_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 15.3.2 Ensure that a program does not result in a call to std::terminate" ] } }, { "id": "HICPP-15_3_2-c", "name": "Avoid throwing exceptions from functions that are declared not to throw", "shortDescription": { "text": "Avoid throwing exceptions from functions that are declared not to throw" }, "fullDescription": { "text": "Avoid throwing exceptions from functions that are declared not to throw [HICPP-15_3_2-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid throwing exceptions from functions that are declared not to throw [HICPP-15_3_2-c]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 15.3.2 Ensure that a program does not result in a call to std::terminate" ] } }, { "id": "HICPP-15_3_2-b", "name": "There should be at least one exception handler to catch all otherwise unhandled exceptions", "shortDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions" }, "fullDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [HICPP-15_3_2-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [HICPP-15_3_2-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 15.3.2 Ensure that a program does not result in a call to std::terminate" ] } }, { "id": "HICPP-16_1_1-a", "name": "Avoid using macro definitions", "shortDescription": { "text": "Avoid using macro definitions" }, "fullDescription": { "text": "Avoid using macro definitions [HICPP-16_1_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid using macro definitions [HICPP-16_1_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards" ] } }, { "id": "HICPP-16_1_1-b", "name": "The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file", "shortDescription": { "text": "The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" }, "fullDescription": { "text": "The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file [HICPP-16_1_1-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file [HICPP-16_1_1-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards" ] } }, { "id": "HICPP-16_1_1-c", "name": "The #ifdef, #else, #elif preprocessor directives should not be used", "shortDescription": { "text": "The #ifdef, #else, #elif preprocessor directives should not be used" }, "fullDescription": { "text": "The #ifdef, #else, #elif preprocessor directives should not be used [HICPP-16_1_1-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The #ifdef, #else, #elif preprocessor directives should not be used [HICPP-16_1_1-c]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards" ] } }, { "id": "HICPP-16_1_1-d", "name": "Use multiple include guards", "shortDescription": { "text": "Use multiple include guards" }, "fullDescription": { "text": "Use multiple include guards [HICPP-16_1_1-d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use multiple include guards [HICPP-16_1_1-d]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards" ] } }, { "id": "HICPP-16_1_1-e", "name": "The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file", "shortDescription": { "text": "The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" }, "fullDescription": { "text": "The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file [HICPP-16_1_1-e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file [HICPP-16_1_1-e]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards" ] } }, { "id": "HICPP-16_1_1-f", "name": "The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file", "shortDescription": { "text": "The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" }, "fullDescription": { "text": "The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file [HICPP-16_1_1-f]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file [HICPP-16_1_1-f]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards" ] } }, { "id": "HICPP-16_1_1-g", "name": "#error directive shall not be used", "shortDescription": { "text": "#error directive shall not be used" }, "fullDescription": { "text": "#error directive shall not be used [HICPP-16_1_1-g]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "#error directive shall not be used [HICPP-16_1_1-g]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards" ] } }, { "id": "HICPP-16_1_1-h", "name": "The #pragma directive shall not be used", "shortDescription": { "text": "The #pragma directive shall not be used" }, "fullDescription": { "text": "The #pragma directive shall not be used [HICPP-16_1_1-h]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The #pragma directive shall not be used [HICPP-16_1_1-h]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards" ] } }, { "id": "HICPP-16_1_1-i", "name": "#undef shall not be used", "shortDescription": { "text": "#undef shall not be used" }, "fullDescription": { "text": "#undef shall not be used [HICPP-16_1_1-i]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "#undef shall not be used [HICPP-16_1_1-i]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards" ] } }, { "id": "HICPP-16_1_2-a", "name": "Do not allow absolute or relative path names in #include statements", "shortDescription": { "text": "Do not allow absolute or relative path names in #include statements" }, "fullDescription": { "text": "Do not allow absolute or relative path names in #include statements [HICPP-16_1_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not allow absolute or relative path names in #include statements [HICPP-16_1_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 16.1.2 Do not include a path specifier in filenames supplied in #include directives" ] } }, { "id": "HICPP-16_1_2-b", "name": "The \\ character should not occur in a header file name", "shortDescription": { "text": "The \\ character should not occur in a header file name" }, "fullDescription": { "text": "The \\ character should not occur in a header file name [HICPP-16_1_2-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The \\ character should not occur in a header file name [HICPP-16_1_2-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 16.1.2 Do not include a path specifier in filenames supplied in #include directives" ] } }, { "id": "HICPP-11_2_1-a", "name": "Avoid using the friend mechanism", "shortDescription": { "text": "Avoid using the friend mechanism" }, "fullDescription": { "text": "Avoid using the friend mechanism [HICPP-11_2_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid using the friend mechanism [HICPP-11_2_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 11.2.1 Do not use friend declarations" ] } }, { "id": "HICPP-2_3_1-a", "name": "Prefer C++ style comment", "shortDescription": { "text": "Prefer C++ style comment" }, "fullDescription": { "text": "Prefer C++ style comment [HICPP-2_3_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer C++ style comment [HICPP-2_3_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 2.3.1 Do not use the C comment delimiters \/* ... *\/" ] } }, { "id": "HICPP-7_4_1-a", "name": "Do not use static keyword except inside functions and classes", "shortDescription": { "text": "Do not use static keyword except inside functions and classes" }, "fullDescription": { "text": "Do not use static keyword except inside functions and classes [HICPP-7_4_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use static keyword except inside functions and classes [HICPP-7_4_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 7.4.1 Ensure that any objects, functions or types to be used from a single translation unit are defined in an unnamed namespace in the main source file" ] } }, { "id": "HICPP-7_4_3-a", "name": "A type, object or function that is used in multiple translation units shall be declared in one and only one file", "shortDescription": { "text": "A type, object or function that is used in multiple translation units shall be declared in one and only one file" }, "fullDescription": { "text": "A type, object or function that is used in multiple translation units shall be declared in one and only one file [HICPP-7_4_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A type, object or function that is used in multiple translation units shall be declared in one and only one file [HICPP-7_4_3-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 7.4.3 Ensure that an object or a function used from multiple translation units is declared in a single header file" ] } }, { "id": "HICPP-7_4_2-a", "name": "An inline function that is used in multiple translation units shall be defined in one and only one file", "shortDescription": { "text": "An inline function that is used in multiple translation units shall be defined in one and only one file" }, "fullDescription": { "text": "An inline function that is used in multiple translation units shall be defined in one and only one file [HICPP-7_4_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An inline function that is used in multiple translation units shall be defined in one and only one file [HICPP-7_4_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 7.4.2 Ensure that an inline function, a function template, or a type used from multiple translation units is defined in a single header file" ] } }, { "id": "HICPP-7_4_2-b", "name": "A function template that is used in multiple translation units shall be defined in one and only one file", "shortDescription": { "text": "A function template that is used in multiple translation units shall be defined in one and only one file" }, "fullDescription": { "text": "A function template that is used in multiple translation units shall be defined in one and only one file [HICPP-7_4_2-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function template that is used in multiple translation units shall be defined in one and only one file [HICPP-7_4_2-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 7.4.2 Ensure that an inline function, a function template, or a type used from multiple translation units is defined in a single header file" ] } }, { "id": "HICPP-7_4_2-c", "name": "A type that is used in multiple translation units shall be defined in one and only one file", "shortDescription": { "text": "A type that is used in multiple translation units shall be defined in one and only one file" }, "fullDescription": { "text": "A type that is used in multiple translation units shall be defined in one and only one file [HICPP-7_4_2-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A type that is used in multiple translation units shall be defined in one and only one file [HICPP-7_4_2-c]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 7.4.2 Ensure that an inline function, a function template, or a type used from multiple translation units is defined in a single header file" ] } }, { "id": "HICPP-16_1_5-a", "name": "Avoid duplication of #include directives", "shortDescription": { "text": "Avoid duplication of #include directives" }, "fullDescription": { "text": "Avoid duplication of #include directives [HICPP-16_1_5-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid duplication of #include directives [HICPP-16_1_5-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 16.1.5 Include directly the minimum number of headers required for compilation" ] } }, { "id": "HICPP-16_1_3-a", "name": "Match the filename in a #include directive to the one on the filesystem", "shortDescription": { "text": "Match the filename in a #include directive to the one on the filesystem" }, "fullDescription": { "text": "Match the filename in a #include directive to the one on the filesystem [HICPP-16_1_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Match the filename in a #include directive to the one on the filesystem [HICPP-16_1_3-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 16.1.3 Match the filename in a #include directive to the one on the filesystem" ] } }, { "id": "HICPP-15_3_1-a", "name": "Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases", "shortDescription": { "text": "Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" }, "fullDescription": { "text": "Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases [HICPP-15_3_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases [HICPP-15_3_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 15.3.1 Do not access non-static members from a catch handler of constructor\/destructor function try block" ] } }, { "id": "HICPP-16_1_4-a", "name": "Use <> brackets for system and standard library headers. Use quotes for all other headers", "shortDescription": { "text": "Use <> brackets for system and standard library headers. Use quotes for all other headers" }, "fullDescription": { "text": "Use <> brackets for system and standard library headers. Use quotes for all other headers [HICPP-16_1_4-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use <> brackets for system and standard library headers. Use quotes for all other headers [HICPP-16_1_4-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 16.1.4 Use <> brackets for system and standard library headers. Use quotes for all other headers" ] } }, { "id": "HICPP-2_3_2-a", "name": "Do not use comments to remove sections of code", "shortDescription": { "text": "Do not use comments to remove sections of code" }, "fullDescription": { "text": "Do not use comments to remove sections of code [HICPP-2_3_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use comments to remove sections of code [HICPP-2_3_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 2.3.2 Do not comment out code" ] } }, { "id": "HICPP-10_2_1-a", "name": "Each overriding virtual function shall be declared with the override or final specifier", "shortDescription": { "text": "Each overriding virtual function shall be declared with the override or final specifier" }, "fullDescription": { "text": "Each overriding virtual function shall be declared with the override or final specifier [HICPP-10_2_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each overriding virtual function shall be declared with the override or final specifier [HICPP-10_2_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 10.2.1 Use the override special identifier when overriding a virtual function" ] } }, { "id": "HICPP-17_3_4-a", "name": "Do not create smart pointers of array type", "shortDescription": { "text": "Do not create smart pointers of array type" }, "fullDescription": { "text": "Do not create smart pointers of array type [HICPP-17_3_4-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not create smart pointers of array type [HICPP-17_3_4-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 17.3.4 Do not create smart pointers of array type" ] } }, { "id": "HICPP-17_3_5-a", "name": "Do not create an rvalue reference of std::array", "shortDescription": { "text": "Do not create an rvalue reference of std::array" }, "fullDescription": { "text": "Do not create an rvalue reference of std::array [HICPP-17_3_5-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not create an rvalue reference of std::array [HICPP-17_3_5-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 17.3.5 Do not create an rvalue reference of std::array" ] } }, { "id": "HICPP-3_1_1-a", "name": "Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope", "shortDescription": { "text": "Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" }, "fullDescription": { "text": "Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope [HICPP-3_1_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope [HICPP-3_1_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 3.1.1 Do not hide declarations" ] } }, { "id": "HICPP-3_1_1-b", "name": "Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope", "shortDescription": { "text": "Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" }, "fullDescription": { "text": "Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope [HICPP-3_1_1-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope [HICPP-3_1_1-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 3.1.1 Do not hide declarations" ] } }, { "id": "HICPP-3_1_1-c", "name": "Identifiers declared in a local scope should not hide identifiers declared in a class scope", "shortDescription": { "text": "Identifiers declared in a local scope should not hide identifiers declared in a class scope" }, "fullDescription": { "text": "Identifiers declared in a local scope should not hide identifiers declared in a class scope [HICPP-3_1_1-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers declared in a local scope should not hide identifiers declared in a class scope [HICPP-3_1_1-c]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 3.1.1 Do not hide declarations" ] } }, { "id": "HICPP-3_1_1-d", "name": "Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope", "shortDescription": { "text": "Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope" }, "fullDescription": { "text": "Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope [HICPP-3_1_1-d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope [HICPP-3_1_1-d]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 3.1.1 Do not hide declarations" ] } }, { "id": "HICPP-3_1_1-e", "name": "Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope", "shortDescription": { "text": "Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope" }, "fullDescription": { "text": "Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope [HICPP-3_1_1-e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope [HICPP-3_1_1-e]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 3.1.1 Do not hide declarations" ] } }, { "id": "HICPP-17_3_1-a", "name": "Do not use std::move on objects declared with the const or const & type", "shortDescription": { "text": "Do not use std::move on objects declared with the const or const & type" }, "fullDescription": { "text": "Do not use std::move on objects declared with the const or const & type [HICPP-17_3_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use std::move on objects declared with the const or const & type [HICPP-17_3_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 17.3.1 Do not use std::move on objects declared with const or const & type" ] } }, { "id": "HICPP-14_1_1-a", "name": "Do not use functions with variable numbers of arguments", "shortDescription": { "text": "Do not use functions with variable numbers of arguments" }, "fullDescription": { "text": "Do not use functions with variable numbers of arguments [HICPP-14_1_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use functions with variable numbers of arguments [HICPP-14_1_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 14.1.1 Use variadic templates rather than an ellipsis" ] } }, { "id": "HICPP-17_3_2-a", "name": "The 'std::forward' function should be used to forward forwarding references", "shortDescription": { "text": "The 'std::forward' function should be used to forward forwarding references" }, "fullDescription": { "text": "The 'std::forward' function should be used to forward forwarding references [HICPP-17_3_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'std::forward' function should be used to forward forwarding references [HICPP-17_3_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 17.3.2 Use std::forward to forward universal references" ] } }, { "id": "HICPP-17_3_3-a", "name": "Do not subsequently use the argument to std::forward", "shortDescription": { "text": "Do not subsequently use the argument to std::forward" }, "fullDescription": { "text": "Do not subsequently use the argument to std::forward [HICPP-17_3_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not subsequently use the argument to std::forward [HICPP-17_3_3-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 17.3.3 Do not subsequently use the argument to std::forward" ] } }, { "id": "HICPP-3_5_1-c", "name": "Do not subtract two pointers that do not address elements of the same array", "shortDescription": { "text": "Do not subtract two pointers that do not address elements of the same array" }, "fullDescription": { "text": "Do not subtract two pointers that do not address elements of the same array [HICPP-3_5_1-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not subtract two pointers that do not address elements of the same array [HICPP-3_5_1-c]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object" ] } }, { "id": "HICPP-3_5_1-d", "name": "Do not compare two unrelated pointers", "shortDescription": { "text": "Do not compare two unrelated pointers" }, "fullDescription": { "text": "Do not compare two unrelated pointers [HICPP-3_5_1-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not compare two unrelated pointers [HICPP-3_5_1-d]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object" ] } }, { "id": "HICPP-3_5_1-a", "name": "Unions shall not be used", "shortDescription": { "text": "Unions shall not be used" }, "fullDescription": { "text": "Unions shall not be used [HICPP-3_5_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Unions shall not be used [HICPP-3_5_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object" ] } }, { "id": "HICPP-3_5_1-b", "name": "typedefs should be used in place of the basic types", "shortDescription": { "text": "typedefs should be used in place of the basic types" }, "fullDescription": { "text": "typedefs should be used in place of the basic types [HICPP-3_5_1-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "typedefs should be used in place of the basic types [HICPP-3_5_1-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object" ] } }, { "id": "HICPP-4_3_1-a", "name": "Avoid implicit conversions from wider to narrower floating type", "shortDescription": { "text": "Avoid implicit conversions from wider to narrower floating type" }, "fullDescription": { "text": "Avoid implicit conversions from wider to narrower floating type [HICPP-4_3_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid implicit conversions from wider to narrower floating type [HICPP-4_3_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 4.3.1 Do not convert an expression of wider floating point type to a narrower floating point type" ] } }, { "id": "HICPP-4_3_1-b", "name": "Avoid implicit conversions of floating point numbers from wider to narrower floating type", "shortDescription": { "text": "Avoid implicit conversions of floating point numbers from wider to narrower floating type" }, "fullDescription": { "text": "Avoid implicit conversions of floating point numbers from wider to narrower floating type [HICPP-4_3_1-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid implicit conversions of floating point numbers from wider to narrower floating type [HICPP-4_3_1-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 4.3.1 Do not convert an expression of wider floating point type to a narrower floating point type" ] } }, { "id": "HICPP-7_1_10-a", "name": "Use static_assert for assertions involving compile time constants", "shortDescription": { "text": "Use static_assert for assertions involving compile time constants" }, "fullDescription": { "text": "Use static_assert for assertions involving compile time constants [HICPP-7_1_10-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use static_assert for assertions involving compile time constants [HICPP-7_1_10-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 7.1.10 Use static assert for assertions involving compile time constants" ] } }, { "id": "HICPP-8_2_4-a", "name": "Do not pass std::unique_ptr by const reference", "shortDescription": { "text": "Do not pass std::unique_ptr by const reference" }, "fullDescription": { "text": "Do not pass std::unique_ptr by const reference [HICPP-8_2_4-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not pass std::unique_ptr by const reference [HICPP-8_2_4-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 8.2.4 Do not pass std::unique ptr by const reference" ] } }, { "id": "HICPP-8_2_3-a", "name": "Pass small objects with a trivial copy constructor by value", "shortDescription": { "text": "Pass small objects with a trivial copy constructor by value" }, "fullDescription": { "text": "Pass small objects with a trivial copy constructor by value [HICPP-8_2_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Pass small objects with a trivial copy constructor by value [HICPP-8_2_3-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 8.2.3 Pass small objects with a trivial copy constructor by value" ] } }, { "id": "HICPP-8_2_2-a", "name": "Avoid functions with more than 5 parameters", "shortDescription": { "text": "Avoid functions with more than 5 parameters" }, "fullDescription": { "text": "Avoid functions with more than 5 parameters [HICPP-8_2_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid functions with more than 5 parameters [HICPP-8_2_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 8.2.2 Do not declare functions with an excessive number of parameters" ] } }, { "id": "HICPP-8_2_1-a", "name": "The identifiers used in the declaration and definition of a function shall be identical", "shortDescription": { "text": "The identifiers used in the declaration and definition of a function shall be identical" }, "fullDescription": { "text": "The identifiers used in the declaration and definition of a function shall be identical [HICPP-8_2_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The identifiers used in the declaration and definition of a function shall be identical [HICPP-8_2_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 8.2.1 Make parameter names absent or identical in all declarations" ] } }, { "id": "HICPP-18_1_1-a", "name": "Do not use platform-specific multi-threading facilities", "shortDescription": { "text": "Do not use platform-specific multi-threading facilities" }, "fullDescription": { "text": "Do not use platform-specific multi-threading facilities [HICPP-18_1_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use platform-specific multi-threading facilities [HICPP-18_1_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 18.1.1 Do not use platform specific multi-threading facilities" ] } }, { "id": "HICPP-5_1_6-a", "name": "The operand of the sizeof operator shall not contain any expression which has side effects", "shortDescription": { "text": "The operand of the sizeof operator shall not contain any expression which has side effects" }, "fullDescription": { "text": "The operand of the sizeof operator shall not contain any expression which has side effects [HICPP-5_1_6-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The operand of the sizeof operator shall not contain any expression which has side effects [HICPP-5_1_6-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.1.6 Do not code side effects into the right-hand operands of: &&, ||, sizeof, typeid or a function passed to condition variable::wait" ] } }, { "id": "HICPP-5_1_6-b", "name": "Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator", "shortDescription": { "text": "Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" }, "fullDescription": { "text": "Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator [HICPP-5_1_6-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator [HICPP-5_1_6-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.1.6 Do not code side effects into the right-hand operands of: &&, ||, sizeof, typeid or a function passed to condition variable::wait" ] } }, { "id": "HICPP-5_1_6-c", "name": "The function call that causes the side effect shall not be the operand of the sizeof operator", "shortDescription": { "text": "The function call that causes the side effect shall not be the operand of the sizeof operator" }, "fullDescription": { "text": "The function call that causes the side effect shall not be the operand of the sizeof operator [HICPP-5_1_6-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The function call that causes the side effect shall not be the operand of the sizeof operator [HICPP-5_1_6-c]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.1.6 Do not code side effects into the right-hand operands of: &&, ||, sizeof, typeid or a function passed to condition variable::wait" ] } }, { "id": "HICPP-5_1_6-d", "name": "The right-hand operand of a logical && or || operator shall not contain side effects", "shortDescription": { "text": "The right-hand operand of a logical && or || operator shall not contain side effects" }, "fullDescription": { "text": "The right-hand operand of a logical && or || operator shall not contain side effects [HICPP-5_1_6-d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The right-hand operand of a logical && or || operator shall not contain side effects [HICPP-5_1_6-d]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.1.6 Do not code side effects into the right-hand operands of: &&, ||, sizeof, typeid or a function passed to condition variable::wait" ] } }, { "id": "HICPP-5_1_6-e", "name": "The operand of the 'typeid' operator shall not contain any expression that has side effects", "shortDescription": { "text": "The operand of the 'typeid' operator shall not contain any expression that has side effects" }, "fullDescription": { "text": "The operand of the 'typeid' operator shall not contain any expression that has side effects [HICPP-5_1_6-e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The operand of the 'typeid' operator shall not contain any expression that has side effects [HICPP-5_1_6-e]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.1.6 Do not code side effects into the right-hand operands of: &&, ||, sizeof, typeid or a function passed to condition variable::wait" ] } }, { "id": "HICPP-5_1_6-f", "name": "The operand of the 'typeid' operator shall not contain a function call that causes side effects", "shortDescription": { "text": "The operand of the 'typeid' operator shall not contain a function call that causes side effects" }, "fullDescription": { "text": "The operand of the 'typeid' operator shall not contain a function call that causes side effects [HICPP-5_1_6-f]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The operand of the 'typeid' operator shall not contain a function call that causes side effects [HICPP-5_1_6-f]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.1.6 Do not code side effects into the right-hand operands of: &&, ||, sizeof, typeid or a function passed to condition variable::wait" ] } }, { "id": "HICPP-5_1_5-a", "name": "Include a parameter list in every lambda expression", "shortDescription": { "text": "Include a parameter list in every lambda expression" }, "fullDescription": { "text": "Include a parameter list in every lambda expression [HICPP-5_1_5-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Include a parameter list in every lambda expression [HICPP-5_1_5-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.1.5 Include a (possibly empty) parameter list in every lambda expression" ] } }, { "id": "HICPP-5_5_1-a", "name": "Avoid division by zero", "shortDescription": { "text": "Avoid division by zero" }, "fullDescription": { "text": "Avoid division by zero [HICPP-5_5_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid division by zero [HICPP-5_5_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.5.1 Ensure that the right hand operand of the division or remainder operators is demonstrably non-zero" ] } }, { "id": "HICPP-5_1_2-b", "name": "Don't write code that depends on the order of evaluation of function arguments", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function arguments" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function arguments [HICPP-5_1_2-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of function arguments [HICPP-5_1_2-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.1.2 Do not rely on the sequence of evaluation within an expression" ] } }, { "id": "HICPP-5_1_2-a", "name": "The value of an expression shall be the same under any order of evaluation that the standard permits", "shortDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits" }, "fullDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [HICPP-5_1_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [HICPP-5_1_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.1.2 Do not rely on the sequence of evaluation within an expression" ] } }, { "id": "HICPP-5_1_2-c", "name": "Don't write code that depends on the order of evaluation of function designator and function arguments", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments [HICPP-5_1_2-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments [HICPP-5_1_2-c]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.1.2 Do not rely on the sequence of evaluation within an expression" ] } }, { "id": "HICPP-5_1_2-d", "name": "Don't write code that depends on the order of evaluation of expression that involves a function call", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call [HICPP-5_1_2-d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call [HICPP-5_1_2-d]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.1.2 Do not rely on the sequence of evaluation within an expression" ] } }, { "id": "HICPP-5_1_2-e", "name": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression", "shortDescription": { "text": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" }, "fullDescription": { "text": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression [HICPP-5_1_2-e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression [HICPP-5_1_2-e]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.1.2 Do not rely on the sequence of evaluation within an expression" ] } }, { "id": "HICPP-5_1_2-f", "name": "Do not use more than one volatile between two adjacent sequence points", "shortDescription": { "text": "Do not use more than one volatile between two adjacent sequence points" }, "fullDescription": { "text": "Do not use more than one volatile between two adjacent sequence points [HICPP-5_1_2-f]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use more than one volatile between two adjacent sequence points [HICPP-5_1_2-f]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.1.2 Do not rely on the sequence of evaluation within an expression" ] } }, { "id": "HICPP-5_1_2-g", "name": "Don't write code that depends on the order of evaluation of function calls", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function calls" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function calls [HICPP-5_1_2-g]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Don't write code that depends on the order of evaluation of function calls [HICPP-5_1_2-g]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.1.2 Do not rely on the sequence of evaluation within an expression" ] } }, { "id": "HICPP-5_1_2-h", "name": "The increment (++) and decrement (--) operators should not be mixed with other operators in an expression", "shortDescription": { "text": "The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" }, "fullDescription": { "text": "The increment (++) and decrement (--) operators should not be mixed with other operators in an expression [HICPP-5_1_2-h]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The increment (++) and decrement (--) operators should not be mixed with other operators in an expression [HICPP-5_1_2-h]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.1.2 Do not rely on the sequence of evaluation within an expression" ] } }, { "id": "HICPP-5_1_2-i", "name": "The comma operator shall not be used", "shortDescription": { "text": "The comma operator shall not be used" }, "fullDescription": { "text": "The comma operator shall not be used [HICPP-5_1_2-i]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The comma operator shall not be used [HICPP-5_1_2-i]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.1.2 Do not rely on the sequence of evaluation within an expression" ] } }, { "id": "HICPP-5_1_2-j", "name": "The result of a built-in assignment operator should not be used", "shortDescription": { "text": "The result of a built-in assignment operator should not be used" }, "fullDescription": { "text": "The result of a built-in assignment operator should not be used [HICPP-5_1_2-j]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The result of a built-in assignment operator should not be used [HICPP-5_1_2-j]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.1.2 Do not rely on the sequence of evaluation within an expression" ] } }, { "id": "HICPP-5_1_1-a", "name": "Avoid magic numbers", "shortDescription": { "text": "Avoid magic numbers" }, "fullDescription": { "text": "Avoid magic numbers [HICPP-5_1_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid magic numbers [HICPP-5_1_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.1.1 Use symbolic names instead of literal values in code" ] } }, { "id": "HICPP-5_1_4-a", "name": "Do not capture variables implicitly in a lambda", "shortDescription": { "text": "Do not capture variables implicitly in a lambda" }, "fullDescription": { "text": "Do not capture variables implicitly in a lambda [HICPP-5_1_4-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not capture variables implicitly in a lambda [HICPP-5_1_4-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.1.4 Do not capture variables implicitly in a lambda" ] } }, { "id": "HICPP-5_1_3-a", "name": "Use parentheses unless all operators in the expression are the same", "shortDescription": { "text": "Use parentheses unless all operators in the expression are the same" }, "fullDescription": { "text": "Use parentheses unless all operators in the expression are the same [HICPP-5_1_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use parentheses unless all operators in the expression are the same [HICPP-5_1_3-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.1.3 Use parentheses in expressions to specify the intent of the expression" ] } }, { "id": "HICPP-5_1_3-b", "name": "The operands of a logical && or || shall be primary-expressions", "shortDescription": { "text": "The operands of a logical && or || shall be primary-expressions" }, "fullDescription": { "text": "The operands of a logical && or || shall be primary-expressions [HICPP-5_1_3-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The operands of a logical && or || shall be primary-expressions [HICPP-5_1_3-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.1.3 Use parentheses in expressions to specify the intent of the expression" ] } }, { "id": "HICPP-12_5_1-a", "name": "Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler", "shortDescription": { "text": "Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" }, "fullDescription": { "text": "Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler [HICPP-12_5_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler [HICPP-12_5_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 12.5.1 Define explicitly =default or =delete implicit special member functions of concrete classes" ] } }, { "id": "HICPP-12_5_2-a", "name": "Define special members as =default when the behavior is equivalent to the compiler's behavior", "shortDescription": { "text": "Define special members as =default when the behavior is equivalent to the compiler's behavior" }, "fullDescription": { "text": "Define special members as =default when the behavior is equivalent to the compiler's behavior [HICPP-12_5_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Define special members as =default when the behavior is equivalent to the compiler's behavior [HICPP-12_5_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 12.5.2 Define special members =default if the behavior is equivalent" ] } }, { "id": "HICPP-6_3_2-a", "name": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression", "shortDescription": { "text": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" }, "fullDescription": { "text": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression [HICPP-6_3_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression [HICPP-6_3_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 6.3.2 Ensure that execution of a function with a non-void return type ends in a return statement with a value" ] } }, { "id": "HICPP-12_1_1-a", "name": "Constructors allowing for conversion should be made explicit", "shortDescription": { "text": "Constructors allowing for conversion should be made explicit" }, "fullDescription": { "text": "Constructors allowing for conversion should be made explicit [HICPP-12_1_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Constructors allowing for conversion should be made explicit [HICPP-12_1_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 12.1.1 Do not declare implicit user defined conversions" ] } }, { "id": "HICPP-12_1_1-b", "name": "User-conversion cast operators should be made explicit", "shortDescription": { "text": "User-conversion cast operators should be made explicit" }, "fullDescription": { "text": "User-conversion cast operators should be made explicit [HICPP-12_1_1-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "User-conversion cast operators should be made explicit [HICPP-12_1_1-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 12.1.1 Do not declare implicit user defined conversions" ] } }, { "id": "HICPP-1_2_1-i", "name": "Avoid conditions that always evaluate to the same value", "shortDescription": { "text": "Avoid conditions that always evaluate to the same value" }, "fullDescription": { "text": "Avoid conditions that always evaluate to the same value [HICPP-1_2_1-i]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid conditions that always evaluate to the same value [HICPP-1_2_1-i]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 1.2.1 Ensure that all statements are reachable" ] } }, { "id": "HICPP-1_2_1-j", "name": "Avoid switch with unreachable branches", "shortDescription": { "text": "Avoid switch with unreachable branches" }, "fullDescription": { "text": "Avoid switch with unreachable branches [HICPP-1_2_1-j]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid switch with unreachable branches [HICPP-1_2_1-j]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 1.2.1 Ensure that all statements are reachable" ] } }, { "id": "HICPP-1_2_1-a", "name": "There shall be no unreachable code in \"else\" block", "shortDescription": { "text": "There shall be no unreachable code in \"else\" block" }, "fullDescription": { "text": "There shall be no unreachable code in \"else\" block [HICPP-1_2_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code in \"else\" block [HICPP-1_2_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 1.2.1 Ensure that all statements are reachable" ] } }, { "id": "HICPP-1_2_1-b", "name": "There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute", "shortDescription": { "text": "There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute" }, "fullDescription": { "text": "There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute [HICPP-1_2_1-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute [HICPP-1_2_1-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 1.2.1 Ensure that all statements are reachable" ] } }, { "id": "HICPP-1_2_1-c", "name": "There shall be no unreachable code in \"if\/else\/while\/for\" block", "shortDescription": { "text": "There shall be no unreachable code in \"if\/else\/while\/for\" block" }, "fullDescription": { "text": "There shall be no unreachable code in \"if\/else\/while\/for\" block [HICPP-1_2_1-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code in \"if\/else\/while\/for\" block [HICPP-1_2_1-c]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 1.2.1 Ensure that all statements are reachable" ] } }, { "id": "HICPP-1_2_1-d", "name": "There shall be no unreachable code in switch statement", "shortDescription": { "text": "There shall be no unreachable code in switch statement" }, "fullDescription": { "text": "There shall be no unreachable code in switch statement [HICPP-1_2_1-d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code in switch statement [HICPP-1_2_1-d]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 1.2.1 Ensure that all statements are reachable" ] } }, { "id": "HICPP-1_2_1-e", "name": "There shall be no unreachable code in 'for' loop", "shortDescription": { "text": "There shall be no unreachable code in 'for' loop" }, "fullDescription": { "text": "There shall be no unreachable code in 'for' loop [HICPP-1_2_1-e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code in 'for' loop [HICPP-1_2_1-e]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 1.2.1 Ensure that all statements are reachable" ] } }, { "id": "HICPP-1_2_1-f", "name": "There shall be no unreachable code after 'if' or 'switch' statement", "shortDescription": { "text": "There shall be no unreachable code after 'if' or 'switch' statement" }, "fullDescription": { "text": "There shall be no unreachable code after 'if' or 'switch' statement [HICPP-1_2_1-f]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code after 'if' or 'switch' statement [HICPP-1_2_1-f]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 1.2.1 Ensure that all statements are reachable" ] } }, { "id": "HICPP-1_2_1-g", "name": "There shall be no unreachable code after \"if\" or \"switch\" statement inside while\/for\/do...while loop", "shortDescription": { "text": "There shall be no unreachable code after \"if\" or \"switch\" statement inside while\/for\/do...while loop" }, "fullDescription": { "text": "There shall be no unreachable code after \"if\" or \"switch\" statement inside while\/for\/do...while loop [HICPP-1_2_1-g]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code after \"if\" or \"switch\" statement inside while\/for\/do...while loop [HICPP-1_2_1-g]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 1.2.1 Ensure that all statements are reachable" ] } }, { "id": "HICPP-1_2_1-h", "name": "Avoid unreachable methods", "shortDescription": { "text": "Avoid unreachable methods" }, "fullDescription": { "text": "Avoid unreachable methods [HICPP-1_2_1-h]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid unreachable methods [HICPP-1_2_1-h]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 1.2.1 Ensure that all statements are reachable" ] } }, { "id": "HICPP-1_2_2-a", "name": "All non-null statements shall either have at least one side-effect however executed or cause control flow to change", "shortDescription": { "text": "All non-null statements shall either have at least one side-effect however executed or cause control flow to change" }, "fullDescription": { "text": "All non-null statements shall either have at least one side-effect however executed or cause control flow to change [HICPP-1_2_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All non-null statements shall either have at least one side-effect however executed or cause control flow to change [HICPP-1_2_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 1.2.2 Ensure that no expression or sub-expression is redundant" ] } }, { "id": "HICPP-6_3_1-a", "name": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement", "shortDescription": { "text": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" }, "fullDescription": { "text": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement [HICPP-6_3_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement [HICPP-6_3_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 6.3.1 Ensure that the label(s) for a jump statement or a switch condition appear later, in the same or an enclosing block" ] } }, { "id": "HICPP-6_3_1-b", "name": "The goto statement shall jump to a label declared later in the same function body", "shortDescription": { "text": "The goto statement shall jump to a label declared later in the same function body" }, "fullDescription": { "text": "The goto statement shall jump to a label declared later in the same function body [HICPP-6_3_1-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The goto statement shall jump to a label declared later in the same function body [HICPP-6_3_1-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 6.3.1 Ensure that the label(s) for a jump statement or a switch condition appear later, in the same or an enclosing block" ] } }, { "id": "HICPP-6_3_1-c", "name": "Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement", "shortDescription": { "text": "Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" }, "fullDescription": { "text": "Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement [HICPP-6_3_1-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement [HICPP-6_3_1-c]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 6.3.1 Ensure that the label(s) for a jump statement or a switch condition appear later, in the same or an enclosing block" ] } }, { "id": "HICPP-7_1_4-a", "name": "Place CV-qualifiers on the right hand side of the type they apply to", "shortDescription": { "text": "Place CV-qualifiers on the right hand side of the type they apply to" }, "fullDescription": { "text": "Place CV-qualifiers on the right hand side of the type they apply to [HICPP-7_1_4-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Place CV-qualifiers on the right hand side of the type they apply to [HICPP-7_1_4-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 7.1.4 Place CV-qualifiers on the right hand side of the type they apply to" ] } }, { "id": "HICPP-2_2_1-a", "name": "Do not use the following digraphs: <%, %>, <:, :>, %:, %:%:", "shortDescription": { "text": "Do not use the following digraphs: <%, %>, <:, :>, %:, %:%:" }, "fullDescription": { "text": "Do not use the following digraphs: <%, %>, <:, :>, %:, %:%: [HICPP-2_2_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use the following digraphs: <%, %>, <:, :>, %:, %:%: [HICPP-2_2_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 2.2.1 Do not use digraphs or trigraphs" ] } }, { "id": "HICPP-2_2_1-b", "name": "Trigraphs shall not be used", "shortDescription": { "text": "Trigraphs shall not be used" }, "fullDescription": { "text": "Trigraphs shall not be used [HICPP-2_2_1-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Trigraphs shall not be used [HICPP-2_2_1-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 2.2.1 Do not use digraphs or trigraphs" ] } }, { "id": "HICPP-7_1_3-a", "name": "Do not place type specifiers before non-type specifiers in a declaration", "shortDescription": { "text": "Do not place type specifiers before non-type specifiers in a declaration" }, "fullDescription": { "text": "Do not place type specifiers before non-type specifiers in a declaration [HICPP-7_1_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not place type specifiers before non-type specifiers in a declaration [HICPP-7_1_3-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 7.1.3 Do not place type specifiers before non-type specifiers in a declaration" ] } }, { "id": "HICPP-7_1_6-a", "name": "The plain char type shall be used only for the storage and use of character values", "shortDescription": { "text": "The plain char type shall be used only for the storage and use of character values" }, "fullDescription": { "text": "The plain char type shall be used only for the storage and use of character values [HICPP-7_1_6-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The plain char type shall be used only for the storage and use of character values [HICPP-7_1_6-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 7.1.6 Use class types or typedefs to abstract scalar quantities and standard integer types" ] } }, { "id": "HICPP-7_1_6-b", "name": "The names of the standard signed integer types and standard unsigned integer types should not be used", "shortDescription": { "text": "The names of the standard signed integer types and standard unsigned integer types should not be used" }, "fullDescription": { "text": "The names of the standard signed integer types and standard unsigned integer types should not be used [HICPP-7_1_6-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The names of the standard signed integer types and standard unsigned integer types should not be used [HICPP-7_1_6-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 7.1.6 Use class types or typedefs to abstract scalar quantities and standard integer types" ] } }, { "id": "HICPP-7_1_6-c", "name": "A variable initialized by a constant expression of a standard integer type should not be defined with the 'auto' specifier", "shortDescription": { "text": "A variable initialized by a constant expression of a standard integer type should not be defined with the 'auto' specifier" }, "fullDescription": { "text": "A variable initialized by a constant expression of a standard integer type should not be defined with the 'auto' specifier [HICPP-7_1_6-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A variable initialized by a constant expression of a standard integer type should not be defined with the 'auto' specifier [HICPP-7_1_6-c]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 7.1.6 Use class types or typedefs to abstract scalar quantities and standard integer types" ] } }, { "id": "HICPP-7_1_5-a", "name": "Do not inline large functions", "shortDescription": { "text": "Do not inline large functions" }, "fullDescription": { "text": "Do not inline large functions [HICPP-7_1_5-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not inline large functions [HICPP-7_1_5-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 7.1.5 Do not inline large functions" ] } }, { "id": "HICPP-7_5_1-a", "name": "The 'asm' declaration should not be used", "shortDescription": { "text": "The 'asm' declaration should not be used" }, "fullDescription": { "text": "The 'asm' declaration should not be used [HICPP-7_5_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'asm' declaration should not be used [HICPP-7_5_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 7.5.1 Do not use the asm declaration" ] } }, { "id": "HICPP-7_1_8-a", "name": "Use auto id = expr when declaring a variable that is the same type as the initializer function call", "shortDescription": { "text": "Use auto id = expr when declaring a variable that is the same type as the initializer function call" }, "fullDescription": { "text": "Use auto id = expr when declaring a variable that is the same type as the initializer function call [HICPP-7_1_8-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use auto id = expr when declaring a variable that is the same type as the initializer function call [HICPP-7_1_8-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 7.1.8 Use auto id = expr when declaring a variable to have the same type as its initializer function call" ] } }, { "id": "HICPP-7_1_7-a", "name": "Use a trailing return type syntax if the return type is preceded by the 'typename' keyword", "shortDescription": { "text": "Use a trailing return type syntax if the return type is preceded by the 'typename' keyword" }, "fullDescription": { "text": "Use a trailing return type syntax if the return type is preceded by the 'typename' keyword [HICPP-7_1_7-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use a trailing return type syntax if the return type is preceded by the 'typename' keyword [HICPP-7_1_7-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 7.1.7 Use a trailing return type in preference to type disambiguation using typename" ] } }, { "id": "HICPP-7_1_9-a", "name": "Do not explicitly specify the return type of a lambda", "shortDescription": { "text": "Do not explicitly specify the return type of a lambda" }, "fullDescription": { "text": "Do not explicitly specify the return type of a lambda [HICPP-7_1_9-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not explicitly specify the return type of a lambda [HICPP-7_1_9-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 7.1.9 Do not explicitly specify the return type of a lambda" ] } }, { "id": "HICPP-10_1_1-a", "name": "For multiple inheritance use virtual common base class", "shortDescription": { "text": "For multiple inheritance use virtual common base class" }, "fullDescription": { "text": "For multiple inheritance use virtual common base class [HICPP-10_1_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "For multiple inheritance use virtual common base class [HICPP-10_1_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 10.1.1 Ensure that access to base class subobjects does not require explicit disambiguation" ] } }, { "id": "HICPP-7_1_2-a", "name": "Declare local variable as const whenever possible", "shortDescription": { "text": "Declare local variable as const whenever possible" }, "fullDescription": { "text": "Declare local variable as const whenever possible [HICPP-7_1_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare local variable as const whenever possible [HICPP-7_1_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 7.1.2 Use const whenever possible" ] } }, { "id": "HICPP-7_1_1-a", "name": "Multiple variable declarations shall not be allowed on the same line", "shortDescription": { "text": "Multiple variable declarations shall not be allowed on the same line" }, "fullDescription": { "text": "Multiple variable declarations shall not be allowed on the same line [HICPP-7_1_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Multiple variable declarations shall not be allowed on the same line [HICPP-7_1_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 7.1.1 Declare each identifier on a separate line in a separate declaration" ] } }, { "id": "HICPP-7_1_1-b", "name": "Each variable should be declared in a separate declaration statement", "shortDescription": { "text": "Each variable should be declared in a separate declaration statement" }, "fullDescription": { "text": "Each variable should be declared in a separate declaration statement [HICPP-7_1_1-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each variable should be declared in a separate declaration statement [HICPP-7_1_1-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 7.1.1 Declare each identifier on a separate line in a separate declaration" ] } }, { "id": "HICPP-14_2_2-a", "name": "Overloaded function templates shall not be explicitly specialized", "shortDescription": { "text": "Overloaded function templates shall not be explicitly specialized" }, "fullDescription": { "text": "Overloaded function templates shall not be explicitly specialized [HICPP-14_2_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Overloaded function templates shall not be explicitly specialized [HICPP-14_2_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 14.2.2 Do not explicitly specialize a function template that is overloaded with other templates" ] } }, { "id": "HICPP-17_2_1-b", "name": "The error indicator 'errno' shall not be used", "shortDescription": { "text": "The error indicator 'errno' shall not be used" }, "fullDescription": { "text": "The error indicator 'errno' shall not be used [HICPP-17_2_1-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The error indicator 'errno' shall not be used [HICPP-17_2_1-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 17.2.1 Wrap use of the C Standard Library" ] } }, { "id": "HICPP-17_2_1-a", "name": "Wrap use of the C Standard Library", "shortDescription": { "text": "Wrap use of the C Standard Library" }, "fullDescription": { "text": "Wrap use of the C Standard Library [HICPP-17_2_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Wrap use of the C Standard Library [HICPP-17_2_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 17.2.1 Wrap use of the C Standard Library" ] } }, { "id": "HICPP-3_4_1-a", "name": "The address of an object with automatic storage shall not be returned from a function", "shortDescription": { "text": "The address of an object with automatic storage shall not be returned from a function" }, "fullDescription": { "text": "The address of an object with automatic storage shall not be returned from a function [HICPP-3_4_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The address of an object with automatic storage shall not be returned from a function [HICPP-3_4_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 3.4.1 Do not return a reference or a pointer to an automatic variable defined within the function" ] } }, { "id": "HICPP-14_2_3-a", "name": "Declare 'extern' an explicitly instantiated template", "shortDescription": { "text": "Declare 'extern' an explicitly instantiated template" }, "fullDescription": { "text": "Declare 'extern' an explicitly instantiated template [HICPP-14_2_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare 'extern' an explicitly instantiated template [HICPP-14_2_3-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 14.2.3 Declare extern an explicitly instantiated template" ] } }, { "id": "HICPP-3_4_3-a", "name": "Prefer smart pointers over raw local pointers", "shortDescription": { "text": "Prefer smart pointers over raw local pointers" }, "fullDescription": { "text": "Prefer smart pointers over raw local pointers [HICPP-3_4_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer smart pointers over raw local pointers [HICPP-3_4_3-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 3.4.3 Use RAII for resources" ] } }, { "id": "HICPP-3_4_3-b", "name": "Do not call lock() directly on a mutex", "shortDescription": { "text": "Do not call lock() directly on a mutex" }, "fullDescription": { "text": "Do not call lock() directly on a mutex [HICPP-3_4_3-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not call lock() directly on a mutex [HICPP-3_4_3-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 3.4.3 Use RAII for resources" ] } }, { "id": "HICPP-3_4_3-c", "name": "Use RAII to prevent resource leaks", "shortDescription": { "text": "Use RAII to prevent resource leaks" }, "fullDescription": { "text": "Use RAII to prevent resource leaks [HICPP-3_4_3-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use RAII to prevent resource leaks [HICPP-3_4_3-c]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 3.4.3 Use RAII for resources" ] } }, { "id": "HICPP-14_2_1-a", "name": "All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template", "shortDescription": { "text": "All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template" }, "fullDescription": { "text": "All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template [HICPP-14_2_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template [HICPP-14_2_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 14.2.1 Declare template specializations in the same file as the primary template they specialize." ] } }, { "id": "HICPP-3_4_2-a", "name": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist", "shortDescription": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" }, "fullDescription": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist [HICPP-3_4_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist [HICPP-3_4_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 3.4.2 Do not assign the address of a variable to a pointer with a greater lifetime" ] } }, { "id": "HICPP-4_2_2-f", "name": "Avoid incorrect shift operations", "shortDescription": { "text": "Avoid incorrect shift operations" }, "fullDescription": { "text": "Avoid incorrect shift operations [HICPP-4_2_2-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid incorrect shift operations [HICPP-4_2_2-f]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 4.2.2 Ensure that data loss does not demonstrably occur in an integral expression" ] } }, { "id": "HICPP-4_2_2-a", "name": "The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand", "shortDescription": { "text": "The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" }, "fullDescription": { "text": "The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand [HICPP-4_2_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand [HICPP-4_2_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 4.2.2 Ensure that data loss does not demonstrably occur in an integral expression" ] } }, { "id": "HICPP-4_2_2-b", "name": "Avoid explicit type conversions (casts)", "shortDescription": { "text": "Avoid explicit type conversions (casts)" }, "fullDescription": { "text": "Avoid explicit type conversions (casts) [HICPP-4_2_2-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid explicit type conversions (casts) [HICPP-4_2_2-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 4.2.2 Ensure that data loss does not demonstrably occur in an integral expression" ] } }, { "id": "HICPP-4_2_2-c", "name": "Integer overflow or underflow in constant expression in '+', '-', '*' operator", "shortDescription": { "text": "Integer overflow or underflow in constant expression in '+', '-', '*' operator" }, "fullDescription": { "text": "Integer overflow or underflow in constant expression in '+', '-', '*' operator [HICPP-4_2_2-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Integer overflow or underflow in constant expression in '+', '-', '*' operator [HICPP-4_2_2-c]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 4.2.2 Ensure that data loss does not demonstrably occur in an integral expression" ] } }, { "id": "HICPP-4_2_2-e", "name": "Avoid wraparounds when performing arithmetic integer operations", "shortDescription": { "text": "Avoid wraparounds when performing arithmetic integer operations" }, "fullDescription": { "text": "Avoid wraparounds when performing arithmetic integer operations [HICPP-4_2_2-e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid wraparounds when performing arithmetic integer operations [HICPP-4_2_2-e]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 4.2.2 Ensure that data loss does not demonstrably occur in an integral expression" ] } }, { "id": "HICPP-4_2_2-d", "name": "Integer overflow or underflow in constant expression in '<<' operator", "shortDescription": { "text": "Integer overflow or underflow in constant expression in '<<' operator" }, "fullDescription": { "text": "Integer overflow or underflow in constant expression in '<<' operator [HICPP-4_2_2-d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Integer overflow or underflow in constant expression in '<<' operator [HICPP-4_2_2-d]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 4.2.2 Ensure that data loss does not demonstrably occur in an integral expression" ] } }, { "id": "HICPP-4_2_1-a", "name": "Apply the U suffix to literals used in a context that requires an unsigned integral expression", "shortDescription": { "text": "Apply the U suffix to literals used in a context that requires an unsigned integral expression" }, "fullDescription": { "text": "Apply the U suffix to literals used in a context that requires an unsigned integral expression [HICPP-4_2_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Apply the U suffix to literals used in a context that requires an unsigned integral expression [HICPP-4_2_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 4.2.1 Ensure that the U suffix is applied to a literal used in a context requiring an unsigned integral expression" ] } }, { "id": "HICPP-8_3_4-a", "name": "Define =delete functions with parameters of type rvalue reference to const", "shortDescription": { "text": "Define =delete functions with parameters of type rvalue reference to const" }, "fullDescription": { "text": "Define =delete functions with parameters of type rvalue reference to const [HICPP-8_3_4-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Define =delete functions with parameters of type rvalue reference to const [HICPP-8_3_4-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 8.3.4 Define =delete functions with parameters of type rvalue reference to const" ] } }, { "id": "HICPP-8_3_3-a", "name": "Do not use default arguments", "shortDescription": { "text": "Do not use default arguments" }, "fullDescription": { "text": "Do not use default arguments [HICPP-8_3_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use default arguments [HICPP-8_3_3-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 8.3.3 Do not use default arguments" ] } }, { "id": "HICPP-8_3_1-a", "name": "Follow the Cyclomatic Complexity limit of 10", "shortDescription": { "text": "Follow the Cyclomatic Complexity limit of 10" }, "fullDescription": { "text": "Follow the Cyclomatic Complexity limit of 10 [HICPP-8_3_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Follow the Cyclomatic Complexity limit of 10 [HICPP-8_3_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 8.3.1 Do not write functions with an excessive McCabe Cyclomatic Complexity" ] } }, { "id": "HICPP-18_4_1-a", "name": "Do not use std::condition_variable_any on a std::mutex", "shortDescription": { "text": "Do not use std::condition_variable_any on a std::mutex" }, "fullDescription": { "text": "Do not use std::condition_variable_any on a std::mutex [HICPP-18_4_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use std::condition_variable_any on a std::mutex [HICPP-18_4_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 18.4.1 Do not use std::condition variable any on a std::mutex" ] } }, { "id": "HICPP-5_4_3-a", "name": "Down casting (casting from base to derived class) shall not be allowed", "shortDescription": { "text": "Down casting (casting from base to derived class) shall not be allowed" }, "fullDescription": { "text": "Down casting (casting from base to derived class) shall not be allowed [HICPP-5_4_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Down casting (casting from base to derived class) shall not be allowed [HICPP-5_4_3-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.4.3 Do not convert from a base class to a derived class" ] } }, { "id": "HICPP-5_4_2-a", "name": "Do not cast an expression to an enumeration type", "shortDescription": { "text": "Do not cast an expression to an enumeration type" }, "fullDescription": { "text": "Do not cast an expression to an enumeration type [HICPP-5_4_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not cast an expression to an enumeration type [HICPP-5_4_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.4.2 Do not cast an expression to an enumeration type" ] } }, { "id": "HICPP-5_8_1-a", "name": "The conditional operator should not be used as a sub-expression", "shortDescription": { "text": "The conditional operator should not be used as a sub-expression" }, "fullDescription": { "text": "The conditional operator should not be used as a sub-expression [HICPP-5_8_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The conditional operator should not be used as a sub-expression [HICPP-5_8_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.8.1 Do not use the conditional operator (?:) as a sub-expression" ] } }, { "id": "HICPP-5_4_1-a", "name": "C-style casts should not be used", "shortDescription": { "text": "C-style casts should not be used" }, "fullDescription": { "text": "C-style casts should not be used [HICPP-5_4_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "C-style casts should not be used [HICPP-5_4_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.4.1 Only use casting forms: static cast (excl. void*), dynamic cast or explicit constructor call" ] } }, { "id": "HICPP-5_4_1-b", "name": "Avoid using reinterpret_cast", "shortDescription": { "text": "Avoid using reinterpret_cast" }, "fullDescription": { "text": "Avoid using reinterpret_cast [HICPP-5_4_1-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid using reinterpret_cast [HICPP-5_4_1-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.4.1 Only use casting forms: static cast (excl. void*), dynamic cast or explicit constructor call" ] } }, { "id": "HICPP-5_4_1-c", "name": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference", "shortDescription": { "text": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" }, "fullDescription": { "text": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference [HICPP-5_4_1-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference [HICPP-5_4_1-c]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.4.1 Only use casting forms: static cast (excl. void*), dynamic cast or explicit constructor call" ] } }, { "id": "HICPP-9_1_5-a", "name": "Do not introduce virtual functions in a final class", "shortDescription": { "text": "Do not introduce virtual functions in a final class" }, "fullDescription": { "text": "Do not introduce virtual functions in a final class [HICPP-9_1_5-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not introduce virtual functions in a final class [HICPP-9_1_5-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 9.1.5 Do not introduce virtual functions in a final class" ] } }, { "id": "HICPP-17_1_1-a", "name": "Avoid using vector<bool>", "shortDescription": { "text": "Avoid using vector<bool>" }, "fullDescription": { "text": "Avoid using vector<bool> [HICPP-17_1_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid using vector<bool> [HICPP-17_1_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 17.1.1 Do not use std::vector<bool>" ] } }, { "id": "HICPP-9_1_3-a", "name": "Const member functions shall not return non-const pointers or references to class-data", "shortDescription": { "text": "Const member functions shall not return non-const pointers or references to class-data" }, "fullDescription": { "text": "Const member functions shall not return non-const pointers or references to class-data [HICPP-9_1_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Const member functions shall not return non-const pointers or references to class-data [HICPP-9_1_3-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 9.1.3 Do not return non-const handles to class data from const member functions" ] } }, { "id": "HICPP-9_1_4-a", "name": "Public member functions shall not return non-const handles to private\/protected class-data", "shortDescription": { "text": "Public member functions shall not return non-const handles to private\/protected class-data" }, "fullDescription": { "text": "Public member functions shall not return non-const handles to private\/protected class-data [HICPP-9_1_4-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Public member functions shall not return non-const handles to private\/protected class-data [HICPP-9_1_4-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 9.1.4 Do not write member functions which return non-const handles to data less accessible than the member function" ] } }, { "id": "HICPP-9_1_1-a", "name": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const", "shortDescription": { "text": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" }, "fullDescription": { "text": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const [HICPP-9_1_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const [HICPP-9_1_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 9.1.1 Declare static any member function that does not require this. Alternatively, declare const any member function that does not modify the externally visible state of the object" ] } }, { "id": "HICPP-9_1_2-a", "name": "Do not redefine an inherited virtual function with a different default parameter value", "shortDescription": { "text": "Do not redefine an inherited virtual function with a different default parameter value" }, "fullDescription": { "text": "Do not redefine an inherited virtual function with a different default parameter value [HICPP-9_1_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not redefine an inherited virtual function with a different default parameter value [HICPP-9_1_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 9.1.2 Make default arguments the same or absent when overriding a virtual function" ] } }, { "id": "HICPP-1_3_4-a", "name": "Do not use deprecated STL library features", "shortDescription": { "text": "Do not use deprecated STL library features" }, "fullDescription": { "text": "Do not use deprecated STL library features [HICPP-1_3_4-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use deprecated STL library features [HICPP-1_3_4-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 1.3.4 Do not use deprecated STL library features" ] } }, { "id": "HICPP-1_3_3-a", "name": "The C library shall not be used", "shortDescription": { "text": "The C library shall not be used" }, "fullDescription": { "text": "The C library shall not be used [HICPP-1_3_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The C library shall not be used [HICPP-1_3_3-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 1.3.3 Do not use the C Standard Library .h headers" ] } }, { "id": "HICPP-6_2_4-a", "name": "The third clause of a 'for' statement shall be well-formed", "shortDescription": { "text": "The third clause of a 'for' statement shall be well-formed" }, "fullDescription": { "text": "The third clause of a 'for' statement shall be well-formed [HICPP-6_2_4-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The third clause of a 'for' statement shall be well-formed [HICPP-6_2_4-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 6.2.4 Only modify a for loop counter in the for expression" ] } }, { "id": "HICPP-1_3_5-a", "name": "Do not use throw exception specifications", "shortDescription": { "text": "Do not use throw exception specifications" }, "fullDescription": { "text": "Do not use throw exception specifications [HICPP-1_3_5-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use throw exception specifications [HICPP-1_3_5-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 1.3.5 Do not use throw exception specifications" ] } }, { "id": "HICPP-6_2_3-a", "name": "Do not modify for loop counter within a body of the loop", "shortDescription": { "text": "Do not modify for loop counter within a body of the loop" }, "fullDescription": { "text": "Do not modify for loop counter within a body of the loop [HICPP-6_2_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not modify for loop counter within a body of the loop [HICPP-6_2_3-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 6.2.3 Do not alter a control or counter variable more than once in a loop" ] } }, { "id": "HICPP-12_2_1-a", "name": "Make destructors virtual in base classes", "shortDescription": { "text": "Make destructors virtual in base classes" }, "fullDescription": { "text": "Make destructors virtual in base classes [HICPP-12_2_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Make destructors virtual in base classes [HICPP-12_2_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 12.2.1 Declare virtual, private or protected the destructor of a type used as a base class" ] } }, { "id": "HICPP-1_3_2-a", "name": "The 'register' storage class specifier shall not be used", "shortDescription": { "text": "The 'register' storage class specifier shall not be used" }, "fullDescription": { "text": "The 'register' storage class specifier shall not be used [HICPP-1_3_2-a]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "The 'register' storage class specifier shall not be used [HICPP-1_3_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 1.3.2 Do not use the register keyword" ] } }, { "id": "HICPP-1_3_1-a", "name": "Do not use the increment operator (++) on an operand of type 'bool'", "shortDescription": { "text": "Do not use the increment operator (++) on an operand of type 'bool'" }, "fullDescription": { "text": "Do not use the increment operator (++) on an operand of type 'bool' [HICPP-1_3_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use the increment operator (++) on an operand of type 'bool' [HICPP-1_3_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 1.3.1 Do not use the increment operator (++) on a variable of type bool" ] } }, { "id": "HICPP-6_2_2-a", "name": "There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body", "shortDescription": { "text": "There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" }, "fullDescription": { "text": "There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body [HICPP-6_2_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body [HICPP-6_2_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 6.2.2 Ensure that a loop has a single loop counter, an optional control variable, and is not degenerate" ] } }, { "id": "HICPP-6_2_1-a", "name": "A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used", "shortDescription": { "text": "A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" }, "fullDescription": { "text": "A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used [HICPP-6_2_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used [HICPP-6_2_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 6.2.1 Implement a loop that only uses element values as a range-based loop" ] } }, { "id": "INIT-05", "name": "Do not initialize a reference to an object whose address can be changed", "shortDescription": { "text": "Do not initialize a reference to an object whose address can be changed" }, "fullDescription": { "text": "Do not initialize a reference to an object whose address can be changed [INIT-05]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not initialize a reference to an object whose address can be changed [INIT-05]" }, "properties": { "tags": [ "Initialization" ] } }, { "id": "INIT-06", "name": "All member variables should be initialized in constructor", "shortDescription": { "text": "All member variables should be initialized in constructor" }, "fullDescription": { "text": "All member variables should be initialized in constructor [INIT-06]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All member variables should be initialized in constructor [INIT-06]" }, "properties": { "tags": [ "Initialization" ] } }, { "id": "INIT-09", "name": "Initialize static class members", "shortDescription": { "text": "Initialize static class members" }, "fullDescription": { "text": "Initialize static class members [INIT-09]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Initialize static class members [INIT-09]" }, "properties": { "tags": [ "Initialization" ] } }, { "id": "INIT-13_a", "name": "Do not use uninitialized nonstatic member variables in base class constructors", "shortDescription": { "text": "Do not use uninitialized nonstatic member variables in base class constructors" }, "fullDescription": { "text": "Do not use uninitialized nonstatic member variables in base class constructors [INIT-13_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use uninitialized nonstatic member variables in base class constructors [INIT-13_a]" }, "properties": { "tags": [ "Initialization" ] } }, { "id": "INIT-13_b", "name": "Do not use uninitialized nonstatic member variables of nonvirtual base classes in virtual base class constructors", "shortDescription": { "text": "Do not use uninitialized nonstatic member variables of nonvirtual base classes in virtual base class constructors" }, "fullDescription": { "text": "Do not use uninitialized nonstatic member variables of nonvirtual base classes in virtual base class constructors [INIT-13_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use uninitialized nonstatic member variables of nonvirtual base classes in virtual base class constructors [INIT-13_b]" }, "properties": { "tags": [ "Initialization" ] } }, { "id": "INIT-04", "name": "Initialize all pointer variables", "shortDescription": { "text": "Initialize all pointer variables" }, "fullDescription": { "text": "Initialize all pointer variables [INIT-04]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Initialize all pointer variables [INIT-04]" }, "properties": { "tags": [ "Initialization" ] } }, { "id": "INIT-11", "name": "An assignment operator shall assign all data members", "shortDescription": { "text": "An assignment operator shall assign all data members" }, "fullDescription": { "text": "An assignment operator shall assign all data members [INIT-11]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An assignment operator shall assign all data members [INIT-11]" }, "properties": { "tags": [ "Initialization" ] } }, { "id": "INIT-01", "name": "Objects with external linkage should not be initialized in a header file", "shortDescription": { "text": "Objects with external linkage should not be initialized in a header file" }, "fullDescription": { "text": "Objects with external linkage should not be initialized in a header file [INIT-01]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Objects with external linkage should not be initialized in a header file [INIT-01]" }, "properties": { "tags": [ "Initialization" ] } }, { "id": "INIT-02", "name": "Do not initialize unsigned integer variables with signed constants", "shortDescription": { "text": "Do not initialize unsigned integer variables with signed constants" }, "fullDescription": { "text": "Do not initialize unsigned integer variables with signed constants [INIT-02]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not initialize unsigned integer variables with signed constants [INIT-02]" }, "properties": { "tags": [ "Initialization" ] } }, { "id": "INIT-03", "name": "Initialize all variables", "shortDescription": { "text": "Initialize all variables" }, "fullDescription": { "text": "Initialize all variables [INIT-03]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Initialize all variables [INIT-03]" }, "properties": { "tags": [ "Initialization" ] } }, { "id": "INIT-07", "name": "Make class members' initialization explicit by providing user-defined constructor", "shortDescription": { "text": "Make class members' initialization explicit by providing user-defined constructor" }, "fullDescription": { "text": "Make class members' initialization explicit by providing user-defined constructor [INIT-07]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Make class members' initialization explicit by providing user-defined constructor [INIT-07]" }, "properties": { "tags": [ "Initialization" ] } }, { "id": "INIT-08", "name": "User-defined constructor must be provided to ensure the proper initialization of dynamically allocated class objects", "shortDescription": { "text": "User-defined constructor must be provided to ensure the proper initialization of dynamically allocated class objects" }, "fullDescription": { "text": "User-defined constructor must be provided to ensure the proper initialization of dynamically allocated class objects [INIT-08]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "User-defined constructor must be provided to ensure the proper initialization of dynamically allocated class objects [INIT-08]" }, "properties": { "tags": [ "Initialization" ] } }, { "id": "INIT-10", "name": "List members in an initialization list in the order in which they are declared", "shortDescription": { "text": "List members in an initialization list in the order in which they are declared" }, "fullDescription": { "text": "List members in an initialization list in the order in which they are declared [INIT-10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "List members in an initialization list in the order in which they are declared [INIT-10]" }, "properties": { "tags": [ "Initialization" ] } }, { "id": "INIT-12", "name": "Avoid initialization order problems across translation units by replacing non-local static objects with local static objects", "shortDescription": { "text": "Avoid initialization order problems across translation units by replacing non-local static objects with local static objects" }, "fullDescription": { "text": "Avoid initialization order problems across translation units by replacing non-local static objects with local static objects [INIT-12]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid initialization order problems across translation units by replacing non-local static objects with local static objects [INIT-12]" }, "properties": { "tags": [ "Initialization" ] } }, { "id": "INIT-13", "name": "Do not assume that members are initialized in any special order in constructors", "shortDescription": { "text": "Do not assume that members are initialized in any special order in constructors" }, "fullDescription": { "text": "Do not assume that members are initialized in any special order in constructors [INIT-13]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not assume that members are initialized in any special order in constructors [INIT-13]" }, "properties": { "tags": [ "Initialization" ] } }, { "id": "INIT-13_c", "name": "Do not use possibly uninitialized nonstatic member variables of base classes in base class constructors", "shortDescription": { "text": "Do not use possibly uninitialized nonstatic member variables of base classes in base class constructors" }, "fullDescription": { "text": "Do not use possibly uninitialized nonstatic member variables of base classes in base class constructors [INIT-13_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use possibly uninitialized nonstatic member variables of base classes in base class constructors [INIT-13_c]" }, "properties": { "tags": [ "Initialization" ] } }, { "id": "INIT-16", "name": "The initializer for an aggregate or union shall be enclosed in braces", "shortDescription": { "text": "The initializer for an aggregate or union shall be enclosed in braces" }, "fullDescription": { "text": "The initializer for an aggregate or union shall be enclosed in braces [INIT-16]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The initializer for an aggregate or union shall be enclosed in braces [INIT-16]" }, "properties": { "tags": [ "Initialization" ] } }, { "id": "INIT-17", "name": "The data members initialized with the same constant values across all constructors should be initialized using NSDMI", "shortDescription": { "text": "The data members initialized with the same constant values across all constructors should be initialized using NSDMI" }, "fullDescription": { "text": "The data members initialized with the same constant values across all constructors should be initialized using NSDMI [INIT-17]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The data members initialized with the same constant values across all constructors should be initialized using NSDMI [INIT-17]" }, "properties": { "tags": [ "Initialization" ] } }, { "id": "INIT-15", "name": "Consider adding constructor to initialize 'struct' member variables", "shortDescription": { "text": "Consider adding constructor to initialize 'struct' member variables" }, "fullDescription": { "text": "Consider adding constructor to initialize 'struct' member variables [INIT-15]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Consider adding constructor to initialize 'struct' member variables [INIT-15]" }, "properties": { "tags": [ "Initialization" ] } }, { "id": "INIT-14", "name": "Prefer initialization to assignment in constructors", "shortDescription": { "text": "Prefer initialization to assignment in constructors" }, "fullDescription": { "text": "Prefer initialization to assignment in constructors [INIT-14]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Prefer initialization to assignment in constructors [INIT-14]" }, "properties": { "tags": [ "Initialization" ] } }, { "id": "JSF-003", "name": "All functions shall have a cyclomatic complexity number of 20 or less", "shortDescription": { "text": "All functions shall have a cyclomatic complexity number of 20 or less" }, "fullDescription": { "text": "All functions shall have a cyclomatic complexity number of 20 or less [JSF-003]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All functions shall have a cyclomatic complexity number of 20 or less [JSF-003]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-003_b", "name": "Follow the Essential Complexity limit of 1", "shortDescription": { "text": "Follow the Essential Complexity limit of 1" }, "fullDescription": { "text": "Follow the Essential Complexity limit of 1 [JSF-003_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Follow the Essential Complexity limit of 1 [JSF-003_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-014", "name": "Capital 'L' shall be used instead of lowercase 'l' to indicate long", "shortDescription": { "text": "Capital 'L' shall be used instead of lowercase 'l' to indicate long" }, "fullDescription": { "text": "Capital 'L' shall be used instead of lowercase 'l' to indicate long [JSF-014]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Capital 'L' shall be used instead of lowercase 'l' to indicate long [JSF-014]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-015", "name": "Ensure that array indices are within the bounds of the array", "shortDescription": { "text": "Ensure that array indices are within the bounds of the array" }, "fullDescription": { "text": "Ensure that array indices are within the bounds of the array [JSF-015]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure that array indices are within the bounds of the array [JSF-015]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-017", "name": "The error indicator 'errno' shall not be used", "shortDescription": { "text": "The error indicator 'errno' shall not be used" }, "fullDescription": { "text": "The error indicator 'errno' shall not be used [JSF-017]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The error indicator 'errno' shall not be used [JSF-017]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-018", "name": "The macro 'offsetof', in library <stddef.h>, shall not be used", "shortDescription": { "text": "The macro 'offsetof', in library <stddef.h>, shall not be used" }, "fullDescription": { "text": "The macro 'offsetof', in library <stddef.h>, shall not be used [JSF-018]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The macro 'offsetof', in library <stddef.h>, shall not be used [JSF-018]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-019", "name": "'setlocale' function shall not be used", "shortDescription": { "text": "'setlocale' function shall not be used" }, "fullDescription": { "text": "'setlocale' function shall not be used [JSF-019]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "'setlocale' function shall not be used [JSF-019]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-019_b", "name": "<locale.h> shall not be used", "shortDescription": { "text": "<locale.h> shall not be used" }, "fullDescription": { "text": "<locale.h> shall not be used [JSF-019_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "<locale.h> shall not be used [JSF-019_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-020", "name": "The 'setjmp' macro and the 'longjmp' function shall not be used", "shortDescription": { "text": "The 'setjmp' macro and the 'longjmp' function shall not be used" }, "fullDescription": { "text": "The 'setjmp' macro and the 'longjmp' function shall not be used [JSF-020]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'setjmp' macro and the 'longjmp' function shall not be used [JSF-020]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-020_b", "name": "The standard header file <setjmp.h> shall not be used", "shortDescription": { "text": "The standard header file <setjmp.h> shall not be used" }, "fullDescription": { "text": "The standard header file <setjmp.h> shall not be used [JSF-020_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The standard header file <setjmp.h> shall not be used [JSF-020_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-021", "name": "The standard header file <signal.h> shall not be used", "shortDescription": { "text": "The standard header file <signal.h> shall not be used" }, "fullDescription": { "text": "The standard header file <signal.h> shall not be used [JSF-021]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The standard header file <signal.h> shall not be used [JSF-021]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-021_b", "name": "The signal handling facilities of <signal.h> shall not be used", "shortDescription": { "text": "The signal handling facilities of <signal.h> shall not be used" }, "fullDescription": { "text": "The signal handling facilities of <signal.h> shall not be used [JSF-021_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The signal handling facilities of <signal.h> shall not be used [JSF-021_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-022", "name": "The input\/output library <stdio.h> shall not be used", "shortDescription": { "text": "The input\/output library <stdio.h> shall not be used" }, "fullDescription": { "text": "The input\/output library <stdio.h> shall not be used [JSF-022]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The input\/output library <stdio.h> shall not be used [JSF-022]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-023", "name": "The library functions atof, atoi and atol from library <stdlib.h> shall not be used", "shortDescription": { "text": "The library functions atof, atoi and atol from library <stdlib.h> shall not be used" }, "fullDescription": { "text": "The library functions atof, atoi and atol from library <stdlib.h> shall not be used [JSF-023]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The library functions atof, atoi and atol from library <stdlib.h> shall not be used [JSF-023]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-024", "name": "The library function 'abort' of <stdlib.h> shall not be used", "shortDescription": { "text": "The library function 'abort' of <stdlib.h> shall not be used" }, "fullDescription": { "text": "The library function 'abort' of <stdlib.h> shall not be used [JSF-024]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The library function 'abort' of <stdlib.h> shall not be used [JSF-024]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-024_b", "name": "The library function 'exit' of <stdlib.h> shall not be used", "shortDescription": { "text": "The library function 'exit' of <stdlib.h> shall not be used" }, "fullDescription": { "text": "The library function 'exit' of <stdlib.h> shall not be used [JSF-024_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The library function 'exit' of <stdlib.h> shall not be used [JSF-024_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-024_c", "name": "The library function 'getenv' of <stdlib.h> shall not be used", "shortDescription": { "text": "The library function 'getenv' of <stdlib.h> shall not be used" }, "fullDescription": { "text": "The library function 'getenv' of <stdlib.h> shall not be used [JSF-024_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The library function 'getenv' of <stdlib.h> shall not be used [JSF-024_c]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-024_d", "name": "The library function 'system' of <stdlib.h> shall not be used", "shortDescription": { "text": "The library function 'system' of <stdlib.h> shall not be used" }, "fullDescription": { "text": "The library function 'system' of <stdlib.h> shall not be used [JSF-024_d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The library function 'system' of <stdlib.h> shall not be used [JSF-024_d]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-025", "name": "The time handling functions of library <time.h> shall not be used", "shortDescription": { "text": "The time handling functions of library <time.h> shall not be used" }, "fullDescription": { "text": "The time handling functions of library <time.h> shall not be used [JSF-025]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The time handling functions of library <time.h> shall not be used [JSF-025]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-026", "name": "The #ifdef, #else, #elif preprocessor directives should not be used", "shortDescription": { "text": "The #ifdef, #else, #elif preprocessor directives should not be used" }, "fullDescription": { "text": "The #ifdef, #else, #elif preprocessor directives should not be used [JSF-026]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The #ifdef, #else, #elif preprocessor directives should not be used [JSF-026]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-026_b", "name": "The #if preprocessor directive should not be used", "shortDescription": { "text": "The #if preprocessor directive should not be used" }, "fullDescription": { "text": "The #if preprocessor directive should not be used [JSF-026_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The #if preprocessor directive should not be used [JSF-026_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-026_c", "name": "#error directive shall not be used", "shortDescription": { "text": "#error directive shall not be used" }, "fullDescription": { "text": "#error directive shall not be used [JSF-026_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "#error directive shall not be used [JSF-026_c]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-026_d", "name": "The #pragma directive shall not be used", "shortDescription": { "text": "The #pragma directive shall not be used" }, "fullDescription": { "text": "The #pragma directive shall not be used [JSF-026_d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The #pragma directive shall not be used [JSF-026_d]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-026_e", "name": "#undef shall not be used", "shortDescription": { "text": "#undef shall not be used" }, "fullDescription": { "text": "#undef shall not be used [JSF-026_e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "#undef shall not be used [JSF-026_e]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-029", "name": "The #define pre-processor directive shall not be used to create inline macros", "shortDescription": { "text": "The #define pre-processor directive shall not be used to create inline macros" }, "fullDescription": { "text": "The #define pre-processor directive shall not be used to create inline macros [JSF-029]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The #define pre-processor directive shall not be used to create inline macros [JSF-029]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-030", "name": "The #define pre-processor directive shall not be used to define constant values", "shortDescription": { "text": "The #define pre-processor directive shall not be used to define constant values" }, "fullDescription": { "text": "The #define pre-processor directive shall not be used to define constant values [JSF-030]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The #define pre-processor directive shall not be used to define constant values [JSF-030]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-033", "name": "The #include directive shall use the <filename.h> notation to include header files", "shortDescription": { "text": "The #include directive shall use the <filename.h> notation to include header files" }, "fullDescription": { "text": "The #include directive shall use the <filename.h> notation to include header files [JSF-033]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The #include directive shall use the <filename.h> notation to include header files [JSF-033]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-046_a", "name": "User-specified C++ external identifiers should differ in the first 64 characters", "shortDescription": { "text": "User-specified C++ external identifiers should differ in the first 64 characters" }, "fullDescription": { "text": "User-specified C++ external identifiers should differ in the first 64 characters [JSF-046_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "User-specified C++ external identifiers should differ in the first 64 characters [JSF-046_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-046_b", "name": "User-specified C++ internal identifiers should differ from external identifiers in the first 64 characters", "shortDescription": { "text": "User-specified C++ internal identifiers should differ from external identifiers in the first 64 characters" }, "fullDescription": { "text": "User-specified C++ internal identifiers should differ from external identifiers in the first 64 characters [JSF-046_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "User-specified C++ internal identifiers should differ from external identifiers in the first 64 characters [JSF-046_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-046_c", "name": "User-specified C++ internal identifiers declared in the same scope should differ in the first 64 characters", "shortDescription": { "text": "User-specified C++ internal identifiers declared in the same scope should differ in the first 64 characters" }, "fullDescription": { "text": "User-specified C++ internal identifiers declared in the same scope should differ in the first 64 characters [JSF-046_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "User-specified C++ internal identifiers declared in the same scope should differ in the first 64 characters [JSF-046_c]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-052", "name": "Identifiers for constant and enumerator values shall be lowercase", "shortDescription": { "text": "Identifiers for constant and enumerator values shall be lowercase" }, "fullDescription": { "text": "Identifiers for constant and enumerator values shall be lowercase [JSF-052]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers for constant and enumerator values shall be lowercase [JSF-052]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-053.1", "name": "The following character sequences shall not appear in header file names: ', \\, \/*, \/\/, or \" ", "shortDescription": { "text": "The following character sequences shall not appear in header file names: ', \\, \/*, \/\/, or \" " }, "fullDescription": { "text": "The following character sequences shall not appear in header file names: ', \\, \/*, \/\/, or \"  [JSF-053.1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The following character sequences shall not appear in header file names: ', \\, \/*, \/\/, or \"  [JSF-053.1]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-059_a", "name": "The statements forming the body of a 'while', 'do...while', 'switch' or 'for' statement shall always be enclosed in braces", "shortDescription": { "text": "The statements forming the body of a 'while', 'do...while', 'switch' or 'for' statement shall always be enclosed in braces" }, "fullDescription": { "text": "The statements forming the body of a 'while', 'do...while', 'switch' or 'for' statement shall always be enclosed in braces [JSF-059_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The statements forming the body of a 'while', 'do...while', 'switch' or 'for' statement shall always be enclosed in braces [JSF-059_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-059_b", "name": "The statements forming the body of an 'if', 'else if' or 'else' statement shall always be enclosed in braces", "shortDescription": { "text": "The statements forming the body of an 'if', 'else if' or 'else' statement shall always be enclosed in braces" }, "fullDescription": { "text": "The statements forming the body of an 'if', 'else if' or 'else' statement shall always be enclosed in braces [JSF-059_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The statements forming the body of an 'if', 'else if' or 'else' statement shall always be enclosed in braces [JSF-059_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-068", "name": "Declare both private copy constructor and copy assignment operator at the same time", "shortDescription": { "text": "Declare both private copy constructor and copy assignment operator at the same time" }, "fullDescription": { "text": "Declare both private copy constructor and copy assignment operator at the same time [JSF-068]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Declare both private copy constructor and copy assignment operator at the same time [JSF-068]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-070.1", "name": "Freed memory shall not be accessed under any circumstances", "shortDescription": { "text": "Freed memory shall not be accessed under any circumstances" }, "fullDescription": { "text": "Freed memory shall not be accessed under any circumstances [JSF-070.1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Freed memory shall not be accessed under any circumstances [JSF-070.1]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-070.1_b", "name": "Destructor shall not be called manually", "shortDescription": { "text": "Destructor shall not be called manually" }, "fullDescription": { "text": "Destructor shall not be called manually [JSF-070.1_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Destructor shall not be called manually [JSF-070.1_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-071", "name": "Public and protected methods shall not be invoked by class constructor", "shortDescription": { "text": "Public and protected methods shall not be invoked by class constructor" }, "fullDescription": { "text": "Public and protected methods shall not be invoked by class constructor [JSF-071]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Public and protected methods shall not be invoked by class constructor [JSF-071]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-071.1", "name": "A class's virtual functions shall not be invoked from any of its constructors", "shortDescription": { "text": "A class's virtual functions shall not be invoked from any of its constructors" }, "fullDescription": { "text": "A class's virtual functions shall not be invoked from any of its constructors [JSF-071.1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A class's virtual functions shall not be invoked from any of its constructors [JSF-071.1]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-071.1_b", "name": "A class's virtual functions shall not be invoked from its destructor", "shortDescription": { "text": "A class's virtual functions shall not be invoked from its destructor" }, "fullDescription": { "text": "A class's virtual functions shall not be invoked from its destructor [JSF-071.1_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A class's virtual functions shall not be invoked from its destructor [JSF-071.1_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-071_b", "name": "All member variables shall be initialized in constructor", "shortDescription": { "text": "All member variables shall be initialized in constructor" }, "fullDescription": { "text": "All member variables shall be initialized in constructor [JSF-071_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All member variables shall be initialized in constructor [JSF-071_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-071_c", "name": "A class's virtual functions shall not be invoked from any of its constructors", "shortDescription": { "text": "A class's virtual functions shall not be invoked from any of its constructors" }, "fullDescription": { "text": "A class's virtual functions shall not be invoked from any of its constructors [JSF-071_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A class's virtual functions shall not be invoked from any of its constructors [JSF-071_c]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-071_d", "name": "Uninitialized nonstatic member variables shall not be used in base class constructors", "shortDescription": { "text": "Uninitialized nonstatic member variables shall not be used in base class constructors" }, "fullDescription": { "text": "Uninitialized nonstatic member variables shall not be used in base class constructors [JSF-071_d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Uninitialized nonstatic member variables shall not be used in base class constructors [JSF-071_d]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-071_e", "name": "Uninitialized nonstatic member variables of nonvirtual base classes shall not be used in virtual base class constructors", "shortDescription": { "text": "Uninitialized nonstatic member variables of nonvirtual base classes shall not be used in virtual base class constructors" }, "fullDescription": { "text": "Uninitialized nonstatic member variables of nonvirtual base classes shall not be used in virtual base class constructors [JSF-071_e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Uninitialized nonstatic member variables of nonvirtual base classes shall not be used in virtual base class constructors [JSF-071_e]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-071_f", "name": "Possibly uninitialized nonstatic member variables of base classes shall not be used in base class constructors", "shortDescription": { "text": "Possibly uninitialized nonstatic member variables of base classes shall not be used in base class constructors" }, "fullDescription": { "text": "Possibly uninitialized nonstatic member variables of base classes shall not be used in base class constructors [JSF-071_f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Possibly uninitialized nonstatic member variables of base classes shall not be used in base class constructors [JSF-071_f]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-075", "name": "Members of the initialization list shall be listed in the order in which they are declared in the class", "shortDescription": { "text": "Members of the initialization list shall be listed in the order in which they are declared in the class" }, "fullDescription": { "text": "Members of the initialization list shall be listed in the order in which they are declared in the class [JSF-075]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Members of the initialization list shall be listed in the order in which they are declared in the class [JSF-075]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-076", "name": "A copy constructor and a copy assignment operator shall be declared for classes that contain pointers to data items or nontrivial destructors", "shortDescription": { "text": "A copy constructor and a copy assignment operator shall be declared for classes that contain pointers to data items or nontrivial destructors" }, "fullDescription": { "text": "A copy constructor and a copy assignment operator shall be declared for classes that contain pointers to data items or nontrivial destructors [JSF-076]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A copy constructor and a copy assignment operator shall be declared for classes that contain pointers to data items or nontrivial destructors [JSF-076]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-077", "name": "A copy constructor shall copy all data members and bases", "shortDescription": { "text": "A copy constructor shall copy all data members and bases" }, "fullDescription": { "text": "A copy constructor shall copy all data members and bases [JSF-077]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A copy constructor shall copy all data members and bases [JSF-077]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-077.1", "name": "The definition of a constructor shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor", "shortDescription": { "text": "The definition of a constructor shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor" }, "fullDescription": { "text": "The definition of a constructor shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor [JSF-077.1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The definition of a constructor shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor [JSF-077.1]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-078", "name": "All base classes with a virtual function shall define a virtual destructor", "shortDescription": { "text": "All base classes with a virtual function shall define a virtual destructor" }, "fullDescription": { "text": "All base classes with a virtual function shall define a virtual destructor [JSF-078]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All base classes with a virtual function shall define a virtual destructor [JSF-078]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-079", "name": "Call fclose() on pointer member in destructor if the pointer was used to open a file", "shortDescription": { "text": "Call fclose() on pointer member in destructor if the pointer was used to open a file" }, "fullDescription": { "text": "Call fclose() on pointer member in destructor if the pointer was used to open a file [JSF-079]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Call fclose() on pointer member in destructor if the pointer was used to open a file [JSF-079]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-079_b", "name": "Call delete on pointer members in destructors", "shortDescription": { "text": "Call delete on pointer members in destructors" }, "fullDescription": { "text": "Call delete on pointer members in destructors [JSF-079_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Call delete on pointer members in destructors [JSF-079_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-081", "name": "The assignment operator shall handle self-assignment correctly", "shortDescription": { "text": "The assignment operator shall handle self-assignment correctly" }, "fullDescription": { "text": "The assignment operator shall handle self-assignment correctly [JSF-081]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The assignment operator shall handle self-assignment correctly [JSF-081]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-082", "name": "An assignment operator shall return a reference to *this", "shortDescription": { "text": "An assignment operator shall return a reference to *this" }, "fullDescription": { "text": "An assignment operator shall return a reference to *this [JSF-082]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An assignment operator shall return a reference to *this [JSF-082]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-083_a", "name": "An assignment operator shall assign all data members", "shortDescription": { "text": "An assignment operator shall assign all data members" }, "fullDescription": { "text": "An assignment operator shall assign all data members [JSF-083_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An assignment operator shall assign all data members [JSF-083_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-083_b", "name": "An assignment operator shall assign all data bases", "shortDescription": { "text": "An assignment operator shall assign all data bases" }, "fullDescription": { "text": "An assignment operator shall assign all data bases [JSF-083_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An assignment operator shall assign all data bases [JSF-083_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-088", "name": "Multiple inheritance shall be limited to at most 1 protected implementation", "shortDescription": { "text": "Multiple inheritance shall be limited to at most 1 protected implementation" }, "fullDescription": { "text": "Multiple inheritance shall be limited to at most 1 protected implementation [JSF-088]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Multiple inheritance shall be limited to at most 1 protected implementation [JSF-088]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-088.1", "name": "A stateful virtual base shall be explicitly declared in each derived class that accesses it", "shortDescription": { "text": "A stateful virtual base shall be explicitly declared in each derived class that accesses it" }, "fullDescription": { "text": "A stateful virtual base shall be explicitly declared in each derived class that accesses it [JSF-088.1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A stateful virtual base shall be explicitly declared in each derived class that accesses it [JSF-088.1]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-088_b", "name": "Multiple inheritance shall not use any public implementations", "shortDescription": { "text": "Multiple inheritance shall not use any public implementations" }, "fullDescription": { "text": "Multiple inheritance shall not use any public implementations [JSF-088_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Multiple inheritance shall not use any public implementations [JSF-088_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-089", "name": "A base class shall not be both virtual and non-virtual in the same hierarchy", "shortDescription": { "text": "A base class shall not be both virtual and non-virtual in the same hierarchy" }, "fullDescription": { "text": "A base class shall not be both virtual and non-virtual in the same hierarchy [JSF-089]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A base class shall not be both virtual and non-virtual in the same hierarchy [JSF-089]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-094", "name": "An inherited nonvirtual function shall not be redefined in a derived class", "shortDescription": { "text": "An inherited nonvirtual function shall not be redefined in a derived class" }, "fullDescription": { "text": "An inherited nonvirtual function shall not be redefined in a derived class [JSF-094]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An inherited nonvirtual function shall not be redefined in a derived class [JSF-094]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-094_b", "name": "Member functions declared in derived class shall not hide functions declared in base classes", "shortDescription": { "text": "Member functions declared in derived class shall not hide functions declared in base classes" }, "fullDescription": { "text": "Member functions declared in derived class shall not hide functions declared in base classes [JSF-094_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Member functions declared in derived class shall not hide functions declared in base classes [JSF-094_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-095", "name": "An inherited default parameter shall never be redefined", "shortDescription": { "text": "An inherited default parameter shall never be redefined" }, "fullDescription": { "text": "An inherited default parameter shall never be redefined [JSF-095]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An inherited default parameter shall never be redefined [JSF-095]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-096", "name": "Arrays shall not be treated polymorphically", "shortDescription": { "text": "Arrays shall not be treated polymorphically" }, "fullDescription": { "text": "Arrays shall not be treated polymorphically [JSF-096]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Arrays shall not be treated polymorphically [JSF-096]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-097", "name": "Arrays shall not be used in interfaces", "shortDescription": { "text": "Arrays shall not be used in interfaces" }, "fullDescription": { "text": "Arrays shall not be used in interfaces [JSF-097]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Arrays shall not be used in interfaces [JSF-097]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-097.1", "name": "Neither operand of an equality operator (== or !=) shall be a pointer to a virtual member function", "shortDescription": { "text": "Neither operand of an equality operator (== or !=) shall be a pointer to a virtual member function" }, "fullDescription": { "text": "Neither operand of an equality operator (== or !=) shall be a pointer to a virtual member function [JSF-097.1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Neither operand of an equality operator (== or !=) shall be a pointer to a virtual member function [JSF-097.1]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-097_b", "name": "Arrays shall not be used in private or protected methods", "shortDescription": { "text": "Arrays shall not be used in private or protected methods" }, "fullDescription": { "text": "Arrays shall not be used in private or protected methods [JSF-097_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Arrays shall not be used in private or protected methods [JSF-097_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-097_c", "name": "Arrays shall not be used in global functions", "shortDescription": { "text": "Arrays shall not be used in global functions" }, "fullDescription": { "text": "Arrays shall not be used in global functions [JSF-097_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Arrays shall not be used in global functions [JSF-097_c]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-097_d", "name": "Arrays shall not be passed to functions as array\/pointer parameters", "shortDescription": { "text": "Arrays shall not be passed to functions as array\/pointer parameters" }, "fullDescription": { "text": "Arrays shall not be passed to functions as array\/pointer parameters [JSF-097_d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Arrays shall not be passed to functions as array\/pointer parameters [JSF-097_d]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-097_e", "name": "Functions which are called with array argument shall not be declared with pointer parameter", "shortDescription": { "text": "Functions which are called with array argument shall not be declared with pointer parameter" }, "fullDescription": { "text": "Functions which are called with array argument shall not be declared with pointer parameter [JSF-097_e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Functions which are called with array argument shall not be declared with pointer parameter [JSF-097_e]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-107", "name": "Functions shall always be declared at file scope", "shortDescription": { "text": "Functions shall always be declared at file scope" }, "fullDescription": { "text": "Functions shall always be declared at file scope [JSF-107]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Functions shall always be declared at file scope [JSF-107]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-108", "name": "Functions with variable numbers of arguments shall not be used", "shortDescription": { "text": "Functions with variable numbers of arguments shall not be used" }, "fullDescription": { "text": "Functions with variable numbers of arguments shall not be used [JSF-108]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Functions with variable numbers of arguments shall not be used [JSF-108]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-111", "name": "A function shall not return a pointer or reference to a non-static local object", "shortDescription": { "text": "A function shall not return a pointer or reference to a non-static local object" }, "fullDescription": { "text": "A function shall not return a pointer or reference to a non-static local object [JSF-111]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A function shall not return a pointer or reference to a non-static local object [JSF-111]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-111_a", "name": "A function shall not return a pointer or a reference to a parameter that is passed by const reference", "shortDescription": { "text": "A function shall not return a pointer or a reference to a parameter that is passed by const reference" }, "fullDescription": { "text": "A function shall not return a pointer or a reference to a parameter that is passed by const reference [JSF-111_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A function shall not return a pointer or a reference to a parameter that is passed by const reference [JSF-111_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-114", "name": "All exit points of value-returning functions shall be through return statements", "shortDescription": { "text": "All exit points of value-returning functions shall be through return statements" }, "fullDescription": { "text": "All exit points of value-returning functions shall be through return statements [JSF-114]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All exit points of value-returning functions shall be through return statements [JSF-114]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-119", "name": "Functions shall not call themselves, either directly or indirectly", "shortDescription": { "text": "Functions shall not call themselves, either directly or indirectly" }, "fullDescription": { "text": "Functions shall not call themselves, either directly or indirectly [JSF-119]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Functions shall not call themselves, either directly or indirectly [JSF-119]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-126", "name": "Only valid C++ style comments (\/\/) shall be used", "shortDescription": { "text": "Only valid C++ style comments (\/\/) shall be used" }, "fullDescription": { "text": "Only valid C++ style comments (\/\/) shall be used [JSF-126]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Only valid C++ style comments (\/\/) shall be used [JSF-126]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-127", "name": "Code that is not used (commented out) shall be deleted", "shortDescription": { "text": "Code that is not used (commented out) shall be deleted" }, "fullDescription": { "text": "Code that is not used (commented out) shall be deleted [JSF-127]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Code that is not used (commented out) shall be deleted [JSF-127]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-135_a", "name": "Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope", "shortDescription": { "text": "Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" }, "fullDescription": { "text": "Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope [JSF-135_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope [JSF-135_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-135_b", "name": "Identifiers declared in an inner local scope shall not hide identifiers declared in an outer local scope", "shortDescription": { "text": "Identifiers declared in an inner local scope shall not hide identifiers declared in an outer local scope" }, "fullDescription": { "text": "Identifiers declared in an inner local scope shall not hide identifiers declared in an outer local scope [JSF-135_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers declared in an inner local scope shall not hide identifiers declared in an outer local scope [JSF-135_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-135_c", "name": "Identifiers declared in a local scope shall not hide identifiers declared in a class scope", "shortDescription": { "text": "Identifiers declared in a local scope shall not hide identifiers declared in a class scope" }, "fullDescription": { "text": "Identifiers declared in a local scope shall not hide identifiers declared in a class scope [JSF-135_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers declared in a local scope shall not hide identifiers declared in a class scope [JSF-135_c]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-135_d", "name": "Identifiers declared in a class scope shall not hide identifiers declared in a global or namespace scope", "shortDescription": { "text": "Identifiers declared in a class scope shall not hide identifiers declared in a global or namespace scope" }, "fullDescription": { "text": "Identifiers declared in a class scope shall not hide identifiers declared in a global or namespace scope [JSF-135_d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers declared in a class scope shall not hide identifiers declared in a global or namespace scope [JSF-135_d]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-135_e", "name": "Identifiers declared in an inner class scope shall not hide identifiers declared in outer class scope", "shortDescription": { "text": "Identifiers declared in an inner class scope shall not hide identifiers declared in outer class scope" }, "fullDescription": { "text": "Identifiers declared in an inner class scope shall not hide identifiers declared in outer class scope [JSF-135_e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers declared in an inner class scope shall not hide identifiers declared in outer class scope [JSF-135_e]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-138_a", "name": "Identifiers shall not simultaneously have both internal and external linkage in the same translation unit", "shortDescription": { "text": "Identifiers shall not simultaneously have both internal and external linkage in the same translation unit" }, "fullDescription": { "text": "Identifiers shall not simultaneously have both internal and external linkage in the same translation unit [JSF-138_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers shall not simultaneously have both internal and external linkage in the same translation unit [JSF-138_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-138_b", "name": "The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage", "shortDescription": { "text": "The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" }, "fullDescription": { "text": "The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage [JSF-138_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage [JSF-138_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-140", "name": "The register storage class specifier shall not be used", "shortDescription": { "text": "The register storage class specifier shall not be used" }, "fullDescription": { "text": "The register storage class specifier shall not be used [JSF-140]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The register storage class specifier shall not be used [JSF-140]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-142_a", "name": "All automatic variables shall have been assigned a value before being used", "shortDescription": { "text": "All automatic variables shall have been assigned a value before being used" }, "fullDescription": { "text": "All automatic variables shall have been assigned a value before being used [JSF-142_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All automatic variables shall have been assigned a value before being used [JSF-142_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-142_b", "name": "All variables shall be initialized before use", "shortDescription": { "text": "All variables shall be initialized before use" }, "fullDescription": { "text": "All variables shall be initialized before use [JSF-142_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All variables shall be initialized before use [JSF-142_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-144", "name": "Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures", "shortDescription": { "text": "Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" }, "fullDescription": { "text": "Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures [JSF-144]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures [JSF-144]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-145", "name": "In an enumerator list, the '=' construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized", "shortDescription": { "text": "In an enumerator list, the '=' construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized" }, "fullDescription": { "text": "In an enumerator list, the '=' construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized [JSF-145]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "In an enumerator list, the '=' construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized [JSF-145]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-147", "name": "The underlying bit representations of floating point numbers shall not be used in any way by the programmer", "shortDescription": { "text": "The underlying bit representations of floating point numbers shall not be used in any way by the programmer" }, "fullDescription": { "text": "The underlying bit representations of floating point numbers shall not be used in any way by the programmer [JSF-147]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The underlying bit representations of floating point numbers shall not be used in any way by the programmer [JSF-147]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-148", "name": "Enumeration types shall be used instead of integer types (and constants) to select from a limited series of choices", "shortDescription": { "text": "Enumeration types shall be used instead of integer types (and constants) to select from a limited series of choices" }, "fullDescription": { "text": "Enumeration types shall be used instead of integer types (and constants) to select from a limited series of choices [JSF-148]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Enumeration types shall be used instead of integer types (and constants) to select from a limited series of choices [JSF-148]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-149", "name": "Octal constants (other than zero) shall not be used", "shortDescription": { "text": "Octal constants (other than zero) shall not be used" }, "fullDescription": { "text": "Octal constants (other than zero) shall not be used [JSF-149]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Octal constants (other than zero) shall not be used [JSF-149]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-151.1", "name": "A string literal shall not be modified", "shortDescription": { "text": "A string literal shall not be modified" }, "fullDescription": { "text": "A string literal shall not be modified [JSF-151.1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A string literal shall not be modified [JSF-151.1]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-152", "name": "Multiple variable declarations shall not be allowed on the same line", "shortDescription": { "text": "Multiple variable declarations shall not be allowed on the same line" }, "fullDescription": { "text": "Multiple variable declarations shall not be allowed on the same line [JSF-152]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Multiple variable declarations shall not be allowed on the same line [JSF-152]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-153", "name": "Unions shall not be used", "shortDescription": { "text": "Unions shall not be used" }, "fullDescription": { "text": "Unions shall not be used [JSF-153]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Unions shall not be used [JSF-153]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-154", "name": "Bit-fields shall have explicitly unsigned integral or enumeration types only", "shortDescription": { "text": "Bit-fields shall have explicitly unsigned integral or enumeration types only" }, "fullDescription": { "text": "Bit-fields shall have explicitly unsigned integral or enumeration types only [JSF-154]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Bit-fields shall have explicitly unsigned integral or enumeration types only [JSF-154]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-156", "name": "All the members of a structure (or class) shall be named", "shortDescription": { "text": "All the members of a structure (or class) shall be named" }, "fullDescription": { "text": "All the members of a structure (or class) shall be named [JSF-156]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All the members of a structure (or class) shall be named [JSF-156]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-157", "name": "The right hand operand of a && or || operator shall not contain side effects", "shortDescription": { "text": "The right hand operand of a && or || operator shall not contain side effects" }, "fullDescription": { "text": "The right hand operand of a && or || operator shall not contain side effects [JSF-157]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The right hand operand of a && or || operator shall not contain side effects [JSF-157]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-158", "name": "The operands of a logical && or || shall be parenthesized if the operands contain binary operators", "shortDescription": { "text": "The operands of a logical && or || shall be parenthesized if the operands contain binary operators" }, "fullDescription": { "text": "The operands of a logical && or || shall be parenthesized if the operands contain binary operators [JSF-158]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The operands of a logical && or || shall be parenthesized if the operands contain binary operators [JSF-158]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-159", "name": "Operators ||, && shall not be overloaded", "shortDescription": { "text": "Operators ||, && shall not be overloaded" }, "fullDescription": { "text": "Operators ||, && shall not be overloaded [JSF-159]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Operators ||, && shall not be overloaded [JSF-159]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-159_b", "name": "Operator unary & shall not be overloaded", "shortDescription": { "text": "Operator unary & shall not be overloaded" }, "fullDescription": { "text": "Operator unary & shall not be overloaded [JSF-159_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Operator unary & shall not be overloaded [JSF-159_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-160", "name": "An assignment expression shall be used only as the expression in an expression statement", "shortDescription": { "text": "An assignment expression shall be used only as the expression in an expression statement" }, "fullDescription": { "text": "An assignment expression shall be used only as the expression in an expression statement [JSF-160]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An assignment expression shall be used only as the expression in an expression statement [JSF-160]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-162_a", "name": "Signed and unsigned values shall not be mixed in comparison operations", "shortDescription": { "text": "Signed and unsigned values shall not be mixed in comparison operations" }, "fullDescription": { "text": "Signed and unsigned values shall not be mixed in comparison operations [JSF-162_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Signed and unsigned values shall not be mixed in comparison operations [JSF-162_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-162_b", "name": "Signed and unsigned values shall not be mixed in second and third operand of conditional operator", "shortDescription": { "text": "Signed and unsigned values shall not be mixed in second and third operand of conditional operator" }, "fullDescription": { "text": "Signed and unsigned values shall not be mixed in second and third operand of conditional operator [JSF-162_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Signed and unsigned values shall not be mixed in second and third operand of conditional operator [JSF-162_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-162_c", "name": "Signed and unsigned values shall not be mixed in arithmetic operations", "shortDescription": { "text": "Signed and unsigned values shall not be mixed in arithmetic operations" }, "fullDescription": { "text": "Signed and unsigned values shall not be mixed in arithmetic operations [JSF-162_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Signed and unsigned values shall not be mixed in arithmetic operations [JSF-162_c]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-163", "name": "Unsigned arithmetic shall not be used", "shortDescription": { "text": "Unsigned arithmetic shall not be used" }, "fullDescription": { "text": "Unsigned arithmetic shall not be used [JSF-163]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Unsigned arithmetic shall not be used [JSF-163]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-164", "name": "The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the left-hand operand", "shortDescription": { "text": "The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the left-hand operand" }, "fullDescription": { "text": "The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the left-hand operand [JSF-164]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the left-hand operand [JSF-164]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-164.1", "name": "The left-hand operand of a right-shift operator shall not have a negative value", "shortDescription": { "text": "The left-hand operand of a right-shift operator shall not have a negative value" }, "fullDescription": { "text": "The left-hand operand of a right-shift operator shall not have a negative value [JSF-164.1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The left-hand operand of a right-shift operator shall not have a negative value [JSF-164.1]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-165", "name": "The unary minus operator shall not be applied to an unsigned expression", "shortDescription": { "text": "The unary minus operator shall not be applied to an unsigned expression" }, "fullDescription": { "text": "The unary minus operator shall not be applied to an unsigned expression [JSF-165]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The unary minus operator shall not be applied to an unsigned expression [JSF-165]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-167_a", "name": "Don't assign the dividend of two integers to a floating-point type", "shortDescription": { "text": "Don't assign the dividend of two integers to a floating-point type" }, "fullDescription": { "text": "Don't assign the dividend of two integers to a floating-point type [JSF-167_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't assign the dividend of two integers to a floating-point type [JSF-167_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-168_b", "name": "The comma operator shall not be used", "shortDescription": { "text": "The comma operator shall not be used" }, "fullDescription": { "text": "The comma operator shall not be used [JSF-168_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The comma operator shall not be used [JSF-168_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-170", "name": "More than 2 levels of pointer indirection shall not be used", "shortDescription": { "text": "More than 2 levels of pointer indirection shall not be used" }, "fullDescription": { "text": "More than 2 levels of pointer indirection shall not be used [JSF-170]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "More than 2 levels of pointer indirection shall not be used [JSF-170]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-171", "name": "Relational operators shall not be applied to pointer types except where they point to the same array", "shortDescription": { "text": "Relational operators shall not be applied to pointer types except where they point to the same array" }, "fullDescription": { "text": "Relational operators shall not be applied to pointer types except where they point to the same array [JSF-171]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Relational operators shall not be applied to pointer types except where they point to the same array [JSF-171]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-173", "name": "The address of an object with automatic storage shall not be assigned to an object which persists after the object has ceased to exist", "shortDescription": { "text": "The address of an object with automatic storage shall not be assigned to an object which persists after the object has ceased to exist" }, "fullDescription": { "text": "The address of an object with automatic storage shall not be assigned to an object which persists after the object has ceased to exist [JSF-173]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The address of an object with automatic storage shall not be assigned to an object which persists after the object has ceased to exist [JSF-173]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-174_a", "name": "The null pointer shall not be de-referenced", "shortDescription": { "text": "The null pointer shall not be de-referenced" }, "fullDescription": { "text": "The null pointer shall not be de-referenced [JSF-174_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The null pointer shall not be de-referenced [JSF-174_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-174_b", "name": "The null pointer shall not be de-referenced", "shortDescription": { "text": "The null pointer shall not be de-referenced" }, "fullDescription": { "text": "The null pointer shall not be de-referenced [JSF-174_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The null pointer shall not be de-referenced [JSF-174_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-175", "name": "NULL identifier shall not be used; use plain 0 instead", "shortDescription": { "text": "NULL identifier shall not be used; use plain 0 instead" }, "fullDescription": { "text": "NULL identifier shall not be used; use plain 0 instead [JSF-175]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "NULL identifier shall not be used; use plain 0 instead [JSF-175]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-178", "name": "Down casting (casting from base to derived class) shall not be allowed", "shortDescription": { "text": "Down casting (casting from base to derived class) shall not be allowed" }, "fullDescription": { "text": "Down casting (casting from base to derived class) shall not be allowed [JSF-178]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Down casting (casting from base to derived class) shall not be allowed [JSF-178]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-179", "name": "A pointer to a virtual base class shall not be converted to a pointer to a derived class", "shortDescription": { "text": "A pointer to a virtual base class shall not be converted to a pointer to a derived class" }, "fullDescription": { "text": "A pointer to a virtual base class shall not be converted to a pointer to a derived class [JSF-179]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A pointer to a virtual base class shall not be converted to a pointer to a derived class [JSF-179]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-180_a", "name": "Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used", "shortDescription": { "text": "Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" }, "fullDescription": { "text": "Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used [JSF-180_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used [JSF-180_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-180_b", "name": "Avoid implicit conversions from floating to integral type", "shortDescription": { "text": "Avoid implicit conversions from floating to integral type" }, "fullDescription": { "text": "Avoid implicit conversions from floating to integral type [JSF-180_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid implicit conversions from floating to integral type [JSF-180_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-180_c", "name": "Avoid implicit conversions from wider to narrower floating type", "shortDescription": { "text": "Avoid implicit conversions from wider to narrower floating type" }, "fullDescription": { "text": "Avoid implicit conversions from wider to narrower floating type [JSF-180_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid implicit conversions from wider to narrower floating type [JSF-180_c]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-180_d", "name": "Avoid conversions of constant values to a narrower type", "shortDescription": { "text": "Avoid conversions of constant values to a narrower type" }, "fullDescription": { "text": "Avoid conversions of constant values to a narrower type [JSF-180_d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid conversions of constant values to a narrower type [JSF-180_d]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-180_e", "name": "Avoid implicit conversions from signed to unsigned type", "shortDescription": { "text": "Avoid implicit conversions from signed to unsigned type" }, "fullDescription": { "text": "Avoid implicit conversions from signed to unsigned type [JSF-180_e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid implicit conversions from signed to unsigned type [JSF-180_e]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-180_f", "name": "Implicit conversions from integral to floating type which may result in a loss of information shall not be used", "shortDescription": { "text": "Implicit conversions from integral to floating type which may result in a loss of information shall not be used" }, "fullDescription": { "text": "Implicit conversions from integral to floating type which may result in a loss of information shall not be used [JSF-180_f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Implicit conversions from integral to floating type which may result in a loss of information shall not be used [JSF-180_f]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-180_g", "name": "Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used", "shortDescription": { "text": "Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" }, "fullDescription": { "text": "Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used [JSF-180_g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used [JSF-180_g]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-182", "name": "Type casting from any type to or from pointers shall not be used", "shortDescription": { "text": "Type casting from any type to or from pointers shall not be used" }, "fullDescription": { "text": "Type casting from any type to or from pointers shall not be used [JSF-182]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Type casting from any type to or from pointers shall not be used [JSF-182]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-184_a", "name": "Floating point numbers shall not implicitly be converted to integers", "shortDescription": { "text": "Floating point numbers shall not implicitly be converted to integers" }, "fullDescription": { "text": "Floating point numbers shall not implicitly be converted to integers [JSF-184_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Floating point numbers shall not implicitly be converted to integers [JSF-184_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-185", "name": "C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used", "shortDescription": { "text": "C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" }, "fullDescription": { "text": "C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used [JSF-185]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used [JSF-185]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-186_a", "name": "There shall be no unreachable code in 'else' block", "shortDescription": { "text": "There shall be no unreachable code in 'else' block" }, "fullDescription": { "text": "There shall be no unreachable code in 'else' block [JSF-186_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code in 'else' block [JSF-186_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-186_b", "name": "There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements", "shortDescription": { "text": "There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" }, "fullDescription": { "text": "There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements [JSF-186_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements [JSF-186_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-186_c", "name": "There shall be no unreachable code in 'if', 'else', 'while' and 'for' block", "shortDescription": { "text": "There shall be no unreachable code in 'if', 'else', 'while' and 'for' block" }, "fullDescription": { "text": "There shall be no unreachable code in 'if', 'else', 'while' and 'for' block [JSF-186_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code in 'if', 'else', 'while' and 'for' block [JSF-186_c]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-186_d", "name": "There shall be no unreachable code in 'switch' statement", "shortDescription": { "text": "There shall be no unreachable code in 'switch' statement" }, "fullDescription": { "text": "There shall be no unreachable code in 'switch' statement [JSF-186_d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code in 'switch' statement [JSF-186_d]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-186_e", "name": "There shall be no unreachable code in 'for' loop", "shortDescription": { "text": "There shall be no unreachable code in 'for' loop" }, "fullDescription": { "text": "There shall be no unreachable code in 'for' loop [JSF-186_e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code in 'for' loop [JSF-186_e]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-186_f", "name": "There shall be no unreachable code after 'if' or 'switch' statement", "shortDescription": { "text": "There shall be no unreachable code after 'if' or 'switch' statement" }, "fullDescription": { "text": "There shall be no unreachable code after 'if' or 'switch' statement [JSF-186_f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code after 'if' or 'switch' statement [JSF-186_f]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-186_g", "name": "There shall be no unreachable code after 'if' or 'switch' statement inside 'while', 'for' or 'do...while' loop", "shortDescription": { "text": "There shall be no unreachable code after 'if' or 'switch' statement inside 'while', 'for' or 'do...while' loop" }, "fullDescription": { "text": "There shall be no unreachable code after 'if' or 'switch' statement inside 'while', 'for' or 'do...while' loop [JSF-186_g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code after 'if' or 'switch' statement inside 'while', 'for' or 'do...while' loop [JSF-186_g]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-186_h", "name": "Every defined function with internal linkage shall be used", "shortDescription": { "text": "Every defined function with internal linkage shall be used" }, "fullDescription": { "text": "Every defined function with internal linkage shall be used [JSF-186_h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Every defined function with internal linkage shall be used [JSF-186_h]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-187", "name": "All non-null statements shall potentially have a side-effect", "shortDescription": { "text": "All non-null statements shall potentially have a side-effect" }, "fullDescription": { "text": "All non-null statements shall potentially have a side-effect [JSF-187]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All non-null statements shall potentially have a side-effect [JSF-187]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-189", "name": "The goto statement shall not be used", "shortDescription": { "text": "The goto statement shall not be used" }, "fullDescription": { "text": "The goto statement shall not be used [JSF-189]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The goto statement shall not be used [JSF-189]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-190", "name": "The continue statement shall not be used", "shortDescription": { "text": "The continue statement shall not be used" }, "fullDescription": { "text": "The continue statement shall not be used [JSF-190]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The continue statement shall not be used [JSF-190]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-191", "name": "The break statement shall not be used (except to terminate the cases of a switch statement)", "shortDescription": { "text": "The break statement shall not be used (except to terminate the cases of a switch statement)" }, "fullDescription": { "text": "The break statement shall not be used (except to terminate the cases of a switch statement) [JSF-191]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The break statement shall not be used (except to terminate the cases of a switch statement) [JSF-191]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-191_a", "name": "For any iteration statement there shall be no more than one break or goto statement used for loop termination", "shortDescription": { "text": "For any iteration statement there shall be no more than one break or goto statement used for loop termination" }, "fullDescription": { "text": "For any iteration statement there shall be no more than one break or goto statement used for loop termination [JSF-191_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "For any iteration statement there shall be no more than one break or goto statement used for loop termination [JSF-191_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-193", "name": "Every non-empty case clause in a switch statement shall be terminated with a break statement", "shortDescription": { "text": "Every non-empty case clause in a switch statement shall be terminated with a break statement" }, "fullDescription": { "text": "Every non-empty case clause in a switch statement shall be terminated with a break statement [JSF-193]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Every non-empty case clause in a switch statement shall be terminated with a break statement [JSF-193]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-194", "name": "All switch statements that do not intend to test for every enumeration value shall contain a final default clause", "shortDescription": { "text": "All switch statements that do not intend to test for every enumeration value shall contain a final default clause" }, "fullDescription": { "text": "All switch statements that do not intend to test for every enumeration value shall contain a final default clause [JSF-194]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All switch statements that do not intend to test for every enumeration value shall contain a final default clause [JSF-194]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-197", "name": "Floating point variables shall not be used as loop counters", "shortDescription": { "text": "Floating point variables shall not be used as loop counters" }, "fullDescription": { "text": "Floating point variables shall not be used as loop counters [JSF-197]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Floating point variables shall not be used as loop counters [JSF-197]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-201", "name": "Numeric variables being used within a for loop for iteration counting shall not be modified in the body of the loop", "shortDescription": { "text": "Numeric variables being used within a for loop for iteration counting shall not be modified in the body of the loop" }, "fullDescription": { "text": "Numeric variables being used within a for loop for iteration counting shall not be modified in the body of the loop [JSF-201]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Numeric variables being used within a for loop for iteration counting shall not be modified in the body of the loop [JSF-201]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-202", "name": "Floating point variables shall not be tested for exact equality or inequality", "shortDescription": { "text": "Floating point variables shall not be tested for exact equality or inequality" }, "fullDescription": { "text": "Floating point variables shall not be tested for exact equality or inequality [JSF-202]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Floating point variables shall not be tested for exact equality or inequality [JSF-202]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-203", "name": "Evaluation of expressions shall not lead to overflow\/underflow", "shortDescription": { "text": "Evaluation of expressions shall not lead to overflow\/underflow" }, "fullDescription": { "text": "Evaluation of expressions shall not lead to overflow\/underflow [JSF-203]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Evaluation of expressions shall not lead to overflow\/underflow [JSF-203]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-204.1_a", "name": "The value of an expression shall be the same under any order of evaluation that the standard permits", "shortDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits" }, "fullDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [JSF-204.1_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [JSF-204.1_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-204.1_b", "name": "Don't write code that depends on the order of evaluation of function arguments", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function arguments" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function arguments [JSF-204.1_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of function arguments [JSF-204.1_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-204.1_c", "name": "Don't write code that depends on the order of evaluation of function designator and function arguments", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments [JSF-204.1_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments [JSF-204.1_c]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-204.1_d", "name": "Don't write code that depends on the order of evaluation of expression that involves a function call", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call [JSF-204.1_d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call [JSF-204.1_d]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-204.1_e", "name": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression", "shortDescription": { "text": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" }, "fullDescription": { "text": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression [JSF-204.1_e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression [JSF-204.1_e]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-204.1_f", "name": "Do not use more than one volatile in one expression", "shortDescription": { "text": "Do not use more than one volatile in one expression" }, "fullDescription": { "text": "Do not use more than one volatile in one expression [JSF-204.1_f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use more than one volatile in one expression [JSF-204.1_f]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-204.1_g", "name": "Don't write code that depends on the order of evaluation of function calls", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function calls" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function calls [JSF-204.1_g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of function calls [JSF-204.1_g]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-204_a", "name": "A single operation with side-effect shall only be used in the proper context", "shortDescription": { "text": "A single operation with side-effect shall only be used in the proper context" }, "fullDescription": { "text": "A single operation with side-effect shall only be used in the proper context [JSF-204_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A single operation with side-effect shall only be used in the proper context [JSF-204_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-204_b", "name": "A call of function with side-effect shall only be used in the proper context", "shortDescription": { "text": "A call of function with side-effect shall only be used in the proper context" }, "fullDescription": { "text": "A call of function with side-effect shall only be used in the proper context [JSF-204_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A call of function with side-effect shall only be used in the proper context [JSF-204_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-204_d", "name": "The second or third operand of a ternary operator '?:' shall not contain side effects", "shortDescription": { "text": "The second or third operand of a ternary operator '?:' shall not contain side effects" }, "fullDescription": { "text": "The second or third operand of a ternary operator '?:' shall not contain side effects [JSF-204_d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The second or third operand of a ternary operator '?:' shall not contain side effects [JSF-204_d]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-205", "name": "The volatile keyword shall not be used", "shortDescription": { "text": "The volatile keyword shall not be used" }, "fullDescription": { "text": "The volatile keyword shall not be used [JSF-205]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The volatile keyword shall not be used [JSF-205]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-206", "name": "Dynamic heap memory allocation shall not be used", "shortDescription": { "text": "Dynamic heap memory allocation shall not be used" }, "fullDescription": { "text": "Dynamic heap memory allocation shall not be used [JSF-206]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Dynamic heap memory allocation shall not be used [JSF-206]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-208", "name": "C++ exceptions shall not be used", "shortDescription": { "text": "C++ exceptions shall not be used" }, "fullDescription": { "text": "C++ exceptions shall not be used [JSF-208]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "C++ exceptions shall not be used [JSF-208]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-209", "name": "Typedefs that indicate size and signedness shall be used in place of the basic types", "shortDescription": { "text": "Typedefs that indicate size and signedness shall be used in place of the basic types" }, "fullDescription": { "text": "Typedefs that indicate size and signedness shall be used in place of the basic types [JSF-209]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Typedefs that indicate size and signedness shall be used in place of the basic types [JSF-209]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-209_b", "name": "Typedefs that indicate size and signedness shall be used in place of the basic types", "shortDescription": { "text": "Typedefs that indicate size and signedness shall be used in place of the basic types" }, "fullDescription": { "text": "Typedefs that indicate size and signedness shall be used in place of the basic types [JSF-209_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Typedefs that indicate size and signedness shall be used in place of the basic types [JSF-209_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-210.1", "name": "Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier", "shortDescription": { "text": "Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier" }, "fullDescription": { "text": "Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier [JSF-210.1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier [JSF-210.1]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-211", "name": "Algorithms shall not assume particular memory alignment", "shortDescription": { "text": "Algorithms shall not assume particular memory alignment" }, "fullDescription": { "text": "Algorithms shall not assume particular memory alignment [JSF-211]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Algorithms shall not assume particular memory alignment [JSF-211]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-213_e", "name": "Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used", "shortDescription": { "text": "Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used" }, "fullDescription": { "text": "Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used [JSF-213_e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used [JSF-213_e]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-214", "name": "Assuming that non-local static objects, in separate translation units, are initialized in a special order shall not be done", "shortDescription": { "text": "Assuming that non-local static objects, in separate translation units, are initialized in a special order shall not be done" }, "fullDescription": { "text": "Assuming that non-local static objects, in separate translation units, are initialized in a special order shall not be done [JSF-214]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Assuming that non-local static objects, in separate translation units, are initialized in a special order shall not be done [JSF-214]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-001", "name": "Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs)", "shortDescription": { "text": "Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs)" }, "fullDescription": { "text": "Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs) [JSF-001]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs) [JSF-001]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-009", "name": "Only those characters specified in the C++ basic source character set will be used", "shortDescription": { "text": "Only those characters specified in the C++ basic source character set will be used" }, "fullDescription": { "text": "Only those characters specified in the C++ basic source character set will be used [JSF-009]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Only those characters specified in the C++ basic source character set will be used [JSF-009]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-010", "name": "Values of character types will be restricted to a defined and documented subset of ISO 10646-1", "shortDescription": { "text": "Values of character types will be restricted to a defined and documented subset of ISO 10646-1" }, "fullDescription": { "text": "Values of character types will be restricted to a defined and documented subset of ISO 10646-1 [JSF-010]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Values of character types will be restricted to a defined and documented subset of ISO 10646-1 [JSF-010]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-011", "name": "Trigraphs will not be used", "shortDescription": { "text": "Trigraphs will not be used" }, "fullDescription": { "text": "Trigraphs will not be used [JSF-011]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Trigraphs will not be used [JSF-011]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-012", "name": "The following digraphs will not be used <%, %>, <:, :>, %:, %:%:", "shortDescription": { "text": "The following digraphs will not be used <%, %>, <:, :>, %:, %:%:" }, "fullDescription": { "text": "The following digraphs will not be used <%, %>, <:, :>, %:, %:%: [JSF-012]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The following digraphs will not be used <%, %>, <:, :>, %:, %:%: [JSF-012]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-013", "name": "Wide string literals (for example L\"abc\") will not be used", "shortDescription": { "text": "Wide string literals (for example L\"abc\") will not be used" }, "fullDescription": { "text": "Wide string literals (for example L\"abc\") will not be used [JSF-013]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Wide string literals (for example L\"abc\") will not be used [JSF-013]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-027", "name": "#ifndef, #define and #endif will be used to prevent multiple inclusions of the same header file", "shortDescription": { "text": "#ifndef, #define and #endif will be used to prevent multiple inclusions of the same header file" }, "fullDescription": { "text": "#ifndef, #define and #endif will be used to prevent multiple inclusions of the same header file [JSF-027]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "#ifndef, #define and #endif will be used to prevent multiple inclusions of the same header file [JSF-027]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-028", "name": "The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file", "shortDescription": { "text": "The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" }, "fullDescription": { "text": "The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file [JSF-028]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file [JSF-028]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-028_b", "name": "The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file", "shortDescription": { "text": "The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" }, "fullDescription": { "text": "The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file [JSF-028_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file [JSF-028_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-031", "name": "The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file", "shortDescription": { "text": "The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" }, "fullDescription": { "text": "The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file [JSF-031]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file [JSF-031]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-032", "name": "The #include pre-processor directive will only be used to include header (*.h) files", "shortDescription": { "text": "The #include pre-processor directive will only be used to include header (*.h) files" }, "fullDescription": { "text": "The #include pre-processor directive will only be used to include header (*.h) files [JSF-032]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The #include pre-processor directive will only be used to include header (*.h) files [JSF-032]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-035", "name": "A header file will contain a mechanism that prevents multiple inclusions of itself", "shortDescription": { "text": "A header file will contain a mechanism that prevents multiple inclusions of itself" }, "fullDescription": { "text": "A header file will contain a mechanism that prevents multiple inclusions of itself [JSF-035]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A header file will contain a mechanism that prevents multiple inclusions of itself [JSF-035]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-039_a", "name": "Header files (*.h) will not contain non-const variable definitions or function definitions", "shortDescription": { "text": "Header files (*.h) will not contain non-const variable definitions or function definitions" }, "fullDescription": { "text": "Header files (*.h) will not contain non-const variable definitions or function definitions [JSF-039_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Header files (*.h) will not contain non-const variable definitions or function definitions [JSF-039_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-041", "name": "Source lines will be kept to a length of 120 characters or less", "shortDescription": { "text": "Source lines will be kept to a length of 120 characters or less" }, "fullDescription": { "text": "Source lines will be kept to a length of 120 characters or less [JSF-041]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Source lines will be kept to a length of 120 characters or less [JSF-041]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-042", "name": "Each expression-statement will be on a separate line", "shortDescription": { "text": "Each expression-statement will be on a separate line" }, "fullDescription": { "text": "Each expression-statement will be on a separate line [JSF-042]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each expression-statement will be on a separate line [JSF-042]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-044", "name": "All indentations will be consistent", "shortDescription": { "text": "All indentations will be consistent" }, "fullDescription": { "text": "All indentations will be consistent [JSF-044]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All indentations will be consistent [JSF-044]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-047", "name": "Identifiers will not begin with the underscore character \"_\"", "shortDescription": { "text": "Identifiers will not begin with the underscore character \"_\"" }, "fullDescription": { "text": "Identifiers will not begin with the underscore character \"_\" [JSF-047]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers will not begin with the underscore character \"_\" [JSF-047]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-048", "name": "Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers", "shortDescription": { "text": "Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" }, "fullDescription": { "text": "Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers [JSF-048]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers [JSF-048]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-050", "name": "Begin class, struct, union, enum, and typedef names with an uppercase letter", "shortDescription": { "text": "Begin class, struct, union, enum, and typedef names with an uppercase letter" }, "fullDescription": { "text": "Begin class, struct, union, enum, and typedef names with an uppercase letter [JSF-050]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Begin class, struct, union, enum, and typedef names with an uppercase letter [JSF-050]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-051", "name": "All letters contained in function and variable names will be composed entirely of lowercase letters", "shortDescription": { "text": "All letters contained in function and variable names will be composed entirely of lowercase letters" }, "fullDescription": { "text": "All letters contained in function and variable names will be composed entirely of lowercase letters [JSF-051]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All letters contained in function and variable names will be composed entirely of lowercase letters [JSF-051]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-053", "name": "Header files will always have a file name extension of \".h\"", "shortDescription": { "text": "Header files will always have a file name extension of \".h\"" }, "fullDescription": { "text": "Header files will always have a file name extension of \".h\" [JSF-053]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Header files will always have a file name extension of \".h\" [JSF-053]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-054", "name": "Implementation files will always have a file name extension of \".cpp\"", "shortDescription": { "text": "Implementation files will always have a file name extension of \".cpp\"" }, "fullDescription": { "text": "Implementation files will always have a file name extension of \".cpp\" [JSF-054]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Implementation files will always have a file name extension of \".cpp\" [JSF-054]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-057_a", "name": "The public section of a class will be declared before the protected section and before the private section", "shortDescription": { "text": "The public section of a class will be declared before the protected section and before the private section" }, "fullDescription": { "text": "The public section of a class will be declared before the protected section and before the private section [JSF-057_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The public section of a class will be declared before the protected section and before the private section [JSF-057_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-057_b", "name": "The protected section of a class will be declared before the private section", "shortDescription": { "text": "The protected section of a class will be declared before the private section" }, "fullDescription": { "text": "The protected section of a class will be declared before the private section [JSF-057_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The protected section of a class will be declared before the private section [JSF-057_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-058", "name": "When declaring functions with more than 2 parameters, the leading parenthesis and the first argument are to be written on the same line as the function name, each additional argument will be written on a separate line", "shortDescription": { "text": "When declaring functions with more than 2 parameters, the leading parenthesis and the first argument are to be written on the same line as the function name, each additional argument will be written on a separate line" }, "fullDescription": { "text": "When declaring functions with more than 2 parameters, the leading parenthesis and the first argument are to be written on the same line as the function name, each additional argument will be written on a separate line [JSF-058]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "When declaring functions with more than 2 parameters, the leading parenthesis and the first argument are to be written on the same line as the function name, each additional argument will be written on a separate line [JSF-058]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-060_a", "name": "Braces (\"{}\") which enclose a block will have nothing else on the line except comments", "shortDescription": { "text": "Braces (\"{}\") which enclose a block will have nothing else on the line except comments" }, "fullDescription": { "text": "Braces (\"{}\") which enclose a block will have nothing else on the line except comments [JSF-060_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Braces (\"{}\") which enclose a block will have nothing else on the line except comments [JSF-060_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-060_b", "name": "Braces (\"{}\") which enclose a block will be placed in the same column", "shortDescription": { "text": "Braces (\"{}\") which enclose a block will be placed in the same column" }, "fullDescription": { "text": "Braces (\"{}\") which enclose a block will be placed in the same column [JSF-060_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Braces (\"{}\") which enclose a block will be placed in the same column [JSF-060_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-060_c", "name": "Braces (\"{}\") which enclose a block will not have an empty line after \"{\" nor before \"}\"", "shortDescription": { "text": "Braces (\"{}\") which enclose a block will not have an empty line after \"{\" nor before \"}\"" }, "fullDescription": { "text": "Braces (\"{}\") which enclose a block will not have an empty line after \"{\" nor before \"}\" [JSF-060_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Braces (\"{}\") which enclose a block will not have an empty line after \"{\" nor before \"}\" [JSF-060_c]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-061", "name": "Braces (\"{}\") which enclose a block will have nothing else on the line except comments", "shortDescription": { "text": "Braces (\"{}\") which enclose a block will have nothing else on the line except comments" }, "fullDescription": { "text": "Braces (\"{}\") which enclose a block will have nothing else on the line except comments [JSF-061]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Braces (\"{}\") which enclose a block will have nothing else on the line except comments [JSF-061]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-062", "name": "The dereference operator '*' and the address-of operator '&' will be directly connected with the type-specifier", "shortDescription": { "text": "The dereference operator '*' and the address-of operator '&' will be directly connected with the type-specifier" }, "fullDescription": { "text": "The dereference operator '*' and the address-of operator '&' will be directly connected with the type-specifier [JSF-062]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The dereference operator '*' and the address-of operator '&' will be directly connected with the type-specifier [JSF-062]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-063_a", "name": "There will be no white space following '.' or '->' operator", "shortDescription": { "text": "There will be no white space following '.' or '->' operator" }, "fullDescription": { "text": "There will be no white space following '.' or '->' operator [JSF-063_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There will be no white space following '.' or '->' operator [JSF-063_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-063_b", "name": "There will be no white space preceding '.' or '->' operator", "shortDescription": { "text": "There will be no white space preceding '.' or '->' operator" }, "fullDescription": { "text": "There will be no white space preceding '.' or '->' operator [JSF-063_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There will be no white space preceding '.' or '->' operator [JSF-063_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-063_c", "name": "There will be no space between a unary operator '!' or '~' and its operand", "shortDescription": { "text": "There will be no space between a unary operator '!' or '~' and its operand" }, "fullDescription": { "text": "There will be no space between a unary operator '!' or '~' and its operand [JSF-063_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There will be no space between a unary operator '!' or '~' and its operand [JSF-063_c]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-063_d", "name": "There will be no space between a increment\/decrement operator (++\/--) and its operand", "shortDescription": { "text": "There will be no space between a increment\/decrement operator (++\/--) and its operand" }, "fullDescription": { "text": "There will be no space between a increment\/decrement operator (++\/--) and its operand [JSF-063_d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There will be no space between a increment\/decrement operator (++\/--) and its operand [JSF-063_d]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-063_e", "name": "There will be no space between a unary operator '&', '*', '+', '-' and its operand", "shortDescription": { "text": "There will be no space between a unary operator '&', '*', '+', '-' and its operand" }, "fullDescription": { "text": "There will be no space between a unary operator '&', '*', '+', '-' and its operand [JSF-063_e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There will be no space between a unary operator '&', '*', '+', '-' and its operand [JSF-063_e]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-063_f", "name": "There should be no space between an increment\/decrement operator (++\/--) and its operand in macro definition", "shortDescription": { "text": "There should be no space between an increment\/decrement operator (++\/--) and its operand in macro definition" }, "fullDescription": { "text": "There should be no space between an increment\/decrement operator (++\/--) and its operand in macro definition [JSF-063_f]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There should be no space between an increment\/decrement operator (++\/--) and its operand in macro definition [JSF-063_f]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-069", "name": "A member function that does not affect the state of an object will be declared const", "shortDescription": { "text": "A member function that does not affect the state of an object will be declared const" }, "fullDescription": { "text": "A member function that does not affect the state of an object will be declared const [JSF-069]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A member function that does not affect the state of an object will be declared const [JSF-069]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-074", "name": "Initialization of nonstatic class members will be performed through the member initialization list rather than through assignment in the body of a constructor", "shortDescription": { "text": "Initialization of nonstatic class members will be performed through the member initialization list rather than through assignment in the body of a constructor" }, "fullDescription": { "text": "Initialization of nonstatic class members will be performed through the member initialization list rather than through assignment in the body of a constructor [JSF-074]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Initialization of nonstatic class members will be performed through the member initialization list rather than through assignment in the body of a constructor [JSF-074]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-085", "name": "When two operators are opposites (such as == and !=), both will be defined", "shortDescription": { "text": "When two operators are opposites (such as == and !=), both will be defined" }, "fullDescription": { "text": "When two operators are opposites (such as == and !=), both will be defined [JSF-085]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "When two operators are opposites (such as == and !=), both will be defined [JSF-085]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-085_a", "name": "When one of opposite operators (== and !=) is defined, the other should be defined too and one will be defined in terms of the other", "shortDescription": { "text": "When one of opposite operators (== and !=) is defined, the other should be defined too and one will be defined in terms of the other" }, "fullDescription": { "text": "When one of opposite operators (== and !=) is defined, the other should be defined too and one will be defined in terms of the other [JSF-085_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "When one of opposite operators (== and !=) is defined, the other should be defined too and one will be defined in terms of the other [JSF-085_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-099", "name": "Namespaces will not be nested more than two levels deep", "shortDescription": { "text": "Namespaces will not be nested more than two levels deep" }, "fullDescription": { "text": "Namespaces will not be nested more than two levels deep [JSF-099]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Namespaces will not be nested more than two levels deep [JSF-099]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-104", "name": "All partial and explicit specializations for a template should be declared in the same file as the declaration of their primary template", "shortDescription": { "text": "All partial and explicit specializations for a template should be declared in the same file as the declaration of their primary template" }, "fullDescription": { "text": "All partial and explicit specializations for a template should be declared in the same file as the declaration of their primary template [JSF-104]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All partial and explicit specializations for a template should be declared in the same file as the declaration of their primary template [JSF-104]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-110", "name": "Functions with more than 7 arguments will not be used", "shortDescription": { "text": "Functions with more than 7 arguments will not be used" }, "fullDescription": { "text": "Functions with more than 7 arguments will not be used [JSF-110]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Functions with more than 7 arguments will not be used [JSF-110]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-113", "name": "Functions will have a single exit point", "shortDescription": { "text": "Functions will have a single exit point" }, "fullDescription": { "text": "Functions will have a single exit point [JSF-113]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Functions will have a single exit point [JSF-113]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-115", "name": "If a function returns error information, then that error information will be tested", "shortDescription": { "text": "If a function returns error information, then that error information will be tested" }, "fullDescription": { "text": "If a function returns error information, then that error information will be tested [JSF-115]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If a function returns error information, then that error information will be tested [JSF-115]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-132_a", "name": "Each variable declaration will be commented", "shortDescription": { "text": "Each variable declaration will be commented" }, "fullDescription": { "text": "Each variable declaration will be commented [JSF-132_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each variable declaration will be commented [JSF-132_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-132_b", "name": "Each typedef will be commented", "shortDescription": { "text": "Each typedef will be commented" }, "fullDescription": { "text": "Each typedef will be commented [JSF-132_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each typedef will be commented [JSF-132_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-132_c", "name": "Each enumeration value will be commented", "shortDescription": { "text": "Each enumeration value will be commented" }, "fullDescription": { "text": "Each enumeration value will be commented [JSF-132_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each enumeration value will be commented [JSF-132_c]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-132_d", "name": "Each structure member variable will be commented", "shortDescription": { "text": "Each structure member variable will be commented" }, "fullDescription": { "text": "Each structure member variable will be commented [JSF-132_d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each structure member variable will be commented [JSF-132_d]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-133_a", "name": "Every source file will be documented with an introductory comment that provides information on the file", "shortDescription": { "text": "Every source file will be documented with an introductory comment that provides information on the file" }, "fullDescription": { "text": "Every source file will be documented with an introductory comment that provides information on the file [JSF-133_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Every source file will be documented with an introductory comment that provides information on the file [JSF-133_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-133_b", "name": "Every source file will contain copyright information", "shortDescription": { "text": "Every source file will contain copyright information" }, "fullDescription": { "text": "Every source file will contain copyright information [JSF-133_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Every source file will contain copyright information [JSF-133_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-139", "name": "External objects will not be declared in more than one file", "shortDescription": { "text": "External objects will not be declared in more than one file" }, "fullDescription": { "text": "External objects will not be declared in more than one file [JSF-139]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "External objects will not be declared in more than one file [JSF-139]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-139_b", "name": "External objects will not be declared in implementation files", "shortDescription": { "text": "External objects will not be declared in implementation files" }, "fullDescription": { "text": "External objects will not be declared in implementation files [JSF-139_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "External objects will not be declared in implementation files [JSF-139_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-141", "name": "A class, structure, or enumeration will not be declared in the definition of its type", "shortDescription": { "text": "A class, structure, or enumeration will not be declared in the definition of its type" }, "fullDescription": { "text": "A class, structure, or enumeration will not be declared in the definition of its type [JSF-141]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A class, structure, or enumeration will not be declared in the definition of its type [JSF-141]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-143", "name": "Variables will not be introduced until they can be initialized with meaningful values", "shortDescription": { "text": "Variables will not be introduced until they can be initialized with meaningful values" }, "fullDescription": { "text": "Variables will not be introduced until they can be initialized with meaningful values [JSF-143]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Variables will not be introduced until they can be initialized with meaningful values [JSF-143]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-143_a", "name": "Avoid unused local variables", "shortDescription": { "text": "Avoid unused local variables" }, "fullDescription": { "text": "Avoid unused local variables [JSF-143_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid unused local variables [JSF-143_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-150", "name": "Hexadecimal constants will be represented using all uppercase letters", "shortDescription": { "text": "Hexadecimal constants will be represented using all uppercase letters" }, "fullDescription": { "text": "Hexadecimal constants will be represented using all uppercase letters [JSF-150]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hexadecimal constants will be represented using all uppercase letters [JSF-150]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-151", "name": "Numeric values in code will not be used; symbolic values will be used instead", "shortDescription": { "text": "Numeric values in code will not be used; symbolic values will be used instead" }, "fullDescription": { "text": "Numeric values in code will not be used; symbolic values will be used instead [JSF-151]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Numeric values in code will not be used; symbolic values will be used instead [JSF-151]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-166", "name": "The sizeof operator will not be used on expressions that contain side effects", "shortDescription": { "text": "The sizeof operator will not be used on expressions that contain side effects" }, "fullDescription": { "text": "The sizeof operator will not be used on expressions that contain side effects [JSF-166]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The sizeof operator will not be used on expressions that contain side effects [JSF-166]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-166_b", "name": "The sizeof operator will not be used on expressions that contain side effects", "shortDescription": { "text": "The sizeof operator will not be used on expressions that contain side effects" }, "fullDescription": { "text": "The sizeof operator will not be used on expressions that contain side effects [JSF-166_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The sizeof operator will not be used on expressions that contain side effects [JSF-166_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-166_c", "name": "The sizeof operator will not be used on expressions that contain side effects", "shortDescription": { "text": "The sizeof operator will not be used on expressions that contain side effects" }, "fullDescription": { "text": "The sizeof operator will not be used on expressions that contain side effects [JSF-166_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The sizeof operator will not be used on expressions that contain side effects [JSF-166_c]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-167", "name": "The implementation of integer division shall be documented", "shortDescription": { "text": "The implementation of integer division shall be documented" }, "fullDescription": { "text": "The implementation of integer division shall be documented [JSF-167]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The implementation of integer division shall be documented [JSF-167]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-176", "name": "A typedef will be used to simplify program syntax when declaring function pointers", "shortDescription": { "text": "A typedef will be used to simplify program syntax when declaring function pointers" }, "fullDescription": { "text": "A typedef will be used to simplify program syntax when declaring function pointers [JSF-176]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A typedef will be used to simplify program syntax when declaring function pointers [JSF-176]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-181_a", "name": "Redundant explicit casts will not be used", "shortDescription": { "text": "Redundant explicit casts will not be used" }, "fullDescription": { "text": "Redundant explicit casts will not be used [JSF-181_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Redundant explicit casts will not be used [JSF-181_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-181_b", "name": "Avoid explicit cast from derived to a base class", "shortDescription": { "text": "Avoid explicit cast from derived to a base class" }, "fullDescription": { "text": "Avoid explicit cast from derived to a base class [JSF-181_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid explicit cast from derived to a base class [JSF-181_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-188", "name": "Labels will not be used, except in switch statements", "shortDescription": { "text": "Labels will not be used, except in switch statements" }, "fullDescription": { "text": "Labels will not be used, except in switch statements [JSF-188]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Labels will not be used, except in switch statements [JSF-188]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-192", "name": "All 'if...else if' constructs will contain either a final else clause or a comment indicating why a final else clause is not necessary", "shortDescription": { "text": "All 'if...else if' constructs will contain either a final else clause or a comment indicating why a final else clause is not necessary" }, "fullDescription": { "text": "All 'if...else if' constructs will contain either a final else clause or a comment indicating why a final else clause is not necessary [JSF-192]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All 'if...else if' constructs will contain either a final else clause or a comment indicating why a final else clause is not necessary [JSF-192]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-195", "name": "A switch expression will not represent a Boolean value", "shortDescription": { "text": "A switch expression will not represent a Boolean value" }, "fullDescription": { "text": "A switch expression will not represent a Boolean value [JSF-195]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A switch expression will not represent a Boolean value [JSF-195]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-196", "name": "Every switch statement will have at least two cases and a potential default", "shortDescription": { "text": "Every switch statement will have at least two cases and a potential default" }, "fullDescription": { "text": "Every switch statement will have at least two cases and a potential default [JSF-196]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Every switch statement will have at least two cases and a potential default [JSF-196]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-198", "name": "The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter", "shortDescription": { "text": "The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter" }, "fullDescription": { "text": "The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter [JSF-198]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter [JSF-198]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-199", "name": "The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop", "shortDescription": { "text": "The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop" }, "fullDescription": { "text": "The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop [JSF-199]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop [JSF-199]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-200", "name": "Null initialize or increment expressions in for loops will not be used; a while loop will be used instead", "shortDescription": { "text": "Null initialize or increment expressions in for loops will not be used; a while loop will be used instead" }, "fullDescription": { "text": "Null initialize or increment expressions in for loops will not be used; a while loop will be used instead [JSF-200]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Null initialize or increment expressions in for loops will not be used; a while loop will be used instead [JSF-200]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-207", "name": "Unencapsulated global data will be avoided", "shortDescription": { "text": "Unencapsulated global data will be avoided" }, "fullDescription": { "text": "Unencapsulated global data will be avoided [JSF-207]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Unencapsulated global data will be avoided [JSF-207]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-037", "name": "A file should directly include only headers containing declarations and definitions needed to a compilation", "shortDescription": { "text": "A file should directly include only headers containing declarations and definitions needed to a compilation" }, "fullDescription": { "text": "A file should directly include only headers containing declarations and definitions needed to a compilation [JSF-037]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A file should directly include only headers containing declarations and definitions needed to a compilation [JSF-037]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-043", "name": "Tabs should be avoided", "shortDescription": { "text": "Tabs should be avoided" }, "fullDescription": { "text": "Tabs should be avoided [JSF-043]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Tabs should be avoided [JSF-043]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-067_a", "name": "Public data should only be used in structs, not in classes", "shortDescription": { "text": "Public data should only be used in structs, not in classes" }, "fullDescription": { "text": "Public data should only be used in structs, not in classes [JSF-067_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Public data should only be used in structs, not in classes [JSF-067_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-067_b", "name": "Protected data should only be used in structs, not in classes", "shortDescription": { "text": "Protected data should only be used in structs, not in classes" }, "fullDescription": { "text": "Protected data should only be used in structs, not in classes [JSF-067_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Protected data should only be used in structs, not in classes [JSF-067_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-070", "name": "Avoid using the friend mechanism", "shortDescription": { "text": "Avoid using the friend mechanism" }, "fullDescription": { "text": "Avoid using the friend mechanism [JSF-070]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid using the friend mechanism [JSF-070]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-087", "name": "Hierarchies should be based on abstract classes", "shortDescription": { "text": "Hierarchies should be based on abstract classes" }, "fullDescription": { "text": "Hierarchies should be based on abstract classes [JSF-087]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hierarchies should be based on abstract classes [JSF-087]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-098", "name": "Every nonlocal name, except main(), should be placed in some namespace", "shortDescription": { "text": "Every nonlocal name, except main(), should be placed in some namespace" }, "fullDescription": { "text": "Every nonlocal name, except main(), should be placed in some namespace [JSF-098]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Every nonlocal name, except main(), should be placed in some namespace [JSF-098]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-100", "name": "Don't write namespace usings in a header file or before an #include", "shortDescription": { "text": "Don't write namespace usings in a header file or before an #include" }, "fullDescription": { "text": "Don't write namespace usings in a header file or before an #include [JSF-100]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Don't write namespace usings in a header file or before an #include [JSF-100]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-105", "name": "In a class template with a dependent base, any name that may be found in that dependent base should be referred to using a qualifier", "shortDescription": { "text": "In a class template with a dependent base, any name that may be found in that dependent base should be referred to using a qualifier" }, "fullDescription": { "text": "In a class template with a dependent base, any name that may be found in that dependent base should be referred to using a qualifier [JSF-105]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "In a class template with a dependent base, any name that may be found in that dependent base should be referred to using a qualifier [JSF-105]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-109", "name": "A function definition should not be placed in a class specification", "shortDescription": { "text": "A function definition should not be placed in a class specification" }, "fullDescription": { "text": "A function definition should not be placed in a class specification [JSF-109]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function definition should not be placed in a class specification [JSF-109]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-112", "name": "Dereferenced local pointer initialized by new in function scope should not be returned", "shortDescription": { "text": "Dereferenced local pointer initialized by new in function scope should not be returned" }, "fullDescription": { "text": "Dereferenced local pointer initialized by new in function scope should not be returned [JSF-112]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Dereferenced local pointer initialized by new in function scope should not be returned [JSF-112]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-115_a", "name": "Value returned by a function having a non-void return type that is not an overloaded operator shall always be used", "shortDescription": { "text": "Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" }, "fullDescription": { "text": "Value returned by a function having a non-void return type that is not an overloaded operator shall always be used [JSF-115_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Value returned by a function having a non-void return type that is not an overloaded operator shall always be used [JSF-115_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-116", "name": "Built-in-types should be passed by value unless you are modifying them", "shortDescription": { "text": "Built-in-types should be passed by value unless you are modifying them" }, "fullDescription": { "text": "Built-in-types should be passed by value unless you are modifying them [JSF-116]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Built-in-types should be passed by value unless you are modifying them [JSF-116]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-117", "name": "Arguments should be passed by reference", "shortDescription": { "text": "Arguments should be passed by reference" }, "fullDescription": { "text": "Arguments should be passed by reference [JSF-117]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Arguments should be passed by reference [JSF-117]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-117.1", "name": "An object should be passed as const reference if the function should not change the value of the object", "shortDescription": { "text": "An object should be passed as const reference if the function should not change the value of the object" }, "fullDescription": { "text": "An object should be passed as const reference if the function should not change the value of the object [JSF-117.1]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An object should be passed as const reference if the function should not change the value of the object [JSF-117.1]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-117_b", "name": "The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor", "shortDescription": { "text": "The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor" }, "fullDescription": { "text": "The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor [JSF-117_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor [JSF-117_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-118", "name": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object", "shortDescription": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" }, "fullDescription": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object [JSF-118]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object [JSF-118]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-118_b", "name": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object", "shortDescription": { "text": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" }, "fullDescription": { "text": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object [JSF-118_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object [JSF-118_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-121", "name": "Only functions with 1 or 2 statements should be considered candidates for inline functions", "shortDescription": { "text": "Only functions with 1 or 2 statements should be considered candidates for inline functions" }, "fullDescription": { "text": "Only functions with 1 or 2 statements should be considered candidates for inline functions [JSF-121]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Only functions with 1 or 2 statements should be considered candidates for inline functions [JSF-121]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-122", "name": "Trivial accessor and mutator functions should be inlined", "shortDescription": { "text": "Trivial accessor and mutator functions should be inlined" }, "fullDescription": { "text": "Trivial accessor and mutator functions should be inlined [JSF-122]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Trivial accessor and mutator functions should be inlined [JSF-122]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-123", "name": "Classes which have only getters\/setters (accessors\/mutators) are not allowed", "shortDescription": { "text": "Classes which have only getters\/setters (accessors\/mutators) are not allowed" }, "fullDescription": { "text": "Classes which have only getters\/setters (accessors\/mutators) are not allowed [JSF-123]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Classes which have only getters\/setters (accessors\/mutators) are not allowed [JSF-123]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-124", "name": "Trivial forwarding functions should be inlined", "shortDescription": { "text": "Trivial forwarding functions should be inlined" }, "fullDescription": { "text": "Trivial forwarding functions should be inlined [JSF-124]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Trivial forwarding functions should be inlined [JSF-124]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-125_a", "name": "Pass and return by reference when possible", "shortDescription": { "text": "Pass and return by reference when possible" }, "fullDescription": { "text": "Pass and return by reference when possible [JSF-125_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Pass and return by reference when possible [JSF-125_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-134", "name": "Document functions in comments that precede function definitions", "shortDescription": { "text": "Document functions in comments that precede function definitions" }, "fullDescription": { "text": "Document functions in comments that precede function definitions [JSF-134]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Document functions in comments that precede function definitions [JSF-134]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-134_b", "name": "Document functions in comments that precede function declarations", "shortDescription": { "text": "Document functions in comments that precede function declarations" }, "fullDescription": { "text": "Document functions in comments that precede function declarations [JSF-134_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Document functions in comments that precede function declarations [JSF-134_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-136_a", "name": "Objects should be defined at block scope if they are only accessed from within a single function", "shortDescription": { "text": "Objects should be defined at block scope if they are only accessed from within a single function" }, "fullDescription": { "text": "Objects should be defined at block scope if they are only accessed from within a single function [JSF-136_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Objects should be defined at block scope if they are only accessed from within a single function [JSF-136_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-136_b", "name": "Declarations of local variables should be at the smallest feasible scope", "shortDescription": { "text": "Declarations of local variables should be at the smallest feasible scope" }, "fullDescription": { "text": "Declarations of local variables should be at the smallest feasible scope [JSF-136_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declarations of local variables should be at the smallest feasible scope [JSF-136_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-137", "name": "All declarations at file scope should be static where possible", "shortDescription": { "text": "All declarations at file scope should be static where possible" }, "fullDescription": { "text": "All declarations at file scope should be static where possible [JSF-137]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All declarations at file scope should be static where possible [JSF-137]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-169", "name": "Pointers to pointers should be avoided", "shortDescription": { "text": "Pointers to pointers should be avoided" }, "fullDescription": { "text": "Pointers to pointers should be avoided [JSF-169]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Pointers to pointers should be avoided [JSF-169]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-177", "name": "User-defined conversion functions should be avoided", "shortDescription": { "text": "User-defined conversion functions should be avoided" }, "fullDescription": { "text": "User-defined conversion functions should be avoided [JSF-177]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "User-defined conversion functions should be avoided [JSF-177]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-177_b", "name": "Constructors allowing for conversion should be made explicit", "shortDescription": { "text": "Constructors allowing for conversion should be made explicit" }, "fullDescription": { "text": "Constructors allowing for conversion should be made explicit [JSF-177_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Constructors allowing for conversion should be made explicit [JSF-177_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-183", "name": "Every possible measure should be taken to avoid type casting", "shortDescription": { "text": "Every possible measure should be taken to avoid type casting" }, "fullDescription": { "text": "Every possible measure should be taken to avoid type casting [JSF-183]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Every possible measure should be taken to avoid type casting [JSF-183]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-183_a", "name": "Avoid using static_cast on pointers", "shortDescription": { "text": "Avoid using static_cast on pointers" }, "fullDescription": { "text": "Avoid using static_cast on pointers [JSF-183_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid using static_cast on pointers [JSF-183_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-183_b", "name": "Avoid using reinterpret_cast", "shortDescription": { "text": "Avoid using reinterpret_cast" }, "fullDescription": { "text": "Avoid using reinterpret_cast [JSF-183_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid using reinterpret_cast [JSF-183_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-215", "name": "Pointer arithmetic will not be used", "shortDescription": { "text": "Pointer arithmetic will not be used" }, "fullDescription": { "text": "Pointer arithmetic will not be used [JSF-215]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Pointer arithmetic will not be used [JSF-215]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-125_b", "name": "Consider using op= instead of stand-alone op", "shortDescription": { "text": "Consider using op= instead of stand-alone op" }, "fullDescription": { "text": "Consider using op= instead of stand-alone op [JSF-125_b]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Consider using op= instead of stand-alone op [JSF-125_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "METRIC.NOPLIF", "name": "Physical Lines in Files", "shortDescription": { "text": "Physical Lines in Files" }, "fullDescription": { "text": "Physical Lines in Files [METRIC.NOPLIF]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Physical Lines in Files [METRIC.NOPLIF]" }, "properties": { "tags": [ "Metric" ] } }, { "id": "METRICS-03", "name": "Number of blocks of code in a function", "shortDescription": { "text": "Number of blocks of code in a function" }, "fullDescription": { "text": "Number of blocks of code in a function [METRICS-03]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Number of blocks of code in a function [METRICS-03]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-04", "name": "Number of function calls within function", "shortDescription": { "text": "Number of function calls within function" }, "fullDescription": { "text": "Number of function calls within function [METRICS-04]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Number of function calls within function [METRICS-04]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-05", "name": "Class inheritance level", "shortDescription": { "text": "Class inheritance level" }, "fullDescription": { "text": "Class inheritance level [METRICS-05]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Class inheritance level [METRICS-05]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-06", "name": "Number of data member(s) per class should not exceed 15", "shortDescription": { "text": "Number of data member(s) per class should not exceed 15" }, "fullDescription": { "text": "Number of data member(s) per class should not exceed 15 [METRICS-06]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Number of data member(s) per class should not exceed 15 [METRICS-06]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-07", "name": "Number of methods per class", "shortDescription": { "text": "Number of methods per class" }, "fullDescription": { "text": "Number of methods per class [METRICS-07]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Number of methods per class [METRICS-07]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-08", "name": "Number of parameter(s) per method should not exceed 10", "shortDescription": { "text": "Number of parameter(s) per method should not exceed 10" }, "fullDescription": { "text": "Number of parameter(s) per method should not exceed 10 [METRICS-08]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Number of parameter(s) per method should not exceed 10 [METRICS-08]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-09", "name": "Number of private data member(s) per class", "shortDescription": { "text": "Number of private data member(s) per class" }, "fullDescription": { "text": "Number of private data member(s) per class [METRICS-09]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Number of private data member(s) per class [METRICS-09]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-10", "name": "Number of private methods per class", "shortDescription": { "text": "Number of private methods per class" }, "fullDescription": { "text": "Number of private methods per class [METRICS-10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Number of private methods per class [METRICS-10]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-11", "name": "Number of protected data member(s) per class", "shortDescription": { "text": "Number of protected data member(s) per class" }, "fullDescription": { "text": "Number of protected data member(s) per class [METRICS-11]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Number of protected data member(s) per class [METRICS-11]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-12", "name": "Number of protected methods per class", "shortDescription": { "text": "Number of protected methods per class" }, "fullDescription": { "text": "Number of protected methods per class [METRICS-12]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Number of protected methods per class [METRICS-12]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-13", "name": "Number of public data member(s) per class", "shortDescription": { "text": "Number of public data member(s) per class" }, "fullDescription": { "text": "Number of public data member(s) per class [METRICS-13]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Number of public data member(s) per class [METRICS-13]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-14", "name": "Number of public methods per class", "shortDescription": { "text": "Number of public methods per class" }, "fullDescription": { "text": "Number of public methods per class [METRICS-14]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Number of public methods per class [METRICS-14]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-15", "name": "Avoid functions with more than 5 parameters", "shortDescription": { "text": "Avoid functions with more than 5 parameters" }, "fullDescription": { "text": "Avoid functions with more than 5 parameters [METRICS-15]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid functions with more than 5 parameters [METRICS-15]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-16", "name": "Macros should not use more than 5 parameters", "shortDescription": { "text": "Macros should not use more than 5 parameters" }, "fullDescription": { "text": "Macros should not use more than 5 parameters [METRICS-16]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Macros should not use more than 5 parameters [METRICS-16]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-18", "name": "Follow the Cyclomatic Complexity limit of 10", "shortDescription": { "text": "Follow the Cyclomatic Complexity limit of 10" }, "fullDescription": { "text": "Follow the Cyclomatic Complexity limit of 10 [METRICS-18]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Follow the Cyclomatic Complexity limit of 10 [METRICS-18]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-19", "name": "The percentage of comment lines versus the total number of module lines should be between 20 and 60", "shortDescription": { "text": "The percentage of comment lines versus the total number of module lines should be between 20 and 60" }, "fullDescription": { "text": "The percentage of comment lines versus the total number of module lines should be between 20 and 60 [METRICS-19]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The percentage of comment lines versus the total number of module lines should be between 20 and 60 [METRICS-19]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-20", "name": "Avoid too long functions (declarations and statements)", "shortDescription": { "text": "Avoid too long functions (declarations and statements)" }, "fullDescription": { "text": "Avoid too long functions (declarations and statements) [METRICS-20]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid too long functions (declarations and statements) [METRICS-20]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-21", "name": "Avoid too long functions (blocks)", "shortDescription": { "text": "Avoid too long functions (blocks)" }, "fullDescription": { "text": "Avoid too long functions (blocks) [METRICS-21]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid too long functions (blocks) [METRICS-21]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-22", "name": "Avoid functions with over 75 lines of code", "shortDescription": { "text": "Avoid functions with over 75 lines of code" }, "fullDescription": { "text": "Avoid functions with over 75 lines of code [METRICS-22]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid functions with over 75 lines of code [METRICS-22]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-23", "name": "Nested block depth should not be higher than 5", "shortDescription": { "text": "Nested block depth should not be higher than 5" }, "fullDescription": { "text": "Nested block depth should not be higher than 5 [METRICS-23]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Nested block depth should not be higher than 5 [METRICS-23]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-25", "name": "Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs)", "shortDescription": { "text": "Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs)" }, "fullDescription": { "text": "Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs) [METRICS-25]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs) [METRICS-25]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-26", "name": "Source lines will be kept to a length of 120 characters or less", "shortDescription": { "text": "Source lines will be kept to a length of 120 characters or less" }, "fullDescription": { "text": "Source lines will be kept to a length of 120 characters or less [METRICS-26]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Source lines will be kept to a length of 120 characters or less [METRICS-26]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-27", "name": "Functions with more than 7 parameters will not be used", "shortDescription": { "text": "Functions with more than 7 parameters will not be used" }, "fullDescription": { "text": "Functions with more than 7 parameters will not be used [METRICS-27]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Functions with more than 7 parameters will not be used [METRICS-27]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-28", "name": "Follow the Cyclomatic Complexity limit of 20", "shortDescription": { "text": "Follow the Cyclomatic Complexity limit of 20" }, "fullDescription": { "text": "Follow the Cyclomatic Complexity limit of 20 [METRICS-28]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Follow the Cyclomatic Complexity limit of 20 [METRICS-28]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-30", "name": "No function should be longer than 60 lines of code", "shortDescription": { "text": "No function should be longer than 60 lines of code" }, "fullDescription": { "text": "No function should be longer than 60 lines of code [METRICS-30]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "No function should be longer than 60 lines of code [METRICS-30]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-31", "name": "The assertion density of the code should average to a minimum of two assertions per function", "shortDescription": { "text": "The assertion density of the code should average to a minimum of two assertions per function" }, "fullDescription": { "text": "The assertion density of the code should average to a minimum of two assertions per function [METRICS-31]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The assertion density of the code should average to a minimum of two assertions per function [METRICS-31]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-32", "name": "All functions with more than 20 lines should contain at least 2 assertions", "shortDescription": { "text": "All functions with more than 20 lines should contain at least 2 assertions" }, "fullDescription": { "text": "All functions with more than 20 lines should contain at least 2 assertions [METRICS-32]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All functions with more than 20 lines should contain at least 2 assertions [METRICS-32]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-36", "name": "A global function should not be called from more than 5 different functions", "shortDescription": { "text": "A global function should not be called from more than 5 different functions" }, "fullDescription": { "text": "A global function should not be called from more than 5 different functions [METRICS-36]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A global function should not be called from more than 5 different functions [METRICS-36]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-37", "name": "A function should not call more than 7 different functions", "shortDescription": { "text": "A function should not call more than 7 different functions" }, "fullDescription": { "text": "A function should not call more than 7 different functions [METRICS-37]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function should not call more than 7 different functions [METRICS-37]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-38", "name": "The number of statements within function should be in range 1 - 50", "shortDescription": { "text": "The number of statements within function should be in range 1 - 50" }, "fullDescription": { "text": "The number of statements within function should be in range 1 - 50 [METRICS-38]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The number of statements within function should be in range 1 - 50 [METRICS-38]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-39", "name": "The value of VOCF metric for a function should not be higher than 4", "shortDescription": { "text": "The value of VOCF metric for a function should not be higher than 4" }, "fullDescription": { "text": "The value of VOCF metric for a function should not be higher than 4 [METRICS-39]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The value of VOCF metric for a function should not be higher than 4 [METRICS-39]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-40", "name": "Statements within function should not be nested deeper than 4 levels", "shortDescription": { "text": "Statements within function should not be nested deeper than 4 levels" }, "fullDescription": { "text": "Statements within function should not be nested deeper than 4 levels [METRICS-40]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Statements within function should not be nested deeper than 4 levels [METRICS-40]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-41", "name": "The number of blocks of comments before and inside function to the number of statements in function should be > 0.2", "shortDescription": { "text": "The number of blocks of comments before and inside function to the number of statements in function should be > 0.2" }, "fullDescription": { "text": "The number of blocks of comments before and inside function to the number of statements in function should be > 0.2 [METRICS-41]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The number of blocks of comments before and inside function to the number of statements in function should be > 0.2 [METRICS-41]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-43", "name": "Report the value of Halstead's delivered bugs (B) for a function", "shortDescription": { "text": "Report the value of Halstead's delivered bugs (B) for a function" }, "fullDescription": { "text": "Report the value of Halstead's delivered bugs (B) for a function [METRICS-43]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Report the value of Halstead's delivered bugs (B) for a function [METRICS-43]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-01", "name": "Avoid functions with over 50 lines", "shortDescription": { "text": "Avoid functions with over 50 lines" }, "fullDescription": { "text": "Avoid functions with over 50 lines [METRICS-01]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Avoid functions with over 50 lines [METRICS-01]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-02", "name": "Avoid switch statements with many cases", "shortDescription": { "text": "Avoid switch statements with many cases" }, "fullDescription": { "text": "Avoid switch statements with many cases [METRICS-02]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Avoid switch statements with many cases [METRICS-02]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-17", "name": "Avoid structs, unions, or classes with more than 20 fields", "shortDescription": { "text": "Avoid structs, unions, or classes with more than 20 fields" }, "fullDescription": { "text": "Avoid structs, unions, or classes with more than 20 fields [METRICS-17]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Avoid structs, unions, or classes with more than 20 fields [METRICS-17]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-24", "name": "Avoid source files that are longer than 500 lines", "shortDescription": { "text": "Avoid source files that are longer than 500 lines" }, "fullDescription": { "text": "Avoid source files that are longer than 500 lines [METRICS-24]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Avoid source files that are longer than 500 lines [METRICS-24]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-29", "name": "Report Cyclomatic Complexity", "shortDescription": { "text": "Report Cyclomatic Complexity" }, "fullDescription": { "text": "Report Cyclomatic Complexity [METRICS-29]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Report Cyclomatic Complexity [METRICS-29]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-33", "name": "Report Essential Complexity", "shortDescription": { "text": "Report Essential Complexity" }, "fullDescription": { "text": "Report Essential Complexity [METRICS-33]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Report Essential Complexity [METRICS-33]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-34", "name": "Follow the Essential Complexity limit of 4", "shortDescription": { "text": "Follow the Essential Complexity limit of 4" }, "fullDescription": { "text": "Follow the Essential Complexity limit of 4 [METRICS-34]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Follow the Essential Complexity limit of 4 [METRICS-34]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-35", "name": "Follow the Essential Complexity limit of 10", "shortDescription": { "text": "Follow the Essential Complexity limit of 10" }, "fullDescription": { "text": "Follow the Essential Complexity limit of 10 [METRICS-35]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Follow the Essential Complexity limit of 10 [METRICS-35]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-42", "name": "Follow the Essential Complexity limit of 1", "shortDescription": { "text": "Follow the Essential Complexity limit of 1" }, "fullDescription": { "text": "Follow the Essential Complexity limit of 1 [METRICS-42]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Follow the Essential Complexity limit of 1 [METRICS-42]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "MISRA-005", "name": "Only use characters defined in the ISO C standard", "shortDescription": { "text": "Only use characters defined in the ISO C standard" }, "fullDescription": { "text": "Only use characters defined in the ISO C standard [MISRA-005]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Only use characters defined in the ISO C standard [MISRA-005]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-006", "name": "Values of character types shall be restricted to a defined and documented subset of ISO 10646-1", "shortDescription": { "text": "Values of character types shall be restricted to a defined and documented subset of ISO 10646-1" }, "fullDescription": { "text": "Values of character types shall be restricted to a defined and documented subset of ISO 10646-1 [MISRA-006]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Values of character types shall be restricted to a defined and documented subset of ISO 10646-1 [MISRA-006]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-008", "name": "Do not use wide string literals", "shortDescription": { "text": "Do not use wide string literals" }, "fullDescription": { "text": "Do not use wide string literals [MISRA-008]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use wide string literals [MISRA-008]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-013", "name": "The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd", "shortDescription": { "text": "The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" }, "fullDescription": { "text": "The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd [MISRA-013]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd [MISRA-013]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-014", "name": "Explicitly declare 'char' type as signed or unsigned", "shortDescription": { "text": "Explicitly declare 'char' type as signed or unsigned" }, "fullDescription": { "text": "Explicitly declare 'char' type as signed or unsigned [MISRA-014]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Explicitly declare 'char' type as signed or unsigned [MISRA-014]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-016", "name": "The underlying bit representations of floating point numbers shall not be used", "shortDescription": { "text": "The underlying bit representations of floating point numbers shall not be used" }, "fullDescription": { "text": "The underlying bit representations of floating point numbers shall not be used [MISRA-016]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The underlying bit representations of floating point numbers shall not be used [MISRA-016]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-020", "name": "All functions shall be declared before use", "shortDescription": { "text": "All functions shall be declared before use" }, "fullDescription": { "text": "All functions shall be declared before use [MISRA-020]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All functions shall be declared before use [MISRA-020]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-024", "name": "Identifiers shall not simultaneously have both internal and external linkage in the same translation unit", "shortDescription": { "text": "Identifiers shall not simultaneously have both internal and external linkage in the same translation unit" }, "fullDescription": { "text": "Identifiers shall not simultaneously have both internal and external linkage in the same translation unit [MISRA-024]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers shall not simultaneously have both internal and external linkage in the same translation unit [MISRA-024]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-027", "name": "External object should not be declared in more than one file", "shortDescription": { "text": "External object should not be declared in more than one file" }, "fullDescription": { "text": "External object should not be declared in more than one file [MISRA-027]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "External object should not be declared in more than one file [MISRA-027]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-027_b", "name": "External objects should not be declared in implementation files", "shortDescription": { "text": "External objects should not be declared in implementation files" }, "fullDescription": { "text": "External objects should not be declared in implementation files [MISRA-027_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "External objects should not be declared in implementation files [MISRA-027_b]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-029", "name": "The use of a tag shall agree with its declaration", "shortDescription": { "text": "The use of a tag shall agree with its declaration" }, "fullDescription": { "text": "The use of a tag shall agree with its declaration [MISRA-029]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The use of a tag shall agree with its declaration [MISRA-029]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-030", "name": "All automatic variables shall have been assigned a value before being used", "shortDescription": { "text": "All automatic variables shall have been assigned a value before being used" }, "fullDescription": { "text": "All automatic variables shall have been assigned a value before being used [MISRA-030]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All automatic variables shall have been assigned a value before being used [MISRA-030]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-038", "name": "The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand", "shortDescription": { "text": "The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" }, "fullDescription": { "text": "The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand [MISRA-038]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand [MISRA-038]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-042", "name": "The comma operator shall not be used, except in the control expression of a for loop", "shortDescription": { "text": "The comma operator shall not be used, except in the control expression of a for loop" }, "fullDescription": { "text": "The comma operator shall not be used, except in the control expression of a for loop [MISRA-042]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The comma operator shall not be used, except in the control expression of a for loop [MISRA-042]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-043", "name": "Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used", "shortDescription": { "text": "Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" }, "fullDescription": { "text": "Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used [MISRA-043]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used [MISRA-043]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-043_b", "name": "Avoid mixing arithmetic of different precisions in the same expression", "shortDescription": { "text": "Avoid mixing arithmetic of different precisions in the same expression" }, "fullDescription": { "text": "Avoid mixing arithmetic of different precisions in the same expression [MISRA-043_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid mixing arithmetic of different precisions in the same expression [MISRA-043_b]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-043_c", "name": "Implicit conversions from integral to floating type which may result in a loss of information shall not be used", "shortDescription": { "text": "Implicit conversions from integral to floating type which may result in a loss of information shall not be used" }, "fullDescription": { "text": "Implicit conversions from integral to floating type which may result in a loss of information shall not be used [MISRA-043_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Implicit conversions from integral to floating type which may result in a loss of information shall not be used [MISRA-043_c]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-043_d", "name": "Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used", "shortDescription": { "text": "Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" }, "fullDescription": { "text": "Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used [MISRA-043_d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used [MISRA-043_d]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-044", "name": "Redundant explicit cast to the same type is not allowed", "shortDescription": { "text": "Redundant explicit cast to the same type is not allowed" }, "fullDescription": { "text": "Redundant explicit cast to the same type is not allowed [MISRA-044]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Redundant explicit cast to the same type is not allowed [MISRA-044]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-046_a", "name": "Do not use the volatile keyword", "shortDescription": { "text": "Do not use the volatile keyword" }, "fullDescription": { "text": "Do not use the volatile keyword [MISRA-046_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use the volatile keyword [MISRA-046_a]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-046_b", "name": "Assignment statements should not be nested within other assignment statements", "shortDescription": { "text": "Assignment statements should not be nested within other assignment statements" }, "fullDescription": { "text": "Assignment statements should not be nested within other assignment statements [MISRA-046_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Assignment statements should not be nested within other assignment statements [MISRA-046_b]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-048_a", "name": "Avoid possible integer overflow in expressions in which the result is cast to a wider integer type", "shortDescription": { "text": "Avoid possible integer overflow in expressions in which the result is cast to a wider integer type" }, "fullDescription": { "text": "Avoid possible integer overflow in expressions in which the result is cast to a wider integer type [MISRA-048_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid possible integer overflow in expressions in which the result is cast to a wider integer type [MISRA-048_a]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-048_b", "name": "Don't cast the dividend of two integers to a floating-point type", "shortDescription": { "text": "Don't cast the dividend of two integers to a floating-point type" }, "fullDescription": { "text": "Don't cast the dividend of two integers to a floating-point type [MISRA-048_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Don't cast the dividend of two integers to a floating-point type [MISRA-048_b]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-048_c", "name": "Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type", "shortDescription": { "text": "Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" }, "fullDescription": { "text": "Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type [MISRA-048_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type [MISRA-048_c]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-048_d", "name": "Avoid unintentionally discarding the remainder of integer division", "shortDescription": { "text": "Avoid unintentionally discarding the remainder of integer division" }, "fullDescription": { "text": "Avoid unintentionally discarding the remainder of integer division [MISRA-048_d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid unintentionally discarding the remainder of integer division [MISRA-048_d]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-054", "name": "A null statement shall only occur on a line by itself", "shortDescription": { "text": "A null statement shall only occur on a line by itself" }, "fullDescription": { "text": "A null statement shall only occur on a line by itself [MISRA-054]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A null statement shall only occur on a line by itself [MISRA-054]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-058", "name": "Do not use the break statement", "shortDescription": { "text": "Do not use the break statement" }, "fullDescription": { "text": "Do not use the break statement [MISRA-058]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use the break statement [MISRA-058]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-065", "name": "Do not use floating point variables as loop counters", "shortDescription": { "text": "Do not use floating point variables as loop counters" }, "fullDescription": { "text": "Do not use floating point variables as loop counters [MISRA-065]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use floating point variables as loop counters [MISRA-065]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-069", "name": "Do not use functions with variable numbers of arguments", "shortDescription": { "text": "Do not use functions with variable numbers of arguments" }, "fullDescription": { "text": "Do not use functions with variable numbers of arguments [MISRA-069]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use functions with variable numbers of arguments [MISRA-069]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-071_a", "name": "Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call", "shortDescription": { "text": "Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" }, "fullDescription": { "text": "Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call [MISRA-071_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call [MISRA-071_a]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-071_b", "name": "Functions shall always have visible prototype at the function call", "shortDescription": { "text": "Functions shall always have visible prototype at the function call" }, "fullDescription": { "text": "Functions shall always have visible prototype at the function call [MISRA-071_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Functions shall always have visible prototype at the function call [MISRA-071_b]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-073", "name": "Provide none or all identifiers for function arguments", "shortDescription": { "text": "Provide none or all identifiers for function arguments" }, "fullDescription": { "text": "Provide none or all identifiers for function arguments [MISRA-073]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Provide none or all identifiers for function arguments [MISRA-073]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-083", "name": "Provide expression for return statement of non-void functions", "shortDescription": { "text": "Provide expression for return statement of non-void functions" }, "fullDescription": { "text": "Provide expression for return statement of non-void functions [MISRA-083]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Provide expression for return statement of non-void functions [MISRA-083]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-084", "name": "Avoid expressions in return statements of void functions", "shortDescription": { "text": "Avoid expressions in return statements of void functions" }, "fullDescription": { "text": "Avoid expressions in return statements of void functions [MISRA-084]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid expressions in return statements of void functions [MISRA-084]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-089", "name": "The #include directive shall be followed by either a <filename> or \"filename\" sequence", "shortDescription": { "text": "The #include directive shall be followed by either a <filename> or \"filename\" sequence" }, "fullDescription": { "text": "The #include directive shall be followed by either a <filename> or \"filename\" sequence [MISRA-089]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The #include directive shall be followed by either a <filename> or \"filename\" sequence [MISRA-089]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-096", "name": "Enclose in parentheses whole definition of a function-like macro", "shortDescription": { "text": "Enclose in parentheses whole definition of a function-like macro" }, "fullDescription": { "text": "Enclose in parentheses whole definition of a function-like macro [MISRA-096]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Enclose in parentheses whole definition of a function-like macro [MISRA-096]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-100", "name": "Use only non-ambiguous forms of defined pre-processor operator", "shortDescription": { "text": "Use only non-ambiguous forms of defined pre-processor operator" }, "fullDescription": { "text": "Use only non-ambiguous forms of defined pre-processor operator [MISRA-100]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use only non-ambiguous forms of defined pre-processor operator [MISRA-100]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-101", "name": "Pointer arithmetic should not be used", "shortDescription": { "text": "Pointer arithmetic should not be used" }, "fullDescription": { "text": "Pointer arithmetic should not be used [MISRA-101]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Pointer arithmetic should not be used [MISRA-101]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-104", "name": "Do not use non-constant pointers to functions", "shortDescription": { "text": "Do not use non-constant pointers to functions" }, "fullDescription": { "text": "Do not use non-constant pointers to functions [MISRA-104]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use non-constant pointers to functions [MISRA-104]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-105", "name": "All the functions pointed to by a single pointer to function shall be identical in the number and type of parameters and the return type", "shortDescription": { "text": "All the functions pointed to by a single pointer to function shall be identical in the number and type of parameters and the return type" }, "fullDescription": { "text": "All the functions pointed to by a single pointer to function shall be identical in the number and type of parameters and the return type [MISRA-105]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All the functions pointed to by a single pointer to function shall be identical in the number and type of parameters and the return type [MISRA-105]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-107_a", "name": "The NULL pointer shall not be dereferenced", "shortDescription": { "text": "The NULL pointer shall not be dereferenced" }, "fullDescription": { "text": "The NULL pointer shall not be dereferenced [MISRA-107_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The NULL pointer shall not be dereferenced [MISRA-107_a]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-107_b", "name": "The NULL pointer shall not be dereferenced", "shortDescription": { "text": "The NULL pointer shall not be dereferenced" }, "fullDescription": { "text": "The NULL pointer shall not be dereferenced [MISRA-107_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The NULL pointer shall not be dereferenced [MISRA-107_b]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-108", "name": "All members of structure or union should be fully specified", "shortDescription": { "text": "All members of structure or union should be fully specified" }, "fullDescription": { "text": "All members of structure or union should be fully specified [MISRA-108]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All members of structure or union should be fully specified [MISRA-108]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-110", "name": "Unions shall not be used to access the sub-parts of larger data structure", "shortDescription": { "text": "Unions shall not be used to access the sub-parts of larger data structure" }, "fullDescription": { "text": "Unions shall not be used to access the sub-parts of larger data structure [MISRA-110]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Unions shall not be used to access the sub-parts of larger data structure [MISRA-110]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-113", "name": "All the members of a structure (or class\/union) shall be named", "shortDescription": { "text": "All the members of a structure (or class\/union) shall be named" }, "fullDescription": { "text": "All the members of a structure (or class\/union) shall be named [MISRA-113]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All the members of a structure (or class\/union) shall be named [MISRA-113]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-115", "name": "Standard library function names shall not be reused", "shortDescription": { "text": "Standard library function names shall not be reused" }, "fullDescription": { "text": "Standard library function names shall not be reused [MISRA-115]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Standard library function names shall not be reused [MISRA-115]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-121_a", "name": "The 'setlocale' function should not be used", "shortDescription": { "text": "The 'setlocale' function should not be used" }, "fullDescription": { "text": "The 'setlocale' function should not be used [MISRA-121_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'setlocale' function should not be used [MISRA-121_a]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-121_b", "name": "Do not include <locale.h> header", "shortDescription": { "text": "Do not include <locale.h> header" }, "fullDescription": { "text": "Do not include <locale.h> header [MISRA-121_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not include <locale.h> header [MISRA-121_b]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-023", "name": "Objects or functions with external linkage shall be declared in a header file", "shortDescription": { "text": "Objects or functions with external linkage shall be declared in a header file" }, "fullDescription": { "text": "Objects or functions with external linkage shall be declared in a header file [MISRA-023]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Objects or functions with external linkage shall be declared in a header file [MISRA-023]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-004_a", "name": "Provisions should be made for appropriate run-time checking", "shortDescription": { "text": "Provisions should be made for appropriate run-time checking" }, "fullDescription": { "text": "Provisions should be made for appropriate run-time checking [MISRA-004_a]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Provisions should be made for appropriate run-time checking [MISRA-004_a]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-004_b", "name": "Provisions should be made for appropriate run-time checking", "shortDescription": { "text": "Provisions should be made for appropriate run-time checking" }, "fullDescription": { "text": "Provisions should be made for appropriate run-time checking [MISRA-004_b]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Provisions should be made for appropriate run-time checking [MISRA-004_b]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-018_a", "name": "Use type suffix for numeric constants", "shortDescription": { "text": "Use type suffix for numeric constants" }, "fullDescription": { "text": "Use type suffix for numeric constants [MISRA-018_a]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Use type suffix for numeric constants [MISRA-018_a]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-018_b", "name": "Use type suffix for numeric constants", "shortDescription": { "text": "Use type suffix for numeric constants" }, "fullDescription": { "text": "Use type suffix for numeric constants [MISRA-018_b]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Use type suffix for numeric constants [MISRA-018_b]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-018_c", "name": "Use type suffix for numeric constants", "shortDescription": { "text": "Use type suffix for numeric constants" }, "fullDescription": { "text": "Use type suffix for numeric constants [MISRA-018_c]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Use type suffix for numeric constants [MISRA-018_c]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-018_d", "name": "Use type suffix for numeric constants", "shortDescription": { "text": "Use type suffix for numeric constants" }, "fullDescription": { "text": "Use type suffix for numeric constants [MISRA-018_d]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Use type suffix for numeric constants [MISRA-018_d]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-022", "name": "Declare objects at function scope", "shortDescription": { "text": "Declare objects at function scope" }, "fullDescription": { "text": "Declare objects at function scope [MISRA-022]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Declare objects at function scope [MISRA-022]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-028", "name": "The 'register' storage class specifier shall not be used", "shortDescription": { "text": "The 'register' storage class specifier shall not be used" }, "fullDescription": { "text": "The 'register' storage class specifier shall not be used [MISRA-028]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "The 'register' storage class specifier shall not be used [MISRA-028]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-041", "name": "Document integer division", "shortDescription": { "text": "Document integer division" }, "fullDescription": { "text": "Document integer division [MISRA-041]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Document integer division [MISRA-041]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-051", "name": "Evaluation of constant unsigned integer expressions should not lead to wrap-around", "shortDescription": { "text": "Evaluation of constant unsigned integer expressions should not lead to wrap-around" }, "fullDescription": { "text": "Evaluation of constant unsigned integer expressions should not lead to wrap-around [MISRA-051]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Evaluation of constant unsigned integer expressions should not lead to wrap-around [MISRA-051]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-055", "name": "Do not use labels", "shortDescription": { "text": "Do not use labels" }, "fullDescription": { "text": "Do not use labels [MISRA-055]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Do not use labels [MISRA-055]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA2004-12_2_b", "name": "Don't write code that depends on the order of evaluation of function arguments", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function arguments" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function arguments [MISRA2004-12_2_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of function arguments [MISRA2004-12_2_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-10_1_a", "name": "Avoid implicit conversions between signed and unsigned integer types", "shortDescription": { "text": "Avoid implicit conversions between signed and unsigned integer types" }, "fullDescription": { "text": "Avoid implicit conversions between signed and unsigned integer types [MISRA2004-10_1_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid implicit conversions between signed and unsigned integer types [MISRA2004-10_1_a]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-10_1_b", "name": "There shall be no implicit conversions from integral to floating type", "shortDescription": { "text": "There shall be no implicit conversions from integral to floating type" }, "fullDescription": { "text": "There shall be no implicit conversions from integral to floating type [MISRA2004-10_1_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no implicit conversions from integral to floating type [MISRA2004-10_1_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-10_1_c", "name": "Avoid implicit conversions of complex expressions", "shortDescription": { "text": "Avoid implicit conversions of complex expressions" }, "fullDescription": { "text": "Avoid implicit conversions of complex expressions [MISRA2004-10_1_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid implicit conversions of complex expressions [MISRA2004-10_1_c]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-10_1_d", "name": "Avoid implicit conversions from wider to narrower types", "shortDescription": { "text": "Avoid implicit conversions from wider to narrower types" }, "fullDescription": { "text": "Avoid implicit conversions from wider to narrower types [MISRA2004-10_1_d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid implicit conversions from wider to narrower types [MISRA2004-10_1_d]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-10_1_e", "name": "Avoid implicit conversions of function return expressions", "shortDescription": { "text": "Avoid implicit conversions of function return expressions" }, "fullDescription": { "text": "Avoid implicit conversions of function return expressions [MISRA2004-10_1_e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid implicit conversions of function return expressions [MISRA2004-10_1_e]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-10_1_f", "name": "Avoid implicit conversions of complex expressions", "shortDescription": { "text": "Avoid implicit conversions of complex expressions" }, "fullDescription": { "text": "Avoid implicit conversions of complex expressions [MISRA2004-10_1_f]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid implicit conversions of complex expressions [MISRA2004-10_1_f]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-10_1_g", "name": "Avoid implicit conversions of function arguments", "shortDescription": { "text": "Avoid implicit conversions of function arguments" }, "fullDescription": { "text": "Avoid implicit conversions of function arguments [MISRA2004-10_1_g]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid implicit conversions of function arguments [MISRA2004-10_1_g]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-10_1_i", "name": "Avoid implicit conversions of complex expressions", "shortDescription": { "text": "Avoid implicit conversions of complex expressions" }, "fullDescription": { "text": "Avoid implicit conversions of complex expressions [MISRA2004-10_1_i]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid implicit conversions of complex expressions [MISRA2004-10_1_i]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-10_2_a", "name": "Avoid implicit conversions from floating to integral type", "shortDescription": { "text": "Avoid implicit conversions from floating to integral type" }, "fullDescription": { "text": "Avoid implicit conversions from floating to integral type [MISRA2004-10_2_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid implicit conversions from floating to integral type [MISRA2004-10_2_a]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-10_2_b", "name": "Avoid implicit conversions from wider to narrower floating type", "shortDescription": { "text": "Avoid implicit conversions from wider to narrower floating type" }, "fullDescription": { "text": "Avoid implicit conversions from wider to narrower floating type [MISRA2004-10_2_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid implicit conversions from wider to narrower floating type [MISRA2004-10_2_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-10_2_c", "name": "Avoid implicit conversions from narrower to wider floating type", "shortDescription": { "text": "Avoid implicit conversions from narrower to wider floating type" }, "fullDescription": { "text": "Avoid implicit conversions from narrower to wider floating type [MISRA2004-10_2_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid implicit conversions from narrower to wider floating type [MISRA2004-10_2_c]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-10_2_d", "name": "Avoid implicit conversions of floating point numbers from wider to narrower floating type", "shortDescription": { "text": "Avoid implicit conversions of floating point numbers from wider to narrower floating type" }, "fullDescription": { "text": "Avoid implicit conversions of floating point numbers from wider to narrower floating type [MISRA2004-10_2_d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid implicit conversions of floating point numbers from wider to narrower floating type [MISRA2004-10_2_d]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-10_3", "name": "The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression", "shortDescription": { "text": "The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" }, "fullDescription": { "text": "The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression [MISRA2004-10_3]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression [MISRA2004-10_3]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-10_4", "name": "The value of a complex expression of floating type should not be cast to a wider floating type", "shortDescription": { "text": "The value of a complex expression of floating type should not be cast to a wider floating type" }, "fullDescription": { "text": "The value of a complex expression of floating type should not be cast to a wider floating type [MISRA2004-10_4]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The value of a complex expression of floating type should not be cast to a wider floating type [MISRA2004-10_4]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-10_4_b", "name": "The value of a complex expression of floating type should not be cast to an integer type", "shortDescription": { "text": "The value of a complex expression of floating type should not be cast to an integer type" }, "fullDescription": { "text": "The value of a complex expression of floating type should not be cast to an integer type [MISRA2004-10_4_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The value of a complex expression of floating type should not be cast to an integer type [MISRA2004-10_4_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-10_5", "name": "If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand", "shortDescription": { "text": "If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" }, "fullDescription": { "text": "If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand [MISRA2004-10_5]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand [MISRA2004-10_5]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-11_1", "name": "Conversions shall not be performed between a pointer to a function and any type other than an integral type", "shortDescription": { "text": "Conversions shall not be performed between a pointer to a function and any type other than an integral type" }, "fullDescription": { "text": "Conversions shall not be performed between a pointer to a function and any type other than an integral type [MISRA2004-11_1]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Conversions shall not be performed between a pointer to a function and any type other than an integral type [MISRA2004-11_1]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-11_2", "name": "Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void", "shortDescription": { "text": "Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void" }, "fullDescription": { "text": "Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void [MISRA2004-11_2]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void [MISRA2004-11_2]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-11_2_b", "name": "Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void", "shortDescription": { "text": "Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void" }, "fullDescription": { "text": "Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void [MISRA2004-11_2_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void [MISRA2004-11_2_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-11_2_c", "name": "Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void", "shortDescription": { "text": "Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void" }, "fullDescription": { "text": "Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void [MISRA2004-11_2_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void [MISRA2004-11_2_c]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-11_3_a", "name": "A cast should not convert a pointer type to an integral type", "shortDescription": { "text": "A cast should not convert a pointer type to an integral type" }, "fullDescription": { "text": "A cast should not convert a pointer type to an integral type [MISRA2004-11_3_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A cast should not convert a pointer type to an integral type [MISRA2004-11_3_a]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-11_3_b", "name": "A cast should not convert an integral type to a pointer type", "shortDescription": { "text": "A cast should not convert an integral type to a pointer type" }, "fullDescription": { "text": "A cast should not convert an integral type to a pointer type [MISRA2004-11_3_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A cast should not convert an integral type to a pointer type [MISRA2004-11_3_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-11_4", "name": "A cast should not be performed between a pointer to object type and a different pointer to object type", "shortDescription": { "text": "A cast should not be performed between a pointer to object type and a different pointer to object type" }, "fullDescription": { "text": "A cast should not be performed between a pointer to object type and a different pointer to object type [MISRA2004-11_4]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A cast should not be performed between a pointer to object type and a different pointer to object type [MISRA2004-11_4]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-11_5", "name": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference", "shortDescription": { "text": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" }, "fullDescription": { "text": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference [MISRA2004-11_5]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference [MISRA2004-11_5]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-12_10", "name": "The comma operator shall not be used", "shortDescription": { "text": "The comma operator shall not be used" }, "fullDescription": { "text": "The comma operator shall not be used [MISRA2004-12_10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The comma operator shall not be used [MISRA2004-12_10]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-12_12", "name": "The underlying bit representations of floating-point values shall not be used", "shortDescription": { "text": "The underlying bit representations of floating-point values shall not be used" }, "fullDescription": { "text": "The underlying bit representations of floating-point values shall not be used [MISRA2004-12_12]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The underlying bit representations of floating-point values shall not be used [MISRA2004-12_12]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-12_13", "name": "The increment (++) and decrement (--) operators should not be mixed with other operators in an expression", "shortDescription": { "text": "The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" }, "fullDescription": { "text": "The increment (++) and decrement (--) operators should not be mixed with other operators in an expression [MISRA2004-12_13]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The increment (++) and decrement (--) operators should not be mixed with other operators in an expression [MISRA2004-12_13]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-12_1_a", "name": "Use parenthesis for the right-hand operand of an assignment operator when it contains an assignment expression", "shortDescription": { "text": "Use parenthesis for the right-hand operand of an assignment operator when it contains an assignment expression" }, "fullDescription": { "text": "Use parenthesis for the right-hand operand of an assignment operator when it contains an assignment expression [MISRA2004-12_1_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use parenthesis for the right-hand operand of an assignment operator when it contains an assignment expression [MISRA2004-12_1_a]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-12_1_d", "name": "Limited dependence should be placed on C's operator precedence rules in expressions", "shortDescription": { "text": "Limited dependence should be placed on C's operator precedence rules in expressions" }, "fullDescription": { "text": "Limited dependence should be placed on C's operator precedence rules in expressions [MISRA2004-12_1_d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Limited dependence should be placed on C's operator precedence rules in expressions [MISRA2004-12_1_d]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-12_1_e", "name": "Use parentheses unless all operators in the expression are the same", "shortDescription": { "text": "Use parentheses unless all operators in the expression are the same" }, "fullDescription": { "text": "Use parentheses unless all operators in the expression are the same [MISRA2004-12_1_e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use parentheses unless all operators in the expression are the same [MISRA2004-12_1_e]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-12_2_a", "name": "The value of an expression shall be the same under any order of evaluation that the standard permits", "shortDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits" }, "fullDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [MISRA2004-12_2_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [MISRA2004-12_2_a]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-12_2_c", "name": "Don't write code that depends on the order of evaluation of function designator and function arguments", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments [MISRA2004-12_2_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments [MISRA2004-12_2_c]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-12_2_d", "name": "Don't write code that depends on the order of evaluation of expression that involves a function call", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call [MISRA2004-12_2_d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call [MISRA2004-12_2_d]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-12_2_e", "name": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression", "shortDescription": { "text": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" }, "fullDescription": { "text": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression [MISRA2004-12_2_e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression [MISRA2004-12_2_e]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-12_2_f", "name": "Do not use more than one volatile between two adjacent sequence points", "shortDescription": { "text": "Do not use more than one volatile between two adjacent sequence points" }, "fullDescription": { "text": "Do not use more than one volatile between two adjacent sequence points [MISRA2004-12_2_f]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use more than one volatile between two adjacent sequence points [MISRA2004-12_2_f]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-12_2_g", "name": "Don't write code that depends on the order of evaluation of function calls", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function calls" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function calls [MISRA2004-12_2_g]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Don't write code that depends on the order of evaluation of function calls [MISRA2004-12_2_g]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-12_3", "name": "The operand of the sizeof operator shall not contain any expression which has side effects", "shortDescription": { "text": "The operand of the sizeof operator shall not contain any expression which has side effects" }, "fullDescription": { "text": "The operand of the sizeof operator shall not contain any expression which has side effects [MISRA2004-12_3]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The operand of the sizeof operator shall not contain any expression which has side effects [MISRA2004-12_3]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-12_3_b", "name": "Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator", "shortDescription": { "text": "Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" }, "fullDescription": { "text": "Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator [MISRA2004-12_3_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator [MISRA2004-12_3_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-12_3_c", "name": "The function call that causes the side effect shall not be the operand of the sizeof operator", "shortDescription": { "text": "The function call that causes the side effect shall not be the operand of the sizeof operator" }, "fullDescription": { "text": "The function call that causes the side effect shall not be the operand of the sizeof operator [MISRA2004-12_3_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The function call that causes the side effect shall not be the operand of the sizeof operator [MISRA2004-12_3_c]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-12_4_a", "name": "The right-hand operand of a logical && or || operator shall not contain side effects", "shortDescription": { "text": "The right-hand operand of a logical && or || operator shall not contain side effects" }, "fullDescription": { "text": "The right-hand operand of a logical && or || operator shall not contain side effects [MISRA2004-12_4_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The right-hand operand of a logical && or || operator shall not contain side effects [MISRA2004-12_4_a]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-12_5", "name": "The operands of a logical && or || shall be primary-expressions", "shortDescription": { "text": "The operands of a logical && or || shall be primary-expressions" }, "fullDescription": { "text": "The operands of a logical && or || shall be primary-expressions [MISRA2004-12_5]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The operands of a logical && or || shall be primary-expressions [MISRA2004-12_5]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-12_6_a", "name": "The operands of logical operators (&&, || and !) should be effectively Boolean", "shortDescription": { "text": "The operands of logical operators (&&, || and !) should be effectively Boolean" }, "fullDescription": { "text": "The operands of logical operators (&&, || and !) should be effectively Boolean [MISRA2004-12_6_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The operands of logical operators (&&, || and !) should be effectively Boolean [MISRA2004-12_6_a]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-12_6_b", "name": "Expressions that are effectively Boolean should not be used as operands to operators other than (&&, ||, !, =, ==, !=, ?:)", "shortDescription": { "text": "Expressions that are effectively Boolean should not be used as operands to operators other than (&&, ||, !, =, ==, !=, ?:)" }, "fullDescription": { "text": "Expressions that are effectively Boolean should not be used as operands to operators other than (&&, ||, !, =, ==, !=, ?:) [MISRA2004-12_6_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Expressions that are effectively Boolean should not be used as operands to operators other than (&&, ||, !, =, ==, !=, ?:) [MISRA2004-12_6_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-12_7", "name": "Bitwise operators shall not be applied to operands whose underlying type is signed", "shortDescription": { "text": "Bitwise operators shall not be applied to operands whose underlying type is signed" }, "fullDescription": { "text": "Bitwise operators shall not be applied to operands whose underlying type is signed [MISRA2004-12_7]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Bitwise operators shall not be applied to operands whose underlying type is signed [MISRA2004-12_7]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-12_8", "name": "The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand", "shortDescription": { "text": "The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" }, "fullDescription": { "text": "The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand [MISRA2004-12_8]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand [MISRA2004-12_8]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-12_9", "name": "The unary minus operator shall not be applied to an expression whose underlying type is unsigned", "shortDescription": { "text": "The unary minus operator shall not be applied to an expression whose underlying type is unsigned" }, "fullDescription": { "text": "The unary minus operator shall not be applied to an expression whose underlying type is unsigned [MISRA2004-12_9]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The unary minus operator shall not be applied to an expression whose underlying type is unsigned [MISRA2004-12_9]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_1", "name": "Assignment operators shall not be used in expressions that yield a Boolean value", "shortDescription": { "text": "Assignment operators shall not be used in expressions that yield a Boolean value" }, "fullDescription": { "text": "Assignment operators shall not be used in expressions that yield a Boolean value [MISRA2004-13_1]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Assignment operators shall not be used in expressions that yield a Boolean value [MISRA2004-13_1]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_2", "name": "Tests of a value against zero should be made explicit, unless the operand is effectively Boolean", "shortDescription": { "text": "Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" }, "fullDescription": { "text": "Tests of a value against zero should be made explicit, unless the operand is effectively Boolean [MISRA2004-13_2]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Tests of a value against zero should be made explicit, unless the operand is effectively Boolean [MISRA2004-13_2]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_3", "name": "Floating-point expressions shall not be tested for equality or inequality", "shortDescription": { "text": "Floating-point expressions shall not be tested for equality or inequality" }, "fullDescription": { "text": "Floating-point expressions shall not be tested for equality or inequality [MISRA2004-13_3]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Floating-point expressions shall not be tested for equality or inequality [MISRA2004-13_3]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_4", "name": "The controlling expression of a for statement shall not contain any objects of floating type", "shortDescription": { "text": "The controlling expression of a for statement shall not contain any objects of floating type" }, "fullDescription": { "text": "The controlling expression of a for statement shall not contain any objects of floating type [MISRA2004-13_4]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The controlling expression of a for statement shall not contain any objects of floating type [MISRA2004-13_4]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_5", "name": "The three expressions of a for statement shall be concerned only with loop control", "shortDescription": { "text": "The three expressions of a for statement shall be concerned only with loop control" }, "fullDescription": { "text": "The three expressions of a for statement shall be concerned only with loop control [MISRA2004-13_5]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The three expressions of a for statement shall be concerned only with loop control [MISRA2004-13_5]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_6", "name": "Do not modify for loop counter within a body of the loop", "shortDescription": { "text": "Do not modify for loop counter within a body of the loop" }, "fullDescription": { "text": "Do not modify for loop counter within a body of the loop [MISRA2004-13_6]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not modify for loop counter within a body of the loop [MISRA2004-13_6]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_a", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_a]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_aa", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_aa]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_aa]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_ab", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_ab]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_ab]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_ac", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_ac]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_ac]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_ad", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_ad]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_ad]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_ae", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_ae]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_ae]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_af", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_af]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_af]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_ag", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_ag]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_ag]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_ah", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_ah]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_ah]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_ai", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_ai]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_ai]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_aj", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_aj]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_aj]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_ak", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_ak]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_ak]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_b", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_c", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_c]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_d", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_d]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_j", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_j]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_j]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_k", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_k]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_k]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_l", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_l]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_l]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_m", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_m]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_m]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_n", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_n]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_n]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_s", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_s]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_s]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_t", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_t]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_t]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_u", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_u]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_u]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_v", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_v]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_v]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_w", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_w]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_w]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_x", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_x]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_x]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_y", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_y]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_y]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-13_7_z", "name": "Boolean operations whose results are invariant shall not be permitted", "shortDescription": { "text": "Boolean operations whose results are invariant shall not be permitted" }, "fullDescription": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_z]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Boolean operations whose results are invariant shall not be permitted [MISRA2004-13_7_z]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-14_10", "name": "All 'if...else-if' constructs shall be terminated with an 'else' clause", "shortDescription": { "text": "All 'if...else-if' constructs shall be terminated with an 'else' clause" }, "fullDescription": { "text": "All 'if...else-if' constructs shall be terminated with an 'else' clause [MISRA2004-14_10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All 'if...else-if' constructs shall be terminated with an 'else' clause [MISRA2004-14_10]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-14_1_a", "name": "There shall be no unreachable code in \"else\" block", "shortDescription": { "text": "There shall be no unreachable code in \"else\" block" }, "fullDescription": { "text": "There shall be no unreachable code in \"else\" block [MISRA2004-14_1_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code in \"else\" block [MISRA2004-14_1_a]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-14_1_b", "name": "There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute", "shortDescription": { "text": "There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute" }, "fullDescription": { "text": "There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute [MISRA2004-14_1_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute [MISRA2004-14_1_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-14_1_c", "name": "There shall be no unreachable code in \"if\/else\/while\/for\" block", "shortDescription": { "text": "There shall be no unreachable code in \"if\/else\/while\/for\" block" }, "fullDescription": { "text": "There shall be no unreachable code in \"if\/else\/while\/for\" block [MISRA2004-14_1_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code in \"if\/else\/while\/for\" block [MISRA2004-14_1_c]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-14_1_d", "name": "There shall be no unreachable code in switch statement", "shortDescription": { "text": "There shall be no unreachable code in switch statement" }, "fullDescription": { "text": "There shall be no unreachable code in switch statement [MISRA2004-14_1_d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code in switch statement [MISRA2004-14_1_d]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-14_1_e", "name": "There shall be no unreachable code in 'for' loop", "shortDescription": { "text": "There shall be no unreachable code in 'for' loop" }, "fullDescription": { "text": "There shall be no unreachable code in 'for' loop [MISRA2004-14_1_e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code in 'for' loop [MISRA2004-14_1_e]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-14_1_f", "name": "There shall be no unreachable code after 'if' or 'switch' statement", "shortDescription": { "text": "There shall be no unreachable code after 'if' or 'switch' statement" }, "fullDescription": { "text": "There shall be no unreachable code after 'if' or 'switch' statement [MISRA2004-14_1_f]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code after 'if' or 'switch' statement [MISRA2004-14_1_f]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-14_1_g", "name": "There shall be no unreachable code after \"if\" or \"switch\" statement inside while\/for\/do...while loop", "shortDescription": { "text": "There shall be no unreachable code after \"if\" or \"switch\" statement inside while\/for\/do...while loop" }, "fullDescription": { "text": "There shall be no unreachable code after \"if\" or \"switch\" statement inside while\/for\/do...while loop [MISRA2004-14_1_g]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unreachable code after \"if\" or \"switch\" statement inside while\/for\/do...while loop [MISRA2004-14_1_g]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-14_2", "name": "All non-null statements shall either have at least one side-effect however executed or cause control flow to change", "shortDescription": { "text": "All non-null statements shall either have at least one side-effect however executed or cause control flow to change" }, "fullDescription": { "text": "All non-null statements shall either have at least one side-effect however executed or cause control flow to change [MISRA2004-14_2]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All non-null statements shall either have at least one side-effect however executed or cause control flow to change [MISRA2004-14_2]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-14_3", "name": "A null statement shall occur on a line by itself or be followed by a comment", "shortDescription": { "text": "A null statement shall occur on a line by itself or be followed by a comment" }, "fullDescription": { "text": "A null statement shall occur on a line by itself or be followed by a comment [MISRA2004-14_3]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A null statement shall occur on a line by itself or be followed by a comment [MISRA2004-14_3]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-14_4", "name": "The goto statement shall not be used", "shortDescription": { "text": "The goto statement shall not be used" }, "fullDescription": { "text": "The goto statement shall not be used [MISRA2004-14_4]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The goto statement shall not be used [MISRA2004-14_4]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-14_5", "name": "The continue statement shall not be used", "shortDescription": { "text": "The continue statement shall not be used" }, "fullDescription": { "text": "The continue statement shall not be used [MISRA2004-14_5]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The continue statement shall not be used [MISRA2004-14_5]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-14_6", "name": "For any iteration statement there shall be at most one break statement used for loop termination", "shortDescription": { "text": "For any iteration statement there shall be at most one break statement used for loop termination" }, "fullDescription": { "text": "For any iteration statement there shall be at most one break statement used for loop termination [MISRA2004-14_6]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "For any iteration statement there shall be at most one break statement used for loop termination [MISRA2004-14_6]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-14_7", "name": "A function shall have a single point of exit at the end of the function", "shortDescription": { "text": "A function shall have a single point of exit at the end of the function" }, "fullDescription": { "text": "A function shall have a single point of exit at the end of the function [MISRA2004-14_7]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function shall have a single point of exit at the end of the function [MISRA2004-14_7]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-14_8", "name": "The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement", "shortDescription": { "text": "The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" }, "fullDescription": { "text": "The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement [MISRA2004-14_8]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement [MISRA2004-14_8]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-14_9", "name": "'if' and 'else' should be followed by a compound statement", "shortDescription": { "text": "'if' and 'else' should be followed by a compound statement" }, "fullDescription": { "text": "'if' and 'else' should be followed by a compound statement [MISRA2004-14_9]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "'if' and 'else' should be followed by a compound statement [MISRA2004-14_9]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-15_0_a", "name": "A break statement should be placed only at the end of switch clause", "shortDescription": { "text": "A break statement should be placed only at the end of switch clause" }, "fullDescription": { "text": "A break statement should be placed only at the end of switch clause [MISRA2004-15_0_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A break statement should be placed only at the end of switch clause [MISRA2004-15_0_a]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-15_0_b", "name": "A switch statement shall only contain switch labels and switch clauses, and no other code", "shortDescription": { "text": "A switch statement shall only contain switch labels and switch clauses, and no other code" }, "fullDescription": { "text": "A switch statement shall only contain switch labels and switch clauses, and no other code [MISRA2004-15_0_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A switch statement shall only contain switch labels and switch clauses, and no other code [MISRA2004-15_0_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-15_1", "name": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement", "shortDescription": { "text": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" }, "fullDescription": { "text": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement [MISRA2004-15_1]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement [MISRA2004-15_1]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-15_2", "name": "An unconditional break statement shall terminate every non-empty case clause", "shortDescription": { "text": "An unconditional break statement shall terminate every non-empty case clause" }, "fullDescription": { "text": "An unconditional break statement shall terminate every non-empty case clause [MISRA2004-15_2]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An unconditional break statement shall terminate every non-empty case clause [MISRA2004-15_2]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-15_2_b", "name": "An unconditional break statement shall terminate every non-empty default clause", "shortDescription": { "text": "An unconditional break statement shall terminate every non-empty default clause" }, "fullDescription": { "text": "An unconditional break statement shall terminate every non-empty default clause [MISRA2004-15_2_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An unconditional break statement shall terminate every non-empty default clause [MISRA2004-15_2_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-15_3", "name": "The final clause of a switch statement shall be the default clause", "shortDescription": { "text": "The final clause of a switch statement shall be the default clause" }, "fullDescription": { "text": "The final clause of a switch statement shall be the default clause [MISRA2004-15_3]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The final clause of a switch statement shall be the default clause [MISRA2004-15_3]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-15_4", "name": "A switch expression shall not represent a value that is effectively Boolean", "shortDescription": { "text": "A switch expression shall not represent a value that is effectively Boolean" }, "fullDescription": { "text": "A switch expression shall not represent a value that is effectively Boolean [MISRA2004-15_4]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A switch expression shall not represent a value that is effectively Boolean [MISRA2004-15_4]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-15_4_b", "name": "A switch expression shall not represent a value that is effectively Boolean", "shortDescription": { "text": "A switch expression shall not represent a value that is effectively Boolean" }, "fullDescription": { "text": "A switch expression shall not represent a value that is effectively Boolean [MISRA2004-15_4_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A switch expression shall not represent a value that is effectively Boolean [MISRA2004-15_4_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-15_5", "name": "Every switch statement shall have at least one case clause", "shortDescription": { "text": "Every switch statement shall have at least one case clause" }, "fullDescription": { "text": "Every switch statement shall have at least one case clause [MISRA2004-15_5]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Every switch statement shall have at least one case clause [MISRA2004-15_5]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-16_1", "name": "Functions shall not be defined with a variable number of arguments", "shortDescription": { "text": "Functions shall not be defined with a variable number of arguments" }, "fullDescription": { "text": "Functions shall not be defined with a variable number of arguments [MISRA2004-16_1]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Functions shall not be defined with a variable number of arguments [MISRA2004-16_1]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-16_10", "name": "If a function returns error information, then that error information shall be tested", "shortDescription": { "text": "If a function returns error information, then that error information shall be tested" }, "fullDescription": { "text": "If a function returns error information, then that error information shall be tested [MISRA2004-16_10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If a function returns error information, then that error information shall be tested [MISRA2004-16_10]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-16_2", "name": "Functions shall not call themselves, either directly or indirectly", "shortDescription": { "text": "Functions shall not call themselves, either directly or indirectly" }, "fullDescription": { "text": "Functions shall not call themselves, either directly or indirectly [MISRA2004-16_2]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Functions shall not call themselves, either directly or indirectly [MISRA2004-16_2]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-16_3", "name": "Identifiers shall be given for all of the parameters in a function prototype declaration", "shortDescription": { "text": "Identifiers shall be given for all of the parameters in a function prototype declaration" }, "fullDescription": { "text": "Identifiers shall be given for all of the parameters in a function prototype declaration [MISRA2004-16_3]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers shall be given for all of the parameters in a function prototype declaration [MISRA2004-16_3]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-16_4", "name": "The identifiers used in the declaration and definition of a function shall be identical", "shortDescription": { "text": "The identifiers used in the declaration and definition of a function shall be identical" }, "fullDescription": { "text": "The identifiers used in the declaration and definition of a function shall be identical [MISRA2004-16_4]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The identifiers used in the declaration and definition of a function shall be identical [MISRA2004-16_4]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-16_5", "name": "Functions with no parameters shall be declared with parameter type void", "shortDescription": { "text": "Functions with no parameters shall be declared with parameter type void" }, "fullDescription": { "text": "Functions with no parameters shall be declared with parameter type void [MISRA2004-16_5]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Functions with no parameters shall be declared with parameter type void [MISRA2004-16_5]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-16_6", "name": "The number of arguments passed to a function shall match the number of parameters", "shortDescription": { "text": "The number of arguments passed to a function shall match the number of parameters" }, "fullDescription": { "text": "The number of arguments passed to a function shall match the number of parameters [MISRA2004-16_6]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The number of arguments passed to a function shall match the number of parameters [MISRA2004-16_6]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-16_7", "name": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object", "shortDescription": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" }, "fullDescription": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object [MISRA2004-16_7]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object [MISRA2004-16_7]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-16_7_b", "name": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object", "shortDescription": { "text": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" }, "fullDescription": { "text": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object [MISRA2004-16_7_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object [MISRA2004-16_7_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-16_8", "name": "All exit paths from a function with non-void return type shall have an explicit return statement with an expression", "shortDescription": { "text": "All exit paths from a function with non-void return type shall have an explicit return statement with an expression" }, "fullDescription": { "text": "All exit paths from a function with non-void return type shall have an explicit return statement with an expression [MISRA2004-16_8]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All exit paths from a function with non-void return type shall have an explicit return statement with an expression [MISRA2004-16_8]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-16_8_b", "name": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression", "shortDescription": { "text": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" }, "fullDescription": { "text": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression [MISRA2004-16_8_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression [MISRA2004-16_8_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-16_9", "name": "A function identifier shall only be used with either a preceding '&', or with a parenthesised parameter list, which may be empty", "shortDescription": { "text": "A function identifier shall only be used with either a preceding '&', or with a parenthesised parameter list, which may be empty" }, "fullDescription": { "text": "A function identifier shall only be used with either a preceding '&', or with a parenthesised parameter list, which may be empty [MISRA2004-16_9]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function identifier shall only be used with either a preceding '&', or with a parenthesised parameter list, which may be empty [MISRA2004-16_9]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-17_1", "name": "Do not apply arithmetic to pointers that don't address an array or array element", "shortDescription": { "text": "Do not apply arithmetic to pointers that don't address an array or array element" }, "fullDescription": { "text": "Do not apply arithmetic to pointers that don't address an array or array element [MISRA2004-17_1]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not apply arithmetic to pointers that don't address an array or array element [MISRA2004-17_1]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-17_2", "name": "Pointer subtraction shall only be applied to pointers that address elements of the same array", "shortDescription": { "text": "Pointer subtraction shall only be applied to pointers that address elements of the same array" }, "fullDescription": { "text": "Pointer subtraction shall only be applied to pointers that address elements of the same array [MISRA2004-17_2]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Pointer subtraction shall only be applied to pointers that address elements of the same array [MISRA2004-17_2]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-17_3", "name": ">, >=, <, <= shall not be applied to pointer types except where they point to the same array", "shortDescription": { "text": ">, >=, <, <= shall not be applied to pointer types except where they point to the same array" }, "fullDescription": { "text": ">, >=, <, <= shall not be applied to pointer types except where they point to the same array [MISRA2004-17_3]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": ">, >=, <, <= shall not be applied to pointer types except where they point to the same array [MISRA2004-17_3]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-17_4", "name": "Array indexing shall be the only allowed form of pointer arithmetic", "shortDescription": { "text": "Array indexing shall be the only allowed form of pointer arithmetic" }, "fullDescription": { "text": "Array indexing shall be the only allowed form of pointer arithmetic [MISRA2004-17_4]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Array indexing shall be the only allowed form of pointer arithmetic [MISRA2004-17_4]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-17_5", "name": "The declaration of objects should contain no more than 2 levels of pointer indirection", "shortDescription": { "text": "The declaration of objects should contain no more than 2 levels of pointer indirection" }, "fullDescription": { "text": "The declaration of objects should contain no more than 2 levels of pointer indirection [MISRA2004-17_5]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The declaration of objects should contain no more than 2 levels of pointer indirection [MISRA2004-17_5]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-17_6_a", "name": "The address of an object with automatic storage shall not be returned from a function", "shortDescription": { "text": "The address of an object with automatic storage shall not be returned from a function" }, "fullDescription": { "text": "The address of an object with automatic storage shall not be returned from a function [MISRA2004-17_6_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The address of an object with automatic storage shall not be returned from a function [MISRA2004-17_6_a]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-17_6_b", "name": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist", "shortDescription": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" }, "fullDescription": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist [MISRA2004-17_6_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist [MISRA2004-17_6_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-18_1", "name": "All structure and union types shall be complete at the end of a translation unit", "shortDescription": { "text": "All structure and union types shall be complete at the end of a translation unit" }, "fullDescription": { "text": "All structure and union types shall be complete at the end of a translation unit [MISRA2004-18_1]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All structure and union types shall be complete at the end of a translation unit [MISRA2004-18_1]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-18_2", "name": "An object shall not be assigned to an overlapping object", "shortDescription": { "text": "An object shall not be assigned to an overlapping object" }, "fullDescription": { "text": "An object shall not be assigned to an overlapping object [MISRA2004-18_2]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An object shall not be assigned to an overlapping object [MISRA2004-18_2]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-18_2_b", "name": "An object shall not be assigned to an overlapping object", "shortDescription": { "text": "An object shall not be assigned to an overlapping object" }, "fullDescription": { "text": "An object shall not be assigned to an overlapping object [MISRA2004-18_2_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An object shall not be assigned to an overlapping object [MISRA2004-18_2_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-18_4", "name": "Unions shall not be used", "shortDescription": { "text": "Unions shall not be used" }, "fullDescription": { "text": "Unions shall not be used [MISRA2004-18_4]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Unions shall not be used [MISRA2004-18_4]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-19_1", "name": "#include statements in a file should only be preceded by other preprocessor directives or comments", "shortDescription": { "text": "#include statements in a file should only be preceded by other preprocessor directives or comments" }, "fullDescription": { "text": "#include statements in a file should only be preceded by other preprocessor directives or comments [MISRA2004-19_1]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "#include statements in a file should only be preceded by other preprocessor directives or comments [MISRA2004-19_1]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-19_10", "name": "In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##", "shortDescription": { "text": "In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" }, "fullDescription": { "text": "In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ## [MISRA2004-19_10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ## [MISRA2004-19_10]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-19_11_b", "name": "Do not use in preprocessor directives #if and #elif macros not defined in translation unit", "shortDescription": { "text": "Do not use in preprocessor directives #if and #elif macros not defined in translation unit" }, "fullDescription": { "text": "Do not use in preprocessor directives #if and #elif macros not defined in translation unit [MISRA2004-19_11_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use in preprocessor directives #if and #elif macros not defined in translation unit [MISRA2004-19_11_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-19_12", "name": "There shall be at most one occurrence of the # or ## preprocessor operators in a single macro definition", "shortDescription": { "text": "There shall be at most one occurrence of the # or ## preprocessor operators in a single macro definition" }, "fullDescription": { "text": "There shall be at most one occurrence of the # or ## preprocessor operators in a single macro definition [MISRA2004-19_12]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be at most one occurrence of the # or ## preprocessor operators in a single macro definition [MISRA2004-19_12]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-19_13", "name": "The # and ## preprocessor operators should not be used", "shortDescription": { "text": "The # and ## preprocessor operators should not be used" }, "fullDescription": { "text": "The # and ## preprocessor operators should not be used [MISRA2004-19_13]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The # and ## preprocessor operators should not be used [MISRA2004-19_13]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-19_14", "name": "The defined preprocessor operator shall only be used in one of the two standard forms", "shortDescription": { "text": "The defined preprocessor operator shall only be used in one of the two standard forms" }, "fullDescription": { "text": "The defined preprocessor operator shall only be used in one of the two standard forms [MISRA2004-19_14]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The defined preprocessor operator shall only be used in one of the two standard forms [MISRA2004-19_14]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-19_15", "name": "Precautions shall be taken in order to prevent the contents of a header file being included twice", "shortDescription": { "text": "Precautions shall be taken in order to prevent the contents of a header file being included twice" }, "fullDescription": { "text": "Precautions shall be taken in order to prevent the contents of a header file being included twice [MISRA2004-19_15]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Precautions shall be taken in order to prevent the contents of a header file being included twice [MISRA2004-19_15]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-19_16", "name": "Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor", "shortDescription": { "text": "Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" }, "fullDescription": { "text": "Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor [MISRA2004-19_16]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor [MISRA2004-19_16]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-19_17", "name": "All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related", "shortDescription": { "text": "All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" }, "fullDescription": { "text": "All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related [MISRA2004-19_17]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related [MISRA2004-19_17]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-19_2", "name": "Non-standard characters should not occur in header file names in #include directives", "shortDescription": { "text": "Non-standard characters should not occur in header file names in #include directives" }, "fullDescription": { "text": "Non-standard characters should not occur in header file names in #include directives [MISRA2004-19_2]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Non-standard characters should not occur in header file names in #include directives [MISRA2004-19_2]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-19_3", "name": "The #include directive shall be followed by either a <filename> or \"filename\" sequence", "shortDescription": { "text": "The #include directive shall be followed by either a <filename> or \"filename\" sequence" }, "fullDescription": { "text": "The #include directive shall be followed by either a <filename> or \"filename\" sequence [MISRA2004-19_3]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The #include directive shall be followed by either a <filename> or \"filename\" sequence [MISRA2004-19_3]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-19_4", "name": "Avoid keywords and basic types in macros", "shortDescription": { "text": "Avoid keywords and basic types in macros" }, "fullDescription": { "text": "Avoid keywords and basic types in macros [MISRA2004-19_4]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid keywords and basic types in macros [MISRA2004-19_4]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-19_5", "name": "Macros shall not be #define'd or #undef'd within a block", "shortDescription": { "text": "Macros shall not be #define'd or #undef'd within a block" }, "fullDescription": { "text": "Macros shall not be #define'd or #undef'd within a block [MISRA2004-19_5]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Macros shall not be #define'd or #undef'd within a block [MISRA2004-19_5]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-19_6", "name": "#undef shall not be used", "shortDescription": { "text": "#undef shall not be used" }, "fullDescription": { "text": "#undef shall not be used [MISRA2004-19_6]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "#undef shall not be used [MISRA2004-19_6]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-19_7", "name": "A function should be used in preference to a function-like macro", "shortDescription": { "text": "A function should be used in preference to a function-like macro" }, "fullDescription": { "text": "A function should be used in preference to a function-like macro [MISRA2004-19_7]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function should be used in preference to a function-like macro [MISRA2004-19_7]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-19_8", "name": "A function-like macro shall not be invoked without all of its arguments", "shortDescription": { "text": "A function-like macro shall not be invoked without all of its arguments" }, "fullDescription": { "text": "A function-like macro shall not be invoked without all of its arguments [MISRA2004-19_8]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function-like macro shall not be invoked without all of its arguments [MISRA2004-19_8]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-19_9", "name": "Arguments to a function-like macro shall not contain tokens that look like preprocessing directives", "shortDescription": { "text": "Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" }, "fullDescription": { "text": "Arguments to a function-like macro shall not contain tokens that look like preprocessing directives [MISRA2004-19_9]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Arguments to a function-like macro shall not contain tokens that look like preprocessing directives [MISRA2004-19_9]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-20_10", "name": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used", "shortDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" }, "fullDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [MISRA2004-20_10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [MISRA2004-20_10]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-20_11", "name": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used", "shortDescription": { "text": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" }, "fullDescription": { "text": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [MISRA2004-20_11]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [MISRA2004-20_11]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-20_11_b", "name": "The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used", "shortDescription": { "text": "The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" }, "fullDescription": { "text": "The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [MISRA2004-20_11_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [MISRA2004-20_11_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-20_11_c", "name": "The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used", "shortDescription": { "text": "The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" }, "fullDescription": { "text": "The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [MISRA2004-20_11_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [MISRA2004-20_11_c]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-20_11_d", "name": "The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used", "shortDescription": { "text": "The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used" }, "fullDescription": { "text": "The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used [MISRA2004-20_11_d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used [MISRA2004-20_11_d]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-20_12", "name": "The standard header files <time.h> or <ctime> shall not be used", "shortDescription": { "text": "The standard header files <time.h> or <ctime> shall not be used" }, "fullDescription": { "text": "The standard header files <time.h> or <ctime> shall not be used [MISRA2004-20_12]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The standard header files <time.h> or <ctime> shall not be used [MISRA2004-20_12]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-20_1_a", "name": "Do not #define or #undef identifiers with names which start with underscore", "shortDescription": { "text": "Do not #define or #undef identifiers with names which start with underscore" }, "fullDescription": { "text": "Do not #define or #undef identifiers with names which start with underscore [MISRA2004-20_1_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not #define or #undef identifiers with names which start with underscore [MISRA2004-20_1_a]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-20_1_b", "name": "Do not redefine reserved words", "shortDescription": { "text": "Do not redefine reserved words" }, "fullDescription": { "text": "Do not redefine reserved words [MISRA2004-20_1_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not redefine reserved words [MISRA2004-20_1_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-20_1_c", "name": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)", "shortDescription": { "text": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" }, "fullDescription": { "text": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code) [MISRA2004-20_1_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code) [MISRA2004-20_1_c]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-20_1_e", "name": "Do not #define nor #undef identifier 'defined'", "shortDescription": { "text": "Do not #define nor #undef identifier 'defined'" }, "fullDescription": { "text": "Do not #define nor #undef identifier 'defined' [MISRA2004-20_1_e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not #define nor #undef identifier 'defined' [MISRA2004-20_1_e]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-20_2", "name": "The names of standard library macros, objects and functions shall not be reused", "shortDescription": { "text": "The names of standard library macros, objects and functions shall not be reused" }, "fullDescription": { "text": "The names of standard library macros, objects and functions shall not be reused [MISRA2004-20_2]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The names of standard library macros, objects and functions shall not be reused [MISRA2004-20_2]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-20_2_a", "name": "The names of standard library macros, objects and functions shall not be reused (C90)", "shortDescription": { "text": "The names of standard library macros, objects and functions shall not be reused (C90)" }, "fullDescription": { "text": "The names of standard library macros, objects and functions shall not be reused (C90) [MISRA2004-20_2_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The names of standard library macros, objects and functions shall not be reused (C90) [MISRA2004-20_2_a]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-20_2_b", "name": "The names of standard library macros, objects and functions shall not be reused (C99)", "shortDescription": { "text": "The names of standard library macros, objects and functions shall not be reused (C99)" }, "fullDescription": { "text": "The names of standard library macros, objects and functions shall not be reused (C99) [MISRA2004-20_2_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The names of standard library macros, objects and functions shall not be reused (C99) [MISRA2004-20_2_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-20_3", "name": "The validity of values passed to library functions shall be checked", "shortDescription": { "text": "The validity of values passed to library functions shall be checked" }, "fullDescription": { "text": "The validity of values passed to library functions shall be checked [MISRA2004-20_3]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The validity of values passed to library functions shall be checked [MISRA2004-20_3]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-20_4", "name": "Dynamic heap memory allocation shall not be used", "shortDescription": { "text": "Dynamic heap memory allocation shall not be used" }, "fullDescription": { "text": "Dynamic heap memory allocation shall not be used [MISRA2004-20_4]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Dynamic heap memory allocation shall not be used [MISRA2004-20_4]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-20_5", "name": "The error indicator 'errno' shall not be used", "shortDescription": { "text": "The error indicator 'errno' shall not be used" }, "fullDescription": { "text": "The error indicator 'errno' shall not be used [MISRA2004-20_5]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The error indicator 'errno' shall not be used [MISRA2004-20_5]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-20_6", "name": "The macro offsetof, in library stddef.h, shall not be used", "shortDescription": { "text": "The macro offsetof, in library stddef.h, shall not be used" }, "fullDescription": { "text": "The macro offsetof, in library stddef.h, shall not be used [MISRA2004-20_6]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The macro offsetof, in library stddef.h, shall not be used [MISRA2004-20_6]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-20_7", "name": "The facilities provided by <setjmp.h> should not be used", "shortDescription": { "text": "The facilities provided by <setjmp.h> should not be used" }, "fullDescription": { "text": "The facilities provided by <setjmp.h> should not be used [MISRA2004-20_7]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The facilities provided by <setjmp.h> should not be used [MISRA2004-20_7]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-20_7_b", "name": "The standard header files <setjmp.h> or <csetjmp> shall not be used", "shortDescription": { "text": "The standard header files <setjmp.h> or <csetjmp> shall not be used" }, "fullDescription": { "text": "The standard header files <setjmp.h> or <csetjmp> shall not be used [MISRA2004-20_7_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The standard header files <setjmp.h> or <csetjmp> shall not be used [MISRA2004-20_7_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-20_8", "name": "The standard header files <signal.h> or <csignal> shall not be used", "shortDescription": { "text": "The standard header files <signal.h> or <csignal> shall not be used" }, "fullDescription": { "text": "The standard header files <signal.h> or <csignal> shall not be used [MISRA2004-20_8]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The standard header files <signal.h> or <csignal> shall not be used [MISRA2004-20_8]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-20_8_b", "name": "The signal handling facilities of <signal.h> shall not be used", "shortDescription": { "text": "The signal handling facilities of <signal.h> shall not be used" }, "fullDescription": { "text": "The signal handling facilities of <signal.h> shall not be used [MISRA2004-20_8_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The signal handling facilities of <signal.h> shall not be used [MISRA2004-20_8_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-20_9", "name": "The input\/output library stdio.h shall not be used", "shortDescription": { "text": "The input\/output library stdio.h shall not be used" }, "fullDescription": { "text": "The input\/output library stdio.h shall not be used [MISRA2004-20_9]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The input\/output library stdio.h shall not be used [MISRA2004-20_9]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-2_1", "name": "Assembly language shall be encapsulated and isolated", "shortDescription": { "text": "Assembly language shall be encapsulated and isolated" }, "fullDescription": { "text": "Assembly language shall be encapsulated and isolated [MISRA2004-2_1]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Assembly language shall be encapsulated and isolated [MISRA2004-2_1]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-2_2", "name": "Source code shall only use \/* ... *\/ style comments", "shortDescription": { "text": "Source code shall only use \/* ... *\/ style comments" }, "fullDescription": { "text": "Source code shall only use \/* ... *\/ style comments [MISRA2004-2_2]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Source code shall only use \/* ... *\/ style comments [MISRA2004-2_2]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-2_3", "name": "The character sequence \/* shall not be used within a C-style comment", "shortDescription": { "text": "The character sequence \/* shall not be used within a C-style comment" }, "fullDescription": { "text": "The character sequence \/* shall not be used within a C-style comment [MISRA2004-2_3]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The character sequence \/* shall not be used within a C-style comment [MISRA2004-2_3]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-3_4", "name": "All uses of the #pragma directive shall be documented and explained", "shortDescription": { "text": "All uses of the #pragma directive shall be documented and explained" }, "fullDescription": { "text": "All uses of the #pragma directive shall be documented and explained [MISRA2004-3_4]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All uses of the #pragma directive shall be documented and explained [MISRA2004-3_4]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-3_5", "name": "Do not mix bit-fields and other data within the same structure", "shortDescription": { "text": "Do not mix bit-fields and other data within the same structure" }, "fullDescription": { "text": "Do not mix bit-fields and other data within the same structure [MISRA2004-3_5]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not mix bit-fields and other data within the same structure [MISRA2004-3_5]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-4_1", "name": "Only those escape sequences that are defined in the ISO C standard shall be used", "shortDescription": { "text": "Only those escape sequences that are defined in the ISO C standard shall be used" }, "fullDescription": { "text": "Only those escape sequences that are defined in the ISO C standard shall be used [MISRA2004-4_1]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Only those escape sequences that are defined in the ISO C standard shall be used [MISRA2004-4_1]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-4_2", "name": "Trigraphs shall not be used", "shortDescription": { "text": "Trigraphs shall not be used" }, "fullDescription": { "text": "Trigraphs shall not be used [MISRA2004-4_2]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Trigraphs shall not be used [MISRA2004-4_2]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-5_1_a", "name": "User-specified C external identifiers should differ in the first 31 characters", "shortDescription": { "text": "User-specified C external identifiers should differ in the first 31 characters" }, "fullDescription": { "text": "User-specified C external identifiers should differ in the first 31 characters [MISRA2004-5_1_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "User-specified C external identifiers should differ in the first 31 characters [MISRA2004-5_1_a]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-5_1_b", "name": "User-specified C internal identifiers should differ from external identifiers in the first 31 characters", "shortDescription": { "text": "User-specified C internal identifiers should differ from external identifiers in the first 31 characters" }, "fullDescription": { "text": "User-specified C internal identifiers should differ from external identifiers in the first 31 characters [MISRA2004-5_1_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "User-specified C internal identifiers should differ from external identifiers in the first 31 characters [MISRA2004-5_1_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-5_1_c", "name": "User-specified C internal identifiers declared in the same scope should differ in the first 31 characters", "shortDescription": { "text": "User-specified C internal identifiers declared in the same scope should differ in the first 31 characters" }, "fullDescription": { "text": "User-specified C internal identifiers declared in the same scope should differ in the first 31 characters [MISRA2004-5_1_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "User-specified C internal identifiers declared in the same scope should differ in the first 31 characters [MISRA2004-5_1_c]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-5_2_a", "name": "Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope", "shortDescription": { "text": "Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" }, "fullDescription": { "text": "Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope [MISRA2004-5_2_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope [MISRA2004-5_2_a]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-5_2_b", "name": "Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope", "shortDescription": { "text": "Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" }, "fullDescription": { "text": "Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope [MISRA2004-5_2_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope [MISRA2004-5_2_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-5_3_a", "name": "Do not reuse typedef names", "shortDescription": { "text": "Do not reuse typedef names" }, "fullDescription": { "text": "Do not reuse typedef names [MISRA2004-5_3_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not reuse typedef names [MISRA2004-5_3_a]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-5_3_b", "name": "Do not reuse typedef names as a typedef name", "shortDescription": { "text": "Do not reuse typedef names as a typedef name" }, "fullDescription": { "text": "Do not reuse typedef names as a typedef name [MISRA2004-5_3_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not reuse typedef names as a typedef name [MISRA2004-5_3_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-5_4_a", "name": "A tag name shall not be reused for other purpose within the program", "shortDescription": { "text": "A tag name shall not be reused for other purpose within the program" }, "fullDescription": { "text": "A tag name shall not be reused for other purpose within the program [MISRA2004-5_4_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A tag name shall not be reused for other purpose within the program [MISRA2004-5_4_a]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-5_4_b", "name": "A tag name shall not be reused to define a different tag", "shortDescription": { "text": "A tag name shall not be reused to define a different tag" }, "fullDescription": { "text": "A tag name shall not be reused to define a different tag [MISRA2004-5_4_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A tag name shall not be reused to define a different tag [MISRA2004-5_4_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-5_4_c", "name": "The name of typedef should not be the same as the name of type that is typedef'd", "shortDescription": { "text": "The name of typedef should not be the same as the name of type that is typedef'd" }, "fullDescription": { "text": "The name of typedef should not be the same as the name of type that is typedef'd [MISRA2004-5_4_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The name of typedef should not be the same as the name of type that is typedef'd [MISRA2004-5_4_c]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-6_1", "name": "The plain char type shall be used only for the storage and use of character values", "shortDescription": { "text": "The plain char type shall be used only for the storage and use of character values" }, "fullDescription": { "text": "The plain char type shall be used only for the storage and use of character values [MISRA2004-6_1]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The plain char type shall be used only for the storage and use of character values [MISRA2004-6_1]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-6_2", "name": "signed and unsigned char type shall be used only for the storage and use of numeric values", "shortDescription": { "text": "signed and unsigned char type shall be used only for the storage and use of numeric values" }, "fullDescription": { "text": "signed and unsigned char type shall be used only for the storage and use of numeric values [MISRA2004-6_2]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "signed and unsigned char type shall be used only for the storage and use of numeric values [MISRA2004-6_2]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-6_3", "name": "typedefs to basic types should contain some digits in their name", "shortDescription": { "text": "typedefs to basic types should contain some digits in their name" }, "fullDescription": { "text": "typedefs to basic types should contain some digits in their name [MISRA2004-6_3]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "typedefs to basic types should contain some digits in their name [MISRA2004-6_3]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-6_3_b", "name": "typedefs should be used in place of the basic types", "shortDescription": { "text": "typedefs should be used in place of the basic types" }, "fullDescription": { "text": "typedefs should be used in place of the basic types [MISRA2004-6_3_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "typedefs should be used in place of the basic types [MISRA2004-6_3_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-6_4", "name": "Bit fields shall only be defined to be of type unsigned int or signed int", "shortDescription": { "text": "Bit fields shall only be defined to be of type unsigned int or signed int" }, "fullDescription": { "text": "Bit fields shall only be defined to be of type unsigned int or signed int [MISRA2004-6_4]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Bit fields shall only be defined to be of type unsigned int or signed int [MISRA2004-6_4]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-6_5", "name": "Named bit-fields with signed integer type shall have a length of more than one bit", "shortDescription": { "text": "Named bit-fields with signed integer type shall have a length of more than one bit" }, "fullDescription": { "text": "Named bit-fields with signed integer type shall have a length of more than one bit [MISRA2004-6_5]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Named bit-fields with signed integer type shall have a length of more than one bit [MISRA2004-6_5]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-6_5_a", "name": "Unnamed bit-fields with signed integer type shall have a length of more than one bit", "shortDescription": { "text": "Unnamed bit-fields with signed integer type shall have a length of more than one bit" }, "fullDescription": { "text": "Unnamed bit-fields with signed integer type shall have a length of more than one bit [MISRA2004-6_5_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Unnamed bit-fields with signed integer type shall have a length of more than one bit [MISRA2004-6_5_a]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-7_1_a", "name": "Octal constants (other than zero) shall not be used", "shortDescription": { "text": "Octal constants (other than zero) shall not be used" }, "fullDescription": { "text": "Octal constants (other than zero) shall not be used [MISRA2004-7_1_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Octal constants (other than zero) shall not be used [MISRA2004-7_1_a]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-7_1_b", "name": "Octal escape sequences shall not be used", "shortDescription": { "text": "Octal escape sequences shall not be used" }, "fullDescription": { "text": "Octal escape sequences shall not be used [MISRA2004-7_1_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Octal escape sequences shall not be used [MISRA2004-7_1_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-8_11", "name": "The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage", "shortDescription": { "text": "The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" }, "fullDescription": { "text": "The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage [MISRA2004-8_11]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage [MISRA2004-8_11]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-8_12", "name": "When an array with external linkage is declared, its size should be explicitly specified", "shortDescription": { "text": "When an array with external linkage is declared, its size should be explicitly specified" }, "fullDescription": { "text": "When an array with external linkage is declared, its size should be explicitly specified [MISRA2004-8_12]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "When an array with external linkage is declared, its size should be explicitly specified [MISRA2004-8_12]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-8_1_a", "name": "Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call", "shortDescription": { "text": "Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" }, "fullDescription": { "text": "Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call [MISRA2004-8_1_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call [MISRA2004-8_1_a]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-8_1_b", "name": "Functions shall always have visible prototype at the function call", "shortDescription": { "text": "Functions shall always have visible prototype at the function call" }, "fullDescription": { "text": "Functions shall always have visible prototype at the function call [MISRA2004-8_1_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Functions shall always have visible prototype at the function call [MISRA2004-8_1_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-8_2_a", "name": "Whenever a function is declared or defined, its type shall be explicitly stated", "shortDescription": { "text": "Whenever a function is declared or defined, its type shall be explicitly stated" }, "fullDescription": { "text": "Whenever a function is declared or defined, its type shall be explicitly stated [MISRA2004-8_2_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Whenever a function is declared or defined, its type shall be explicitly stated [MISRA2004-8_2_a]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-8_2_b", "name": "Whenever an object is declared or defined, its type shall be explicitly stated", "shortDescription": { "text": "Whenever an object is declared or defined, its type shall be explicitly stated" }, "fullDescription": { "text": "Whenever an object is declared or defined, its type shall be explicitly stated [MISRA2004-8_2_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Whenever an object is declared or defined, its type shall be explicitly stated [MISRA2004-8_2_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-8_3_a", "name": "Use identical types in declaration and definition", "shortDescription": { "text": "Use identical types in declaration and definition" }, "fullDescription": { "text": "Use identical types in declaration and definition [MISRA2004-8_3_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use identical types in declaration and definition [MISRA2004-8_3_a]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-8_3_b", "name": "Use identical types in declaration and definition", "shortDescription": { "text": "Use identical types in declaration and definition" }, "fullDescription": { "text": "Use identical types in declaration and definition [MISRA2004-8_3_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use identical types in declaration and definition [MISRA2004-8_3_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-8_4", "name": "If objects or functions are declared more than once their types shall be compatible", "shortDescription": { "text": "If objects or functions are declared more than once their types shall be compatible" }, "fullDescription": { "text": "If objects or functions are declared more than once their types shall be compatible [MISRA2004-8_4]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If objects or functions are declared more than once their types shall be compatible [MISRA2004-8_4]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-8_5", "name": "There shall be no definitions of objects or functions in a header file", "shortDescription": { "text": "There shall be no definitions of objects or functions in a header file" }, "fullDescription": { "text": "There shall be no definitions of objects or functions in a header file [MISRA2004-8_5]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no definitions of objects or functions in a header file [MISRA2004-8_5]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-8_6", "name": "Always declare functions at file scope", "shortDescription": { "text": "Always declare functions at file scope" }, "fullDescription": { "text": "Always declare functions at file scope [MISRA2004-8_6]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Always declare functions at file scope [MISRA2004-8_6]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-8_7", "name": "Objects shall be defined at block scope if they are only accessed from within a single function", "shortDescription": { "text": "Objects shall be defined at block scope if they are only accessed from within a single function" }, "fullDescription": { "text": "Objects shall be defined at block scope if they are only accessed from within a single function [MISRA2004-8_7]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Objects shall be defined at block scope if they are only accessed from within a single function [MISRA2004-8_7]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-9_1", "name": "All automatic variables shall have been assigned a value before being used", "shortDescription": { "text": "All automatic variables shall have been assigned a value before being used" }, "fullDescription": { "text": "All automatic variables shall have been assigned a value before being used [MISRA2004-9_1]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All automatic variables shall have been assigned a value before being used [MISRA2004-9_1]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-9_2", "name": "The initializer for an aggregate or union shall be enclosed in braces", "shortDescription": { "text": "The initializer for an aggregate or union shall be enclosed in braces" }, "fullDescription": { "text": "The initializer for an aggregate or union shall be enclosed in braces [MISRA2004-9_2]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The initializer for an aggregate or union shall be enclosed in braces [MISRA2004-9_2]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-9_2_b", "name": "Arrays shall not be partially initialized", "shortDescription": { "text": "Arrays shall not be partially initialized" }, "fullDescription": { "text": "Arrays shall not be partially initialized [MISRA2004-9_2_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Arrays shall not be partially initialized [MISRA2004-9_2_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-9_2_c", "name": "The non-zero initialization of structures requires an explicit initializer for each element", "shortDescription": { "text": "The non-zero initialization of structures requires an explicit initializer for each element" }, "fullDescription": { "text": "The non-zero initialization of structures requires an explicit initializer for each element [MISRA2004-9_2_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The non-zero initialization of structures requires an explicit initializer for each element [MISRA2004-9_2_c]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-9_3", "name": "In an enumerator list, the \"=\" construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised", "shortDescription": { "text": "In an enumerator list, the \"=\" construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised" }, "fullDescription": { "text": "In an enumerator list, the \"=\" construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised [MISRA2004-9_3]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "In an enumerator list, the \"=\" construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised [MISRA2004-9_3]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-2_4", "name": "Sections of code should not be \"commented out\"", "shortDescription": { "text": "Sections of code should not be \"commented out\"" }, "fullDescription": { "text": "Sections of code should not be \"commented out\" [MISRA2004-2_4]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Sections of code should not be \"commented out\" [MISRA2004-2_4]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-5_5_a", "name": "No object or function identifier with static storage duration should be reused", "shortDescription": { "text": "No object or function identifier with static storage duration should be reused" }, "fullDescription": { "text": "No object or function identifier with static storage duration should be reused [MISRA2004-5_5_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "No object or function identifier with static storage duration should be reused [MISRA2004-5_5_a]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-5_5_b", "name": "No object or function identifier with static storage duration should be reused", "shortDescription": { "text": "No object or function identifier with static storage duration should be reused" }, "fullDescription": { "text": "No object or function identifier with static storage duration should be reused [MISRA2004-5_5_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "No object or function identifier with static storage duration should be reused [MISRA2004-5_5_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-5_6", "name": "No identifier in one name space should have the same spelling as an identifier in another name space, with the exception of structure and union member names", "shortDescription": { "text": "No identifier in one name space should have the same spelling as an identifier in another name space, with the exception of structure and union member names" }, "fullDescription": { "text": "No identifier in one name space should have the same spelling as an identifier in another name space, with the exception of structure and union member names [MISRA2004-5_6]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "No identifier in one name space should have the same spelling as an identifier in another name space, with the exception of structure and union member names [MISRA2004-5_6]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-5_7", "name": "No identifier name should be reused", "shortDescription": { "text": "No identifier name should be reused" }, "fullDescription": { "text": "No identifier name should be reused [MISRA2004-5_7]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "No identifier name should be reused [MISRA2004-5_7]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-8_10", "name": "Objects or functions with external linkage shall be declared in a header file", "shortDescription": { "text": "Objects or functions with external linkage shall be declared in a header file" }, "fullDescription": { "text": "Objects or functions with external linkage shall be declared in a header file [MISRA2004-8_10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Objects or functions with external linkage shall be declared in a header file [MISRA2004-8_10]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-10_6", "name": "A 'U' suffix shall be applied to all constants of unsigned type", "shortDescription": { "text": "A 'U' suffix shall be applied to all constants of unsigned type" }, "fullDescription": { "text": "A 'U' suffix shall be applied to all constants of unsigned type [MISRA2004-10_6]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "A 'U' suffix shall be applied to all constants of unsigned type [MISRA2004-10_6]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-12_1_b", "name": "Limited dependence should be placed on C's operator precedence rules in expressions", "shortDescription": { "text": "Limited dependence should be placed on C's operator precedence rules in expressions" }, "fullDescription": { "text": "Limited dependence should be placed on C's operator precedence rules in expressions [MISRA2004-12_1_b]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Limited dependence should be placed on C's operator precedence rules in expressions [MISRA2004-12_1_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-12_1_c", "name": "No parentheses are required for the operand of a unary operator", "shortDescription": { "text": "No parentheses are required for the operand of a unary operator" }, "fullDescription": { "text": "No parentheses are required for the operand of a unary operator [MISRA2004-12_1_c]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "No parentheses are required for the operand of a unary operator [MISRA2004-12_1_c]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-12_1_f", "name": "Limited dependence should be placed on C's operator precedence rules in expressions", "shortDescription": { "text": "Limited dependence should be placed on C's operator precedence rules in expressions" }, "fullDescription": { "text": "Limited dependence should be placed on C's operator precedence rules in expressions [MISRA2004-12_1_f]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Limited dependence should be placed on C's operator precedence rules in expressions [MISRA2004-12_1_f]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2008-0_1_10", "name": "Every defined function with internal linkage shall be used", "shortDescription": { "text": "Every defined function with internal linkage shall be used" }, "fullDescription": { "text": "Every defined function with internal linkage shall be used [MISRA2008-0_1_10]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Every defined function with internal linkage shall be used [MISRA2008-0_1_10]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_10_b", "name": "Every defined function with external linkage shall be used", "shortDescription": { "text": "Every defined function with external linkage shall be used" }, "fullDescription": { "text": "Every defined function with external linkage shall be used [MISRA2008-0_1_10_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Every defined function with external linkage shall be used [MISRA2008-0_1_10_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_11", "name": "There shall be no unused parameters (named or unnamed) in nonvirtual functions", "shortDescription": { "text": "There shall be no unused parameters (named or unnamed) in nonvirtual functions" }, "fullDescription": { "text": "There shall be no unused parameters (named or unnamed) in nonvirtual functions [MISRA2008-0_1_11]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unused parameters (named or unnamed) in nonvirtual functions [MISRA2008-0_1_11]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_12", "name": "There shall be no unused parameters (named or unnamed) in the set of parameters for a virtual function and all the functions that override it", "shortDescription": { "text": "There shall be no unused parameters (named or unnamed) in the set of parameters for a virtual function and all the functions that override it" }, "fullDescription": { "text": "There shall be no unused parameters (named or unnamed) in the set of parameters for a virtual function and all the functions that override it [MISRA2008-0_1_12]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unused parameters (named or unnamed) in the set of parameters for a virtual function and all the functions that override it [MISRA2008-0_1_12]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_1_a", "name": "A project shall not contain unreachable code in 'else' block", "shortDescription": { "text": "A project shall not contain unreachable code in 'else' block" }, "fullDescription": { "text": "A project shall not contain unreachable code in 'else' block [MISRA2008-0_1_1_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain unreachable code in 'else' block [MISRA2008-0_1_1_a]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_1_b", "name": "A project shall not contain unreachable code after 'return', 'break', 'continue', and 'goto' statements", "shortDescription": { "text": "A project shall not contain unreachable code after 'return', 'break', 'continue', and 'goto' statements" }, "fullDescription": { "text": "A project shall not contain unreachable code after 'return', 'break', 'continue', and 'goto' statements [MISRA2008-0_1_1_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain unreachable code after 'return', 'break', 'continue', and 'goto' statements [MISRA2008-0_1_1_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_1_c", "name": "A project shall not contain unreachable code in 'if\/else\/while\/for' block", "shortDescription": { "text": "A project shall not contain unreachable code in 'if\/else\/while\/for' block" }, "fullDescription": { "text": "A project shall not contain unreachable code in 'if\/else\/while\/for' block [MISRA2008-0_1_1_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain unreachable code in 'if\/else\/while\/for' block [MISRA2008-0_1_1_c]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_1_d", "name": "A project shall not contain unreachable code in switch statement", "shortDescription": { "text": "A project shall not contain unreachable code in switch statement" }, "fullDescription": { "text": "A project shall not contain unreachable code in switch statement [MISRA2008-0_1_1_d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain unreachable code in switch statement [MISRA2008-0_1_1_d]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_1_e", "name": "A project shall not contain unreachable code in 'for' loop", "shortDescription": { "text": "A project shall not contain unreachable code in 'for' loop" }, "fullDescription": { "text": "A project shall not contain unreachable code in 'for' loop [MISRA2008-0_1_1_e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain unreachable code in 'for' loop [MISRA2008-0_1_1_e]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_1_f", "name": "A project shall not contain unreachable code after 'if' or 'switch' statement outside 'for\/while\/catch' block", "shortDescription": { "text": "A project shall not contain unreachable code after 'if' or 'switch' statement outside 'for\/while\/catch' block" }, "fullDescription": { "text": "A project shall not contain unreachable code after 'if' or 'switch' statement outside 'for\/while\/catch' block [MISRA2008-0_1_1_f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain unreachable code after 'if' or 'switch' statement outside 'for\/while\/catch' block [MISRA2008-0_1_1_f]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_1_g", "name": "A project shall not contain unreachable code after 'if' or 'switch' statement inside 'while\/for\/catch' block", "shortDescription": { "text": "A project shall not contain unreachable code after 'if' or 'switch' statement inside 'while\/for\/catch' block" }, "fullDescription": { "text": "A project shall not contain unreachable code after 'if' or 'switch' statement inside 'while\/for\/catch' block [MISRA2008-0_1_1_g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain unreachable code after 'if' or 'switch' statement inside 'while\/for\/catch' block [MISRA2008-0_1_1_g]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_a", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_a]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_aa", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_aa]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_aa]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_b", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_c", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_c]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_d", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_d]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_e", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_e]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_f", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_f]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_g", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_g]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_h", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_h]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_i", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_i]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_i]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_j", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_j]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_j]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_k", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_k]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_k]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_l", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_l]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_l]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_m", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_m]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_m]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_n", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_n]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_n]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_o", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_o]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_o]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_p", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_p]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_p]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_q", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_q]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_q]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_r", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_r]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_r]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_rz", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_rz]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_rz]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_s", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_s]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_s]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_sz", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_sz]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_sz]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_t", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_t]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_t]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_u", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_u]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_u]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_v", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_v]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_v]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_w", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_w]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_w]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_x", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_x]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_x]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_y", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_y]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_y]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_2_z", "name": "A project shall not contain infeasible paths", "shortDescription": { "text": "A project shall not contain infeasible paths" }, "fullDescription": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_z]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain infeasible paths [MISRA2008-0_1_2_z]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_3_a", "name": "A project shall not contain unused variables", "shortDescription": { "text": "A project shall not contain unused variables" }, "fullDescription": { "text": "A project shall not contain unused variables [MISRA2008-0_1_3_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain unused variables [MISRA2008-0_1_3_a]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_3_c", "name": "Eliminate unused private member variables", "shortDescription": { "text": "Eliminate unused private member variables" }, "fullDescription": { "text": "Eliminate unused private member variables [MISRA2008-0_1_3_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Eliminate unused private member variables [MISRA2008-0_1_3_c]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_4", "name": "A project shall not contain non-volatile POD variables having only one use", "shortDescription": { "text": "A project shall not contain non-volatile POD variables having only one use" }, "fullDescription": { "text": "A project shall not contain non-volatile POD variables having only one use [MISRA2008-0_1_4]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain non-volatile POD variables having only one use [MISRA2008-0_1_4]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_5", "name": "A project shall not contain unused type declarations", "shortDescription": { "text": "A project shall not contain unused type declarations" }, "fullDescription": { "text": "A project shall not contain unused type declarations [MISRA2008-0_1_5]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain unused type declarations [MISRA2008-0_1_5]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_6", "name": "Avoid unused values", "shortDescription": { "text": "Avoid unused values" }, "fullDescription": { "text": "Avoid unused values [MISRA2008-0_1_6]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid unused values [MISRA2008-0_1_6]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_7", "name": "The value returned by a function having a non-void return type that is not an overloaded operator shall always be used", "shortDescription": { "text": "The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" }, "fullDescription": { "text": "The value returned by a function having a non-void return type that is not an overloaded operator shall always be used [MISRA2008-0_1_7]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value returned by a function having a non-void return type that is not an overloaded operator shall always be used [MISRA2008-0_1_7]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_8", "name": "All functions with void return type shall have external side effect(s)", "shortDescription": { "text": "All functions with void return type shall have external side effect(s)" }, "fullDescription": { "text": "All functions with void return type shall have external side effect(s) [MISRA2008-0_1_8]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All functions with void return type shall have external side effect(s) [MISRA2008-0_1_8]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_8_b", "name": "All functions with void return type shall have external side effect(s)", "shortDescription": { "text": "All functions with void return type shall have external side effect(s)" }, "fullDescription": { "text": "All functions with void return type shall have external side effect(s) [MISRA2008-0_1_8_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All functions with void return type shall have external side effect(s) [MISRA2008-0_1_8_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_9", "name": "All non-null statements shall either have at least one side-effect however executed or cause control flow to change", "shortDescription": { "text": "All non-null statements shall either have at least one side-effect however executed or cause control flow to change" }, "fullDescription": { "text": "All non-null statements shall either have at least one side-effect however executed or cause control flow to change [MISRA2008-0_1_9]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All non-null statements shall either have at least one side-effect however executed or cause control flow to change [MISRA2008-0_1_9]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_2_1_a", "name": "An object shall not be assigned to an overlapping object", "shortDescription": { "text": "An object shall not be assigned to an overlapping object" }, "fullDescription": { "text": "An object shall not be assigned to an overlapping object [MISRA2008-0_2_1_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An object shall not be assigned to an overlapping object [MISRA2008-0_2_1_a]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_2_1_b", "name": "An object shall not be assigned to an overlapping object", "shortDescription": { "text": "An object shall not be assigned to an overlapping object" }, "fullDescription": { "text": "An object shall not be assigned to an overlapping object [MISRA2008-0_2_1_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An object shall not be assigned to an overlapping object [MISRA2008-0_2_1_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_3_2", "name": "If a function generates error information, then that error information shall be tested", "shortDescription": { "text": "If a function generates error information, then that error information shall be tested" }, "fullDescription": { "text": "If a function generates error information, then that error information shall be tested [MISRA2008-0_3_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If a function generates error information, then that error information shall be tested [MISRA2008-0_3_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-10_1_2", "name": "A base class shall only be declared virtual if it is used in a diamond hierarchy", "shortDescription": { "text": "A base class shall only be declared virtual if it is used in a diamond hierarchy" }, "fullDescription": { "text": "A base class shall only be declared virtual if it is used in a diamond hierarchy [MISRA2008-10_1_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A base class shall only be declared virtual if it is used in a diamond hierarchy [MISRA2008-10_1_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-10_1_3", "name": "An accessible base class shall not be both virtual and non-virtual in the same hierarchy", "shortDescription": { "text": "An accessible base class shall not be both virtual and non-virtual in the same hierarchy" }, "fullDescription": { "text": "An accessible base class shall not be both virtual and non-virtual in the same hierarchy [MISRA2008-10_1_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An accessible base class shall not be both virtual and non-virtual in the same hierarchy [MISRA2008-10_1_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-10_3_1", "name": "There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy", "shortDescription": { "text": "There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy" }, "fullDescription": { "text": "There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy [MISRA2008-10_3_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy [MISRA2008-10_3_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-10_3_2", "name": "Each overriding virtual function shall be declared with the virtual keyword", "shortDescription": { "text": "Each overriding virtual function shall be declared with the virtual keyword" }, "fullDescription": { "text": "Each overriding virtual function shall be declared with the virtual keyword [MISRA2008-10_3_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Each overriding virtual function shall be declared with the virtual keyword [MISRA2008-10_3_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-10_3_3", "name": "A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual", "shortDescription": { "text": "A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" }, "fullDescription": { "text": "A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual [MISRA2008-10_3_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual [MISRA2008-10_3_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-11_0_1", "name": "Member data in non-POD class types shall be private", "shortDescription": { "text": "Member data in non-POD class types shall be private" }, "fullDescription": { "text": "Member data in non-POD class types shall be private [MISRA2008-11_0_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Member data in non-POD class types shall be private [MISRA2008-11_0_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-12_1_1", "name": "Do not use dynamic type of an object under construction", "shortDescription": { "text": "Do not use dynamic type of an object under construction" }, "fullDescription": { "text": "Do not use dynamic type of an object under construction [MISRA2008-12_1_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use dynamic type of an object under construction [MISRA2008-12_1_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-12_1_3", "name": "All constructors that are callable with a single argument of fundamental type shall be declared explicit", "shortDescription": { "text": "All constructors that are callable with a single argument of fundamental type shall be declared explicit" }, "fullDescription": { "text": "All constructors that are callable with a single argument of fundamental type shall be declared explicit [MISRA2008-12_1_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All constructors that are callable with a single argument of fundamental type shall be declared explicit [MISRA2008-12_1_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-12_8_1", "name": "A copy constructor shall only initialize its base classes and the nonstatic members of the class of which it is a member", "shortDescription": { "text": "A copy constructor shall only initialize its base classes and the nonstatic members of the class of which it is a member" }, "fullDescription": { "text": "A copy constructor shall only initialize its base classes and the nonstatic members of the class of which it is a member [MISRA2008-12_8_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A copy constructor shall only initialize its base classes and the nonstatic members of the class of which it is a member [MISRA2008-12_8_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-12_8_2", "name": "The copy assignment operator shall be declared protected or private in an abstract class", "shortDescription": { "text": "The copy assignment operator shall be declared protected or private in an abstract class" }, "fullDescription": { "text": "The copy assignment operator shall be declared protected or private in an abstract class [MISRA2008-12_8_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The copy assignment operator shall be declared protected or private in an abstract class [MISRA2008-12_8_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-14_5_1", "name": "Do not declare non-member generic functions in associated namespaces", "shortDescription": { "text": "Do not declare non-member generic functions in associated namespaces" }, "fullDescription": { "text": "Do not declare non-member generic functions in associated namespaces [MISRA2008-14_5_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not declare non-member generic functions in associated namespaces [MISRA2008-14_5_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-14_5_2", "name": "A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter", "shortDescription": { "text": "A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter" }, "fullDescription": { "text": "A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter [MISRA2008-14_5_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter [MISRA2008-14_5_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-14_5_3", "name": "A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter", "shortDescription": { "text": "A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" }, "fullDescription": { "text": "A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter [MISRA2008-14_5_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter [MISRA2008-14_5_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-14_6_1", "name": "In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->", "shortDescription": { "text": "In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" }, "fullDescription": { "text": "In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this-> [MISRA2008-14_6_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this-> [MISRA2008-14_6_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-14_6_2", "name": "The function shall resolve to a function declared previously in the translation unit", "shortDescription": { "text": "The function shall resolve to a function declared previously in the translation unit" }, "fullDescription": { "text": "The function shall resolve to a function declared previously in the translation unit [MISRA2008-14_6_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The function shall resolve to a function declared previously in the translation unit [MISRA2008-14_6_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-14_7_1", "name": "All class templates, function templates, class template member functions and class template static members shall be instantiated at least one.", "shortDescription": { "text": "All class templates, function templates, class template member functions and class template static members shall be instantiated at least one." }, "fullDescription": { "text": "All class templates, function templates, class template member functions and class template static members shall be instantiated at least one. [MISRA2008-14_7_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All class templates, function templates, class template member functions and class template static members shall be instantiated at least one. [MISRA2008-14_7_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-14_7_3", "name": "All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template", "shortDescription": { "text": "All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template" }, "fullDescription": { "text": "All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template [MISRA2008-14_7_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template [MISRA2008-14_7_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-14_8_1", "name": "Overloaded function templates shall not be explicitly specialized", "shortDescription": { "text": "Overloaded function templates shall not be explicitly specialized" }, "fullDescription": { "text": "Overloaded function templates shall not be explicitly specialized [MISRA2008-14_8_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Overloaded function templates shall not be explicitly specialized [MISRA2008-14_8_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_0_3", "name": "Control shall not be transferred into a try or catch block using a goto or a switch statement", "shortDescription": { "text": "Control shall not be transferred into a try or catch block using a goto or a switch statement" }, "fullDescription": { "text": "Control shall not be transferred into a try or catch block using a goto or a switch statement [MISRA2008-15_0_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Control shall not be transferred into a try or catch block using a goto or a switch statement [MISRA2008-15_0_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_1_1", "name": "The assignment-expression of a throw statement shall not itself cause an exception to be thrown", "shortDescription": { "text": "The assignment-expression of a throw statement shall not itself cause an exception to be thrown" }, "fullDescription": { "text": "The assignment-expression of a throw statement shall not itself cause an exception to be thrown [MISRA2008-15_1_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The assignment-expression of a throw statement shall not itself cause an exception to be thrown [MISRA2008-15_1_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_1_2", "name": "NULL shall not be thrown explicitly", "shortDescription": { "text": "NULL shall not be thrown explicitly" }, "fullDescription": { "text": "NULL shall not be thrown explicitly [MISRA2008-15_1_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "NULL shall not be thrown explicitly [MISRA2008-15_1_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_1_3", "name": "An empty throw (throw;) shall only be used in the compound statement of a catch handler", "shortDescription": { "text": "An empty throw (throw;) shall only be used in the compound statement of a catch handler" }, "fullDescription": { "text": "An empty throw (throw;) shall only be used in the compound statement of a catch handler [MISRA2008-15_1_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An empty throw (throw;) shall only be used in the compound statement of a catch handler [MISRA2008-15_1_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_3_1", "name": "Exceptions shall be raised only after start-up and before termination of the program", "shortDescription": { "text": "Exceptions shall be raised only after start-up and before termination of the program" }, "fullDescription": { "text": "Exceptions shall be raised only after start-up and before termination of the program [MISRA2008-15_3_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Exceptions shall be raised only after start-up and before termination of the program [MISRA2008-15_3_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_3_3", "name": "Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases", "shortDescription": { "text": "Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases" }, "fullDescription": { "text": "Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases [MISRA2008-15_3_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases [MISRA2008-15_3_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_3_4_a", "name": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point", "shortDescription": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" }, "fullDescription": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point [MISRA2008-15_3_4_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point [MISRA2008-15_3_4_a]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_3_4_b", "name": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point", "shortDescription": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" }, "fullDescription": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point [MISRA2008-15_3_4_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point [MISRA2008-15_3_4_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_3_5", "name": "A class type exception shall always be caught by reference", "shortDescription": { "text": "A class type exception shall always be caught by reference" }, "fullDescription": { "text": "A class type exception shall always be caught by reference [MISRA2008-15_3_5]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A class type exception shall always be caught by reference [MISRA2008-15_3_5]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_3_6", "name": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class", "shortDescription": { "text": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" }, "fullDescription": { "text": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class [MISRA2008-15_3_6]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class [MISRA2008-15_3_6]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_3_7", "name": "Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last", "shortDescription": { "text": "Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last" }, "fullDescription": { "text": "Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last [MISRA2008-15_3_7]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last [MISRA2008-15_3_7]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_4_1", "name": "If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids", "shortDescription": { "text": "If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" }, "fullDescription": { "text": "If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids [MISRA2008-15_4_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids [MISRA2008-15_4_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_5_1", "name": "A class destructor shall not exit with an exception", "shortDescription": { "text": "A class destructor shall not exit with an exception" }, "fullDescription": { "text": "A class destructor shall not exit with an exception [MISRA2008-15_5_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A class destructor shall not exit with an exception [MISRA2008-15_5_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_5_2", "name": "Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)", "shortDescription": { "text": "Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" }, "fullDescription": { "text": "Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s) [MISRA2008-15_5_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s) [MISRA2008-15_5_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_5_2_b", "name": "Avoid throwing exceptions from functions that are declared not to throw", "shortDescription": { "text": "Avoid throwing exceptions from functions that are declared not to throw" }, "fullDescription": { "text": "Avoid throwing exceptions from functions that are declared not to throw [MISRA2008-15_5_2_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid throwing exceptions from functions that are declared not to throw [MISRA2008-15_5_2_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_5_3", "name": "The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception", "shortDescription": { "text": "The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" }, "fullDescription": { "text": "The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception [MISRA2008-15_5_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception [MISRA2008-15_5_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_5_3_b", "name": "Never allow an exception to be thrown from a destructor, deallocation, and swap", "shortDescription": { "text": "Never allow an exception to be thrown from a destructor, deallocation, and swap" }, "fullDescription": { "text": "Never allow an exception to be thrown from a destructor, deallocation, and swap [MISRA2008-15_5_3_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Never allow an exception to be thrown from a destructor, deallocation, and swap [MISRA2008-15_5_3_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_5_3_c", "name": "Do not throw from within destructor", "shortDescription": { "text": "Do not throw from within destructor" }, "fullDescription": { "text": "Do not throw from within destructor [MISRA2008-15_5_3_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not throw from within destructor [MISRA2008-15_5_3_c]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_5_3_d", "name": "There should be at least one exception handler to catch all otherwise unhandled exceptions", "shortDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions" }, "fullDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [MISRA2008-15_5_3_d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [MISRA2008-15_5_3_d]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_5_3_e", "name": "An empty throw (throw;) shall only be used in the compound-statement of a catch handler", "shortDescription": { "text": "An empty throw (throw;) shall only be used in the compound-statement of a catch handler" }, "fullDescription": { "text": "An empty throw (throw;) shall only be used in the compound-statement of a catch handler [MISRA2008-15_5_3_e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An empty throw (throw;) shall only be used in the compound-statement of a catch handler [MISRA2008-15_5_3_e]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_5_3_f", "name": "Exceptions shall be raised only after start-up and before termination of the program", "shortDescription": { "text": "Exceptions shall be raised only after start-up and before termination of the program" }, "fullDescription": { "text": "Exceptions shall be raised only after start-up and before termination of the program [MISRA2008-15_5_3_f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Exceptions shall be raised only after start-up and before termination of the program [MISRA2008-15_5_3_f]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_5_3_g", "name": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point", "shortDescription": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" }, "fullDescription": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point [MISRA2008-15_5_3_g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point [MISRA2008-15_5_3_g]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_5_3_h", "name": "Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)", "shortDescription": { "text": "Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" }, "fullDescription": { "text": "Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s) [MISRA2008-15_5_3_h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s) [MISRA2008-15_5_3_h]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_5_3_i", "name": "Function called in global or namespace scope shall not throw unhandled exceptions", "shortDescription": { "text": "Function called in global or namespace scope shall not throw unhandled exceptions" }, "fullDescription": { "text": "Function called in global or namespace scope shall not throw unhandled exceptions [MISRA2008-15_5_3_i]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Function called in global or namespace scope shall not throw unhandled exceptions [MISRA2008-15_5_3_i]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_5_3_j", "name": "Always catch exceptions", "shortDescription": { "text": "Always catch exceptions" }, "fullDescription": { "text": "Always catch exceptions [MISRA2008-15_5_3_j]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Always catch exceptions [MISRA2008-15_5_3_j]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_5_3_k", "name": "Properly define exit handlers", "shortDescription": { "text": "Properly define exit handlers" }, "fullDescription": { "text": "Properly define exit handlers [MISRA2008-15_5_3_k]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly define exit handlers [MISRA2008-15_5_3_k]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_5_3_l", "name": "Avoid throwing exceptions from functions that are declared not to throw", "shortDescription": { "text": "Avoid throwing exceptions from functions that are declared not to throw" }, "fullDescription": { "text": "Avoid throwing exceptions from functions that are declared not to throw [MISRA2008-15_5_3_l]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid throwing exceptions from functions that are declared not to throw [MISRA2008-15_5_3_l]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-16_0_1", "name": "#include directives in a file shall only be preceded by other preprocessor directives or comments", "shortDescription": { "text": "#include directives in a file shall only be preceded by other preprocessor directives or comments" }, "fullDescription": { "text": "#include directives in a file shall only be preceded by other preprocessor directives or comments [MISRA2008-16_0_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "#include directives in a file shall only be preceded by other preprocessor directives or comments [MISRA2008-16_0_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-16_0_2", "name": "Macros shall only be #define'd or #undef'd in the global namespace", "shortDescription": { "text": "Macros shall only be #define'd or #undef'd in the global namespace" }, "fullDescription": { "text": "Macros shall only be #define'd or #undef'd in the global namespace [MISRA2008-16_0_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Macros shall only be #define'd or #undef'd in the global namespace [MISRA2008-16_0_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-16_0_3", "name": "#undef shall not be used", "shortDescription": { "text": "#undef shall not be used" }, "fullDescription": { "text": "#undef shall not be used [MISRA2008-16_0_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "#undef shall not be used [MISRA2008-16_0_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-16_0_4", "name": "Function-like macros shall not be defined", "shortDescription": { "text": "Function-like macros shall not be defined" }, "fullDescription": { "text": "Function-like macros shall not be defined [MISRA2008-16_0_4]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Function-like macros shall not be defined [MISRA2008-16_0_4]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-16_0_5", "name": "Arguments to a function-like macro shall not contain tokens that look like preprocessing directives", "shortDescription": { "text": "Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" }, "fullDescription": { "text": "Arguments to a function-like macro shall not contain tokens that look like preprocessing directives [MISRA2008-16_0_5]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Arguments to a function-like macro shall not contain tokens that look like preprocessing directives [MISRA2008-16_0_5]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-16_0_6", "name": "In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##", "shortDescription": { "text": "In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" }, "fullDescription": { "text": "In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ## [MISRA2008-16_0_6]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ## [MISRA2008-16_0_6]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-16_0_7_b", "name": "Do not use in preprocessor directives #if and #elif macros not defined in translation unit", "shortDescription": { "text": "Do not use in preprocessor directives #if and #elif macros not defined in translation unit" }, "fullDescription": { "text": "Do not use in preprocessor directives #if and #elif macros not defined in translation unit [MISRA2008-16_0_7_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use in preprocessor directives #if and #elif macros not defined in translation unit [MISRA2008-16_0_7_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-16_0_8", "name": "If the # token appears as the first token on a line, then it shall be immediately followed by a preprocessing token", "shortDescription": { "text": "If the # token appears as the first token on a line, then it shall be immediately followed by a preprocessing token" }, "fullDescription": { "text": "If the # token appears as the first token on a line, then it shall be immediately followed by a preprocessing token [MISRA2008-16_0_8]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If the # token appears as the first token on a line, then it shall be immediately followed by a preprocessing token [MISRA2008-16_0_8]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-16_1_1", "name": "The defined preprocessor operator shall only be used in one of the two standard forms", "shortDescription": { "text": "The defined preprocessor operator shall only be used in one of the two standard forms" }, "fullDescription": { "text": "The defined preprocessor operator shall only be used in one of the two standard forms [MISRA2008-16_1_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The defined preprocessor operator shall only be used in one of the two standard forms [MISRA2008-16_1_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-16_1_2", "name": "All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related", "shortDescription": { "text": "All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" }, "fullDescription": { "text": "All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related [MISRA2008-16_1_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related [MISRA2008-16_1_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-16_2_1_a", "name": "Avoid using macro definitions", "shortDescription": { "text": "Avoid using macro definitions" }, "fullDescription": { "text": "Avoid using macro definitions [MISRA2008-16_2_1_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using macro definitions [MISRA2008-16_2_1_a]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-16_2_1_b", "name": "The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file", "shortDescription": { "text": "The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" }, "fullDescription": { "text": "The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file [MISRA2008-16_2_1_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file [MISRA2008-16_2_1_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-16_2_1_c", "name": "The #ifdef, #else, #elif preprocessor directives should not be used", "shortDescription": { "text": "The #ifdef, #else, #elif preprocessor directives should not be used" }, "fullDescription": { "text": "The #ifdef, #else, #elif preprocessor directives should not be used [MISRA2008-16_2_1_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The #ifdef, #else, #elif preprocessor directives should not be used [MISRA2008-16_2_1_c]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-16_2_1_d", "name": "The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file", "shortDescription": { "text": "The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" }, "fullDescription": { "text": "The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file [MISRA2008-16_2_1_d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file [MISRA2008-16_2_1_d]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-16_2_1_e", "name": "The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file", "shortDescription": { "text": "The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" }, "fullDescription": { "text": "The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file [MISRA2008-16_2_1_e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file [MISRA2008-16_2_1_e]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-16_2_1_f", "name": "#error directive shall not be used", "shortDescription": { "text": "#error directive shall not be used" }, "fullDescription": { "text": "#error directive shall not be used [MISRA2008-16_2_1_f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "#error directive shall not be used [MISRA2008-16_2_1_f]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-16_2_1_g", "name": "The #pragma directive shall not be used", "shortDescription": { "text": "The #pragma directive shall not be used" }, "fullDescription": { "text": "The #pragma directive shall not be used [MISRA2008-16_2_1_g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The #pragma directive shall not be used [MISRA2008-16_2_1_g]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-16_2_1_h", "name": "#undef shall not be used", "shortDescription": { "text": "#undef shall not be used" }, "fullDescription": { "text": "#undef shall not be used [MISRA2008-16_2_1_h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "#undef shall not be used [MISRA2008-16_2_1_h]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-16_2_2", "name": "C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers", "shortDescription": { "text": "C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" }, "fullDescription": { "text": "C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers [MISRA2008-16_2_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers [MISRA2008-16_2_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-16_2_3", "name": "Include guards shall be provided", "shortDescription": { "text": "Include guards shall be provided" }, "fullDescription": { "text": "Include guards shall be provided [MISRA2008-16_2_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Include guards shall be provided [MISRA2008-16_2_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-16_2_4", "name": "The ', \", \/* or \/\/ characters shall not occur in a header file name", "shortDescription": { "text": "The ', \", \/* or \/\/ characters shall not occur in a header file name" }, "fullDescription": { "text": "The ', \", \/* or \/\/ characters shall not occur in a header file name [MISRA2008-16_2_4]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The ', \", \/* or \/\/ characters shall not occur in a header file name [MISRA2008-16_2_4]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-16_2_6", "name": "The #include directive shall be followed by either a <filename> or \"filename\" sequence", "shortDescription": { "text": "The #include directive shall be followed by either a <filename> or \"filename\" sequence" }, "fullDescription": { "text": "The #include directive shall be followed by either a <filename> or \"filename\" sequence [MISRA2008-16_2_6]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The #include directive shall be followed by either a <filename> or \"filename\" sequence [MISRA2008-16_2_6]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-16_3_1", "name": "There shall be at most one occurrence of the # or ## operators in a single macro definition", "shortDescription": { "text": "There shall be at most one occurrence of the # or ## operators in a single macro definition" }, "fullDescription": { "text": "There shall be at most one occurrence of the # or ## operators in a single macro definition [MISRA2008-16_3_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be at most one occurrence of the # or ## operators in a single macro definition [MISRA2008-16_3_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-17_0_1_a", "name": "Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined", "shortDescription": { "text": "Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" }, "fullDescription": { "text": "Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined [MISRA2008-17_0_1_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined [MISRA2008-17_0_1_a]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-17_0_1_b", "name": "Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined", "shortDescription": { "text": "Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" }, "fullDescription": { "text": "Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined [MISRA2008-17_0_1_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined [MISRA2008-17_0_1_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-17_0_1_c", "name": "Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined", "shortDescription": { "text": "Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" }, "fullDescription": { "text": "Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined [MISRA2008-17_0_1_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined [MISRA2008-17_0_1_c]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-17_0_1_d", "name": "Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined", "shortDescription": { "text": "Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" }, "fullDescription": { "text": "Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined [MISRA2008-17_0_1_d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined [MISRA2008-17_0_1_d]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-17_0_1_e", "name": "Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined", "shortDescription": { "text": "Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" }, "fullDescription": { "text": "Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined [MISRA2008-17_0_1_e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined [MISRA2008-17_0_1_e]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-17_0_2", "name": "The names of standard library macros and objects shall not be reused", "shortDescription": { "text": "The names of standard library macros and objects shall not be reused" }, "fullDescription": { "text": "The names of standard library macros and objects shall not be reused [MISRA2008-17_0_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The names of standard library macros and objects shall not be reused [MISRA2008-17_0_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-17_0_3", "name": "The names of standard library functions shall not be overridden", "shortDescription": { "text": "The names of standard library functions shall not be overridden" }, "fullDescription": { "text": "The names of standard library functions shall not be overridden [MISRA2008-17_0_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The names of standard library functions shall not be overridden [MISRA2008-17_0_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-17_0_5", "name": "The setjmp macro and the longjmp function shall not be used", "shortDescription": { "text": "The setjmp macro and the longjmp function shall not be used" }, "fullDescription": { "text": "The setjmp macro and the longjmp function shall not be used [MISRA2008-17_0_5]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The setjmp macro and the longjmp function shall not be used [MISRA2008-17_0_5]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-17_0_5_b", "name": "The standard header file <setjmp.h> shall not be used", "shortDescription": { "text": "The standard header file <setjmp.h> shall not be used" }, "fullDescription": { "text": "The standard header file <setjmp.h> shall not be used [MISRA2008-17_0_5_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The standard header file <setjmp.h> shall not be used [MISRA2008-17_0_5_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-18_0_1", "name": "The C library shall not be used", "shortDescription": { "text": "The C library shall not be used" }, "fullDescription": { "text": "The C library shall not be used [MISRA2008-18_0_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The C library shall not be used [MISRA2008-18_0_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-18_0_2", "name": "The library functions atof, atoi and atol from library <cstdlib> shall not be used", "shortDescription": { "text": "The library functions atof, atoi and atol from library <cstdlib> shall not be used" }, "fullDescription": { "text": "The library functions atof, atoi and atol from library <cstdlib> shall not be used [MISRA2008-18_0_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The library functions atof, atoi and atol from library <cstdlib> shall not be used [MISRA2008-18_0_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-18_0_3", "name": "The library function 'abort' of <stdlib.h> shall not be used", "shortDescription": { "text": "The library function 'abort' of <stdlib.h> shall not be used" }, "fullDescription": { "text": "The library function 'abort' of <stdlib.h> shall not be used [MISRA2008-18_0_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The library function 'abort' of <stdlib.h> shall not be used [MISRA2008-18_0_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-18_0_3_b", "name": "The library function 'exit' of <stdlib.h> shall not be used", "shortDescription": { "text": "The library function 'exit' of <stdlib.h> shall not be used" }, "fullDescription": { "text": "The library function 'exit' of <stdlib.h> shall not be used [MISRA2008-18_0_3_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The library function 'exit' of <stdlib.h> shall not be used [MISRA2008-18_0_3_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-18_0_3_c", "name": "The library function 'getenv' of <stdlib.h> shall not be used", "shortDescription": { "text": "The library function 'getenv' of <stdlib.h> shall not be used" }, "fullDescription": { "text": "The library function 'getenv' of <stdlib.h> shall not be used [MISRA2008-18_0_3_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The library function 'getenv' of <stdlib.h> shall not be used [MISRA2008-18_0_3_c]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-18_0_3_d", "name": "The library function 'system' of <stdlib.h> shall not be used", "shortDescription": { "text": "The library function 'system' of <stdlib.h> shall not be used" }, "fullDescription": { "text": "The library function 'system' of <stdlib.h> shall not be used [MISRA2008-18_0_3_d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The library function 'system' of <stdlib.h> shall not be used [MISRA2008-18_0_3_d]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-18_0_4", "name": "The standard header file <ctime> shall not be used", "shortDescription": { "text": "The standard header file <ctime> shall not be used" }, "fullDescription": { "text": "The standard header file <ctime> shall not be used [MISRA2008-18_0_4]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The standard header file <ctime> shall not be used [MISRA2008-18_0_4]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-18_0_5", "name": "The unbounded functions of library <cstring> shall not be used", "shortDescription": { "text": "The unbounded functions of library <cstring> shall not be used" }, "fullDescription": { "text": "The unbounded functions of library <cstring> shall not be used [MISRA2008-18_0_5]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The unbounded functions of library <cstring> shall not be used [MISRA2008-18_0_5]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-18_2_1", "name": "The macro offsetof shall not be used", "shortDescription": { "text": "The macro offsetof shall not be used" }, "fullDescription": { "text": "The macro offsetof shall not be used [MISRA2008-18_2_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The macro offsetof shall not be used [MISRA2008-18_2_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-18_4_1", "name": "Dynamic heap memory allocation shall not be used", "shortDescription": { "text": "Dynamic heap memory allocation shall not be used" }, "fullDescription": { "text": "Dynamic heap memory allocation shall not be used [MISRA2008-18_4_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Dynamic heap memory allocation shall not be used [MISRA2008-18_4_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-18_7_1", "name": "The standard header file <csignal> shall not be used", "shortDescription": { "text": "The standard header file <csignal> shall not be used" }, "fullDescription": { "text": "The standard header file <csignal> shall not be used [MISRA2008-18_7_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The standard header file <csignal> shall not be used [MISRA2008-18_7_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-18_7_1_b", "name": "The signal handling facilities of <csignal> shall not be used", "shortDescription": { "text": "The signal handling facilities of <csignal> shall not be used" }, "fullDescription": { "text": "The signal handling facilities of <csignal> shall not be used [MISRA2008-18_7_1_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The signal handling facilities of <csignal> shall not be used [MISRA2008-18_7_1_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-19_3_1", "name": "The error indicator errno shall not be used", "shortDescription": { "text": "The error indicator errno shall not be used" }, "fullDescription": { "text": "The error indicator errno shall not be used [MISRA2008-19_3_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The error indicator errno shall not be used [MISRA2008-19_3_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-27_0_1", "name": "The stream input\/output library <cstdio> shall not be used", "shortDescription": { "text": "The stream input\/output library <cstdio> shall not be used" }, "fullDescription": { "text": "The stream input\/output library <cstdio> shall not be used [MISRA2008-27_0_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The stream input\/output library <cstdio> shall not be used [MISRA2008-27_0_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-2_10_1", "name": "Different identifiers shall be typographically unambiguous", "shortDescription": { "text": "Different identifiers shall be typographically unambiguous" }, "fullDescription": { "text": "Different identifiers shall be typographically unambiguous [MISRA2008-2_10_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Different identifiers shall be typographically unambiguous [MISRA2008-2_10_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-2_10_2_a", "name": "Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope", "shortDescription": { "text": "Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope" }, "fullDescription": { "text": "Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope [MISRA2008-2_10_2_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope [MISRA2008-2_10_2_a]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-2_10_2_b", "name": "Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope", "shortDescription": { "text": "Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope" }, "fullDescription": { "text": "Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope [MISRA2008-2_10_2_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope [MISRA2008-2_10_2_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-2_10_3", "name": "A typedef name (including qualification, if any) shall be a unique identifier", "shortDescription": { "text": "A typedef name (including qualification, if any) shall be a unique identifier" }, "fullDescription": { "text": "A typedef name (including qualification, if any) shall be a unique identifier [MISRA2008-2_10_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A typedef name (including qualification, if any) shall be a unique identifier [MISRA2008-2_10_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-2_10_4", "name": "A class, union or enum name (including qualification, if any) shall be a unique identifier", "shortDescription": { "text": "A class, union or enum name (including qualification, if any) shall be a unique identifier" }, "fullDescription": { "text": "A class, union or enum name (including qualification, if any) shall be a unique identifier [MISRA2008-2_10_4]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A class, union or enum name (including qualification, if any) shall be a unique identifier [MISRA2008-2_10_4]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-2_10_6_a", "name": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope", "shortDescription": { "text": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" }, "fullDescription": { "text": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope [MISRA2008-2_10_6_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope [MISRA2008-2_10_6_a]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-2_10_6_b", "name": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope", "shortDescription": { "text": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" }, "fullDescription": { "text": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope [MISRA2008-2_10_6_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope [MISRA2008-2_10_6_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-2_10_6_c", "name": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope", "shortDescription": { "text": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" }, "fullDescription": { "text": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope [MISRA2008-2_10_6_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If an identifier refers to a type, it shall not also refer to an object or a function in the same scope [MISRA2008-2_10_6_c]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-2_13_1", "name": "Only those escape sequences that are defined in ISO\/IEC 14882:2003 shall be used", "shortDescription": { "text": "Only those escape sequences that are defined in ISO\/IEC 14882:2003 shall be used" }, "fullDescription": { "text": "Only those escape sequences that are defined in ISO\/IEC 14882:2003 shall be used [MISRA2008-2_13_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Only those escape sequences that are defined in ISO\/IEC 14882:2003 shall be used [MISRA2008-2_13_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-2_13_2_a", "name": "Octal constants (other than zero) shall not be used", "shortDescription": { "text": "Octal constants (other than zero) shall not be used" }, "fullDescription": { "text": "Octal constants (other than zero) shall not be used [MISRA2008-2_13_2_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Octal constants (other than zero) shall not be used [MISRA2008-2_13_2_a]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-2_13_2_b", "name": "Octal escape sequences (other than \"\\0\") shall not be used", "shortDescription": { "text": "Octal escape sequences (other than \"\\0\") shall not be used" }, "fullDescription": { "text": "Octal escape sequences (other than \"\\0\") shall not be used [MISRA2008-2_13_2_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Octal escape sequences (other than \"\\0\") shall not be used [MISRA2008-2_13_2_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-2_13_3", "name": "A \"U\" suffix shall be applied to all octal or hexadecimal integer literals of unsigned type", "shortDescription": { "text": "A \"U\" suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" }, "fullDescription": { "text": "A \"U\" suffix shall be applied to all octal or hexadecimal integer literals of unsigned type [MISRA2008-2_13_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A \"U\" suffix shall be applied to all octal or hexadecimal integer literals of unsigned type [MISRA2008-2_13_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-2_13_4", "name": "Literal suffixes shall be upper case", "shortDescription": { "text": "Literal suffixes shall be upper case" }, "fullDescription": { "text": "Literal suffixes shall be upper case [MISRA2008-2_13_4]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Literal suffixes shall be upper case [MISRA2008-2_13_4]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-2_13_5", "name": "Narrow and wide string literals shall not be concatenated", "shortDescription": { "text": "Narrow and wide string literals shall not be concatenated" }, "fullDescription": { "text": "Narrow and wide string literals shall not be concatenated [MISRA2008-2_13_5]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Narrow and wide string literals shall not be concatenated [MISRA2008-2_13_5]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-2_3_1", "name": "Trigraphs shall not be used", "shortDescription": { "text": "Trigraphs shall not be used" }, "fullDescription": { "text": "Trigraphs shall not be used [MISRA2008-2_3_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Trigraphs shall not be used [MISRA2008-2_3_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-2_7_1", "name": "The character sequence \/* shall not be used within a C-style comment", "shortDescription": { "text": "The character sequence \/* shall not be used within a C-style comment" }, "fullDescription": { "text": "The character sequence \/* shall not be used within a C-style comment [MISRA2008-2_7_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The character sequence \/* shall not be used within a C-style comment [MISRA2008-2_7_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-2_7_2", "name": "Sections of code shall not be \"commented out\" using C-style comments", "shortDescription": { "text": "Sections of code shall not be \"commented out\" using C-style comments" }, "fullDescription": { "text": "Sections of code shall not be \"commented out\" using C-style comments [MISRA2008-2_7_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Sections of code shall not be \"commented out\" using C-style comments [MISRA2008-2_7_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-3_1_1", "name": "It shall be possible to include any header file in multiple translation units without violating the One Definition Rule", "shortDescription": { "text": "It shall be possible to include any header file in multiple translation units without violating the One Definition Rule" }, "fullDescription": { "text": "It shall be possible to include any header file in multiple translation units without violating the One Definition Rule [MISRA2008-3_1_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "It shall be possible to include any header file in multiple translation units without violating the One Definition Rule [MISRA2008-3_1_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-3_1_2", "name": "Functions shall not be declared at block scope", "shortDescription": { "text": "Functions shall not be declared at block scope" }, "fullDescription": { "text": "Functions shall not be declared at block scope [MISRA2008-3_1_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Functions shall not be declared at block scope [MISRA2008-3_1_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-3_1_3", "name": "When an array is declared, its size shall either be stated explicitly or defined implicitly by initialization", "shortDescription": { "text": "When an array is declared, its size shall either be stated explicitly or defined implicitly by initialization" }, "fullDescription": { "text": "When an array is declared, its size shall either be stated explicitly or defined implicitly by initialization [MISRA2008-3_1_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "When an array is declared, its size shall either be stated explicitly or defined implicitly by initialization [MISRA2008-3_1_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-3_2_1", "name": "All declarations of an object or function shall have compatible types", "shortDescription": { "text": "All declarations of an object or function shall have compatible types" }, "fullDescription": { "text": "All declarations of an object or function shall have compatible types [MISRA2008-3_2_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All declarations of an object or function shall have compatible types [MISRA2008-3_2_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-3_2_2", "name": "The One Definition Rule shall not be violated", "shortDescription": { "text": "The One Definition Rule shall not be violated" }, "fullDescription": { "text": "The One Definition Rule shall not be violated [MISRA2008-3_2_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The One Definition Rule shall not be violated [MISRA2008-3_2_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-3_2_3", "name": "A type, object or function that is used in multiple translation units shall be declared in one and only one file", "shortDescription": { "text": "A type, object or function that is used in multiple translation units shall be declared in one and only one file" }, "fullDescription": { "text": "A type, object or function that is used in multiple translation units shall be declared in one and only one file [MISRA2008-3_2_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A type, object or function that is used in multiple translation units shall be declared in one and only one file [MISRA2008-3_2_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-3_2_4", "name": "An identifier with external linkage shall have exactly one external definition", "shortDescription": { "text": "An identifier with external linkage shall have exactly one external definition" }, "fullDescription": { "text": "An identifier with external linkage shall have exactly one external definition [MISRA2008-3_2_4]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An identifier with external linkage shall have exactly one external definition [MISRA2008-3_2_4]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-3_3_1", "name": "Objects or functions with external linkage shall be declared in a header file", "shortDescription": { "text": "Objects or functions with external linkage shall be declared in a header file" }, "fullDescription": { "text": "Objects or functions with external linkage shall be declared in a header file [MISRA2008-3_3_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Objects or functions with external linkage shall be declared in a header file [MISRA2008-3_3_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-3_3_2", "name": "If a function has internal linkage then all re-declarations shall include the static storage class specifier", "shortDescription": { "text": "If a function has internal linkage then all re-declarations shall include the static storage class specifier" }, "fullDescription": { "text": "If a function has internal linkage then all re-declarations shall include the static storage class specifier [MISRA2008-3_3_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If a function has internal linkage then all re-declarations shall include the static storage class specifier [MISRA2008-3_3_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-3_4_1_a", "name": "An identifier declared to be an object or type shall be defined in a block that minimizes its visibility", "shortDescription": { "text": "An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" }, "fullDescription": { "text": "An identifier declared to be an object or type shall be defined in a block that minimizes its visibility [MISRA2008-3_4_1_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An identifier declared to be an object or type shall be defined in a block that minimizes its visibility [MISRA2008-3_4_1_a]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-3_4_1_b", "name": "An identifier declared to be an object or type shall be defined in a block that minimizes its visibility", "shortDescription": { "text": "An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" }, "fullDescription": { "text": "An identifier declared to be an object or type shall be defined in a block that minimizes its visibility [MISRA2008-3_4_1_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An identifier declared to be an object or type shall be defined in a block that minimizes its visibility [MISRA2008-3_4_1_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-3_9_1", "name": "The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations", "shortDescription": { "text": "The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" }, "fullDescription": { "text": "The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations [MISRA2008-3_9_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations [MISRA2008-3_9_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-3_9_3", "name": "The underlying bit representations of floating-point values shall not be used", "shortDescription": { "text": "The underlying bit representations of floating-point values shall not be used" }, "fullDescription": { "text": "The underlying bit representations of floating-point values shall not be used [MISRA2008-3_9_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The underlying bit representations of floating-point values shall not be used [MISRA2008-3_9_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-4_10_1", "name": "NULL shall not be used as an integer value", "shortDescription": { "text": "NULL shall not be used as an integer value" }, "fullDescription": { "text": "NULL shall not be used as an integer value [MISRA2008-4_10_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "NULL shall not be used as an integer value [MISRA2008-4_10_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-4_10_2", "name": "Literal zero (0) shall not be used as the null-pointer-constant", "shortDescription": { "text": "Literal zero (0) shall not be used as the null-pointer-constant" }, "fullDescription": { "text": "Literal zero (0) shall not be used as the null-pointer-constant [MISRA2008-4_10_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Literal zero (0) shall not be used as the null-pointer-constant [MISRA2008-4_10_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-4_5_1", "name": "Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &&, ||, !, the equality operators == and !=, the unary & operator, and the conditional operator", "shortDescription": { "text": "Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &&, ||, !, the equality operators == and !=, the unary & operator, and the conditional operator" }, "fullDescription": { "text": "Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &&, ||, !, the equality operators == and !=, the unary & operator, and the conditional operator [MISRA2008-4_5_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &&, ||, !, the equality operators == and !=, the unary & operator, and the conditional operator [MISRA2008-4_5_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-4_5_2", "name": "Expressions with type enum shall not be used as operands to built-in operators other than [ ], =, ==, !=, <, <=, >, >=, and the unary & operator", "shortDescription": { "text": "Expressions with type enum shall not be used as operands to built-in operators other than [ ], =, ==, !=, <, <=, >, >=, and the unary & operator" }, "fullDescription": { "text": "Expressions with type enum shall not be used as operands to built-in operators other than [ ], =, ==, !=, <, <=, >, >=, and the unary & operator [MISRA2008-4_5_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Expressions with type enum shall not be used as operands to built-in operators other than [ ], =, ==, !=, <, <=, >, >=, and the unary & operator [MISRA2008-4_5_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-4_5_3", "name": "Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary & operator", "shortDescription": { "text": "Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary & operator" }, "fullDescription": { "text": "Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary & operator [MISRA2008-4_5_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary & operator [MISRA2008-4_5_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_10", "name": "If the bitwise operators ~ and << are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand", "shortDescription": { "text": "If the bitwise operators ~ and << are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" }, "fullDescription": { "text": "If the bitwise operators ~ and << are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand [MISRA2008-5_0_10]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If the bitwise operators ~ and << are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand [MISRA2008-5_0_10]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_11", "name": "The plain char type shall only be used for the storage and use of character values", "shortDescription": { "text": "The plain char type shall only be used for the storage and use of character values" }, "fullDescription": { "text": "The plain char type shall only be used for the storage and use of character values [MISRA2008-5_0_11]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The plain char type shall only be used for the storage and use of character values [MISRA2008-5_0_11]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_12", "name": "signed char and unsigned char type shall only be used for the storage and use of numeric values", "shortDescription": { "text": "signed char and unsigned char type shall only be used for the storage and use of numeric values" }, "fullDescription": { "text": "signed char and unsigned char type shall only be used for the storage and use of numeric values [MISRA2008-5_0_12]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "signed char and unsigned char type shall only be used for the storage and use of numeric values [MISRA2008-5_0_12]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_13", "name": "The condition of an if-statement and the condition of an iteration-statement shall have type bool", "shortDescription": { "text": "The condition of an if-statement and the condition of an iteration-statement shall have type bool" }, "fullDescription": { "text": "The condition of an if-statement and the condition of an iteration-statement shall have type bool [MISRA2008-5_0_13]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The condition of an if-statement and the condition of an iteration-statement shall have type bool [MISRA2008-5_0_13]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_14", "name": "The first operand of a conditional-operator shall have type bool", "shortDescription": { "text": "The first operand of a conditional-operator shall have type bool" }, "fullDescription": { "text": "The first operand of a conditional-operator shall have type bool [MISRA2008-5_0_14]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The first operand of a conditional-operator shall have type bool [MISRA2008-5_0_14]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_15", "name": "Array indexing shall be the only form of pointer arithmetic", "shortDescription": { "text": "Array indexing shall be the only form of pointer arithmetic" }, "fullDescription": { "text": "Array indexing shall be the only form of pointer arithmetic [MISRA2008-5_0_15]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Array indexing shall be the only form of pointer arithmetic [MISRA2008-5_0_15]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_16_a", "name": "Avoid accessing arrays out of bounds", "shortDescription": { "text": "Avoid accessing arrays out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays out of bounds [MISRA2008-5_0_16_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays out of bounds [MISRA2008-5_0_16_a]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_16_b", "name": "A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array", "shortDescription": { "text": "A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" }, "fullDescription": { "text": "A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array [MISRA2008-5_0_16_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array [MISRA2008-5_0_16_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_17", "name": "Subtraction between pointers shall only be applied to pointers that address elements of the same array", "shortDescription": { "text": "Subtraction between pointers shall only be applied to pointers that address elements of the same array" }, "fullDescription": { "text": "Subtraction between pointers shall only be applied to pointers that address elements of the same array [MISRA2008-5_0_17]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Subtraction between pointers shall only be applied to pointers that address elements of the same array [MISRA2008-5_0_17]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_18", "name": ">, >=, <, <= shall not be applied to objects of pointer type, except where they point to the same array", "shortDescription": { "text": ">, >=, <, <= shall not be applied to objects of pointer type, except where they point to the same array" }, "fullDescription": { "text": ">, >=, <, <= shall not be applied to objects of pointer type, except where they point to the same array [MISRA2008-5_0_18]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": ">, >=, <, <= shall not be applied to objects of pointer type, except where they point to the same array [MISRA2008-5_0_18]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_19", "name": "The declaration of objects shall contain no more than two levels of pointer indirection", "shortDescription": { "text": "The declaration of objects shall contain no more than two levels of pointer indirection" }, "fullDescription": { "text": "The declaration of objects shall contain no more than two levels of pointer indirection [MISRA2008-5_0_19]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The declaration of objects shall contain no more than two levels of pointer indirection [MISRA2008-5_0_19]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_1_a", "name": "The value of an expression shall be the same under any order of evaluation that the standard permits", "shortDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits" }, "fullDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [MISRA2008-5_0_1_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [MISRA2008-5_0_1_a]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_1_b", "name": "The value of an expression shall be the same under any order of evaluation that the standard permits", "shortDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits" }, "fullDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [MISRA2008-5_0_1_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [MISRA2008-5_0_1_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_1_c", "name": "The value of an expression shall be the same under any order of evaluation that the standard permits", "shortDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits" }, "fullDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [MISRA2008-5_0_1_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [MISRA2008-5_0_1_c]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_1_d", "name": "The value of an expression shall be the same under any order of evaluation that the standard permits", "shortDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits" }, "fullDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [MISRA2008-5_0_1_d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [MISRA2008-5_0_1_d]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_1_e", "name": "The value of an expression shall be the same under any order of evaluation that the standard permits", "shortDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits" }, "fullDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [MISRA2008-5_0_1_e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [MISRA2008-5_0_1_e]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_1_f", "name": "The value of an expression shall be the same under any order of evaluation that the standard permits", "shortDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits" }, "fullDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [MISRA2008-5_0_1_f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [MISRA2008-5_0_1_f]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_1_g", "name": "The value of an expression shall be the same under any order of evaluation that the standard permits", "shortDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits" }, "fullDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [MISRA2008-5_0_1_g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [MISRA2008-5_0_1_g]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_20", "name": "Non-constant operands to a binary bitwise operator shall have the same underlying type", "shortDescription": { "text": "Non-constant operands to a binary bitwise operator shall have the same underlying type" }, "fullDescription": { "text": "Non-constant operands to a binary bitwise operator shall have the same underlying type [MISRA2008-5_0_20]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Non-constant operands to a binary bitwise operator shall have the same underlying type [MISRA2008-5_0_20]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_21", "name": "Bitwise operators shall only be applied to operands of unsigned underlying type", "shortDescription": { "text": "Bitwise operators shall only be applied to operands of unsigned underlying type" }, "fullDescription": { "text": "Bitwise operators shall only be applied to operands of unsigned underlying type [MISRA2008-5_0_21]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Bitwise operators shall only be applied to operands of unsigned underlying type [MISRA2008-5_0_21]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_3_a", "name": "A cvalue expression shall not be implicitly converted to a different underlying type", "shortDescription": { "text": "A cvalue expression shall not be implicitly converted to a different underlying type" }, "fullDescription": { "text": "A cvalue expression shall not be implicitly converted to a different underlying type [MISRA2008-5_0_3_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A cvalue expression shall not be implicitly converted to a different underlying type [MISRA2008-5_0_3_a]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_3_b", "name": "A cvalue expression shall not be implicitly converted to a different underlying type", "shortDescription": { "text": "A cvalue expression shall not be implicitly converted to a different underlying type" }, "fullDescription": { "text": "A cvalue expression shall not be implicitly converted to a different underlying type [MISRA2008-5_0_3_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A cvalue expression shall not be implicitly converted to a different underlying type [MISRA2008-5_0_3_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_3_c", "name": "A cvalue expression shall not be implicitly converted to a different underlying type", "shortDescription": { "text": "A cvalue expression shall not be implicitly converted to a different underlying type" }, "fullDescription": { "text": "A cvalue expression shall not be implicitly converted to a different underlying type [MISRA2008-5_0_3_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A cvalue expression shall not be implicitly converted to a different underlying type [MISRA2008-5_0_3_c]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_4_a", "name": "An implicit integral conversion shall not change the signedness of the underlying type", "shortDescription": { "text": "An implicit integral conversion shall not change the signedness of the underlying type" }, "fullDescription": { "text": "An implicit integral conversion shall not change the signedness of the underlying type [MISRA2008-5_0_4_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An implicit integral conversion shall not change the signedness of the underlying type [MISRA2008-5_0_4_a]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_5_a", "name": "There shall be no implicit floating-integral conversions", "shortDescription": { "text": "There shall be no implicit floating-integral conversions" }, "fullDescription": { "text": "There shall be no implicit floating-integral conversions [MISRA2008-5_0_5_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no implicit floating-integral conversions [MISRA2008-5_0_5_a]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_5_b", "name": "There shall be no implicit floating-integral conversions", "shortDescription": { "text": "There shall be no implicit floating-integral conversions" }, "fullDescription": { "text": "There shall be no implicit floating-integral conversions [MISRA2008-5_0_5_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no implicit floating-integral conversions [MISRA2008-5_0_5_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_6_a", "name": "An implicit integral or floating-point conversion shall not reduce the size of the underlying type", "shortDescription": { "text": "An implicit integral or floating-point conversion shall not reduce the size of the underlying type" }, "fullDescription": { "text": "An implicit integral or floating-point conversion shall not reduce the size of the underlying type [MISRA2008-5_0_6_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An implicit integral or floating-point conversion shall not reduce the size of the underlying type [MISRA2008-5_0_6_a]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_6_b", "name": "An implicit integral or floating-point conversion shall not reduce the size of the underlying type", "shortDescription": { "text": "An implicit integral or floating-point conversion shall not reduce the size of the underlying type" }, "fullDescription": { "text": "An implicit integral or floating-point conversion shall not reduce the size of the underlying type [MISRA2008-5_0_6_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An implicit integral or floating-point conversion shall not reduce the size of the underlying type [MISRA2008-5_0_6_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_6_c", "name": "An implicit integral or floating-point conversion shall not reduce the size of the underlying type", "shortDescription": { "text": "An implicit integral or floating-point conversion shall not reduce the size of the underlying type" }, "fullDescription": { "text": "An implicit integral or floating-point conversion shall not reduce the size of the underlying type [MISRA2008-5_0_6_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An implicit integral or floating-point conversion shall not reduce the size of the underlying type [MISRA2008-5_0_6_c]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_7_a", "name": "There shall be no explicit floating-integral conversions of a cvalue expression", "shortDescription": { "text": "There shall be no explicit floating-integral conversions of a cvalue expression" }, "fullDescription": { "text": "There shall be no explicit floating-integral conversions of a cvalue expression [MISRA2008-5_0_7_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no explicit floating-integral conversions of a cvalue expression [MISRA2008-5_0_7_a]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_7_b", "name": "There shall be no explicit floating-integral conversions of a cvalue expression", "shortDescription": { "text": "There shall be no explicit floating-integral conversions of a cvalue expression" }, "fullDescription": { "text": "There shall be no explicit floating-integral conversions of a cvalue expression [MISRA2008-5_0_7_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no explicit floating-integral conversions of a cvalue expression [MISRA2008-5_0_7_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_8", "name": "An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression", "shortDescription": { "text": "An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" }, "fullDescription": { "text": "An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression [MISRA2008-5_0_8]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression [MISRA2008-5_0_8]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_8_b", "name": "An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression", "shortDescription": { "text": "An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" }, "fullDescription": { "text": "An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression [MISRA2008-5_0_8_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression [MISRA2008-5_0_8_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_9", "name": "An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression", "shortDescription": { "text": "An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression" }, "fullDescription": { "text": "An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression [MISRA2008-5_0_9]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression [MISRA2008-5_0_9]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_14_1", "name": "The right hand operand of a logical && or || operator shall not contain side effects", "shortDescription": { "text": "The right hand operand of a logical && or || operator shall not contain side effects" }, "fullDescription": { "text": "The right hand operand of a logical && or || operator shall not contain side effects [MISRA2008-5_14_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The right hand operand of a logical && or || operator shall not contain side effects [MISRA2008-5_14_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_17_1", "name": "The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator", "shortDescription": { "text": "The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" }, "fullDescription": { "text": "The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator [MISRA2008-5_17_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator [MISRA2008-5_17_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_18_1", "name": "The comma operator shall not be used", "shortDescription": { "text": "The comma operator shall not be used" }, "fullDescription": { "text": "The comma operator shall not be used [MISRA2008-5_18_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The comma operator shall not be used [MISRA2008-5_18_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_2_1", "name": "Each operand of a logical && or || shall be a postfix-expression", "shortDescription": { "text": "Each operand of a logical && or || shall be a postfix-expression" }, "fullDescription": { "text": "Each operand of a logical && or || shall be a postfix-expression [MISRA2008-5_2_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Each operand of a logical && or || shall be a postfix-expression [MISRA2008-5_2_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_2_11", "name": "The && operator and the || operator shall not be overloaded", "shortDescription": { "text": "The && operator and the || operator shall not be overloaded" }, "fullDescription": { "text": "The && operator and the || operator shall not be overloaded [MISRA2008-5_2_11]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The && operator and the || operator shall not be overloaded [MISRA2008-5_2_11]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_2_11_b", "name": "The comma \",\" operator shall not be overloaded", "shortDescription": { "text": "The comma \",\" operator shall not be overloaded" }, "fullDescription": { "text": "The comma \",\" operator shall not be overloaded [MISRA2008-5_2_11_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The comma \",\" operator shall not be overloaded [MISRA2008-5_2_11_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_2_12", "name": "An identifier with array type passed as a function argument shall not decay to a pointer", "shortDescription": { "text": "An identifier with array type passed as a function argument shall not decay to a pointer" }, "fullDescription": { "text": "An identifier with array type passed as a function argument shall not decay to a pointer [MISRA2008-5_2_12]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An identifier with array type passed as a function argument shall not decay to a pointer [MISRA2008-5_2_12]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_2_2", "name": "A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast", "shortDescription": { "text": "A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" }, "fullDescription": { "text": "A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast [MISRA2008-5_2_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast [MISRA2008-5_2_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_2_4", "name": "C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used", "shortDescription": { "text": "C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" }, "fullDescription": { "text": "C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used [MISRA2008-5_2_4]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used [MISRA2008-5_2_4]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_2_5", "name": "A cast shall not remove any const or volatile qualification from the type of a pointer or reference", "shortDescription": { "text": "A cast shall not remove any const or volatile qualification from the type of a pointer or reference" }, "fullDescription": { "text": "A cast shall not remove any const or volatile qualification from the type of a pointer or reference [MISRA2008-5_2_5]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A cast shall not remove any const or volatile qualification from the type of a pointer or reference [MISRA2008-5_2_5]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_2_6", "name": "A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type", "shortDescription": { "text": "A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" }, "fullDescription": { "text": "A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type [MISRA2008-5_2_6]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type [MISRA2008-5_2_6]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_2_7", "name": "An object with pointer type shall not be converted to an unrelated pointer type, either directly or indirectly", "shortDescription": { "text": "An object with pointer type shall not be converted to an unrelated pointer type, either directly or indirectly" }, "fullDescription": { "text": "An object with pointer type shall not be converted to an unrelated pointer type, either directly or indirectly [MISRA2008-5_2_7]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An object with pointer type shall not be converted to an unrelated pointer type, either directly or indirectly [MISRA2008-5_2_7]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_2_8", "name": "An object with integer type or pointer to void type shall not be converted to an object with pointer type", "shortDescription": { "text": "An object with integer type or pointer to void type shall not be converted to an object with pointer type" }, "fullDescription": { "text": "An object with integer type or pointer to void type shall not be converted to an object with pointer type [MISRA2008-5_2_8]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An object with integer type or pointer to void type shall not be converted to an object with pointer type [MISRA2008-5_2_8]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_3_1", "name": "Each operand of the ! operator, the logical && or the logical || operators shall have type bool", "shortDescription": { "text": "Each operand of the ! operator, the logical && or the logical || operators shall have type bool" }, "fullDescription": { "text": "Each operand of the ! operator, the logical && or the logical || operators shall have type bool [MISRA2008-5_3_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Each operand of the ! operator, the logical && or the logical || operators shall have type bool [MISRA2008-5_3_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_3_2", "name": "The unary minus operator shall not be applied to an expression whose underlying type is unsigned", "shortDescription": { "text": "The unary minus operator shall not be applied to an expression whose underlying type is unsigned" }, "fullDescription": { "text": "The unary minus operator shall not be applied to an expression whose underlying type is unsigned [MISRA2008-5_3_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The unary minus operator shall not be applied to an expression whose underlying type is unsigned [MISRA2008-5_3_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_3_3", "name": "The unary & operator shall not be overloaded", "shortDescription": { "text": "The unary & operator shall not be overloaded" }, "fullDescription": { "text": "The unary & operator shall not be overloaded [MISRA2008-5_3_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The unary & operator shall not be overloaded [MISRA2008-5_3_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_3_4", "name": "Evaluation of the operand to the sizeof operator shall not contain side effects", "shortDescription": { "text": "Evaluation of the operand to the sizeof operator shall not contain side effects" }, "fullDescription": { "text": "Evaluation of the operand to the sizeof operator shall not contain side effects [MISRA2008-5_3_4]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Evaluation of the operand to the sizeof operator shall not contain side effects [MISRA2008-5_3_4]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_3_4_b", "name": "Evaluation of the operand to the sizeof operator shall not contain side effects", "shortDescription": { "text": "Evaluation of the operand to the sizeof operator shall not contain side effects" }, "fullDescription": { "text": "Evaluation of the operand to the sizeof operator shall not contain side effects [MISRA2008-5_3_4_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Evaluation of the operand to the sizeof operator shall not contain side effects [MISRA2008-5_3_4_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_3_4_c", "name": "Evaluation of the operand to the sizeof operator shall not contain side effects", "shortDescription": { "text": "Evaluation of the operand to the sizeof operator shall not contain side effects" }, "fullDescription": { "text": "Evaluation of the operand to the sizeof operator shall not contain side effects [MISRA2008-5_3_4_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Evaluation of the operand to the sizeof operator shall not contain side effects [MISRA2008-5_3_4_c]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_8_1", "name": "The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand", "shortDescription": { "text": "The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand" }, "fullDescription": { "text": "The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand [MISRA2008-5_8_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand [MISRA2008-5_8_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-6_2_1", "name": "Assignment operators shall not be used in sub-expressions", "shortDescription": { "text": "Assignment operators shall not be used in sub-expressions" }, "fullDescription": { "text": "Assignment operators shall not be used in sub-expressions [MISRA2008-6_2_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Assignment operators shall not be used in sub-expressions [MISRA2008-6_2_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-6_2_2", "name": "Floating-point expressions shall not be directly or indirectly tested for equality or inequality", "shortDescription": { "text": "Floating-point expressions shall not be directly or indirectly tested for equality or inequality" }, "fullDescription": { "text": "Floating-point expressions shall not be directly or indirectly tested for equality or inequality [MISRA2008-6_2_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Floating-point expressions shall not be directly or indirectly tested for equality or inequality [MISRA2008-6_2_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-6_2_3", "name": "Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character", "shortDescription": { "text": "Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character" }, "fullDescription": { "text": "Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character [MISRA2008-6_2_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character [MISRA2008-6_2_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-6_3_1", "name": "The statement forming the body of a switch, while, do while or for statement shall be a compound statement", "shortDescription": { "text": "The statement forming the body of a switch, while, do while or for statement shall be a compound statement" }, "fullDescription": { "text": "The statement forming the body of a switch, while, do while or for statement shall be a compound statement [MISRA2008-6_3_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The statement forming the body of a switch, while, do while or for statement shall be a compound statement [MISRA2008-6_3_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-6_4_1", "name": "An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement", "shortDescription": { "text": "An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement" }, "fullDescription": { "text": "An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement [MISRA2008-6_4_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement [MISRA2008-6_4_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-6_4_2", "name": "All if ... else if constructs shall be terminated with an else clause", "shortDescription": { "text": "All if ... else if constructs shall be terminated with an else clause" }, "fullDescription": { "text": "All if ... else if constructs shall be terminated with an else clause [MISRA2008-6_4_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All if ... else if constructs shall be terminated with an else clause [MISRA2008-6_4_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-6_4_3_a", "name": "A switch statement shall be a well-formed switch statement", "shortDescription": { "text": "A switch statement shall be a well-formed switch statement" }, "fullDescription": { "text": "A switch statement shall be a well-formed switch statement [MISRA2008-6_4_3_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A switch statement shall be a well-formed switch statement [MISRA2008-6_4_3_a]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-6_4_3_b", "name": "A switch statement shall be a well-formed switch statement", "shortDescription": { "text": "A switch statement shall be a well-formed switch statement" }, "fullDescription": { "text": "A switch statement shall be a well-formed switch statement [MISRA2008-6_4_3_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A switch statement shall be a well-formed switch statement [MISRA2008-6_4_3_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-6_4_3_c", "name": "A switch statement shall be a well-formed switch statement", "shortDescription": { "text": "A switch statement shall be a well-formed switch statement" }, "fullDescription": { "text": "A switch statement shall be a well-formed switch statement [MISRA2008-6_4_3_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A switch statement shall be a well-formed switch statement [MISRA2008-6_4_3_c]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-6_4_3_d", "name": "A switch statement shall be a well-formed switch statement", "shortDescription": { "text": "A switch statement shall be a well-formed switch statement" }, "fullDescription": { "text": "A switch statement shall be a well-formed switch statement [MISRA2008-6_4_3_d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A switch statement shall be a well-formed switch statement [MISRA2008-6_4_3_d]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-6_4_3_e", "name": "A switch statement shall be a well-formed switch statement", "shortDescription": { "text": "A switch statement shall be a well-formed switch statement" }, "fullDescription": { "text": "A switch statement shall be a well-formed switch statement [MISRA2008-6_4_3_e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A switch statement shall be a well-formed switch statement [MISRA2008-6_4_3_e]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-6_4_4", "name": "A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement", "shortDescription": { "text": "A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" }, "fullDescription": { "text": "A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement [MISRA2008-6_4_4]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement [MISRA2008-6_4_4]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-6_4_5", "name": "An unconditional throw or break statement shall terminate every non-empty switch-clause", "shortDescription": { "text": "An unconditional throw or break statement shall terminate every non-empty switch-clause" }, "fullDescription": { "text": "An unconditional throw or break statement shall terminate every non-empty switch-clause [MISRA2008-6_4_5]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An unconditional throw or break statement shall terminate every non-empty switch-clause [MISRA2008-6_4_5]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-6_4_6", "name": "The final clause of a switch statement shall be the default-clause", "shortDescription": { "text": "The final clause of a switch statement shall be the default-clause" }, "fullDescription": { "text": "The final clause of a switch statement shall be the default-clause [MISRA2008-6_4_6]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The final clause of a switch statement shall be the default-clause [MISRA2008-6_4_6]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-6_4_7", "name": "The condition of a switch statement shall not have bool type", "shortDescription": { "text": "The condition of a switch statement shall not have bool type" }, "fullDescription": { "text": "The condition of a switch statement shall not have bool type [MISRA2008-6_4_7]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The condition of a switch statement shall not have bool type [MISRA2008-6_4_7]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-6_4_8", "name": "Every switch statement shall have at least one case-clause", "shortDescription": { "text": "Every switch statement shall have at least one case-clause" }, "fullDescription": { "text": "Every switch statement shall have at least one case-clause [MISRA2008-6_4_8]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Every switch statement shall have at least one case-clause [MISRA2008-6_4_8]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-6_5_1", "name": "A for loop shall contain a single loop-counter which shall not have floating type", "shortDescription": { "text": "A for loop shall contain a single loop-counter which shall not have floating type" }, "fullDescription": { "text": "A for loop shall contain a single loop-counter which shall not have floating type [MISRA2008-6_5_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A for loop shall contain a single loop-counter which shall not have floating type [MISRA2008-6_5_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-6_5_2", "name": "If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=", "shortDescription": { "text": "If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=" }, "fullDescription": { "text": "If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >= [MISRA2008-6_5_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >= [MISRA2008-6_5_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-6_5_3", "name": "The loop-counter shall not be modified within condition or statement", "shortDescription": { "text": "The loop-counter shall not be modified within condition or statement" }, "fullDescription": { "text": "The loop-counter shall not be modified within condition or statement [MISRA2008-6_5_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The loop-counter shall not be modified within condition or statement [MISRA2008-6_5_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-6_5_4", "name": "The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop", "shortDescription": { "text": "The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop" }, "fullDescription": { "text": "The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop [MISRA2008-6_5_4]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop [MISRA2008-6_5_4]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-6_5_5", "name": "A loop-control-variable other than the loop-counter shall not be modified within condition or expression", "shortDescription": { "text": "A loop-control-variable other than the loop-counter shall not be modified within condition or expression" }, "fullDescription": { "text": "A loop-control-variable other than the loop-counter shall not be modified within condition or expression [MISRA2008-6_5_5]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A loop-control-variable other than the loop-counter shall not be modified within condition or expression [MISRA2008-6_5_5]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-6_5_6", "name": "A loop-control-variable other than the loop-counter which is modified in statement within a body of the loop shall have type bool", "shortDescription": { "text": "A loop-control-variable other than the loop-counter which is modified in statement within a body of the loop shall have type bool" }, "fullDescription": { "text": "A loop-control-variable other than the loop-counter which is modified in statement within a body of the loop shall have type bool [MISRA2008-6_5_6]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A loop-control-variable other than the loop-counter which is modified in statement within a body of the loop shall have type bool [MISRA2008-6_5_6]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-6_6_1", "name": "Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement", "shortDescription": { "text": "Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" }, "fullDescription": { "text": "Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement [MISRA2008-6_6_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement [MISRA2008-6_6_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-6_6_2", "name": "The goto statement shall jump to a label declared later in the same function body", "shortDescription": { "text": "The goto statement shall jump to a label declared later in the same function body" }, "fullDescription": { "text": "The goto statement shall jump to a label declared later in the same function body [MISRA2008-6_6_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The goto statement shall jump to a label declared later in the same function body [MISRA2008-6_6_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-6_6_3", "name": "The continue statement shall only be used within a well-formed for loop", "shortDescription": { "text": "The continue statement shall only be used within a well-formed for loop" }, "fullDescription": { "text": "The continue statement shall only be used within a well-formed for loop [MISRA2008-6_6_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The continue statement shall only be used within a well-formed for loop [MISRA2008-6_6_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-6_6_4", "name": "For any iteration statement there shall be no more than one break or goto statement used for loop termination", "shortDescription": { "text": "For any iteration statement there shall be no more than one break or goto statement used for loop termination" }, "fullDescription": { "text": "For any iteration statement there shall be no more than one break or goto statement used for loop termination [MISRA2008-6_6_4]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "For any iteration statement there shall be no more than one break or goto statement used for loop termination [MISRA2008-6_6_4]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-6_6_5", "name": "A function shall have a single point of exit at the end of the function", "shortDescription": { "text": "A function shall have a single point of exit at the end of the function" }, "fullDescription": { "text": "A function shall have a single point of exit at the end of the function [MISRA2008-6_6_5]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A function shall have a single point of exit at the end of the function [MISRA2008-6_6_5]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-7_1_1", "name": "Declare local variable as const whenever possible", "shortDescription": { "text": "Declare local variable as const whenever possible" }, "fullDescription": { "text": "Declare local variable as const whenever possible [MISRA2008-7_1_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Declare local variable as const whenever possible [MISRA2008-7_1_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-7_1_2_a", "name": "A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified", "shortDescription": { "text": "A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" }, "fullDescription": { "text": "A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified [MISRA2008-7_1_2_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified [MISRA2008-7_1_2_a]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-7_1_2_b", "name": "A reference parameter in a function shall be declared as reference to const if the corresponding object is not modified", "shortDescription": { "text": "A reference parameter in a function shall be declared as reference to const if the corresponding object is not modified" }, "fullDescription": { "text": "A reference parameter in a function shall be declared as reference to const if the corresponding object is not modified [MISRA2008-7_1_2_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A reference parameter in a function shall be declared as reference to const if the corresponding object is not modified [MISRA2008-7_1_2_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-7_1_2_c", "name": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object", "shortDescription": { "text": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" }, "fullDescription": { "text": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object [MISRA2008-7_1_2_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object [MISRA2008-7_1_2_c]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-7_2_1", "name": "An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration", "shortDescription": { "text": "An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" }, "fullDescription": { "text": "An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration [MISRA2008-7_2_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration [MISRA2008-7_2_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-7_3_1", "name": "The global namespace shall only contain main, namespace declarations and extern \"C\" declarations", "shortDescription": { "text": "The global namespace shall only contain main, namespace declarations and extern \"C\" declarations" }, "fullDescription": { "text": "The global namespace shall only contain main, namespace declarations and extern \"C\" declarations [MISRA2008-7_3_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The global namespace shall only contain main, namespace declarations and extern \"C\" declarations [MISRA2008-7_3_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-7_3_2", "name": "The identifier main shall not be used for a function other than the global function main", "shortDescription": { "text": "The identifier main shall not be used for a function other than the global function main" }, "fullDescription": { "text": "The identifier main shall not be used for a function other than the global function main [MISRA2008-7_3_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The identifier main shall not be used for a function other than the global function main [MISRA2008-7_3_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-7_3_3", "name": "There shall be no unnamed namespaces in header files", "shortDescription": { "text": "There shall be no unnamed namespaces in header files" }, "fullDescription": { "text": "There shall be no unnamed namespaces in header files [MISRA2008-7_3_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unnamed namespaces in header files [MISRA2008-7_3_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-7_3_4", "name": "using-directives shall not be used", "shortDescription": { "text": "using-directives shall not be used" }, "fullDescription": { "text": "using-directives shall not be used [MISRA2008-7_3_4]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "using-directives shall not be used [MISRA2008-7_3_4]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-7_3_5", "name": "Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier", "shortDescription": { "text": "Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier" }, "fullDescription": { "text": "Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier [MISRA2008-7_3_5]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier [MISRA2008-7_3_5]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-7_3_6", "name": "using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files", "shortDescription": { "text": "using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" }, "fullDescription": { "text": "using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files [MISRA2008-7_3_6]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files [MISRA2008-7_3_6]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-7_4_2", "name": "Assembler instructions shall only be introduced using the asm declaration", "shortDescription": { "text": "Assembler instructions shall only be introduced using the asm declaration" }, "fullDescription": { "text": "Assembler instructions shall only be introduced using the asm declaration [MISRA2008-7_4_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Assembler instructions shall only be introduced using the asm declaration [MISRA2008-7_4_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-7_4_3", "name": "Assembly language shall be encapsulated and isolated", "shortDescription": { "text": "Assembly language shall be encapsulated and isolated" }, "fullDescription": { "text": "Assembly language shall be encapsulated and isolated [MISRA2008-7_4_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Assembly language shall be encapsulated and isolated [MISRA2008-7_4_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-7_5_1", "name": "A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function", "shortDescription": { "text": "A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function" }, "fullDescription": { "text": "A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function [MISRA2008-7_5_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function [MISRA2008-7_5_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-7_5_2_a", "name": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist", "shortDescription": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" }, "fullDescription": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist [MISRA2008-7_5_2_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist [MISRA2008-7_5_2_a]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-7_5_2_b", "name": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist", "shortDescription": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" }, "fullDescription": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist [MISRA2008-7_5_2_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist [MISRA2008-7_5_2_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-7_5_3", "name": "A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference", "shortDescription": { "text": "A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference" }, "fullDescription": { "text": "A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference [MISRA2008-7_5_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference [MISRA2008-7_5_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-8_0_1", "name": "An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively", "shortDescription": { "text": "An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" }, "fullDescription": { "text": "An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively [MISRA2008-8_0_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively [MISRA2008-8_0_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-8_3_1", "name": "Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments", "shortDescription": { "text": "Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments" }, "fullDescription": { "text": "Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments [MISRA2008-8_3_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments [MISRA2008-8_3_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-8_4_1", "name": "Functions shall not be defined using the ellipsis notation", "shortDescription": { "text": "Functions shall not be defined using the ellipsis notation" }, "fullDescription": { "text": "Functions shall not be defined using the ellipsis notation [MISRA2008-8_4_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Functions shall not be defined using the ellipsis notation [MISRA2008-8_4_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-8_4_2", "name": "The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration", "shortDescription": { "text": "The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration" }, "fullDescription": { "text": "The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration [MISRA2008-8_4_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration [MISRA2008-8_4_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-8_4_3", "name": "All exit paths from a function with non-void return type shall have an explicit return statement with an expression", "shortDescription": { "text": "All exit paths from a function with non-void return type shall have an explicit return statement with an expression" }, "fullDescription": { "text": "All exit paths from a function with non-void return type shall have an explicit return statement with an expression [MISRA2008-8_4_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All exit paths from a function with non-void return type shall have an explicit return statement with an expression [MISRA2008-8_4_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-8_4_4", "name": "A function identifier shall either be used to call the function or it shall be preceded by '&'", "shortDescription": { "text": "A function identifier shall either be used to call the function or it shall be preceded by '&'" }, "fullDescription": { "text": "A function identifier shall either be used to call the function or it shall be preceded by '&' [MISRA2008-8_4_4]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A function identifier shall either be used to call the function or it shall be preceded by '&' [MISRA2008-8_4_4]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-8_5_1", "name": "All variables shall have a defined value before they are used", "shortDescription": { "text": "All variables shall have a defined value before they are used" }, "fullDescription": { "text": "All variables shall have a defined value before they are used [MISRA2008-8_5_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All variables shall have a defined value before they are used [MISRA2008-8_5_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-8_5_2", "name": "Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures", "shortDescription": { "text": "Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" }, "fullDescription": { "text": "Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures [MISRA2008-8_5_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures [MISRA2008-8_5_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-8_5_2_b", "name": "Arrays shall not be partially initialized", "shortDescription": { "text": "Arrays shall not be partially initialized" }, "fullDescription": { "text": "Arrays shall not be partially initialized [MISRA2008-8_5_2_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Arrays shall not be partially initialized [MISRA2008-8_5_2_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-8_5_2_c", "name": "Structures shall not be partially initialized", "shortDescription": { "text": "Structures shall not be partially initialized" }, "fullDescription": { "text": "Structures shall not be partially initialized [MISRA2008-8_5_2_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Structures shall not be partially initialized [MISRA2008-8_5_2_c]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-8_5_3", "name": "In an enumerator list, the = construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized", "shortDescription": { "text": "In an enumerator list, the = construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized" }, "fullDescription": { "text": "In an enumerator list, the = construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized [MISRA2008-8_5_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "In an enumerator list, the = construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized [MISRA2008-8_5_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-9_3_1", "name": "const member functions shall not return non-const pointers or references to class-data", "shortDescription": { "text": "const member functions shall not return non-const pointers or references to class-data" }, "fullDescription": { "text": "const member functions shall not return non-const pointers or references to class-data [MISRA2008-9_3_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "const member functions shall not return non-const pointers or references to class-data [MISRA2008-9_3_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-9_3_2_a", "name": "Protected member functions shall not return non-const handles to class-data", "shortDescription": { "text": "Protected member functions shall not return non-const handles to class-data" }, "fullDescription": { "text": "Protected member functions shall not return non-const handles to class-data [MISRA2008-9_3_2_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protected member functions shall not return non-const handles to class-data [MISRA2008-9_3_2_a]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-9_3_2_b", "name": "Public member functions shall not return non-const handles to class-data", "shortDescription": { "text": "Public member functions shall not return non-const handles to class-data" }, "fullDescription": { "text": "Public member functions shall not return non-const handles to class-data [MISRA2008-9_3_2_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Public member functions shall not return non-const handles to class-data [MISRA2008-9_3_2_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-9_3_3", "name": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const", "shortDescription": { "text": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" }, "fullDescription": { "text": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const [MISRA2008-9_3_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const [MISRA2008-9_3_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-9_5_1", "name": "Unions shall not be used", "shortDescription": { "text": "Unions shall not be used" }, "fullDescription": { "text": "Unions shall not be used [MISRA2008-9_5_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Unions shall not be used [MISRA2008-9_5_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-9_6_2", "name": "Bit-fields shall be either bool type or an explicitly unsigned or signed integral type", "shortDescription": { "text": "Bit-fields shall be either bool type or an explicitly unsigned or signed integral type" }, "fullDescription": { "text": "Bit-fields shall be either bool type or an explicitly unsigned or signed integral type [MISRA2008-9_6_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Bit-fields shall be either bool type or an explicitly unsigned or signed integral type [MISRA2008-9_6_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-9_6_3", "name": "Bit-fields shall not have enum type", "shortDescription": { "text": "Bit-fields shall not have enum type" }, "fullDescription": { "text": "Bit-fields shall not have enum type [MISRA2008-9_6_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Bit-fields shall not have enum type [MISRA2008-9_6_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-9_6_4", "name": "Named bit-fields with signed integer type shall have a length of more than one bit", "shortDescription": { "text": "Named bit-fields with signed integer type shall have a length of more than one bit" }, "fullDescription": { "text": "Named bit-fields with signed integer type shall have a length of more than one bit [MISRA2008-9_6_4]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Named bit-fields with signed integer type shall have a length of more than one bit [MISRA2008-9_6_4]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-10_1_1", "name": "Classes should not be derived from virtual bases", "shortDescription": { "text": "Classes should not be derived from virtual bases" }, "fullDescription": { "text": "Classes should not be derived from virtual bases [MISRA2008-10_1_1]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Classes should not be derived from virtual bases [MISRA2008-10_1_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-10_2_1", "name": "All accessible entity names within a multiple inheritance hierarchy should be unique", "shortDescription": { "text": "All accessible entity names within a multiple inheritance hierarchy should be unique" }, "fullDescription": { "text": "All accessible entity names within a multiple inheritance hierarchy should be unique [MISRA2008-10_2_1]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All accessible entity names within a multiple inheritance hierarchy should be unique [MISRA2008-10_2_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-12_1_2", "name": "All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes", "shortDescription": { "text": "All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" }, "fullDescription": { "text": "All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes [MISRA2008-12_1_2]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes [MISRA2008-12_1_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-14_8_2", "name": "The viable function set for a function call should either contain no function specializations, or only contain function specializations", "shortDescription": { "text": "The viable function set for a function call should either contain no function specializations, or only contain function specializations" }, "fullDescription": { "text": "The viable function set for a function call should either contain no function specializations, or only contain function specializations [MISRA2008-14_8_2]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The viable function set for a function call should either contain no function specializations, or only contain function specializations [MISRA2008-14_8_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_0_2", "name": "An exception object should not have pointer type", "shortDescription": { "text": "An exception object should not have pointer type" }, "fullDescription": { "text": "An exception object should not have pointer type [MISRA2008-15_0_2]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An exception object should not have pointer type [MISRA2008-15_0_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_3_2", "name": "There should be at least one exception handler to catch all otherwise unhandled exceptions", "shortDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions" }, "fullDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [MISRA2008-15_3_2]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [MISRA2008-15_3_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-16_2_5", "name": "The \\ character should not occur in a header file name", "shortDescription": { "text": "The \\ character should not occur in a header file name" }, "fullDescription": { "text": "The \\ character should not occur in a header file name [MISRA2008-16_2_5]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The \\ character should not occur in a header file name [MISRA2008-16_2_5]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-16_3_2", "name": "The # and ## operators should not be used", "shortDescription": { "text": "The # and ## operators should not be used" }, "fullDescription": { "text": "The # and ## operators should not be used [MISRA2008-16_3_2]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The # and ## operators should not be used [MISRA2008-16_3_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-2_10_5_a", "name": "The identifier name of a non-member object or function with static storage duration should not be reused", "shortDescription": { "text": "The identifier name of a non-member object or function with static storage duration should not be reused" }, "fullDescription": { "text": "The identifier name of a non-member object or function with static storage duration should not be reused [MISRA2008-2_10_5_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The identifier name of a non-member object or function with static storage duration should not be reused [MISRA2008-2_10_5_a]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-2_10_5_b", "name": "The identifier name of a non-member object or function with static storage duration should not be reused", "shortDescription": { "text": "The identifier name of a non-member object or function with static storage duration should not be reused" }, "fullDescription": { "text": "The identifier name of a non-member object or function with static storage duration should not be reused [MISRA2008-2_10_5_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The identifier name of a non-member object or function with static storage duration should not be reused [MISRA2008-2_10_5_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-2_5_1", "name": "Digraphs should not be used", "shortDescription": { "text": "Digraphs should not be used" }, "fullDescription": { "text": "Digraphs should not be used [MISRA2008-2_5_1]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Digraphs should not be used [MISRA2008-2_5_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-2_7_3", "name": "Sections of code should not be \"commented out\" using C++ comments", "shortDescription": { "text": "Sections of code should not be \"commented out\" using C++ comments" }, "fullDescription": { "text": "Sections of code should not be \"commented out\" using C++ comments [MISRA2008-2_7_3]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Sections of code should not be \"commented out\" using C++ comments [MISRA2008-2_7_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-3_9_2", "name": "typedefs that indicate size and signedness should be used in place of the basic numerical types", "shortDescription": { "text": "typedefs that indicate size and signedness should be used in place of the basic numerical types" }, "fullDescription": { "text": "typedefs that indicate size and signedness should be used in place of the basic numerical types [MISRA2008-3_9_2]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "typedefs that indicate size and signedness should be used in place of the basic numerical types [MISRA2008-3_9_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_2_a", "name": "Limited dependence should be placed on C++ operator precedence rules in expressions", "shortDescription": { "text": "Limited dependence should be placed on C++ operator precedence rules in expressions" }, "fullDescription": { "text": "Limited dependence should be placed on C++ operator precedence rules in expressions [MISRA2008-5_0_2_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Limited dependence should be placed on C++ operator precedence rules in expressions [MISRA2008-5_0_2_a]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_2_b", "name": "Limited dependence should be placed on C++ operator precedence rules in expressions", "shortDescription": { "text": "Limited dependence should be placed on C++ operator precedence rules in expressions" }, "fullDescription": { "text": "Limited dependence should be placed on C++ operator precedence rules in expressions [MISRA2008-5_0_2_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Limited dependence should be placed on C++ operator precedence rules in expressions [MISRA2008-5_0_2_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_2_c", "name": "Limited dependence should be placed on C++ operator precedence rules in expressions", "shortDescription": { "text": "Limited dependence should be placed on C++ operator precedence rules in expressions" }, "fullDescription": { "text": "Limited dependence should be placed on C++ operator precedence rules in expressions [MISRA2008-5_0_2_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Limited dependence should be placed on C++ operator precedence rules in expressions [MISRA2008-5_0_2_c]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_2_d", "name": "Limited dependence should be placed on C++ operator precedence rules in expressions", "shortDescription": { "text": "Limited dependence should be placed on C++ operator precedence rules in expressions" }, "fullDescription": { "text": "Limited dependence should be placed on C++ operator precedence rules in expressions [MISRA2008-5_0_2_d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Limited dependence should be placed on C++ operator precedence rules in expressions [MISRA2008-5_0_2_d]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_2_e", "name": "Limited dependence should be placed on C++ operator precedence rules in expressions", "shortDescription": { "text": "Limited dependence should be placed on C++ operator precedence rules in expressions" }, "fullDescription": { "text": "Limited dependence should be placed on C++ operator precedence rules in expressions [MISRA2008-5_0_2_e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Limited dependence should be placed on C++ operator precedence rules in expressions [MISRA2008-5_0_2_e]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_2_f", "name": "Limited dependence should be placed on C++ operator precedence rules in expressions", "shortDescription": { "text": "Limited dependence should be placed on C++ operator precedence rules in expressions" }, "fullDescription": { "text": "Limited dependence should be placed on C++ operator precedence rules in expressions [MISRA2008-5_0_2_f]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Limited dependence should be placed on C++ operator precedence rules in expressions [MISRA2008-5_0_2_f]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_19_1_a", "name": "Integer overflow or underflow in constant expression in '+', '-', '*' operator", "shortDescription": { "text": "Integer overflow or underflow in constant expression in '+', '-', '*' operator" }, "fullDescription": { "text": "Integer overflow or underflow in constant expression in '+', '-', '*' operator [MISRA2008-5_19_1_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Integer overflow or underflow in constant expression in '+', '-', '*' operator [MISRA2008-5_19_1_a]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_19_1_b", "name": "Integer overflow or underflow in constant expression in '<<' operator", "shortDescription": { "text": "Integer overflow or underflow in constant expression in '<<' operator" }, "fullDescription": { "text": "Integer overflow or underflow in constant expression in '<<' operator [MISRA2008-5_19_1_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Integer overflow or underflow in constant expression in '<<' operator [MISRA2008-5_19_1_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_2_10", "name": "The increment (++) and decrement (--) operators should not be mixed with arithmetic operators in an expression", "shortDescription": { "text": "The increment (++) and decrement (--) operators should not be mixed with arithmetic operators in an expression" }, "fullDescription": { "text": "The increment (++) and decrement (--) operators should not be mixed with arithmetic operators in an expression [MISRA2008-5_2_10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The increment (++) and decrement (--) operators should not be mixed with arithmetic operators in an expression [MISRA2008-5_2_10]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_2_3", "name": "Casts from a base class to a derived class should not be performed on polymorphic types", "shortDescription": { "text": "Casts from a base class to a derived class should not be performed on polymorphic types" }, "fullDescription": { "text": "Casts from a base class to a derived class should not be performed on polymorphic types [MISRA2008-5_2_3]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Casts from a base class to a derived class should not be performed on polymorphic types [MISRA2008-5_2_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_2_9", "name": "A cast should not convert a pointer type to an integral type", "shortDescription": { "text": "A cast should not convert a pointer type to an integral type" }, "fullDescription": { "text": "A cast should not convert a pointer type to an integral type [MISRA2008-5_2_9]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A cast should not convert a pointer type to an integral type [MISRA2008-5_2_9]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-7_5_4", "name": "Functions should not call themselves, either directly or indirectly", "shortDescription": { "text": "Functions should not call themselves, either directly or indirectly" }, "fullDescription": { "text": "Functions should not call themselves, either directly or indirectly [MISRA2008-7_5_4]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Functions should not call themselves, either directly or indirectly [MISRA2008-7_5_4]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_3_1_a", "name": "Avoid accessing arrays out of bounds", "shortDescription": { "text": "Avoid accessing arrays out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays out of bounds [MISRA2008-0_3_1_a]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Avoid accessing arrays out of bounds [MISRA2008-0_3_1_a]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_3_1_b", "name": "Avoid null pointer dereferencing", "shortDescription": { "text": "Avoid null pointer dereferencing" }, "fullDescription": { "text": "Avoid null pointer dereferencing [MISRA2008-0_3_1_b]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Avoid null pointer dereferencing [MISRA2008-0_3_1_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_3_1_c", "name": "Avoid division by zero", "shortDescription": { "text": "Avoid division by zero" }, "fullDescription": { "text": "Avoid division by zero [MISRA2008-0_3_1_c]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Avoid division by zero [MISRA2008-0_3_1_c]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_3_1_d", "name": "Avoid buffer overflow due to defining incorrect format limits", "shortDescription": { "text": "Avoid buffer overflow due to defining incorrect format limits" }, "fullDescription": { "text": "Avoid buffer overflow due to defining incorrect format limits [MISRA2008-0_3_1_d]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Avoid buffer overflow due to defining incorrect format limits [MISRA2008-0_3_1_d]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_3_1_e", "name": "Avoid overflow due to reading a not zero terminated string", "shortDescription": { "text": "Avoid overflow due to reading a not zero terminated string" }, "fullDescription": { "text": "Avoid overflow due to reading a not zero terminated string [MISRA2008-0_3_1_e]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Avoid overflow due to reading a not zero terminated string [MISRA2008-0_3_1_e]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_3_1_g", "name": "Avoid overflow when reading from a buffer", "shortDescription": { "text": "Avoid overflow when reading from a buffer" }, "fullDescription": { "text": "Avoid overflow when reading from a buffer [MISRA2008-0_3_1_g]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Avoid overflow when reading from a buffer [MISRA2008-0_3_1_g]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_3_1_h", "name": "Avoid overflow when writing to a buffer", "shortDescription": { "text": "Avoid overflow when writing to a buffer" }, "fullDescription": { "text": "Avoid overflow when writing to a buffer [MISRA2008-0_3_1_h]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Avoid overflow when writing to a buffer [MISRA2008-0_3_1_h]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_3_1_i", "name": "Do not subtract two pointers that do not address elements of the same array", "shortDescription": { "text": "Do not subtract two pointers that do not address elements of the same array" }, "fullDescription": { "text": "Do not subtract two pointers that do not address elements of the same array [MISRA2008-0_3_1_i]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Do not subtract two pointers that do not address elements of the same array [MISRA2008-0_3_1_i]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_3_1_j", "name": "Do not compare two unrelated pointers", "shortDescription": { "text": "Do not compare two unrelated pointers" }, "fullDescription": { "text": "Do not compare two unrelated pointers [MISRA2008-0_3_1_j]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Do not compare two unrelated pointers [MISRA2008-0_3_1_j]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_4_2", "name": "Use of floating-point arithmetic shall be documented", "shortDescription": { "text": "Use of floating-point arithmetic shall be documented" }, "fullDescription": { "text": "Use of floating-point arithmetic shall be documented [MISRA2008-0_4_2]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Use of floating-point arithmetic shall be documented [MISRA2008-0_4_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-16_6_1", "name": "All uses of the #pragma directive shall be documented", "shortDescription": { "text": "All uses of the #pragma directive shall be documented" }, "fullDescription": { "text": "All uses of the #pragma directive shall be documented [MISRA2008-16_6_1]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "All uses of the #pragma directive shall be documented [MISRA2008-16_6_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-7_4_1", "name": "All usage of assembler shall be documented", "shortDescription": { "text": "All usage of assembler shall be documented" }, "fullDescription": { "text": "All usage of assembler shall be documented [MISRA2008-7_4_1]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "All usage of assembler shall be documented [MISRA2008-7_4_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2012-RULE-12_5", "name": "The 'sizeof' operator shall not have an operand which is a function parameter declared as \"array of type\"", "shortDescription": { "text": "The 'sizeof' operator shall not have an operand which is a function parameter declared as \"array of type\"" }, "fullDescription": { "text": "The 'sizeof' operator shall not have an operand which is a function parameter declared as \"array of type\" [MISRA2012-RULE-12_5]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'sizeof' operator shall not have an operand which is a function parameter declared as \"array of type\" [MISRA2012-RULE-12_5]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-17_3", "name": "A function shall not be declared implicitly", "shortDescription": { "text": "A function shall not be declared implicitly" }, "fullDescription": { "text": "A function shall not be declared implicitly [MISRA2012-RULE-17_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A function shall not be declared implicitly [MISRA2012-RULE-17_3]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-17_4", "name": "All exit paths from a function with non-void return type shall have an explicit return statement with an expression", "shortDescription": { "text": "All exit paths from a function with non-void return type shall have an explicit return statement with an expression" }, "fullDescription": { "text": "All exit paths from a function with non-void return type shall have an explicit return statement with an expression [MISRA2012-RULE-17_4]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All exit paths from a function with non-void return type shall have an explicit return statement with an expression [MISRA2012-RULE-17_4]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-17_4_b", "name": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression", "shortDescription": { "text": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" }, "fullDescription": { "text": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression [MISRA2012-RULE-17_4_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression [MISRA2012-RULE-17_4_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-17_6", "name": "The declaration of an array parameter shall not contain the 'static' keyword between the [ ]", "shortDescription": { "text": "The declaration of an array parameter shall not contain the 'static' keyword between the [ ]" }, "fullDescription": { "text": "The declaration of an array parameter shall not contain the 'static' keyword between the [ ] [MISRA2012-RULE-17_6]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The declaration of an array parameter shall not contain the 'static' keyword between the [ ] [MISRA2012-RULE-17_6]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-19_1_a", "name": "An object shall not be assigned or copied to an overlapping object", "shortDescription": { "text": "An object shall not be assigned or copied to an overlapping object" }, "fullDescription": { "text": "An object shall not be assigned or copied to an overlapping object [MISRA2012-RULE-19_1_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An object shall not be assigned or copied to an overlapping object [MISRA2012-RULE-19_1_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-19_1_b", "name": "An object shall not be assigned or copied to an overlapping object", "shortDescription": { "text": "An object shall not be assigned or copied to an overlapping object" }, "fullDescription": { "text": "An object shall not be assigned or copied to an overlapping object [MISRA2012-RULE-19_1_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An object shall not be assigned or copied to an overlapping object [MISRA2012-RULE-19_1_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-19_1_c", "name": "An object shall not be assigned or copied to an overlapping object", "shortDescription": { "text": "An object shall not be assigned or copied to an overlapping object" }, "fullDescription": { "text": "An object shall not be assigned or copied to an overlapping object [MISRA2012-RULE-19_1_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An object shall not be assigned or copied to an overlapping object [MISRA2012-RULE-19_1_c]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_13", "name": "Any value passed to a function in <ctype.h> shall be representable as an 'unsigned char' or be the value 'EOF'", "shortDescription": { "text": "Any value passed to a function in <ctype.h> shall be representable as an 'unsigned char' or be the value 'EOF'" }, "fullDescription": { "text": "Any value passed to a function in <ctype.h> shall be representable as an 'unsigned char' or be the value 'EOF' [MISRA2012-RULE-21_13]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Any value passed to a function in <ctype.h> shall be representable as an 'unsigned char' or be the value 'EOF' [MISRA2012-RULE-21_13]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_17_a", "name": "Avoid overflow due to reading a not zero terminated string", "shortDescription": { "text": "Avoid overflow due to reading a not zero terminated string" }, "fullDescription": { "text": "Avoid overflow due to reading a not zero terminated string [MISRA2012-RULE-21_17_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow due to reading a not zero terminated string [MISRA2012-RULE-21_17_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_17_b", "name": "Avoid overflow when writing to a buffer", "shortDescription": { "text": "Avoid overflow when writing to a buffer" }, "fullDescription": { "text": "Avoid overflow when writing to a buffer [MISRA2012-RULE-21_17_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when writing to a buffer [MISRA2012-RULE-21_17_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_18", "name": "The 'size_t' argument passed to any function in <string.h> shall have an appropriate value", "shortDescription": { "text": "The 'size_t' argument passed to any function in <string.h> shall have an appropriate value" }, "fullDescription": { "text": "The 'size_t' argument passed to any function in <string.h> shall have an appropriate value [MISRA2012-RULE-21_18]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'size_t' argument passed to any function in <string.h> shall have an appropriate value [MISRA2012-RULE-21_18]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_19_a", "name": "The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type", "shortDescription": { "text": "The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" }, "fullDescription": { "text": "The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type [MISRA2012-RULE-21_19_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type [MISRA2012-RULE-21_19_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_19_b", "name": "Strings pointed by members of the structure 'lconv' should not be modified", "shortDescription": { "text": "Strings pointed by members of the structure 'lconv' should not be modified" }, "fullDescription": { "text": "Strings pointed by members of the structure 'lconv' should not be modified [MISRA2012-RULE-21_19_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Strings pointed by members of the structure 'lconv' should not be modified [MISRA2012-RULE-21_19_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_20", "name": "Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function", "shortDescription": { "text": "Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" }, "fullDescription": { "text": "Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function [MISRA2012-RULE-21_20]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function [MISRA2012-RULE-21_20]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-22_2_a", "name": "Do not use resources that have been freed", "shortDescription": { "text": "Do not use resources that have been freed" }, "fullDescription": { "text": "Do not use resources that have been freed [MISRA2012-RULE-22_2_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use resources that have been freed [MISRA2012-RULE-22_2_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-22_2_b", "name": "Do not free resources using invalid pointers", "shortDescription": { "text": "Do not free resources using invalid pointers" }, "fullDescription": { "text": "Do not free resources using invalid pointers [MISRA2012-RULE-22_2_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not free resources using invalid pointers [MISRA2012-RULE-22_2_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-22_4", "name": "Avoid writing to a stream which has been opened as read only", "shortDescription": { "text": "Avoid writing to a stream which has been opened as read only" }, "fullDescription": { "text": "Avoid writing to a stream which has been opened as read only [MISRA2012-RULE-22_4]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid writing to a stream which has been opened as read only [MISRA2012-RULE-22_4]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-22_5_a", "name": "A pointer to a FILE object shall not be dereferenced", "shortDescription": { "text": "A pointer to a FILE object shall not be dereferenced" }, "fullDescription": { "text": "A pointer to a FILE object shall not be dereferenced [MISRA2012-RULE-22_5_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A pointer to a FILE object shall not be dereferenced [MISRA2012-RULE-22_5_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-22_5_b", "name": "A pointer to a FILE object shall not be dereferenced by a library function", "shortDescription": { "text": "A pointer to a FILE object shall not be dereferenced by a library function" }, "fullDescription": { "text": "A pointer to a FILE object shall not be dereferenced by a library function [MISRA2012-RULE-22_5_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A pointer to a FILE object shall not be dereferenced by a library function [MISRA2012-RULE-22_5_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-22_6", "name": "The value of a pointer to a FILE shall not be used after the associated stream has been closed", "shortDescription": { "text": "The value of a pointer to a FILE shall not be used after the associated stream has been closed" }, "fullDescription": { "text": "The value of a pointer to a FILE shall not be used after the associated stream has been closed [MISRA2012-RULE-22_6]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of a pointer to a FILE shall not be used after the associated stream has been closed [MISRA2012-RULE-22_6]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-9_1", "name": "Avoid use before initialization", "shortDescription": { "text": "Avoid use before initialization" }, "fullDescription": { "text": "Avoid use before initialization [MISRA2012-RULE-9_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid use before initialization [MISRA2012-RULE-9_1]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-10_1_a", "name": "An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value", "shortDescription": { "text": "An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" }, "fullDescription": { "text": "An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value [MISRA2012-RULE-10_1_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value [MISRA2012-RULE-10_1_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-10_1_b", "name": "An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value", "shortDescription": { "text": "An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" }, "fullDescription": { "text": "An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value [MISRA2012-RULE-10_1_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value [MISRA2012-RULE-10_1_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-10_1_c", "name": "An operand of essentially character type should not be used where an operand is interpreted as a numeric value", "shortDescription": { "text": "An operand of essentially character type should not be used where an operand is interpreted as a numeric value" }, "fullDescription": { "text": "An operand of essentially character type should not be used where an operand is interpreted as a numeric value [MISRA2012-RULE-10_1_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An operand of essentially character type should not be used where an operand is interpreted as a numeric value [MISRA2012-RULE-10_1_c]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-10_1_d", "name": "An operand of essentially enum type should not be used in an arithmetic operation", "shortDescription": { "text": "An operand of essentially enum type should not be used in an arithmetic operation" }, "fullDescription": { "text": "An operand of essentially enum type should not be used in an arithmetic operation [MISRA2012-RULE-10_1_d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An operand of essentially enum type should not be used in an arithmetic operation [MISRA2012-RULE-10_1_d]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-10_1_e", "name": "Shift and bitwise operations should not be performed on operands of essentially signed or enum type", "shortDescription": { "text": "Shift and bitwise operations should not be performed on operands of essentially signed or enum type" }, "fullDescription": { "text": "Shift and bitwise operations should not be performed on operands of essentially signed or enum type [MISRA2012-RULE-10_1_e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Shift and bitwise operations should not be performed on operands of essentially signed or enum type [MISRA2012-RULE-10_1_e]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-10_1_f", "name": "An operand of essentially signed or enum type should not be used as right hand side operand to the bitwise shifting operator", "shortDescription": { "text": "An operand of essentially signed or enum type should not be used as right hand side operand to the bitwise shifting operator" }, "fullDescription": { "text": "An operand of essentially signed or enum type should not be used as right hand side operand to the bitwise shifting operator [MISRA2012-RULE-10_1_f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An operand of essentially signed or enum type should not be used as right hand side operand to the bitwise shifting operator [MISRA2012-RULE-10_1_f]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-10_1_g", "name": "An operand of essentially unsigned type should not be used as the operand to the unary minus operator", "shortDescription": { "text": "An operand of essentially unsigned type should not be used as the operand to the unary minus operator" }, "fullDescription": { "text": "An operand of essentially unsigned type should not be used as the operand to the unary minus operator [MISRA2012-RULE-10_1_g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An operand of essentially unsigned type should not be used as the operand to the unary minus operator [MISRA2012-RULE-10_1_g]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-10_2", "name": "Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations", "shortDescription": { "text": "Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" }, "fullDescription": { "text": "Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations [MISRA2012-RULE-10_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations [MISRA2012-RULE-10_2]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-10_3_a", "name": "The value of an expression shall not be assigned to an object with a narrower essential type", "shortDescription": { "text": "The value of an expression shall not be assigned to an object with a narrower essential type" }, "fullDescription": { "text": "The value of an expression shall not be assigned to an object with a narrower essential type [MISRA2012-RULE-10_3_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of an expression shall not be assigned to an object with a narrower essential type [MISRA2012-RULE-10_3_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-10_3_b", "name": "The value of an expression shall not be assigned to an object of a different essential type category", "shortDescription": { "text": "The value of an expression shall not be assigned to an object of a different essential type category" }, "fullDescription": { "text": "The value of an expression shall not be assigned to an object of a different essential type category [MISRA2012-RULE-10_3_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of an expression shall not be assigned to an object of a different essential type category [MISRA2012-RULE-10_3_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-10_4_a", "name": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category", "shortDescription": { "text": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" }, "fullDescription": { "text": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category [MISRA2012-RULE-10_4_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category [MISRA2012-RULE-10_4_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-10_4_b", "name": "The second and third operands of the ternary operator shall have the same essential type category", "shortDescription": { "text": "The second and third operands of the ternary operator shall have the same essential type category" }, "fullDescription": { "text": "The second and third operands of the ternary operator shall have the same essential type category [MISRA2012-RULE-10_4_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The second and third operands of the ternary operator shall have the same essential type category [MISRA2012-RULE-10_4_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-10_6", "name": "The value of a composite expression shall not be assigned to an object with wider essential type", "shortDescription": { "text": "The value of a composite expression shall not be assigned to an object with wider essential type" }, "fullDescription": { "text": "The value of a composite expression shall not be assigned to an object with wider essential type [MISRA2012-RULE-10_6]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of a composite expression shall not be assigned to an object with wider essential type [MISRA2012-RULE-10_6]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-10_7_a", "name": "If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type", "shortDescription": { "text": "If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" }, "fullDescription": { "text": "If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type [MISRA2012-RULE-10_7_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type [MISRA2012-RULE-10_7_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-10_7_b", "name": "If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type", "shortDescription": { "text": "If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" }, "fullDescription": { "text": "If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type [MISRA2012-RULE-10_7_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type [MISRA2012-RULE-10_7_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-10_8", "name": "The value of a composite expression shall not be cast to a different essential type category or a wider essential type", "shortDescription": { "text": "The value of a composite expression shall not be cast to a different essential type category or a wider essential type" }, "fullDescription": { "text": "The value of a composite expression shall not be cast to a different essential type category or a wider essential type [MISRA2012-RULE-10_8]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of a composite expression shall not be cast to a different essential type category or a wider essential type [MISRA2012-RULE-10_8]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-11_1_a", "name": "Conversions shall not be performed between a pointer to a function and any other type", "shortDescription": { "text": "Conversions shall not be performed between a pointer to a function and any other type" }, "fullDescription": { "text": "Conversions shall not be performed between a pointer to a function and any other type [MISRA2012-RULE-11_1_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Conversions shall not be performed between a pointer to a function and any other type [MISRA2012-RULE-11_1_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-11_1_b", "name": "Conversions shall not be performed between a pointer to a function and any other type", "shortDescription": { "text": "Conversions shall not be performed between a pointer to a function and any other type" }, "fullDescription": { "text": "Conversions shall not be performed between a pointer to a function and any other type [MISRA2012-RULE-11_1_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Conversions shall not be performed between a pointer to a function and any other type [MISRA2012-RULE-11_1_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-11_2", "name": "Conversions shall not be performed between a pointer to an incomplete type and any other type", "shortDescription": { "text": "Conversions shall not be performed between a pointer to an incomplete type and any other type" }, "fullDescription": { "text": "Conversions shall not be performed between a pointer to an incomplete type and any other type [MISRA2012-RULE-11_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Conversions shall not be performed between a pointer to an incomplete type and any other type [MISRA2012-RULE-11_2]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-11_3", "name": "A cast shall not be performed between a pointer to object type and a pointer to a different object type", "shortDescription": { "text": "A cast shall not be performed between a pointer to object type and a pointer to a different object type" }, "fullDescription": { "text": "A cast shall not be performed between a pointer to object type and a pointer to a different object type [MISRA2012-RULE-11_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A cast shall not be performed between a pointer to object type and a pointer to a different object type [MISRA2012-RULE-11_3]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-11_6", "name": "A cast shall not be performed between pointer to void and an arithmetic type", "shortDescription": { "text": "A cast shall not be performed between pointer to void and an arithmetic type" }, "fullDescription": { "text": "A cast shall not be performed between pointer to void and an arithmetic type [MISRA2012-RULE-11_6]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A cast shall not be performed between pointer to void and an arithmetic type [MISRA2012-RULE-11_6]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-11_7", "name": "A cast shall not be performed between pointer to object and a non-integer arithmetic type", "shortDescription": { "text": "A cast shall not be performed between pointer to object and a non-integer arithmetic type" }, "fullDescription": { "text": "A cast shall not be performed between pointer to object and a non-integer arithmetic type [MISRA2012-RULE-11_7]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A cast shall not be performed between pointer to object and a non-integer arithmetic type [MISRA2012-RULE-11_7]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-11_8", "name": "A conversion shall not remove any 'const', 'volatile' or '_Atomic' qualification from the type accessed via a pointer or by reference", "shortDescription": { "text": "A conversion shall not remove any 'const', 'volatile' or '_Atomic' qualification from the type accessed via a pointer or by reference" }, "fullDescription": { "text": "A conversion shall not remove any 'const', 'volatile' or '_Atomic' qualification from the type accessed via a pointer or by reference [MISRA2012-RULE-11_8]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A conversion shall not remove any 'const', 'volatile' or '_Atomic' qualification from the type accessed via a pointer or by reference [MISRA2012-RULE-11_8]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-11_9_a", "name": "The macro NULL shall be the only permitted form of integer null pointer constant", "shortDescription": { "text": "The macro NULL shall be the only permitted form of integer null pointer constant" }, "fullDescription": { "text": "The macro NULL shall be the only permitted form of integer null pointer constant [MISRA2012-RULE-11_9_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The macro NULL shall be the only permitted form of integer null pointer constant [MISRA2012-RULE-11_9_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-11_9_b", "name": "The macro NULL shall be the only permitted form of integer null pointer constant", "shortDescription": { "text": "The macro NULL shall be the only permitted form of integer null pointer constant" }, "fullDescription": { "text": "The macro NULL shall be the only permitted form of integer null pointer constant [MISRA2012-RULE-11_9_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The macro NULL shall be the only permitted form of integer null pointer constant [MISRA2012-RULE-11_9_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-12_2", "name": "Avoid incorrect shift operations", "shortDescription": { "text": "Avoid incorrect shift operations" }, "fullDescription": { "text": "Avoid incorrect shift operations [MISRA2012-RULE-12_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid incorrect shift operations [MISRA2012-RULE-12_2]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-13_1_a", "name": "Initializer lists shall not contain persistent side effects", "shortDescription": { "text": "Initializer lists shall not contain persistent side effects" }, "fullDescription": { "text": "Initializer lists shall not contain persistent side effects [MISRA2012-RULE-13_1_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Initializer lists shall not contain persistent side effects [MISRA2012-RULE-13_1_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-13_2_a", "name": "The value of an expression shall be the same under any order of evaluation that the standard permits", "shortDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits" }, "fullDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [MISRA2012-RULE-13_2_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [MISRA2012-RULE-13_2_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-13_2_b", "name": "Don't write code that depends on the order of evaluation of function arguments", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function arguments" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function arguments [MISRA2012-RULE-13_2_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of function arguments [MISRA2012-RULE-13_2_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-13_2_c", "name": "Don't write code that depends on the order of evaluation of function designator and function arguments", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments [MISRA2012-RULE-13_2_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments [MISRA2012-RULE-13_2_c]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-13_2_d", "name": "Don't write code that depends on the order of evaluation of expression that involves a function call", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call [MISRA2012-RULE-13_2_d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call [MISRA2012-RULE-13_2_d]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-13_2_e", "name": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression", "shortDescription": { "text": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" }, "fullDescription": { "text": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression [MISRA2012-RULE-13_2_e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression [MISRA2012-RULE-13_2_e]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-13_2_f", "name": "Do not use more than one volatile in one expression", "shortDescription": { "text": "Do not use more than one volatile in one expression" }, "fullDescription": { "text": "Do not use more than one volatile in one expression [MISRA2012-RULE-13_2_f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use more than one volatile in one expression [MISRA2012-RULE-13_2_f]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-13_2_g", "name": "Don't write code that depends on the order of evaluation of function calls", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function calls" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function calls [MISRA2012-RULE-13_2_g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of function calls [MISRA2012-RULE-13_2_g]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-13_5", "name": "The right hand operand of a logical && or || operator shall not contain persistent side effects", "shortDescription": { "text": "The right hand operand of a logical && or || operator shall not contain persistent side effects" }, "fullDescription": { "text": "The right hand operand of a logical && or || operator shall not contain persistent side effects [MISRA2012-RULE-13_5]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The right hand operand of a logical && or || operator shall not contain persistent side effects [MISRA2012-RULE-13_5]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-13_6_a", "name": "The operand of the sizeof operator shall not contain any expression which has potential side effects", "shortDescription": { "text": "The operand of the sizeof operator shall not contain any expression which has potential side effects" }, "fullDescription": { "text": "The operand of the sizeof operator shall not contain any expression which has potential side effects [MISRA2012-RULE-13_6_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The operand of the sizeof operator shall not contain any expression which has potential side effects [MISRA2012-RULE-13_6_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-13_6_b", "name": "The operand of the sizeof operator shall not contain any expression which has potential side effects", "shortDescription": { "text": "The operand of the sizeof operator shall not contain any expression which has potential side effects" }, "fullDescription": { "text": "The operand of the sizeof operator shall not contain any expression which has potential side effects [MISRA2012-RULE-13_6_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The operand of the sizeof operator shall not contain any expression which has potential side effects [MISRA2012-RULE-13_6_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-13_6_c", "name": "The operand of the sizeof operator shall not contain any expression which has potential side effects", "shortDescription": { "text": "The operand of the sizeof operator shall not contain any expression which has potential side effects" }, "fullDescription": { "text": "The operand of the sizeof operator shall not contain any expression which has potential side effects [MISRA2012-RULE-13_6_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The operand of the sizeof operator shall not contain any expression which has potential side effects [MISRA2012-RULE-13_6_c]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-14_1_a", "name": "A loop counter in a 'for' loop shall not have essentially floating type", "shortDescription": { "text": "A loop counter in a 'for' loop shall not have essentially floating type" }, "fullDescription": { "text": "A loop counter in a 'for' loop shall not have essentially floating type [MISRA2012-RULE-14_1_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A loop counter in a 'for' loop shall not have essentially floating type [MISRA2012-RULE-14_1_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-14_1_b", "name": "A loop counter in 'while' and 'do-while' loops shall not have essentially floating type", "shortDescription": { "text": "A loop counter in 'while' and 'do-while' loops shall not have essentially floating type" }, "fullDescription": { "text": "A loop counter in 'while' and 'do-while' loops shall not have essentially floating type [MISRA2012-RULE-14_1_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A loop counter in 'while' and 'do-while' loops shall not have essentially floating type [MISRA2012-RULE-14_1_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-14_2_a", "name": "There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body", "shortDescription": { "text": "There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" }, "fullDescription": { "text": "There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body [MISRA2012-RULE-14_2_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body [MISRA2012-RULE-14_2_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-14_2_b", "name": "The first clause of a 'for' loop shall be well-formed", "shortDescription": { "text": "The first clause of a 'for' loop shall be well-formed" }, "fullDescription": { "text": "The first clause of a 'for' loop shall be well-formed [MISRA2012-RULE-14_2_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The first clause of a 'for' loop shall be well-formed [MISRA2012-RULE-14_2_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-14_2_c", "name": "The second clause of a 'for' loop shall be well-formed", "shortDescription": { "text": "The second clause of a 'for' loop shall be well-formed" }, "fullDescription": { "text": "The second clause of a 'for' loop shall be well-formed [MISRA2012-RULE-14_2_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The second clause of a 'for' loop shall be well-formed [MISRA2012-RULE-14_2_c]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-14_2_d", "name": "The third clause of a 'for' statement shall be well-formed", "shortDescription": { "text": "The third clause of a 'for' statement shall be well-formed" }, "fullDescription": { "text": "The third clause of a 'for' statement shall be well-formed [MISRA2012-RULE-14_2_d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The third clause of a 'for' statement shall be well-formed [MISRA2012-RULE-14_2_d]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-14_3_zc", "name": "Controlling expressions shall not be invariant", "shortDescription": { "text": "Controlling expressions shall not be invariant" }, "fullDescription": { "text": "Controlling expressions shall not be invariant [MISRA2012-RULE-14_3_zc]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Controlling expressions shall not be invariant [MISRA2012-RULE-14_3_zc]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-14_4", "name": "The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type", "shortDescription": { "text": "The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type" }, "fullDescription": { "text": "The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type [MISRA2012-RULE-14_4]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type [MISRA2012-RULE-14_4]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-15_2", "name": "The goto statement shall jump to a label declared later in the same function", "shortDescription": { "text": "The goto statement shall jump to a label declared later in the same function" }, "fullDescription": { "text": "The goto statement shall jump to a label declared later in the same function [MISRA2012-RULE-15_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The goto statement shall jump to a label declared later in the same function [MISRA2012-RULE-15_2]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-15_3", "name": "Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement", "shortDescription": { "text": "Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement" }, "fullDescription": { "text": "Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement [MISRA2012-RULE-15_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement [MISRA2012-RULE-15_3]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-15_6_a", "name": "The body of an iteration-statement or a selection-statement shall be a compound-statement", "shortDescription": { "text": "The body of an iteration-statement or a selection-statement shall be a compound-statement" }, "fullDescription": { "text": "The body of an iteration-statement or a selection-statement shall be a compound-statement [MISRA2012-RULE-15_6_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The body of an iteration-statement or a selection-statement shall be a compound-statement [MISRA2012-RULE-15_6_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-15_6_b", "name": "The body of an iteration-statement or a selection-statement shall be a compound-statement", "shortDescription": { "text": "The body of an iteration-statement or a selection-statement shall be a compound-statement" }, "fullDescription": { "text": "The body of an iteration-statement or a selection-statement shall be a compound-statement [MISRA2012-RULE-15_6_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The body of an iteration-statement or a selection-statement shall be a compound-statement [MISRA2012-RULE-15_6_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-15_7", "name": "All 'if ... else if' constructs shall be terminated with an 'else' statement", "shortDescription": { "text": "All 'if ... else if' constructs shall be terminated with an 'else' statement" }, "fullDescription": { "text": "All 'if ... else if' constructs shall be terminated with an 'else' statement [MISRA2012-RULE-15_7]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All 'if ... else if' constructs shall be terminated with an 'else' statement [MISRA2012-RULE-15_7]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-16_1_a", "name": "A switch statement shall only contain switch labels and switch clauses, and no other code", "shortDescription": { "text": "A switch statement shall only contain switch labels and switch clauses, and no other code" }, "fullDescription": { "text": "A switch statement shall only contain switch labels and switch clauses, and no other code [MISRA2012-RULE-16_1_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A switch statement shall only contain switch labels and switch clauses, and no other code [MISRA2012-RULE-16_1_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-16_1_b", "name": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement", "shortDescription": { "text": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" }, "fullDescription": { "text": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement [MISRA2012-RULE-16_1_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement [MISRA2012-RULE-16_1_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-16_1_c", "name": "An unconditional break statement shall terminate every non-empty case clause", "shortDescription": { "text": "An unconditional break statement shall terminate every non-empty case clause" }, "fullDescription": { "text": "An unconditional break statement shall terminate every non-empty case clause [MISRA2012-RULE-16_1_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An unconditional break statement shall terminate every non-empty case clause [MISRA2012-RULE-16_1_c]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-16_1_d", "name": "An unconditional break statement shall terminate every non-empty default clause", "shortDescription": { "text": "An unconditional break statement shall terminate every non-empty default clause" }, "fullDescription": { "text": "An unconditional break statement shall terminate every non-empty default clause [MISRA2012-RULE-16_1_d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An unconditional break statement shall terminate every non-empty default clause [MISRA2012-RULE-16_1_d]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-16_1_e", "name": "Always provide a default branch for switch statements", "shortDescription": { "text": "Always provide a default branch for switch statements" }, "fullDescription": { "text": "Always provide a default branch for switch statements [MISRA2012-RULE-16_1_e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Always provide a default branch for switch statements [MISRA2012-RULE-16_1_e]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-16_1_f", "name": "A 'default' label shall have a statement or a comment before terminating 'break'", "shortDescription": { "text": "A 'default' label shall have a statement or a comment before terminating 'break'" }, "fullDescription": { "text": "A 'default' label shall have a statement or a comment before terminating 'break' [MISRA2012-RULE-16_1_f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A 'default' label shall have a statement or a comment before terminating 'break' [MISRA2012-RULE-16_1_f]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-16_1_g", "name": "A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement", "shortDescription": { "text": "A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" }, "fullDescription": { "text": "A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement [MISRA2012-RULE-16_1_g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement [MISRA2012-RULE-16_1_g]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-16_1_h", "name": "Every switch statement shall have at least two switch-clauses", "shortDescription": { "text": "Every switch statement shall have at least two switch-clauses" }, "fullDescription": { "text": "Every switch statement shall have at least two switch-clauses [MISRA2012-RULE-16_1_h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Every switch statement shall have at least two switch-clauses [MISRA2012-RULE-16_1_h]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-16_2", "name": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement", "shortDescription": { "text": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" }, "fullDescription": { "text": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement [MISRA2012-RULE-16_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement [MISRA2012-RULE-16_2]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-16_3_a", "name": "An unconditional break statement shall terminate every switch-clause", "shortDescription": { "text": "An unconditional break statement shall terminate every switch-clause" }, "fullDescription": { "text": "An unconditional break statement shall terminate every switch-clause [MISRA2012-RULE-16_3_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An unconditional break statement shall terminate every switch-clause [MISRA2012-RULE-16_3_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-16_3_b", "name": "An unconditional break statement shall terminate every switch-clause", "shortDescription": { "text": "An unconditional break statement shall terminate every switch-clause" }, "fullDescription": { "text": "An unconditional break statement shall terminate every switch-clause [MISRA2012-RULE-16_3_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An unconditional break statement shall terminate every switch-clause [MISRA2012-RULE-16_3_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-16_4_a", "name": "Every 'switch' statement shall have a 'default' label", "shortDescription": { "text": "Every 'switch' statement shall have a 'default' label" }, "fullDescription": { "text": "Every 'switch' statement shall have a 'default' label [MISRA2012-RULE-16_4_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Every 'switch' statement shall have a 'default' label [MISRA2012-RULE-16_4_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-16_4_b", "name": "A 'default' label shall have a statement or a comment before terminating 'break'", "shortDescription": { "text": "A 'default' label shall have a statement or a comment before terminating 'break'" }, "fullDescription": { "text": "A 'default' label shall have a statement or a comment before terminating 'break' [MISRA2012-RULE-16_4_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A 'default' label shall have a statement or a comment before terminating 'break' [MISRA2012-RULE-16_4_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-16_5", "name": "A default label shall appear as either the first or the last switch label of a switch statement", "shortDescription": { "text": "A default label shall appear as either the first or the last switch label of a switch statement" }, "fullDescription": { "text": "A default label shall appear as either the first or the last switch label of a switch statement [MISRA2012-RULE-16_5]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A default label shall appear as either the first or the last switch label of a switch statement [MISRA2012-RULE-16_5]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-16_6", "name": "Every switch statement shall have at least two switch-clauses", "shortDescription": { "text": "Every switch statement shall have at least two switch-clauses" }, "fullDescription": { "text": "Every switch statement shall have at least two switch-clauses [MISRA2012-RULE-16_6]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Every switch statement shall have at least two switch-clauses [MISRA2012-RULE-16_6]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-16_7_a", "name": "A switch-expression shall not have essentially Boolean type", "shortDescription": { "text": "A switch-expression shall not have essentially Boolean type" }, "fullDescription": { "text": "A switch-expression shall not have essentially Boolean type [MISRA2012-RULE-16_7_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A switch-expression shall not have essentially Boolean type [MISRA2012-RULE-16_7_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-16_7_b", "name": "A switch-expression shall not have essentially Boolean type", "shortDescription": { "text": "A switch-expression shall not have essentially Boolean type" }, "fullDescription": { "text": "A switch-expression shall not have essentially Boolean type [MISRA2012-RULE-16_7_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A switch-expression shall not have essentially Boolean type [MISRA2012-RULE-16_7_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-17_1_a", "name": "The features of <stdarg.h> shall not be used", "shortDescription": { "text": "The features of <stdarg.h> shall not be used" }, "fullDescription": { "text": "The features of <stdarg.h> shall not be used [MISRA2012-RULE-17_1_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The features of <stdarg.h> shall not be used [MISRA2012-RULE-17_1_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-17_1_b", "name": "The features of <stdarg.h> shall not be used", "shortDescription": { "text": "The features of <stdarg.h> shall not be used" }, "fullDescription": { "text": "The features of <stdarg.h> shall not be used [MISRA2012-RULE-17_1_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The features of <stdarg.h> shall not be used [MISRA2012-RULE-17_1_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-17_2", "name": "Functions shall not call themselves, either directly or indirectly", "shortDescription": { "text": "Functions shall not call themselves, either directly or indirectly" }, "fullDescription": { "text": "Functions shall not call themselves, either directly or indirectly [MISRA2012-RULE-17_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Functions shall not call themselves, either directly or indirectly [MISRA2012-RULE-17_2]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-17_5", "name": "The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements", "shortDescription": { "text": "The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" }, "fullDescription": { "text": "The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements [MISRA2012-RULE-17_5]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements [MISRA2012-RULE-17_5]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-17_7_a", "name": "The value returned by a function having non-void return type shall be used", "shortDescription": { "text": "The value returned by a function having non-void return type shall be used" }, "fullDescription": { "text": "The value returned by a function having non-void return type shall be used [MISRA2012-RULE-17_7_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value returned by a function having non-void return type shall be used [MISRA2012-RULE-17_7_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-17_7_b", "name": "The value returned by a function having non-void return type shall be used", "shortDescription": { "text": "The value returned by a function having non-void return type shall be used" }, "fullDescription": { "text": "The value returned by a function having non-void return type shall be used [MISRA2012-RULE-17_7_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value returned by a function having non-void return type shall be used [MISRA2012-RULE-17_7_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-18_1_a", "name": "Avoid accessing arrays out of bounds", "shortDescription": { "text": "Avoid accessing arrays out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays out of bounds [MISRA2012-RULE-18_1_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays out of bounds [MISRA2012-RULE-18_1_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-18_1_b", "name": "Avoid accessing arrays and pointers out of bounds", "shortDescription": { "text": "Avoid accessing arrays and pointers out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays and pointers out of bounds [MISRA2012-RULE-18_1_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays and pointers out of bounds [MISRA2012-RULE-18_1_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-18_1_c", "name": "A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array", "shortDescription": { "text": "A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" }, "fullDescription": { "text": "A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array [MISRA2012-RULE-18_1_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array [MISRA2012-RULE-18_1_c]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-18_2", "name": "Subtraction between pointers shall only be applied to pointers that address elements of the same array", "shortDescription": { "text": "Subtraction between pointers shall only be applied to pointers that address elements of the same array" }, "fullDescription": { "text": "Subtraction between pointers shall only be applied to pointers that address elements of the same array [MISRA2012-RULE-18_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Subtraction between pointers shall only be applied to pointers that address elements of the same array [MISRA2012-RULE-18_2]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-18_3", "name": ">, >=, <, <= shall not be applied to objects of pointer type, except where they point to the same array", "shortDescription": { "text": ">, >=, <, <= shall not be applied to objects of pointer type, except where they point to the same array" }, "fullDescription": { "text": ">, >=, <, <= shall not be applied to objects of pointer type, except where they point to the same array [MISRA2012-RULE-18_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": ">, >=, <, <= shall not be applied to objects of pointer type, except where they point to the same array [MISRA2012-RULE-18_3]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-18_6_a", "name": "The address of an object with automatic storage shall not be returned from a function", "shortDescription": { "text": "The address of an object with automatic storage shall not be returned from a function" }, "fullDescription": { "text": "The address of an object with automatic storage shall not be returned from a function [MISRA2012-RULE-18_6_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The address of an object with automatic storage shall not be returned from a function [MISRA2012-RULE-18_6_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-18_6_b", "name": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist", "shortDescription": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" }, "fullDescription": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist [MISRA2012-RULE-18_6_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist [MISRA2012-RULE-18_6_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-18_7", "name": "Flexible array members shall not be declared", "shortDescription": { "text": "Flexible array members shall not be declared" }, "fullDescription": { "text": "Flexible array members shall not be declared [MISRA2012-RULE-18_7]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Flexible array members shall not be declared [MISRA2012-RULE-18_7]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-18_8", "name": "Variable-length arrays should not be used", "shortDescription": { "text": "Variable-length arrays should not be used" }, "fullDescription": { "text": "Variable-length arrays should not be used [MISRA2012-RULE-18_8]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Variable-length arrays should not be used [MISRA2012-RULE-18_8]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-1_1_a_c90", "name": "A program should not exceed the translation limits imposed by The Standard (c90)", "shortDescription": { "text": "A program should not exceed the translation limits imposed by The Standard (c90)" }, "fullDescription": { "text": "A program should not exceed the translation limits imposed by The Standard (c90) [MISRA2012-RULE-1_1_a_c90]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A program should not exceed the translation limits imposed by The Standard (c90) [MISRA2012-RULE-1_1_a_c90]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-1_1_a_c99", "name": "A program should not exceed the translation limits imposed by The Standard (c99)", "shortDescription": { "text": "A program should not exceed the translation limits imposed by The Standard (c99)" }, "fullDescription": { "text": "A program should not exceed the translation limits imposed by The Standard (c99) [MISRA2012-RULE-1_1_a_c99]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A program should not exceed the translation limits imposed by The Standard (c99) [MISRA2012-RULE-1_1_a_c99]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-1_1_b_c90", "name": "A program should not exceed the translation limits imposed by The Standard (c90)", "shortDescription": { "text": "A program should not exceed the translation limits imposed by The Standard (c90)" }, "fullDescription": { "text": "A program should not exceed the translation limits imposed by The Standard (c90) [MISRA2012-RULE-1_1_b_c90]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A program should not exceed the translation limits imposed by The Standard (c90) [MISRA2012-RULE-1_1_b_c90]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-1_1_b_c99", "name": "A program should not exceed the translation limits imposed by The Standard (c99)", "shortDescription": { "text": "A program should not exceed the translation limits imposed by The Standard (c99)" }, "fullDescription": { "text": "A program should not exceed the translation limits imposed by The Standard (c99) [MISRA2012-RULE-1_1_b_c99]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A program should not exceed the translation limits imposed by The Standard (c99) [MISRA2012-RULE-1_1_b_c99]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-1_3_a", "name": "Avoid division by zero", "shortDescription": { "text": "Avoid division by zero" }, "fullDescription": { "text": "Avoid division by zero [MISRA2012-RULE-1_3_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid division by zero [MISRA2012-RULE-1_3_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-1_3_b", "name": "Avoid use before initialization", "shortDescription": { "text": "Avoid use before initialization" }, "fullDescription": { "text": "Avoid use before initialization [MISRA2012-RULE-1_3_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid use before initialization [MISRA2012-RULE-1_3_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-1_3_c", "name": "Do not use resources that have been freed", "shortDescription": { "text": "Do not use resources that have been freed" }, "fullDescription": { "text": "Do not use resources that have been freed [MISRA2012-RULE-1_3_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use resources that have been freed [MISRA2012-RULE-1_3_c]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-1_3_d", "name": "Avoid overflow when reading from a buffer", "shortDescription": { "text": "Avoid overflow when reading from a buffer" }, "fullDescription": { "text": "Avoid overflow when reading from a buffer [MISRA2012-RULE-1_3_d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when reading from a buffer [MISRA2012-RULE-1_3_d]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-1_3_e", "name": "Avoid overflow when writing to a buffer", "shortDescription": { "text": "Avoid overflow when writing to a buffer" }, "fullDescription": { "text": "Avoid overflow when writing to a buffer [MISRA2012-RULE-1_3_e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when writing to a buffer [MISRA2012-RULE-1_3_e]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-1_3_f", "name": "The value of an expression shall be the same under any order of evaluation that the standard permits", "shortDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits" }, "fullDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [MISRA2012-RULE-1_3_f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [MISRA2012-RULE-1_3_f]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-1_3_g", "name": "Don't write code that depends on the order of evaluation of function arguments", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function arguments" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function arguments [MISRA2012-RULE-1_3_g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of function arguments [MISRA2012-RULE-1_3_g]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-1_3_h", "name": "Don't write code that depends on the order of evaluation of function designator and function arguments", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments [MISRA2012-RULE-1_3_h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments [MISRA2012-RULE-1_3_h]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-1_3_i", "name": "Don't write code that depends on the order of evaluation of expression that involves a function call", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call [MISRA2012-RULE-1_3_i]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call [MISRA2012-RULE-1_3_i]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-1_3_j", "name": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression", "shortDescription": { "text": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" }, "fullDescription": { "text": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression [MISRA2012-RULE-1_3_j]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression [MISRA2012-RULE-1_3_j]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-1_3_k", "name": "Do not use more than one volatile in one expression", "shortDescription": { "text": "Do not use more than one volatile in one expression" }, "fullDescription": { "text": "Do not use more than one volatile in one expression [MISRA2012-RULE-1_3_k]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use more than one volatile in one expression [MISRA2012-RULE-1_3_k]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-1_3_l", "name": "Don't write code that depends on the order of evaluation of function calls", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function calls" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function calls [MISRA2012-RULE-1_3_l]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of function calls [MISRA2012-RULE-1_3_l]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-1_3_m", "name": "A function shall not return a pointer or reference to a non-static local object", "shortDescription": { "text": "A function shall not return a pointer or reference to a non-static local object" }, "fullDescription": { "text": "A function shall not return a pointer or reference to a non-static local object [MISRA2012-RULE-1_3_m]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A function shall not return a pointer or reference to a non-static local object [MISRA2012-RULE-1_3_m]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-1_3_n", "name": "The address of an object with automatic storage shall not be assigned to an object which persists after the object has ceased to exist", "shortDescription": { "text": "The address of an object with automatic storage shall not be assigned to an object which persists after the object has ceased to exist" }, "fullDescription": { "text": "The address of an object with automatic storage shall not be assigned to an object which persists after the object has ceased to exist [MISRA2012-RULE-1_3_n]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The address of an object with automatic storage shall not be assigned to an object which persists after the object has ceased to exist [MISRA2012-RULE-1_3_n]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-1_3_o", "name": "The left-hand operand of a right-shift operator shall not have a negative value", "shortDescription": { "text": "The left-hand operand of a right-shift operator shall not have a negative value" }, "fullDescription": { "text": "The left-hand operand of a right-shift operator shall not have a negative value [MISRA2012-RULE-1_3_o]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The left-hand operand of a right-shift operator shall not have a negative value [MISRA2012-RULE-1_3_o]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-1_4_j", "name": "The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0'", "shortDescription": { "text": "The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0'" }, "fullDescription": { "text": "The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0' [MISRA2012-RULE-1_4_j]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0' [MISRA2012-RULE-1_4_j]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-1_4_k", "name": "The 'rsize_t' type should not be used", "shortDescription": { "text": "The 'rsize_t' type should not be used" }, "fullDescription": { "text": "The 'rsize_t' type should not be used [MISRA2012-RULE-1_4_k]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'rsize_t' type should not be used [MISRA2012-RULE-1_4_k]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-1_4_l", "name": "The 'errno_t' type should not be used", "shortDescription": { "text": "The 'errno_t' type should not be used" }, "fullDescription": { "text": "The 'errno_t' type should not be used [MISRA2012-RULE-1_4_l]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'errno_t' type should not be used [MISRA2012-RULE-1_4_l]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-1_4_m", "name": "Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S", "shortDescription": { "text": "Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S" }, "fullDescription": { "text": "Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S [MISRA2012-RULE-1_4_m]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S [MISRA2012-RULE-1_4_m]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-1_4_n", "name": "Do not use the functions defined in Annex K of ISO\/IEC 9899:2011 standard", "shortDescription": { "text": "Do not use the functions defined in Annex K of ISO\/IEC 9899:2011 standard" }, "fullDescription": { "text": "Do not use the functions defined in Annex K of ISO\/IEC 9899:2011 standard [MISRA2012-RULE-1_4_n]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use the functions defined in Annex K of ISO\/IEC 9899:2011 standard [MISRA2012-RULE-1_4_n]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-20_11", "name": "A macro parameter immediately following a # operator shall not immediately be followed by a ## operator", "shortDescription": { "text": "A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" }, "fullDescription": { "text": "A macro parameter immediately following a # operator shall not immediately be followed by a ## operator [MISRA2012-RULE-20_11]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A macro parameter immediately following a # operator shall not immediately be followed by a ## operator [MISRA2012-RULE-20_11]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-20_12", "name": "A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators", "shortDescription": { "text": "A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" }, "fullDescription": { "text": "A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators [MISRA2012-RULE-20_12]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators [MISRA2012-RULE-20_12]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-20_13", "name": "A line whose first token is # shall be a valid preprocessing directive", "shortDescription": { "text": "A line whose first token is # shall be a valid preprocessing directive" }, "fullDescription": { "text": "A line whose first token is # shall be a valid preprocessing directive [MISRA2012-RULE-20_13]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A line whose first token is # shall be a valid preprocessing directive [MISRA2012-RULE-20_13]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-20_14", "name": "All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related", "shortDescription": { "text": "All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related" }, "fullDescription": { "text": "All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related [MISRA2012-RULE-20_14]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related [MISRA2012-RULE-20_14]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-20_2_a", "name": "The ', & or \\ characters and the \/* or \/\/ character sequences shall not occur in a header file name", "shortDescription": { "text": "The ', & or \\ characters and the \/* or \/\/ character sequences shall not occur in a header file name" }, "fullDescription": { "text": "The ', & or \\ characters and the \/* or \/\/ character sequences shall not occur in a header file name [MISRA2012-RULE-20_2_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The ', & or \\ characters and the \/* or \/\/ character sequences shall not occur in a header file name [MISRA2012-RULE-20_2_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-20_2_b", "name": "The ', & or \\ characters and the \/* or \/\/ character sequences shall not occur in a header file name", "shortDescription": { "text": "The ', & or \\ characters and the \/* or \/\/ character sequences shall not occur in a header file name" }, "fullDescription": { "text": "The ', & or \\ characters and the \/* or \/\/ character sequences shall not occur in a header file name [MISRA2012-RULE-20_2_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The ', & or \\ characters and the \/* or \/\/ character sequences shall not occur in a header file name [MISRA2012-RULE-20_2_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-20_3", "name": "The #include directive shall be followed by either a <filename> or \"filename\" sequence", "shortDescription": { "text": "The #include directive shall be followed by either a <filename> or \"filename\" sequence" }, "fullDescription": { "text": "The #include directive shall be followed by either a <filename> or \"filename\" sequence [MISRA2012-RULE-20_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The #include directive shall be followed by either a <filename> or \"filename\" sequence [MISRA2012-RULE-20_3]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-20_4_a", "name": "A macro shall not be defined with the same name as a keyword", "shortDescription": { "text": "A macro shall not be defined with the same name as a keyword" }, "fullDescription": { "text": "A macro shall not be defined with the same name as a keyword [MISRA2012-RULE-20_4_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A macro shall not be defined with the same name as a keyword [MISRA2012-RULE-20_4_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-20_4_b", "name": "A macro shall not be defined with the same name as a keyword", "shortDescription": { "text": "A macro shall not be defined with the same name as a keyword" }, "fullDescription": { "text": "A macro shall not be defined with the same name as a keyword [MISRA2012-RULE-20_4_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A macro shall not be defined with the same name as a keyword [MISRA2012-RULE-20_4_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-20_6", "name": "Tokens that look like a preprocessing directive shall not occur within a macro argument", "shortDescription": { "text": "Tokens that look like a preprocessing directive shall not occur within a macro argument" }, "fullDescription": { "text": "Tokens that look like a preprocessing directive shall not occur within a macro argument [MISRA2012-RULE-20_6]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Tokens that look like a preprocessing directive shall not occur within a macro argument [MISRA2012-RULE-20_6]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-20_7", "name": "Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses", "shortDescription": { "text": "Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" }, "fullDescription": { "text": "Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses [MISRA2012-RULE-20_7]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses [MISRA2012-RULE-20_7]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-20_8", "name": "The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1", "shortDescription": { "text": "The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" }, "fullDescription": { "text": "The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1 [MISRA2012-RULE-20_8]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1 [MISRA2012-RULE-20_8]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-20_9_b", "name": "All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation", "shortDescription": { "text": "All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation" }, "fullDescription": { "text": "All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation [MISRA2012-RULE-20_9_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation [MISRA2012-RULE-20_9_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_10", "name": "The standard header file <time.h> shall not be used", "shortDescription": { "text": "The standard header file <time.h> shall not be used" }, "fullDescription": { "text": "The standard header file <time.h> shall not be used [MISRA2012-RULE-21_10]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The standard header file <time.h> shall not be used [MISRA2012-RULE-21_10]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_11", "name": "The standard header file <tgmath.h> shall not be used", "shortDescription": { "text": "The standard header file <tgmath.h> shall not be used" }, "fullDescription": { "text": "The standard header file <tgmath.h> shall not be used [MISRA2012-RULE-21_11]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The standard header file <tgmath.h> shall not be used [MISRA2012-RULE-21_11]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_12", "name": "The features provided by <fenv.h> should not be used", "shortDescription": { "text": "The features provided by <fenv.h> should not be used" }, "fullDescription": { "text": "The features provided by <fenv.h> should not be used [MISRA2012-RULE-21_12]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The features provided by <fenv.h> should not be used [MISRA2012-RULE-21_12]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_14", "name": "The Standard Library function 'memcmp' shall not be used to compare null-terminated strings", "shortDescription": { "text": "The Standard Library function 'memcmp' shall not be used to compare null-terminated strings" }, "fullDescription": { "text": "The Standard Library function 'memcmp' shall not be used to compare null-terminated strings [MISRA2012-RULE-21_14]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The Standard Library function 'memcmp' shall not be used to compare null-terminated strings [MISRA2012-RULE-21_14]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_15", "name": "The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types", "shortDescription": { "text": "The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types" }, "fullDescription": { "text": "The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types [MISRA2012-RULE-21_15]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types [MISRA2012-RULE-21_15]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_16", "name": "The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type", "shortDescription": { "text": "The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" }, "fullDescription": { "text": "The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type [MISRA2012-RULE-21_16]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type [MISRA2012-RULE-21_16]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_1_a", "name": "Do not #define or #undef identifiers with names which start with underscore", "shortDescription": { "text": "Do not #define or #undef identifiers with names which start with underscore" }, "fullDescription": { "text": "Do not #define or #undef identifiers with names which start with underscore [MISRA2012-RULE-21_1_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not #define or #undef identifiers with names which start with underscore [MISRA2012-RULE-21_1_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_1_b", "name": "#define and #undef shall not be used on a reserved identifier or reserved macro name (for C90 code)", "shortDescription": { "text": "#define and #undef shall not be used on a reserved identifier or reserved macro name (for C90 code)" }, "fullDescription": { "text": "#define and #undef shall not be used on a reserved identifier or reserved macro name (for C90 code) [MISRA2012-RULE-21_1_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "#define and #undef shall not be used on a reserved identifier or reserved macro name (for C90 code) [MISRA2012-RULE-21_1_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_1_c", "name": "#define and #undef shall not be used on a reserved identifier or reserved macro name (for C99 code)", "shortDescription": { "text": "#define and #undef shall not be used on a reserved identifier or reserved macro name (for C99 code)" }, "fullDescription": { "text": "#define and #undef shall not be used on a reserved identifier or reserved macro name (for C99 code) [MISRA2012-RULE-21_1_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "#define and #undef shall not be used on a reserved identifier or reserved macro name (for C99 code) [MISRA2012-RULE-21_1_c]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_1_d", "name": "Do not #define nor #undef identifier 'defined'", "shortDescription": { "text": "Do not #define nor #undef identifier 'defined'" }, "fullDescription": { "text": "Do not #define nor #undef identifier 'defined' [MISRA2012-RULE-21_1_d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not #define nor #undef identifier 'defined' [MISRA2012-RULE-21_1_d]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_21", "name": "The library function 'system' of <stdlib.h> shall not be used", "shortDescription": { "text": "The library function 'system' of <stdlib.h> shall not be used" }, "fullDescription": { "text": "The library function 'system' of <stdlib.h> shall not be used [MISRA2012-RULE-21_21]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The library function 'system' of <stdlib.h> shall not be used [MISRA2012-RULE-21_21]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_2_a", "name": "An identifier with name which starts with underscore shall not be declared", "shortDescription": { "text": "An identifier with name which starts with underscore shall not be declared" }, "fullDescription": { "text": "An identifier with name which starts with underscore shall not be declared [MISRA2012-RULE-21_2_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An identifier with name which starts with underscore shall not be declared [MISRA2012-RULE-21_2_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_2_b", "name": "A reserved identifier or macro name shall not be declared (for C90 code)", "shortDescription": { "text": "A reserved identifier or macro name shall not be declared (for C90 code)" }, "fullDescription": { "text": "A reserved identifier or macro name shall not be declared (for C90 code) [MISRA2012-RULE-21_2_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A reserved identifier or macro name shall not be declared (for C90 code) [MISRA2012-RULE-21_2_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_2_c", "name": "A reserved identifier or macro name shall not be declared (for C99 code)", "shortDescription": { "text": "A reserved identifier or macro name shall not be declared (for C99 code)" }, "fullDescription": { "text": "A reserved identifier or macro name shall not be declared (for C99 code) [MISRA2012-RULE-21_2_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A reserved identifier or macro name shall not be declared (for C99 code) [MISRA2012-RULE-21_2_c]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_3", "name": "The memory allocation and deallocation functions of <stdlib.h> shall not be used", "shortDescription": { "text": "The memory allocation and deallocation functions of <stdlib.h> shall not be used" }, "fullDescription": { "text": "The memory allocation and deallocation functions of <stdlib.h> shall not be used [MISRA2012-RULE-21_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The memory allocation and deallocation functions of <stdlib.h> shall not be used [MISRA2012-RULE-21_3]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_4_a", "name": "The standard header file <setjmp.h> shall not be used", "shortDescription": { "text": "The standard header file <setjmp.h> shall not be used" }, "fullDescription": { "text": "The standard header file <setjmp.h> shall not be used [MISRA2012-RULE-21_4_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The standard header file <setjmp.h> shall not be used [MISRA2012-RULE-21_4_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_4_b", "name": "The standard header file <setjmp.h> shall not be used", "shortDescription": { "text": "The standard header file <setjmp.h> shall not be used" }, "fullDescription": { "text": "The standard header file <setjmp.h> shall not be used [MISRA2012-RULE-21_4_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The standard header file <setjmp.h> shall not be used [MISRA2012-RULE-21_4_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_5_a", "name": "The standard header file <signal.h> shall not be used", "shortDescription": { "text": "The standard header file <signal.h> shall not be used" }, "fullDescription": { "text": "The standard header file <signal.h> shall not be used [MISRA2012-RULE-21_5_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The standard header file <signal.h> shall not be used [MISRA2012-RULE-21_5_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_5_b", "name": "The standard header file <signal.h> shall not be used", "shortDescription": { "text": "The standard header file <signal.h> shall not be used" }, "fullDescription": { "text": "The standard header file <signal.h> shall not be used [MISRA2012-RULE-21_5_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The standard header file <signal.h> shall not be used [MISRA2012-RULE-21_5_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_6", "name": "The Standard Library input\/output functions shall not be used", "shortDescription": { "text": "The Standard Library input\/output functions shall not be used" }, "fullDescription": { "text": "The Standard Library input\/output functions shall not be used [MISRA2012-RULE-21_6]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The Standard Library input\/output functions shall not be used [MISRA2012-RULE-21_6]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_7", "name": "The atof, atoi, atol and atoll functions of <stdlib.h> shall not be used", "shortDescription": { "text": "The atof, atoi, atol and atoll functions of <stdlib.h> shall not be used" }, "fullDescription": { "text": "The atof, atoi, atol and atoll functions of <stdlib.h> shall not be used [MISRA2012-RULE-21_7]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The atof, atoi, atol and atoll functions of <stdlib.h> shall not be used [MISRA2012-RULE-21_7]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_8", "name": "The library function 'abort' of <stdlib.h> shall not be used", "shortDescription": { "text": "The library function 'abort' of <stdlib.h> shall not be used" }, "fullDescription": { "text": "The library function 'abort' of <stdlib.h> shall not be used [MISRA2012-RULE-21_8]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The library function 'abort' of <stdlib.h> shall not be used [MISRA2012-RULE-21_8]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_8_b", "name": "The library function 'exit' of <stdlib.h> shall not be used", "shortDescription": { "text": "The library function 'exit' of <stdlib.h> shall not be used" }, "fullDescription": { "text": "The library function 'exit' of <stdlib.h> shall not be used [MISRA2012-RULE-21_8_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The library function 'exit' of <stdlib.h> shall not be used [MISRA2012-RULE-21_8_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_8_c", "name": "The library functions 'quick_exit' and '_Exit' of <stdlib.h> shall not be used", "shortDescription": { "text": "The library functions 'quick_exit' and '_Exit' of <stdlib.h> shall not be used" }, "fullDescription": { "text": "The library functions 'quick_exit' and '_Exit' of <stdlib.h> shall not be used [MISRA2012-RULE-21_8_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The library functions 'quick_exit' and '_Exit' of <stdlib.h> shall not be used [MISRA2012-RULE-21_8_c]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_9", "name": "The library functions bsearch and qsort of <stdlib.h> shall not be used", "shortDescription": { "text": "The library functions bsearch and qsort of <stdlib.h> shall not be used" }, "fullDescription": { "text": "The library functions bsearch and qsort of <stdlib.h> shall not be used [MISRA2012-RULE-21_9]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The library functions bsearch and qsort of <stdlib.h> shall not be used [MISRA2012-RULE-21_9]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-22_1", "name": "All resources obtained dynamically by means of Standard Library functions shall be explicitly released", "shortDescription": { "text": "All resources obtained dynamically by means of Standard Library functions shall be explicitly released" }, "fullDescription": { "text": "All resources obtained dynamically by means of Standard Library functions shall be explicitly released [MISRA2012-RULE-22_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All resources obtained dynamically by means of Standard Library functions shall be explicitly released [MISRA2012-RULE-22_1]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-22_10", "name": "The value of 'errno' shall only be tested when the last function to be called was an errno-setting-function", "shortDescription": { "text": "The value of 'errno' shall only be tested when the last function to be called was an errno-setting-function" }, "fullDescription": { "text": "The value of 'errno' shall only be tested when the last function to be called was an errno-setting-function [MISRA2012-RULE-22_10]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of 'errno' shall only be tested when the last function to be called was an errno-setting-function [MISRA2012-RULE-22_10]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-22_3", "name": "The same file shall not be opened for read and write access at the same time on different stream", "shortDescription": { "text": "The same file shall not be opened for read and write access at the same time on different stream" }, "fullDescription": { "text": "The same file shall not be opened for read and write access at the same time on different stream [MISRA2012-RULE-22_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The same file shall not be opened for read and write access at the same time on different stream [MISRA2012-RULE-22_3]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-22_7", "name": "The macro 'EOF' should be compared with the unmodified return value from the Standard Library function", "shortDescription": { "text": "The macro 'EOF' should be compared with the unmodified return value from the Standard Library function" }, "fullDescription": { "text": "The macro 'EOF' should be compared with the unmodified return value from the Standard Library function [MISRA2012-RULE-22_7]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The macro 'EOF' should be compared with the unmodified return value from the Standard Library function [MISRA2012-RULE-22_7]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-22_8", "name": "The value of 'errno' shall be set to zero prior to a call to an errno-setting-function", "shortDescription": { "text": "The value of 'errno' shall be set to zero prior to a call to an errno-setting-function" }, "fullDescription": { "text": "The value of 'errno' shall be set to zero prior to a call to an errno-setting-function [MISRA2012-RULE-22_8]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of 'errno' shall be set to zero prior to a call to an errno-setting-function [MISRA2012-RULE-22_8]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-22_9", "name": "The value of 'errno' shall be tested against zero after calling an errno-setting-function", "shortDescription": { "text": "The value of 'errno' shall be tested against zero after calling an errno-setting-function" }, "fullDescription": { "text": "The value of 'errno' shall be tested against zero after calling an errno-setting-function [MISRA2012-RULE-22_9]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of 'errno' shall be tested against zero after calling an errno-setting-function [MISRA2012-RULE-22_9]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-2_1_a", "name": "There shall be no unreachable code in 'else' block", "shortDescription": { "text": "There shall be no unreachable code in 'else' block" }, "fullDescription": { "text": "There shall be no unreachable code in 'else' block [MISRA2012-RULE-2_1_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code in 'else' block [MISRA2012-RULE-2_1_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-2_1_b", "name": "There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements", "shortDescription": { "text": "There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" }, "fullDescription": { "text": "There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements [MISRA2012-RULE-2_1_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements [MISRA2012-RULE-2_1_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-2_1_c", "name": "There shall be no unreachable code in 'if', 'else', 'while', 'for' block", "shortDescription": { "text": "There shall be no unreachable code in 'if', 'else', 'while', 'for' block" }, "fullDescription": { "text": "There shall be no unreachable code in 'if', 'else', 'while', 'for' block [MISRA2012-RULE-2_1_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code in 'if', 'else', 'while', 'for' block [MISRA2012-RULE-2_1_c]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-2_1_d", "name": "There shall be no unreachable code in 'switch' statement", "shortDescription": { "text": "There shall be no unreachable code in 'switch' statement" }, "fullDescription": { "text": "There shall be no unreachable code in 'switch' statement [MISRA2012-RULE-2_1_d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code in 'switch' statement [MISRA2012-RULE-2_1_d]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-2_1_e", "name": "There shall be no unreachable code in 'for' loop", "shortDescription": { "text": "There shall be no unreachable code in 'for' loop" }, "fullDescription": { "text": "There shall be no unreachable code in 'for' loop [MISRA2012-RULE-2_1_e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code in 'for' loop [MISRA2012-RULE-2_1_e]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-2_1_f", "name": "There shall be no unreachable code after 'if' or 'switch' statement", "shortDescription": { "text": "There shall be no unreachable code after 'if' or 'switch' statement" }, "fullDescription": { "text": "There shall be no unreachable code after 'if' or 'switch' statement [MISRA2012-RULE-2_1_f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code after 'if' or 'switch' statement [MISRA2012-RULE-2_1_f]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-2_1_g", "name": "There shall be no unreachable code after 'if' or 'switch' statement inside 'while'\/'for'\/'do...while' loop", "shortDescription": { "text": "There shall be no unreachable code after 'if' or 'switch' statement inside 'while'\/'for'\/'do...while' loop" }, "fullDescription": { "text": "There shall be no unreachable code after 'if' or 'switch' statement inside 'while'\/'for'\/'do...while' loop [MISRA2012-RULE-2_1_g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code after 'if' or 'switch' statement inside 'while'\/'for'\/'do...while' loop [MISRA2012-RULE-2_1_g]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-2_2_a", "name": "All non-null statements shall either have at least one side-effect however executed or cause control flow to change", "shortDescription": { "text": "All non-null statements shall either have at least one side-effect however executed or cause control flow to change" }, "fullDescription": { "text": "All non-null statements shall either have at least one side-effect however executed or cause control flow to change [MISRA2012-RULE-2_2_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All non-null statements shall either have at least one side-effect however executed or cause control flow to change [MISRA2012-RULE-2_2_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-2_2_b", "name": "Avoid unused values", "shortDescription": { "text": "Avoid unused values" }, "fullDescription": { "text": "Avoid unused values [MISRA2012-RULE-2_2_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid unused values [MISRA2012-RULE-2_2_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-3_1_a", "name": "The character sequence \/* shall not be used within a C-style comment", "shortDescription": { "text": "The character sequence \/* shall not be used within a C-style comment" }, "fullDescription": { "text": "The character sequence \/* shall not be used within a C-style comment [MISRA2012-RULE-3_1_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The character sequence \/* shall not be used within a C-style comment [MISRA2012-RULE-3_1_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-3_1_b", "name": "The character sequence \/\/ shall not be used within a C-style comment", "shortDescription": { "text": "The character sequence \/\/ shall not be used within a C-style comment" }, "fullDescription": { "text": "The character sequence \/\/ shall not be used within a C-style comment [MISRA2012-RULE-3_1_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The character sequence \/\/ shall not be used within a C-style comment [MISRA2012-RULE-3_1_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-3_1_c", "name": "The character sequence \/* shall not be used within a C++-style comment", "shortDescription": { "text": "The character sequence \/* shall not be used within a C++-style comment" }, "fullDescription": { "text": "The character sequence \/* shall not be used within a C++-style comment [MISRA2012-RULE-3_1_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The character sequence \/* shall not be used within a C++-style comment [MISRA2012-RULE-3_1_c]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-3_2", "name": "Line-splicing shall not be used in \/\/ comments", "shortDescription": { "text": "Line-splicing shall not be used in \/\/ comments" }, "fullDescription": { "text": "Line-splicing shall not be used in \/\/ comments [MISRA2012-RULE-3_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Line-splicing shall not be used in \/\/ comments [MISRA2012-RULE-3_2]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-4_1", "name": "Octal and hexadecimal escape sequences shall be terminated", "shortDescription": { "text": "Octal and hexadecimal escape sequences shall be terminated" }, "fullDescription": { "text": "Octal and hexadecimal escape sequences shall be terminated [MISRA2012-RULE-4_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Octal and hexadecimal escape sequences shall be terminated [MISRA2012-RULE-4_1]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-5_1", "name": "External identifiers shall be distinct", "shortDescription": { "text": "External identifiers shall be distinct" }, "fullDescription": { "text": "External identifiers shall be distinct [MISRA2012-RULE-5_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "External identifiers shall be distinct [MISRA2012-RULE-5_1]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-5_2_a_c90", "name": "Identifiers declared in the file scope and in the same name space shall be distinct (c90)", "shortDescription": { "text": "Identifiers declared in the file scope and in the same name space shall be distinct (c90)" }, "fullDescription": { "text": "Identifiers declared in the file scope and in the same name space shall be distinct (c90) [MISRA2012-RULE-5_2_a_c90]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers declared in the file scope and in the same name space shall be distinct (c90) [MISRA2012-RULE-5_2_a_c90]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-5_2_a_c99", "name": "Identifiers declared in the file scope and in the same name space shall be distinct (c99)", "shortDescription": { "text": "Identifiers declared in the file scope and in the same name space shall be distinct (c99)" }, "fullDescription": { "text": "Identifiers declared in the file scope and in the same name space shall be distinct (c99) [MISRA2012-RULE-5_2_a_c99]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers declared in the file scope and in the same name space shall be distinct (c99) [MISRA2012-RULE-5_2_a_c99]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-5_2_b_c90", "name": "Identifiers declared in the same block scope and name space shall be distinct (c90)", "shortDescription": { "text": "Identifiers declared in the same block scope and name space shall be distinct (c90)" }, "fullDescription": { "text": "Identifiers declared in the same block scope and name space shall be distinct (c90) [MISRA2012-RULE-5_2_b_c90]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers declared in the same block scope and name space shall be distinct (c90) [MISRA2012-RULE-5_2_b_c90]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-5_2_b_c99", "name": "Identifiers declared in the same block scope and name space shall be distinct (c99)", "shortDescription": { "text": "Identifiers declared in the same block scope and name space shall be distinct (c99)" }, "fullDescription": { "text": "Identifiers declared in the same block scope and name space shall be distinct (c99) [MISRA2012-RULE-5_2_b_c99]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers declared in the same block scope and name space shall be distinct (c99) [MISRA2012-RULE-5_2_b_c99]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-5_3_a", "name": "An identifier declared in an inner scope shall not hide an identifier declared in an outer scope", "shortDescription": { "text": "An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" }, "fullDescription": { "text": "An identifier declared in an inner scope shall not hide an identifier declared in an outer scope [MISRA2012-RULE-5_3_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An identifier declared in an inner scope shall not hide an identifier declared in an outer scope [MISRA2012-RULE-5_3_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-5_3_b", "name": "An identifier declared in an inner scope shall not hide an identifier declared in an outer scope", "shortDescription": { "text": "An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" }, "fullDescription": { "text": "An identifier declared in an inner scope shall not hide an identifier declared in an outer scope [MISRA2012-RULE-5_3_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An identifier declared in an inner scope shall not hide an identifier declared in an outer scope [MISRA2012-RULE-5_3_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-5_4_a_c90", "name": "The name of a macro should be distinct from the names of its parameters(c90)", "shortDescription": { "text": "The name of a macro should be distinct from the names of its parameters(c90)" }, "fullDescription": { "text": "The name of a macro should be distinct from the names of its parameters(c90) [MISRA2012-RULE-5_4_a_c90]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The name of a macro should be distinct from the names of its parameters(c90) [MISRA2012-RULE-5_4_a_c90]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-5_4_a_c99", "name": "The name of a macro should be distinct from the names of its parameters(c99)", "shortDescription": { "text": "The name of a macro should be distinct from the names of its parameters(c99)" }, "fullDescription": { "text": "The name of a macro should be distinct from the names of its parameters(c99) [MISRA2012-RULE-5_4_a_c99]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The name of a macro should be distinct from the names of its parameters(c99) [MISRA2012-RULE-5_4_a_c99]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-5_4_b_c90", "name": "The name of a macro should be distinct from the names of other macros that are currently defined(c90)", "shortDescription": { "text": "The name of a macro should be distinct from the names of other macros that are currently defined(c90)" }, "fullDescription": { "text": "The name of a macro should be distinct from the names of other macros that are currently defined(c90) [MISRA2012-RULE-5_4_b_c90]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The name of a macro should be distinct from the names of other macros that are currently defined(c90) [MISRA2012-RULE-5_4_b_c90]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-5_4_b_c99", "name": "The name of a macro should be distinct from the names of other macros that are currently defined(c99)", "shortDescription": { "text": "The name of a macro should be distinct from the names of other macros that are currently defined(c99)" }, "fullDescription": { "text": "The name of a macro should be distinct from the names of other macros that are currently defined(c99) [MISRA2012-RULE-5_4_b_c99]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The name of a macro should be distinct from the names of other macros that are currently defined(c99) [MISRA2012-RULE-5_4_b_c99]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-5_5_c90", "name": "Identifiers shall be distinct from macro names (c90)", "shortDescription": { "text": "Identifiers shall be distinct from macro names (c90)" }, "fullDescription": { "text": "Identifiers shall be distinct from macro names (c90) [MISRA2012-RULE-5_5_c90]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers shall be distinct from macro names (c90) [MISRA2012-RULE-5_5_c90]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-5_5_c99", "name": "Identifiers shall be distinct from macro names (c99)", "shortDescription": { "text": "Identifiers shall be distinct from macro names (c99)" }, "fullDescription": { "text": "Identifiers shall be distinct from macro names (c99) [MISRA2012-RULE-5_5_c99]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers shall be distinct from macro names (c99) [MISRA2012-RULE-5_5_c99]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-5_6_a", "name": "A typedef name shall be a unique identifier", "shortDescription": { "text": "A typedef name shall be a unique identifier" }, "fullDescription": { "text": "A typedef name shall be a unique identifier [MISRA2012-RULE-5_6_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A typedef name shall be a unique identifier [MISRA2012-RULE-5_6_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-5_7_a", "name": "A tag name shall be a unique identifier", "shortDescription": { "text": "A tag name shall be a unique identifier" }, "fullDescription": { "text": "A tag name shall be a unique identifier [MISRA2012-RULE-5_7_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A tag name shall be a unique identifier [MISRA2012-RULE-5_7_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-5_8", "name": "Identifiers that define objects with external linkage shall be unique", "shortDescription": { "text": "Identifiers that define objects with external linkage shall be unique" }, "fullDescription": { "text": "Identifiers that define objects with external linkage shall be unique [MISRA2012-RULE-5_8]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers that define objects with external linkage shall be unique [MISRA2012-RULE-5_8]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-6_1", "name": "Bit-fields shall only be declared with an appropriate type", "shortDescription": { "text": "Bit-fields shall only be declared with an appropriate type" }, "fullDescription": { "text": "Bit-fields shall only be declared with an appropriate type [MISRA2012-RULE-6_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Bit-fields shall only be declared with an appropriate type [MISRA2012-RULE-6_1]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-6_2", "name": "Single-bit named bit fields shall not be of a signed type", "shortDescription": { "text": "Single-bit named bit fields shall not be of a signed type" }, "fullDescription": { "text": "Single-bit named bit fields shall not be of a signed type [MISRA2012-RULE-6_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Single-bit named bit fields shall not be of a signed type [MISRA2012-RULE-6_2]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-7_1", "name": "Octal constants shall not be used", "shortDescription": { "text": "Octal constants shall not be used" }, "fullDescription": { "text": "Octal constants shall not be used [MISRA2012-RULE-7_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Octal constants shall not be used [MISRA2012-RULE-7_1]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-7_2", "name": "A 'u' or 'U' suffix shall be applied to all integer constants that are represented in an unsigned type", "shortDescription": { "text": "A 'u' or 'U' suffix shall be applied to all integer constants that are represented in an unsigned type" }, "fullDescription": { "text": "A 'u' or 'U' suffix shall be applied to all integer constants that are represented in an unsigned type [MISRA2012-RULE-7_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A 'u' or 'U' suffix shall be applied to all integer constants that are represented in an unsigned type [MISRA2012-RULE-7_2]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-7_3", "name": "The lowercase character 'l' shall not be used in a literal suffix", "shortDescription": { "text": "The lowercase character 'l' shall not be used in a literal suffix" }, "fullDescription": { "text": "The lowercase character 'l' shall not be used in a literal suffix [MISRA2012-RULE-7_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The lowercase character 'l' shall not be used in a literal suffix [MISRA2012-RULE-7_3]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-7_4", "name": "A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char", "shortDescription": { "text": "A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" }, "fullDescription": { "text": "A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char [MISRA2012-RULE-7_4]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char [MISRA2012-RULE-7_4]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-8_10", "name": "An inline function shall be declared with the static storage class", "shortDescription": { "text": "An inline function shall be declared with the static storage class" }, "fullDescription": { "text": "An inline function shall be declared with the static storage class [MISRA2012-RULE-8_10]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An inline function shall be declared with the static storage class [MISRA2012-RULE-8_10]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-8_12", "name": "Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique", "shortDescription": { "text": "Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" }, "fullDescription": { "text": "Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique [MISRA2012-RULE-8_12]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique [MISRA2012-RULE-8_12]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-8_14", "name": "The restrict type qualifier shall not be used", "shortDescription": { "text": "The restrict type qualifier shall not be used" }, "fullDescription": { "text": "The restrict type qualifier shall not be used [MISRA2012-RULE-8_14]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The restrict type qualifier shall not be used [MISRA2012-RULE-8_14]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-8_1_a", "name": "Whenever a function is declared or defined, its type shall be explicitly stated", "shortDescription": { "text": "Whenever a function is declared or defined, its type shall be explicitly stated" }, "fullDescription": { "text": "Whenever a function is declared or defined, its type shall be explicitly stated [MISRA2012-RULE-8_1_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Whenever a function is declared or defined, its type shall be explicitly stated [MISRA2012-RULE-8_1_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-8_1_b", "name": "Whenever an object is declared or defined, its type shall be explicitly stated", "shortDescription": { "text": "Whenever an object is declared or defined, its type shall be explicitly stated" }, "fullDescription": { "text": "Whenever an object is declared or defined, its type shall be explicitly stated [MISRA2012-RULE-8_1_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Whenever an object is declared or defined, its type shall be explicitly stated [MISRA2012-RULE-8_1_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-8_2_a", "name": "Identifiers shall be given for all of the parameters in a function prototype declaration", "shortDescription": { "text": "Identifiers shall be given for all of the parameters in a function prototype declaration" }, "fullDescription": { "text": "Identifiers shall be given for all of the parameters in a function prototype declaration [MISRA2012-RULE-8_2_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers shall be given for all of the parameters in a function prototype declaration [MISRA2012-RULE-8_2_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-8_2_b", "name": "Function types shall have named parameters", "shortDescription": { "text": "Function types shall have named parameters" }, "fullDescription": { "text": "Function types shall have named parameters [MISRA2012-RULE-8_2_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Function types shall have named parameters [MISRA2012-RULE-8_2_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-8_2_c", "name": "Function types shall be in prototype form", "shortDescription": { "text": "Function types shall be in prototype form" }, "fullDescription": { "text": "Function types shall be in prototype form [MISRA2012-RULE-8_2_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Function types shall be in prototype form [MISRA2012-RULE-8_2_c]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-8_3_a", "name": "If objects or functions are declared more than once their types shall be compatible", "shortDescription": { "text": "If objects or functions are declared more than once their types shall be compatible" }, "fullDescription": { "text": "If objects or functions are declared more than once their types shall be compatible [MISRA2012-RULE-8_3_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If objects or functions are declared more than once their types shall be compatible [MISRA2012-RULE-8_3_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-8_3_b", "name": "The identifiers used in the declaration and definition of a function shall be identical", "shortDescription": { "text": "The identifiers used in the declaration and definition of a function shall be identical" }, "fullDescription": { "text": "The identifiers used in the declaration and definition of a function shall be identical [MISRA2012-RULE-8_3_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The identifiers used in the declaration and definition of a function shall be identical [MISRA2012-RULE-8_3_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-8_3_c", "name": "All declarations of an object or function shall have compatible types", "shortDescription": { "text": "All declarations of an object or function shall have compatible types" }, "fullDescription": { "text": "All declarations of an object or function shall have compatible types [MISRA2012-RULE-8_3_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All declarations of an object or function shall have compatible types [MISRA2012-RULE-8_3_c]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-8_4_a", "name": "A compatible declaration shall be visible when an object or function with external linkage is defined", "shortDescription": { "text": "A compatible declaration shall be visible when an object or function with external linkage is defined" }, "fullDescription": { "text": "A compatible declaration shall be visible when an object or function with external linkage is defined [MISRA2012-RULE-8_4_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A compatible declaration shall be visible when an object or function with external linkage is defined [MISRA2012-RULE-8_4_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-8_4_b", "name": "A compatible declaration shall be visible when an object or function with external linkage is defined", "shortDescription": { "text": "A compatible declaration shall be visible when an object or function with external linkage is defined" }, "fullDescription": { "text": "A compatible declaration shall be visible when an object or function with external linkage is defined [MISRA2012-RULE-8_4_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A compatible declaration shall be visible when an object or function with external linkage is defined [MISRA2012-RULE-8_4_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-8_5", "name": "An external object or function shall not have more than one non-defining declaration in translation unit", "shortDescription": { "text": "An external object or function shall not have more than one non-defining declaration in translation unit" }, "fullDescription": { "text": "An external object or function shall not have more than one non-defining declaration in translation unit [MISRA2012-RULE-8_5]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An external object or function shall not have more than one non-defining declaration in translation unit [MISRA2012-RULE-8_5]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-8_6", "name": "An identifier with external linkage shall have exactly one external definition", "shortDescription": { "text": "An identifier with external linkage shall have exactly one external definition" }, "fullDescription": { "text": "An identifier with external linkage shall have exactly one external definition [MISRA2012-RULE-8_6]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An identifier with external linkage shall have exactly one external definition [MISRA2012-RULE-8_6]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-8_8", "name": "The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage", "shortDescription": { "text": "The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage" }, "fullDescription": { "text": "The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage [MISRA2012-RULE-8_8]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage [MISRA2012-RULE-8_8]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-9_2", "name": "The initializer for an aggregate or union shall be enclosed in braces", "shortDescription": { "text": "The initializer for an aggregate or union shall be enclosed in braces" }, "fullDescription": { "text": "The initializer for an aggregate or union shall be enclosed in braces [MISRA2012-RULE-9_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The initializer for an aggregate or union shall be enclosed in braces [MISRA2012-RULE-9_2]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-9_3", "name": "Arrays shall not be partially initialized", "shortDescription": { "text": "Arrays shall not be partially initialized" }, "fullDescription": { "text": "Arrays shall not be partially initialized [MISRA2012-RULE-9_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Arrays shall not be partially initialized [MISRA2012-RULE-9_3]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-9_4", "name": "An element of an object shall not be initialized more than once", "shortDescription": { "text": "An element of an object shall not be initialized more than once" }, "fullDescription": { "text": "An element of an object shall not be initialized more than once [MISRA2012-RULE-9_4]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An element of an object shall not be initialized more than once [MISRA2012-RULE-9_4]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-9_5", "name": "Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly", "shortDescription": { "text": "Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" }, "fullDescription": { "text": "Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly [MISRA2012-RULE-9_5]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly [MISRA2012-RULE-9_5]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-10_5_a", "name": "The cast operation to essentially enumeration type is not allowed", "shortDescription": { "text": "The cast operation to essentially enumeration type is not allowed" }, "fullDescription": { "text": "The cast operation to essentially enumeration type is not allowed [MISRA2012-RULE-10_5_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The cast operation to essentially enumeration type is not allowed [MISRA2012-RULE-10_5_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-10_5_b", "name": "Do not cast from or to essentially Boolean type", "shortDescription": { "text": "Do not cast from or to essentially Boolean type" }, "fullDescription": { "text": "Do not cast from or to essentially Boolean type [MISRA2012-RULE-10_5_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not cast from or to essentially Boolean type [MISRA2012-RULE-10_5_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-10_5_c", "name": "Do not use casts between essentially character types and essentially floating types", "shortDescription": { "text": "Do not use casts between essentially character types and essentially floating types" }, "fullDescription": { "text": "Do not use casts between essentially character types and essentially floating types [MISRA2012-RULE-10_5_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use casts between essentially character types and essentially floating types [MISRA2012-RULE-10_5_c]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-11_4", "name": "A conversion should not be performed between a pointer to object and an integer type", "shortDescription": { "text": "A conversion should not be performed between a pointer to object and an integer type" }, "fullDescription": { "text": "A conversion should not be performed between a pointer to object and an integer type [MISRA2012-RULE-11_4]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A conversion should not be performed between a pointer to object and an integer type [MISRA2012-RULE-11_4]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-11_5", "name": "A conversion should not be performed from pointer to void into pointer to object", "shortDescription": { "text": "A conversion should not be performed from pointer to void into pointer to object" }, "fullDescription": { "text": "A conversion should not be performed from pointer to void into pointer to object [MISRA2012-RULE-11_5]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A conversion should not be performed from pointer to void into pointer to object [MISRA2012-RULE-11_5]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-12_1_a", "name": "Use parentheses to indicate the precedence of operators in expressions", "shortDescription": { "text": "Use parentheses to indicate the precedence of operators in expressions" }, "fullDescription": { "text": "Use parentheses to indicate the precedence of operators in expressions [MISRA2012-RULE-12_1_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use parentheses to indicate the precedence of operators in expressions [MISRA2012-RULE-12_1_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-12_1_c", "name": "Parenthesis shall be used with 'sizeof' statement", "shortDescription": { "text": "Parenthesis shall be used with 'sizeof' statement" }, "fullDescription": { "text": "Parenthesis shall be used with 'sizeof' statement [MISRA2012-RULE-12_1_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Parenthesis shall be used with 'sizeof' statement [MISRA2012-RULE-12_1_c]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-12_3", "name": "The comma operator should not be used", "shortDescription": { "text": "The comma operator should not be used" }, "fullDescription": { "text": "The comma operator should not be used [MISRA2012-RULE-12_3]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The comma operator should not be used [MISRA2012-RULE-12_3]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-12_4_a", "name": "Integer overflow or underflow in constant expression in '+', '-', '*' operator", "shortDescription": { "text": "Integer overflow or underflow in constant expression in '+', '-', '*' operator" }, "fullDescription": { "text": "Integer overflow or underflow in constant expression in '+', '-', '*' operator [MISRA2012-RULE-12_4_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Integer overflow or underflow in constant expression in '+', '-', '*' operator [MISRA2012-RULE-12_4_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-12_4_b", "name": "Integer overflow or underflow in constant expression in '<<' operator", "shortDescription": { "text": "Integer overflow or underflow in constant expression in '<<' operator" }, "fullDescription": { "text": "Integer overflow or underflow in constant expression in '<<' operator [MISRA2012-RULE-12_4_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Integer overflow or underflow in constant expression in '<<' operator [MISRA2012-RULE-12_4_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-13_3", "name": "A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator", "shortDescription": { "text": "A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator" }, "fullDescription": { "text": "A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator [MISRA2012-RULE-13_3]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator [MISRA2012-RULE-13_3]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-13_4", "name": "The result of an assignment operator should not be used", "shortDescription": { "text": "The result of an assignment operator should not be used" }, "fullDescription": { "text": "The result of an assignment operator should not be used [MISRA2012-RULE-13_4]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The result of an assignment operator should not be used [MISRA2012-RULE-13_4]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-15_1", "name": "The goto statement should not be used", "shortDescription": { "text": "The goto statement should not be used" }, "fullDescription": { "text": "The goto statement should not be used [MISRA2012-RULE-15_1]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The goto statement should not be used [MISRA2012-RULE-15_1]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-15_4", "name": "There should be no more than one break or goto statement used to terminate any iteration statement", "shortDescription": { "text": "There should be no more than one break or goto statement used to terminate any iteration statement" }, "fullDescription": { "text": "There should be no more than one break or goto statement used to terminate any iteration statement [MISRA2012-RULE-15_4]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There should be no more than one break or goto statement used to terminate any iteration statement [MISRA2012-RULE-15_4]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-15_5", "name": "A function should have a single point of exit at the end", "shortDescription": { "text": "A function should have a single point of exit at the end" }, "fullDescription": { "text": "A function should have a single point of exit at the end [MISRA2012-RULE-15_5]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function should have a single point of exit at the end [MISRA2012-RULE-15_5]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-17_8", "name": "A function parameter should not be modified", "shortDescription": { "text": "A function parameter should not be modified" }, "fullDescription": { "text": "A function parameter should not be modified [MISRA2012-RULE-17_8]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function parameter should not be modified [MISRA2012-RULE-17_8]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-18_4", "name": "The +, -, += and -= operators should not be applied to an expression of pointer type", "shortDescription": { "text": "The +, -, += and -= operators should not be applied to an expression of pointer type" }, "fullDescription": { "text": "The +, -, += and -= operators should not be applied to an expression of pointer type [MISRA2012-RULE-18_4]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The +, -, += and -= operators should not be applied to an expression of pointer type [MISRA2012-RULE-18_4]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-18_5", "name": "Declarations should contain no more than two levels of pointer nesting", "shortDescription": { "text": "Declarations should contain no more than two levels of pointer nesting" }, "fullDescription": { "text": "Declarations should contain no more than two levels of pointer nesting [MISRA2012-RULE-18_5]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declarations should contain no more than two levels of pointer nesting [MISRA2012-RULE-18_5]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-19_2", "name": "The union keyword should not be used", "shortDescription": { "text": "The union keyword should not be used" }, "fullDescription": { "text": "The union keyword should not be used [MISRA2012-RULE-19_2]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The union keyword should not be used [MISRA2012-RULE-19_2]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-20_1", "name": "#include directives should only be preceded by preprocessor directives or comments", "shortDescription": { "text": "#include directives should only be preceded by preprocessor directives or comments" }, "fullDescription": { "text": "#include directives should only be preceded by preprocessor directives or comments [MISRA2012-RULE-20_1]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "#include directives should only be preceded by preprocessor directives or comments [MISRA2012-RULE-20_1]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-20_10", "name": "The # and ## preprocessor operators should not be used", "shortDescription": { "text": "The # and ## preprocessor operators should not be used" }, "fullDescription": { "text": "The # and ## preprocessor operators should not be used [MISRA2012-RULE-20_10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The # and ## preprocessor operators should not be used [MISRA2012-RULE-20_10]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-20_5", "name": "#undef should not be used", "shortDescription": { "text": "#undef should not be used" }, "fullDescription": { "text": "#undef should not be used [MISRA2012-RULE-20_5]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "#undef should not be used [MISRA2012-RULE-20_5]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-2_3_a", "name": "A function should not contain unused type declarations", "shortDescription": { "text": "A function should not contain unused type declarations" }, "fullDescription": { "text": "A function should not contain unused type declarations [MISRA2012-RULE-2_3_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function should not contain unused type declarations [MISRA2012-RULE-2_3_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-2_3_b", "name": "A source file should not contain unused type declarations", "shortDescription": { "text": "A source file should not contain unused type declarations" }, "fullDescription": { "text": "A source file should not contain unused type declarations [MISRA2012-RULE-2_3_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A source file should not contain unused type declarations [MISRA2012-RULE-2_3_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-2_4_a", "name": "A function should not contain unused local tag declarations", "shortDescription": { "text": "A function should not contain unused local tag declarations" }, "fullDescription": { "text": "A function should not contain unused local tag declarations [MISRA2012-RULE-2_4_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function should not contain unused local tag declarations [MISRA2012-RULE-2_4_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-2_4_b", "name": "A source file should not contain unused tag declarations", "shortDescription": { "text": "A source file should not contain unused tag declarations" }, "fullDescription": { "text": "A source file should not contain unused tag declarations [MISRA2012-RULE-2_4_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A source file should not contain unused tag declarations [MISRA2012-RULE-2_4_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-2_5", "name": "A source file should not contain unused macro definitions", "shortDescription": { "text": "A source file should not contain unused macro definitions" }, "fullDescription": { "text": "A source file should not contain unused macro definitions [MISRA2012-RULE-2_5]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A source file should not contain unused macro definitions [MISRA2012-RULE-2_5]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-2_6", "name": "A function should not contain unused label declarations", "shortDescription": { "text": "A function should not contain unused label declarations" }, "fullDescription": { "text": "A function should not contain unused label declarations [MISRA2012-RULE-2_6]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function should not contain unused label declarations [MISRA2012-RULE-2_6]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-2_7", "name": "There should be no unused parameters in functions", "shortDescription": { "text": "There should be no unused parameters in functions" }, "fullDescription": { "text": "There should be no unused parameters in functions [MISRA2012-RULE-2_7]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There should be no unused parameters in functions [MISRA2012-RULE-2_7]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-4_2", "name": "Trigraphs should not be used", "shortDescription": { "text": "Trigraphs should not be used" }, "fullDescription": { "text": "Trigraphs should not be used [MISRA2012-RULE-4_2]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Trigraphs should not be used [MISRA2012-RULE-4_2]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-5_9_a", "name": "Identifiers that define objects with internal linkage should be unique", "shortDescription": { "text": "Identifiers that define objects with internal linkage should be unique" }, "fullDescription": { "text": "Identifiers that define objects with internal linkage should be unique [MISRA2012-RULE-5_9_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers that define objects with internal linkage should be unique [MISRA2012-RULE-5_9_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-5_9_b", "name": "Identifiers that define functions with internal linkage should be unique", "shortDescription": { "text": "Identifiers that define functions with internal linkage should be unique" }, "fullDescription": { "text": "Identifiers that define functions with internal linkage should be unique [MISRA2012-RULE-5_9_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers that define functions with internal linkage should be unique [MISRA2012-RULE-5_9_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-8_11", "name": "When an array with external linkage is declared, its size should be explicitly specified", "shortDescription": { "text": "When an array with external linkage is declared, its size should be explicitly specified" }, "fullDescription": { "text": "When an array with external linkage is declared, its size should be explicitly specified [MISRA2012-RULE-8_11]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "When an array with external linkage is declared, its size should be explicitly specified [MISRA2012-RULE-8_11]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-8_13_a", "name": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object", "shortDescription": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" }, "fullDescription": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object [MISRA2012-RULE-8_13_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object [MISRA2012-RULE-8_13_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-8_13_b", "name": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object", "shortDescription": { "text": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" }, "fullDescription": { "text": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object [MISRA2012-RULE-8_13_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object [MISRA2012-RULE-8_13_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-8_7", "name": "Functions and objects should not be defined with external linkage if they are referenced in only one translation unit", "shortDescription": { "text": "Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" }, "fullDescription": { "text": "Functions and objects should not be defined with external linkage if they are referenced in only one translation unit [MISRA2012-RULE-8_7]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Functions and objects should not be defined with external linkage if they are referenced in only one translation unit [MISRA2012-RULE-8_7]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-8_9", "name": "An object should be defined at block scope if its identifier only appears in a single function", "shortDescription": { "text": "An object should be defined at block scope if its identifier only appears in a single function" }, "fullDescription": { "text": "An object should be defined at block scope if its identifier only appears in a single function [MISRA2012-RULE-8_9]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An object should be defined at block scope if its identifier only appears in a single function [MISRA2012-RULE-8_9]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-DIR-4_10", "name": "Precautions shall be taken in order to prevent the contents of a header file being included more than once", "shortDescription": { "text": "Precautions shall be taken in order to prevent the contents of a header file being included more than once" }, "fullDescription": { "text": "Precautions shall be taken in order to prevent the contents of a header file being included more than once [MISRA2012-DIR-4_10]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Precautions shall be taken in order to prevent the contents of a header file being included more than once [MISRA2012-DIR-4_10]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_11", "name": "Validate values passed to library functions", "shortDescription": { "text": "Validate values passed to library functions" }, "fullDescription": { "text": "Validate values passed to library functions [MISRA2012-DIR-4_11]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Validate values passed to library functions [MISRA2012-DIR-4_11]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_12", "name": "Dynamic memory allocation shall not be used", "shortDescription": { "text": "Dynamic memory allocation shall not be used" }, "fullDescription": { "text": "Dynamic memory allocation shall not be used [MISRA2012-DIR-4_12]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Dynamic memory allocation shall not be used [MISRA2012-DIR-4_12]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_14_a", "name": "Avoid tainted data in array indexes", "shortDescription": { "text": "Avoid tainted data in array indexes" }, "fullDescription": { "text": "Avoid tainted data in array indexes [MISRA2012-DIR-4_14_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid tainted data in array indexes [MISRA2012-DIR-4_14_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_14_b", "name": "Protect against integer overflow\/underflow from tainted data", "shortDescription": { "text": "Protect against integer overflow\/underflow from tainted data" }, "fullDescription": { "text": "Protect against integer overflow\/underflow from tainted data [MISRA2012-DIR-4_14_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against integer overflow\/underflow from tainted data [MISRA2012-DIR-4_14_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_14_c", "name": "Avoid buffer read overflow from tainted data", "shortDescription": { "text": "Avoid buffer read overflow from tainted data" }, "fullDescription": { "text": "Avoid buffer read overflow from tainted data [MISRA2012-DIR-4_14_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer read overflow from tainted data [MISRA2012-DIR-4_14_c]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_14_d", "name": "Avoid buffer write overflow from tainted data", "shortDescription": { "text": "Avoid buffer write overflow from tainted data" }, "fullDescription": { "text": "Avoid buffer write overflow from tainted data [MISRA2012-DIR-4_14_d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer write overflow from tainted data [MISRA2012-DIR-4_14_d]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_14_e", "name": "Protect against command injection", "shortDescription": { "text": "Protect against command injection" }, "fullDescription": { "text": "Protect against command injection [MISRA2012-DIR-4_14_e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against command injection [MISRA2012-DIR-4_14_e]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_14_f", "name": "Protect against file name injection", "shortDescription": { "text": "Protect against file name injection" }, "fullDescription": { "text": "Protect against file name injection [MISRA2012-DIR-4_14_f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against file name injection [MISRA2012-DIR-4_14_f]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_14_g", "name": "Protect against SQL injection", "shortDescription": { "text": "Protect against SQL injection" }, "fullDescription": { "text": "Protect against SQL injection [MISRA2012-DIR-4_14_g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against SQL injection [MISRA2012-DIR-4_14_g]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_14_h", "name": "Prevent buffer overflows from tainted data", "shortDescription": { "text": "Prevent buffer overflows from tainted data" }, "fullDescription": { "text": "Prevent buffer overflows from tainted data [MISRA2012-DIR-4_14_h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Prevent buffer overflows from tainted data [MISRA2012-DIR-4_14_h]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_14_i", "name": "Avoid buffer overflow from tainted data due to defining incorrect format limits", "shortDescription": { "text": "Avoid buffer overflow from tainted data due to defining incorrect format limits" }, "fullDescription": { "text": "Avoid buffer overflow from tainted data due to defining incorrect format limits [MISRA2012-DIR-4_14_i]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer overflow from tainted data due to defining incorrect format limits [MISRA2012-DIR-4_14_i]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_14_j", "name": "Protect against environment injection", "shortDescription": { "text": "Protect against environment injection" }, "fullDescription": { "text": "Protect against environment injection [MISRA2012-DIR-4_14_j]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against environment injection [MISRA2012-DIR-4_14_j]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_14_k", "name": "Avoid printing tainted data on the output console", "shortDescription": { "text": "Avoid printing tainted data on the output console" }, "fullDescription": { "text": "Avoid printing tainted data on the output console [MISRA2012-DIR-4_14_k]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid printing tainted data on the output console [MISRA2012-DIR-4_14_k]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_14_l", "name": "Exclude unsanitized user input from format strings", "shortDescription": { "text": "Exclude unsanitized user input from format strings" }, "fullDescription": { "text": "Exclude unsanitized user input from format strings [MISRA2012-DIR-4_14_l]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Exclude unsanitized user input from format strings [MISRA2012-DIR-4_14_l]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_1_a", "name": "Avoid accessing arrays out of bounds", "shortDescription": { "text": "Avoid accessing arrays out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays out of bounds [MISRA2012-DIR-4_1_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays out of bounds [MISRA2012-DIR-4_1_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_1_b", "name": "Avoid null pointer dereferencing", "shortDescription": { "text": "Avoid null pointer dereferencing" }, "fullDescription": { "text": "Avoid null pointer dereferencing [MISRA2012-DIR-4_1_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid null pointer dereferencing [MISRA2012-DIR-4_1_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_1_c", "name": "Avoid division by zero", "shortDescription": { "text": "Avoid division by zero" }, "fullDescription": { "text": "Avoid division by zero [MISRA2012-DIR-4_1_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid division by zero [MISRA2012-DIR-4_1_c]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_1_d", "name": "Avoid buffer overflow due to defining incorrect format limits", "shortDescription": { "text": "Avoid buffer overflow due to defining incorrect format limits" }, "fullDescription": { "text": "Avoid buffer overflow due to defining incorrect format limits [MISRA2012-DIR-4_1_d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer overflow due to defining incorrect format limits [MISRA2012-DIR-4_1_d]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_1_e", "name": "Avoid overflow due to reading a not zero terminated string", "shortDescription": { "text": "Avoid overflow due to reading a not zero terminated string" }, "fullDescription": { "text": "Avoid overflow due to reading a not zero terminated string [MISRA2012-DIR-4_1_e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow due to reading a not zero terminated string [MISRA2012-DIR-4_1_e]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_1_g", "name": "Avoid overflow when reading from a buffer", "shortDescription": { "text": "Avoid overflow when reading from a buffer" }, "fullDescription": { "text": "Avoid overflow when reading from a buffer [MISRA2012-DIR-4_1_g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when reading from a buffer [MISRA2012-DIR-4_1_g]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_1_h", "name": "Avoid overflow when writing to a buffer", "shortDescription": { "text": "Avoid overflow when writing to a buffer" }, "fullDescription": { "text": "Avoid overflow when writing to a buffer [MISRA2012-DIR-4_1_h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when writing to a buffer [MISRA2012-DIR-4_1_h]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_1_i", "name": "Do not subtract two pointers that do not address elements of the same array", "shortDescription": { "text": "Do not subtract two pointers that do not address elements of the same array" }, "fullDescription": { "text": "Do not subtract two pointers that do not address elements of the same array [MISRA2012-DIR-4_1_i]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not subtract two pointers that do not address elements of the same array [MISRA2012-DIR-4_1_i]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_1_j", "name": "Do not compare two unrelated pointers", "shortDescription": { "text": "Do not compare two unrelated pointers" }, "fullDescription": { "text": "Do not compare two unrelated pointers [MISRA2012-DIR-4_1_j]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not compare two unrelated pointers [MISRA2012-DIR-4_1_j]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_1_k", "name": "Avoid wraparounds when performing arithmetic integer operations", "shortDescription": { "text": "Avoid wraparounds when performing arithmetic integer operations" }, "fullDescription": { "text": "Avoid wraparounds when performing arithmetic integer operations [MISRA2012-DIR-4_1_k]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid wraparounds when performing arithmetic integer operations [MISRA2012-DIR-4_1_k]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_3", "name": "Assembly language shall be encapsulated and isolated", "shortDescription": { "text": "Assembly language shall be encapsulated and isolated" }, "fullDescription": { "text": "Assembly language shall be encapsulated and isolated [MISRA2012-DIR-4_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Assembly language shall be encapsulated and isolated [MISRA2012-DIR-4_3]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_7_a", "name": "Consistently check the returned value of non-void functions", "shortDescription": { "text": "Consistently check the returned value of non-void functions" }, "fullDescription": { "text": "Consistently check the returned value of non-void functions [MISRA2012-DIR-4_7_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Consistently check the returned value of non-void functions [MISRA2012-DIR-4_7_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_7_b", "name": "Always check the returned value of non-void function", "shortDescription": { "text": "Always check the returned value of non-void function" }, "fullDescription": { "text": "Always check the returned value of non-void function [MISRA2012-DIR-4_7_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Always check the returned value of non-void function [MISRA2012-DIR-4_7_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_13_a", "name": "All resources obtained dynamically by means of Standard Library functions shall be explicitly released", "shortDescription": { "text": "All resources obtained dynamically by means of Standard Library functions shall be explicitly released" }, "fullDescription": { "text": "All resources obtained dynamically by means of Standard Library functions shall be explicitly released [MISRA2012-DIR-4_13_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All resources obtained dynamically by means of Standard Library functions shall be explicitly released [MISRA2012-DIR-4_13_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_13_b", "name": "Do not use resources that have been freed", "shortDescription": { "text": "Do not use resources that have been freed" }, "fullDescription": { "text": "Do not use resources that have been freed [MISRA2012-DIR-4_13_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use resources that have been freed [MISRA2012-DIR-4_13_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_13_c", "name": "Do not free resources using invalid pointers", "shortDescription": { "text": "Do not free resources using invalid pointers" }, "fullDescription": { "text": "Do not free resources using invalid pointers [MISRA2012-DIR-4_13_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not free resources using invalid pointers [MISRA2012-DIR-4_13_c]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_13_d", "name": "Do not abandon unreleased locks", "shortDescription": { "text": "Do not abandon unreleased locks" }, "fullDescription": { "text": "Do not abandon unreleased locks [MISRA2012-DIR-4_13_d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not abandon unreleased locks [MISRA2012-DIR-4_13_d]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_13_e", "name": "Avoid double locking", "shortDescription": { "text": "Avoid double locking" }, "fullDescription": { "text": "Avoid double locking [MISRA2012-DIR-4_13_e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid double locking [MISRA2012-DIR-4_13_e]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_13_f", "name": "Do not release a lock that has not been acquired", "shortDescription": { "text": "Do not release a lock that has not been acquired" }, "fullDescription": { "text": "Do not release a lock that has not been acquired [MISRA2012-DIR-4_13_f]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not release a lock that has not been acquired [MISRA2012-DIR-4_13_f]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_2", "name": "All usage of assembly language should be documented", "shortDescription": { "text": "All usage of assembly language should be documented" }, "fullDescription": { "text": "All usage of assembly language should be documented [MISRA2012-DIR-4_2]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All usage of assembly language should be documented [MISRA2012-DIR-4_2]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_4", "name": "Sections of code should not be \"commented out\"", "shortDescription": { "text": "Sections of code should not be \"commented out\"" }, "fullDescription": { "text": "Sections of code should not be \"commented out\" [MISRA2012-DIR-4_4]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Sections of code should not be \"commented out\" [MISRA2012-DIR-4_4]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_5", "name": "Identifiers in the same name space with overlapping visibility should be typographically unambiguous", "shortDescription": { "text": "Identifiers in the same name space with overlapping visibility should be typographically unambiguous" }, "fullDescription": { "text": "Identifiers in the same name space with overlapping visibility should be typographically unambiguous [MISRA2012-DIR-4_5]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers in the same name space with overlapping visibility should be typographically unambiguous [MISRA2012-DIR-4_5]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_6_a", "name": "typedefs to basic types should contain some digits in their name", "shortDescription": { "text": "typedefs to basic types should contain some digits in their name" }, "fullDescription": { "text": "typedefs to basic types should contain some digits in their name [MISRA2012-DIR-4_6_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "typedefs to basic types should contain some digits in their name [MISRA2012-DIR-4_6_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_6_b", "name": "typedefs should be used in place of the basic types", "shortDescription": { "text": "typedefs should be used in place of the basic types" }, "fullDescription": { "text": "typedefs should be used in place of the basic types [MISRA2012-DIR-4_6_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "typedefs should be used in place of the basic types [MISRA2012-DIR-4_6_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_6_c", "name": "Use typedefs from stdint.h instead of declaring your own in C99 code", "shortDescription": { "text": "Use typedefs from stdint.h instead of declaring your own in C99 code" }, "fullDescription": { "text": "Use typedefs from stdint.h instead of declaring your own in C99 code [MISRA2012-DIR-4_6_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use typedefs from stdint.h instead of declaring your own in C99 code [MISRA2012-DIR-4_6_c]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_8", "name": "If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden", "shortDescription": { "text": "If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" }, "fullDescription": { "text": "If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden [MISRA2012-DIR-4_8]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden [MISRA2012-DIR-4_8]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_9", "name": "A function should be used in preference to a function-like macro where they are interchangeable", "shortDescription": { "text": "A function should be used in preference to a function-like macro where they are interchangeable" }, "fullDescription": { "text": "A function should be used in preference to a function-like macro where they are interchangeable [MISRA2012-DIR-4_9]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function should be used in preference to a function-like macro where they are interchangeable [MISRA2012-DIR-4_9]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRAC2012-RULE_11_3-a", "name": "A cast shall not be performed between a pointer to object type and a pointer to a different object type", "shortDescription": { "text": "A cast shall not be performed between a pointer to object type and a pointer to a different object type" }, "fullDescription": { "text": "A cast shall not be performed between a pointer to object type and a pointer to a different object type [MISRAC2012-RULE_11_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A cast shall not be performed between a pointer to object type and a pointer to a different object type [MISRAC2012-RULE_11_3-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 11.3 (Required) A conversion shall not be performed between a pointer to object type and a pointer to a different object type" ] } }, { "id": "MISRAC2012-RULE_20_13-a", "name": "Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor", "shortDescription": { "text": "Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" }, "fullDescription": { "text": "Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor [MISRAC2012-RULE_20_13-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor [MISRAC2012-RULE_20_13-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 20.13 (Required) A line whose first token is # shall be a valid preprocessing directive" ] } }, { "id": "MISRAC2012-RULE_8_5-a", "name": "An external object or function shall not have more than one non-defining declaration in translation unit", "shortDescription": { "text": "An external object or function shall not have more than one non-defining declaration in translation unit" }, "fullDescription": { "text": "An external object or function shall not have more than one non-defining declaration in translation unit [MISRAC2012-RULE_8_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An external object or function shall not have more than one non-defining declaration in translation unit [MISRAC2012-RULE_8_5-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 8.5 (Required) An external object or function shall be declared once in one and only one file" ] } }, { "id": "MISRAC2012-RULE_11_4-a", "name": "A conversion should not be performed between a pointer to object and an integer type", "shortDescription": { "text": "A conversion should not be performed between a pointer to object and an integer type" }, "fullDescription": { "text": "A conversion should not be performed between a pointer to object and an integer type [MISRAC2012-RULE_11_4-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A conversion should not be performed between a pointer to object and an integer type [MISRAC2012-RULE_11_4-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 11.4 (Advisory) A conversion should not be performed between a pointer to object and an integer type" ] } }, { "id": "MISRAC2012-RULE_20_12-a", "name": "A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators", "shortDescription": { "text": "A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" }, "fullDescription": { "text": "A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators [MISRAC2012-RULE_20_12-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators [MISRAC2012-RULE_20_12-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 20.12 (Required) A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" ] } }, { "id": "MISRAC2012-RULE_8_6-a", "name": "An identifier with external linkage shall have no more then one external definition", "shortDescription": { "text": "An identifier with external linkage shall have no more then one external definition" }, "fullDescription": { "text": "An identifier with external linkage shall have no more then one external definition [MISRAC2012-RULE_8_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An identifier with external linkage shall have no more then one external definition [MISRAC2012-RULE_8_6-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 8.6 (Required) An identifier with external linkage shall have exactly one external definition" ] } }, { "id": "MISRAC2012-RULE_11_5-a", "name": "A conversion should not be performed from pointer to void into pointer to object", "shortDescription": { "text": "A conversion should not be performed from pointer to void into pointer to object" }, "fullDescription": { "text": "A conversion should not be performed from pointer to void into pointer to object [MISRAC2012-RULE_11_5-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A conversion should not be performed from pointer to void into pointer to object [MISRAC2012-RULE_11_5-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 11.5 (Advisory) A conversion should not be performed from pointer to void into pointer to object" ] } }, { "id": "MISRAC2012-RULE_15_1-a", "name": "The goto statement shall not be used", "shortDescription": { "text": "The goto statement shall not be used" }, "fullDescription": { "text": "The goto statement shall not be used [MISRAC2012-RULE_15_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The goto statement shall not be used [MISRAC2012-RULE_15_1-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 15.1 (Advisory) The goto statement should not be used" ] } }, { "id": "MISRAC2012-RULE_20_11-a", "name": "A macro parameter immediately following a # operator shall not immediately be followed by a ## operator", "shortDescription": { "text": "A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" }, "fullDescription": { "text": "A macro parameter immediately following a # operator shall not immediately be followed by a ## operator [MISRAC2012-RULE_20_11-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A macro parameter immediately following a # operator shall not immediately be followed by a ## operator [MISRAC2012-RULE_20_11-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 20.11 (Required) A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" ] } }, { "id": "MISRAC2012-RULE_8_3-a", "name": "If objects or functions are declared more than once their types shall be compatible", "shortDescription": { "text": "If objects or functions are declared more than once their types shall be compatible" }, "fullDescription": { "text": "If objects or functions are declared more than once their types shall be compatible [MISRAC2012-RULE_8_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If objects or functions are declared more than once their types shall be compatible [MISRAC2012-RULE_8_3-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 8.3 (Required) All declarations of an object or function shall use the same names and type qualifiers" ] } }, { "id": "MISRAC2012-RULE_8_3-b", "name": "The identifiers used in the declaration and definition of a function shall be identical", "shortDescription": { "text": "The identifiers used in the declaration and definition of a function shall be identical" }, "fullDescription": { "text": "The identifiers used in the declaration and definition of a function shall be identical [MISRAC2012-RULE_8_3-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The identifiers used in the declaration and definition of a function shall be identical [MISRAC2012-RULE_8_3-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 8.3 (Required) All declarations of an object or function shall use the same names and type qualifiers" ] } }, { "id": "MISRAC2012-RULE_8_3-c", "name": "All declarations of an object or function shall have compatible types", "shortDescription": { "text": "All declarations of an object or function shall have compatible types" }, "fullDescription": { "text": "All declarations of an object or function shall have compatible types [MISRAC2012-RULE_8_3-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All declarations of an object or function shall have compatible types [MISRAC2012-RULE_8_3-c]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 8.3 (Required) All declarations of an object or function shall use the same names and type qualifiers" ] } }, { "id": "MISRAC2012-RULE_11_6-a", "name": "A cast shall not be performed between pointer to void and an arithmetic type", "shortDescription": { "text": "A cast shall not be performed between pointer to void and an arithmetic type" }, "fullDescription": { "text": "A cast shall not be performed between pointer to void and an arithmetic type [MISRAC2012-RULE_11_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A cast shall not be performed between pointer to void and an arithmetic type [MISRAC2012-RULE_11_6-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 11.6 (Required) A cast shall not be performed between pointer to void and an arithmetic type" ] } }, { "id": "MISRAC2012-RULE_15_2-a", "name": "The goto statement shall jump to a label declared later in the same function body", "shortDescription": { "text": "The goto statement shall jump to a label declared later in the same function body" }, "fullDescription": { "text": "The goto statement shall jump to a label declared later in the same function body [MISRAC2012-RULE_15_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The goto statement shall jump to a label declared later in the same function body [MISRAC2012-RULE_15_2-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 15.2 (Required) The goto statement shall jump to a label declared later in the same function" ] } }, { "id": "MISRAC2012-RULE_20_10-a", "name": "The # and ## preprocessor operators should not be used", "shortDescription": { "text": "The # and ## preprocessor operators should not be used" }, "fullDescription": { "text": "The # and ## preprocessor operators should not be used [MISRAC2012-RULE_20_10-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The # and ## preprocessor operators should not be used [MISRAC2012-RULE_20_10-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 20.10 (Advisory) The # and ## preprocessor operators should not be used" ] } }, { "id": "MISRAC2012-RULE_8_4-a", "name": "A declaration shall be visible when an object or function with external linkage is defined", "shortDescription": { "text": "A declaration shall be visible when an object or function with external linkage is defined" }, "fullDescription": { "text": "A declaration shall be visible when an object or function with external linkage is defined [MISRAC2012-RULE_8_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A declaration shall be visible when an object or function with external linkage is defined [MISRAC2012-RULE_8_4-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 8.4 (Required) A compatible declaration shall be visible when an object or function with external linkage is defined" ] } }, { "id": "MISRAC2012-RULE_8_4-b", "name": "If objects or functions are declared more than once their types shall be compatible", "shortDescription": { "text": "If objects or functions are declared more than once their types shall be compatible" }, "fullDescription": { "text": "If objects or functions are declared more than once their types shall be compatible [MISRAC2012-RULE_8_4-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If objects or functions are declared more than once their types shall be compatible [MISRAC2012-RULE_8_4-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 8.4 (Required) A compatible declaration shall be visible when an object or function with external linkage is defined" ] } }, { "id": "MISRAC2012-RULE_11_7-a", "name": "A cast shall not be performed between pointer to object and a non-integer arithmetic type", "shortDescription": { "text": "A cast shall not be performed between pointer to object and a non-integer arithmetic type" }, "fullDescription": { "text": "A cast shall not be performed between pointer to object and a non-integer arithmetic type [MISRAC2012-RULE_11_7-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A cast shall not be performed between pointer to object and a non-integer arithmetic type [MISRAC2012-RULE_11_7-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 11.7 (Required) A cast shall not be performed between pointer to object and a non-integer arithmetic type" ] } }, { "id": "MISRAC2012-RULE_15_3-a", "name": "Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement", "shortDescription": { "text": "Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" }, "fullDescription": { "text": "Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement [MISRAC2012-RULE_15_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement [MISRAC2012-RULE_15_3-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 15.3 (Required) Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement" ] } }, { "id": "MISRAC2012-RULE_8_9-a", "name": "Objects shall be defined at block scope if they are only accessed from within a single function", "shortDescription": { "text": "Objects shall be defined at block scope if they are only accessed from within a single function" }, "fullDescription": { "text": "Objects shall be defined at block scope if they are only accessed from within a single function [MISRAC2012-RULE_8_9-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Objects shall be defined at block scope if they are only accessed from within a single function [MISRAC2012-RULE_8_9-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 8.9 (Advisory) An object should be declared at block scope if its identifier only appears in a single function" ] } }, { "id": "MISRAC2012-RULE_11_8-a", "name": "A conversion shall not remove any 'const', 'volatile' or '_Atomic' qualification from the type accessed via a pointer or by reference", "shortDescription": { "text": "A conversion shall not remove any 'const', 'volatile' or '_Atomic' qualification from the type accessed via a pointer or by reference" }, "fullDescription": { "text": "A conversion shall not remove any 'const', 'volatile' or '_Atomic' qualification from the type accessed via a pointer or by reference [MISRAC2012-RULE_11_8-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A conversion shall not remove any 'const', 'volatile' or '_Atomic' qualification from the type accessed via a pointer or by reference [MISRAC2012-RULE_11_8-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 11.8 (Required) A conversion shall not remove any const, volatile or _Atomic qualification from the type pointed to by a pointer" ] } }, { "id": "MISRAC2012-RULE_15_4-a", "name": "For any iteration statement there shall be no more than one break or goto statement used for loop termination", "shortDescription": { "text": "For any iteration statement there shall be no more than one break or goto statement used for loop termination" }, "fullDescription": { "text": "For any iteration statement there shall be no more than one break or goto statement used for loop termination [MISRAC2012-RULE_15_4-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "For any iteration statement there shall be no more than one break or goto statement used for loop termination [MISRAC2012-RULE_15_4-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 15.4 (Advisory) There should be no more than one break or goto statement used to terminate any iteration statement" ] } }, { "id": "MISRAC2012-RULE_11_9-a", "name": "Literal zero (0) shall not be used as the null-pointer-constant", "shortDescription": { "text": "Literal zero (0) shall not be used as the null-pointer-constant" }, "fullDescription": { "text": "Literal zero (0) shall not be used as the null-pointer-constant [MISRAC2012-RULE_11_9-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Literal zero (0) shall not be used as the null-pointer-constant [MISRAC2012-RULE_11_9-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant" ] } }, { "id": "MISRAC2012-RULE_11_9-b", "name": "Use NULL instead of literal zero (0) as the null-pointer-constant", "shortDescription": { "text": "Use NULL instead of literal zero (0) as the null-pointer-constant" }, "fullDescription": { "text": "Use NULL instead of literal zero (0) as the null-pointer-constant [MISRAC2012-RULE_11_9-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use NULL instead of literal zero (0) as the null-pointer-constant [MISRAC2012-RULE_11_9-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant" ] } }, { "id": "MISRAC2012-RULE_15_5-a", "name": "A function shall have a single point of exit at the end of the function", "shortDescription": { "text": "A function shall have a single point of exit at the end of the function" }, "fullDescription": { "text": "A function shall have a single point of exit at the end of the function [MISRAC2012-RULE_15_5-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function shall have a single point of exit at the end of the function [MISRAC2012-RULE_15_5-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 15.5 (Advisory) A function should have a single point of exit at the end" ] } }, { "id": "MISRAC2012-RULE_19_1-a", "name": "An object shall not be assigned to an overlapping object", "shortDescription": { "text": "An object shall not be assigned to an overlapping object" }, "fullDescription": { "text": "An object shall not be assigned to an overlapping object [MISRAC2012-RULE_19_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An object shall not be assigned to an overlapping object [MISRAC2012-RULE_19_1-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 19.1 (Mandatory) An object shall not be assigned or copied to an overlapping object" ] } }, { "id": "MISRAC2012-RULE_19_1-b", "name": "An object shall not be assigned to an overlapping object", "shortDescription": { "text": "An object shall not be assigned to an overlapping object" }, "fullDescription": { "text": "An object shall not be assigned to an overlapping object [MISRAC2012-RULE_19_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An object shall not be assigned to an overlapping object [MISRAC2012-RULE_19_1-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 19.1 (Mandatory) An object shall not be assigned or copied to an overlapping object" ] } }, { "id": "MISRAC2012-RULE_19_1-c", "name": "An object shall not be assigned or copied to an overlapping object", "shortDescription": { "text": "An object shall not be assigned or copied to an overlapping object" }, "fullDescription": { "text": "An object shall not be assigned or copied to an overlapping object [MISRAC2012-RULE_19_1-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An object shall not be assigned or copied to an overlapping object [MISRAC2012-RULE_19_1-c]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 19.1 (Mandatory) An object shall not be assigned or copied to an overlapping object" ] } }, { "id": "MISRAC2012-RULE_8_7-a", "name": "Functions and objects should not be defined with external linkage if they are referenced in only one translation unit", "shortDescription": { "text": "Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" }, "fullDescription": { "text": "Functions and objects should not be defined with external linkage if they are referenced in only one translation unit [MISRAC2012-RULE_8_7-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Functions and objects should not be defined with external linkage if they are referenced in only one translation unit [MISRAC2012-RULE_8_7-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 8.7 (Advisory) Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" ] } }, { "id": "MISRAC2012-RULE_15_6-a", "name": "The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement", "shortDescription": { "text": "The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" }, "fullDescription": { "text": "The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement [MISRAC2012-RULE_15_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement [MISRAC2012-RULE_15_6-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 15.6 (Required) The body of an iteration-statement or a selection-statement shall be a compound-statement" ] } }, { "id": "MISRAC2012-RULE_15_6-b", "name": "'if' and 'else' should be followed by a compound statement", "shortDescription": { "text": "'if' and 'else' should be followed by a compound statement" }, "fullDescription": { "text": "'if' and 'else' should be followed by a compound statement [MISRAC2012-RULE_15_6-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "'if' and 'else' should be followed by a compound statement [MISRAC2012-RULE_15_6-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 15.6 (Required) The body of an iteration-statement or a selection-statement shall be a compound-statement" ] } }, { "id": "MISRAC2012-RULE_19_2-a", "name": "The union keyword should not be used", "shortDescription": { "text": "The union keyword should not be used" }, "fullDescription": { "text": "The union keyword should not be used [MISRAC2012-RULE_19_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The union keyword should not be used [MISRAC2012-RULE_19_2-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 19.2 (Advisory) The union keyword should not be used" ] } }, { "id": "MISRAC2012-RULE_8_8-a", "name": "The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage", "shortDescription": { "text": "The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" }, "fullDescription": { "text": "The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage [MISRAC2012-RULE_8_8-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage [MISRAC2012-RULE_8_8-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 8.8 (Required) The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage" ] } }, { "id": "MISRAC2012-DIR_4_14-a", "name": "Avoid tainted data in array indexes", "shortDescription": { "text": "Avoid tainted data in array indexes" }, "fullDescription": { "text": "Avoid tainted data in array indexes [MISRAC2012-DIR_4_14-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid tainted data in array indexes [MISRAC2012-DIR_4_14-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.14 (Required) The validity of values received from external sources shall be checked" ] } }, { "id": "MISRAC2012-DIR_4_14-b", "name": "Avoid potential integer overflow\/underflow on tainted data", "shortDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data" }, "fullDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data [MISRAC2012-DIR_4_14-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid potential integer overflow\/underflow on tainted data [MISRAC2012-DIR_4_14-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.14 (Required) The validity of values received from external sources shall be checked" ] } }, { "id": "MISRAC2012-DIR_4_14-c", "name": "Avoid buffer read overflow from tainted data", "shortDescription": { "text": "Avoid buffer read overflow from tainted data" }, "fullDescription": { "text": "Avoid buffer read overflow from tainted data [MISRAC2012-DIR_4_14-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer read overflow from tainted data [MISRAC2012-DIR_4_14-c]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.14 (Required) The validity of values received from external sources shall be checked" ] } }, { "id": "MISRAC2012-DIR_4_14-d", "name": "Avoid buffer write overflow from tainted data", "shortDescription": { "text": "Avoid buffer write overflow from tainted data" }, "fullDescription": { "text": "Avoid buffer write overflow from tainted data [MISRAC2012-DIR_4_14-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer write overflow from tainted data [MISRAC2012-DIR_4_14-d]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.14 (Required) The validity of values received from external sources shall be checked" ] } }, { "id": "MISRAC2012-DIR_4_14-e", "name": "Protect against command injection", "shortDescription": { "text": "Protect against command injection" }, "fullDescription": { "text": "Protect against command injection [MISRAC2012-DIR_4_14-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against command injection [MISRAC2012-DIR_4_14-e]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.14 (Required) The validity of values received from external sources shall be checked" ] } }, { "id": "MISRAC2012-DIR_4_14-f", "name": "Protect against file name injection", "shortDescription": { "text": "Protect against file name injection" }, "fullDescription": { "text": "Protect against file name injection [MISRAC2012-DIR_4_14-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against file name injection [MISRAC2012-DIR_4_14-f]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.14 (Required) The validity of values received from external sources shall be checked" ] } }, { "id": "MISRAC2012-DIR_4_14-g", "name": "Protect against SQL injection", "shortDescription": { "text": "Protect against SQL injection" }, "fullDescription": { "text": "Protect against SQL injection [MISRAC2012-DIR_4_14-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against SQL injection [MISRAC2012-DIR_4_14-g]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.14 (Required) The validity of values received from external sources shall be checked" ] } }, { "id": "MISRAC2012-DIR_4_14-h", "name": "Prevent buffer overflows from tainted data", "shortDescription": { "text": "Prevent buffer overflows from tainted data" }, "fullDescription": { "text": "Prevent buffer overflows from tainted data [MISRAC2012-DIR_4_14-h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Prevent buffer overflows from tainted data [MISRAC2012-DIR_4_14-h]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.14 (Required) The validity of values received from external sources shall be checked" ] } }, { "id": "MISRAC2012-DIR_4_14-i", "name": "Avoid buffer overflow from tainted data due to defining incorrect format limits", "shortDescription": { "text": "Avoid buffer overflow from tainted data due to defining incorrect format limits" }, "fullDescription": { "text": "Avoid buffer overflow from tainted data due to defining incorrect format limits [MISRAC2012-DIR_4_14-i]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer overflow from tainted data due to defining incorrect format limits [MISRAC2012-DIR_4_14-i]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.14 (Required) The validity of values received from external sources shall be checked" ] } }, { "id": "MISRAC2012-DIR_4_14-j", "name": "Protect against environment injection", "shortDescription": { "text": "Protect against environment injection" }, "fullDescription": { "text": "Protect against environment injection [MISRAC2012-DIR_4_14-j]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against environment injection [MISRAC2012-DIR_4_14-j]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.14 (Required) The validity of values received from external sources shall be checked" ] } }, { "id": "MISRAC2012-DIR_4_14-k", "name": "Avoid printing tainted data on the output console", "shortDescription": { "text": "Avoid printing tainted data on the output console" }, "fullDescription": { "text": "Avoid printing tainted data on the output console [MISRAC2012-DIR_4_14-k]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid printing tainted data on the output console [MISRAC2012-DIR_4_14-k]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.14 (Required) The validity of values received from external sources shall be checked" ] } }, { "id": "MISRAC2012-DIR_4_14-l", "name": "Exclude unsanitized user input from format strings", "shortDescription": { "text": "Exclude unsanitized user input from format strings" }, "fullDescription": { "text": "Exclude unsanitized user input from format strings [MISRAC2012-DIR_4_14-l]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Exclude unsanitized user input from format strings [MISRAC2012-DIR_4_14-l]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.14 (Required) The validity of values received from external sources shall be checked" ] } }, { "id": "MISRAC2012-RULE_15_7-a", "name": "All 'if...else-if' constructs shall be terminated with an 'else' clause", "shortDescription": { "text": "All 'if...else-if' constructs shall be terminated with an 'else' clause" }, "fullDescription": { "text": "All 'if...else-if' constructs shall be terminated with an 'else' clause [MISRAC2012-RULE_15_7-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All 'if...else-if' constructs shall be terminated with an 'else' clause [MISRAC2012-RULE_15_7-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 15.7 (Required) All if ... else if constructs shall be terminated with an else statement" ] } }, { "id": "MISRAC2012-DIR_4_13-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [MISRAC2012-DIR_4_13-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Ensure resources are freed [MISRAC2012-DIR_4_13-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.13 (Advisory) Functions which are designed to provide operations on a resource should be called in an appropriate sequence" ] } }, { "id": "MISRAC2012-DIR_4_13-b", "name": "Do not use resources that have been freed", "shortDescription": { "text": "Do not use resources that have been freed" }, "fullDescription": { "text": "Do not use resources that have been freed [MISRAC2012-DIR_4_13-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use resources that have been freed [MISRAC2012-DIR_4_13-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.13 (Advisory) Functions which are designed to provide operations on a resource should be called in an appropriate sequence" ] } }, { "id": "MISRAC2012-DIR_4_13-c", "name": "Do not free resources using invalid pointers", "shortDescription": { "text": "Do not free resources using invalid pointers" }, "fullDescription": { "text": "Do not free resources using invalid pointers [MISRAC2012-DIR_4_13-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not free resources using invalid pointers [MISRAC2012-DIR_4_13-c]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.13 (Advisory) Functions which are designed to provide operations on a resource should be called in an appropriate sequence" ] } }, { "id": "MISRAC2012-DIR_4_13-d", "name": "Do not abandon unreleased locks", "shortDescription": { "text": "Do not abandon unreleased locks" }, "fullDescription": { "text": "Do not abandon unreleased locks [MISRAC2012-DIR_4_13-d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not abandon unreleased locks [MISRAC2012-DIR_4_13-d]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.13 (Advisory) Functions which are designed to provide operations on a resource should be called in an appropriate sequence" ] } }, { "id": "MISRAC2012-DIR_4_13-e", "name": "Avoid double locking", "shortDescription": { "text": "Avoid double locking" }, "fullDescription": { "text": "Avoid double locking [MISRAC2012-DIR_4_13-e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid double locking [MISRAC2012-DIR_4_13-e]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.13 (Advisory) Functions which are designed to provide operations on a resource should be called in an appropriate sequence" ] } }, { "id": "MISRAC2012-DIR_4_13-f", "name": "Do not release a lock that has not been acquired", "shortDescription": { "text": "Do not release a lock that has not been acquired" }, "fullDescription": { "text": "Do not release a lock that has not been acquired [MISRAC2012-DIR_4_13-f]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not release a lock that has not been acquired [MISRAC2012-DIR_4_13-f]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.13 (Advisory) Functions which are designed to provide operations on a resource should be called in an appropriate sequence" ] } }, { "id": "MISRAC2012-DIR_4_12-a", "name": "Dynamic heap memory allocation shall not be used", "shortDescription": { "text": "Dynamic heap memory allocation shall not be used" }, "fullDescription": { "text": "Dynamic heap memory allocation shall not be used [MISRAC2012-DIR_4_12-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Dynamic heap memory allocation shall not be used [MISRAC2012-DIR_4_12-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.12 (Required) Dynamic memory allocation shall not be used" ] } }, { "id": "MISRAC2012-DIR_4_11-a", "name": "Validate values passed to library functions", "shortDescription": { "text": "Validate values passed to library functions" }, "fullDescription": { "text": "Validate values passed to library functions [MISRAC2012-DIR_4_11-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Validate values passed to library functions [MISRAC2012-DIR_4_11-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.11 (Required) The validity of values passed to library functions shall be checked" ] } }, { "id": "MISRAC2012-DIR_4_10-a", "name": "Use multiple include guards", "shortDescription": { "text": "Use multiple include guards" }, "fullDescription": { "text": "Use multiple include guards [MISRAC2012-DIR_4_10-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use multiple include guards [MISRAC2012-DIR_4_10-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.10 (Required) Precautions shall be taken in order to prevent the contents of a header file being included more than once" ] } }, { "id": "MISRAC2012-RULE_20_14-a", "name": "All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related", "shortDescription": { "text": "All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" }, "fullDescription": { "text": "All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related [MISRAC2012-RULE_20_14-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related [MISRAC2012-RULE_20_14-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 20.14 (Required) All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related" ] } }, { "id": "MISRAC2012-RULE_4_1-a", "name": "Octal and hexadecimal escape sequences shall be terminated", "shortDescription": { "text": "Octal and hexadecimal escape sequences shall be terminated" }, "fullDescription": { "text": "Octal and hexadecimal escape sequences shall be terminated [MISRAC2012-RULE_4_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Octal and hexadecimal escape sequences shall be terminated [MISRAC2012-RULE_4_1-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 4.1 (Required) Octal and hexadecimal escape sequences shall be terminated" ] } }, { "id": "MISRAC2012-RULE_4_2-a", "name": "Trigraphs shall not be used", "shortDescription": { "text": "Trigraphs shall not be used" }, "fullDescription": { "text": "Trigraphs shall not be used [MISRAC2012-RULE_4_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Trigraphs shall not be used [MISRAC2012-RULE_4_2-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 4.2 (Advisory) Trigraphs should not be used" ] } }, { "id": "MISRAC2012-RULE_8_1-a", "name": "Whenever a function is declared or defined, its type shall be explicitly stated", "shortDescription": { "text": "Whenever a function is declared or defined, its type shall be explicitly stated" }, "fullDescription": { "text": "Whenever a function is declared or defined, its type shall be explicitly stated [MISRAC2012-RULE_8_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Whenever a function is declared or defined, its type shall be explicitly stated [MISRAC2012-RULE_8_1-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 8.1 (Required) Types shall be explicitly specified" ] } }, { "id": "MISRAC2012-RULE_8_1-b", "name": "Whenever an object is declared or defined, its type shall be explicitly stated", "shortDescription": { "text": "Whenever an object is declared or defined, its type shall be explicitly stated" }, "fullDescription": { "text": "Whenever an object is declared or defined, its type shall be explicitly stated [MISRAC2012-RULE_8_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Whenever an object is declared or defined, its type shall be explicitly stated [MISRAC2012-RULE_8_1-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 8.1 (Required) Types shall be explicitly specified" ] } }, { "id": "MISRAC2012-RULE_8_2-a", "name": "Identifiers shall be given for all of the parameters in a function prototype declaration", "shortDescription": { "text": "Identifiers shall be given for all of the parameters in a function prototype declaration" }, "fullDescription": { "text": "Identifiers shall be given for all of the parameters in a function prototype declaration [MISRAC2012-RULE_8_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers shall be given for all of the parameters in a function prototype declaration [MISRAC2012-RULE_8_2-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 8.2 (Required) Function types shall be in prototype form with named parameters" ] } }, { "id": "MISRAC2012-RULE_8_2-b", "name": "Function types shall have named parameters", "shortDescription": { "text": "Function types shall have named parameters" }, "fullDescription": { "text": "Function types shall have named parameters [MISRAC2012-RULE_8_2-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Function types shall have named parameters [MISRAC2012-RULE_8_2-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 8.2 (Required) Function types shall be in prototype form with named parameters" ] } }, { "id": "MISRAC2012-RULE_8_2-c", "name": "Function types shall be in prototype form", "shortDescription": { "text": "Function types shall be in prototype form" }, "fullDescription": { "text": "Function types shall be in prototype form [MISRAC2012-RULE_8_2-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Function types shall be in prototype form [MISRAC2012-RULE_8_2-c]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 8.2 (Required) Function types shall be in prototype form with named parameters" ] } }, { "id": "MISRAC2012-RULE_11_1-a", "name": "Conversions shall not be performed between a pointer to a function and any other type than pointer to function", "shortDescription": { "text": "Conversions shall not be performed between a pointer to a function and any other type than pointer to function" }, "fullDescription": { "text": "Conversions shall not be performed between a pointer to a function and any other type than pointer to function [MISRAC2012-RULE_11_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Conversions shall not be performed between a pointer to a function and any other type than pointer to function [MISRAC2012-RULE_11_1-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 11.1 (Required) Conversions shall not be performed between a pointer to a function and any other type" ] } }, { "id": "MISRAC2012-RULE_11_1-b", "name": "Conversions shall not be performed between non compatible pointer to a function types", "shortDescription": { "text": "Conversions shall not be performed between non compatible pointer to a function types" }, "fullDescription": { "text": "Conversions shall not be performed between non compatible pointer to a function types [MISRAC2012-RULE_11_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Conversions shall not be performed between non compatible pointer to a function types [MISRAC2012-RULE_11_1-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 11.1 (Required) Conversions shall not be performed between a pointer to a function and any other type" ] } }, { "id": "MISRAC2012-RULE_11_2-a", "name": "Conversions shall not be performed between a pointer to an incomplete type and any other type", "shortDescription": { "text": "Conversions shall not be performed between a pointer to an incomplete type and any other type" }, "fullDescription": { "text": "Conversions shall not be performed between a pointer to an incomplete type and any other type [MISRAC2012-RULE_11_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Conversions shall not be performed between a pointer to an incomplete type and any other type [MISRAC2012-RULE_11_2-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 11.2 (Required) Conversions shall not be performed between a pointer to an incomplete type and any other type" ] } }, { "id": "MISRAC2012-RULE_22_3-a", "name": "The same file shall not be opened for read and write access at the same time on different streams", "shortDescription": { "text": "The same file shall not be opened for read and write access at the same time on different streams" }, "fullDescription": { "text": "The same file shall not be opened for read and write access at the same time on different streams [MISRAC2012-RULE_22_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The same file shall not be opened for read and write access at the same time on different streams [MISRAC2012-RULE_22_3-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 22.3 (Required) The same file shall not be open for read and write access at the same time on different streams" ] } }, { "id": "MISRAC2012-RULE_22_4-a", "name": "Avoid writing to a stream which has been opened as read only", "shortDescription": { "text": "Avoid writing to a stream which has been opened as read only" }, "fullDescription": { "text": "Avoid writing to a stream which has been opened as read only [MISRAC2012-RULE_22_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid writing to a stream which has been opened as read only [MISRAC2012-RULE_22_4-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 22.4 (Mandatory) There shall be no attempt to write to a stream which has been opened as read-only" ] } }, { "id": "MISRAC2012-RULE_22_5-a", "name": "A pointer to a FILE object shall not be dereferenced", "shortDescription": { "text": "A pointer to a FILE object shall not be dereferenced" }, "fullDescription": { "text": "A pointer to a FILE object shall not be dereferenced [MISRAC2012-RULE_22_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A pointer to a FILE object shall not be dereferenced [MISRAC2012-RULE_22_5-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 22.5 (Mandatory) A pointer to a FILE object shall not be dereferenced" ] } }, { "id": "MISRAC2012-RULE_22_5-b", "name": "A pointer to a FILE object shall not be dereferenced by a library function", "shortDescription": { "text": "A pointer to a FILE object shall not be dereferenced by a library function" }, "fullDescription": { "text": "A pointer to a FILE object shall not be dereferenced by a library function [MISRAC2012-RULE_22_5-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A pointer to a FILE object shall not be dereferenced by a library function [MISRAC2012-RULE_22_5-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 22.5 (Mandatory) A pointer to a FILE object shall not be dereferenced" ] } }, { "id": "MISRAC2012-RULE_22_6-a", "name": "Do not use resources that have been freed", "shortDescription": { "text": "Do not use resources that have been freed" }, "fullDescription": { "text": "Do not use resources that have been freed [MISRAC2012-RULE_22_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use resources that have been freed [MISRAC2012-RULE_22_6-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 22.6 (Mandatory) The value of a pointer to a FILE shall not be used after the associated stream has been closed" ] } }, { "id": "MISRAC2012-RULE_22_7-a", "name": "The macro EOF should be compared with the unmodified return value from the Standard Library function", "shortDescription": { "text": "The macro EOF should be compared with the unmodified return value from the Standard Library function" }, "fullDescription": { "text": "The macro EOF should be compared with the unmodified return value from the Standard Library function [MISRAC2012-RULE_22_7-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The macro EOF should be compared with the unmodified return value from the Standard Library function [MISRAC2012-RULE_22_7-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 22.7 (Required) The macro EOF shall only be compared with the unmodified return value from any Standard Library function capable of returning EOF" ] } }, { "id": "MISRAC2012-RULE_22_8-a", "name": "Properly use errno value", "shortDescription": { "text": "Properly use errno value" }, "fullDescription": { "text": "Properly use errno value [MISRAC2012-RULE_22_8-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly use errno value [MISRAC2012-RULE_22_8-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 22.8 (Required) The value of errno shall be set to zero prior to a call to an errno-setting-function" ] } }, { "id": "MISRAC2012-RULE_22_9-a", "name": "Properly use errno value", "shortDescription": { "text": "Properly use errno value" }, "fullDescription": { "text": "Properly use errno value [MISRAC2012-RULE_22_9-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly use errno value [MISRAC2012-RULE_22_9-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 22.9 (Required) The value of errno shall be tested against zero after calling an errno-setting-function" ] } }, { "id": "MISRAC2012-RULE_22_1-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [MISRAC2012-RULE_22_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure resources are freed [MISRAC2012-RULE_22_1-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 22.1 (Required) All resources obtained dynamically by means of Standard Library functions shall be explicitly released" ] } }, { "id": "MISRAC2012-RULE_22_2-a", "name": "Do not use resources that have been freed", "shortDescription": { "text": "Do not use resources that have been freed" }, "fullDescription": { "text": "Do not use resources that have been freed [MISRAC2012-RULE_22_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use resources that have been freed [MISRAC2012-RULE_22_2-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 22.2 (Mandatory) A block of memory shall only be freed if it was allocated by means of a" ] } }, { "id": "MISRAC2012-RULE_22_2-b", "name": "Do not free resources using invalid pointers", "shortDescription": { "text": "Do not free resources using invalid pointers" }, "fullDescription": { "text": "Do not free resources using invalid pointers [MISRAC2012-RULE_22_2-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not free resources using invalid pointers [MISRAC2012-RULE_22_2-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 22.2 (Mandatory) A block of memory shall only be freed if it was allocated by means of a" ] } }, { "id": "MISRAC2012-RULE_10_4-a", "name": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category", "shortDescription": { "text": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" }, "fullDescription": { "text": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category [MISRAC2012-RULE_10_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category [MISRAC2012-RULE_10_4-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 10.4 (Required) Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" ] } }, { "id": "MISRAC2012-RULE_10_4-b", "name": "The second and third operands of the ternary operator shall have the same essential type category", "shortDescription": { "text": "The second and third operands of the ternary operator shall have the same essential type category" }, "fullDescription": { "text": "The second and third operands of the ternary operator shall have the same essential type category [MISRAC2012-RULE_10_4-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The second and third operands of the ternary operator shall have the same essential type category [MISRAC2012-RULE_10_4-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 10.4 (Required) Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" ] } }, { "id": "MISRAC2012-RULE_10_5-a", "name": "The cast operation to essentially enumeration type is not allowed", "shortDescription": { "text": "The cast operation to essentially enumeration type is not allowed" }, "fullDescription": { "text": "The cast operation to essentially enumeration type is not allowed [MISRAC2012-RULE_10_5-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The cast operation to essentially enumeration type is not allowed [MISRAC2012-RULE_10_5-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 10.5 (Advisory) The value of an expression should not be cast to an inappropriate essential type" ] } }, { "id": "MISRAC2012-RULE_10_5-b", "name": "Do not cast from or to essentially Boolean type", "shortDescription": { "text": "Do not cast from or to essentially Boolean type" }, "fullDescription": { "text": "Do not cast from or to essentially Boolean type [MISRAC2012-RULE_10_5-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not cast from or to essentially Boolean type [MISRAC2012-RULE_10_5-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 10.5 (Advisory) The value of an expression should not be cast to an inappropriate essential type" ] } }, { "id": "MISRAC2012-RULE_10_5-c", "name": "Do not use casts between essentially character types and essentially floating types", "shortDescription": { "text": "Do not use casts between essentially character types and essentially floating types" }, "fullDescription": { "text": "Do not use casts between essentially character types and essentially floating types [MISRAC2012-RULE_10_5-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use casts between essentially character types and essentially floating types [MISRAC2012-RULE_10_5-c]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 10.5 (Advisory) The value of an expression should not be cast to an inappropriate essential type" ] } }, { "id": "MISRAC2012-RULE_14_1-a", "name": "A loop counter in a 'for' loop shall not have essentially floating type", "shortDescription": { "text": "A loop counter in a 'for' loop shall not have essentially floating type" }, "fullDescription": { "text": "A loop counter in a 'for' loop shall not have essentially floating type [MISRAC2012-RULE_14_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A loop counter in a 'for' loop shall not have essentially floating type [MISRAC2012-RULE_14_1-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 14.1 (Required) A loop counter shall not have essentially floating type" ] } }, { "id": "MISRAC2012-RULE_14_1-b", "name": "A loop counter in 'while' and 'do-while' loops shall not have essentially floating type", "shortDescription": { "text": "A loop counter in 'while' and 'do-while' loops shall not have essentially floating type" }, "fullDescription": { "text": "A loop counter in 'while' and 'do-while' loops shall not have essentially floating type [MISRAC2012-RULE_14_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A loop counter in 'while' and 'do-while' loops shall not have essentially floating type [MISRAC2012-RULE_14_1-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 14.1 (Required) A loop counter shall not have essentially floating type" ] } }, { "id": "MISRAC2012-RULE_10_6-a", "name": "The value of a composite expression shall not be assigned to an object with wider essential type", "shortDescription": { "text": "The value of a composite expression shall not be assigned to an object with wider essential type" }, "fullDescription": { "text": "The value of a composite expression shall not be assigned to an object with wider essential type [MISRAC2012-RULE_10_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of a composite expression shall not be assigned to an object with wider essential type [MISRAC2012-RULE_10_6-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 10.6 (Required) The value of a composite expression shall not be assigned to an object with wider essential type" ] } }, { "id": "MISRAC2012-RULE_14_2-a", "name": "There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body", "shortDescription": { "text": "There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" }, "fullDescription": { "text": "There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body [MISRAC2012-RULE_14_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body [MISRAC2012-RULE_14_2-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 14.2 (Required) A for loop shall be well-formed" ] } }, { "id": "MISRAC2012-RULE_14_2-b", "name": "The first clause of a 'for' loop shall be well-formed", "shortDescription": { "text": "The first clause of a 'for' loop shall be well-formed" }, "fullDescription": { "text": "The first clause of a 'for' loop shall be well-formed [MISRAC2012-RULE_14_2-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The first clause of a 'for' loop shall be well-formed [MISRAC2012-RULE_14_2-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 14.2 (Required) A for loop shall be well-formed" ] } }, { "id": "MISRAC2012-RULE_14_2-c", "name": "The second clause of a 'for' loop shall be well-formed", "shortDescription": { "text": "The second clause of a 'for' loop shall be well-formed" }, "fullDescription": { "text": "The second clause of a 'for' loop shall be well-formed [MISRAC2012-RULE_14_2-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The second clause of a 'for' loop shall be well-formed [MISRAC2012-RULE_14_2-c]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 14.2 (Required) A for loop shall be well-formed" ] } }, { "id": "MISRAC2012-RULE_14_2-d", "name": "The third clause of a 'for' statement shall be well-formed", "shortDescription": { "text": "The third clause of a 'for' statement shall be well-formed" }, "fullDescription": { "text": "The third clause of a 'for' statement shall be well-formed [MISRAC2012-RULE_14_2-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The third clause of a 'for' statement shall be well-formed [MISRAC2012-RULE_14_2-d]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 14.2 (Required) A for loop shall be well-formed" ] } }, { "id": "MISRAC2012-RULE_7_4-a", "name": "A string literal shall not be modified", "shortDescription": { "text": "A string literal shall not be modified" }, "fullDescription": { "text": "A string literal shall not be modified [MISRAC2012-RULE_7_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A string literal shall not be modified [MISRAC2012-RULE_7_4-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 7.4 (Required) A string literal shall not be assigned to an object unless the object's type is \"pointer to const-qualified char\"" ] } }, { "id": "MISRAC2012-RULE_10_7-a", "name": "If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type", "shortDescription": { "text": "If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" }, "fullDescription": { "text": "If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type [MISRAC2012-RULE_10_7-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type [MISRAC2012-RULE_10_7-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 10.7 (Required) If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" ] } }, { "id": "MISRAC2012-RULE_10_7-b", "name": "If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type", "shortDescription": { "text": "If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" }, "fullDescription": { "text": "If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type [MISRAC2012-RULE_10_7-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type [MISRAC2012-RULE_10_7-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 10.7 (Required) If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" ] } }, { "id": "MISRAC2012-RULE_14_3-ac", "name": "Avoid conditions that always evaluate to the same value", "shortDescription": { "text": "Avoid conditions that always evaluate to the same value" }, "fullDescription": { "text": "Avoid conditions that always evaluate to the same value [MISRAC2012-RULE_14_3-ac]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid conditions that always evaluate to the same value [MISRAC2012-RULE_14_3-ac]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 14.3 (Required) Controlling expressions shall not be invariant" ] } }, { "id": "MISRAC2012-RULE_10_8-a", "name": "The value of a composite expression shall not be cast to a different essential type category or a wider essential type", "shortDescription": { "text": "The value of a composite expression shall not be cast to a different essential type category or a wider essential type" }, "fullDescription": { "text": "The value of a composite expression shall not be cast to a different essential type category or a wider essential type [MISRAC2012-RULE_10_8-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of a composite expression shall not be cast to a different essential type category or a wider essential type [MISRAC2012-RULE_10_8-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 10.8 (Required) The value of a composite expression shall not be cast to a different essential type category or a wider essential type" ] } }, { "id": "MISRAC2012-RULE_14_4-a", "name": "Tests of a value against zero should be made explicit, unless the operand is effectively Boolean", "shortDescription": { "text": "Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" }, "fullDescription": { "text": "Tests of a value against zero should be made explicit, unless the operand is effectively Boolean [MISRAC2012-RULE_14_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Tests of a value against zero should be made explicit, unless the operand is effectively Boolean [MISRAC2012-RULE_14_4-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 14.4 (Required) The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type" ] } }, { "id": "MISRAC2012-RULE_18_1-a", "name": "Avoid accessing arrays out of bounds", "shortDescription": { "text": "Avoid accessing arrays out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays out of bounds [MISRAC2012-RULE_18_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays out of bounds [MISRAC2012-RULE_18_1-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 18.1 (Required) A pointer resulting from arithmetic on a pointer operand shall address an element of the same array as that pointer operand" ] } }, { "id": "MISRAC2012-RULE_18_1-b", "name": "Avoid accessing arrays and pointers out of bounds", "shortDescription": { "text": "Avoid accessing arrays and pointers out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays and pointers out of bounds [MISRAC2012-RULE_18_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays and pointers out of bounds [MISRAC2012-RULE_18_1-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 18.1 (Required) A pointer resulting from arithmetic on a pointer operand shall address an element of the same array as that pointer operand" ] } }, { "id": "MISRAC2012-RULE_18_1-c", "name": "A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array", "shortDescription": { "text": "A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" }, "fullDescription": { "text": "A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array [MISRAC2012-RULE_18_1-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array [MISRAC2012-RULE_18_1-c]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 18.1 (Required) A pointer resulting from arithmetic on a pointer operand shall address an element of the same array as that pointer operand" ] } }, { "id": "MISRAC2012-RULE_18_2-a", "name": "Do not subtract two pointers that do not address elements of the same array", "shortDescription": { "text": "Do not subtract two pointers that do not address elements of the same array" }, "fullDescription": { "text": "Do not subtract two pointers that do not address elements of the same array [MISRAC2012-RULE_18_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not subtract two pointers that do not address elements of the same array [MISRAC2012-RULE_18_2-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 18.2 (Required) Subtraction between pointers shall only be applied to pointers that address elements of the same array" ] } }, { "id": "MISRAC2012-RULE_18_3-a", "name": "Do not compare two unrelated pointers", "shortDescription": { "text": "Do not compare two unrelated pointers" }, "fullDescription": { "text": "Do not compare two unrelated pointers [MISRAC2012-RULE_18_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not compare two unrelated pointers [MISRAC2012-RULE_18_3-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 18.3 (Required) The relational operators >, >=, < and <= shall not be applied to expressions of pointer type except where they point into the same object" ] } }, { "id": "MISRAC2012-RULE_18_4-a", "name": "The +, -, += and -= operators should not be applied to an expression of pointer type", "shortDescription": { "text": "The +, -, += and -= operators should not be applied to an expression of pointer type" }, "fullDescription": { "text": "The +, -, += and -= operators should not be applied to an expression of pointer type [MISRAC2012-RULE_18_4-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The +, -, += and -= operators should not be applied to an expression of pointer type [MISRAC2012-RULE_18_4-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 18.4 (Advisory) The +, -, += and -= operators should not be applied to an expression of pointer type" ] } }, { "id": "MISRAC2012-RULE_18_5-a", "name": "The declaration of objects should contain no more than 2 levels of pointer indirection", "shortDescription": { "text": "The declaration of objects should contain no more than 2 levels of pointer indirection" }, "fullDescription": { "text": "The declaration of objects should contain no more than 2 levels of pointer indirection [MISRAC2012-RULE_18_5-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The declaration of objects should contain no more than 2 levels of pointer indirection [MISRAC2012-RULE_18_5-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 18.5 (Advisory) Declarations should contain no more than two levels of pointer nesting" ] } }, { "id": "MISRAC2012-RULE_18_6-a", "name": "The address of an object with automatic storage shall not be returned from a function", "shortDescription": { "text": "The address of an object with automatic storage shall not be returned from a function" }, "fullDescription": { "text": "The address of an object with automatic storage shall not be returned from a function [MISRAC2012-RULE_18_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The address of an object with automatic storage shall not be returned from a function [MISRAC2012-RULE_18_6-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 18.6 (Required) The address of an object with automatic or thread-local storage shall not be copied to another object that persists after the first object has ceased to exist" ] } }, { "id": "MISRAC2012-RULE_18_6-b", "name": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist", "shortDescription": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" }, "fullDescription": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist [MISRAC2012-RULE_18_6-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist [MISRAC2012-RULE_18_6-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 18.6 (Required) The address of an object with automatic or thread-local storage shall not be copied to another object that persists after the first object has ceased to exist" ] } }, { "id": "MISRAC2012-RULE_18_7-a", "name": "Flexible array members shall not be declared", "shortDescription": { "text": "Flexible array members shall not be declared" }, "fullDescription": { "text": "Flexible array members shall not be declared [MISRAC2012-RULE_18_7-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Flexible array members shall not be declared [MISRAC2012-RULE_18_7-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 18.7 (Required) Flexible array members shall not be declared" ] } }, { "id": "MISRAC2012-RULE_18_8-a", "name": "Variable-length arrays should not be used", "shortDescription": { "text": "Variable-length arrays should not be used" }, "fullDescription": { "text": "Variable-length arrays should not be used [MISRAC2012-RULE_18_8-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Variable-length arrays should not be used [MISRAC2012-RULE_18_8-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 18.8 (Required) Variable-length arrays shall not be used" ] } }, { "id": "MISRAC2012-RULE_3_2-a", "name": "Line-splicing shall not be used in \/\/ comments", "shortDescription": { "text": "Line-splicing shall not be used in \/\/ comments" }, "fullDescription": { "text": "Line-splicing shall not be used in \/\/ comments [MISRAC2012-RULE_3_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Line-splicing shall not be used in \/\/ comments [MISRAC2012-RULE_3_2-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 3.2 (Required) Line-splicing shall not be used in \/\/ comments" ] } }, { "id": "MISRAC2012-RULE_3_1-a", "name": "The character sequence \/* shall not be used within a C-style comment", "shortDescription": { "text": "The character sequence \/* shall not be used within a C-style comment" }, "fullDescription": { "text": "The character sequence \/* shall not be used within a C-style comment [MISRAC2012-RULE_3_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The character sequence \/* shall not be used within a C-style comment [MISRAC2012-RULE_3_1-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 3.1 (Required) The character sequences \/* and \/\/ shall not be used within a comment" ] } }, { "id": "MISRAC2012-RULE_3_1-b", "name": "The character sequence \/\/ shall not be used within a C-style comment", "shortDescription": { "text": "The character sequence \/\/ shall not be used within a C-style comment" }, "fullDescription": { "text": "The character sequence \/\/ shall not be used within a C-style comment [MISRAC2012-RULE_3_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The character sequence \/\/ shall not be used within a C-style comment [MISRAC2012-RULE_3_1-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 3.1 (Required) The character sequences \/* and \/\/ shall not be used within a comment" ] } }, { "id": "MISRAC2012-RULE_3_1-c", "name": "The character sequence \/* shall not be used within a C++-style comment", "shortDescription": { "text": "The character sequence \/* shall not be used within a C++-style comment" }, "fullDescription": { "text": "The character sequence \/* shall not be used within a C++-style comment [MISRAC2012-RULE_3_1-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The character sequence \/* shall not be used within a C++-style comment [MISRAC2012-RULE_3_1-c]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 3.1 (Required) The character sequences \/* and \/\/ shall not be used within a comment" ] } }, { "id": "MISRAC2012-RULE_7_2-a", "name": "A 'U' suffix shall be applied to all constants of unsigned type", "shortDescription": { "text": "A 'U' suffix shall be applied to all constants of unsigned type" }, "fullDescription": { "text": "A 'U' suffix shall be applied to all constants of unsigned type [MISRAC2012-RULE_7_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A 'U' suffix shall be applied to all constants of unsigned type [MISRAC2012-RULE_7_2-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 7.2 (Required) A \"u\" or \"U\" suffix shall be applied to all integer constants that are represented in an unsigned type" ] } }, { "id": "MISRAC2012-RULE_10_1-a", "name": "An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value", "shortDescription": { "text": "An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" }, "fullDescription": { "text": "An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value [MISRAC2012-RULE_10_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value [MISRAC2012-RULE_10_1-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 10.1 (Required) Operands shall not be of an inappropriate essential type" ] } }, { "id": "MISRAC2012-RULE_10_1-b", "name": "An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value", "shortDescription": { "text": "An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" }, "fullDescription": { "text": "An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value [MISRAC2012-RULE_10_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value [MISRAC2012-RULE_10_1-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 10.1 (Required) Operands shall not be of an inappropriate essential type" ] } }, { "id": "MISRAC2012-RULE_10_1-c", "name": "An operand of essentially character type should not be used where an operand is interpreted as a numeric value", "shortDescription": { "text": "An operand of essentially character type should not be used where an operand is interpreted as a numeric value" }, "fullDescription": { "text": "An operand of essentially character type should not be used where an operand is interpreted as a numeric value [MISRAC2012-RULE_10_1-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An operand of essentially character type should not be used where an operand is interpreted as a numeric value [MISRAC2012-RULE_10_1-c]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 10.1 (Required) Operands shall not be of an inappropriate essential type" ] } }, { "id": "MISRAC2012-RULE_10_1-d", "name": "An operand of essentially enum type should not be used in an arithmetic operation", "shortDescription": { "text": "An operand of essentially enum type should not be used in an arithmetic operation" }, "fullDescription": { "text": "An operand of essentially enum type should not be used in an arithmetic operation [MISRAC2012-RULE_10_1-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An operand of essentially enum type should not be used in an arithmetic operation [MISRAC2012-RULE_10_1-d]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 10.1 (Required) Operands shall not be of an inappropriate essential type" ] } }, { "id": "MISRAC2012-RULE_10_1-e", "name": "Shift and bitwise operations should not be performed on operands of essentially signed or enum type", "shortDescription": { "text": "Shift and bitwise operations should not be performed on operands of essentially signed or enum type" }, "fullDescription": { "text": "Shift and bitwise operations should not be performed on operands of essentially signed or enum type [MISRAC2012-RULE_10_1-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Shift and bitwise operations should not be performed on operands of essentially signed or enum type [MISRAC2012-RULE_10_1-e]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 10.1 (Required) Operands shall not be of an inappropriate essential type" ] } }, { "id": "MISRAC2012-RULE_10_1-f", "name": "An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator", "shortDescription": { "text": "An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" }, "fullDescription": { "text": "An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator [MISRAC2012-RULE_10_1-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator [MISRAC2012-RULE_10_1-f]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 10.1 (Required) Operands shall not be of an inappropriate essential type" ] } }, { "id": "MISRAC2012-RULE_10_1-g", "name": "An operand of essentially unsigned type should not be used as the operand to the unary minus operator", "shortDescription": { "text": "An operand of essentially unsigned type should not be used as the operand to the unary minus operator" }, "fullDescription": { "text": "An operand of essentially unsigned type should not be used as the operand to the unary minus operator [MISRAC2012-RULE_10_1-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An operand of essentially unsigned type should not be used as the operand to the unary minus operator [MISRAC2012-RULE_10_1-g]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 10.1 (Required) Operands shall not be of an inappropriate essential type" ] } }, { "id": "MISRAC2012-RULE_7_3-a", "name": "Use capital 'L' instead of lowercase 'l' to indicate long", "shortDescription": { "text": "Use capital 'L' instead of lowercase 'l' to indicate long" }, "fullDescription": { "text": "Use capital 'L' instead of lowercase 'l' to indicate long [MISRAC2012-RULE_7_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use capital 'L' instead of lowercase 'l' to indicate long [MISRAC2012-RULE_7_3-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 7.3 (Required) The lowercase character \"l\" shall not be used in a literal suffix" ] } }, { "id": "MISRAC2012-RULE_10_2-a", "name": "Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations", "shortDescription": { "text": "Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" }, "fullDescription": { "text": "Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations [MISRAC2012-RULE_10_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations [MISRAC2012-RULE_10_2-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 10.2 (Required) Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" ] } }, { "id": "MISRAC2012-RULE_10_3-a", "name": "The value of an expression shall not be assigned to an object with a narrower essential type", "shortDescription": { "text": "The value of an expression shall not be assigned to an object with a narrower essential type" }, "fullDescription": { "text": "The value of an expression shall not be assigned to an object with a narrower essential type [MISRAC2012-RULE_10_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of an expression shall not be assigned to an object with a narrower essential type [MISRAC2012-RULE_10_3-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 10.3 (Required) The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category" ] } }, { "id": "MISRAC2012-RULE_10_3-b", "name": "The value of an expression shall not be assigned to an object of a different essential type category", "shortDescription": { "text": "The value of an expression shall not be assigned to an object of a different essential type category" }, "fullDescription": { "text": "The value of an expression shall not be assigned to an object of a different essential type category [MISRAC2012-RULE_10_3-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of an expression shall not be assigned to an object of a different essential type category [MISRAC2012-RULE_10_3-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 10.3 (Required) The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category" ] } }, { "id": "MISRAC2012-RULE_7_1-a", "name": "Octal constants (other than zero) shall not be used", "shortDescription": { "text": "Octal constants (other than zero) shall not be used" }, "fullDescription": { "text": "Octal constants (other than zero) shall not be used [MISRAC2012-RULE_7_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Octal constants (other than zero) shall not be used [MISRAC2012-RULE_7_1-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 7.1 (Required) Octal constants shall not be used" ] } }, { "id": "MISRAC2012-RULE_21_14-a", "name": "The Standard Library function memcmp shall not be used to compare null terminated strings", "shortDescription": { "text": "The Standard Library function memcmp shall not be used to compare null terminated strings" }, "fullDescription": { "text": "The Standard Library function memcmp shall not be used to compare null terminated strings [MISRAC2012-RULE_21_14-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The Standard Library function memcmp shall not be used to compare null terminated strings [MISRAC2012-RULE_21_14-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.14 (Required) The Standard Library function memcmp shall not be used to compare null terminated strings" ] } }, { "id": "MISRAC2012-RULE_21_4-a", "name": "The facilities provided by <setjmp.h> should not be used", "shortDescription": { "text": "The facilities provided by <setjmp.h> should not be used" }, "fullDescription": { "text": "The facilities provided by <setjmp.h> should not be used [MISRAC2012-RULE_21_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The facilities provided by <setjmp.h> should not be used [MISRAC2012-RULE_21_4-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.4 (Required) The standard header file <setjmp.h> shall not be used" ] } }, { "id": "MISRAC2012-RULE_21_4-b", "name": "The standard header files <setjmp.h> or <csetjmp> shall not be used", "shortDescription": { "text": "The standard header files <setjmp.h> or <csetjmp> shall not be used" }, "fullDescription": { "text": "The standard header files <setjmp.h> or <csetjmp> shall not be used [MISRAC2012-RULE_21_4-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The standard header files <setjmp.h> or <csetjmp> shall not be used [MISRAC2012-RULE_21_4-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.4 (Required) The standard header file <setjmp.h> shall not be used" ] } }, { "id": "MISRAC2012-RULE_21_13-a", "name": "Do not pass incorrect values to ctype.h library functions", "shortDescription": { "text": "Do not pass incorrect values to ctype.h library functions" }, "fullDescription": { "text": "Do not pass incorrect values to ctype.h library functions [MISRAC2012-RULE_21_13-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not pass incorrect values to ctype.h library functions [MISRAC2012-RULE_21_13-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.13 (Mandatory) Any value passed to a function in <ctype.h> shall be representable as an unsigned char or be the value EOF" ] } }, { "id": "MISRAC2012-RULE_21_5-a", "name": "The standard header files <signal.h> or <csignal> shall not be used", "shortDescription": { "text": "The standard header files <signal.h> or <csignal> shall not be used" }, "fullDescription": { "text": "The standard header files <signal.h> or <csignal> shall not be used [MISRAC2012-RULE_21_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The standard header files <signal.h> or <csignal> shall not be used [MISRAC2012-RULE_21_5-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.5 (Required) The standard header file <signal.h> shall not be used" ] } }, { "id": "MISRAC2012-RULE_21_5-b", "name": "The signal handling facilities of <signal.h> shall not be used", "shortDescription": { "text": "The signal handling facilities of <signal.h> shall not be used" }, "fullDescription": { "text": "The signal handling facilities of <signal.h> shall not be used [MISRAC2012-RULE_21_5-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The signal handling facilities of <signal.h> shall not be used [MISRAC2012-RULE_21_5-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.5 (Required) The standard header file <signal.h> shall not be used" ] } }, { "id": "MISRAC2012-RULE_21_12-a", "name": "The features provided by <fenv.h> should not be used", "shortDescription": { "text": "The features provided by <fenv.h> should not be used" }, "fullDescription": { "text": "The features provided by <fenv.h> should not be used [MISRAC2012-RULE_21_12-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The features provided by <fenv.h> should not be used [MISRAC2012-RULE_21_12-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.12 (Required) The standard header file <fenv.h> shall not be used" ] } }, { "id": "MISRAC2012-RULE_21_6-a", "name": "The input\/output functions from the 'cstdio' and 'cwchar' libraries should not be used", "shortDescription": { "text": "The input\/output functions from the 'cstdio' and 'cwchar' libraries should not be used" }, "fullDescription": { "text": "The input\/output functions from the 'cstdio' and 'cwchar' libraries should not be used [MISRAC2012-RULE_21_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The input\/output functions from the 'cstdio' and 'cwchar' libraries should not be used [MISRAC2012-RULE_21_6-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.6 (Required) The Standard Library input\/output functions shall not be used" ] } }, { "id": "MISRAC2012-RULE_21_11-a", "name": "The standard header file <tgmath.h> shall not be used", "shortDescription": { "text": "The standard header file <tgmath.h> shall not be used" }, "fullDescription": { "text": "The standard header file <tgmath.h> shall not be used [MISRAC2012-RULE_21_11-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The standard header file <tgmath.h> shall not be used [MISRAC2012-RULE_21_11-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.11 (Required) The standard header file <tgmath.h> shall not be used" ] } }, { "id": "MISRAC2012-RULE_21_7-a", "name": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used", "shortDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" }, "fullDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [MISRAC2012-RULE_21_7-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [MISRAC2012-RULE_21_7-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.7 (Required) The atof, atoi, atol and atoll functions of <stdlib.h> shall not be used" ] } }, { "id": "MISRAC2012-RULE_21_10-a", "name": "The standard header files <time.h> or <ctime> shall not be used", "shortDescription": { "text": "The standard header files <time.h> or <ctime> shall not be used" }, "fullDescription": { "text": "The standard header files <time.h> or <ctime> shall not be used [MISRAC2012-RULE_21_10-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The standard header files <time.h> or <ctime> shall not be used [MISRAC2012-RULE_21_10-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.10 (Required) The Standard Library time and date functions shall not be used" ] } }, { "id": "MISRAC2012-RULE_21_8-a", "name": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used", "shortDescription": { "text": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" }, "fullDescription": { "text": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [MISRAC2012-RULE_21_8-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [MISRAC2012-RULE_21_8-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.8 (Required) The Standard Library termination functions of <stdlib.h> shall not be used" ] } }, { "id": "MISRAC2012-RULE_21_8-b", "name": "The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used", "shortDescription": { "text": "The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" }, "fullDescription": { "text": "The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [MISRAC2012-RULE_21_8-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [MISRAC2012-RULE_21_8-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.8 (Required) The Standard Library termination functions of <stdlib.h> shall not be used" ] } }, { "id": "MISRAC2012-RULE_21_8-c", "name": "The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used", "shortDescription": { "text": "The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" }, "fullDescription": { "text": "The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used [MISRAC2012-RULE_21_8-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used [MISRAC2012-RULE_21_8-c]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.8 (Required) The Standard Library termination functions of <stdlib.h> shall not be used" ] } }, { "id": "MISRAC2012-RULE_21_9-a", "name": "The library functions bsearch and qsort of <stdlib.h> shall not be used", "shortDescription": { "text": "The library functions bsearch and qsort of <stdlib.h> shall not be used" }, "fullDescription": { "text": "The library functions bsearch and qsort of <stdlib.h> shall not be used [MISRAC2012-RULE_21_9-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The library functions bsearch and qsort of <stdlib.h> shall not be used [MISRAC2012-RULE_21_9-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.9 (Required) The library functions bsearch and qsort of <stdlib.h> shall not be used" ] } }, { "id": "MISRAC2012-RULE_21_19-a", "name": "The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type", "shortDescription": { "text": "The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" }, "fullDescription": { "text": "The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type [MISRAC2012-RULE_21_19-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type [MISRAC2012-RULE_21_19-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.19 (Mandatory) The pointers returned by the Standard Library functions localeconv, getenv, setlocale or, strerror shall only be used as if they have pointer to const-qualified type" ] } }, { "id": "MISRAC2012-RULE_21_19-b", "name": "Strings pointed by members of the structure 'lconv' should not be modified", "shortDescription": { "text": "Strings pointed by members of the structure 'lconv' should not be modified" }, "fullDescription": { "text": "Strings pointed by members of the structure 'lconv' should not be modified [MISRAC2012-RULE_21_19-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Strings pointed by members of the structure 'lconv' should not be modified [MISRAC2012-RULE_21_19-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.19 (Mandatory) The pointers returned by the Standard Library functions localeconv, getenv, setlocale or, strerror shall only be used as if they have pointer to const-qualified type" ] } }, { "id": "MISRAC2012-RULE_21_18-a", "name": "The size_t argument passed to any function in string.h shall have an appropriate value", "shortDescription": { "text": "The size_t argument passed to any function in string.h shall have an appropriate value" }, "fullDescription": { "text": "The size_t argument passed to any function in string.h shall have an appropriate value [MISRAC2012-RULE_21_18-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The size_t argument passed to any function in string.h shall have an appropriate value [MISRAC2012-RULE_21_18-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.18 (Mandatory) The size_t argument passed to any function in <string.h> shall have an appropriate value" ] } }, { "id": "MISRAC2012-RULE_21_17-a", "name": "Avoid overflow due to reading a not zero terminated string", "shortDescription": { "text": "Avoid overflow due to reading a not zero terminated string" }, "fullDescription": { "text": "Avoid overflow due to reading a not zero terminated string [MISRAC2012-RULE_21_17-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow due to reading a not zero terminated string [MISRAC2012-RULE_21_17-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.17 (Mandatory) Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters" ] } }, { "id": "MISRAC2012-RULE_21_17-b", "name": "Avoid overflow when writing to a buffer", "shortDescription": { "text": "Avoid overflow when writing to a buffer" }, "fullDescription": { "text": "Avoid overflow when writing to a buffer [MISRAC2012-RULE_21_17-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when writing to a buffer [MISRAC2012-RULE_21_17-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.17 (Mandatory) Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters" ] } }, { "id": "MISRAC2012-RULE_21_16-a", "name": "The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type", "shortDescription": { "text": "The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" }, "fullDescription": { "text": "The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type [MISRAC2012-RULE_21_16-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type [MISRAC2012-RULE_21_16-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.16 (Required) The pointer arguments to the Standard Library function memcmp shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" ] } }, { "id": "MISRAC2012-RULE_21_15-a", "name": "The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types", "shortDescription": { "text": "The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types" }, "fullDescription": { "text": "The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types [MISRAC2012-RULE_21_15-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types [MISRAC2012-RULE_21_15-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.15 (Required) The pointer arguments to the Standard Library functions memcpy, memmove and memcmp shall be pointers to qualified or unqualified versions of compatible types" ] } }, { "id": "MISRAC2012-RULE_21_1-a", "name": "Do not #define or #undef identifiers with names which start with underscore", "shortDescription": { "text": "Do not #define or #undef identifiers with names which start with underscore" }, "fullDescription": { "text": "Do not #define or #undef identifiers with names which start with underscore [MISRAC2012-RULE_21_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not #define or #undef identifiers with names which start with underscore [MISRAC2012-RULE_21_1-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.1 (Required) #define and #undef shall not be used on a reserved identifier or reserved macro name" ] } }, { "id": "MISRAC2012-RULE_21_1-b", "name": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)", "shortDescription": { "text": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" }, "fullDescription": { "text": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code) [MISRAC2012-RULE_21_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code) [MISRAC2012-RULE_21_1-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.1 (Required) #define and #undef shall not be used on a reserved identifier or reserved macro name" ] } }, { "id": "MISRAC2012-RULE_21_1-c", "name": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)", "shortDescription": { "text": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)" }, "fullDescription": { "text": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code) [MISRAC2012-RULE_21_1-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code) [MISRAC2012-RULE_21_1-c]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.1 (Required) #define and #undef shall not be used on a reserved identifier or reserved macro name" ] } }, { "id": "MISRAC2012-RULE_21_1-d", "name": "Do not #define nor #undef identifier 'defined'", "shortDescription": { "text": "Do not #define nor #undef identifier 'defined'" }, "fullDescription": { "text": "Do not #define nor #undef identifier 'defined' [MISRAC2012-RULE_21_1-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not #define nor #undef identifier 'defined' [MISRAC2012-RULE_21_1-d]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.1 (Required) #define and #undef shall not be used on a reserved identifier or reserved macro name" ] } }, { "id": "MISRAC2012-RULE_21_2-a", "name": "The names of standard library macros, objects and functions shall not be reused", "shortDescription": { "text": "The names of standard library macros, objects and functions shall not be reused" }, "fullDescription": { "text": "The names of standard library macros, objects and functions shall not be reused [MISRAC2012-RULE_21_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The names of standard library macros, objects and functions shall not be reused [MISRAC2012-RULE_21_2-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.2 (Required) A reserved identifier or macro name shall not be declared" ] } }, { "id": "MISRAC2012-RULE_21_2-b", "name": "The names of standard library macros, objects and functions shall not be reused (C90)", "shortDescription": { "text": "The names of standard library macros, objects and functions shall not be reused (C90)" }, "fullDescription": { "text": "The names of standard library macros, objects and functions shall not be reused (C90) [MISRAC2012-RULE_21_2-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The names of standard library macros, objects and functions shall not be reused (C90) [MISRAC2012-RULE_21_2-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.2 (Required) A reserved identifier or macro name shall not be declared" ] } }, { "id": "MISRAC2012-RULE_21_2-c", "name": "The names of standard library macros, objects and functions shall not be reused (C99)", "shortDescription": { "text": "The names of standard library macros, objects and functions shall not be reused (C99)" }, "fullDescription": { "text": "The names of standard library macros, objects and functions shall not be reused (C99) [MISRAC2012-RULE_21_2-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The names of standard library macros, objects and functions shall not be reused (C99) [MISRAC2012-RULE_21_2-c]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.2 (Required) A reserved identifier or macro name shall not be declared" ] } }, { "id": "MISRAC2012-RULE_21_3-a", "name": "Dynamic heap memory allocation shall not be used", "shortDescription": { "text": "Dynamic heap memory allocation shall not be used" }, "fullDescription": { "text": "Dynamic heap memory allocation shall not be used [MISRAC2012-RULE_21_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Dynamic heap memory allocation shall not be used [MISRAC2012-RULE_21_3-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.3 (Required) The memory allocation and deallocation functions of <stdlib.h> shall not be used" ] } }, { "id": "MISRAC2012-RULE_13_1-a", "name": "Initializer lists shall not contain persistent side effects", "shortDescription": { "text": "Initializer lists shall not contain persistent side effects" }, "fullDescription": { "text": "Initializer lists shall not contain persistent side effects [MISRAC2012-RULE_13_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Initializer lists shall not contain persistent side effects [MISRAC2012-RULE_13_1-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 13.1 (Required) Initializer lists shall not contain persistent side effects" ] } }, { "id": "MISRAC2012-RULE_13_2-a", "name": "The value of an expression shall be the same under any order of evaluation that the standard permits", "shortDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits" }, "fullDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [MISRAC2012-RULE_13_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [MISRAC2012-RULE_13_2-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 13.2 (Required) The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders and shall be independent from thread interleaving" ] } }, { "id": "MISRAC2012-RULE_13_2-b", "name": "Don't write code that depends on the order of evaluation of function arguments", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function arguments" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function arguments [MISRAC2012-RULE_13_2-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of function arguments [MISRAC2012-RULE_13_2-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 13.2 (Required) The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders and shall be independent from thread interleaving" ] } }, { "id": "MISRAC2012-RULE_13_2-c", "name": "Don't write code that depends on the order of evaluation of function designator and function arguments", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments [MISRAC2012-RULE_13_2-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments [MISRAC2012-RULE_13_2-c]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 13.2 (Required) The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders and shall be independent from thread interleaving" ] } }, { "id": "MISRAC2012-RULE_13_2-d", "name": "Don't write code that depends on the order of evaluation of expression that involves a function call", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call [MISRAC2012-RULE_13_2-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call [MISRAC2012-RULE_13_2-d]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 13.2 (Required) The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders and shall be independent from thread interleaving" ] } }, { "id": "MISRAC2012-RULE_13_2-e", "name": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression", "shortDescription": { "text": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" }, "fullDescription": { "text": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression [MISRAC2012-RULE_13_2-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression [MISRAC2012-RULE_13_2-e]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 13.2 (Required) The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders and shall be independent from thread interleaving" ] } }, { "id": "MISRAC2012-RULE_13_2-f", "name": "Do not use more than one volatile between two adjacent sequence points", "shortDescription": { "text": "Do not use more than one volatile between two adjacent sequence points" }, "fullDescription": { "text": "Do not use more than one volatile between two adjacent sequence points [MISRAC2012-RULE_13_2-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use more than one volatile between two adjacent sequence points [MISRAC2012-RULE_13_2-f]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 13.2 (Required) The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders and shall be independent from thread interleaving" ] } }, { "id": "MISRAC2012-RULE_13_2-g", "name": "Don't write code that depends on the order of evaluation of function calls", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function calls" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function calls [MISRAC2012-RULE_13_2-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of function calls [MISRAC2012-RULE_13_2-g]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 13.2 (Required) The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders and shall be independent from thread interleaving" ] } }, { "id": "MISRAC2012-RULE_13_3-a", "name": "A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects", "shortDescription": { "text": "A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects" }, "fullDescription": { "text": "A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects [MISRAC2012-RULE_13_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects [MISRAC2012-RULE_13_3-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 13.3 (Advisory) A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator" ] } }, { "id": "MISRAC2012-RULE_13_4-a", "name": "The result of a built-in assignment operator should not be used", "shortDescription": { "text": "The result of a built-in assignment operator should not be used" }, "fullDescription": { "text": "The result of a built-in assignment operator should not be used [MISRAC2012-RULE_13_4-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The result of a built-in assignment operator should not be used [MISRAC2012-RULE_13_4-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 13.4 (Advisory) The result of an assignment operator should not be used" ] } }, { "id": "MISRAC2012-RULE_13_5-a", "name": "The right-hand operand of a logical && or || operator shall not contain side effects", "shortDescription": { "text": "The right-hand operand of a logical && or || operator shall not contain side effects" }, "fullDescription": { "text": "The right-hand operand of a logical && or || operator shall not contain side effects [MISRAC2012-RULE_13_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The right-hand operand of a logical && or || operator shall not contain side effects [MISRAC2012-RULE_13_5-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 13.5 (Required) The right hand operand of a logical && or || operator shall not contain persistent side effects" ] } }, { "id": "MISRAC2012-RULE_17_1-a", "name": "The identifiers va_list, va_arg, va_start, va_end, va_copy should not be used", "shortDescription": { "text": "The identifiers va_list, va_arg, va_start, va_end, va_copy should not be used" }, "fullDescription": { "text": "The identifiers va_list, va_arg, va_start, va_end, va_copy should not be used [MISRAC2012-RULE_17_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The identifiers va_list, va_arg, va_start, va_end, va_copy should not be used [MISRAC2012-RULE_17_1-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 17.1 (Required) The features of <stdarg.h> shall not be used" ] } }, { "id": "MISRAC2012-RULE_17_1-b", "name": "The identifiers va_list, va_arg, va_start, va_end should not be used", "shortDescription": { "text": "The identifiers va_list, va_arg, va_start, va_end should not be used" }, "fullDescription": { "text": "The identifiers va_list, va_arg, va_start, va_end should not be used [MISRAC2012-RULE_17_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The identifiers va_list, va_arg, va_start, va_end should not be used [MISRAC2012-RULE_17_1-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 17.1 (Required) The features of <stdarg.h> shall not be used" ] } }, { "id": "MISRAC2012-RULE_21_21-a", "name": "The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used", "shortDescription": { "text": "The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used" }, "fullDescription": { "text": "The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used [MISRAC2012-RULE_21_21-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used [MISRAC2012-RULE_21_21-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.21 (Required) The Standard Library function system of <stdlib.h> shall not be used" ] } }, { "id": "MISRAC2012-RULE_13_6-a", "name": "The operand of the sizeof operator shall not contain any expression which has side effects", "shortDescription": { "text": "The operand of the sizeof operator shall not contain any expression which has side effects" }, "fullDescription": { "text": "The operand of the sizeof operator shall not contain any expression which has side effects [MISRAC2012-RULE_13_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The operand of the sizeof operator shall not contain any expression which has side effects [MISRAC2012-RULE_13_6-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 13.6 (Required) The operand of the sizeof operator shall not contain any expression which has potential side effects" ] } }, { "id": "MISRAC2012-RULE_13_6-b", "name": "Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator", "shortDescription": { "text": "Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" }, "fullDescription": { "text": "Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator [MISRAC2012-RULE_13_6-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator [MISRAC2012-RULE_13_6-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 13.6 (Required) The operand of the sizeof operator shall not contain any expression which has potential side effects" ] } }, { "id": "MISRAC2012-RULE_13_6-c", "name": "The function call shall not be the operand of the sizeof operator", "shortDescription": { "text": "The function call shall not be the operand of the sizeof operator" }, "fullDescription": { "text": "The function call shall not be the operand of the sizeof operator [MISRAC2012-RULE_13_6-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The function call shall not be the operand of the sizeof operator [MISRAC2012-RULE_13_6-c]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 13.6 (Required) The operand of the sizeof operator shall not contain any expression which has potential side effects" ] } }, { "id": "MISRAC2012-RULE_17_2-a", "name": "Functions shall not call themselves, either directly or indirectly", "shortDescription": { "text": "Functions shall not call themselves, either directly or indirectly" }, "fullDescription": { "text": "Functions shall not call themselves, either directly or indirectly [MISRAC2012-RULE_17_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Functions shall not call themselves, either directly or indirectly [MISRAC2012-RULE_17_2-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 17.2 (Required) Functions shall not call themselves, either directly or indirectly" ] } }, { "id": "MISRAC2012-RULE_21_20-a", "name": "Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function", "shortDescription": { "text": "Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" }, "fullDescription": { "text": "Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function [MISRAC2012-RULE_21_20-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function [MISRAC2012-RULE_21_20-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.20 (Mandatory) The pointer returned by the Standard Library functions asctime, ctime, gmtime, localtime, localeconv, getenv, setlocale or strerror shall not be used following a subsequent call to the same function" ] } }, { "id": "MISRAC2012-RULE_17_3-a", "name": "Functions shall always have visible prototype at the function call", "shortDescription": { "text": "Functions shall always have visible prototype at the function call" }, "fullDescription": { "text": "Functions shall always have visible prototype at the function call [MISRAC2012-RULE_17_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Functions shall always have visible prototype at the function call [MISRAC2012-RULE_17_3-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 17.3 (Mandatory) A function shall not be declared implicitly" ] } }, { "id": "MISRAC2012-RULE_17_4-a", "name": "All exit paths from a function with non-void return type shall have an explicit return statement with an expression", "shortDescription": { "text": "All exit paths from a function with non-void return type shall have an explicit return statement with an expression" }, "fullDescription": { "text": "All exit paths from a function with non-void return type shall have an explicit return statement with an expression [MISRAC2012-RULE_17_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All exit paths from a function with non-void return type shall have an explicit return statement with an expression [MISRAC2012-RULE_17_4-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 17.4 (Mandatory) All exit paths from a function with non-void return type shall have an explicit return statement with an expression" ] } }, { "id": "MISRAC2012-RULE_17_4-b", "name": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression", "shortDescription": { "text": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" }, "fullDescription": { "text": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression [MISRAC2012-RULE_17_4-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression [MISRAC2012-RULE_17_4-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 17.4 (Mandatory) All exit paths from a function with non-void return type shall have an explicit return statement with an expression" ] } }, { "id": "MISRAC2012-RULE_17_5-a", "name": "The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements", "shortDescription": { "text": "The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" }, "fullDescription": { "text": "The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements [MISRAC2012-RULE_17_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements [MISRAC2012-RULE_17_5-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 17.5 (Required) The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" ] } }, { "id": "MISRAC2012-RULE_17_6-a", "name": "The declaration of an array parameter shall not contain the 'static' keyword between the [ ]", "shortDescription": { "text": "The declaration of an array parameter shall not contain the 'static' keyword between the [ ]" }, "fullDescription": { "text": "The declaration of an array parameter shall not contain the 'static' keyword between the [ ] [MISRAC2012-RULE_17_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The declaration of an array parameter shall not contain the 'static' keyword between the [ ] [MISRAC2012-RULE_17_6-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 17.6 (Mandatory) The declaration of an array parameter shall not contain the static keyword between the [ ]" ] } }, { "id": "MISRAC2012-RULE_17_7-a", "name": "The value returned by a function having non-void return type shall be used", "shortDescription": { "text": "The value returned by a function having non-void return type shall be used" }, "fullDescription": { "text": "The value returned by a function having non-void return type shall be used [MISRAC2012-RULE_17_7-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value returned by a function having non-void return type shall be used [MISRAC2012-RULE_17_7-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 17.7 (Required) The value returned by a function having non-void return type shall be used" ] } }, { "id": "MISRAC2012-RULE_17_7-b", "name": "The value returned by a function having non-void return type shall be used", "shortDescription": { "text": "The value returned by a function having non-void return type shall be used" }, "fullDescription": { "text": "The value returned by a function having non-void return type shall be used [MISRAC2012-RULE_17_7-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value returned by a function having non-void return type shall be used [MISRAC2012-RULE_17_7-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 17.7 (Required) The value returned by a function having non-void return type shall be used" ] } }, { "id": "MISRAC2012-RULE_17_8-a", "name": "A function parameter should not be modified", "shortDescription": { "text": "A function parameter should not be modified" }, "fullDescription": { "text": "A function parameter should not be modified [MISRAC2012-RULE_17_8-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function parameter should not be modified [MISRAC2012-RULE_17_8-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 17.8 (Advisory) A function parameter should not be modified" ] } }, { "id": "MISRAC2012-RULE_2_3-a", "name": "A function should not contain unused type declarations", "shortDescription": { "text": "A function should not contain unused type declarations" }, "fullDescription": { "text": "A function should not contain unused type declarations [MISRAC2012-RULE_2_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function should not contain unused type declarations [MISRAC2012-RULE_2_3-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 2.3 (Advisory) A project should not contain unused type declarations" ] } }, { "id": "MISRAC2012-RULE_2_3-b", "name": "A source file should not contain unused type declarations", "shortDescription": { "text": "A source file should not contain unused type declarations" }, "fullDescription": { "text": "A source file should not contain unused type declarations [MISRAC2012-RULE_2_3-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A source file should not contain unused type declarations [MISRAC2012-RULE_2_3-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 2.3 (Advisory) A project should not contain unused type declarations" ] } }, { "id": "MISRAC2012-RULE_2_4-a", "name": "A function should not contain unused local tag declarations", "shortDescription": { "text": "A function should not contain unused local tag declarations" }, "fullDescription": { "text": "A function should not contain unused local tag declarations [MISRAC2012-RULE_2_4-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function should not contain unused local tag declarations [MISRAC2012-RULE_2_4-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 2.4 (Advisory) A project should not contain unused tag declarations" ] } }, { "id": "MISRAC2012-RULE_2_4-b", "name": "A source file should not contain unused tag declarations", "shortDescription": { "text": "A source file should not contain unused tag declarations" }, "fullDescription": { "text": "A source file should not contain unused tag declarations [MISRAC2012-RULE_2_4-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A source file should not contain unused tag declarations [MISRAC2012-RULE_2_4-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 2.4 (Advisory) A project should not contain unused tag declarations" ] } }, { "id": "MISRAC2012-RULE_2_1-a", "name": "There shall be no unreachable code in \"else\" block", "shortDescription": { "text": "There shall be no unreachable code in \"else\" block" }, "fullDescription": { "text": "There shall be no unreachable code in \"else\" block [MISRAC2012-RULE_2_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code in \"else\" block [MISRAC2012-RULE_2_1-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 2.1 (Required) A project shall not contain unreachable code" ] } }, { "id": "MISRAC2012-RULE_2_1-b", "name": "There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute", "shortDescription": { "text": "There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute" }, "fullDescription": { "text": "There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute [MISRAC2012-RULE_2_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute [MISRAC2012-RULE_2_1-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 2.1 (Required) A project shall not contain unreachable code" ] } }, { "id": "MISRAC2012-RULE_2_1-c", "name": "There shall be no unreachable code in \"if\/else\/while\/for\" block", "shortDescription": { "text": "There shall be no unreachable code in \"if\/else\/while\/for\" block" }, "fullDescription": { "text": "There shall be no unreachable code in \"if\/else\/while\/for\" block [MISRAC2012-RULE_2_1-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code in \"if\/else\/while\/for\" block [MISRAC2012-RULE_2_1-c]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 2.1 (Required) A project shall not contain unreachable code" ] } }, { "id": "MISRAC2012-RULE_2_1-d", "name": "There shall be no unreachable code in switch statement", "shortDescription": { "text": "There shall be no unreachable code in switch statement" }, "fullDescription": { "text": "There shall be no unreachable code in switch statement [MISRAC2012-RULE_2_1-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code in switch statement [MISRAC2012-RULE_2_1-d]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 2.1 (Required) A project shall not contain unreachable code" ] } }, { "id": "MISRAC2012-RULE_2_1-e", "name": "There shall be no unreachable code in 'for' loop", "shortDescription": { "text": "There shall be no unreachable code in 'for' loop" }, "fullDescription": { "text": "There shall be no unreachable code in 'for' loop [MISRAC2012-RULE_2_1-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code in 'for' loop [MISRAC2012-RULE_2_1-e]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 2.1 (Required) A project shall not contain unreachable code" ] } }, { "id": "MISRAC2012-RULE_2_1-f", "name": "There shall be no unreachable code after 'if' or 'switch' statement", "shortDescription": { "text": "There shall be no unreachable code after 'if' or 'switch' statement" }, "fullDescription": { "text": "There shall be no unreachable code after 'if' or 'switch' statement [MISRAC2012-RULE_2_1-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code after 'if' or 'switch' statement [MISRAC2012-RULE_2_1-f]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 2.1 (Required) A project shall not contain unreachable code" ] } }, { "id": "MISRAC2012-RULE_2_1-g", "name": "There shall be no unreachable code after \"if\" or \"switch\" statement inside while\/for\/do...while loop", "shortDescription": { "text": "There shall be no unreachable code after \"if\" or \"switch\" statement inside while\/for\/do...while loop" }, "fullDescription": { "text": "There shall be no unreachable code after \"if\" or \"switch\" statement inside while\/for\/do...while loop [MISRAC2012-RULE_2_1-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no unreachable code after \"if\" or \"switch\" statement inside while\/for\/do...while loop [MISRAC2012-RULE_2_1-g]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 2.1 (Required) A project shall not contain unreachable code" ] } }, { "id": "MISRAC2012-RULE_2_2-a", "name": "All non-null statements shall either have at least one side-effect however executed or cause control flow to change", "shortDescription": { "text": "All non-null statements shall either have at least one side-effect however executed or cause control flow to change" }, "fullDescription": { "text": "All non-null statements shall either have at least one side-effect however executed or cause control flow to change [MISRAC2012-RULE_2_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All non-null statements shall either have at least one side-effect however executed or cause control flow to change [MISRAC2012-RULE_2_2-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 2.2 (Required) A project shall not contain dead code" ] } }, { "id": "MISRAC2012-RULE_2_2-b", "name": "Avoid unused values", "shortDescription": { "text": "Avoid unused values" }, "fullDescription": { "text": "Avoid unused values [MISRAC2012-RULE_2_2-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid unused values [MISRAC2012-RULE_2_2-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 2.2 (Required) A project shall not contain dead code" ] } }, { "id": "MISRAC2012-RULE_2_7-a", "name": "There should be no unused parameters in functions", "shortDescription": { "text": "There should be no unused parameters in functions" }, "fullDescription": { "text": "There should be no unused parameters in functions [MISRAC2012-RULE_2_7-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There should be no unused parameters in functions [MISRAC2012-RULE_2_7-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 2.7 (Advisory) A function should not contain unused parameters" ] } }, { "id": "MISRAC2012-RULE_2_5-a", "name": "A source file should not contain unused macro definitions", "shortDescription": { "text": "A source file should not contain unused macro definitions" }, "fullDescription": { "text": "A source file should not contain unused macro definitions [MISRAC2012-RULE_2_5-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A source file should not contain unused macro definitions [MISRAC2012-RULE_2_5-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 2.5 (Advisory) A project should not contain unused macro definitions" ] } }, { "id": "MISRAC2012-RULE_6_1-a", "name": "Bit fields shall only be defined to be of type unsigned int or signed int", "shortDescription": { "text": "Bit fields shall only be defined to be of type unsigned int or signed int" }, "fullDescription": { "text": "Bit fields shall only be defined to be of type unsigned int or signed int [MISRAC2012-RULE_6_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Bit fields shall only be defined to be of type unsigned int or signed int [MISRAC2012-RULE_6_1-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 6.1 (Required) Bit-fields shall only be declared with an appropriate type" ] } }, { "id": "MISRAC2012-RULE_2_6-a", "name": "A function should not contain unused label declarations", "shortDescription": { "text": "A function should not contain unused label declarations" }, "fullDescription": { "text": "A function should not contain unused label declarations [MISRAC2012-RULE_2_6-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function should not contain unused label declarations [MISRAC2012-RULE_2_6-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 2.6 (Advisory) A function should not contain unused label declarations" ] } }, { "id": "MISRAC2012-RULE_6_2-a", "name": "Named bit-fields with signed integer type shall have a length of more than one bit", "shortDescription": { "text": "Named bit-fields with signed integer type shall have a length of more than one bit" }, "fullDescription": { "text": "Named bit-fields with signed integer type shall have a length of more than one bit [MISRAC2012-RULE_6_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Named bit-fields with signed integer type shall have a length of more than one bit [MISRAC2012-RULE_6_2-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 6.2 (Required) Single-bit named bit fields shall not be of a signed type" ] } }, { "id": "MISRAC2012-RULE_20_5-a", "name": "#undef shall not be used", "shortDescription": { "text": "#undef shall not be used" }, "fullDescription": { "text": "#undef shall not be used [MISRAC2012-RULE_20_5-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "#undef shall not be used [MISRAC2012-RULE_20_5-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 20.5 (Advisory) #undef should not be used" ] } }, { "id": "MISRAC2012-RULE_20_6-a", "name": "Arguments to a function-like macro shall not contain tokens that look like preprocessing directives", "shortDescription": { "text": "Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" }, "fullDescription": { "text": "Arguments to a function-like macro shall not contain tokens that look like preprocessing directives [MISRAC2012-RULE_20_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Arguments to a function-like macro shall not contain tokens that look like preprocessing directives [MISRAC2012-RULE_20_6-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 20.6 (Required) Tokens that look like a preprocessing directive shall not occur within a macro argument" ] } }, { "id": "MISRAC2012-RULE_20_7-a", "name": "In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##", "shortDescription": { "text": "In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" }, "fullDescription": { "text": "In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ## [MISRAC2012-RULE_20_7-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ## [MISRAC2012-RULE_20_7-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 20.7 (Required) Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" ] } }, { "id": "MISRAC2012-RULE_20_8-a", "name": "The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1", "shortDescription": { "text": "The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" }, "fullDescription": { "text": "The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1 [MISRAC2012-RULE_20_8-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1 [MISRAC2012-RULE_20_8-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 20.8 (Required) The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" ] } }, { "id": "MISRAC2012-RULE_20_9-b", "name": "Do not use in preprocessor directives #if and #elif macros not defined in translation unit", "shortDescription": { "text": "Do not use in preprocessor directives #if and #elif macros not defined in translation unit" }, "fullDescription": { "text": "Do not use in preprocessor directives #if and #elif macros not defined in translation unit [MISRAC2012-RULE_20_9-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use in preprocessor directives #if and #elif macros not defined in translation unit [MISRAC2012-RULE_20_9-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 20.9 (Required) All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation" ] } }, { "id": "MISRAC2012-RULE_20_1-a", "name": "#include statements in a file should only be preceded by other preprocessor directives or comments", "shortDescription": { "text": "#include statements in a file should only be preceded by other preprocessor directives or comments" }, "fullDescription": { "text": "#include statements in a file should only be preceded by other preprocessor directives or comments [MISRAC2012-RULE_20_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "#include statements in a file should only be preceded by other preprocessor directives or comments [MISRAC2012-RULE_20_1-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 20.1 (Advisory) #include directives should only be preceded by preprocessor directives or comments" ] } }, { "id": "MISRAC2012-RULE_20_2-a", "name": "The ', \", \/* or \/\/ characters shall not occur in a header file name", "shortDescription": { "text": "The ', \", \/* or \/\/ characters shall not occur in a header file name" }, "fullDescription": { "text": "The ', \", \/* or \/\/ characters shall not occur in a header file name [MISRAC2012-RULE_20_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The ', \", \/* or \/\/ characters shall not occur in a header file name [MISRAC2012-RULE_20_2-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 20.2 (Required) The ', \" or \\ characters and the \/* or \/\/ character sequences shall not occur in a header file name" ] } }, { "id": "MISRAC2012-RULE_20_2-b", "name": "The \\ character should not occur in a header file name", "shortDescription": { "text": "The \\ character should not occur in a header file name" }, "fullDescription": { "text": "The \\ character should not occur in a header file name [MISRAC2012-RULE_20_2-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The \\ character should not occur in a header file name [MISRAC2012-RULE_20_2-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 20.2 (Required) The ', \" or \\ characters and the \/* or \/\/ character sequences shall not occur in a header file name" ] } }, { "id": "MISRAC2012-RULE_20_3-a", "name": "The #include directive shall be followed by either a <filename> or \"filename\" sequence", "shortDescription": { "text": "The #include directive shall be followed by either a <filename> or \"filename\" sequence" }, "fullDescription": { "text": "The #include directive shall be followed by either a <filename> or \"filename\" sequence [MISRAC2012-RULE_20_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The #include directive shall be followed by either a <filename> or \"filename\" sequence [MISRAC2012-RULE_20_3-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 20.3 (Required) The #include directive shall be followed by either a <filename> or \"filename\" sequence" ] } }, { "id": "MISRAC2012-RULE_20_4-a", "name": "A macro shall not be defined with the same name as a keyword in C90", "shortDescription": { "text": "A macro shall not be defined with the same name as a keyword in C90" }, "fullDescription": { "text": "A macro shall not be defined with the same name as a keyword in C90 [MISRAC2012-RULE_20_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A macro shall not be defined with the same name as a keyword in C90 [MISRAC2012-RULE_20_4-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 20.4 (Required) A macro shall not be defined with the same name as a keyword" ] } }, { "id": "MISRAC2012-RULE_20_4-b", "name": "A macro shall not be defined with the same name as a keyword in C99", "shortDescription": { "text": "A macro shall not be defined with the same name as a keyword in C99" }, "fullDescription": { "text": "A macro shall not be defined with the same name as a keyword in C99 [MISRAC2012-RULE_20_4-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A macro shall not be defined with the same name as a keyword in C99 [MISRAC2012-RULE_20_4-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 20.4 (Required) A macro shall not be defined with the same name as a keyword" ] } }, { "id": "MISRAC2012-RULE_12_2-a", "name": "Avoid incorrect shift operations", "shortDescription": { "text": "Avoid incorrect shift operations" }, "fullDescription": { "text": "Avoid incorrect shift operations [MISRAC2012-RULE_12_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid incorrect shift operations [MISRAC2012-RULE_12_2-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 12.2 (Required) The right hand operand of a shift operator shall lie in the range zero to one less than the width in bits of the essential type of the left hand operand" ] } }, { "id": "MISRAC2012-RULE_5_8-a", "name": "Identifiers that define objects with external linkage shall be unique", "shortDescription": { "text": "Identifiers that define objects with external linkage shall be unique" }, "fullDescription": { "text": "Identifiers that define objects with external linkage shall be unique [MISRAC2012-RULE_5_8-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers that define objects with external linkage shall be unique [MISRAC2012-RULE_5_8-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 5.8 (Required) Identifiers that define objects or functions with external linkage shall be unique" ] } }, { "id": "MISRAC2012-RULE_9_4-a", "name": "An element of an object shall not be initialized more than once", "shortDescription": { "text": "An element of an object shall not be initialized more than once" }, "fullDescription": { "text": "An element of an object shall not be initialized more than once [MISRAC2012-RULE_9_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An element of an object shall not be initialized more than once [MISRAC2012-RULE_9_4-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 9.4 (Required) An element of an object shall not be initialized more than once" ] } }, { "id": "MISRAC2012-RULE_12_3-a", "name": "The comma operator shall not be used", "shortDescription": { "text": "The comma operator shall not be used" }, "fullDescription": { "text": "The comma operator shall not be used [MISRAC2012-RULE_12_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The comma operator shall not be used [MISRAC2012-RULE_12_3-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 12.3 (Advisory) The comma operator should not be used" ] } }, { "id": "MISRAC2012-RULE_5_9-a", "name": "Identifiers that define objects with internal linkage shall be unique", "shortDescription": { "text": "Identifiers that define objects with internal linkage shall be unique" }, "fullDescription": { "text": "Identifiers that define objects with internal linkage shall be unique [MISRAC2012-RULE_5_9-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers that define objects with internal linkage shall be unique [MISRAC2012-RULE_5_9-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 5.9 (Advisory) Identifiers that define objects or functions with internal linkage should be unique" ] } }, { "id": "MISRAC2012-RULE_5_9-b", "name": "Identifiers that define functions with internal linkage shall be unique", "shortDescription": { "text": "Identifiers that define functions with internal linkage shall be unique" }, "fullDescription": { "text": "Identifiers that define functions with internal linkage shall be unique [MISRAC2012-RULE_5_9-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers that define functions with internal linkage shall be unique [MISRAC2012-RULE_5_9-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 5.9 (Advisory) Identifiers that define objects or functions with internal linkage should be unique" ] } }, { "id": "MISRAC2012-RULE_9_5-a", "name": "Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly", "shortDescription": { "text": "Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" }, "fullDescription": { "text": "Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly [MISRAC2012-RULE_9_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly [MISRAC2012-RULE_9_5-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 9.5 (Required) Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" ] } }, { "id": "MISRAC2012-RULE_12_4-a", "name": "Integer overflow or underflow in constant expression in '+', '-', '*' operator", "shortDescription": { "text": "Integer overflow or underflow in constant expression in '+', '-', '*' operator" }, "fullDescription": { "text": "Integer overflow or underflow in constant expression in '+', '-', '*' operator [MISRAC2012-RULE_12_4-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Integer overflow or underflow in constant expression in '+', '-', '*' operator [MISRAC2012-RULE_12_4-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 12.4 (Advisory) Evaluation of constant expressions should not lead to unsigned integer wrap-around" ] } }, { "id": "MISRAC2012-RULE_12_4-b", "name": "Integer overflow or underflow in constant expression in '<<' operator", "shortDescription": { "text": "Integer overflow or underflow in constant expression in '<<' operator" }, "fullDescription": { "text": "Integer overflow or underflow in constant expression in '<<' operator [MISRAC2012-RULE_12_4-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Integer overflow or underflow in constant expression in '<<' operator [MISRAC2012-RULE_12_4-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 12.4 (Advisory) Evaluation of constant expressions should not lead to unsigned integer wrap-around" ] } }, { "id": "MISRAC2012-RULE_5_6-a", "name": "A typedef name shall be a unique identifier", "shortDescription": { "text": "A typedef name shall be a unique identifier" }, "fullDescription": { "text": "A typedef name shall be a unique identifier [MISRAC2012-RULE_5_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A typedef name shall be a unique identifier [MISRAC2012-RULE_5_6-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 5.6 (Required) A typedef name shall be a unique identifier" ] } }, { "id": "MISRAC2012-RULE_9_2-a", "name": "The initializer for an aggregate or union shall be enclosed in braces", "shortDescription": { "text": "The initializer for an aggregate or union shall be enclosed in braces" }, "fullDescription": { "text": "The initializer for an aggregate or union shall be enclosed in braces [MISRAC2012-RULE_9_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The initializer for an aggregate or union shall be enclosed in braces [MISRAC2012-RULE_9_2-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 9.2 (Required) The initializer for an aggregate or union shall be enclosed in braces" ] } }, { "id": "MISRAC2012-RULE_12_5-a", "name": "The 'sizeof' operator shall not have an operand which is a function parameter declared as \"array of type\"", "shortDescription": { "text": "The 'sizeof' operator shall not have an operand which is a function parameter declared as \"array of type\"" }, "fullDescription": { "text": "The 'sizeof' operator shall not have an operand which is a function parameter declared as \"array of type\" [MISRAC2012-RULE_12_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'sizeof' operator shall not have an operand which is a function parameter declared as \"array of type\" [MISRAC2012-RULE_12_5-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 12.5 (Mandatory) The sizeof operator shall not have an operand which is a function parameter declared as \"array of type\"" ] } }, { "id": "MISRAC2012-RULE_16_1-a", "name": "A switch statement shall only contain switch labels and switch clauses, and no other code", "shortDescription": { "text": "A switch statement shall only contain switch labels and switch clauses, and no other code" }, "fullDescription": { "text": "A switch statement shall only contain switch labels and switch clauses, and no other code [MISRAC2012-RULE_16_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A switch statement shall only contain switch labels and switch clauses, and no other code [MISRAC2012-RULE_16_1-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 16.1 (Required) All switch statements shall be well-formed" ] } }, { "id": "MISRAC2012-RULE_16_1-b", "name": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement", "shortDescription": { "text": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" }, "fullDescription": { "text": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement [MISRAC2012-RULE_16_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement [MISRAC2012-RULE_16_1-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 16.1 (Required) All switch statements shall be well-formed" ] } }, { "id": "MISRAC2012-RULE_16_1-c", "name": "An unconditional break statement shall terminate every non-empty case clause", "shortDescription": { "text": "An unconditional break statement shall terminate every non-empty case clause" }, "fullDescription": { "text": "An unconditional break statement shall terminate every non-empty case clause [MISRAC2012-RULE_16_1-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An unconditional break statement shall terminate every non-empty case clause [MISRAC2012-RULE_16_1-c]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 16.1 (Required) All switch statements shall be well-formed" ] } }, { "id": "MISRAC2012-RULE_16_1-d", "name": "An unconditional break statement shall terminate every non-empty default clause", "shortDescription": { "text": "An unconditional break statement shall terminate every non-empty default clause" }, "fullDescription": { "text": "An unconditional break statement shall terminate every non-empty default clause [MISRAC2012-RULE_16_1-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An unconditional break statement shall terminate every non-empty default clause [MISRAC2012-RULE_16_1-d]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 16.1 (Required) All switch statements shall be well-formed" ] } }, { "id": "MISRAC2012-RULE_16_1-e", "name": "Always provide a default branch for switch statements", "shortDescription": { "text": "Always provide a default branch for switch statements" }, "fullDescription": { "text": "Always provide a default branch for switch statements [MISRAC2012-RULE_16_1-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Always provide a default branch for switch statements [MISRAC2012-RULE_16_1-e]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 16.1 (Required) All switch statements shall be well-formed" ] } }, { "id": "MISRAC2012-RULE_16_1-f", "name": "A 'default' label shall have a statement or a comment before terminating 'break'", "shortDescription": { "text": "A 'default' label shall have a statement or a comment before terminating 'break'" }, "fullDescription": { "text": "A 'default' label shall have a statement or a comment before terminating 'break' [MISRAC2012-RULE_16_1-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A 'default' label shall have a statement or a comment before terminating 'break' [MISRAC2012-RULE_16_1-f]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 16.1 (Required) All switch statements shall be well-formed" ] } }, { "id": "MISRAC2012-RULE_16_1-g", "name": "A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement", "shortDescription": { "text": "A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" }, "fullDescription": { "text": "A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement [MISRAC2012-RULE_16_1-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement [MISRAC2012-RULE_16_1-g]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 16.1 (Required) All switch statements shall be well-formed" ] } }, { "id": "MISRAC2012-RULE_16_1-h", "name": "Every switch statement shall have at least two switch-clauses", "shortDescription": { "text": "Every switch statement shall have at least two switch-clauses" }, "fullDescription": { "text": "Every switch statement shall have at least two switch-clauses [MISRAC2012-RULE_16_1-h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Every switch statement shall have at least two switch-clauses [MISRAC2012-RULE_16_1-h]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 16.1 (Required) All switch statements shall be well-formed" ] } }, { "id": "MISRAC2012-RULE_5_7-a", "name": "A tag name shall be a unique identifier", "shortDescription": { "text": "A tag name shall be a unique identifier" }, "fullDescription": { "text": "A tag name shall be a unique identifier [MISRAC2012-RULE_5_7-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A tag name shall be a unique identifier [MISRAC2012-RULE_5_7-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 5.7 (Required) A tag name shall be a unique identifier" ] } }, { "id": "MISRAC2012-RULE_9_3-a", "name": "Arrays shall not be partially initialized", "shortDescription": { "text": "Arrays shall not be partially initialized" }, "fullDescription": { "text": "Arrays shall not be partially initialized [MISRAC2012-RULE_9_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Arrays shall not be partially initialized [MISRAC2012-RULE_9_3-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 9.3 (Required) Arrays shall not be partially initialized" ] } }, { "id": "MISRAC2012-RULE_16_2-a", "name": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement", "shortDescription": { "text": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" }, "fullDescription": { "text": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement [MISRAC2012-RULE_16_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement [MISRAC2012-RULE_16_2-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 16.2 (Required) A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" ] } }, { "id": "MISRAC2012-RULE_16_3-a", "name": "An unconditional break statement shall terminate every non-empty case clause", "shortDescription": { "text": "An unconditional break statement shall terminate every non-empty case clause" }, "fullDescription": { "text": "An unconditional break statement shall terminate every non-empty case clause [MISRAC2012-RULE_16_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An unconditional break statement shall terminate every non-empty case clause [MISRAC2012-RULE_16_3-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 16.3 (Required) An unconditional break statement shall terminate every switch-clause" ] } }, { "id": "MISRAC2012-RULE_16_3-b", "name": "An unconditional break statement shall terminate every non-empty default clause", "shortDescription": { "text": "An unconditional break statement shall terminate every non-empty default clause" }, "fullDescription": { "text": "An unconditional break statement shall terminate every non-empty default clause [MISRAC2012-RULE_16_3-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An unconditional break statement shall terminate every non-empty default clause [MISRAC2012-RULE_16_3-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 16.3 (Required) An unconditional break statement shall terminate every switch-clause" ] } }, { "id": "MISRAC2012-RULE_22_10-a", "name": "Properly use errno value", "shortDescription": { "text": "Properly use errno value" }, "fullDescription": { "text": "Properly use errno value [MISRAC2012-RULE_22_10-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly use errno value [MISRAC2012-RULE_22_10-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 22.10 (Required) The value of errno shall only be tested when the last function to be called was an errno-setting-function" ] } }, { "id": "MISRAC2012-RULE_16_4-a", "name": "Always provide a default branch for switch statements", "shortDescription": { "text": "Always provide a default branch for switch statements" }, "fullDescription": { "text": "Always provide a default branch for switch statements [MISRAC2012-RULE_16_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Always provide a default branch for switch statements [MISRAC2012-RULE_16_4-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 16.4 (Required) Every switch statement shall have a default label" ] } }, { "id": "MISRAC2012-RULE_16_4-b", "name": "A 'default' label shall have a statement or a comment before terminating 'break'", "shortDescription": { "text": "A 'default' label shall have a statement or a comment before terminating 'break'" }, "fullDescription": { "text": "A 'default' label shall have a statement or a comment before terminating 'break' [MISRAC2012-RULE_16_4-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A 'default' label shall have a statement or a comment before terminating 'break' [MISRAC2012-RULE_16_4-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 16.4 (Required) Every switch statement shall have a default label" ] } }, { "id": "MISRAC2012-RULE_16_5-a", "name": "A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement", "shortDescription": { "text": "A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" }, "fullDescription": { "text": "A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement [MISRAC2012-RULE_16_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement [MISRAC2012-RULE_16_5-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 16.5 (Required) A default label shall appear as either the first or the last switch label of a switch statement" ] } }, { "id": "MISRAC2012-DIR_4_9-a", "name": "A function should be used in preference to a function-like macro", "shortDescription": { "text": "A function should be used in preference to a function-like macro" }, "fullDescription": { "text": "A function should be used in preference to a function-like macro [MISRAC2012-DIR_4_9-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function should be used in preference to a function-like macro [MISRAC2012-DIR_4_9-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.9 (Advisory) A function should be used in preference to a function-like macro where they are interchangeable" ] } }, { "id": "MISRAC2012-RULE_16_6-a", "name": "Every switch statement shall have at least two switch-clauses", "shortDescription": { "text": "Every switch statement shall have at least two switch-clauses" }, "fullDescription": { "text": "Every switch statement shall have at least two switch-clauses [MISRAC2012-RULE_16_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Every switch statement shall have at least two switch-clauses [MISRAC2012-RULE_16_6-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 16.6 (Required) Every switch statement shall have at least two switch-clauses" ] } }, { "id": "MISRAC2012-DIR_4_8-a", "name": "If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden", "shortDescription": { "text": "If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" }, "fullDescription": { "text": "If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden [MISRAC2012-DIR_4_8-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden [MISRAC2012-DIR_4_8-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.8 (Advisory) If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" ] } }, { "id": "MISRAC2012-RULE_16_7-a", "name": "A switch expression shall not represent a value that is effectively Boolean", "shortDescription": { "text": "A switch expression shall not represent a value that is effectively Boolean" }, "fullDescription": { "text": "A switch expression shall not represent a value that is effectively Boolean [MISRAC2012-RULE_16_7-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A switch expression shall not represent a value that is effectively Boolean [MISRAC2012-RULE_16_7-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 16.7 (Required) A switch-expression shall not have essentially Boolean type" ] } }, { "id": "MISRAC2012-RULE_16_7-b", "name": "A switch expression shall not represent a value that is effectively Boolean", "shortDescription": { "text": "A switch expression shall not represent a value that is effectively Boolean" }, "fullDescription": { "text": "A switch expression shall not represent a value that is effectively Boolean [MISRAC2012-RULE_16_7-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A switch expression shall not represent a value that is effectively Boolean [MISRAC2012-RULE_16_7-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 16.7 (Required) A switch-expression shall not have essentially Boolean type" ] } }, { "id": "MISRAC2012-DIR_4_5-a", "name": "Identifiers in the same name space with overlapping visibility should be typographically unambiguous", "shortDescription": { "text": "Identifiers in the same name space with overlapping visibility should be typographically unambiguous" }, "fullDescription": { "text": "Identifiers in the same name space with overlapping visibility should be typographically unambiguous [MISRAC2012-DIR_4_5-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers in the same name space with overlapping visibility should be typographically unambiguous [MISRAC2012-DIR_4_5-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.5 (Advisory) Identifiers in the same name space with overlapping visibility should be typographically unambiguous" ] } }, { "id": "MISRAC2012-DIR_4_4-a", "name": "Sections of code should not be \"commented out\"", "shortDescription": { "text": "Sections of code should not be \"commented out\"" }, "fullDescription": { "text": "Sections of code should not be \"commented out\" [MISRAC2012-DIR_4_4-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Sections of code should not be \"commented out\" [MISRAC2012-DIR_4_4-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.4 (Advisory) Sections of code should not be \"commented out\"" ] } }, { "id": "MISRAC2012-DIR_4_7-a", "name": "Consistently check the returned value of non-void functions", "shortDescription": { "text": "Consistently check the returned value of non-void functions" }, "fullDescription": { "text": "Consistently check the returned value of non-void functions [MISRAC2012-DIR_4_7-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Consistently check the returned value of non-void functions [MISRAC2012-DIR_4_7-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.7 (Required) If a function returns error information, then that error information shall be tested" ] } }, { "id": "MISRAC2012-DIR_4_7-b", "name": "Always check the returned value of non-void function", "shortDescription": { "text": "Always check the returned value of non-void function" }, "fullDescription": { "text": "Always check the returned value of non-void function [MISRAC2012-DIR_4_7-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Always check the returned value of non-void function [MISRAC2012-DIR_4_7-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.7 (Required) If a function returns error information, then that error information shall be tested" ] } }, { "id": "MISRAC2012-DIR_4_6-a", "name": "typedefs to basic types should contain some digits in their name", "shortDescription": { "text": "typedefs to basic types should contain some digits in their name" }, "fullDescription": { "text": "typedefs to basic types should contain some digits in their name [MISRAC2012-DIR_4_6-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "typedefs to basic types should contain some digits in their name [MISRAC2012-DIR_4_6-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types" ] } }, { "id": "MISRAC2012-DIR_4_6-b", "name": "typedefs should be used in place of the basic types", "shortDescription": { "text": "typedefs should be used in place of the basic types" }, "fullDescription": { "text": "typedefs should be used in place of the basic types [MISRAC2012-DIR_4_6-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "typedefs should be used in place of the basic types [MISRAC2012-DIR_4_6-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types" ] } }, { "id": "MISRAC2012-DIR_4_6-c", "name": "Use typedefs from stdint.h instead of declaring your own in C99 code", "shortDescription": { "text": "Use typedefs from stdint.h instead of declaring your own in C99 code" }, "fullDescription": { "text": "Use typedefs from stdint.h instead of declaring your own in C99 code [MISRAC2012-DIR_4_6-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use typedefs from stdint.h instead of declaring your own in C99 code [MISRAC2012-DIR_4_6-c]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types" ] } }, { "id": "MISRAC2012-DIR_4_1-a", "name": "Avoid accessing arrays out of bounds", "shortDescription": { "text": "Avoid accessing arrays out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays out of bounds [MISRAC2012-DIR_4_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays out of bounds [MISRAC2012-DIR_4_1-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.1 (Required) Run-time failures shall be minimized" ] } }, { "id": "MISRAC2012-DIR_4_1-b", "name": "Avoid null pointer dereferencing", "shortDescription": { "text": "Avoid null pointer dereferencing" }, "fullDescription": { "text": "Avoid null pointer dereferencing [MISRAC2012-DIR_4_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid null pointer dereferencing [MISRAC2012-DIR_4_1-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.1 (Required) Run-time failures shall be minimized" ] } }, { "id": "MISRAC2012-DIR_4_1-c", "name": "Avoid division by zero", "shortDescription": { "text": "Avoid division by zero" }, "fullDescription": { "text": "Avoid division by zero [MISRAC2012-DIR_4_1-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid division by zero [MISRAC2012-DIR_4_1-c]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.1 (Required) Run-time failures shall be minimized" ] } }, { "id": "MISRAC2012-DIR_4_1-d", "name": "Avoid buffer overflow due to defining incorrect format limits", "shortDescription": { "text": "Avoid buffer overflow due to defining incorrect format limits" }, "fullDescription": { "text": "Avoid buffer overflow due to defining incorrect format limits [MISRAC2012-DIR_4_1-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer overflow due to defining incorrect format limits [MISRAC2012-DIR_4_1-d]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.1 (Required) Run-time failures shall be minimized" ] } }, { "id": "MISRAC2012-DIR_4_1-e", "name": "Avoid overflow due to reading a not zero terminated string", "shortDescription": { "text": "Avoid overflow due to reading a not zero terminated string" }, "fullDescription": { "text": "Avoid overflow due to reading a not zero terminated string [MISRAC2012-DIR_4_1-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow due to reading a not zero terminated string [MISRAC2012-DIR_4_1-e]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.1 (Required) Run-time failures shall be minimized" ] } }, { "id": "MISRAC2012-DIR_4_1-g", "name": "Avoid overflow when reading from a buffer", "shortDescription": { "text": "Avoid overflow when reading from a buffer" }, "fullDescription": { "text": "Avoid overflow when reading from a buffer [MISRAC2012-DIR_4_1-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when reading from a buffer [MISRAC2012-DIR_4_1-g]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.1 (Required) Run-time failures shall be minimized" ] } }, { "id": "MISRAC2012-DIR_4_1-h", "name": "Avoid overflow when writing to a buffer", "shortDescription": { "text": "Avoid overflow when writing to a buffer" }, "fullDescription": { "text": "Avoid overflow when writing to a buffer [MISRAC2012-DIR_4_1-h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when writing to a buffer [MISRAC2012-DIR_4_1-h]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.1 (Required) Run-time failures shall be minimized" ] } }, { "id": "MISRAC2012-DIR_4_1-i", "name": "Do not subtract two pointers that do not address elements of the same array", "shortDescription": { "text": "Do not subtract two pointers that do not address elements of the same array" }, "fullDescription": { "text": "Do not subtract two pointers that do not address elements of the same array [MISRAC2012-DIR_4_1-i]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not subtract two pointers that do not address elements of the same array [MISRAC2012-DIR_4_1-i]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.1 (Required) Run-time failures shall be minimized" ] } }, { "id": "MISRAC2012-DIR_4_1-j", "name": "Do not compare two unrelated pointers", "shortDescription": { "text": "Do not compare two unrelated pointers" }, "fullDescription": { "text": "Do not compare two unrelated pointers [MISRAC2012-DIR_4_1-j]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not compare two unrelated pointers [MISRAC2012-DIR_4_1-j]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.1 (Required) Run-time failures shall be minimized" ] } }, { "id": "MISRAC2012-DIR_4_1-k", "name": "Avoid wraparounds when performing arithmetic integer operations", "shortDescription": { "text": "Avoid wraparounds when performing arithmetic integer operations" }, "fullDescription": { "text": "Avoid wraparounds when performing arithmetic integer operations [MISRAC2012-DIR_4_1-k]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid wraparounds when performing arithmetic integer operations [MISRAC2012-DIR_4_1-k]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.1 (Required) Run-time failures shall be minimized" ] } }, { "id": "MISRAC2012-RULE_8_12-a", "name": "Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique", "shortDescription": { "text": "Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" }, "fullDescription": { "text": "Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique [MISRAC2012-RULE_8_12-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique [MISRAC2012-RULE_8_12-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 8.12 (Required) Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" ] } }, { "id": "MISRAC2012-RULE_8_13-a", "name": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object", "shortDescription": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" }, "fullDescription": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object [MISRAC2012-RULE_8_13-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object [MISRAC2012-RULE_8_13-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 8.13 (Advisory) A pointer should point to a const-qualified type whenever possible" ] } }, { "id": "MISRAC2012-RULE_8_13-b", "name": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object", "shortDescription": { "text": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" }, "fullDescription": { "text": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object [MISRAC2012-RULE_8_13-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object [MISRAC2012-RULE_8_13-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 8.13 (Advisory) A pointer should point to a const-qualified type whenever possible" ] } }, { "id": "MISRAC2012-DIR_4_3-a", "name": "Assembly language shall be encapsulated and isolated", "shortDescription": { "text": "Assembly language shall be encapsulated and isolated" }, "fullDescription": { "text": "Assembly language shall be encapsulated and isolated [MISRAC2012-DIR_4_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Assembly language shall be encapsulated and isolated [MISRAC2012-DIR_4_3-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.3 (Required) Assembly language shall be encapsulated and isolated" ] } }, { "id": "MISRAC2012-RULE_8_14-a", "name": "The restrict type qualifier shall not be used", "shortDescription": { "text": "The restrict type qualifier shall not be used" }, "fullDescription": { "text": "The restrict type qualifier shall not be used [MISRAC2012-RULE_8_14-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The restrict type qualifier shall not be used [MISRAC2012-RULE_8_14-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 8.14 (Required) The restrict type qualifier shall not be used" ] } }, { "id": "MISRAC2012-DIR_4_2-a", "name": "All usage of assembler shall be documented", "shortDescription": { "text": "All usage of assembler shall be documented" }, "fullDescription": { "text": "All usage of assembler shall be documented [MISRAC2012-DIR_4_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All usage of assembler shall be documented [MISRAC2012-DIR_4_2-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.2 (Advisory) All usage of assembly language should be documented" ] } }, { "id": "MISRAC2012-RULE_1_1-a", "name": "A program should not exceed the translation limits imposed by The Standard (c90)", "shortDescription": { "text": "A program should not exceed the translation limits imposed by The Standard (c90)" }, "fullDescription": { "text": "A program should not exceed the translation limits imposed by The Standard (c90) [MISRAC2012-RULE_1_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A program should not exceed the translation limits imposed by The Standard (c90) [MISRAC2012-RULE_1_1-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 1.1 (Required) The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits" ] } }, { "id": "MISRAC2012-RULE_1_1-b", "name": "A program should not exceed the translation limits imposed by The Standard (c99)", "shortDescription": { "text": "A program should not exceed the translation limits imposed by The Standard (c99)" }, "fullDescription": { "text": "A program should not exceed the translation limits imposed by The Standard (c99) [MISRAC2012-RULE_1_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A program should not exceed the translation limits imposed by The Standard (c99) [MISRAC2012-RULE_1_1-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 1.1 (Required) The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits" ] } }, { "id": "MISRAC2012-RULE_1_1-c", "name": "A program should not exceed the translation limits imposed by The Standard (c90)", "shortDescription": { "text": "A program should not exceed the translation limits imposed by The Standard (c90)" }, "fullDescription": { "text": "A program should not exceed the translation limits imposed by The Standard (c90) [MISRAC2012-RULE_1_1-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A program should not exceed the translation limits imposed by The Standard (c90) [MISRAC2012-RULE_1_1-c]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 1.1 (Required) The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits" ] } }, { "id": "MISRAC2012-RULE_1_1-d", "name": "A program should not exceed the translation limits imposed by The Standard (c99)", "shortDescription": { "text": "A program should not exceed the translation limits imposed by The Standard (c99)" }, "fullDescription": { "text": "A program should not exceed the translation limits imposed by The Standard (c99) [MISRAC2012-RULE_1_1-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A program should not exceed the translation limits imposed by The Standard (c99) [MISRAC2012-RULE_1_1-d]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 1.1 (Required) The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits" ] } }, { "id": "MISRAC2012-RULE_8_10-a", "name": "An inline function shall be declared with the static storage class", "shortDescription": { "text": "An inline function shall be declared with the static storage class" }, "fullDescription": { "text": "An inline function shall be declared with the static storage class [MISRAC2012-RULE_8_10-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An inline function shall be declared with the static storage class [MISRAC2012-RULE_8_10-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 8.10 (Required) An inline function shall be declared with the static storage class" ] } }, { "id": "MISRAC2012-RULE_8_11-a", "name": "When an array with external linkage is declared, its size should be explicitly specified", "shortDescription": { "text": "When an array with external linkage is declared, its size should be explicitly specified" }, "fullDescription": { "text": "When an array with external linkage is declared, its size should be explicitly specified [MISRAC2012-RULE_8_11-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "When an array with external linkage is declared, its size should be explicitly specified [MISRAC2012-RULE_8_11-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 8.11 (Advisory) When an array with external linkage is declared, its size should be explicitly specified" ] } }, { "id": "MISRAC2012-RULE_1_4-j", "name": "The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0'", "shortDescription": { "text": "The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0'" }, "fullDescription": { "text": "The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0' [MISRAC2012-RULE_1_4-j]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0' [MISRAC2012-RULE_1_4-j]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 1.4 (Required) Emergent language features shall not be used" ] } }, { "id": "MISRAC2012-RULE_1_4-k", "name": "The 'rsize_t' type should not be used", "shortDescription": { "text": "The 'rsize_t' type should not be used" }, "fullDescription": { "text": "The 'rsize_t' type should not be used [MISRAC2012-RULE_1_4-k]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'rsize_t' type should not be used [MISRAC2012-RULE_1_4-k]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 1.4 (Required) Emergent language features shall not be used" ] } }, { "id": "MISRAC2012-RULE_1_4-l", "name": "The 'errno_t' type should not be used", "shortDescription": { "text": "The 'errno_t' type should not be used" }, "fullDescription": { "text": "The 'errno_t' type should not be used [MISRAC2012-RULE_1_4-l]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'errno_t' type should not be used [MISRAC2012-RULE_1_4-l]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 1.4 (Required) Emergent language features shall not be used" ] } }, { "id": "MISRAC2012-RULE_1_4-m", "name": "Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S", "shortDescription": { "text": "Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S" }, "fullDescription": { "text": "Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S [MISRAC2012-RULE_1_4-m]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S [MISRAC2012-RULE_1_4-m]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 1.4 (Required) Emergent language features shall not be used" ] } }, { "id": "MISRAC2012-RULE_1_4-n", "name": "Do not use the functions defined in Annex K of ISO\/IEC 9899:2011 standard", "shortDescription": { "text": "Do not use the functions defined in Annex K of ISO\/IEC 9899:2011 standard" }, "fullDescription": { "text": "Do not use the functions defined in Annex K of ISO\/IEC 9899:2011 standard [MISRAC2012-RULE_1_4-n]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use the functions defined in Annex K of ISO\/IEC 9899:2011 standard [MISRAC2012-RULE_1_4-n]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 1.4 (Required) Emergent language features shall not be used" ] } }, { "id": "MISRAC2012-RULE_5_1-a", "name": "External identifiers shall be distinct", "shortDescription": { "text": "External identifiers shall be distinct" }, "fullDescription": { "text": "External identifiers shall be distinct [MISRAC2012-RULE_5_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "External identifiers shall be distinct [MISRAC2012-RULE_5_1-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 5.1 (Required) External identifiers shall be distinct" ] } }, { "id": "MISRAC2012-RULE_1_3-a", "name": "Avoid division by zero", "shortDescription": { "text": "Avoid division by zero" }, "fullDescription": { "text": "Avoid division by zero [MISRAC2012-RULE_1_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid division by zero [MISRAC2012-RULE_1_3-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" ] } }, { "id": "MISRAC2012-RULE_1_3-b", "name": "Avoid use before initialization", "shortDescription": { "text": "Avoid use before initialization" }, "fullDescription": { "text": "Avoid use before initialization [MISRAC2012-RULE_1_3-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid use before initialization [MISRAC2012-RULE_1_3-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" ] } }, { "id": "MISRAC2012-RULE_1_3-c", "name": "Do not use resources that have been freed", "shortDescription": { "text": "Do not use resources that have been freed" }, "fullDescription": { "text": "Do not use resources that have been freed [MISRAC2012-RULE_1_3-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use resources that have been freed [MISRAC2012-RULE_1_3-c]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" ] } }, { "id": "MISRAC2012-RULE_1_3-d", "name": "Avoid overflow when reading from a buffer", "shortDescription": { "text": "Avoid overflow when reading from a buffer" }, "fullDescription": { "text": "Avoid overflow when reading from a buffer [MISRAC2012-RULE_1_3-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when reading from a buffer [MISRAC2012-RULE_1_3-d]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" ] } }, { "id": "MISRAC2012-RULE_1_3-e", "name": "Avoid overflow when writing to a buffer", "shortDescription": { "text": "Avoid overflow when writing to a buffer" }, "fullDescription": { "text": "Avoid overflow when writing to a buffer [MISRAC2012-RULE_1_3-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when writing to a buffer [MISRAC2012-RULE_1_3-e]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" ] } }, { "id": "MISRAC2012-RULE_1_3-f", "name": "The value of an expression shall be the same under any order of evaluation that the standard permits", "shortDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits" }, "fullDescription": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [MISRAC2012-RULE_1_3-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value of an expression shall be the same under any order of evaluation that the standard permits [MISRAC2012-RULE_1_3-f]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" ] } }, { "id": "MISRAC2012-RULE_1_3-g", "name": "Don't write code that depends on the order of evaluation of function arguments", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function arguments" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function arguments [MISRAC2012-RULE_1_3-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of function arguments [MISRAC2012-RULE_1_3-g]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" ] } }, { "id": "MISRAC2012-RULE_1_3-h", "name": "Don't write code that depends on the order of evaluation of function designator and function arguments", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments [MISRAC2012-RULE_1_3-h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of function designator and function arguments [MISRAC2012-RULE_1_3-h]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" ] } }, { "id": "MISRAC2012-RULE_1_3-i", "name": "Don't write code that depends on the order of evaluation of expression that involves a function call", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call [MISRAC2012-RULE_1_3-i]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of expression that involves a function call [MISRAC2012-RULE_1_3-i]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" ] } }, { "id": "MISRAC2012-RULE_1_3-j", "name": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression", "shortDescription": { "text": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" }, "fullDescription": { "text": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression [MISRAC2012-RULE_1_3-j]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression [MISRAC2012-RULE_1_3-j]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" ] } }, { "id": "MISRAC2012-RULE_1_3-k", "name": "Do not use more than one volatile between two adjacent sequence points", "shortDescription": { "text": "Do not use more than one volatile between two adjacent sequence points" }, "fullDescription": { "text": "Do not use more than one volatile between two adjacent sequence points [MISRAC2012-RULE_1_3-k]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use more than one volatile between two adjacent sequence points [MISRAC2012-RULE_1_3-k]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" ] } }, { "id": "MISRAC2012-RULE_1_3-l", "name": "Don't write code that depends on the order of evaluation of function calls", "shortDescription": { "text": "Don't write code that depends on the order of evaluation of function calls" }, "fullDescription": { "text": "Don't write code that depends on the order of evaluation of function calls [MISRAC2012-RULE_1_3-l]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't write code that depends on the order of evaluation of function calls [MISRAC2012-RULE_1_3-l]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" ] } }, { "id": "MISRAC2012-RULE_1_3-m", "name": "The address of an object with automatic storage shall not be returned from a function", "shortDescription": { "text": "The address of an object with automatic storage shall not be returned from a function" }, "fullDescription": { "text": "The address of an object with automatic storage shall not be returned from a function [MISRAC2012-RULE_1_3-m]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The address of an object with automatic storage shall not be returned from a function [MISRAC2012-RULE_1_3-m]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" ] } }, { "id": "MISRAC2012-RULE_1_3-n", "name": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist", "shortDescription": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" }, "fullDescription": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist [MISRAC2012-RULE_1_3-n]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist [MISRAC2012-RULE_1_3-n]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" ] } }, { "id": "MISRAC2012-RULE_1_3-o", "name": "The left-hand operand of a right-shift operator shall not have a negative value", "shortDescription": { "text": "The left-hand operand of a right-shift operator shall not have a negative value" }, "fullDescription": { "text": "The left-hand operand of a right-shift operator shall not have a negative value [MISRAC2012-RULE_1_3-o]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The left-hand operand of a right-shift operator shall not have a negative value [MISRAC2012-RULE_1_3-o]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" ] } }, { "id": "MISRAC2012-RULE_5_4-a", "name": "The name of a macro should be distinct from the names of its parameters(c90)", "shortDescription": { "text": "The name of a macro should be distinct from the names of its parameters(c90)" }, "fullDescription": { "text": "The name of a macro should be distinct from the names of its parameters(c90) [MISRAC2012-RULE_5_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The name of a macro should be distinct from the names of its parameters(c90) [MISRAC2012-RULE_5_4-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 5.4 (Required) Macro identifiers shall be distinct" ] } }, { "id": "MISRAC2012-RULE_5_4-b", "name": "The name of a macro should be distinct from the names of its parameters(c99)", "shortDescription": { "text": "The name of a macro should be distinct from the names of its parameters(c99)" }, "fullDescription": { "text": "The name of a macro should be distinct from the names of its parameters(c99) [MISRAC2012-RULE_5_4-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The name of a macro should be distinct from the names of its parameters(c99) [MISRAC2012-RULE_5_4-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 5.4 (Required) Macro identifiers shall be distinct" ] } }, { "id": "MISRAC2012-RULE_5_4-c", "name": "The name of a macro should be distinct from the names of other macros that are currently defined(c90)", "shortDescription": { "text": "The name of a macro should be distinct from the names of other macros that are currently defined(c90)" }, "fullDescription": { "text": "The name of a macro should be distinct from the names of other macros that are currently defined(c90) [MISRAC2012-RULE_5_4-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The name of a macro should be distinct from the names of other macros that are currently defined(c90) [MISRAC2012-RULE_5_4-c]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 5.4 (Required) Macro identifiers shall be distinct" ] } }, { "id": "MISRAC2012-RULE_5_4-d", "name": "The name of a macro should be distinct from the names of other macros that are currently defined(c99)", "shortDescription": { "text": "The name of a macro should be distinct from the names of other macros that are currently defined(c99)" }, "fullDescription": { "text": "The name of a macro should be distinct from the names of other macros that are currently defined(c99) [MISRAC2012-RULE_5_4-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The name of a macro should be distinct from the names of other macros that are currently defined(c99) [MISRAC2012-RULE_5_4-d]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 5.4 (Required) Macro identifiers shall be distinct" ] } }, { "id": "MISRAC2012-RULE_5_5-a", "name": "The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c90)", "shortDescription": { "text": "The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c90)" }, "fullDescription": { "text": "The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c90) [MISRAC2012-RULE_5_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c90) [MISRAC2012-RULE_5_5-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 5.5 (Required) Identifiers shall be distinct from macro names" ] } }, { "id": "MISRAC2012-RULE_5_5-b", "name": "The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c99)", "shortDescription": { "text": "The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c99)" }, "fullDescription": { "text": "The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c99) [MISRAC2012-RULE_5_5-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c99) [MISRAC2012-RULE_5_5-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 5.5 (Required) Identifiers shall be distinct from macro names" ] } }, { "id": "MISRAC2012-RULE_9_1-a", "name": "Avoid use before initialization", "shortDescription": { "text": "Avoid use before initialization" }, "fullDescription": { "text": "Avoid use before initialization [MISRAC2012-RULE_9_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid use before initialization [MISRAC2012-RULE_9_1-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 9.1 (Mandatory) The value of an object with automatic storage duration shall not be read before it has been set" ] } }, { "id": "MISRAC2012-RULE_5_2-a", "name": "Identifiers declared in the file scope and in the same name space shall be distinct (c90)", "shortDescription": { "text": "Identifiers declared in the file scope and in the same name space shall be distinct (c90)" }, "fullDescription": { "text": "Identifiers declared in the file scope and in the same name space shall be distinct (c90) [MISRAC2012-RULE_5_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers declared in the file scope and in the same name space shall be distinct (c90) [MISRAC2012-RULE_5_2-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 5.2 (Required) Identifiers declared in the same scope and name space shall be distinct" ] } }, { "id": "MISRAC2012-RULE_5_2-b", "name": "Identifiers declared in the file scope and in the same name space shall be distinct (c99)", "shortDescription": { "text": "Identifiers declared in the file scope and in the same name space shall be distinct (c99)" }, "fullDescription": { "text": "Identifiers declared in the file scope and in the same name space shall be distinct (c99) [MISRAC2012-RULE_5_2-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers declared in the file scope and in the same name space shall be distinct (c99) [MISRAC2012-RULE_5_2-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 5.2 (Required) Identifiers declared in the same scope and name space shall be distinct" ] } }, { "id": "MISRAC2012-RULE_5_2-c", "name": "Identifiers declared in the same block scope and name space shall be distinct (c90)", "shortDescription": { "text": "Identifiers declared in the same block scope and name space shall be distinct (c90)" }, "fullDescription": { "text": "Identifiers declared in the same block scope and name space shall be distinct (c90) [MISRAC2012-RULE_5_2-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers declared in the same block scope and name space shall be distinct (c90) [MISRAC2012-RULE_5_2-c]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 5.2 (Required) Identifiers declared in the same scope and name space shall be distinct" ] } }, { "id": "MISRAC2012-RULE_5_2-d", "name": "Identifiers declared in the same block scope and name space shall be distinct (c99)", "shortDescription": { "text": "Identifiers declared in the same block scope and name space shall be distinct (c99)" }, "fullDescription": { "text": "Identifiers declared in the same block scope and name space shall be distinct (c99) [MISRAC2012-RULE_5_2-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers declared in the same block scope and name space shall be distinct (c99) [MISRAC2012-RULE_5_2-d]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 5.2 (Required) Identifiers declared in the same scope and name space shall be distinct" ] } }, { "id": "MISRAC2012-RULE_12_1-a", "name": "Use parentheses to indicate the precedence of operators in expressions", "shortDescription": { "text": "Use parentheses to indicate the precedence of operators in expressions" }, "fullDescription": { "text": "Use parentheses to indicate the precedence of operators in expressions [MISRAC2012-RULE_12_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use parentheses to indicate the precedence of operators in expressions [MISRAC2012-RULE_12_1-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 12.1 (Advisory) The precedence of operators within expressions should be made explicit" ] } }, { "id": "MISRAC2012-RULE_12_1-c", "name": "The operand of the 'sizeof' operator should be enclosed in parentheses", "shortDescription": { "text": "The operand of the 'sizeof' operator should be enclosed in parentheses" }, "fullDescription": { "text": "The operand of the 'sizeof' operator should be enclosed in parentheses [MISRAC2012-RULE_12_1-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The operand of the 'sizeof' operator should be enclosed in parentheses [MISRAC2012-RULE_12_1-c]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 12.1 (Advisory) The precedence of operators within expressions should be made explicit" ] } }, { "id": "MISRAC2012-RULE_5_3-a", "name": "Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope", "shortDescription": { "text": "Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" }, "fullDescription": { "text": "Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope [MISRAC2012-RULE_5_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope [MISRAC2012-RULE_5_3-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 5.3 (Required) An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" ] } }, { "id": "MISRAC2012-RULE_5_3-b", "name": "Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope", "shortDescription": { "text": "Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" }, "fullDescription": { "text": "Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope [MISRAC2012-RULE_5_3-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope [MISRAC2012-RULE_5_3-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 5.3 (Required) An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" ] } }, { "id": "MRM-01", "name": "Do not allocate resources in function argument list because the order of evaluation of a function's parameters is undefined", "shortDescription": { "text": "Do not allocate resources in function argument list because the order of evaluation of a function's parameters is undefined" }, "fullDescription": { "text": "Do not allocate resources in function argument list because the order of evaluation of a function's parameters is undefined [MRM-01]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not allocate resources in function argument list because the order of evaluation of a function's parameters is undefined [MRM-01]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-06", "name": "Use the same form in corresponding calls to new\/malloc and delete\/free", "shortDescription": { "text": "Use the same form in corresponding calls to new\/malloc and delete\/free" }, "fullDescription": { "text": "Use the same form in corresponding calls to new\/malloc and delete\/free [MRM-06]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use the same form in corresponding calls to new\/malloc and delete\/free [MRM-06]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-08", "name": "Do not invoke malloc\/realloc for objects having constructors", "shortDescription": { "text": "Do not invoke malloc\/realloc for objects having constructors" }, "fullDescription": { "text": "Do not invoke malloc\/realloc for objects having constructors [MRM-08]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not invoke malloc\/realloc for objects having constructors [MRM-08]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-32", "name": "Avoid hiding the global new", "shortDescription": { "text": "Avoid hiding the global new" }, "fullDescription": { "text": "Avoid hiding the global new [MRM-32]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid hiding the global new [MRM-32]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-37", "name": "Declare a copy assignment operator for classes with dynamically allocated memory", "shortDescription": { "text": "Declare a copy assignment operator for classes with dynamically allocated memory" }, "fullDescription": { "text": "Declare a copy assignment operator for classes with dynamically allocated memory [MRM-37]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Declare a copy assignment operator for classes with dynamically allocated memory [MRM-37]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-38", "name": "Declare a copy constructor for classes with dynamically allocated memory", "shortDescription": { "text": "Declare a copy constructor for classes with dynamically allocated memory" }, "fullDescription": { "text": "Declare a copy constructor for classes with dynamically allocated memory [MRM-38]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Declare a copy constructor for classes with dynamically allocated memory [MRM-38]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-23", "name": "Never return a dereferenced local pointer initialized by new in this function scope", "shortDescription": { "text": "Never return a dereferenced local pointer initialized by new in this function scope" }, "fullDescription": { "text": "Never return a dereferenced local pointer initialized by new in this function scope [MRM-23]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Never return a dereferenced local pointer initialized by new in this function scope [MRM-23]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-33", "name": "Call delete on pointer members in destructors", "shortDescription": { "text": "Call delete on pointer members in destructors" }, "fullDescription": { "text": "Call delete on pointer members in destructors [MRM-33]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Call delete on pointer members in destructors [MRM-33]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-39", "name": "Provide error handling for file opening errors right next to the call to fopen", "shortDescription": { "text": "Provide error handling for file opening errors right next to the call to fopen" }, "fullDescription": { "text": "Provide error handling for file opening errors right next to the call to fopen [MRM-39]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Provide error handling for file opening errors right next to the call to fopen [MRM-39]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-41", "name": "A copy constructor shall copy all data members and bases", "shortDescription": { "text": "A copy constructor shall copy all data members and bases" }, "fullDescription": { "text": "A copy constructor shall copy all data members and bases [MRM-41]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A copy constructor shall copy all data members and bases [MRM-41]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-42", "name": "Call fclose() on pointer member in destructor if the pointer was used to open a file", "shortDescription": { "text": "Call fclose() on pointer member in destructor if the pointer was used to open a file" }, "fullDescription": { "text": "Call fclose() on pointer member in destructor if the pointer was used to open a file [MRM-42]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Call fclose() on pointer member in destructor if the pointer was used to open a file [MRM-42]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-43", "name": "An assignment operator shall assign all data bases", "shortDescription": { "text": "An assignment operator shall assign all data bases" }, "fullDescription": { "text": "An assignment operator shall assign all data bases [MRM-43]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An assignment operator shall assign all data bases [MRM-43]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-55", "name": "Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new'", "shortDescription": { "text": "Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new'" }, "fullDescription": { "text": "Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new' [MRM-55]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new' [MRM-55]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-02", "name": "Do not allocate more than one resource in a single statement", "shortDescription": { "text": "Do not allocate more than one resource in a single statement" }, "fullDescription": { "text": "Do not allocate more than one resource in a single statement [MRM-02]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not allocate more than one resource in a single statement [MRM-02]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-04", "name": "All classes should contain the assignment operator or appropriate comment", "shortDescription": { "text": "All classes should contain the assignment operator or appropriate comment" }, "fullDescription": { "text": "All classes should contain the assignment operator or appropriate comment [MRM-04]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All classes should contain the assignment operator or appropriate comment [MRM-04]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-05", "name": "All classes should contain the copy constructor or appropriate comment", "shortDescription": { "text": "All classes should contain the copy constructor or appropriate comment" }, "fullDescription": { "text": "All classes should contain the copy constructor or appropriate comment [MRM-05]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All classes should contain the copy constructor or appropriate comment [MRM-05]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-07", "name": "Don't memcpy or memcmp non-PODs", "shortDescription": { "text": "Don't memcpy or memcmp non-PODs" }, "fullDescription": { "text": "Don't memcpy or memcmp non-PODs [MRM-07]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Don't memcpy or memcmp non-PODs [MRM-07]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-09", "name": "Always assign a new value to an expression that points to deallocated memory", "shortDescription": { "text": "Always assign a new value to an expression that points to deallocated memory" }, "fullDescription": { "text": "Always assign a new value to an expression that points to deallocated memory [MRM-09]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Always assign a new value to an expression that points to deallocated memory [MRM-09]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-10", "name": "Always assign a new value to global or member variable that points to deallocated memory", "shortDescription": { "text": "Always assign a new value to global or member variable that points to deallocated memory" }, "fullDescription": { "text": "Always assign a new value to global or member variable that points to deallocated memory [MRM-10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Always assign a new value to global or member variable that points to deallocated memory [MRM-10]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-11", "name": "Always assign a new value to parameter or local variable that points to deallocated memory", "shortDescription": { "text": "Always assign a new value to parameter or local variable that points to deallocated memory" }, "fullDescription": { "text": "Always assign a new value to parameter or local variable that points to deallocated memory [MRM-11]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Always assign a new value to parameter or local variable that points to deallocated memory [MRM-11]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-12", "name": "Adhere to convention when writing new and delete", "shortDescription": { "text": "Adhere to convention when writing new and delete" }, "fullDescription": { "text": "Adhere to convention when writing new and delete [MRM-12]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Adhere to convention when writing new and delete [MRM-12]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-13", "name": "Adhere to convention when writing new", "shortDescription": { "text": "Adhere to convention when writing new" }, "fullDescription": { "text": "Adhere to convention when writing new [MRM-13]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Adhere to convention when writing new [MRM-13]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-14", "name": "If a class defines any overload of operator new, it should provide overloads of all three of plain, in-place, and non-throwing operator new", "shortDescription": { "text": "If a class defines any overload of operator new, it should provide overloads of all three of plain, in-place, and non-throwing operator new" }, "fullDescription": { "text": "If a class defines any overload of operator new, it should provide overloads of all three of plain, in-place, and non-throwing operator new [MRM-14]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If a class defines any overload of operator new, it should provide overloads of all three of plain, in-place, and non-throwing operator new [MRM-14]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-15", "name": "If a class defines any overload of operator new[], it should provide overloads of all three of plain, in-place, and non-throwing operator new[]", "shortDescription": { "text": "If a class defines any overload of operator new[], it should provide overloads of all three of plain, in-place, and non-throwing operator new[]" }, "fullDescription": { "text": "If a class defines any overload of operator new[], it should provide overloads of all three of plain, in-place, and non-throwing operator new[] [MRM-15]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If a class defines any overload of operator new[], it should provide overloads of all three of plain, in-place, and non-throwing operator new[] [MRM-15]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-16", "name": "If a class defines any overload of operator delete, it should provide overloads of all three of plain, in-place, and non-throwing operator delete", "shortDescription": { "text": "If a class defines any overload of operator delete, it should provide overloads of all three of plain, in-place, and non-throwing operator delete" }, "fullDescription": { "text": "If a class defines any overload of operator delete, it should provide overloads of all three of plain, in-place, and non-throwing operator delete [MRM-16]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If a class defines any overload of operator delete, it should provide overloads of all three of plain, in-place, and non-throwing operator delete [MRM-16]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-17", "name": "If a class defines any overload of operator delete[], it should provide overloads of all three of plain, in-place, and non-throwing operator delete[]", "shortDescription": { "text": "If a class defines any overload of operator delete[], it should provide overloads of all three of plain, in-place, and non-throwing operator delete[]" }, "fullDescription": { "text": "If a class defines any overload of operator delete[], it should provide overloads of all three of plain, in-place, and non-throwing operator delete[] [MRM-17]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If a class defines any overload of operator delete[], it should provide overloads of all three of plain, in-place, and non-throwing operator delete[] [MRM-17]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-18", "name": "Do not allocate memory and expect that someone else will deallocate it later", "shortDescription": { "text": "Do not allocate memory and expect that someone else will deallocate it later" }, "fullDescription": { "text": "Do not allocate memory and expect that someone else will deallocate it later [MRM-18]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not allocate memory and expect that someone else will deallocate it later [MRM-18]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-19", "name": "Do not allocate memory and expect that someone else will deallocate it later", "shortDescription": { "text": "Do not allocate memory and expect that someone else will deallocate it later" }, "fullDescription": { "text": "Do not allocate memory and expect that someone else will deallocate it later [MRM-19]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not allocate memory and expect that someone else will deallocate it later [MRM-19]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-20", "name": "Do not allocate memory and expect that someone else will deallocate it later", "shortDescription": { "text": "Do not allocate memory and expect that someone else will deallocate it later" }, "fullDescription": { "text": "Do not allocate memory and expect that someone else will deallocate it later [MRM-20]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not allocate memory and expect that someone else will deallocate it later [MRM-20]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-21", "name": "Use objects to manage resources", "shortDescription": { "text": "Use objects to manage resources" }, "fullDescription": { "text": "Use objects to manage resources [MRM-21]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use objects to manage resources [MRM-21]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-22", "name": "Use objects to manage resources", "shortDescription": { "text": "Use objects to manage resources" }, "fullDescription": { "text": "Use objects to manage resources [MRM-22]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use objects to manage resources [MRM-22]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-25", "name": "Store newed objects in smart pointers in standalone statements", "shortDescription": { "text": "Store newed objects in smart pointers in standalone statements" }, "fullDescription": { "text": "Store newed objects in smart pointers in standalone statements [MRM-25]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Store newed objects in smart pointers in standalone statements [MRM-25]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-26", "name": "Write operator delete if you write operator new", "shortDescription": { "text": "Write operator delete if you write operator new" }, "fullDescription": { "text": "Write operator delete if you write operator new [MRM-26]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Write operator delete if you write operator new [MRM-26]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-27", "name": "Write operator delete[] if you write operator new[]", "shortDescription": { "text": "Write operator delete[] if you write operator new[]" }, "fullDescription": { "text": "Write operator delete[] if you write operator new[] [MRM-27]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Write operator delete[] if you write operator new[] [MRM-27]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-28", "name": "Always provide new and delete together", "shortDescription": { "text": "Always provide new and delete together" }, "fullDescription": { "text": "Always provide new and delete together [MRM-28]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Always provide new and delete together [MRM-28]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-29", "name": "Always provide new[] and delete[] together", "shortDescription": { "text": "Always provide new[] and delete[] together" }, "fullDescription": { "text": "Always provide new[] and delete[] together [MRM-29]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Always provide new[] and delete[] together [MRM-29]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-30", "name": "Use allocation by declaration rather than by new or malloc", "shortDescription": { "text": "Use allocation by declaration rather than by new or malloc" }, "fullDescription": { "text": "Use allocation by declaration rather than by new or malloc [MRM-30]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use allocation by declaration rather than by new or malloc [MRM-30]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-31", "name": "Freed memory shouldn't be accessed under any circumstances", "shortDescription": { "text": "Freed memory shouldn't be accessed under any circumstances" }, "fullDescription": { "text": "Freed memory shouldn't be accessed under any circumstances [MRM-31]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Freed memory shouldn't be accessed under any circumstances [MRM-31]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-31_b", "name": "Destructor should not be called manually", "shortDescription": { "text": "Destructor should not be called manually" }, "fullDescription": { "text": "Destructor should not be called manually [MRM-31_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Destructor should not be called manually [MRM-31_b]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-34", "name": "Check the return value of new", "shortDescription": { "text": "Check the return value of new" }, "fullDescription": { "text": "Check the return value of new [MRM-34]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Check the return value of new [MRM-34]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-35", "name": "Never provide brackets ([]) for delete when deallocating non-arrays", "shortDescription": { "text": "Never provide brackets ([]) for delete when deallocating non-arrays" }, "fullDescription": { "text": "Never provide brackets ([]) for delete when deallocating non-arrays [MRM-35]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Never provide brackets ([]) for delete when deallocating non-arrays [MRM-35]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-36", "name": "Always provide empty brackets ([]) for delete when deallocating arrays", "shortDescription": { "text": "Always provide empty brackets ([]) for delete when deallocating arrays" }, "fullDescription": { "text": "Always provide empty brackets ([]) for delete when deallocating arrays [MRM-36]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Always provide empty brackets ([]) for delete when deallocating arrays [MRM-36]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-40", "name": "Copy and destroy consistently", "shortDescription": { "text": "Copy and destroy consistently" }, "fullDescription": { "text": "Copy and destroy consistently [MRM-40]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Copy and destroy consistently [MRM-40]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-40_a", "name": "A copy assignment operator should be declared when a copy constructor is declared (and vice versa)", "shortDescription": { "text": "A copy assignment operator should be declared when a copy constructor is declared (and vice versa)" }, "fullDescription": { "text": "A copy assignment operator should be declared when a copy constructor is declared (and vice versa) [MRM-40_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A copy assignment operator should be declared when a copy constructor is declared (and vice versa) [MRM-40_a]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-40_b", "name": "Both the copy constructor and copy assignment operator should have the same public\/protected\/private permission", "shortDescription": { "text": "Both the copy constructor and copy assignment operator should have the same public\/protected\/private permission" }, "fullDescription": { "text": "Both the copy constructor and copy assignment operator should have the same public\/protected\/private permission [MRM-40_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Both the copy constructor and copy assignment operator should have the same public\/protected\/private permission [MRM-40_b]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-40_c", "name": "If you have a non-trivial copy constructor or copy assignment operator, you should also declare a destructor", "shortDescription": { "text": "If you have a non-trivial copy constructor or copy assignment operator, you should also declare a destructor" }, "fullDescription": { "text": "If you have a non-trivial copy constructor or copy assignment operator, you should also declare a destructor [MRM-40_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If you have a non-trivial copy constructor or copy assignment operator, you should also declare a destructor [MRM-40_c]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-40_d", "name": "Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor", "shortDescription": { "text": "Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor" }, "fullDescription": { "text": "Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor [MRM-40_d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor [MRM-40_d]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-45", "name": "Do not use sizeof operator on pointer type to specify the size of the memory to be allocated via 'malloc', 'calloc' or 'realloc' function", "shortDescription": { "text": "Do not use sizeof operator on pointer type to specify the size of the memory to be allocated via 'malloc', 'calloc' or 'realloc' function" }, "fullDescription": { "text": "Do not use sizeof operator on pointer type to specify the size of the memory to be allocated via 'malloc', 'calloc' or 'realloc' function [MRM-45]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use sizeof operator on pointer type to specify the size of the memory to be allocated via 'malloc', 'calloc' or 'realloc' function [MRM-45]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-46", "name": "Do not use calloc, malloc, realloc and free functions", "shortDescription": { "text": "Do not use calloc, malloc, realloc and free functions" }, "fullDescription": { "text": "Do not use calloc, malloc, realloc and free functions [MRM-46]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use calloc, malloc, realloc and free functions [MRM-46]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-47", "name": "Classes containing at least one non-static member variable should declare the assignment operator or contain appropriate comment", "shortDescription": { "text": "Classes containing at least one non-static member variable should declare the assignment operator or contain appropriate comment" }, "fullDescription": { "text": "Classes containing at least one non-static member variable should declare the assignment operator or contain appropriate comment [MRM-47]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Classes containing at least one non-static member variable should declare the assignment operator or contain appropriate comment [MRM-47]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-48", "name": "Classes containing at least one non-static member variable should declare the copy constructor or contain appropriate comment", "shortDescription": { "text": "Classes containing at least one non-static member variable should declare the copy constructor or contain appropriate comment" }, "fullDescription": { "text": "Classes containing at least one non-static member variable should declare the copy constructor or contain appropriate comment [MRM-48]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Classes containing at least one non-static member variable should declare the copy constructor or contain appropriate comment [MRM-48]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-49", "name": "A copy constructor and a copy assignment operator shall be declared for classes that contain pointers to data items or nontrivial destructors", "shortDescription": { "text": "A copy constructor and a copy assignment operator shall be declared for classes that contain pointers to data items or nontrivial destructors" }, "fullDescription": { "text": "A copy constructor and a copy assignment operator shall be declared for classes that contain pointers to data items or nontrivial destructors [MRM-49]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A copy constructor and a copy assignment operator shall be declared for classes that contain pointers to data items or nontrivial destructors [MRM-49]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-51", "name": "Do not use 'delete' on pointers to a void type", "shortDescription": { "text": "Do not use 'delete' on pointers to a void type" }, "fullDescription": { "text": "Do not use 'delete' on pointers to a void type [MRM-51]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use 'delete' on pointers to a void type [MRM-51]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-53", "name": "The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails", "shortDescription": { "text": "The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails" }, "fullDescription": { "text": "The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails [MRM-53]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails [MRM-53]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-54", "name": "Avoid using the default operator 'new' for over-aligned types", "shortDescription": { "text": "Avoid using the default operator 'new' for over-aligned types" }, "fullDescription": { "text": "Avoid using the default operator 'new' for over-aligned types [MRM-54]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid using the default operator 'new' for over-aligned types [MRM-54]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-55_b", "name": "An overhead should be used when an array of objects is passed to the placement 'new' allocation function", "shortDescription": { "text": "An overhead should be used when an array of objects is passed to the placement 'new' allocation function" }, "fullDescription": { "text": "An overhead should be used when an array of objects is passed to the placement 'new' allocation function [MRM-55_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An overhead should be used when an array of objects is passed to the placement 'new' allocation function [MRM-55_b]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-56", "name": "Copy assignment operators should not have side effects that could affect copying the object", "shortDescription": { "text": "Copy assignment operators should not have side effects that could affect copying the object" }, "fullDescription": { "text": "Copy assignment operators should not have side effects that could affect copying the object [MRM-56]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Copy assignment operators should not have side effects that could affect copying the object [MRM-56]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-57", "name": "Move assignment operators should not have side effects that could affect moving the object", "shortDescription": { "text": "Move assignment operators should not have side effects that could affect moving the object" }, "fullDescription": { "text": "Move assignment operators should not have side effects that could affect moving the object [MRM-57]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Move assignment operators should not have side effects that could affect moving the object [MRM-57]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-50", "name": "Declare both private copy constructor and copy assignment operator at the same time", "shortDescription": { "text": "Declare both private copy constructor and copy assignment operator at the same time" }, "fullDescription": { "text": "Declare both private copy constructor and copy assignment operator at the same time [MRM-50]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare both private copy constructor and copy assignment operator at the same time [MRM-50]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-52", "name": "Use RAII to prevent resource leaks", "shortDescription": { "text": "Use RAII to prevent resource leaks" }, "fullDescription": { "text": "Use RAII to prevent resource leaks [MRM-52]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use RAII to prevent resource leaks [MRM-52]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "NAMING-42", "name": "Identifiers for constant and enumerator values shall be lowercase", "shortDescription": { "text": "Identifiers for constant and enumerator values shall be lowercase" }, "fullDescription": { "text": "Identifiers for constant and enumerator values shall be lowercase [NAMING-42]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Identifiers for constant and enumerator values shall be lowercase [NAMING-42]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-01", "name": "All \"#define\" constants shall be in uppercase", "shortDescription": { "text": "All \"#define\" constants shall be in uppercase" }, "fullDescription": { "text": "All \"#define\" constants shall be in uppercase [NAMING-01]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All \"#define\" constants shall be in uppercase [NAMING-01]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-02", "name": "In an enumerated list, list members (elements) shall be in uppercase and names or tags for the list shall be in lowercase", "shortDescription": { "text": "In an enumerated list, list members (elements) shall be in uppercase and names or tags for the list shall be in lowercase" }, "fullDescription": { "text": "In an enumerated list, list members (elements) shall be in uppercase and names or tags for the list shall be in lowercase [NAMING-02]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "In an enumerated list, list members (elements) shall be in uppercase and names or tags for the list shall be in lowercase [NAMING-02]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-03", "name": "Use lowercase for file names", "shortDescription": { "text": "Use lowercase for file names" }, "fullDescription": { "text": "Use lowercase for file names [NAMING-03]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use lowercase for file names [NAMING-03]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-04", "name": "Global prefixes should only be used for global variables", "shortDescription": { "text": "Global prefixes should only be used for global variables" }, "fullDescription": { "text": "Global prefixes should only be used for global variables [NAMING-04]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Global prefixes should only be used for global variables [NAMING-04]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-05", "name": "Begin local variable names with a lowercase letters", "shortDescription": { "text": "Begin local variable names with a lowercase letters" }, "fullDescription": { "text": "Begin local variable names with a lowercase letters [NAMING-05]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Begin local variable names with a lowercase letters [NAMING-05]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-06", "name": "Begin global variable names with a lowercase letters", "shortDescription": { "text": "Begin global variable names with a lowercase letters" }, "fullDescription": { "text": "Begin global variable names with a lowercase letters [NAMING-06]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Begin global variable names with a lowercase letters [NAMING-06]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-07", "name": "Begin member variable names with a lowercase letters", "shortDescription": { "text": "Begin member variable names with a lowercase letters" }, "fullDescription": { "text": "Begin member variable names with a lowercase letters [NAMING-07]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Begin member variable names with a lowercase letters [NAMING-07]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-08", "name": "Begin all boolean type variables with 'b'", "shortDescription": { "text": "Begin all boolean type variables with 'b'" }, "fullDescription": { "text": "Begin all boolean type variables with 'b' [NAMING-08]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Begin all boolean type variables with 'b' [NAMING-08]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-09", "name": "Begin class, struct, union, enum, and typedef names with an uppercase letter", "shortDescription": { "text": "Begin class, struct, union, enum, and typedef names with an uppercase letter" }, "fullDescription": { "text": "Begin class, struct, union, enum, and typedef names with an uppercase letter [NAMING-09]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Begin class, struct, union, enum, and typedef names with an uppercase letter [NAMING-09]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-10", "name": "The names of abstract data types, structures, typedefs, and enumerated types are to begin with an uppercase letter", "shortDescription": { "text": "The names of abstract data types, structures, typedefs, and enumerated types are to begin with an uppercase letter" }, "fullDescription": { "text": "The names of abstract data types, structures, typedefs, and enumerated types are to begin with an uppercase letter [NAMING-10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The names of abstract data types, structures, typedefs, and enumerated types are to begin with an uppercase letter [NAMING-10]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-11", "name": "The name of enumeration type shall begin with an uppercase letter and contain a suffix '_t' at the end", "shortDescription": { "text": "The name of enumeration type shall begin with an uppercase letter and contain a suffix '_t' at the end" }, "fullDescription": { "text": "The name of enumeration type shall begin with an uppercase letter and contain a suffix '_t' at the end [NAMING-11]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The name of enumeration type shall begin with an uppercase letter and contain a suffix '_t' at the end [NAMING-11]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-12", "name": "The names of structures shall begin with an uppercase letter and contain a suffix '_t' at the end", "shortDescription": { "text": "The names of structures shall begin with an uppercase letter and contain a suffix '_t' at the end" }, "fullDescription": { "text": "The names of structures shall begin with an uppercase letter and contain a suffix '_t' at the end [NAMING-12]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The names of structures shall begin with an uppercase letter and contain a suffix '_t' at the end [NAMING-12]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-13", "name": "Begin constant variables with 'c'", "shortDescription": { "text": "Begin constant variables with 'c'" }, "fullDescription": { "text": "Begin constant variables with 'c' [NAMING-13]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Begin constant variables with 'c' [NAMING-13]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-14", "name": "Begin class data member names with 'its'", "shortDescription": { "text": "Begin class data member names with 'its'" }, "fullDescription": { "text": "Begin class data member names with 'its' [NAMING-14]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Begin class data member names with 'its' [NAMING-14]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-15", "name": "Begin all double type variable with 'd'", "shortDescription": { "text": "Begin all double type variable with 'd'" }, "fullDescription": { "text": "Begin all double type variable with 'd' [NAMING-15]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Begin all double type variable with 'd' [NAMING-15]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-16", "name": "Begin all float type variables with 'f'", "shortDescription": { "text": "Begin all float type variables with 'f'" }, "fullDescription": { "text": "Begin all float type variables with 'f' [NAMING-16]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Begin all float type variables with 'f' [NAMING-16]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-17", "name": "Begin all function names with uppercase letter", "shortDescription": { "text": "Begin all function names with uppercase letter" }, "fullDescription": { "text": "Begin all function names with uppercase letter [NAMING-17]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Begin all function names with uppercase letter [NAMING-17]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-18", "name": "Begin global variable names with 'the'", "shortDescription": { "text": "Begin global variable names with 'the'" }, "fullDescription": { "text": "Begin global variable names with 'the' [NAMING-18]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Begin global variable names with 'the' [NAMING-18]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-19", "name": "Begin all integer type variable with 'i'", "shortDescription": { "text": "Begin all integer type variable with 'i'" }, "fullDescription": { "text": "Begin all integer type variable with 'i' [NAMING-19]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Begin all integer type variable with 'i' [NAMING-19]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-20", "name": "Functions that begin with 'is' should return boolean values", "shortDescription": { "text": "Functions that begin with 'is' should return boolean values" }, "fullDescription": { "text": "Functions that begin with 'is' should return boolean values [NAMING-20]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Functions that begin with 'is' should return boolean values [NAMING-20]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-21", "name": "Begin all long integer variables with 'li'", "shortDescription": { "text": "Begin all long integer variables with 'li'" }, "fullDescription": { "text": "Begin all long integer variables with 'li' [NAMING-21]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Begin all long integer variables with 'li' [NAMING-21]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-22", "name": "Prefix a variable type 'pointer' with a 'p' character", "shortDescription": { "text": "Prefix a variable type 'pointer' with a 'p' character" }, "fullDescription": { "text": "Prefix a variable type 'pointer' with a 'p' character [NAMING-22]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefix a variable type 'pointer' with a 'p' character [NAMING-22]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-23", "name": "Begin all short integer variables with 'si'", "shortDescription": { "text": "Begin all short integer variables with 'si'" }, "fullDescription": { "text": "Begin all short integer variables with 'si' [NAMING-23]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Begin all short integer variables with 'si' [NAMING-23]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-24", "name": "Begin all signed character variables with 'c'", "shortDescription": { "text": "Begin all signed character variables with 'c'" }, "fullDescription": { "text": "Begin all signed character variables with 'c' [NAMING-24]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Begin all signed character variables with 'c' [NAMING-24]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-25", "name": "Begin all terminated characters string variables with 'sz'", "shortDescription": { "text": "Begin all terminated characters string variables with 'sz'" }, "fullDescription": { "text": "Begin all terminated characters string variables with 'sz' [NAMING-25]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Begin all terminated characters string variables with 'sz' [NAMING-25]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-26", "name": "Begin all unsigned character type variables with 'uc'", "shortDescription": { "text": "Begin all unsigned character type variables with 'uc'" }, "fullDescription": { "text": "Begin all unsigned character type variables with 'uc' [NAMING-26]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Begin all unsigned character type variables with 'uc' [NAMING-26]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-27", "name": "Begin all unsigned integer type variables with 'ui'", "shortDescription": { "text": "Begin all unsigned integer type variables with 'ui'" }, "fullDescription": { "text": "Begin all unsigned integer type variables with 'ui' [NAMING-27]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Begin all unsigned integer type variables with 'ui' [NAMING-27]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-28", "name": "Use lowercase letters for structure and union member names", "shortDescription": { "text": "Use lowercase letters for structure and union member names" }, "fullDescription": { "text": "Use lowercase letters for structure and union member names [NAMING-28]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use lowercase letters for structure and union member names [NAMING-28]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-29", "name": "Append names of non-scalar typedefs with \"_t\"", "shortDescription": { "text": "Append names of non-scalar typedefs with \"_t\"" }, "fullDescription": { "text": "Append names of non-scalar typedefs with \"_t\" [NAMING-29]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Append names of non-scalar typedefs with \"_t\" [NAMING-29]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-30", "name": "Implementation files in C always have the file name extension \".c\"", "shortDescription": { "text": "Implementation files in C always have the file name extension \".c\"" }, "fullDescription": { "text": "Implementation files in C always have the file name extension \".c\" [NAMING-30]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Implementation files in C always have the file name extension \".c\" [NAMING-30]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-31", "name": "Do not use typenames that differ only by the use of uppercase and lowercase letters", "shortDescription": { "text": "Do not use typenames that differ only by the use of uppercase and lowercase letters" }, "fullDescription": { "text": "Do not use typenames that differ only by the use of uppercase and lowercase letters [NAMING-31]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use typenames that differ only by the use of uppercase and lowercase letters [NAMING-31]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-32", "name": "An include file for a class should have a file name of the form <class name> + extension", "shortDescription": { "text": "An include file for a class should have a file name of the form <class name> + extension" }, "fullDescription": { "text": "An include file for a class should have a file name of the form <class name> + extension [NAMING-32]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An include file for a class should have a file name of the form <class name> + extension [NAMING-32]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-33", "name": "Do not use identifiers which begin with one or two underscores (`_' or `__')", "shortDescription": { "text": "Do not use identifiers which begin with one or two underscores (`_' or `__')" }, "fullDescription": { "text": "Do not use identifiers which begin with one or two underscores (`_' or `__') [NAMING-33]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use identifiers which begin with one or two underscores (`_' or `__') [NAMING-33]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-34", "name": "Global function names should start with lowercase", "shortDescription": { "text": "Global function names should start with lowercase" }, "fullDescription": { "text": "Global function names should start with lowercase [NAMING-34]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Global function names should start with lowercase [NAMING-34]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-35", "name": "Member function names should start with lowercase", "shortDescription": { "text": "Member function names should start with lowercase" }, "fullDescription": { "text": "Member function names should start with lowercase [NAMING-35]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Member function names should start with lowercase [NAMING-35]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-36", "name": "Names of parameters in declaration and definition should be identical", "shortDescription": { "text": "Names of parameters in declaration and definition should be identical" }, "fullDescription": { "text": "Names of parameters in declaration and definition should be identical [NAMING-36]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Names of parameters in declaration and definition should be identical [NAMING-36]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-37", "name": "Include files in C++ always have the file name extension '.hh'", "shortDescription": { "text": "Include files in C++ always have the file name extension '.hh'" }, "fullDescription": { "text": "Include files in C++ always have the file name extension '.hh' [NAMING-37]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Include files in C++ always have the file name extension '.hh' [NAMING-37]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-38", "name": "Implementation files in C++ always have the file name extension \".cc\"", "shortDescription": { "text": "Implementation files in C++ always have the file name extension \".cc\"" }, "fullDescription": { "text": "Implementation files in C++ always have the file name extension \".cc\" [NAMING-38]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Implementation files in C++ always have the file name extension \".cc\" [NAMING-38]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-39", "name": "Inline definition files always have the file name extension \".icc\"", "shortDescription": { "text": "Inline definition files always have the file name extension \".icc\"" }, "fullDescription": { "text": "Inline definition files always have the file name extension \".icc\" [NAMING-39]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Inline definition files always have the file name extension \".icc\" [NAMING-39]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-40", "name": "Only the first word of the name of a class, structure, namespace, enumeration, or typedef will begin with an uppercase letter", "shortDescription": { "text": "Only the first word of the name of a class, structure, namespace, enumeration, or typedef will begin with an uppercase letter" }, "fullDescription": { "text": "Only the first word of the name of a class, structure, namespace, enumeration, or typedef will begin with an uppercase letter [NAMING-40]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Only the first word of the name of a class, structure, namespace, enumeration, or typedef will begin with an uppercase letter [NAMING-40]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-41", "name": "Header files will always have a file name extension of '.h'", "shortDescription": { "text": "Header files will always have a file name extension of '.h'" }, "fullDescription": { "text": "Header files will always have a file name extension of '.h' [NAMING-41]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Header files will always have a file name extension of '.h' [NAMING-41]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-43", "name": "File name extension, if present, should be \"*.cpp\" or \"*.h\"", "shortDescription": { "text": "File name extension, if present, should be \"*.cpp\" or \"*.h\"" }, "fullDescription": { "text": "File name extension, if present, should be \"*.cpp\" or \"*.h\" [NAMING-43]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "File name extension, if present, should be \"*.cpp\" or \"*.h\" [NAMING-43]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-44", "name": "All letters contained in function and variable names will be composed entirely of lowercase letters", "shortDescription": { "text": "All letters contained in function and variable names will be composed entirely of lowercase letters" }, "fullDescription": { "text": "All letters contained in function and variable names will be composed entirely of lowercase letters [NAMING-44]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All letters contained in function and variable names will be composed entirely of lowercase letters [NAMING-44]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-45", "name": "Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers", "shortDescription": { "text": "Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" }, "fullDescription": { "text": "Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers [NAMING-45]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers [NAMING-45]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-46", "name": "The ', \", \/* or \/\/ characters shall not occur in a header file name", "shortDescription": { "text": "The ', \", \/* or \/\/ characters shall not occur in a header file name" }, "fullDescription": { "text": "The ', \", \/* or \/\/ characters shall not occur in a header file name [NAMING-46]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The ', \", \/* or \/\/ characters shall not occur in a header file name [NAMING-46]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-47", "name": "Different identifiers shall be typographically unambiguous", "shortDescription": { "text": "Different identifiers shall be typographically unambiguous" }, "fullDescription": { "text": "Different identifiers shall be typographically unambiguous [NAMING-47]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Different identifiers shall be typographically unambiguous [NAMING-47]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-48", "name": "The \\ character should not occur in a header file name", "shortDescription": { "text": "The \\ character should not occur in a header file name" }, "fullDescription": { "text": "The \\ character should not occur in a header file name [NAMING-48]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The \\ character should not occur in a header file name [NAMING-48]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-51", "name": "User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters", "shortDescription": { "text": "User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" }, "fullDescription": { "text": "User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters [NAMING-51]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters [NAMING-51]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-52", "name": "Universal character names shall be used only inside character or string literals", "shortDescription": { "text": "Universal character names shall be used only inside character or string literals" }, "fullDescription": { "text": "Universal character names shall be used only inside character or string literals [NAMING-52]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Universal character names shall be used only inside character or string literals [NAMING-52]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-53", "name": "Header files should have a file extension of: \".h\", \".hpp\" or \".hxx\"", "shortDescription": { "text": "Header files should have a file extension of: \".h\", \".hpp\" or \".hxx\"" }, "fullDescription": { "text": "Header files should have a file extension of: \".h\", \".hpp\" or \".hxx\" [NAMING-53]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Header files should have a file extension of: \".h\", \".hpp\" or \".hxx\" [NAMING-53]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-54", "name": "Use visually distinct identifiers", "shortDescription": { "text": "Use visually distinct identifiers" }, "fullDescription": { "text": "Use visually distinct identifiers [NAMING-54]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use visually distinct identifiers [NAMING-54]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-49", "name": "Implementation files in C++ will always have a file name extension of \".cpp\"", "shortDescription": { "text": "Implementation files in C++ will always have a file name extension of \".cpp\"" }, "fullDescription": { "text": "Implementation files in C++ will always have a file name extension of \".cpp\" [NAMING-49]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Implementation files in C++ will always have a file name extension of \".cpp\" [NAMING-49]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-50", "name": "Identifiers in the same name space with overlapping visibility should be typographically unambiguous", "shortDescription": { "text": "Identifiers in the same name space with overlapping visibility should be typographically unambiguous" }, "fullDescription": { "text": "Identifiers in the same name space with overlapping visibility should be typographically unambiguous [NAMING-50]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers in the same name space with overlapping visibility should be typographically unambiguous [NAMING-50]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-HN-01", "name": "Hungarian notation for array variables and parameters", "shortDescription": { "text": "Hungarian notation for array variables and parameters" }, "fullDescription": { "text": "Hungarian notation for array variables and parameters [NAMING-HN-01]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for array variables and parameters [NAMING-HN-01]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-02", "name": "Hungarian notation for bool types", "shortDescription": { "text": "Hungarian notation for bool types" }, "fullDescription": { "text": "Hungarian notation for bool types [NAMING-HN-02]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for bool types [NAMING-HN-02]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-03", "name": "Hungarian notation for bool pointer, array, or reference types", "shortDescription": { "text": "Hungarian notation for bool pointer, array, or reference types" }, "fullDescription": { "text": "Hungarian notation for bool pointer, array, or reference types [NAMING-HN-03]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for bool pointer, array, or reference types [NAMING-HN-03]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-04", "name": "Hungarian notation for byte types", "shortDescription": { "text": "Hungarian notation for byte types" }, "fullDescription": { "text": "Hungarian notation for byte types [NAMING-HN-04]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for byte types [NAMING-HN-04]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-05", "name": "Hungarian notation for byte pointer, array, or reference types", "shortDescription": { "text": "Hungarian notation for byte pointer, array, or reference types" }, "fullDescription": { "text": "Hungarian notation for byte pointer, array, or reference types [NAMING-HN-05]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for byte pointer, array, or reference types [NAMING-HN-05]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-06", "name": "Hungarian notation for char types", "shortDescription": { "text": "Hungarian notation for char types" }, "fullDescription": { "text": "Hungarian notation for char types [NAMING-HN-06]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for char types [NAMING-HN-06]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-07", "name": "Hungarian notation for array of char types", "shortDescription": { "text": "Hungarian notation for array of char types" }, "fullDescription": { "text": "Hungarian notation for array of char types [NAMING-HN-07]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for array of char types [NAMING-HN-07]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-08", "name": "Hungarian notation for pointer, array, or reference to array of char types", "shortDescription": { "text": "Hungarian notation for pointer, array, or reference to array of char types" }, "fullDescription": { "text": "Hungarian notation for pointer, array, or reference to array of char types [NAMING-HN-08]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for pointer, array, or reference to array of char types [NAMING-HN-08]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-09", "name": "Hungarian notation for char pointer, array, or reference types", "shortDescription": { "text": "Hungarian notation for char pointer, array, or reference types" }, "fullDescription": { "text": "Hungarian notation for char pointer, array, or reference types [NAMING-HN-09]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for char pointer, array, or reference types [NAMING-HN-09]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-10", "name": "Hungarian notation for char pointer or reference types", "shortDescription": { "text": "Hungarian notation for char pointer or reference types" }, "fullDescription": { "text": "Hungarian notation for char pointer or reference types [NAMING-HN-10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for char pointer or reference types [NAMING-HN-10]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-11", "name": "Hungarian notation for constant parameters", "shortDescription": { "text": "Hungarian notation for constant parameters" }, "fullDescription": { "text": "Hungarian notation for constant parameters [NAMING-HN-11]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for constant parameters [NAMING-HN-11]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-12", "name": "Hungarian notation for double-precision floating point types", "shortDescription": { "text": "Hungarian notation for double-precision floating point types" }, "fullDescription": { "text": "Hungarian notation for double-precision floating point types [NAMING-HN-12]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for double-precision floating point types [NAMING-HN-12]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-13", "name": "Hungarian notation for double-precision floating point pointer, array, or reference types", "shortDescription": { "text": "Hungarian notation for double-precision floating point pointer, array, or reference types" }, "fullDescription": { "text": "Hungarian notation for double-precision floating point pointer, array, or reference types [NAMING-HN-13]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for double-precision floating point pointer, array, or reference types [NAMING-HN-13]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-14", "name": "Hungarian notation for dword types", "shortDescription": { "text": "Hungarian notation for dword types" }, "fullDescription": { "text": "Hungarian notation for dword types [NAMING-HN-14]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for dword types [NAMING-HN-14]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-15", "name": "Hungarian notation for dword pointer, array, or reference types", "shortDescription": { "text": "Hungarian notation for dword pointer, array, or reference types" }, "fullDescription": { "text": "Hungarian notation for dword pointer, array, or reference types [NAMING-HN-15]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for dword pointer, array, or reference types [NAMING-HN-15]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-16", "name": "Hungarian notation for dynamically allocated array", "shortDescription": { "text": "Hungarian notation for dynamically allocated array" }, "fullDescription": { "text": "Hungarian notation for dynamically allocated array [NAMING-HN-16]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for dynamically allocated array [NAMING-HN-16]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-17", "name": "Hungarian notation for floating point types", "shortDescription": { "text": "Hungarian notation for floating point types" }, "fullDescription": { "text": "Hungarian notation for floating point types [NAMING-HN-17]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for floating point types [NAMING-HN-17]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-18", "name": "Hungarian notation for floating point pointer, array, or reference types", "shortDescription": { "text": "Hungarian notation for floating point pointer, array, or reference types" }, "fullDescription": { "text": "Hungarian notation for floating point pointer, array, or reference types [NAMING-HN-18]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for floating point pointer, array, or reference types [NAMING-HN-18]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-19", "name": "Hungarian notation for class declaration", "shortDescription": { "text": "Hungarian notation for class declaration" }, "fullDescription": { "text": "Hungarian notation for class declaration [NAMING-HN-19]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for class declaration [NAMING-HN-19]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-20", "name": "Hungarian notation for structs declaration", "shortDescription": { "text": "Hungarian notation for structs declaration" }, "fullDescription": { "text": "Hungarian notation for structs declaration [NAMING-HN-20]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for structs declaration [NAMING-HN-20]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-21", "name": "Hungarian notation for ifstream type variables and parameters", "shortDescription": { "text": "Hungarian notation for ifstream type variables and parameters" }, "fullDescription": { "text": "Hungarian notation for ifstream type variables and parameters [NAMING-HN-21]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for ifstream type variables and parameters [NAMING-HN-21]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-22", "name": "Hungarian notation for int types", "shortDescription": { "text": "Hungarian notation for int types" }, "fullDescription": { "text": "Hungarian notation for int types [NAMING-HN-22]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for int types [NAMING-HN-22]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-23", "name": "Hungarian notation for int pointer, array, or reference types", "shortDescription": { "text": "Hungarian notation for int pointer, array, or reference types" }, "fullDescription": { "text": "Hungarian notation for int pointer, array, or reference types [NAMING-HN-23]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for int pointer, array, or reference types [NAMING-HN-23]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-24", "name": "Hungarian notation for istream type parameters and variables", "shortDescription": { "text": "Hungarian notation for istream type parameters and variables" }, "fullDescription": { "text": "Hungarian notation for istream type parameters and variables [NAMING-HN-24]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for istream type parameters and variables [NAMING-HN-24]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-25", "name": "Hungarian notation for long int types", "shortDescription": { "text": "Hungarian notation for long int types" }, "fullDescription": { "text": "Hungarian notation for long int types [NAMING-HN-25]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for long int types [NAMING-HN-25]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-26", "name": "Hungarian notation for long double-precision floating point types", "shortDescription": { "text": "Hungarian notation for long double-precision floating point types" }, "fullDescription": { "text": "Hungarian notation for long double-precision floating point types [NAMING-HN-26]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for long double-precision floating point types [NAMING-HN-26]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-27", "name": "Hungarian notation for long double-precision floating point pointer, array, or reference types", "shortDescription": { "text": "Hungarian notation for long double-precision floating point pointer, array, or reference types" }, "fullDescription": { "text": "Hungarian notation for long double-precision floating point pointer, array, or reference types [NAMING-HN-27]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for long double-precision floating point pointer, array, or reference types [NAMING-HN-27]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-28", "name": "Hungarian notation for long int pointer, array, or reference types", "shortDescription": { "text": "Hungarian notation for long int pointer, array, or reference types" }, "fullDescription": { "text": "Hungarian notation for long int pointer, array, or reference types [NAMING-HN-28]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for long int pointer, array, or reference types [NAMING-HN-28]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-29", "name": "Hungarian notation for member variables", "shortDescription": { "text": "Hungarian notation for member variables" }, "fullDescription": { "text": "Hungarian notation for member variables [NAMING-HN-29]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for member variables [NAMING-HN-29]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-30", "name": "Hungarian notation for int types", "shortDescription": { "text": "Hungarian notation for int types" }, "fullDescription": { "text": "Hungarian notation for int types [NAMING-HN-30]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for int types [NAMING-HN-30]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-31", "name": "Hungarian notation for int pointer, array, or reference types", "shortDescription": { "text": "Hungarian notation for int pointer, array, or reference types" }, "fullDescription": { "text": "Hungarian notation for int pointer, array, or reference types [NAMING-HN-31]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for int pointer, array, or reference types [NAMING-HN-31]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-32", "name": "Hungarian notation for ofstream type parameters and variables", "shortDescription": { "text": "Hungarian notation for ofstream type parameters and variables" }, "fullDescription": { "text": "Hungarian notation for ofstream type parameters and variables [NAMING-HN-32]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for ofstream type parameters and variables [NAMING-HN-32]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-33", "name": "Hungarian notation for ostream type parameters and variables", "shortDescription": { "text": "Hungarian notation for ostream type parameters and variables" }, "fullDescription": { "text": "Hungarian notation for ostream type parameters and variables [NAMING-HN-33]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for ostream type parameters and variables [NAMING-HN-33]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-34", "name": "Hungarian notation for pointer", "shortDescription": { "text": "Hungarian notation for pointer" }, "fullDescription": { "text": "Hungarian notation for pointer [NAMING-HN-34]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for pointer [NAMING-HN-34]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-35", "name": "Hungarian notation for reference parameters", "shortDescription": { "text": "Hungarian notation for reference parameters" }, "fullDescription": { "text": "Hungarian notation for reference parameters [NAMING-HN-35]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for reference parameters [NAMING-HN-35]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-36", "name": "Hungarian notation for short int types", "shortDescription": { "text": "Hungarian notation for short int types" }, "fullDescription": { "text": "Hungarian notation for short int types [NAMING-HN-36]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for short int types [NAMING-HN-36]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-37", "name": "Hungarian notation for short int pointer, array, or reference types", "shortDescription": { "text": "Hungarian notation for short int pointer, array, or reference types" }, "fullDescription": { "text": "Hungarian notation for short int pointer, array, or reference types [NAMING-HN-37]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for short int pointer, array, or reference types [NAMING-HN-37]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-38", "name": "Hungarian notation for static variables", "shortDescription": { "text": "Hungarian notation for static variables" }, "fullDescription": { "text": "Hungarian notation for static variables [NAMING-HN-38]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for static variables [NAMING-HN-38]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-39", "name": "Hungarian notation for string types", "shortDescription": { "text": "Hungarian notation for string types" }, "fullDescription": { "text": "Hungarian notation for string types [NAMING-HN-39]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for string types [NAMING-HN-39]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-40", "name": "Hungarian notation for string pointer, array, or reference types", "shortDescription": { "text": "Hungarian notation for string pointer, array, or reference types" }, "fullDescription": { "text": "Hungarian notation for string pointer, array, or reference types [NAMING-HN-40]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for string pointer, array, or reference types [NAMING-HN-40]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-41", "name": "Hungarian notation for unsigned types", "shortDescription": { "text": "Hungarian notation for unsigned types" }, "fullDescription": { "text": "Hungarian notation for unsigned types [NAMING-HN-41]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for unsigned types [NAMING-HN-41]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-42", "name": "Hungarian notation for void pointer types", "shortDescription": { "text": "Hungarian notation for void pointer types" }, "fullDescription": { "text": "Hungarian notation for void pointer types [NAMING-HN-42]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for void pointer types [NAMING-HN-42]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-43", "name": "Hungarian notation for word types", "shortDescription": { "text": "Hungarian notation for word types" }, "fullDescription": { "text": "Hungarian notation for word types [NAMING-HN-43]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for word types [NAMING-HN-43]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-44", "name": "Hungarian notation for word pointer, array, or reference types", "shortDescription": { "text": "Hungarian notation for word pointer, array, or reference types" }, "fullDescription": { "text": "Hungarian notation for word pointer, array, or reference types [NAMING-HN-44]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for word pointer, array, or reference types [NAMING-HN-44]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "OOP-03", "name": "Class cannot inherit other class more than once unless it is virtual inheritance", "shortDescription": { "text": "Class cannot inherit other class more than once unless it is virtual inheritance" }, "fullDescription": { "text": "Class cannot inherit other class more than once unless it is virtual inheritance [OOP-03]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Class cannot inherit other class more than once unless it is virtual inheritance [OOP-03]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-07", "name": "Be wary about using multiple inheritance of classes that are not abstract interfaces", "shortDescription": { "text": "Be wary about using multiple inheritance of classes that are not abstract interfaces" }, "fullDescription": { "text": "Be wary about using multiple inheritance of classes that are not abstract interfaces [OOP-07]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Be wary about using multiple inheritance of classes that are not abstract interfaces [OOP-07]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-08", "name": "Do not directly access global data from a constructor", "shortDescription": { "text": "Do not directly access global data from a constructor" }, "fullDescription": { "text": "Do not directly access global data from a constructor [OOP-08]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not directly access global data from a constructor [OOP-08]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-16", "name": "Avoid calling virtual functions from constructors", "shortDescription": { "text": "Avoid calling virtual functions from constructors" }, "fullDescription": { "text": "Avoid calling virtual functions from constructors [OOP-16]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid calling virtual functions from constructors [OOP-16]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-16_b", "name": "Avoid calling virtual functions from destructors", "shortDescription": { "text": "Avoid calling virtual functions from destructors" }, "fullDescription": { "text": "Avoid calling virtual functions from destructors [OOP-16_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid calling virtual functions from destructors [OOP-16_b]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-22", "name": "Define a virtual destructor in classes used as base classes which have virtual functions", "shortDescription": { "text": "Define a virtual destructor in classes used as base classes which have virtual functions" }, "fullDescription": { "text": "Define a virtual destructor in classes used as base classes which have virtual functions [OOP-22]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Define a virtual destructor in classes used as base classes which have virtual functions [OOP-22]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-24", "name": "Make destructors virtual in base classes", "shortDescription": { "text": "Make destructors virtual in base classes" }, "fullDescription": { "text": "Make destructors virtual in base classes [OOP-24]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Make destructors virtual in base classes [OOP-24]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-29", "name": "A pointer to an abstract class shall not be converted to a pointer of a class that inherits from that abstract class", "shortDescription": { "text": "A pointer to an abstract class shall not be converted to a pointer of a class that inherits from that abstract class" }, "fullDescription": { "text": "A pointer to an abstract class shall not be converted to a pointer of a class that inherits from that abstract class [OOP-29]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A pointer to an abstract class shall not be converted to a pointer of a class that inherits from that abstract class [OOP-29]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-31", "name": "Make base class destructors public and virtual, or protected and nonvirtual", "shortDescription": { "text": "Make base class destructors public and virtual, or protected and nonvirtual" }, "fullDescription": { "text": "Make base class destructors public and virtual, or protected and nonvirtual [OOP-31]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Make base class destructors public and virtual, or protected and nonvirtual [OOP-31]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-38", "name": "If a class destructor is called and the class has virtual functions it shall have a virtual destructor", "shortDescription": { "text": "If a class destructor is called and the class has virtual functions it shall have a virtual destructor" }, "fullDescription": { "text": "If a class destructor is called and the class has virtual functions it shall have a virtual destructor [OOP-38]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If a class destructor is called and the class has virtual functions it shall have a virtual destructor [OOP-38]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-49", "name": "Casts from a base class to a derived class should not be performed on polymorphic types", "shortDescription": { "text": "Casts from a base class to a derived class should not be performed on polymorphic types" }, "fullDescription": { "text": "Casts from a base class to a derived class should not be performed on polymorphic types [OOP-49]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Casts from a base class to a derived class should not be performed on polymorphic types [OOP-49]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-05", "name": "Do not use multiple inheritance", "shortDescription": { "text": "Do not use multiple inheritance" }, "fullDescription": { "text": "Do not use multiple inheritance [OOP-05]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use multiple inheritance [OOP-05]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-07_a", "name": "Multiple inheritance shall be limited to at most 1 protected implementation", "shortDescription": { "text": "Multiple inheritance shall be limited to at most 1 protected implementation" }, "fullDescription": { "text": "Multiple inheritance shall be limited to at most 1 protected implementation [OOP-07_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Multiple inheritance shall be limited to at most 1 protected implementation [OOP-07_a]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-07_b", "name": "Multiple inheritance shall not use any public implementations", "shortDescription": { "text": "Multiple inheritance shall not use any public implementations" }, "fullDescription": { "text": "Multiple inheritance shall not use any public implementations [OOP-07_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Multiple inheritance shall not use any public implementations [OOP-07_b]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-10", "name": "Avoid using global data in member functions", "shortDescription": { "text": "Avoid using global data in member functions" }, "fullDescription": { "text": "Avoid using global data in member functions [OOP-10]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using global data in member functions [OOP-10]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-18", "name": "Avoid \"public\" data members", "shortDescription": { "text": "Avoid \"public\" data members" }, "fullDescription": { "text": "Avoid \"public\" data members [OOP-18]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid \"public\" data members [OOP-18]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-19", "name": "Avoid 'protected' data members", "shortDescription": { "text": "Avoid 'protected' data members" }, "fullDescription": { "text": "Avoid 'protected' data members [OOP-19]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid 'protected' data members [OOP-19]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-23", "name": "If a class has virtual functions it shall have a virtual destructor", "shortDescription": { "text": "If a class has virtual functions it shall have a virtual destructor" }, "fullDescription": { "text": "If a class has virtual functions it shall have a virtual destructor [OOP-23]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If a class has virtual functions it shall have a virtual destructor [OOP-23]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-28", "name": "Avoid casts down the inheritance hierarchy", "shortDescription": { "text": "Avoid casts down the inheritance hierarchy" }, "fullDescription": { "text": "Avoid casts down the inheritance hierarchy [OOP-28]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid casts down the inheritance hierarchy [OOP-28]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-35", "name": "Down casting (casting from base to derived class) shall not be allowed", "shortDescription": { "text": "Down casting (casting from base to derived class) shall not be allowed" }, "fullDescription": { "text": "Down casting (casting from base to derived class) shall not be allowed [OOP-35]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Down casting (casting from base to derived class) shall not be allowed [OOP-35]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-39_b", "name": "A stateful virtual base shall be explicitly declared in each derived class that accesses it", "shortDescription": { "text": "A stateful virtual base shall be explicitly declared in each derived class that accesses it" }, "fullDescription": { "text": "A stateful virtual base shall be explicitly declared in each derived class that accesses it [OOP-39_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A stateful virtual base shall be explicitly declared in each derived class that accesses it [OOP-39_b]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-41", "name": "A base class shall not be both virtual and non-virtual in the same hierarchy", "shortDescription": { "text": "A base class shall not be both virtual and non-virtual in the same hierarchy" }, "fullDescription": { "text": "A base class shall not be both virtual and non-virtual in the same hierarchy [OOP-41]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A base class shall not be both virtual and non-virtual in the same hierarchy [OOP-41]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-01", "name": "Avoid public copy constructors and assignment operators in base classes", "shortDescription": { "text": "Avoid public copy constructors and assignment operators in base classes" }, "fullDescription": { "text": "Avoid public copy constructors and assignment operators in base classes [OOP-01]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid public copy constructors and assignment operators in base classes [OOP-01]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-02", "name": "Avoid slicing. Consider Clone instead of copying in base classes", "shortDescription": { "text": "Avoid slicing. Consider Clone instead of copying in base classes" }, "fullDescription": { "text": "Avoid slicing. Consider Clone instead of copying in base classes [OOP-02]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid slicing. Consider Clone instead of copying in base classes [OOP-02]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-04", "name": "Do not derive functions with the same name from more than one base class", "shortDescription": { "text": "Do not derive functions with the same name from more than one base class" }, "fullDescription": { "text": "Do not derive functions with the same name from more than one base class [OOP-04]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not derive functions with the same name from more than one base class [OOP-04]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-06", "name": "For multiple inheritance use virtual common base class", "shortDescription": { "text": "For multiple inheritance use virtual common base class" }, "fullDescription": { "text": "For multiple inheritance use virtual common base class [OOP-06]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "For multiple inheritance use virtual common base class [OOP-06]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-09", "name": "Avoid the use of global objects in destructors", "shortDescription": { "text": "Avoid the use of global objects in destructors" }, "fullDescription": { "text": "Avoid the use of global objects in destructors [OOP-09]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid the use of global objects in destructors [OOP-09]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-11", "name": "Avoid using the friend mechanism", "shortDescription": { "text": "Avoid using the friend mechanism" }, "fullDescription": { "text": "Avoid using the friend mechanism [OOP-11]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid using the friend mechanism [OOP-11]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-11_b", "name": "Friend declarations shall not be used except declarations of comparison operators", "shortDescription": { "text": "Friend declarations shall not be used except declarations of comparison operators" }, "fullDescription": { "text": "Friend declarations shall not be used except declarations of comparison operators [OOP-11_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Friend declarations shall not be used except declarations of comparison operators [OOP-11_b]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-12", "name": "Protected member function shall not return non-const handles to private class-data", "shortDescription": { "text": "Protected member function shall not return non-const handles to private class-data" }, "fullDescription": { "text": "Protected member function shall not return non-const handles to private class-data [OOP-12]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Protected member function shall not return non-const handles to private class-data [OOP-12]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-13", "name": "Do not redefine an inherited virtual function with a different default parameter value", "shortDescription": { "text": "Do not redefine an inherited virtual function with a different default parameter value" }, "fullDescription": { "text": "Do not redefine an inherited virtual function with a different default parameter value [OOP-13]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not redefine an inherited virtual function with a different default parameter value [OOP-13]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-20", "name": "Avoid explicit cast from derived to a base class", "shortDescription": { "text": "Avoid explicit cast from derived to a base class" }, "fullDescription": { "text": "Avoid explicit cast from derived to a base class [OOP-20]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid explicit cast from derived to a base class [OOP-20]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-21", "name": "Use the virtual keyword if a subclass implements a virtual function", "shortDescription": { "text": "Use the virtual keyword if a subclass implements a virtual function" }, "fullDescription": { "text": "Use the virtual keyword if a subclass implements a virtual function [OOP-21]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use the virtual keyword if a subclass implements a virtual function [OOP-21]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-25", "name": "Avoid declaring virtual functions inline", "shortDescription": { "text": "Avoid declaring virtual functions inline" }, "fullDescription": { "text": "Avoid declaring virtual functions inline [OOP-25]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid declaring virtual functions inline [OOP-25]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-26", "name": "Never convert pointers to objects of a derived class to pointers to objects of a virtual base class", "shortDescription": { "text": "Never convert pointers to objects of a derived class to pointers to objects of a virtual base class" }, "fullDescription": { "text": "Never convert pointers to objects of a derived class to pointers to objects of a virtual base class [OOP-26]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Never convert pointers to objects of a derived class to pointers to objects of a virtual base class [OOP-26]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-27", "name": "Declare copy assignment operator for class with reference or const members", "shortDescription": { "text": "Declare copy assignment operator for class with reference or const members" }, "fullDescription": { "text": "Declare copy assignment operator for class with reference or const members [OOP-27]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare copy assignment operator for class with reference or const members [OOP-27]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-30", "name": "Declare the copy constructor and copy assignment operator private not in class itself, but in a specifically designed base class", "shortDescription": { "text": "Declare the copy constructor and copy assignment operator private not in class itself, but in a specifically designed base class" }, "fullDescription": { "text": "Declare the copy constructor and copy assignment operator private not in class itself, but in a specifically designed base class [OOP-30]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare the copy constructor and copy assignment operator private not in class itself, but in a specifically designed base class [OOP-30]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-32", "name": "Never redefine an inherited nonvirtual function", "shortDescription": { "text": "Never redefine an inherited nonvirtual function" }, "fullDescription": { "text": "Never redefine an inherited nonvirtual function [OOP-32]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Never redefine an inherited nonvirtual function [OOP-32]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-33", "name": "Do not redefine an inherited nonvirtual function with template parameter", "shortDescription": { "text": "Do not redefine an inherited nonvirtual function with template parameter" }, "fullDescription": { "text": "Do not redefine an inherited nonvirtual function with template parameter [OOP-33]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not redefine an inherited nonvirtual function with template parameter [OOP-33]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-36", "name": "Public member functions shall not return non-const handles to private\/protected class-data", "shortDescription": { "text": "Public member functions shall not return non-const handles to private\/protected class-data" }, "fullDescription": { "text": "Public member functions shall not return non-const handles to private\/protected class-data [OOP-36]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Public member functions shall not return non-const handles to private\/protected class-data [OOP-36]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-42", "name": "The copy assignment operator shall be declared protected or private in an abstract class", "shortDescription": { "text": "The copy assignment operator shall be declared protected or private in an abstract class" }, "fullDescription": { "text": "The copy assignment operator shall be declared protected or private in an abstract class [OOP-42]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The copy assignment operator shall be declared protected or private in an abstract class [OOP-42]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-44", "name": "There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy", "shortDescription": { "text": "There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy" }, "fullDescription": { "text": "There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy [OOP-44]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy [OOP-44]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-45", "name": "All constructors that are callable with a single argument of fundamental type shall be declared explicit", "shortDescription": { "text": "All constructors that are callable with a single argument of fundamental type shall be declared explicit" }, "fullDescription": { "text": "All constructors that are callable with a single argument of fundamental type shall be declared explicit [OOP-45]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All constructors that are callable with a single argument of fundamental type shall be declared explicit [OOP-45]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-46", "name": "A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member", "shortDescription": { "text": "A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member" }, "fullDescription": { "text": "A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member [OOP-46]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member [OOP-46]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-47", "name": "Classes should not be derived from virtual bases", "shortDescription": { "text": "Classes should not be derived from virtual bases" }, "fullDescription": { "text": "Classes should not be derived from virtual bases [OOP-47]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Classes should not be derived from virtual bases [OOP-47]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-48", "name": "Member data in non-POD types shall be private", "shortDescription": { "text": "Member data in non-POD types shall be private" }, "fullDescription": { "text": "Member data in non-POD types shall be private [OOP-48]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Member data in non-POD types shall be private [OOP-48]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-50", "name": "A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast", "shortDescription": { "text": "A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" }, "fullDescription": { "text": "A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast [OOP-50]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast [OOP-50]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-53", "name": "Member functions declared in derived class should not hide functions declared in base classes", "shortDescription": { "text": "Member functions declared in derived class should not hide functions declared in base classes" }, "fullDescription": { "text": "Member functions declared in derived class should not hide functions declared in base classes [OOP-53]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Member functions declared in derived class should not hide functions declared in base classes [OOP-53]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-54", "name": "Do not increase the accessibility of overridden or hidden methods", "shortDescription": { "text": "Do not increase the accessibility of overridden or hidden methods" }, "fullDescription": { "text": "Do not increase the accessibility of overridden or hidden methods [OOP-54]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not increase the accessibility of overridden or hidden methods [OOP-54]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-56", "name": "A user-defined assignment operator shall not be virtual", "shortDescription": { "text": "A user-defined assignment operator shall not be virtual" }, "fullDescription": { "text": "A user-defined assignment operator shall not be virtual [OOP-56]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A user-defined assignment operator shall not be virtual [OOP-56]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-57", "name": "Structs should only contain public data members and should not be a base or inherit", "shortDescription": { "text": "Structs should only contain public data members and should not be a base or inherit" }, "fullDescription": { "text": "Structs should only contain public data members and should not be a base or inherit [OOP-57]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Structs should only contain public data members and should not be a base or inherit [OOP-57]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-17", "name": "Write a using declaration to redeclare overloaded functions", "shortDescription": { "text": "Write a using declaration to redeclare overloaded functions" }, "fullDescription": { "text": "Write a using declaration to redeclare overloaded functions [OOP-17]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Write a using declaration to redeclare overloaded functions [OOP-17]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-34", "name": "User-provided copy assignment operators shall handle self-assignment", "shortDescription": { "text": "User-provided copy assignment operators shall handle self-assignment" }, "fullDescription": { "text": "User-provided copy assignment operators shall handle self-assignment [OOP-34]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "User-provided copy assignment operators shall handle self-assignment [OOP-34]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-39", "name": "A virtual base shall be explicitly declared in each derived class", "shortDescription": { "text": "A virtual base shall be explicitly declared in each derived class" }, "fullDescription": { "text": "A virtual base shall be explicitly declared in each derived class [OOP-39]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A virtual base shall be explicitly declared in each derived class [OOP-39]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-40", "name": "Hierarchies should be based on abstract classes", "shortDescription": { "text": "Hierarchies should be based on abstract classes" }, "fullDescription": { "text": "Hierarchies should be based on abstract classes [OOP-40]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hierarchies should be based on abstract classes [OOP-40]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-43", "name": "A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual", "shortDescription": { "text": "A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" }, "fullDescription": { "text": "A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual [OOP-43]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual [OOP-43]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-52", "name": "A pointer to a class may not be converted to a pointer of a second class unless the one inherits from the other", "shortDescription": { "text": "A pointer to a class may not be converted to a pointer of a second class unless the one inherits from the other" }, "fullDescription": { "text": "A pointer to a class may not be converted to a pointer of a second class unless the one inherits from the other [OOP-52]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A pointer to a class may not be converted to a pointer of a second class unless the one inherits from the other [OOP-52]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-55", "name": "A non-POD type should be defined as class", "shortDescription": { "text": "A non-POD type should be defined as class" }, "fullDescription": { "text": "A non-POD type should be defined as class [OOP-55]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A non-POD type should be defined as class [OOP-55]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-14", "name": "Consider use composition instead of private inheritance", "shortDescription": { "text": "Consider use composition instead of private inheritance" }, "fullDescription": { "text": "Consider use composition instead of private inheritance [OOP-14]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Consider use composition instead of private inheritance [OOP-14]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-37", "name": "Prefer composition when don't need inheritance", "shortDescription": { "text": "Prefer composition when don't need inheritance" }, "fullDescription": { "text": "Prefer composition when don't need inheritance [OOP-37]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Prefer composition when don't need inheritance [OOP-37]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-51", "name": "Use namespace instead of class or structure containing only static functions", "shortDescription": { "text": "Use namespace instead of class or structure containing only static functions" }, "fullDescription": { "text": "Use namespace instead of class or structure containing only static functions [OOP-51]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Use namespace instead of class or structure containing only static functions [OOP-51]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OPT-03", "name": "Eliminate unused parameters", "shortDescription": { "text": "Eliminate unused parameters" }, "fullDescription": { "text": "Eliminate unused parameters [OPT-03]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Eliminate unused parameters [OPT-03]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-26", "name": "Variables will not be introduced until they can be initialized with meaningful values", "shortDescription": { "text": "Variables will not be introduced until they can be initialized with meaningful values" }, "fullDescription": { "text": "Variables will not be introduced until they can be initialized with meaningful values [OPT-26]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Variables will not be introduced until they can be initialized with meaningful values [OPT-26]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-01", "name": "Declare variables as locally as possible", "shortDescription": { "text": "Declare variables as locally as possible" }, "fullDescription": { "text": "Declare variables as locally as possible [OPT-01]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare variables as locally as possible [OPT-01]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-04", "name": "Prefer canonical form of ++ and --. Prefer calling the prefix forms", "shortDescription": { "text": "Prefer canonical form of ++ and --. Prefer calling the prefix forms" }, "fullDescription": { "text": "Prefer canonical form of ++ and --. Prefer calling the prefix forms [OPT-04]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer canonical form of ++ and --. Prefer calling the prefix forms [OPT-04]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-05", "name": "Avoid unused private member variables", "shortDescription": { "text": "Avoid unused private member variables" }, "fullDescription": { "text": "Avoid unused private member variables [OPT-05]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid unused private member variables [OPT-05]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-07", "name": "Prefer \"a @= b\" than \"a = a @ b\", where \"@\" is +, -, *, \/, %", "shortDescription": { "text": "Prefer \"a @= b\" than \"a = a @ b\", where \"@\" is +, -, *, \/, %" }, "fullDescription": { "text": "Prefer \"a @= b\" than \"a = a @ b\", where \"@\" is +, -, *, \/, % [OPT-07]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer \"a @= b\" than \"a = a @ b\", where \"@\" is +, -, *, \/, % [OPT-07]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-08", "name": "Prefer \"a @= b\" than \"a = a @ b\", where \"@\" is &, |, ^, <<, >>", "shortDescription": { "text": "Prefer \"a @= b\" than \"a = a @ b\", where \"@\" is &, |, ^, <<, >>" }, "fullDescription": { "text": "Prefer \"a @= b\" than \"a = a @ b\", where \"@\" is &, |, ^, <<, >> [OPT-08]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer \"a @= b\" than \"a = a @ b\", where \"@\" is &, |, ^, <<, >> [OPT-08]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-10", "name": "Do not declare variables in \"if\", \"for\", \"while\", and \"do while\" statement", "shortDescription": { "text": "Do not declare variables in \"if\", \"for\", \"while\", and \"do while\" statement" }, "fullDescription": { "text": "Do not declare variables in \"if\", \"for\", \"while\", and \"do while\" statement [OPT-10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not declare variables in \"if\", \"for\", \"while\", and \"do while\" statement [OPT-10]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-11", "name": "If a file-level static variable is used\/referenced in one function only then include that variable in the function itself", "shortDescription": { "text": "If a file-level static variable is used\/referenced in one function only then include that variable in the function itself" }, "fullDescription": { "text": "If a file-level static variable is used\/referenced in one function only then include that variable in the function itself [OPT-11]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If a file-level static variable is used\/referenced in one function only then include that variable in the function itself [OPT-11]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-12", "name": "If a file-level static variable is used\/referenced in one class only then include that variable in the class itself", "shortDescription": { "text": "If a file-level static variable is used\/referenced in one class only then include that variable in the class itself" }, "fullDescription": { "text": "If a file-level static variable is used\/referenced in one class only then include that variable in the class itself [OPT-12]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If a file-level static variable is used\/referenced in one class only then include that variable in the class itself [OPT-12]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-13", "name": "Declare member variables in the descending size order", "shortDescription": { "text": "Declare member variables in the descending size order" }, "fullDescription": { "text": "Declare member variables in the descending size order [OPT-13]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare member variables in the descending size order [OPT-13]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-14", "name": "Pass objects by reference instead of by value", "shortDescription": { "text": "Pass objects by reference instead of by value" }, "fullDescription": { "text": "Pass objects by reference instead of by value [OPT-14]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Pass objects by reference instead of by value [OPT-14]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-15", "name": "Consider overloading to avoid implicit type conversions", "shortDescription": { "text": "Consider overloading to avoid implicit type conversions" }, "fullDescription": { "text": "Consider overloading to avoid implicit type conversions [OPT-15]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Consider overloading to avoid implicit type conversions [OPT-15]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-16", "name": "Global function containing recursion, loops or virtual function call should not be inlined", "shortDescription": { "text": "Global function containing recursion, loops or virtual function call should not be inlined" }, "fullDescription": { "text": "Global function containing recursion, loops or virtual function call should not be inlined [OPT-16]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Global function containing recursion, loops or virtual function call should not be inlined [OPT-16]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-17", "name": "Avoid inline constructors and destructors", "shortDescription": { "text": "Avoid inline constructors and destructors" }, "fullDescription": { "text": "Avoid inline constructors and destructors [OPT-17]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid inline constructors and destructors [OPT-17]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-18", "name": "Member function containing recursion or loops should not be inlined", "shortDescription": { "text": "Member function containing recursion or loops should not be inlined" }, "fullDescription": { "text": "Member function containing recursion or loops should not be inlined [OPT-18]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Member function containing recursion or loops should not be inlined [OPT-18]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-19", "name": "Consider using op= instead of stand-alone op", "shortDescription": { "text": "Consider using op= instead of stand-alone op" }, "fullDescription": { "text": "Consider using op= instead of stand-alone op [OPT-19]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Consider using op= instead of stand-alone op [OPT-19]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-20", "name": "Postpone variable definitions as long as possible", "shortDescription": { "text": "Postpone variable definitions as long as possible" }, "fullDescription": { "text": "Postpone variable definitions as long as possible [OPT-20]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Postpone variable definitions as long as possible [OPT-20]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-21", "name": "Every switch statement shall have at least one non-empty case clause", "shortDescription": { "text": "Every switch statement shall have at least one non-empty case clause" }, "fullDescription": { "text": "Every switch statement shall have at least one non-empty case clause [OPT-21]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Every switch statement shall have at least one non-empty case clause [OPT-21]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-22", "name": "Useless 'case' and 'default' clauses should not be used", "shortDescription": { "text": "Useless 'case' and 'default' clauses should not be used" }, "fullDescription": { "text": "Useless 'case' and 'default' clauses should not be used [OPT-22]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Useless 'case' and 'default' clauses should not be used [OPT-22]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-28", "name": "'strlen' function should not be used to check string against NULL\/non-NULL", "shortDescription": { "text": "'strlen' function should not be used to check string against NULL\/non-NULL" }, "fullDescription": { "text": "'strlen' function should not be used to check string against NULL\/non-NULL [OPT-28]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "'strlen' function should not be used to check string against NULL\/non-NULL [OPT-28]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-30", "name": "Every defined function with internal linkage shall be used at least once", "shortDescription": { "text": "Every defined function with internal linkage shall be used at least once" }, "fullDescription": { "text": "Every defined function with internal linkage shall be used at least once [OPT-30]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Every defined function with internal linkage shall be used at least once [OPT-30]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-31", "name": "There shall be no unused parameters (named or unnamed) in non-virtual functions", "shortDescription": { "text": "There shall be no unused parameters (named or unnamed) in non-virtual functions" }, "fullDescription": { "text": "There shall be no unused parameters (named or unnamed) in non-virtual functions [OPT-31]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unused parameters (named or unnamed) in non-virtual functions [OPT-31]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-32", "name": "All non-empty functions with void return type shall have external side effect(s)", "shortDescription": { "text": "All non-empty functions with void return type shall have external side effect(s)" }, "fullDescription": { "text": "All non-empty functions with void return type shall have external side effect(s) [OPT-32]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All non-empty functions with void return type shall have external side effect(s) [OPT-32]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-35", "name": "Do not assign a variable to itself", "shortDescription": { "text": "Do not assign a variable to itself" }, "fullDescription": { "text": "Do not assign a variable to itself [OPT-35]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not assign a variable to itself [OPT-35]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-36", "name": "Do not use a variable inside its own initializer", "shortDescription": { "text": "Do not use a variable inside its own initializer" }, "fullDescription": { "text": "Do not use a variable inside its own initializer [OPT-36]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use a variable inside its own initializer [OPT-36]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-39", "name": "Every switch statement shall have at least two switch-clauses", "shortDescription": { "text": "Every switch statement shall have at least two switch-clauses" }, "fullDescription": { "text": "Every switch statement shall have at least two switch-clauses [OPT-39]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Every switch statement shall have at least two switch-clauses [OPT-39]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-42", "name": "There shall be no unused named parameters in virtual functions", "shortDescription": { "text": "There shall be no unused named parameters in virtual functions" }, "fullDescription": { "text": "There shall be no unused named parameters in virtual functions [OPT-42]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no unused named parameters in virtual functions [OPT-42]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-02", "name": "Avoid unused local variables", "shortDescription": { "text": "Avoid unused local variables" }, "fullDescription": { "text": "Avoid unused local variables [OPT-02]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid unused local variables [OPT-02]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-06", "name": "Avoid unnecessary local variables", "shortDescription": { "text": "Avoid unnecessary local variables" }, "fullDescription": { "text": "Avoid unnecessary local variables [OPT-06]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid unnecessary local variables [OPT-06]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-23", "name": "Trivial accessor and mutator functions should be inlined", "shortDescription": { "text": "Trivial accessor and mutator functions should be inlined" }, "fullDescription": { "text": "Trivial accessor and mutator functions should be inlined [OPT-23]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Trivial accessor and mutator functions should be inlined [OPT-23]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-24", "name": "Trivial forwarding functions should be inlined", "shortDescription": { "text": "Trivial forwarding functions should be inlined" }, "fullDescription": { "text": "Trivial forwarding functions should be inlined [OPT-24]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Trivial forwarding functions should be inlined [OPT-24]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-25", "name": "Only functions with 1 or 2 statements should be considered candidates for inline functions", "shortDescription": { "text": "Only functions with 1 or 2 statements should be considered candidates for inline functions" }, "fullDescription": { "text": "Only functions with 1 or 2 statements should be considered candidates for inline functions [OPT-25]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Only functions with 1 or 2 statements should be considered candidates for inline functions [OPT-25]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-27", "name": "The number of accessor and mutator functions should be minimized", "shortDescription": { "text": "The number of accessor and mutator functions should be minimized" }, "fullDescription": { "text": "The number of accessor and mutator functions should be minimized [OPT-27]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The number of accessor and mutator functions should be minimized [OPT-27]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-29", "name": "Redundant explicit cast to the same type is not allowed", "shortDescription": { "text": "Redundant explicit cast to the same type is not allowed" }, "fullDescription": { "text": "Redundant explicit cast to the same type is not allowed [OPT-29]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Redundant explicit cast to the same type is not allowed [OPT-29]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-32_b", "name": "Functions with void return type shall not be empty", "shortDescription": { "text": "Functions with void return type shall not be empty" }, "fullDescription": { "text": "Functions with void return type shall not be empty [OPT-32_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Functions with void return type shall not be empty [OPT-32_b]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-37", "name": "A function should not contain unused label declarations", "shortDescription": { "text": "A function should not contain unused label declarations" }, "fullDescription": { "text": "A function should not contain unused label declarations [OPT-37]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function should not contain unused label declarations [OPT-37]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-38", "name": "There should be no unused parameters in functions", "shortDescription": { "text": "There should be no unused parameters in functions" }, "fullDescription": { "text": "There should be no unused parameters in functions [OPT-38]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There should be no unused parameters in functions [OPT-38]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-40_a", "name": "The same code (after preprocessing) in two branches of if-else-if chain", "shortDescription": { "text": "The same code (after preprocessing) in two branches of if-else-if chain" }, "fullDescription": { "text": "The same code (after preprocessing) in two branches of if-else-if chain [OPT-40_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The same code (after preprocessing) in two branches of if-else-if chain [OPT-40_a]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-40_b", "name": "The same code (after preprocessing) in different clauses of switch statement", "shortDescription": { "text": "The same code (after preprocessing) in different clauses of switch statement" }, "fullDescription": { "text": "The same code (after preprocessing) in different clauses of switch statement [OPT-40_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The same code (after preprocessing) in different clauses of switch statement [OPT-40_b]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-41", "name": "A file should directly include only the headers that contain declarations and definitions required to compile that file", "shortDescription": { "text": "A file should directly include only the headers that contain declarations and definitions required to compile that file" }, "fullDescription": { "text": "A file should directly include only the headers that contain declarations and definitions required to compile that file [OPT-41]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A file should directly include only the headers that contain declarations and definitions required to compile that file [OPT-41]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-09", "name": "Remove unnecessary '== true'", "shortDescription": { "text": "Remove unnecessary '== true'" }, "fullDescription": { "text": "Remove unnecessary '== true' [OPT-09]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Remove unnecessary '== true' [OPT-09]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-33", "name": "Consider returning object by reference instead of by value", "shortDescription": { "text": "Consider returning object by reference instead of by value" }, "fullDescription": { "text": "Consider returning object by reference instead of by value [OPT-33]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Consider returning object by reference instead of by value [OPT-33]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OWASP2017-A3-a", "name": "Properly seed pseudorandom number generators", "shortDescription": { "text": "Properly seed pseudorandom number generators" }, "fullDescription": { "text": "Properly seed pseudorandom number generators [OWASP2017-A3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly seed pseudorandom number generators [OWASP2017-A3-a]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2017)", "OWASP A3 Sensitive Data Exposure" ], "security-severity": "8" } }, { "id": "OWASP2017-A2-a", "name": "Do not use weak encryption functions", "shortDescription": { "text": "Do not use weak encryption functions" }, "fullDescription": { "text": "Do not use weak encryption functions [OWASP2017-A2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use weak encryption functions [OWASP2017-A2-a]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2017)", "OWASP A2 Broken Authentication" ], "security-severity": "8" } }, { "id": "OWASP2017-A1-b", "name": "Protect against command injection", "shortDescription": { "text": "Protect against command injection" }, "fullDescription": { "text": "Protect against command injection [OWASP2017-A1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against command injection [OWASP2017-A1-b]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2017)", "OWASP A1 Injection" ], "security-severity": "9.5" } }, { "id": "OWASP2017-A1-c", "name": "Avoid printing tainted data on the output console", "shortDescription": { "text": "Avoid printing tainted data on the output console" }, "fullDescription": { "text": "Avoid printing tainted data on the output console [OWASP2017-A1-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid printing tainted data on the output console [OWASP2017-A1-c]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2017)", "OWASP A1 Injection" ], "security-severity": "9.5" } }, { "id": "OWASP2017-A1-d", "name": "Protect against environment injection", "shortDescription": { "text": "Protect against environment injection" }, "fullDescription": { "text": "Protect against environment injection [OWASP2017-A1-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against environment injection [OWASP2017-A1-d]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2017)", "OWASP A1 Injection" ], "security-severity": "9.5" } }, { "id": "OWASP2017-A1-e", "name": "Exclude unsanitized user input from format strings", "shortDescription": { "text": "Exclude unsanitized user input from format strings" }, "fullDescription": { "text": "Exclude unsanitized user input from format strings [OWASP2017-A1-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Exclude unsanitized user input from format strings [OWASP2017-A1-e]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2017)", "OWASP A1 Injection" ], "security-severity": "9.5" } }, { "id": "OWASP2017-A1-f", "name": "Protect against SQL injection", "shortDescription": { "text": "Protect against SQL injection" }, "fullDescription": { "text": "Protect against SQL injection [OWASP2017-A1-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against SQL injection [OWASP2017-A1-f]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2017)", "OWASP A1 Injection" ], "security-severity": "9.5" } }, { "id": "OWASP2017-A1-a", "name": "Avoid passing unvalidated binary data to log methods", "shortDescription": { "text": "Avoid passing unvalidated binary data to log methods" }, "fullDescription": { "text": "Avoid passing unvalidated binary data to log methods [OWASP2017-A1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid passing unvalidated binary data to log methods [OWASP2017-A1-a]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2017)", "OWASP A1 Injection" ], "security-severity": "8" } }, { "id": "OWASP2017-A10-a", "name": "All exceptions should be rethrown or logged with standard logger", "shortDescription": { "text": "All exceptions should be rethrown or logged with standard logger" }, "fullDescription": { "text": "All exceptions should be rethrown or logged with standard logger [OWASP2017-A10-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All exceptions should be rethrown or logged with standard logger [OWASP2017-A10-a]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2017)", "OWASP A10 Insufficient Logging&Monitoring" ], "security-severity": "8" } }, { "id": "OWASP2017-A6-c", "name": "Properly use errno value", "shortDescription": { "text": "Properly use errno value" }, "fullDescription": { "text": "Properly use errno value [OWASP2017-A6-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly use errno value [OWASP2017-A6-c]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2017)", "OWASP A6 Security Misconfiguration" ], "security-severity": "8" } }, { "id": "OWASP2017-A6-a", "name": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class", "shortDescription": { "text": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" }, "fullDescription": { "text": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class [OWASP2017-A6-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class [OWASP2017-A6-a]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2017)", "OWASP A6 Security Misconfiguration" ], "security-severity": "6" } }, { "id": "OWASP2017-A6-b", "name": "Empty 'catch' blocks should not be used", "shortDescription": { "text": "Empty 'catch' blocks should not be used" }, "fullDescription": { "text": "Empty 'catch' blocks should not be used [OWASP2017-A6-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Empty 'catch' blocks should not be used [OWASP2017-A6-b]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2017)", "OWASP A6 Security Misconfiguration" ], "security-severity": "6" } }, { "id": "OWASP2017-A5-a", "name": "Protect against file name injection", "shortDescription": { "text": "Protect against file name injection" }, "fullDescription": { "text": "Protect against file name injection [OWASP2017-A5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against file name injection [OWASP2017-A5-a]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2017)", "OWASP A5 Broken Access Control" ], "security-severity": "9.5" } }, { "id": "OWASP2017-A5-b", "name": "Observe correct revocation order while relinquishing privileges", "shortDescription": { "text": "Observe correct revocation order while relinquishing privileges" }, "fullDescription": { "text": "Observe correct revocation order while relinquishing privileges [OWASP2017-A5-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Observe correct revocation order while relinquishing privileges [OWASP2017-A5-b]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2017)", "OWASP A5 Broken Access Control" ], "security-severity": "6" } }, { "id": "OWASP2017-A5-c", "name": "Ensure that privilege relinquishment is successful", "shortDescription": { "text": "Ensure that privilege relinquishment is successful" }, "fullDescription": { "text": "Ensure that privilege relinquishment is successful [OWASP2017-A5-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Ensure that privilege relinquishment is successful [OWASP2017-A5-c]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2017)", "OWASP A5 Broken Access Control" ], "security-severity": "6" } }, { "id": "OWASP2017-A4-a", "name": "Disable resolving XML external entities (XXE) in libxerces-c", "shortDescription": { "text": "Disable resolving XML external entities (XXE) in libxerces-c" }, "fullDescription": { "text": "Disable resolving XML external entities (XXE) in libxerces-c [OWASP2017-A4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Disable resolving XML external entities (XXE) in libxerces-c [OWASP2017-A4-a]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2017)", "OWASP A4 XML External Entities (XXE)" ], "security-severity": "8" } }, { "id": "OWASP2019-API2-a", "name": "Do not use weak encryption functions", "shortDescription": { "text": "Do not use weak encryption functions" }, "fullDescription": { "text": "Do not use weak encryption functions [OWASP2019-API2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use weak encryption functions [OWASP2019-API2-a]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API2 Broken User Authentication" ], "security-severity": "8" } }, { "id": "OWASP2019-API4-b", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [OWASP2019-API4-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure resources are freed [OWASP2019-API4-b]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API4 Lack of Resources & Rate Limiting" ], "security-severity": "9.5" } }, { "id": "OWASP2019-API4-a", "name": "Validate potentially tainted data before it is used to determine the size of memory allocation", "shortDescription": { "text": "Validate potentially tainted data before it is used to determine the size of memory allocation" }, "fullDescription": { "text": "Validate potentially tainted data before it is used to determine the size of memory allocation [OWASP2019-API4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Validate potentially tainted data before it is used to determine the size of memory allocation [OWASP2019-API4-a]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API4 Lack of Resources & Rate Limiting" ], "security-severity": "8" } }, { "id": "OWASP2019-API3-d", "name": "Avoid buffer overflow due to defining incorrect format limits", "shortDescription": { "text": "Avoid buffer overflow due to defining incorrect format limits" }, "fullDescription": { "text": "Avoid buffer overflow due to defining incorrect format limits [OWASP2019-API3-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer overflow due to defining incorrect format limits [OWASP2019-API3-d]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API3 Excessive Data Exposure" ], "security-severity": "9.5" } }, { "id": "OWASP2019-API3-e", "name": "Avoid overflow due to reading a not zero terminated string", "shortDescription": { "text": "Avoid overflow due to reading a not zero terminated string" }, "fullDescription": { "text": "Avoid overflow due to reading a not zero terminated string [OWASP2019-API3-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow due to reading a not zero terminated string [OWASP2019-API3-e]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API3 Excessive Data Exposure" ], "security-severity": "9.5" } }, { "id": "OWASP2019-API3-f", "name": "Avoid overflow when reading from a buffer", "shortDescription": { "text": "Avoid overflow when reading from a buffer" }, "fullDescription": { "text": "Avoid overflow when reading from a buffer [OWASP2019-API3-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when reading from a buffer [OWASP2019-API3-f]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API3 Excessive Data Exposure" ], "security-severity": "9.5" } }, { "id": "OWASP2019-API3-g", "name": "Avoid overflow when writing to a buffer", "shortDescription": { "text": "Avoid overflow when writing to a buffer" }, "fullDescription": { "text": "Avoid overflow when writing to a buffer [OWASP2019-API3-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid overflow when writing to a buffer [OWASP2019-API3-g]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API3 Excessive Data Exposure" ], "security-severity": "9.5" } }, { "id": "OWASP2019-API3-h", "name": "Avoid buffer overflow from tainted data due to defining incorrect format limits", "shortDescription": { "text": "Avoid buffer overflow from tainted data due to defining incorrect format limits" }, "fullDescription": { "text": "Avoid buffer overflow from tainted data due to defining incorrect format limits [OWASP2019-API3-h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer overflow from tainted data due to defining incorrect format limits [OWASP2019-API3-h]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API3 Excessive Data Exposure" ], "security-severity": "9.5" } }, { "id": "OWASP2019-API3-i", "name": "Avoid buffer read overflow from tainted data", "shortDescription": { "text": "Avoid buffer read overflow from tainted data" }, "fullDescription": { "text": "Avoid buffer read overflow from tainted data [OWASP2019-API3-i]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer read overflow from tainted data [OWASP2019-API3-i]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API3 Excessive Data Exposure" ], "security-severity": "9.5" } }, { "id": "OWASP2019-API3-j", "name": "Avoid buffer write overflow from tainted data", "shortDescription": { "text": "Avoid buffer write overflow from tainted data" }, "fullDescription": { "text": "Avoid buffer write overflow from tainted data [OWASP2019-API3-j]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid buffer write overflow from tainted data [OWASP2019-API3-j]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API3 Excessive Data Exposure" ], "security-severity": "9.5" } }, { "id": "OWASP2019-API3-m", "name": "Avoid race conditions while checking for the existence of a symbolic link", "shortDescription": { "text": "Avoid race conditions while checking for the existence of a symbolic link" }, "fullDescription": { "text": "Avoid race conditions while checking for the existence of a symbolic link [OWASP2019-API3-m]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid race conditions while checking for the existence of a symbolic link [OWASP2019-API3-m]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API3 Excessive Data Exposure" ], "security-severity": "9.5" } }, { "id": "OWASP2019-API3-a", "name": "Do not pass empty container iterators to std algorithms as destinations", "shortDescription": { "text": "Do not pass empty container iterators to std algorithms as destinations" }, "fullDescription": { "text": "Do not pass empty container iterators to std algorithms as destinations [OWASP2019-API3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not pass empty container iterators to std algorithms as destinations [OWASP2019-API3-a]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API3 Excessive Data Exposure" ], "security-severity": "8" } }, { "id": "OWASP2019-API3-b", "name": "Avoid accessing arrays out of bounds", "shortDescription": { "text": "Avoid accessing arrays out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays out of bounds [OWASP2019-API3-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays out of bounds [OWASP2019-API3-b]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API3 Excessive Data Exposure" ], "security-severity": "8" } }, { "id": "OWASP2019-API3-c", "name": "Avoid accessing arrays and pointers out of bounds", "shortDescription": { "text": "Avoid accessing arrays and pointers out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays and pointers out of bounds [OWASP2019-API3-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays and pointers out of bounds [OWASP2019-API3-c]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API3 Excessive Data Exposure" ], "security-severity": "8" } }, { "id": "OWASP2019-API3-k", "name": "Properly seed pseudorandom number generators", "shortDescription": { "text": "Properly seed pseudorandom number generators" }, "fullDescription": { "text": "Properly seed pseudorandom number generators [OWASP2019-API3-k]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly seed pseudorandom number generators [OWASP2019-API3-k]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API3 Excessive Data Exposure" ], "security-severity": "8" } }, { "id": "OWASP2019-API3-l", "name": "Avoid passing sensitive data to functions that write to log files", "shortDescription": { "text": "Avoid passing sensitive data to functions that write to log files" }, "fullDescription": { "text": "Avoid passing sensitive data to functions that write to log files [OWASP2019-API3-l]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid passing sensitive data to functions that write to log files [OWASP2019-API3-l]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API3 Excessive Data Exposure" ], "security-severity": "8" } }, { "id": "OWASP2019-API3-p", "name": "Do not print potentially sensitive information, resulting from an application error into exception messages", "shortDescription": { "text": "Do not print potentially sensitive information, resulting from an application error into exception messages" }, "fullDescription": { "text": "Do not print potentially sensitive information, resulting from an application error into exception messages [OWASP2019-API3-p]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not print potentially sensitive information, resulting from an application error into exception messages [OWASP2019-API3-p]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API3 Excessive Data Exposure" ], "security-severity": "8" } }, { "id": "OWASP2019-API3-o", "name": "Avoid functions which use time from MFC library", "shortDescription": { "text": "Avoid functions which use time from MFC library" }, "fullDescription": { "text": "Avoid functions which use time from MFC library [OWASP2019-API3-o]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid functions which use time from MFC library [OWASP2019-API3-o]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API3 Excessive Data Exposure" ], "security-severity": "6" } }, { "id": "OWASP2019-API3-q", "name": "A pointer to a structure should not be passed to a function that can copy data to the user space", "shortDescription": { "text": "A pointer to a structure should not be passed to a function that can copy data to the user space" }, "fullDescription": { "text": "A pointer to a structure should not be passed to a function that can copy data to the user space [OWASP2019-API3-q]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A pointer to a structure should not be passed to a function that can copy data to the user space [OWASP2019-API3-q]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API3 Excessive Data Exposure" ], "security-severity": "6" } }, { "id": "OWASP2019-API3-n", "name": "Usage of system properties (environment variables) should be restricted", "shortDescription": { "text": "Usage of system properties (environment variables) should be restricted" }, "fullDescription": { "text": "Usage of system properties (environment variables) should be restricted [OWASP2019-API3-n]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Usage of system properties (environment variables) should be restricted [OWASP2019-API3-n]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API3 Excessive Data Exposure" ], "security-severity": "4" } }, { "id": "OWASP2019-API10-a", "name": "All exceptions should be rethrown or logged with standard logger", "shortDescription": { "text": "All exceptions should be rethrown or logged with standard logger" }, "fullDescription": { "text": "All exceptions should be rethrown or logged with standard logger [OWASP2019-API10-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All exceptions should be rethrown or logged with standard logger [OWASP2019-API10-a]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API10 Insufficient Logging & Monitoring" ], "security-severity": "8" } }, { "id": "OWASP2019-API10-b", "name": "Do not use 'syslog' function for logging purposes", "shortDescription": { "text": "Do not use 'syslog' function for logging purposes" }, "fullDescription": { "text": "Do not use 'syslog' function for logging purposes [OWASP2019-API10-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use 'syslog' function for logging purposes [OWASP2019-API10-b]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API10 Insufficient Logging & Monitoring" ], "security-severity": "8" } }, { "id": "OWASP2019-API9-c", "name": "All usage of assembler shall be documented", "shortDescription": { "text": "All usage of assembler shall be documented" }, "fullDescription": { "text": "All usage of assembler shall be documented [OWASP2019-API9-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All usage of assembler shall be documented [OWASP2019-API9-c]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API9 Improper Assets Management" ], "security-severity": "6" } }, { "id": "OWASP2019-API9-d", "name": "Use of floating-point arithmetic shall be documented", "shortDescription": { "text": "Use of floating-point arithmetic shall be documented" }, "fullDescription": { "text": "Use of floating-point arithmetic shall be documented [OWASP2019-API9-d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use of floating-point arithmetic shall be documented [OWASP2019-API9-d]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API9 Improper Assets Management" ], "security-severity": "6" } }, { "id": "OWASP2019-API9-g", "name": "All uses of the #pragma directive shall be documented and explained", "shortDescription": { "text": "All uses of the #pragma directive shall be documented and explained" }, "fullDescription": { "text": "All uses of the #pragma directive shall be documented and explained [OWASP2019-API9-g]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All uses of the #pragma directive shall be documented and explained [OWASP2019-API9-g]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API9 Improper Assets Management" ], "security-severity": "6" } }, { "id": "OWASP2019-API9-e", "name": "Objects or functions with external linkage shall be declared in a header file", "shortDescription": { "text": "Objects or functions with external linkage shall be declared in a header file" }, "fullDescription": { "text": "Objects or functions with external linkage shall be declared in a header file [OWASP2019-API9-e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Objects or functions with external linkage shall be declared in a header file [OWASP2019-API9-e]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API9 Improper Assets Management" ], "security-severity": "4" } }, { "id": "OWASP2019-API9-a", "name": "Assert liberally to document internal assumptions and invariants", "shortDescription": { "text": "Assert liberally to document internal assumptions and invariants" }, "fullDescription": { "text": "Assert liberally to document internal assumptions and invariants [OWASP2019-API9-a]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Assert liberally to document internal assumptions and invariants [OWASP2019-API9-a]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API9 Improper Assets Management" ], "security-severity": "2" } }, { "id": "OWASP2019-API9-b", "name": "When using enum, the values of each member should be explicitly declared", "shortDescription": { "text": "When using enum, the values of each member should be explicitly declared" }, "fullDescription": { "text": "When using enum, the values of each member should be explicitly declared [OWASP2019-API9-b]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "When using enum, the values of each member should be explicitly declared [OWASP2019-API9-b]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API9 Improper Assets Management" ], "security-severity": "2" } }, { "id": "OWASP2019-API9-f", "name": "Document integer division", "shortDescription": { "text": "Document integer division" }, "fullDescription": { "text": "Document integer division [OWASP2019-API9-f]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Document integer division [OWASP2019-API9-f]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API9 Improper Assets Management" ], "security-severity": "2" } }, { "id": "OWASP2019-API8-a", "name": "Protect against command injection", "shortDescription": { "text": "Protect against command injection" }, "fullDescription": { "text": "Protect against command injection [OWASP2019-API8-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against command injection [OWASP2019-API8-a]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API8 Injection" ], "security-severity": "9.5" } }, { "id": "OWASP2019-API8-b", "name": "Avoid printing tainted data on the output console", "shortDescription": { "text": "Avoid printing tainted data on the output console" }, "fullDescription": { "text": "Avoid printing tainted data on the output console [OWASP2019-API8-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid printing tainted data on the output console [OWASP2019-API8-b]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API8 Injection" ], "security-severity": "9.5" } }, { "id": "OWASP2019-API8-c", "name": "Protect against environment injection", "shortDescription": { "text": "Protect against environment injection" }, "fullDescription": { "text": "Protect against environment injection [OWASP2019-API8-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against environment injection [OWASP2019-API8-c]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API8 Injection" ], "security-severity": "9.5" } }, { "id": "OWASP2019-API8-d", "name": "Protect against file name injection", "shortDescription": { "text": "Protect against file name injection" }, "fullDescription": { "text": "Protect against file name injection [OWASP2019-API8-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against file name injection [OWASP2019-API8-d]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API8 Injection" ], "security-severity": "9.5" } }, { "id": "OWASP2019-API8-e", "name": "Exclude unsanitized user input from format strings", "shortDescription": { "text": "Exclude unsanitized user input from format strings" }, "fullDescription": { "text": "Exclude unsanitized user input from format strings [OWASP2019-API8-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Exclude unsanitized user input from format strings [OWASP2019-API8-e]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API8 Injection" ], "security-severity": "9.5" } }, { "id": "OWASP2019-API8-f", "name": "Protect against SQL injection", "shortDescription": { "text": "Protect against SQL injection" }, "fullDescription": { "text": "Protect against SQL injection [OWASP2019-API8-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against SQL injection [OWASP2019-API8-f]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API8 Injection" ], "security-severity": "9.5" } }, { "id": "OWASP2019-API8-g", "name": "Disable resolving XML external entities (XXE) in libxerces-c", "shortDescription": { "text": "Disable resolving XML external entities (XXE) in libxerces-c" }, "fullDescription": { "text": "Disable resolving XML external entities (XXE) in libxerces-c [OWASP2019-API8-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Disable resolving XML external entities (XXE) in libxerces-c [OWASP2019-API8-g]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API8 Injection" ], "security-severity": "8" } }, { "id": "OWASP2019-API8-h", "name": "Use care to ensure that LoadLibrary() will load the correct library", "shortDescription": { "text": "Use care to ensure that LoadLibrary() will load the correct library" }, "fullDescription": { "text": "Use care to ensure that LoadLibrary() will load the correct library [OWASP2019-API8-h]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use care to ensure that LoadLibrary() will load the correct library [OWASP2019-API8-h]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API8 Injection" ], "security-severity": "8" } }, { "id": "OWASP2019-API8-i", "name": "Avoid passing dynamically created strings into exec", "shortDescription": { "text": "Avoid passing dynamically created strings into exec" }, "fullDescription": { "text": "Avoid passing dynamically created strings into exec [OWASP2019-API8-i]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid passing dynamically created strings into exec [OWASP2019-API8-i]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API8 Injection" ], "security-severity": "8" } }, { "id": "OWASP2019-API8-j", "name": "Avoid passing user input into methods as parameters", "shortDescription": { "text": "Avoid passing user input into methods as parameters" }, "fullDescription": { "text": "Avoid passing user input into methods as parameters [OWASP2019-API8-j]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid passing user input into methods as parameters [OWASP2019-API8-j]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API8 Injection" ], "security-severity": "8" } }, { "id": "OWASP2019-API7-a", "name": "Properly use errno value", "shortDescription": { "text": "Properly use errno value" }, "fullDescription": { "text": "Properly use errno value [OWASP2019-API7-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly use errno value [OWASP2019-API7-a]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API7 Security Misconfiguration" ], "security-severity": "8" } }, { "id": "OWASP2019-API7-b", "name": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class", "shortDescription": { "text": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" }, "fullDescription": { "text": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class [OWASP2019-API7-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class [OWASP2019-API7-b]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API7 Security Misconfiguration" ], "security-severity": "6" } }, { "id": "OWASP2019-API7-c", "name": "Empty 'catch' blocks should not be used", "shortDescription": { "text": "Empty 'catch' blocks should not be used" }, "fullDescription": { "text": "Empty 'catch' blocks should not be used [OWASP2019-API7-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Empty 'catch' blocks should not be used [OWASP2019-API7-c]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API7 Security Misconfiguration" ], "security-severity": "6" } }, { "id": "OWASP2021-A8-a", "name": "Use care to ensure that LoadLibrary() will load the correct library", "shortDescription": { "text": "Use care to ensure that LoadLibrary() will load the correct library" }, "fullDescription": { "text": "Use care to ensure that LoadLibrary() will load the correct library [OWASP2021-A8-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use care to ensure that LoadLibrary() will load the correct library [OWASP2021-A8-a]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2021)", "OWASP A8 Software and Data Integrity Failures" ], "security-severity": "8" } }, { "id": "OWASP2021-A7-a", "name": "Do not use weak encryption functions", "shortDescription": { "text": "Do not use weak encryption functions" }, "fullDescription": { "text": "Do not use weak encryption functions [OWASP2021-A7-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use weak encryption functions [OWASP2021-A7-a]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2021)", "OWASP A7 Identification and Authentication Failures" ], "security-severity": "8" } }, { "id": "OWASP2021-A5-c", "name": "Properly use errno value", "shortDescription": { "text": "Properly use errno value" }, "fullDescription": { "text": "Properly use errno value [OWASP2021-A5-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly use errno value [OWASP2021-A5-c]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2021)", "OWASP A5 Security Misconfiguration" ], "security-severity": "8" } }, { "id": "OWASP2021-A5-d", "name": "Disable resolving XML external entities (XXE) in libxerces-c", "shortDescription": { "text": "Disable resolving XML external entities (XXE) in libxerces-c" }, "fullDescription": { "text": "Disable resolving XML external entities (XXE) in libxerces-c [OWASP2021-A5-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Disable resolving XML external entities (XXE) in libxerces-c [OWASP2021-A5-d]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2021)", "OWASP A5 Security Misconfiguration" ], "security-severity": "8" } }, { "id": "OWASP2021-A5-a", "name": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class", "shortDescription": { "text": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" }, "fullDescription": { "text": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class [OWASP2021-A5-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class [OWASP2021-A5-a]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2021)", "OWASP A5 Security Misconfiguration" ], "security-severity": "6" } }, { "id": "OWASP2021-A5-b", "name": "Empty 'catch' blocks should not be used", "shortDescription": { "text": "Empty 'catch' blocks should not be used" }, "fullDescription": { "text": "Empty 'catch' blocks should not be used [OWASP2021-A5-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Empty 'catch' blocks should not be used [OWASP2021-A5-b]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2021)", "OWASP A5 Security Misconfiguration" ], "security-severity": "6" } }, { "id": "OWASP2021-A9-a", "name": "All exceptions should be rethrown or logged with standard logger", "shortDescription": { "text": "All exceptions should be rethrown or logged with standard logger" }, "fullDescription": { "text": "All exceptions should be rethrown or logged with standard logger [OWASP2021-A9-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All exceptions should be rethrown or logged with standard logger [OWASP2021-A9-a]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2021)", "OWASP A9 Security Logging and Monitoring Failures" ], "security-severity": "8" } }, { "id": "OWASP2021-A4-a", "name": "Avoid passing sensitive data to functions that write to log files", "shortDescription": { "text": "Avoid passing sensitive data to functions that write to log files" }, "fullDescription": { "text": "Avoid passing sensitive data to functions that write to log files [OWASP2021-A4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid passing sensitive data to functions that write to log files [OWASP2021-A4-a]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2021)", "OWASP A4 Insecure Design" ], "security-severity": "8" } }, { "id": "OWASP2021-A3-b", "name": "Protect against command injection", "shortDescription": { "text": "Protect against command injection" }, "fullDescription": { "text": "Protect against command injection [OWASP2021-A3-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against command injection [OWASP2021-A3-b]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2021)", "OWASP A3 Injection" ], "security-severity": "9.5" } }, { "id": "OWASP2021-A3-c", "name": "Avoid printing tainted data on the output console", "shortDescription": { "text": "Avoid printing tainted data on the output console" }, "fullDescription": { "text": "Avoid printing tainted data on the output console [OWASP2021-A3-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid printing tainted data on the output console [OWASP2021-A3-c]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2021)", "OWASP A3 Injection" ], "security-severity": "9.5" } }, { "id": "OWASP2021-A3-d", "name": "Protect against environment injection", "shortDescription": { "text": "Protect against environment injection" }, "fullDescription": { "text": "Protect against environment injection [OWASP2021-A3-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against environment injection [OWASP2021-A3-d]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2021)", "OWASP A3 Injection" ], "security-severity": "9.5" } }, { "id": "OWASP2021-A3-e", "name": "Exclude unsanitized user input from format strings", "shortDescription": { "text": "Exclude unsanitized user input from format strings" }, "fullDescription": { "text": "Exclude unsanitized user input from format strings [OWASP2021-A3-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Exclude unsanitized user input from format strings [OWASP2021-A3-e]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2021)", "OWASP A3 Injection" ], "security-severity": "9.5" } }, { "id": "OWASP2021-A3-f", "name": "Protect against SQL injection", "shortDescription": { "text": "Protect against SQL injection" }, "fullDescription": { "text": "Protect against SQL injection [OWASP2021-A3-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against SQL injection [OWASP2021-A3-f]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2021)", "OWASP A3 Injection" ], "security-severity": "9.5" } }, { "id": "OWASP2021-A3-a", "name": "Avoid passing unvalidated binary data to log methods", "shortDescription": { "text": "Avoid passing unvalidated binary data to log methods" }, "fullDescription": { "text": "Avoid passing unvalidated binary data to log methods [OWASP2021-A3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid passing unvalidated binary data to log methods [OWASP2021-A3-a]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2021)", "OWASP A3 Injection" ], "security-severity": "8" } }, { "id": "OWASP2021-A2-a", "name": "Properly seed pseudorandom number generators", "shortDescription": { "text": "Properly seed pseudorandom number generators" }, "fullDescription": { "text": "Properly seed pseudorandom number generators [OWASP2021-A2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly seed pseudorandom number generators [OWASP2021-A2-a]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2021)", "OWASP A2 Cryptographic Failures" ], "security-severity": "8" } }, { "id": "OWASP2021-A1-a", "name": "Protect against file name injection", "shortDescription": { "text": "Protect against file name injection" }, "fullDescription": { "text": "Protect against file name injection [OWASP2021-A1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against file name injection [OWASP2021-A1-a]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2021)", "OWASP A1 Broken Access Control" ], "security-severity": "9.5" } }, { "id": "OWASP2021-A1-b", "name": "Observe correct revocation order while relinquishing privileges", "shortDescription": { "text": "Observe correct revocation order while relinquishing privileges" }, "fullDescription": { "text": "Observe correct revocation order while relinquishing privileges [OWASP2021-A1-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Observe correct revocation order while relinquishing privileges [OWASP2021-A1-b]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2021)", "OWASP A1 Broken Access Control" ], "security-severity": "6" } }, { "id": "OWASP2021-A1-c", "name": "Ensure that privilege relinquishment is successful", "shortDescription": { "text": "Ensure that privilege relinquishment is successful" }, "fullDescription": { "text": "Ensure that privilege relinquishment is successful [OWASP2021-A1-c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Ensure that privilege relinquishment is successful [OWASP2021-A1-c]" }, "properties": { "tags": [ "OWASP Top 10 Most Critical Web Application Security Risks (2021)", "OWASP A1 Broken Access Control" ], "security-severity": "6" } }, { "id": "PARSER-WARNING", "name": "Parser warning", "shortDescription": { "text": "Parser warning" }, "fullDescription": { "text": "Parser warning [PARSER-WARNING]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Parser warning [PARSER-WARNING]" }, "properties": { "tags": [ "Parser diagnostics" ] } }, { "id": "PARSER-REMARK", "name": "Parser remark", "shortDescription": { "text": "Parser remark" }, "fullDescription": { "text": "Parser remark [PARSER-REMARK]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Parser remark [PARSER-REMARK]" }, "properties": { "tags": [ "Parser diagnostics" ] } }, { "id": "PB-13", "name": "Do not call delete on non-pointers", "shortDescription": { "text": "Do not call delete on non-pointers" }, "fullDescription": { "text": "Do not call delete on non-pointers [PB-13]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not call delete on non-pointers [PB-13]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-21", "name": "Properly terminate character strings", "shortDescription": { "text": "Properly terminate character strings" }, "fullDescription": { "text": "Properly terminate character strings [PB-21]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Properly terminate character strings [PB-21]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-23", "name": "The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor", "shortDescription": { "text": "The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor" }, "fullDescription": { "text": "The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor [PB-23]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor [PB-23]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-09", "name": "Operators should not return value by reference", "shortDescription": { "text": "Operators should not return value by reference" }, "fullDescription": { "text": "Operators should not return value by reference [PB-09]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Operators should not return value by reference [PB-09]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-24", "name": "The definition of a constructor shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor", "shortDescription": { "text": "The definition of a constructor shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor" }, "fullDescription": { "text": "The definition of a constructor shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor [PB-24]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The definition of a constructor shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor [PB-24]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-25", "name": "Unsigned arithmetic shall not be used", "shortDescription": { "text": "Unsigned arithmetic shall not be used" }, "fullDescription": { "text": "Unsigned arithmetic shall not be used [PB-25]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Unsigned arithmetic shall not be used [PB-25]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-26", "name": "Public and protected methods should not be invoked by class constructor", "shortDescription": { "text": "Public and protected methods should not be invoked by class constructor" }, "fullDescription": { "text": "Public and protected methods should not be invoked by class constructor [PB-26]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Public and protected methods should not be invoked by class constructor [PB-26]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-27", "name": "A string literal shall not be modified", "shortDescription": { "text": "A string literal shall not be modified" }, "fullDescription": { "text": "A string literal shall not be modified [PB-27]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A string literal shall not be modified [PB-27]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-28", "name": "The following character sequences shall not appear in header file names: ', \\, \/*, \/\/, or \"", "shortDescription": { "text": "The following character sequences shall not appear in header file names: ', \\, \/*, \/\/, or \"" }, "fullDescription": { "text": "The following character sequences shall not appear in header file names: ', \\, \/*, \/\/, or \" [PB-28]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The following character sequences shall not appear in header file names: ', \\, \/*, \/\/, or \" [PB-28]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-29", "name": "The left-hand operand of a right-shift operator shall not have a negative value", "shortDescription": { "text": "The left-hand operand of a right-shift operator shall not have a negative value" }, "fullDescription": { "text": "The left-hand operand of a right-shift operator shall not have a negative value [PB-29]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The left-hand operand of a right-shift operator shall not have a negative value [PB-29]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-54", "name": "Do not cast from or to incomplete class at the point of casting", "shortDescription": { "text": "Do not cast from or to incomplete class at the point of casting" }, "fullDescription": { "text": "Do not cast from or to incomplete class at the point of casting [PB-54]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not cast from or to incomplete class at the point of casting [PB-54]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-55", "name": "Do not delete objects with incomplete class at the point of deletion", "shortDescription": { "text": "Do not delete objects with incomplete class at the point of deletion" }, "fullDescription": { "text": "Do not delete objects with incomplete class at the point of deletion [PB-55]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not delete objects with incomplete class at the point of deletion [PB-55]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-58", "name": "Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique", "shortDescription": { "text": "Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" }, "fullDescription": { "text": "Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique [PB-58]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique [PB-58]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-68", "name": "Boolean condition always evaluates to the same value due to enumeration with only zero or only non-zero constants", "shortDescription": { "text": "Boolean condition always evaluates to the same value due to enumeration with only zero or only non-zero constants" }, "fullDescription": { "text": "Boolean condition always evaluates to the same value due to enumeration with only zero or only non-zero constants [PB-68]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Boolean condition always evaluates to the same value due to enumeration with only zero or only non-zero constants [PB-68]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-01", "name": "Do not dereference pointer type expressions", "shortDescription": { "text": "Do not dereference pointer type expressions" }, "fullDescription": { "text": "Do not dereference pointer type expressions [PB-01]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not dereference pointer type expressions [PB-01]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-02", "name": "Do not use assignments inside a(b), a[b], and cast", "shortDescription": { "text": "Do not use assignments inside a(b), a[b], and cast" }, "fullDescription": { "text": "Do not use assignments inside a(b), a[b], and cast [PB-02]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use assignments inside a(b), a[b], and cast [PB-02]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-03", "name": "Using mixed types in ternary operator is not allowed", "shortDescription": { "text": "Using mixed types in ternary operator is not allowed" }, "fullDescription": { "text": "Using mixed types in ternary operator is not allowed [PB-03]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Using mixed types in ternary operator is not allowed [PB-03]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-05", "name": "Return value of a function must match declared return type", "shortDescription": { "text": "Return value of a function must match declared return type" }, "fullDescription": { "text": "Return value of a function must match declared return type [PB-05]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Return value of a function must match declared return type [PB-05]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-06", "name": "Assignment operator should have operands of compatible types", "shortDescription": { "text": "Assignment operator should have operands of compatible types" }, "fullDescription": { "text": "Assignment operator should have operands of compatible types [PB-06]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Assignment operator should have operands of compatible types [PB-06]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-07", "name": "Do not assign function return value to a variable of incompatible type", "shortDescription": { "text": "Do not assign function return value to a variable of incompatible type" }, "fullDescription": { "text": "Do not assign function return value to a variable of incompatible type [PB-07]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not assign function return value to a variable of incompatible type [PB-07]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-08", "name": "Do not assign signed constants to unsigned integer variables", "shortDescription": { "text": "Do not assign signed constants to unsigned integer variables" }, "fullDescription": { "text": "Do not assign signed constants to unsigned integer variables [PB-08]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not assign signed constants to unsigned integer variables [PB-08]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-10", "name": "Don't treat arrays polymorphically", "shortDescription": { "text": "Don't treat arrays polymorphically" }, "fullDescription": { "text": "Don't treat arrays polymorphically [PB-10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Don't treat arrays polymorphically [PB-10]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-11", "name": "Declared types of formal and actual parameters to functions must match", "shortDescription": { "text": "Declared types of formal and actual parameters to functions must match" }, "fullDescription": { "text": "Declared types of formal and actual parameters to functions must match [PB-11]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declared types of formal and actual parameters to functions must match [PB-11]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-12", "name": "Do not cast a signed char to an unsigned int", "shortDescription": { "text": "Do not cast a signed char to an unsigned int" }, "fullDescription": { "text": "Do not cast a signed char to an unsigned int [PB-12]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not cast a signed char to an unsigned int [PB-12]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-14", "name": "Incorrect End-Of-String (EOS) definition", "shortDescription": { "text": "Incorrect End-Of-String (EOS) definition" }, "fullDescription": { "text": "Incorrect End-Of-String (EOS) definition [PB-14]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Incorrect End-Of-String (EOS) definition [PB-14]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-15", "name": "Don't assign the dividend of two integers to a floating-point type", "shortDescription": { "text": "Don't assign the dividend of two integers to a floating-point type" }, "fullDescription": { "text": "Don't assign the dividend of two integers to a floating-point type [PB-15]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Don't assign the dividend of two integers to a floating-point type [PB-15]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-15_b", "name": "Avoid unintentionally discarding the remainder of integer division", "shortDescription": { "text": "Avoid unintentionally discarding the remainder of integer division" }, "fullDescription": { "text": "Avoid unintentionally discarding the remainder of integer division [PB-15_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid unintentionally discarding the remainder of integer division [PB-15_b]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-16", "name": "Avoid assigning out-of-range value to char type", "shortDescription": { "text": "Avoid assigning out-of-range value to char type" }, "fullDescription": { "text": "Avoid assigning out-of-range value to char type [PB-16]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid assigning out-of-range value to char type [PB-16]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-17", "name": "Avoid assigning out-of-range value to unsigned char type", "shortDescription": { "text": "Avoid assigning out-of-range value to unsigned char type" }, "fullDescription": { "text": "Avoid assigning out-of-range value to unsigned char type [PB-17]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid assigning out-of-range value to unsigned char type [PB-17]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-18", "name": "Avoid overloading class methods on a pointer and a numerical type", "shortDescription": { "text": "Avoid overloading class methods on a pointer and a numerical type" }, "fullDescription": { "text": "Avoid overloading class methods on a pointer and a numerical type [PB-18]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid overloading class methods on a pointer and a numerical type [PB-18]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-19", "name": "Do not create inline non-member functions that contain local static data", "shortDescription": { "text": "Do not create inline non-member functions that contain local static data" }, "fullDescription": { "text": "Do not create inline non-member functions that contain local static data [PB-19]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not create inline non-member functions that contain local static data [PB-19]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-20", "name": "Do not slice derived objects", "shortDescription": { "text": "Do not slice derived objects" }, "fullDescription": { "text": "Do not slice derived objects [PB-20]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not slice derived objects [PB-20]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-22", "name": "Do not use increment and decrement expressions inside a(b), a[b], and cast", "shortDescription": { "text": "Do not use increment and decrement expressions inside a(b), a[b], and cast" }, "fullDescription": { "text": "Do not use increment and decrement expressions inside a(b), a[b], and cast [PB-22]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use increment and decrement expressions inside a(b), a[b], and cast [PB-22]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-30", "name": "More than one 'enum' type shall not be used as a switch condition or a label in a case statement", "shortDescription": { "text": "More than one 'enum' type shall not be used as a switch condition or a label in a case statement" }, "fullDescription": { "text": "More than one 'enum' type shall not be used as a switch condition or a label in a case statement [PB-30]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "More than one 'enum' type shall not be used as a switch condition or a label in a case statement [PB-30]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-31", "name": "Do not call 'sizeof' on constants", "shortDescription": { "text": "Do not call 'sizeof' on constants" }, "fullDescription": { "text": "Do not call 'sizeof' on constants [PB-31]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not call 'sizeof' on constants [PB-31]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-32", "name": "Do not call 'sizeof' on a pointer type", "shortDescription": { "text": "Do not call 'sizeof' on a pointer type" }, "fullDescription": { "text": "Do not call 'sizeof' on a pointer type [PB-32]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not call 'sizeof' on a pointer type [PB-32]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-33", "name": "Avoid implicit type conversions in assignments involving enum types", "shortDescription": { "text": "Avoid implicit type conversions in assignments involving enum types" }, "fullDescription": { "text": "Avoid implicit type conversions in assignments involving enum types [PB-33]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid implicit type conversions in assignments involving enum types [PB-33]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-33_b", "name": "Avoid implicit type conversions in comparisons involving enum types", "shortDescription": { "text": "Avoid implicit type conversions in comparisons involving enum types" }, "fullDescription": { "text": "Avoid implicit type conversions in comparisons involving enum types [PB-33_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid implicit type conversions in comparisons involving enum types [PB-33_b]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-34", "name": "Third parameter to 'memcpy'\/'strncpy'\/'memmove' should not depend on second", "shortDescription": { "text": "Third parameter to 'memcpy'\/'strncpy'\/'memmove' should not depend on second" }, "fullDescription": { "text": "Third parameter to 'memcpy'\/'strncpy'\/'memmove' should not depend on second [PB-34]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Third parameter to 'memcpy'\/'strncpy'\/'memmove' should not depend on second [PB-34]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-35", "name": "Assignment operators shall not be used in conditions without brackets", "shortDescription": { "text": "Assignment operators shall not be used in conditions without brackets" }, "fullDescription": { "text": "Assignment operators shall not be used in conditions without brackets [PB-35]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Assignment operators shall not be used in conditions without brackets [PB-35]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-37", "name": "The unbounded functions of library <cstring> shall not be used", "shortDescription": { "text": "The unbounded functions of library <cstring> shall not be used" }, "fullDescription": { "text": "The unbounded functions of library <cstring> shall not be used [PB-37]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The unbounded functions of library <cstring> shall not be used [PB-37]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-38", "name": "Narrow and wide string literals shall not be concatenated", "shortDescription": { "text": "Narrow and wide string literals shall not be concatenated" }, "fullDescription": { "text": "Narrow and wide string literals shall not be concatenated [PB-38]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Narrow and wide string literals shall not be concatenated [PB-38]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-38_b", "name": "String literals with different encoding prefixes shall not be concatenated", "shortDescription": { "text": "String literals with different encoding prefixes shall not be concatenated" }, "fullDescription": { "text": "String literals with different encoding prefixes shall not be concatenated [PB-38_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "String literals with different encoding prefixes shall not be concatenated [PB-38_b]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-39", "name": "A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference", "shortDescription": { "text": "A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference" }, "fullDescription": { "text": "A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference [PB-39]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference [PB-39]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-39_b", "name": "A function shall not return a pointer or a reference to a parameter that is passed by const reference", "shortDescription": { "text": "A function shall not return a pointer or a reference to a parameter that is passed by const reference" }, "fullDescription": { "text": "A function shall not return a pointer or a reference to a parameter that is passed by const reference [PB-39_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A function shall not return a pointer or a reference to a parameter that is passed by const reference [PB-39_b]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-41", "name": "An object of array type with a specified size should not decay to a pointer when it is passed as a function argument", "shortDescription": { "text": "An object of array type with a specified size should not decay to a pointer when it is passed as a function argument" }, "fullDescription": { "text": "An object of array type with a specified size should not decay to a pointer when it is passed as a function argument [PB-41]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An object of array type with a specified size should not decay to a pointer when it is passed as a function argument [PB-41]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-41_b", "name": "An object of array type should not decay to a pointer when it is passed as a function argument", "shortDescription": { "text": "An object of array type should not decay to a pointer when it is passed as a function argument" }, "fullDescription": { "text": "An object of array type should not decay to a pointer when it is passed as a function argument [PB-41_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An object of array type should not decay to a pointer when it is passed as a function argument [PB-41_b]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-42", "name": "An object shall not be assigned to an overlapping object", "shortDescription": { "text": "An object shall not be assigned to an overlapping object" }, "fullDescription": { "text": "An object shall not be assigned to an overlapping object [PB-42]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An object shall not be assigned to an overlapping object [PB-42]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-43", "name": "All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes", "shortDescription": { "text": "All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" }, "fullDescription": { "text": "All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes [PB-43]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes [PB-43]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-44", "name": "The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception", "shortDescription": { "text": "The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" }, "fullDescription": { "text": "The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception [PB-44]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception [PB-44]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-45", "name": "There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function", "shortDescription": { "text": "There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function" }, "fullDescription": { "text": "There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function [PB-45]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function [PB-45]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-46", "name": "There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function", "shortDescription": { "text": "There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" }, "fullDescription": { "text": "There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function [PB-46]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function [PB-46]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-47", "name": "There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function", "shortDescription": { "text": "There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function" }, "fullDescription": { "text": "There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function [PB-47]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function [PB-47]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-48", "name": "There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function", "shortDescription": { "text": "There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" }, "fullDescription": { "text": "There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function [PB-48]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function [PB-48]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-49", "name": "There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function", "shortDescription": { "text": "There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" }, "fullDescription": { "text": "There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function [PB-49]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function [PB-49]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-50", "name": "The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal", "shortDescription": { "text": "The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" }, "fullDescription": { "text": "The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal [PB-50]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal [PB-50]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-51", "name": "Pointer arithmetic shall not be applied to pointers that address variables of non-array type", "shortDescription": { "text": "Pointer arithmetic shall not be applied to pointers that address variables of non-array type" }, "fullDescription": { "text": "Pointer arithmetic shall not be applied to pointers that address variables of non-array type [PB-51]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Pointer arithmetic shall not be applied to pointers that address variables of non-array type [PB-51]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-52", "name": "Avoid overloading global functions on a pointer and a numerical type", "shortDescription": { "text": "Avoid overloading global functions on a pointer and a numerical type" }, "fullDescription": { "text": "Avoid overloading global functions on a pointer and a numerical type [PB-52]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid overloading global functions on a pointer and a numerical type [PB-52]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-53", "name": "Avoid overloading namespace functions on a pointer and a numerical type", "shortDescription": { "text": "Avoid overloading namespace functions on a pointer and a numerical type" }, "fullDescription": { "text": "Avoid overloading namespace functions on a pointer and a numerical type [PB-53]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid overloading namespace functions on a pointer and a numerical type [PB-53]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-56", "name": "Avoid implicit conversions from signed to unsigned type", "shortDescription": { "text": "Avoid implicit conversions from signed to unsigned type" }, "fullDescription": { "text": "Avoid implicit conversions from signed to unsigned type [PB-56]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid implicit conversions from signed to unsigned type [PB-56]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-57", "name": "A pointer to an array of derived class objects should not be converted to a base class pointer", "shortDescription": { "text": "A pointer to an array of derived class objects should not be converted to a base class pointer" }, "fullDescription": { "text": "A pointer to an array of derived class objects should not be converted to a base class pointer [PB-57]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A pointer to an array of derived class objects should not be converted to a base class pointer [PB-57]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-59", "name": "Missing comma in a string array initialization", "shortDescription": { "text": "Missing comma in a string array initialization" }, "fullDescription": { "text": "Missing comma in a string array initialization [PB-59]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Missing comma in a string array initialization [PB-59]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-60", "name": "Suspicious argument to malloc", "shortDescription": { "text": "Suspicious argument to malloc" }, "fullDescription": { "text": "Suspicious argument to malloc [PB-60]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Suspicious argument to malloc [PB-60]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-61", "name": "Pointer arithmetic performed on freshly allocated memory", "shortDescription": { "text": "Pointer arithmetic performed on freshly allocated memory" }, "fullDescription": { "text": "Pointer arithmetic performed on freshly allocated memory [PB-61]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Pointer arithmetic performed on freshly allocated memory [PB-61]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-62", "name": "Avoid function calls with incorrect argument order", "shortDescription": { "text": "Avoid function calls with incorrect argument order" }, "fullDescription": { "text": "Avoid function calls with incorrect argument order [PB-62]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid function calls with incorrect argument order [PB-62]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-63", "name": "Function address should not be compared to zero", "shortDescription": { "text": "Function address should not be compared to zero" }, "fullDescription": { "text": "Function address should not be compared to zero [PB-63]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Function address should not be compared to zero [PB-63]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-64", "name": "The values returned by string comparison functions should be compared only to zero", "shortDescription": { "text": "The values returned by string comparison functions should be compared only to zero" }, "fullDescription": { "text": "The values returned by string comparison functions should be compared only to zero [PB-64]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The values returned by string comparison functions should be compared only to zero [PB-64]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-65", "name": "Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type", "shortDescription": { "text": "Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" }, "fullDescription": { "text": "Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type [PB-65]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type [PB-65]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-65_b", "name": "Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type", "shortDescription": { "text": "Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type" }, "fullDescription": { "text": "Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type [PB-65_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type [PB-65_b]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-66_a", "name": "Integer overflow or underflow in constant expression in '+', '-', '*' operator", "shortDescription": { "text": "Integer overflow or underflow in constant expression in '+', '-', '*' operator" }, "fullDescription": { "text": "Integer overflow or underflow in constant expression in '+', '-', '*' operator [PB-66_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Integer overflow or underflow in constant expression in '+', '-', '*' operator [PB-66_a]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-67", "name": "The same code (after preprocessing) in both branches of if-else statement", "shortDescription": { "text": "The same code (after preprocessing) in both branches of if-else statement" }, "fullDescription": { "text": "The same code (after preprocessing) in both branches of if-else statement [PB-67]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The same code (after preprocessing) in both branches of if-else statement [PB-67]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-69", "name": "An element of an object shall not be initialized more than once", "shortDescription": { "text": "An element of an object shall not be initialized more than once" }, "fullDescription": { "text": "An element of an object shall not be initialized more than once [PB-69]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An element of an object shall not be initialized more than once [PB-69]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-70", "name": "An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration", "shortDescription": { "text": "An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" }, "fullDescription": { "text": "An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration [PB-70]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration [PB-70]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-71", "name": "Do not copy instances of structures containing a flexible array member", "shortDescription": { "text": "Do not copy instances of structures containing a flexible array member" }, "fullDescription": { "text": "Do not copy instances of structures containing a flexible array member [PB-71]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not copy instances of structures containing a flexible array member [PB-71]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-72", "name": "Do not call va_arg with an argument of the incorrect type", "shortDescription": { "text": "Do not call va_arg with an argument of the incorrect type" }, "fullDescription": { "text": "Do not call va_arg with an argument of the incorrect type [PB-72]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not call va_arg with an argument of the incorrect type [PB-72]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-75", "name": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used", "shortDescription": { "text": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" }, "fullDescription": { "text": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [PB-75]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [PB-75]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-75_b", "name": "The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used", "shortDescription": { "text": "The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" }, "fullDescription": { "text": "The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [PB-75_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [PB-75_b]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-75_c", "name": "The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used", "shortDescription": { "text": "The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" }, "fullDescription": { "text": "The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used [PB-75_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used [PB-75_c]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-76", "name": "C-style strings shall not be used", "shortDescription": { "text": "C-style strings shall not be used" }, "fullDescription": { "text": "C-style strings shall not be used [PB-76]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "C-style strings shall not be used [PB-76]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-77", "name": "Expression statements shall not be explicit calls to constructors of temporary objects only", "shortDescription": { "text": "Expression statements shall not be explicit calls to constructors of temporary objects only" }, "fullDescription": { "text": "Expression statements shall not be explicit calls to constructors of temporary objects only [PB-77]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Expression statements shall not be explicit calls to constructors of temporary objects only [PB-77]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-78", "name": "Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types", "shortDescription": { "text": "Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types" }, "fullDescription": { "text": "Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types [PB-78]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types [PB-78]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-79", "name": "Avoid function declarations that are syntactically ambiguous", "shortDescription": { "text": "Avoid function declarations that are syntactically ambiguous" }, "fullDescription": { "text": "Avoid function declarations that are syntactically ambiguous [PB-79]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid function declarations that are syntactically ambiguous [PB-79]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-66_b", "name": "Integer overflow or underflow in constant expression in '<<' operator", "shortDescription": { "text": "Integer overflow or underflow in constant expression in '<<' operator" }, "fullDescription": { "text": "Integer overflow or underflow in constant expression in '<<' operator [PB-66_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Integer overflow or underflow in constant expression in '<<' operator [PB-66_b]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-74", "name": "Do not add or subtract a constant with a value greater than one from an iterator", "shortDescription": { "text": "Do not add or subtract a constant with a value greater than one from an iterator" }, "fullDescription": { "text": "Do not add or subtract a constant with a value greater than one from an iterator [PB-74]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not add or subtract a constant with a value greater than one from an iterator [PB-74]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-73", "name": "Evaluation of constant unsigned integer expressions should not lead to wrap-around", "shortDescription": { "text": "Evaluation of constant unsigned integer expressions should not lead to wrap-around" }, "fullDescription": { "text": "Evaluation of constant unsigned integer expressions should not lead to wrap-around [PB-73]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Evaluation of constant unsigned integer expressions should not lead to wrap-around [PB-73]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PFO-01", "name": "A header file shall not contain definitions of functions or objects that are non-inline and have external linkage", "shortDescription": { "text": "A header file shall not contain definitions of functions or objects that are non-inline and have external linkage" }, "fullDescription": { "text": "A header file shall not contain definitions of functions or objects that are non-inline and have external linkage [PFO-01]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A header file shall not contain definitions of functions or objects that are non-inline and have external linkage [PFO-01]" }, "properties": { "tags": [ "Physical File Organization" ] } }, { "id": "PFO-02", "name": "Use multiple include guards", "shortDescription": { "text": "Use multiple include guards" }, "fullDescription": { "text": "Use multiple include guards [PFO-02]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use multiple include guards [PFO-02]" }, "properties": { "tags": [ "Physical File Organization" ] } }, { "id": "PFO-03", "name": "An include file should not contain more than one class definition", "shortDescription": { "text": "An include file should not contain more than one class definition" }, "fullDescription": { "text": "An include file should not contain more than one class definition [PFO-03]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An include file should not contain more than one class definition [PFO-03]" }, "properties": { "tags": [ "Physical File Organization" ] } }, { "id": "PFO-05", "name": "File with extension '.c' may not include other files with extension '.c'", "shortDescription": { "text": "File with extension '.c' may not include other files with extension '.c'" }, "fullDescription": { "text": "File with extension '.c' may not include other files with extension '.c' [PFO-05]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "File with extension '.c' may not include other files with extension '.c' [PFO-05]" }, "properties": { "tags": [ "Physical File Organization" ] } }, { "id": "PFO-06", "name": "Never include other files in a file with extension '.icc'", "shortDescription": { "text": "Never include other files in a file with extension '.icc'" }, "fullDescription": { "text": "Never include other files in a file with extension '.icc' [PFO-06]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Never include other files in a file with extension '.icc' [PFO-06]" }, "properties": { "tags": [ "Physical File Organization" ] } }, { "id": "PFO-07", "name": "Use multiple include guards with pattern based on the header file name", "shortDescription": { "text": "Use multiple include guards with pattern based on the header file name" }, "fullDescription": { "text": "Use multiple include guards with pattern based on the header file name [PFO-07]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use multiple include guards with pattern based on the header file name [PFO-07]" }, "properties": { "tags": [ "Physical File Organization" ] } }, { "id": "PFO-08", "name": "Use mechanism that prevents multiple inclusion of the file i.e. include guards or \"#pragma once\" preprocessor directive", "shortDescription": { "text": "Use mechanism that prevents multiple inclusion of the file i.e. include guards or \"#pragma once\" preprocessor directive" }, "fullDescription": { "text": "Use mechanism that prevents multiple inclusion of the file i.e. include guards or \"#pragma once\" preprocessor directive [PFO-08]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use mechanism that prevents multiple inclusion of the file i.e. include guards or \"#pragma once\" preprocessor directive [PFO-08]" }, "properties": { "tags": [ "Physical File Organization" ] } }, { "id": "PFO-09", "name": "\"#pragma once\" preprocessor directive should not be used in source files", "shortDescription": { "text": "\"#pragma once\" preprocessor directive should not be used in source files" }, "fullDescription": { "text": "\"#pragma once\" preprocessor directive should not be used in source files [PFO-09]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "\"#pragma once\" preprocessor directive should not be used in source files [PFO-09]" }, "properties": { "tags": [ "Physical File Organization" ] } }, { "id": "PFO-10", "name": "Do not define more than on class in a header file", "shortDescription": { "text": "Do not define more than on class in a header file" }, "fullDescription": { "text": "Do not define more than on class in a header file [PFO-10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not define more than on class in a header file [PFO-10]" }, "properties": { "tags": [ "Physical File Organization" ] } }, { "id": "PFO-04", "name": "Every implementation file should declare a local constant string that describes the file", "shortDescription": { "text": "Every implementation file should declare a local constant string that describes the file" }, "fullDescription": { "text": "Every implementation file should declare a local constant string that describes the file [PFO-04]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Every implementation file should declare a local constant string that describes the file [PFO-04]" }, "properties": { "tags": [ "Physical File Organization" ] } }, { "id": "PORT-03", "name": "Don't use hard coded value of offset in structures", "shortDescription": { "text": "Don't use hard coded value of offset in structures" }, "fullDescription": { "text": "Don't use hard coded value of offset in structures [PORT-03]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't use hard coded value of offset in structures [PORT-03]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-04", "name": "Don't use hex constant '0xffffffff' as an error marker", "shortDescription": { "text": "Don't use hex constant '0xffffffff' as an error marker" }, "fullDescription": { "text": "Don't use hex constant '0xffffffff' as an error marker [PORT-04]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't use hex constant '0xffffffff' as an error marker [PORT-04]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-05", "name": "A pointer to a long should not be casted to an int pointer", "shortDescription": { "text": "A pointer to a long should not be casted to an int pointer" }, "fullDescription": { "text": "A pointer to a long should not be casted to an int pointer [PORT-05]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A pointer to a long should not be casted to an int pointer [PORT-05]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-11", "name": "Do not cast an int pointer to a long pointer", "shortDescription": { "text": "Do not cast an int pointer to a long pointer" }, "fullDescription": { "text": "Do not cast an int pointer to a long pointer [PORT-11]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not cast an int pointer to a long pointer [PORT-11]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-26", "name": "Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier", "shortDescription": { "text": "Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier" }, "fullDescription": { "text": "Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier [PORT-26]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier [PORT-26]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-02", "name": "Assigning result of ints operation to long without casting at least one of the ints is not allowed", "shortDescription": { "text": "Assigning result of ints operation to long without casting at least one of the ints is not allowed" }, "fullDescription": { "text": "Assigning result of ints operation to long without casting at least one of the ints is not allowed [PORT-02]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Assigning result of ints operation to long without casting at least one of the ints is not allowed [PORT-02]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-06", "name": "Do not assign a long int to an int", "shortDescription": { "text": "Do not assign a long int to an int" }, "fullDescription": { "text": "Do not assign a long int to an int [PORT-06]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not assign a long int to an int [PORT-06]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-07", "name": "Do not pass long casted to an int in function call", "shortDescription": { "text": "Do not pass long casted to an int in function call" }, "fullDescription": { "text": "Do not pass long casted to an int in function call [PORT-07]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not pass long casted to an int in function call [PORT-07]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-08", "name": "Constant assignment to long should not involve int literals", "shortDescription": { "text": "Constant assignment to long should not involve int literals" }, "fullDescription": { "text": "Constant assignment to long should not involve int literals [PORT-08]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Constant assignment to long should not involve int literals [PORT-08]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-10", "name": "Do not initialize a long int with int literals", "shortDescription": { "text": "Do not initialize a long int with int literals" }, "fullDescription": { "text": "Do not initialize a long int with int literals [PORT-10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not initialize a long int with int literals [PORT-10]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-12", "name": "Do not assign the value from 32 bit multiplication to long type", "shortDescription": { "text": "Do not assign the value from 32 bit multiplication to long type" }, "fullDescription": { "text": "Do not assign the value from 32 bit multiplication to long type [PORT-12]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not assign the value from 32 bit multiplication to long type [PORT-12]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-13", "name": "The type int shall always be declared as unsigned int or signed int", "shortDescription": { "text": "The type int shall always be declared as unsigned int or signed int" }, "fullDescription": { "text": "The type int shall always be declared as unsigned int or signed int [PORT-13]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The type int shall always be declared as unsigned int or signed int [PORT-13]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-14", "name": "Avoid conversions from \"shorter\" type to \"longer\" type in assignment", "shortDescription": { "text": "Avoid conversions from \"shorter\" type to \"longer\" type in assignment" }, "fullDescription": { "text": "Avoid conversions from \"shorter\" type to \"longer\" type in assignment [PORT-14]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid conversions from \"shorter\" type to \"longer\" type in assignment [PORT-14]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-15", "name": "Do not cast from \"shorter\" type to \"longer\" type", "shortDescription": { "text": "Do not cast from \"shorter\" type to \"longer\" type" }, "fullDescription": { "text": "Do not cast from \"shorter\" type to \"longer\" type [PORT-15]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not cast from \"shorter\" type to \"longer\" type [PORT-15]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-16", "name": "Avoid conversions from a \"shorter\" type to a \"longer\" type in function calls", "shortDescription": { "text": "Avoid conversions from a \"shorter\" type to a \"longer\" type in function calls" }, "fullDescription": { "text": "Avoid conversions from a \"shorter\" type to a \"longer\" type in function calls [PORT-16]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid conversions from a \"shorter\" type to a \"longer\" type in function calls [PORT-16]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-17", "name": "Don't use 'i64' or 'L' suffixes directly", "shortDescription": { "text": "Don't use 'i64' or 'L' suffixes directly" }, "fullDescription": { "text": "Don't use 'i64' or 'L' suffixes directly [PORT-17]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Don't use 'i64' or 'L' suffixes directly [PORT-17]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-19", "name": "Instead of casting a long type operand of an expression to int cast the result of the expression", "shortDescription": { "text": "Instead of casting a long type operand of an expression to int cast the result of the expression" }, "fullDescription": { "text": "Instead of casting a long type operand of an expression to int cast the result of the expression [PORT-19]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Instead of casting a long type operand of an expression to int cast the result of the expression [PORT-19]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-20", "name": "Do not declare variables of long type directly", "shortDescription": { "text": "Do not declare variables of long type directly" }, "fullDescription": { "text": "Do not declare variables of long type directly [PORT-20]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not declare variables of long type directly [PORT-20]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-21", "name": "Do not assign a long value to a double", "shortDescription": { "text": "Do not assign a long value to a double" }, "fullDescription": { "text": "Do not assign a long value to a double [PORT-21]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not assign a long value to a double [PORT-21]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-25", "name": "The names of identifiers should not be longer than 64 characters", "shortDescription": { "text": "The names of identifiers should not be longer than 64 characters" }, "fullDescription": { "text": "The names of identifiers should not be longer than 64 characters [PORT-25]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The names of identifiers should not be longer than 64 characters [PORT-25]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-27", "name": "Avoid implicit conversions to a type of narrower size", "shortDescription": { "text": "Avoid implicit conversions to a type of narrower size" }, "fullDescription": { "text": "Avoid implicit conversions to a type of narrower size [PORT-27]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid implicit conversions to a type of narrower size [PORT-27]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-28", "name": "Avoid conversions of constant values to a narrower type", "shortDescription": { "text": "Avoid conversions of constant values to a narrower type" }, "fullDescription": { "text": "Avoid conversions of constant values to a narrower type [PORT-28]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid conversions of constant values to a narrower type [PORT-28]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-29", "name": "A pointer to a structure should not be passed to a function that writes data to a file", "shortDescription": { "text": "A pointer to a structure should not be passed to a function that writes data to a file" }, "fullDescription": { "text": "A pointer to a structure should not be passed to a function that writes data to a file [PORT-29]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A pointer to a structure should not be passed to a function that writes data to a file [PORT-29]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-32", "name": "Type long double shall not be used", "shortDescription": { "text": "Type long double shall not be used" }, "fullDescription": { "text": "Type long double shall not be used [PORT-32]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Type long double shall not be used [PORT-32]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-33", "name": "Type wchar_t shall not be used", "shortDescription": { "text": "Type wchar_t shall not be used" }, "fullDescription": { "text": "Type wchar_t shall not be used [PORT-33]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Type wchar_t shall not be used [PORT-33]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-34_a", "name": "User-specified C++ external identifiers should differ in the first 64 characters", "shortDescription": { "text": "User-specified C++ external identifiers should differ in the first 64 characters" }, "fullDescription": { "text": "User-specified C++ external identifiers should differ in the first 64 characters [PORT-34_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "User-specified C++ external identifiers should differ in the first 64 characters [PORT-34_a]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-34_b", "name": "User-specified C++ internal identifiers should differ from external identifiers in the first 64 characters", "shortDescription": { "text": "User-specified C++ internal identifiers should differ from external identifiers in the first 64 characters" }, "fullDescription": { "text": "User-specified C++ internal identifiers should differ from external identifiers in the first 64 characters [PORT-34_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "User-specified C++ internal identifiers should differ from external identifiers in the first 64 characters [PORT-34_b]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-34_c", "name": "User-specified C++ internal identifiers declared in the same scope should differ in the first 64 characters", "shortDescription": { "text": "User-specified C++ internal identifiers declared in the same scope should differ in the first 64 characters" }, "fullDescription": { "text": "User-specified C++ internal identifiers declared in the same scope should differ in the first 64 characters [PORT-34_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "User-specified C++ internal identifiers declared in the same scope should differ in the first 64 characters [PORT-34_c]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-35_a", "name": "User-specified C external identifiers should differ in the first 31 characters", "shortDescription": { "text": "User-specified C external identifiers should differ in the first 31 characters" }, "fullDescription": { "text": "User-specified C external identifiers should differ in the first 31 characters [PORT-35_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "User-specified C external identifiers should differ in the first 31 characters [PORT-35_a]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-35_b", "name": "User-specified C internal identifiers should differ from external identifiers in the first 31 characters", "shortDescription": { "text": "User-specified C internal identifiers should differ from external identifiers in the first 31 characters" }, "fullDescription": { "text": "User-specified C internal identifiers should differ from external identifiers in the first 31 characters [PORT-35_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "User-specified C internal identifiers should differ from external identifiers in the first 31 characters [PORT-35_b]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-35_c", "name": "User-specified C internal identifiers declared in the same scope should differ in the first 31 characters", "shortDescription": { "text": "User-specified C internal identifiers declared in the same scope should differ in the first 31 characters" }, "fullDescription": { "text": "User-specified C internal identifiers declared in the same scope should differ in the first 31 characters [PORT-35_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "User-specified C internal identifiers declared in the same scope should differ in the first 31 characters [PORT-35_c]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-36_a", "name": "The names of identifiers should not be longer than 31 characters", "shortDescription": { "text": "The names of identifiers should not be longer than 31 characters" }, "fullDescription": { "text": "The names of identifiers should not be longer than 31 characters [PORT-36_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The names of identifiers should not be longer than 31 characters [PORT-36_a]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-36_b", "name": "The names of macro identifiers should not be longer than 31 characters", "shortDescription": { "text": "The names of macro identifiers should not be longer than 31 characters" }, "fullDescription": { "text": "The names of macro identifiers should not be longer than 31 characters [PORT-36_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The names of macro identifiers should not be longer than 31 characters [PORT-36_b]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-30", "name": "Do not throw an exception across execution boundaries", "shortDescription": { "text": "Do not throw an exception across execution boundaries" }, "fullDescription": { "text": "Do not throw an exception across execution boundaries [PORT-30]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not throw an exception across execution boundaries [PORT-30]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-31", "name": "Do not pass a nonstandard-layout type object across execution boundaries", "shortDescription": { "text": "Do not pass a nonstandard-layout type object across execution boundaries" }, "fullDescription": { "text": "Do not pass a nonstandard-layout type object across execution boundaries [PORT-31]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not pass a nonstandard-layout type object across execution boundaries [PORT-31]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-01", "name": "Use capital 'L' instead of lowercase 'l' to indicate long", "shortDescription": { "text": "Use capital 'L' instead of lowercase 'l' to indicate long" }, "fullDescription": { "text": "Use capital 'L' instead of lowercase 'l' to indicate long [PORT-01]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Use capital 'L' instead of lowercase 'l' to indicate long [PORT-01]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-22", "name": "Use arrays of int types instead of large arrays of longs", "shortDescription": { "text": "Use arrays of int types instead of large arrays of longs" }, "fullDescription": { "text": "Use arrays of int types instead of large arrays of longs [PORT-22]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Use arrays of int types instead of large arrays of longs [PORT-22]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-23", "name": "Use arrays of int types instead of dynamic allocated large arrays of longs", "shortDescription": { "text": "Use arrays of int types instead of dynamic allocated large arrays of longs" }, "fullDescription": { "text": "Use arrays of int types instead of dynamic allocated large arrays of longs [PORT-23]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Use arrays of int types instead of dynamic allocated large arrays of longs [PORT-23]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PORT-24", "name": "Don't use large arrays of pointers to bool, char, short, int and float types", "shortDescription": { "text": "Don't use large arrays of pointers to bool, char, short, int and float types" }, "fullDescription": { "text": "Don't use large arrays of pointers to bool, char, short, int and float types [PORT-24]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Don't use large arrays of pointers to bool, char, short, int and float types [PORT-24]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PREPROC-02", "name": "Don't use macros in include statement", "shortDescription": { "text": "Don't use macros in include statement" }, "fullDescription": { "text": "Don't use macros in include statement [PREPROC-02]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't use macros in include statement [PREPROC-02]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-05", "name": "In a macro function, use parentheses before and after multiplication or division", "shortDescription": { "text": "In a macro function, use parentheses before and after multiplication or division" }, "fullDescription": { "text": "In a macro function, use parentheses before and after multiplication or division [PREPROC-05]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "In a macro function, use parentheses before and after multiplication or division [PREPROC-05]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-06", "name": "Do not allow absolute or relative path names in #include statements", "shortDescription": { "text": "Do not allow absolute or relative path names in #include statements" }, "fullDescription": { "text": "Do not allow absolute or relative path names in #include statements [PREPROC-06]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not allow absolute or relative path names in #include statements [PREPROC-06]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-09", "name": "The #include directive shall use the <filename.h> notation to include header files", "shortDescription": { "text": "The #include directive shall use the <filename.h> notation to include header files" }, "fullDescription": { "text": "The #include directive shall use the <filename.h> notation to include header files [PREPROC-09]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The #include directive shall use the <filename.h> notation to include header files [PREPROC-09]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-01", "name": "Avoid using macro definitions", "shortDescription": { "text": "Avoid using macro definitions" }, "fullDescription": { "text": "Avoid using macro definitions [PREPROC-01]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid using macro definitions [PREPROC-01]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-08", "name": "The #include pre-processor directive will only be used to include header (*.h) files", "shortDescription": { "text": "The #include pre-processor directive will only be used to include header (*.h) files" }, "fullDescription": { "text": "The #include pre-processor directive will only be used to include header (*.h) files [PREPROC-08]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The #include pre-processor directive will only be used to include header (*.h) files [PREPROC-08]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-10", "name": "The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file", "shortDescription": { "text": "The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" }, "fullDescription": { "text": "The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file [PREPROC-10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file [PREPROC-10]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-10_b", "name": "The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file", "shortDescription": { "text": "The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" }, "fullDescription": { "text": "The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file [PREPROC-10_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file [PREPROC-10_b]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-10_c", "name": "The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file", "shortDescription": { "text": "The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" }, "fullDescription": { "text": "The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file [PREPROC-10_c]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file [PREPROC-10_c]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-11", "name": "The #ifdef, #else, #elif preprocessor directives should not be used", "shortDescription": { "text": "The #ifdef, #else, #elif preprocessor directives should not be used" }, "fullDescription": { "text": "The #ifdef, #else, #elif preprocessor directives should not be used [PREPROC-11]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The #ifdef, #else, #elif preprocessor directives should not be used [PREPROC-11]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-11_b", "name": "The #if preprocessor directive should not be used", "shortDescription": { "text": "The #if preprocessor directive should not be used" }, "fullDescription": { "text": "The #if preprocessor directive should not be used [PREPROC-11_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The #if preprocessor directive should not be used [PREPROC-11_b]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-12", "name": "C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers", "shortDescription": { "text": "C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" }, "fullDescription": { "text": "C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers [PREPROC-12]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers [PREPROC-12]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-13", "name": "Macro should not contain token pasting, variable argument list nor recursive macro calls", "shortDescription": { "text": "Macro should not contain token pasting, variable argument list nor recursive macro calls" }, "fullDescription": { "text": "Macro should not contain token pasting, variable argument list nor recursive macro calls [PREPROC-13]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Macro should not contain token pasting, variable argument list nor recursive macro calls [PREPROC-13]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-14", "name": "All macros must expand into complete syntactic units", "shortDescription": { "text": "All macros must expand into complete syntactic units" }, "fullDescription": { "text": "All macros must expand into complete syntactic units [PREPROC-14]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All macros must expand into complete syntactic units [PREPROC-14]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-15", "name": "Pointer dereference operations may not be hidden in macro definitions", "shortDescription": { "text": "Pointer dereference operations may not be hidden in macro definitions" }, "fullDescription": { "text": "Pointer dereference operations may not be hidden in macro definitions [PREPROC-15]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Pointer dereference operations may not be hidden in macro definitions [PREPROC-15]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-16", "name": "A macro parameter immediately following a # operator shall not immediately be followed by a ## operator", "shortDescription": { "text": "A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" }, "fullDescription": { "text": "A macro parameter immediately following a # operator shall not immediately be followed by a ## operator [PREPROC-16]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A macro parameter immediately following a # operator shall not immediately be followed by a ## operator [PREPROC-16]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-18", "name": "The input\/output library stdio.h shall not be included", "shortDescription": { "text": "The input\/output library stdio.h shall not be included" }, "fullDescription": { "text": "The input\/output library stdio.h shall not be included [PREPROC-18]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The input\/output library stdio.h shall not be included [PREPROC-18]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-19", "name": "The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1", "shortDescription": { "text": "The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" }, "fullDescription": { "text": "The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1 [PREPROC-19]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1 [PREPROC-19]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-20", "name": "Match the filename in a #include directive to the one on the filesystem", "shortDescription": { "text": "Match the filename in a #include directive to the one on the filesystem" }, "fullDescription": { "text": "Match the filename in a #include directive to the one on the filesystem [PREPROC-20]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Match the filename in a #include directive to the one on the filesystem [PREPROC-20]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-22", "name": "#error directive shall not be used", "shortDescription": { "text": "#error directive shall not be used" }, "fullDescription": { "text": "#error directive shall not be used [PREPROC-22]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "#error directive shall not be used [PREPROC-22]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-23", "name": "The #pragma directive shall not be used", "shortDescription": { "text": "The #pragma directive shall not be used" }, "fullDescription": { "text": "The #pragma directive shall not be used [PREPROC-23]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The #pragma directive shall not be used [PREPROC-23]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-24", "name": "All macro identifiers in preprocessor directives shall be defined before use, except in #ifdef and #ifndef preprocessor directives and the defined() operator", "shortDescription": { "text": "All macro identifiers in preprocessor directives shall be defined before use, except in #ifdef and #ifndef preprocessor directives and the defined() operator" }, "fullDescription": { "text": "All macro identifiers in preprocessor directives shall be defined before use, except in #ifdef and #ifndef preprocessor directives and the defined() operator [PREPROC-24]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All macro identifiers in preprocessor directives shall be defined before use, except in #ifdef and #ifndef preprocessor directives and the defined() operator [PREPROC-24]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-25", "name": "#undef shall not be used", "shortDescription": { "text": "#undef shall not be used" }, "fullDescription": { "text": "#undef shall not be used [PREPROC-25]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "#undef shall not be used [PREPROC-25]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-26", "name": "The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards", "shortDescription": { "text": "The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" }, "fullDescription": { "text": "The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards [PREPROC-26]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards [PREPROC-26]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-03", "name": "Don't redefine primitive types", "shortDescription": { "text": "Don't redefine primitive types" }, "fullDescription": { "text": "Don't redefine primitive types [PREPROC-03]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Don't redefine primitive types [PREPROC-03]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-04", "name": "Don't define part of statement", "shortDescription": { "text": "Don't define part of statement" }, "fullDescription": { "text": "Don't define part of statement [PREPROC-04]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Don't define part of statement [PREPROC-04]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-17", "name": "A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators", "shortDescription": { "text": "A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" }, "fullDescription": { "text": "A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators [PREPROC-17]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators [PREPROC-17]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-07", "name": "Incorrect 'NULL' definition", "shortDescription": { "text": "Incorrect 'NULL' definition" }, "fullDescription": { "text": "Incorrect 'NULL' definition [PREPROC-07]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Incorrect 'NULL' definition [PREPROC-07]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-21", "name": "Avoid token concatenation that may produce universal character names", "shortDescription": { "text": "Avoid token concatenation that may produce universal character names" }, "fullDescription": { "text": "Avoid token concatenation that may produce universal character names [PREPROC-21]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Avoid token concatenation that may produce universal character names [PREPROC-21]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "QT-04", "name": "The methods inside the SIGNAL and SLOT macros have to exist", "shortDescription": { "text": "The methods inside the SIGNAL and SLOT macros have to exist" }, "fullDescription": { "text": "The methods inside the SIGNAL and SLOT macros have to exist [QT-04]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The methods inside the SIGNAL and SLOT macros have to exist [QT-04]" }, "properties": { "tags": [ "Qt Best Practices" ] } }, { "id": "QT-07", "name": "Do not force thread termination by calling QThread::terminate()", "shortDescription": { "text": "Do not force thread termination by calling QThread::terminate()" }, "fullDescription": { "text": "Do not force thread termination by calling QThread::terminate() [QT-07]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not force thread termination by calling QThread::terminate() [QT-07]" }, "properties": { "tags": [ "Qt Best Practices" ] } }, { "id": "QT-09", "name": "Do not call new on QMutexLocker", "shortDescription": { "text": "Do not call new on QMutexLocker" }, "fullDescription": { "text": "Do not call new on QMutexLocker [QT-09]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not call new on QMutexLocker [QT-09]" }, "properties": { "tags": [ "Qt Best Practices" ] } }, { "id": "QT-12", "name": "Do not directly set specific Widget attributes that are set by Qt kernel", "shortDescription": { "text": "Do not directly set specific Widget attributes that are set by Qt kernel" }, "fullDescription": { "text": "Do not directly set specific Widget attributes that are set by Qt kernel [QT-12]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not directly set specific Widget attributes that are set by Qt kernel [QT-12]" }, "properties": { "tags": [ "Qt Best Practices" ] } }, { "id": "QT-01", "name": "Every QObject subclass should contain a Q_OBJECT macro", "shortDescription": { "text": "Every QObject subclass should contain a Q_OBJECT macro" }, "fullDescription": { "text": "Every QObject subclass should contain a Q_OBJECT macro [QT-01]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Every QObject subclass should contain a Q_OBJECT macro [QT-01]" }, "properties": { "tags": [ "Qt Best Practices" ] } }, { "id": "QT-02", "name": "QObject must not be inherited more than one time", "shortDescription": { "text": "QObject must not be inherited more than one time" }, "fullDescription": { "text": "QObject must not be inherited more than one time [QT-02]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "QObject must not be inherited more than one time [QT-02]" }, "properties": { "tags": [ "Qt Best Practices" ] } }, { "id": "QT-03", "name": "It's only possible to connect a signal to a slot or a signal to another signal", "shortDescription": { "text": "It's only possible to connect a signal to a slot or a signal to another signal" }, "fullDescription": { "text": "It's only possible to connect a signal to a slot or a signal to another signal [QT-03]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "It's only possible to connect a signal to a slot or a signal to another signal [QT-03]" }, "properties": { "tags": [ "Qt Best Practices" ] } }, { "id": "QT-05", "name": "Mark signal emissions with the keyword \"emit\" to distinguish a signal emission from a normal method call", "shortDescription": { "text": "Mark signal emissions with the keyword \"emit\" to distinguish a signal emission from a normal method call" }, "fullDescription": { "text": "Mark signal emissions with the keyword \"emit\" to distinguish a signal emission from a normal method call [QT-05]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Mark signal emissions with the keyword \"emit\" to distinguish a signal emission from a normal method call [QT-05]" }, "properties": { "tags": [ "Qt Best Practices" ] } }, { "id": "QT-06", "name": "Do not set Idle or Critical priority to QThreads. Use High\/Low\/Med only", "shortDescription": { "text": "Do not set Idle or Critical priority to QThreads. Use High\/Low\/Med only" }, "fullDescription": { "text": "Do not set Idle or Critical priority to QThreads. Use High\/Low\/Med only [QT-06]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not set Idle or Critical priority to QThreads. Use High\/Low\/Med only [QT-06]" }, "properties": { "tags": [ "Qt Best Practices" ] } }, { "id": "QT-08", "name": "If using lock on a mutex in a function, release the lock in the same function", "shortDescription": { "text": "If using lock on a mutex in a function, release the lock in the same function" }, "fullDescription": { "text": "If using lock on a mutex in a function, release the lock in the same function [QT-08]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If using lock on a mutex in a function, release the lock in the same function [QT-08]" }, "properties": { "tags": [ "Qt Best Practices" ] } }, { "id": "QT-10", "name": "Declare a copy constructor and operator= for any Qt - inherited objects that have pointers", "shortDescription": { "text": "Declare a copy constructor and operator= for any Qt - inherited objects that have pointers" }, "fullDescription": { "text": "Declare a copy constructor and operator= for any Qt - inherited objects that have pointers [QT-10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare a copy constructor and operator= for any Qt - inherited objects that have pointers [QT-10]" }, "properties": { "tags": [ "Qt Best Practices" ] } }, { "id": "QT-13", "name": "Never mix const and non-const iterators in assignment", "shortDescription": { "text": "Never mix const and non-const iterators in assignment" }, "fullDescription": { "text": "Never mix const and non-const iterators in assignment [QT-13]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Never mix const and non-const iterators in assignment [QT-13]" }, "properties": { "tags": [ "Qt Best Practices" ] } }, { "id": "QT-14", "name": "If you use Q_DECLARE_FLAGS, you must also use Q_DECLARE_OPERATORS_FOR_FLAGS", "shortDescription": { "text": "If you use Q_DECLARE_FLAGS, you must also use Q_DECLARE_OPERATORS_FOR_FLAGS" }, "fullDescription": { "text": "If you use Q_DECLARE_FLAGS, you must also use Q_DECLARE_OPERATORS_FOR_FLAGS [QT-14]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If you use Q_DECLARE_FLAGS, you must also use Q_DECLARE_OPERATORS_FOR_FLAGS [QT-14]" }, "properties": { "tags": [ "Qt Best Practices" ] } }, { "id": "QT-15", "name": "Q_DECLARE_OPERATORS_FOR_FLAGS must be in the global namespace, Q_DECLARE_FLAGS inside the enum's namespace", "shortDescription": { "text": "Q_DECLARE_OPERATORS_FOR_FLAGS must be in the global namespace, Q_DECLARE_FLAGS inside the enum's namespace" }, "fullDescription": { "text": "Q_DECLARE_OPERATORS_FOR_FLAGS must be in the global namespace, Q_DECLARE_FLAGS inside the enum's namespace [QT-15]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Q_DECLARE_OPERATORS_FOR_FLAGS must be in the global namespace, Q_DECLARE_FLAGS inside the enum's namespace [QT-15]" }, "properties": { "tags": [ "Qt Best Practices" ] } }, { "id": "QT-16", "name": "The getters and setters of a Q_PROPERTY must exist and the types must match", "shortDescription": { "text": "The getters and setters of a Q_PROPERTY must exist and the types must match" }, "fullDescription": { "text": "The getters and setters of a Q_PROPERTY must exist and the types must match [QT-16]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The getters and setters of a Q_PROPERTY must exist and the types must match [QT-16]" }, "properties": { "tags": [ "Qt Best Practices" ] } }, { "id": "QT-17", "name": "Properties of enum types must use Q_ENUMS", "shortDescription": { "text": "Properties of enum types must use Q_ENUMS" }, "fullDescription": { "text": "Properties of enum types must use Q_ENUMS [QT-17]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Properties of enum types must use Q_ENUMS [QT-17]" }, "properties": { "tags": [ "Qt Best Practices" ] } }, { "id": "QT-18", "name": "Non-const function should not be called on the Qt object", "shortDescription": { "text": "Non-const function should not be called on the Qt object" }, "fullDescription": { "text": "Non-const function should not be called on the Qt object [QT-18]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Non-const function should not be called on the Qt object [QT-18]" }, "properties": { "tags": [ "Qt Best Practices" ] } }, { "id": "QT-11", "name": "Do not use setWindowFlags function on a Widget", "shortDescription": { "text": "Do not use setWindowFlags function on a Widget" }, "fullDescription": { "text": "Do not use setWindowFlags function on a Widget [QT-11]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use setWindowFlags function on a Widget [QT-11]" }, "properties": { "tags": [ "Qt Best Practices" ] } }, { "id": "SECURITY-16", "name": "Never use gets()", "shortDescription": { "text": "Never use gets()" }, "fullDescription": { "text": "Never use gets() [SECURITY-16]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Never use gets() [SECURITY-16]" }, "properties": { "tags": [ "Security" ], "security-severity": "9.5" } }, { "id": "SECURITY-04", "name": "Use care to ensure that LoadLibrary() will load the correct library", "shortDescription": { "text": "Use care to ensure that LoadLibrary() will load the correct library" }, "fullDescription": { "text": "Use care to ensure that LoadLibrary() will load the correct library [SECURITY-04]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use care to ensure that LoadLibrary() will load the correct library [SECURITY-04]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-05", "name": "Avoid calling functions printf\/wprintf with only one argument other than string constant", "shortDescription": { "text": "Avoid calling functions printf\/wprintf with only one argument other than string constant" }, "fullDescription": { "text": "Avoid calling functions printf\/wprintf with only one argument other than string constant [SECURITY-05]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid calling functions printf\/wprintf with only one argument other than string constant [SECURITY-05]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-08", "name": "Avoid using functions fprintf\/fwprintf with only two parameters, when second parameter is a variable", "shortDescription": { "text": "Avoid using functions fprintf\/fwprintf with only two parameters, when second parameter is a variable" }, "fullDescription": { "text": "Avoid using functions fprintf\/fwprintf with only two parameters, when second parameter is a variable [SECURITY-08]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using functions fprintf\/fwprintf with only two parameters, when second parameter is a variable [SECURITY-08]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-09", "name": "Avoid using the 'data()' function from the 'string' class of the standard library", "shortDescription": { "text": "Avoid using the 'data()' function from the 'string' class of the standard library" }, "fullDescription": { "text": "Avoid using the 'data()' function from the 'string' class of the standard library [SECURITY-09]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using the 'data()' function from the 'string' class of the standard library [SECURITY-09]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-10", "name": "Avoid using the 'vfork()' function", "shortDescription": { "text": "Avoid using the 'vfork()' function" }, "fullDescription": { "text": "Avoid using the 'vfork()' function [SECURITY-10]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using the 'vfork()' function [SECURITY-10]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-11", "name": "Avoid using unsecured shell functions that may be affected by shell metacharacters", "shortDescription": { "text": "Avoid using unsecured shell functions that may be affected by shell metacharacters" }, "fullDescription": { "text": "Avoid using unsecured shell functions that may be affected by shell metacharacters [SECURITY-11]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using unsecured shell functions that may be affected by shell metacharacters [SECURITY-11]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-12", "name": "Avoid using unsafe string functions which may cause buffer overflows", "shortDescription": { "text": "Avoid using unsafe string functions which may cause buffer overflows" }, "fullDescription": { "text": "Avoid using unsafe string functions which may cause buffer overflows [SECURITY-12]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using unsafe string functions which may cause buffer overflows [SECURITY-12]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-13", "name": "Avoid using unsafe string functions that do not check bounds", "shortDescription": { "text": "Avoid using unsafe string functions that do not check bounds" }, "fullDescription": { "text": "Avoid using unsafe string functions that do not check bounds [SECURITY-13]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using unsafe string functions that do not check bounds [SECURITY-13]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-14", "name": "Do not use scanf and fscanf functions without specifying variable size in format string", "shortDescription": { "text": "Do not use scanf and fscanf functions without specifying variable size in format string" }, "fullDescription": { "text": "Do not use scanf and fscanf functions without specifying variable size in format string [SECURITY-14]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use scanf and fscanf functions without specifying variable size in format string [SECURITY-14]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-15", "name": "Do not print potentially sensitive information, resulting from an application error into exception messages", "shortDescription": { "text": "Do not print potentially sensitive information, resulting from an application error into exception messages" }, "fullDescription": { "text": "Do not print potentially sensitive information, resulting from an application error into exception messages [SECURITY-15]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not print potentially sensitive information, resulting from an application error into exception messages [SECURITY-15]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-17", "name": "Avoid passing non-const parameters or variables into exec", "shortDescription": { "text": "Avoid passing non-const parameters or variables into exec" }, "fullDescription": { "text": "Avoid passing non-const parameters or variables into exec [SECURITY-17]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid passing non-const parameters or variables into exec [SECURITY-17]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-18", "name": "Avoid passing dynamically created strings into exec", "shortDescription": { "text": "Avoid passing dynamically created strings into exec" }, "fullDescription": { "text": "Avoid passing dynamically created strings into exec [SECURITY-18]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid passing dynamically created strings into exec [SECURITY-18]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-19", "name": "Usage of functions prone to race is not allowed", "shortDescription": { "text": "Usage of functions prone to race is not allowed" }, "fullDescription": { "text": "Usage of functions prone to race is not allowed [SECURITY-19]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Usage of functions prone to race is not allowed [SECURITY-19]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-20", "name": "Avoid passing user input into methods as parameters", "shortDescription": { "text": "Avoid passing user input into methods as parameters" }, "fullDescription": { "text": "Avoid passing user input into methods as parameters [SECURITY-20]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid passing user input into methods as parameters [SECURITY-20]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-21", "name": "Do not use 'syslog' function for logging purposes", "shortDescription": { "text": "Do not use 'syslog' function for logging purposes" }, "fullDescription": { "text": "Do not use 'syslog' function for logging purposes [SECURITY-21]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use 'syslog' function for logging purposes [SECURITY-21]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-22", "name": "Do not use mbstowcs() function", "shortDescription": { "text": "Do not use mbstowcs() function" }, "fullDescription": { "text": "Do not use mbstowcs() function [SECURITY-22]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use mbstowcs() function [SECURITY-22]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-23", "name": "Beware of functions which may return the current directory or the windows directory", "shortDescription": { "text": "Beware of functions which may return the current directory or the windows directory" }, "fullDescription": { "text": "Beware of functions which may return the current directory or the windows directory [SECURITY-23]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Beware of functions which may return the current directory or the windows directory [SECURITY-23]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-24", "name": "Avoid using InitializeCriticalSection", "shortDescription": { "text": "Avoid using InitializeCriticalSection" }, "fullDescription": { "text": "Avoid using InitializeCriticalSection [SECURITY-24]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using InitializeCriticalSection [SECURITY-24]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-25", "name": "Avoid using thread-unsafe functions", "shortDescription": { "text": "Avoid using thread-unsafe functions" }, "fullDescription": { "text": "Avoid using thread-unsafe functions [SECURITY-25]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using thread-unsafe functions [SECURITY-25]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-26", "name": "Do not use 'setuid' in source code", "shortDescription": { "text": "Do not use 'setuid' in source code" }, "fullDescription": { "text": "Do not use 'setuid' in source code [SECURITY-26]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use 'setuid' in source code [SECURITY-26]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-27", "name": "Don't use chmod(), chown(), chgrp()", "shortDescription": { "text": "Don't use chmod(), chown(), chgrp()" }, "fullDescription": { "text": "Don't use chmod(), chown(), chgrp() [SECURITY-27]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't use chmod(), chown(), chgrp() [SECURITY-27]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-28", "name": "Standard random number generators should not be used to generate randomness for security reasons", "shortDescription": { "text": "Standard random number generators should not be used to generate randomness for security reasons" }, "fullDescription": { "text": "Standard random number generators should not be used to generate randomness for security reasons [SECURITY-28]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Standard random number generators should not be used to generate randomness for security reasons [SECURITY-28]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-29", "name": "Do not use obsolete C routine ulimit()", "shortDescription": { "text": "Do not use obsolete C routine ulimit()" }, "fullDescription": { "text": "Do not use obsolete C routine ulimit() [SECURITY-29]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use obsolete C routine ulimit() [SECURITY-29]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-30", "name": "Avoid using 'getpw' function in program code", "shortDescription": { "text": "Avoid using 'getpw' function in program code" }, "fullDescription": { "text": "Avoid using 'getpw' function in program code [SECURITY-30]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using 'getpw' function in program code [SECURITY-30]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-31", "name": "Do not use 'cuserid' function", "shortDescription": { "text": "Do not use 'cuserid' function" }, "fullDescription": { "text": "Do not use 'cuserid' function [SECURITY-31]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use 'cuserid' function [SECURITY-31]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-32", "name": "Avoid using obsolete C routine 'usleep'", "shortDescription": { "text": "Avoid using obsolete C routine 'usleep'" }, "fullDescription": { "text": "Avoid using obsolete C routine 'usleep' [SECURITY-32]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using obsolete C routine 'usleep' [SECURITY-32]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-33", "name": "Usage of functions which do not properly handle non-NULL terminated strings is not allowed", "shortDescription": { "text": "Usage of functions which do not properly handle non-NULL terminated strings is not allowed" }, "fullDescription": { "text": "Usage of functions which do not properly handle non-NULL terminated strings is not allowed [SECURITY-33]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Usage of functions which do not properly handle non-NULL terminated strings is not allowed [SECURITY-33]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-34", "name": "Avoid using environment variables", "shortDescription": { "text": "Avoid using environment variables" }, "fullDescription": { "text": "Avoid using environment variables [SECURITY-34]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using environment variables [SECURITY-34]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-35", "name": "Don't trust any value of command line if attacker can set them", "shortDescription": { "text": "Don't trust any value of command line if attacker can set them" }, "fullDescription": { "text": "Don't trust any value of command line if attacker can set them [SECURITY-35]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't trust any value of command line if attacker can set them [SECURITY-35]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-36", "name": "Never use unfiltered data from an untrusted user as the format parameter", "shortDescription": { "text": "Never use unfiltered data from an untrusted user as the format parameter" }, "fullDescription": { "text": "Never use unfiltered data from an untrusted user as the format parameter [SECURITY-36]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Never use unfiltered data from an untrusted user as the format parameter [SECURITY-36]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-37", "name": "Do not use weak encryption functions", "shortDescription": { "text": "Do not use weak encryption functions" }, "fullDescription": { "text": "Do not use weak encryption functions [SECURITY-37]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use weak encryption functions [SECURITY-37]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-38", "name": "Untrusted data is used as a loop boundary", "shortDescription": { "text": "Untrusted data is used as a loop boundary" }, "fullDescription": { "text": "Untrusted data is used as a loop boundary [SECURITY-38]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Untrusted data is used as a loop boundary [SECURITY-38]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-01", "name": "The 'asctime()' and 'asctime_r()' functions should not be used", "shortDescription": { "text": "The 'asctime()' and 'asctime_r()' functions should not be used" }, "fullDescription": { "text": "The 'asctime()' and 'asctime_r()' functions should not be used [SECURITY-01]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'asctime()' and 'asctime_r()' functions should not be used [SECURITY-01]" }, "properties": { "tags": [ "Security" ], "security-severity": "6" } }, { "id": "SECURITY-02", "name": "The random number generator functions 'rand()' and 'srand()' should not be used", "shortDescription": { "text": "The random number generator functions 'rand()' and 'srand()' should not be used" }, "fullDescription": { "text": "The random number generator functions 'rand()' and 'srand()' should not be used [SECURITY-02]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The random number generator functions 'rand()' and 'srand()' should not be used [SECURITY-02]" }, "properties": { "tags": [ "Security" ], "security-severity": "6" } }, { "id": "SECURITY-02_b", "name": "Do not use the rand() function for generating pseudorandom numbers", "shortDescription": { "text": "Do not use the rand() function for generating pseudorandom numbers" }, "fullDescription": { "text": "Do not use the rand() function for generating pseudorandom numbers [SECURITY-02_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use the rand() function for generating pseudorandom numbers [SECURITY-02_b]" }, "properties": { "tags": [ "Security" ], "security-severity": "6" } }, { "id": "SECURITY-06", "name": "Avoid functions which use time from MFC library", "shortDescription": { "text": "Avoid functions which use time from MFC library" }, "fullDescription": { "text": "Avoid functions which use time from MFC library [SECURITY-06]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid functions which use time from MFC library [SECURITY-06]" }, "properties": { "tags": [ "Security" ], "security-severity": "6" } }, { "id": "SECURITY-07", "name": "Don't use unsafe C functions that do write to range-unchecked buffers", "shortDescription": { "text": "Don't use unsafe C functions that do write to range-unchecked buffers" }, "fullDescription": { "text": "Don't use unsafe C functions that do write to range-unchecked buffers [SECURITY-07]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Don't use unsafe C functions that do write to range-unchecked buffers [SECURITY-07]" }, "properties": { "tags": [ "Security" ], "security-severity": "6" } }, { "id": "SECURITY-39", "name": "Use secure temporary file name functions", "shortDescription": { "text": "Use secure temporary file name functions" }, "fullDescription": { "text": "Use secure temporary file name functions [SECURITY-39]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use secure temporary file name functions [SECURITY-39]" }, "properties": { "tags": [ "Security" ], "security-severity": "6" } }, { "id": "SECURITY-42", "name": "Specify the access permission bits if a file is created using the 'open' or 'openat' system call", "shortDescription": { "text": "Specify the access permission bits if a file is created using the 'open' or 'openat' system call" }, "fullDescription": { "text": "Specify the access permission bits if a file is created using the 'open' or 'openat' system call [SECURITY-42]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Specify the access permission bits if a file is created using the 'open' or 'openat' system call [SECURITY-42]" }, "properties": { "tags": [ "Security" ], "security-severity": "6" } }, { "id": "SECURITY-43", "name": "The function 'pthread_setcanceltype()' should not be called with 'PTHREAD_CANCEL_ASYNCHRONOUS' argument", "shortDescription": { "text": "The function 'pthread_setcanceltype()' should not be called with 'PTHREAD_CANCEL_ASYNCHRONOUS' argument" }, "fullDescription": { "text": "The function 'pthread_setcanceltype()' should not be called with 'PTHREAD_CANCEL_ASYNCHRONOUS' argument [SECURITY-43]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The function 'pthread_setcanceltype()' should not be called with 'PTHREAD_CANCEL_ASYNCHRONOUS' argument [SECURITY-43]" }, "properties": { "tags": [ "Security" ], "security-severity": "6" } }, { "id": "SECURITY-44", "name": "Observe correct revocation order while relinquishing privileges", "shortDescription": { "text": "Observe correct revocation order while relinquishing privileges" }, "fullDescription": { "text": "Observe correct revocation order while relinquishing privileges [SECURITY-44]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Observe correct revocation order while relinquishing privileges [SECURITY-44]" }, "properties": { "tags": [ "Security" ], "security-severity": "6" } }, { "id": "SECURITY-45", "name": "Ensure that privilege relinquishment is successful", "shortDescription": { "text": "Ensure that privilege relinquishment is successful" }, "fullDescription": { "text": "Ensure that privilege relinquishment is successful [SECURITY-45]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Ensure that privilege relinquishment is successful [SECURITY-45]" }, "properties": { "tags": [ "Security" ], "security-severity": "6" } }, { "id": "SECURITY-46", "name": "A pointer to a structure should not be passed to a function that can copy data to the user space", "shortDescription": { "text": "A pointer to a structure should not be passed to a function that can copy data to the user space" }, "fullDescription": { "text": "A pointer to a structure should not be passed to a function that can copy data to the user space [SECURITY-46]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A pointer to a structure should not be passed to a function that can copy data to the user space [SECURITY-46]" }, "properties": { "tags": [ "Security" ], "security-severity": "6" } }, { "id": "SECURITY-47", "name": "Use correct integer precisions when checking the right hand operand of the shift operator", "shortDescription": { "text": "Use correct integer precisions when checking the right hand operand of the shift operator" }, "fullDescription": { "text": "Use correct integer precisions when checking the right hand operand of the shift operator [SECURITY-47]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use correct integer precisions when checking the right hand operand of the shift operator [SECURITY-47]" }, "properties": { "tags": [ "Security" ], "security-severity": "6" } }, { "id": "SECURITY-48", "name": "The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used with an argument other than '0' (null pointer)", "shortDescription": { "text": "The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used with an argument other than '0' (null pointer)" }, "fullDescription": { "text": "The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used with an argument other than '0' (null pointer) [SECURITY-48]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used with an argument other than '0' (null pointer) [SECURITY-48]" }, "properties": { "tags": [ "Security" ], "security-severity": "6" } }, { "id": "SECURITY-48_b", "name": "The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used", "shortDescription": { "text": "The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used" }, "fullDescription": { "text": "The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used [SECURITY-48_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used [SECURITY-48_b]" }, "properties": { "tags": [ "Security" ], "security-severity": "6" } }, { "id": "SECURITY-51", "name": "Do not use the 'char' buffer to store input from 'std::cin'", "shortDescription": { "text": "Do not use the 'char' buffer to store input from 'std::cin'" }, "fullDescription": { "text": "Do not use the 'char' buffer to store input from 'std::cin' [SECURITY-51]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use the 'char' buffer to store input from 'std::cin' [SECURITY-51]" }, "properties": { "tags": [ "Security" ], "security-severity": "6" } }, { "id": "SECURITY-52", "name": "The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used", "shortDescription": { "text": "The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" }, "fullDescription": { "text": "The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [SECURITY-52]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used [SECURITY-52]" }, "properties": { "tags": [ "Security" ], "security-severity": "6" } }, { "id": "SECURITY-03", "name": "Usage of system properties (environment variables) should be restricted", "shortDescription": { "text": "Usage of system properties (environment variables) should be restricted" }, "fullDescription": { "text": "Usage of system properties (environment variables) should be restricted [SECURITY-03]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Usage of system properties (environment variables) should be restricted [SECURITY-03]" }, "properties": { "tags": [ "Security" ], "security-severity": "4" } }, { "id": "SECURITY-40", "name": "Call 'umask' before calling 'mkstemp'", "shortDescription": { "text": "Call 'umask' before calling 'mkstemp'" }, "fullDescription": { "text": "Call 'umask' before calling 'mkstemp' [SECURITY-40]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Call 'umask' before calling 'mkstemp' [SECURITY-40]" }, "properties": { "tags": [ "Security" ], "security-severity": "4" } }, { "id": "SECURITY-41", "name": "Call 'chdir' if you call 'chroot'", "shortDescription": { "text": "Call 'chdir' if you call 'chroot'" }, "fullDescription": { "text": "Call 'chdir' if you call 'chroot' [SECURITY-41]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Call 'chdir' if you call 'chroot' [SECURITY-41]" }, "properties": { "tags": [ "Security" ], "security-severity": "4" } }, { "id": "SECURITY-49", "name": "Use the 'cnd_signal()' function with a unique condition variable", "shortDescription": { "text": "Use the 'cnd_signal()' function with a unique condition variable" }, "fullDescription": { "text": "Use the 'cnd_signal()' function with a unique condition variable [SECURITY-49]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use the 'cnd_signal()' function with a unique condition variable [SECURITY-49]" }, "properties": { "tags": [ "Security" ], "security-severity": "4" } }, { "id": "SECURITY-50", "name": "Do not use the 'notify_one()' function when multiple threads are waiting on the same condition variable", "shortDescription": { "text": "Do not use the 'notify_one()' function when multiple threads are waiting on the same condition variable" }, "fullDescription": { "text": "Do not use the 'notify_one()' function when multiple threads are waiting on the same condition variable [SECURITY-50]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use the 'notify_one()' function when multiple threads are waiting on the same condition variable [SECURITY-50]" }, "properties": { "tags": [ "Security" ], "security-severity": "4" } }, { "id": "STL-02", "name": "To make copying efficient, correct, and immune to the slicing problem create containers of pointers instead of containers of objects", "shortDescription": { "text": "To make copying efficient, correct, and immune to the slicing problem create containers of pointers instead of containers of objects" }, "fullDescription": { "text": "To make copying efficient, correct, and immune to the slicing problem create containers of pointers instead of containers of objects [STL-02]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "To make copying efficient, correct, and immune to the slicing problem create containers of pointers instead of containers of objects [STL-02]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-03", "name": "Call empty instead of checking size() against zero", "shortDescription": { "text": "Call empty instead of checking size() against zero" }, "fullDescription": { "text": "Call empty instead of checking size() against zero [STL-03]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Call empty instead of checking size() against zero [STL-03]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-04", "name": "Avoid using iterative calls to insert in an explicit loop", "shortDescription": { "text": "Avoid using iterative calls to insert in an explicit loop" }, "fullDescription": { "text": "Avoid using iterative calls to insert in an explicit loop [STL-04]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid using iterative calls to insert in an explicit loop [STL-04]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-05", "name": "Almost all uses of copy where the destination range is specified using an insert iterator should be replaced with calls to range member functions", "shortDescription": { "text": "Almost all uses of copy where the destination range is specified using an insert iterator should be replaced with calls to range member functions" }, "fullDescription": { "text": "Almost all uses of copy where the destination range is specified using an insert iterator should be replaced with calls to range member functions [STL-05]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Almost all uses of copy where the destination range is specified using an insert iterator should be replaced with calls to range member functions [STL-05]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-06", "name": "Instead of anonymous istream_iterator objects use istream_iterator names when used as function parameters", "shortDescription": { "text": "Instead of anonymous istream_iterator objects use istream_iterator names when used as function parameters" }, "fullDescription": { "text": "Instead of anonymous istream_iterator objects use istream_iterator names when used as function parameters [STL-06]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Instead of anonymous istream_iterator objects use istream_iterator names when used as function parameters [STL-06]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-07", "name": "When using containers of newed pointers, remember to delete the pointers before the container is destroyed", "shortDescription": { "text": "When using containers of newed pointers, remember to delete the pointers before the container is destroyed" }, "fullDescription": { "text": "When using containers of newed pointers, remember to delete the pointers before the container is destroyed [STL-07]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "When using containers of newed pointers, remember to delete the pointers before the container is destroyed [STL-07]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-08", "name": "Never create containers of auto_ptrs", "shortDescription": { "text": "Never create containers of auto_ptrs" }, "fullDescription": { "text": "Never create containers of auto_ptrs [STL-08]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Never create containers of auto_ptrs [STL-08]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-09", "name": "Avoid using remove algorithm with list and standard associative containers", "shortDescription": { "text": "Avoid using remove algorithm with list and standard associative containers" }, "fullDescription": { "text": "Avoid using remove algorithm with list and standard associative containers [STL-09]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid using remove algorithm with list and standard associative containers [STL-09]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-10", "name": "Prefer vector and string to dynamically allocated arrays", "shortDescription": { "text": "Prefer vector and string to dynamically allocated arrays" }, "fullDescription": { "text": "Prefer vector and string to dynamically allocated arrays [STL-10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer vector and string to dynamically allocated arrays [STL-10]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-12", "name": "Use reserve to avoid unnecessary reallocations", "shortDescription": { "text": "Use reserve to avoid unnecessary reallocations" }, "fullDescription": { "text": "Use reserve to avoid unnecessary reallocations [STL-12]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use reserve to avoid unnecessary reallocations [STL-12]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-13", "name": "Each vector and string should be checked if it is not empty before it is passed to C function", "shortDescription": { "text": "Each vector and string should be checked if it is not empty before it is passed to C function" }, "fullDescription": { "text": "Each vector and string should be checked if it is not empty before it is passed to C function [STL-13]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each vector and string should be checked if it is not empty before it is passed to C function [STL-13]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-14", "name": "Avoid using vector<bool>", "shortDescription": { "text": "Avoid using vector<bool>" }, "fullDescription": { "text": "Avoid using vector<bool> [STL-14]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid using vector<bool> [STL-14]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-15", "name": "Specify comparison types for associative containers of pointers", "shortDescription": { "text": "Specify comparison types for associative containers of pointers" }, "fullDescription": { "text": "Specify comparison types for associative containers of pointers [STL-15]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Specify comparison types for associative containers of pointers [STL-15]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-16", "name": "For associative containers never use comparison function returning true for equal values", "shortDescription": { "text": "For associative containers never use comparison function returning true for equal values" }, "fullDescription": { "text": "For associative containers never use comparison function returning true for equal values [STL-16]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "For associative containers never use comparison function returning true for equal values [STL-16]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-17", "name": "For associative containers never use comparison function returning true for equal values", "shortDescription": { "text": "For associative containers never use comparison function returning true for equal values" }, "fullDescription": { "text": "For associative containers never use comparison function returning true for equal values [STL-17]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "For associative containers never use comparison function returning true for equal values [STL-17]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-18", "name": "Prefer iterator to const iterator, reverse_iterator, and const_reverse_iterator", "shortDescription": { "text": "Prefer iterator to const iterator, reverse_iterator, and const_reverse_iterator" }, "fullDescription": { "text": "Prefer iterator to const iterator, reverse_iterator, and const_reverse_iterator [STL-18]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer iterator to const iterator, reverse_iterator, and const_reverse_iterator [STL-18]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-19", "name": "Use distance and advance to convert a container's const_iterators to iterators", "shortDescription": { "text": "Use distance and advance to convert a container's const_iterators to iterators" }, "fullDescription": { "text": "Use distance and advance to convert a container's const_iterators to iterators [STL-19]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use distance and advance to convert a container's const_iterators to iterators [STL-19]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-22", "name": "Make sure destination ranges are big enough", "shortDescription": { "text": "Make sure destination ranges are big enough" }, "fullDescription": { "text": "Make sure destination ranges are big enough [STL-22]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Make sure destination ranges are big enough [STL-22]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-23", "name": "Follow remove-like algorithms by erase to remove elements from a container", "shortDescription": { "text": "Follow remove-like algorithms by erase to remove elements from a container" }, "fullDescription": { "text": "Follow remove-like algorithms by erase to remove elements from a container [STL-23]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Follow remove-like algorithms by erase to remove elements from a container [STL-23]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-24", "name": "Avoid using remove and similar algorithms (i.e., remove_if and unique) on containers of dynamically allocated pointers", "shortDescription": { "text": "Avoid using remove and similar algorithms (i.e., remove_if and unique) on containers of dynamically allocated pointers" }, "fullDescription": { "text": "Avoid using remove and similar algorithms (i.e., remove_if and unique) on containers of dynamically allocated pointers [STL-24]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid using remove and similar algorithms (i.e., remove_if and unique) on containers of dynamically allocated pointers [STL-24]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-26", "name": "Proper implementation of copy_if should not be based on returning the remove_copy_if with a not1 in front of the predicate", "shortDescription": { "text": "Proper implementation of copy_if should not be based on returning the remove_copy_if with a not1 in front of the predicate" }, "fullDescription": { "text": "Proper implementation of copy_if should not be based on returning the remove_copy_if with a not1 in front of the predicate [STL-26]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Proper implementation of copy_if should not be based on returning the remove_copy_if with a not1 in front of the predicate [STL-26]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-27", "name": "If accumulate() is used on a container of floating point values, use floating point value as initial one", "shortDescription": { "text": "If accumulate() is used on a container of floating point values, use floating point value as initial one" }, "fullDescription": { "text": "If accumulate() is used on a container of floating point values, use floating point value as initial one [STL-27]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If accumulate() is used on a container of floating point values, use floating point value as initial one [STL-27]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-28", "name": "Design functor classes for pass-by-value", "shortDescription": { "text": "Design functor classes for pass-by-value" }, "fullDescription": { "text": "Design functor classes for pass-by-value [STL-28]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Design functor classes for pass-by-value [STL-28]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-29", "name": "Make predicates const pure functions", "shortDescription": { "text": "Make predicates const pure functions" }, "fullDescription": { "text": "Make predicates const pure functions [STL-29]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Make predicates const pure functions [STL-29]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-30", "name": "Each functor class should has only one operator() function, and it's parameter and return types should be passed to unary_function or binary_function", "shortDescription": { "text": "Each functor class should has only one operator() function, and it's parameter and return types should be passed to unary_function or binary_function" }, "fullDescription": { "text": "Each functor class should has only one operator() function, and it's parameter and return types should be passed to unary_function or binary_function [STL-30]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each functor class should has only one operator() function, and it's parameter and return types should be passed to unary_function or binary_function [STL-30]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-31", "name": "You must employ ptr_fun, mem_fun, or mem_fun_ref whenever you pass a function to an STL component", "shortDescription": { "text": "You must employ ptr_fun, mem_fun, or mem_fun_ref whenever you pass a function to an STL component" }, "fullDescription": { "text": "You must employ ptr_fun, mem_fun, or mem_fun_ref whenever you pass a function to an STL component [STL-31]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "You must employ ptr_fun, mem_fun, or mem_fun_ref whenever you pass a function to an STL component [STL-31]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-32", "name": "Make sure less<T> means operator<", "shortDescription": { "text": "Make sure less<T> means operator<" }, "fullDescription": { "text": "Make sure less<T> means operator< [STL-32]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Make sure less<T> means operator< [STL-32]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-33", "name": "Prefer algorithm calls to hand-written loops", "shortDescription": { "text": "Prefer algorithm calls to hand-written loops" }, "fullDescription": { "text": "Prefer algorithm calls to hand-written loops [STL-33]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer algorithm calls to hand-written loops [STL-33]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-34", "name": "Prefer member functions to algorithms with the same names", "shortDescription": { "text": "Prefer member functions to algorithms with the same names" }, "fullDescription": { "text": "Prefer member functions to algorithms with the same names [STL-34]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer member functions to algorithms with the same names [STL-34]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-35", "name": "Do not rely on the conversion of count()'s nonzero values to true and zero to false", "shortDescription": { "text": "Do not rely on the conversion of count()'s nonzero values to true and zero to false" }, "fullDescription": { "text": "Do not rely on the conversion of count()'s nonzero values to true and zero to false [STL-35]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not rely on the conversion of count()'s nonzero values to true and zero to false [STL-35]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-36", "name": "Do not use an iterator range that isn't really a range", "shortDescription": { "text": "Do not use an iterator range that isn't really a range" }, "fullDescription": { "text": "Do not use an iterator range that isn't really a range [STL-36]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use an iterator range that isn't really a range [STL-36]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-37", "name": "C-style arrays shall not be used", "shortDescription": { "text": "C-style arrays shall not be used" }, "fullDescription": { "text": "C-style arrays shall not be used [STL-37]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "C-style arrays shall not be used [STL-37]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-38", "name": "Use != instead of < to compare iterators", "shortDescription": { "text": "Use != instead of < to compare iterators" }, "fullDescription": { "text": "Use != instead of < to compare iterators [STL-38]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use != instead of < to compare iterators [STL-38]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-39", "name": "Use traits classes in conjunction with overloading", "shortDescription": { "text": "Use traits classes in conjunction with overloading" }, "fullDescription": { "text": "Use traits classes in conjunction with overloading [STL-39]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use traits classes in conjunction with overloading [STL-39]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-40", "name": "When calling swap, employ a using declaration for std::swap, then call swap without namespace qualification", "shortDescription": { "text": "When calling swap, employ a using declaration for std::swap, then call swap without namespace qualification" }, "fullDescription": { "text": "When calling swap, employ a using declaration for std::swap, then call swap without namespace qualification [STL-40]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "When calling swap, employ a using declaration for std::swap, then call swap without namespace qualification [STL-40]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-41", "name": "Do not declare the non-member to be an overloading of std::swap", "shortDescription": { "text": "Do not declare the non-member to be an overloading of std::swap" }, "fullDescription": { "text": "Do not declare the non-member to be an overloading of std::swap [STL-41]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not declare the non-member to be an overloading of std::swap [STL-41]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-42", "name": "Member version of swap should never throw exceptions", "shortDescription": { "text": "Member version of swap should never throw exceptions" }, "fullDescription": { "text": "Member version of swap should never throw exceptions [STL-42]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Member version of swap should never throw exceptions [STL-42]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-11", "name": "Consider using vector<char> instead of string", "shortDescription": { "text": "Consider using vector<char> instead of string" }, "fullDescription": { "text": "Consider using vector<char> instead of string [STL-11]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Consider using vector<char> instead of string [STL-11]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-20", "name": "It is necessary to be careful when using reverse_iterator's base iterator for erasure purposes", "shortDescription": { "text": "It is necessary to be careful when using reverse_iterator's base iterator for erasure purposes" }, "fullDescription": { "text": "It is necessary to be careful when using reverse_iterator's base iterator for erasure purposes [STL-20]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "It is necessary to be careful when using reverse_iterator's base iterator for erasure purposes [STL-20]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-21", "name": "Consider istreambuf_iterators for character-by-character input", "shortDescription": { "text": "Consider istreambuf_iterators for character-by-character input" }, "fullDescription": { "text": "Consider istreambuf_iterators for character-by-character input [STL-21]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Consider istreambuf_iterators for character-by-character input [STL-21]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-25", "name": "If you pass a sorted range to an algorithm that also takes a comparison function, be sure that the comparison function you pass behaves the same as the one you used to sort the range", "shortDescription": { "text": "If you pass a sorted range to an algorithm that also takes a comparison function, be sure that the comparison function you pass behaves the same as the one you used to sort the range" }, "fullDescription": { "text": "If you pass a sorted range to an algorithm that also takes a comparison function, be sure that the comparison function you pass behaves the same as the one you used to sort the range [STL-25]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If you pass a sorted range to an algorithm that also takes a comparison function, be sure that the comparison function you pass behaves the same as the one you used to sort the range [STL-25]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "STL-01", "name": "Instead of trying to write the container-independent code use class encapsulation", "shortDescription": { "text": "Instead of trying to write the container-independent code use class encapsulation" }, "fullDescription": { "text": "Instead of trying to write the container-independent code use class encapsulation [STL-01]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Instead of trying to write the container-independent code use class encapsulation [STL-01]" }, "properties": { "tags": [ "STL Best Practices" ] } }, { "id": "TEMPL-01", "name": "Factor parameter-independent code out of templates", "shortDescription": { "text": "Factor parameter-independent code out of templates" }, "fullDescription": { "text": "Factor parameter-independent code out of templates [TEMPL-01]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Factor parameter-independent code out of templates [TEMPL-01]" }, "properties": { "tags": [ "Template" ] } }, { "id": "TEMPL-02", "name": "Define non-member functions inside templates when type conversions are desired", "shortDescription": { "text": "Define non-member functions inside templates when type conversions are desired" }, "fullDescription": { "text": "Define non-member functions inside templates when type conversions are desired [TEMPL-02]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Define non-member functions inside templates when type conversions are desired [TEMPL-02]" }, "properties": { "tags": [ "Template" ] } }, { "id": "TEMPL-03", "name": "Do not overload functions within a template class", "shortDescription": { "text": "Do not overload functions within a template class" }, "fullDescription": { "text": "Do not overload functions within a template class [TEMPL-03]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not overload functions within a template class [TEMPL-03]" }, "properties": { "tags": [ "Template" ] } }, { "id": "TEMPL-04", "name": "In template global functions use 'typename' to identify nested dependent type names", "shortDescription": { "text": "In template global functions use 'typename' to identify nested dependent type names" }, "fullDescription": { "text": "In template global functions use 'typename' to identify nested dependent type names [TEMPL-04]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "In template global functions use 'typename' to identify nested dependent type names [TEMPL-04]" }, "properties": { "tags": [ "Template" ] } }, { "id": "TEMPL-05", "name": "In template classes use 'typename' to identify nested dependent type names", "shortDescription": { "text": "In template classes use 'typename' to identify nested dependent type names" }, "fullDescription": { "text": "In template classes use 'typename' to identify nested dependent type names [TEMPL-05]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "In template classes use 'typename' to identify nested dependent type names [TEMPL-05]" }, "properties": { "tags": [ "Template" ] } }, { "id": "TEMPL-06", "name": "Don't change default arguments of virtual functions in template classes", "shortDescription": { "text": "Don't change default arguments of virtual functions in template classes" }, "fullDescription": { "text": "Don't change default arguments of virtual functions in template classes [TEMPL-06]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Don't change default arguments of virtual functions in template classes [TEMPL-06]" }, "properties": { "tags": [ "Template" ] } }, { "id": "TEMPL-07", "name": "A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter", "shortDescription": { "text": "A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter" }, "fullDescription": { "text": "A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter [TEMPL-07]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter [TEMPL-07]" }, "properties": { "tags": [ "Template" ] } }, { "id": "TEMPL-08", "name": "The viable function set for a function call should either contain no function specializations, or only contain function specializations", "shortDescription": { "text": "The viable function set for a function call should either contain no function specializations, or only contain function specializations" }, "fullDescription": { "text": "The viable function set for a function call should either contain no function specializations, or only contain function specializations [TEMPL-08]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The viable function set for a function call should either contain no function specializations, or only contain function specializations [TEMPL-08]" }, "properties": { "tags": [ "Template" ] } }, { "id": "TEMPL-09", "name": "Overloaded function templates shall not be explicitly specialized", "shortDescription": { "text": "Overloaded function templates shall not be explicitly specialized" }, "fullDescription": { "text": "Overloaded function templates shall not be explicitly specialized [TEMPL-09]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Overloaded function templates shall not be explicitly specialized [TEMPL-09]" }, "properties": { "tags": [ "Template" ] } }, { "id": "TEMPL-10", "name": "All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template", "shortDescription": { "text": "All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template" }, "fullDescription": { "text": "All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template [TEMPL-10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template [TEMPL-10]" }, "properties": { "tags": [ "Template" ] } }, { "id": "TEMPL-11", "name": "A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter", "shortDescription": { "text": "A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" }, "fullDescription": { "text": "A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter [TEMPL-11]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter [TEMPL-11]" }, "properties": { "tags": [ "Template" ] } }, { "id": "TEMPL-12", "name": "In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->", "shortDescription": { "text": "In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" }, "fullDescription": { "text": "In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this-> [TEMPL-12]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this-> [TEMPL-12]" }, "properties": { "tags": [ "Template" ] } }, { "id": "TEMPL-13", "name": "Do not declare non-member generic functions in associated namespaces", "shortDescription": { "text": "Do not declare non-member generic functions in associated namespaces" }, "fullDescription": { "text": "Do not declare non-member generic functions in associated namespaces [TEMPL-13]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not declare non-member generic functions in associated namespaces [TEMPL-13]" }, "properties": { "tags": [ "Template" ] } }, { "id": "TEMPL-14", "name": "The function shall resolve to a function declared previously in the translation unit", "shortDescription": { "text": "The function shall resolve to a function declared previously in the translation unit" }, "fullDescription": { "text": "The function shall resolve to a function declared previously in the translation unit [TEMPL-14]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The function shall resolve to a function declared previously in the translation unit [TEMPL-14]" }, "properties": { "tags": [ "Template" ] } }, { "id": "TEMPL-15", "name": "Declare 'extern' an explicitly instantiated template", "shortDescription": { "text": "Declare 'extern' an explicitly instantiated template" }, "fullDescription": { "text": "Declare 'extern' an explicitly instantiated template [TEMPL-15]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare 'extern' an explicitly instantiated template [TEMPL-15]" }, "properties": { "tags": [ "Template" ] } }, { "id": "TEMPL-16", "name": "Template specialization shall be declared in the same file as the primary template or a user-defined type, for which the specialization is declared", "shortDescription": { "text": "Template specialization shall be declared in the same file as the primary template or a user-defined type, for which the specialization is declared" }, "fullDescription": { "text": "Template specialization shall be declared in the same file as the primary template or a user-defined type, for which the specialization is declared [TEMPL-16]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Template specialization shall be declared in the same file as the primary template or a user-defined type, for which the specialization is declared [TEMPL-16]" }, "properties": { "tags": [ "Template" ] } }, { "id": "TEMPL-17", "name": "Use a trailing return type syntax if the return type is preceded by the 'typename' keyword", "shortDescription": { "text": "Use a trailing return type syntax if the return type is preceded by the 'typename' keyword" }, "fullDescription": { "text": "Use a trailing return type syntax if the return type is preceded by the 'typename' keyword [TEMPL-17]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use a trailing return type syntax if the return type is preceded by the 'typename' keyword [TEMPL-17]" }, "properties": { "tags": [ "Template" ] } }, { "id": "TEMPL-18", "name": "A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations", "shortDescription": { "text": "A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations" }, "fullDescription": { "text": "A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations [TEMPL-18]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations [TEMPL-18]" }, "properties": { "tags": [ "Template" ] } }] } }, "originalUriBaseIds": {"PROJECTROOT-1": { "uri": "D:/reports/projects/flowanalysiscpp/" }}, "results": [{ "ruleId": "COMMENT-02", "level": "warning", "message": { "text": "Add comment containing the copyright information at the begin of file 'DeadLock.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the copyright information at the begin of file 'DeadLock\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-133_b", "level": "warning", "message": { "text": "Add comment containing the copyright information at the begin of file 'DeadLock.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the copyright information at the begin of file 'DeadLock\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-03", "level": "warning", "message": { "text": "Add comment containing the information on the file at the begin of file 'DeadLock.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the information on the file at the begin of file 'DeadLock\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-133_a", "level": "warning", "message": { "text": "Add comment containing the information on the file at the begin of file 'DeadLock.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the information on the file at the begin of file 'DeadLock\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-09", "level": "error", "message": { "text": "Disallowed #include notation is being used: \"Shapes.hpp\"", "markdown": "**\\[Line 1\\] Disallowed \\#include notation is being used: \"Shapes\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-033", "level": "error", "message": { "text": "Disallowed #include notation is being used: \"Shapes.hpp\"", "markdown": "**\\[Line 1\\] Disallowed \\#include notation is being used: \"Shapes\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PFO-04", "level": "note", "message": { "text": "Implementation file 'DeadLock.cpp' should declare a local constant string that begins from characters \"@(#)\" ", "markdown": "**\\[Line 1\\] Implementation file 'DeadLock\\.cpp' should declare a local constant string that begins from characters \"@\\(\\#\\)\" **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-38", "level": "warning", "message": { "text": "Implementation file 'DeadLock.cpp' should have the file name extension \".cc\"", "markdown": "**\\[Line 1\\] Implementation file 'DeadLock\\.cpp' should have the file name extension \"\\.cc\"**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-032", "level": "warning", "message": { "text": "Not a proper header file (*.h ) is being included: \"Shapes.hpp\"", "markdown": "**\\[Line 1\\] Not a proper header file \\(\\*\\.h \\) is being included: \"Shapes\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-08", "level": "warning", "message": { "text": "Not a proper header file (*.h ) is being included: \"Shapes.hpp\"", "markdown": "**\\[Line 1\\] Not a proper header file \\(\\*\\.h \\) is being included: \"Shapes\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "METRICS-31", "level": "warning", "message": { "text": "The assertion density is lower than two assertions per function", "markdown": "**\\[Line 1\\] The assertion density is lower than two assertions per function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-03", "level": "warning", "message": { "text": "The filename 'DeadLock.cpp' should be in lowercase", "markdown": "**\\[Line 1\\] The filename 'DeadLock\\.cpp' should be in lowercase**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "METRIC.NOPLIF", "level": "warning", "message": { "text": "Value 152 is out of acceptable range: 'lower than 50'", "markdown": "**\\[Line 1\\] Value 152 is out of acceptable range: 'lower than 50'**" }, "partialFingerprints": { "violType": "MetViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1 } } } ] }, { "ruleId": "PREPROC-10_c", "level": "warning", "message": { "text": "#if pre-processor directive should not be used", "markdown": "**\\[Line 3\\] \\#if pre\\-processor directive should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_1_e", "level": "error", "message": { "text": "#if pre-processor directive should not be used", "markdown": "**\\[Line 3\\] \\#if pre\\-processor directive should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-16_1_1-f", "level": "warning", "message": { "text": "#if pre-processor directive should not be used", "markdown": "**\\[Line 3\\] \\#if pre\\-processor directive should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-11_b", "level": "warning", "message": { "text": "The #if preprocessor directive is used", "markdown": "**\\[Line 3\\] The \\#if preprocessor directive is used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-026_b", "level": "error", "message": { "text": "The #if preprocessor directive is used", "markdown": "**\\[Line 3\\] The \\#if preprocessor directive is used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_2", "level": "error", "message": { "text": "Do not use #define to define constant: 'THREAD'", "markdown": "**\\[Line 7\\] Do not use \\#define to define constant: 'THREAD'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-12", "level": "warning", "message": { "text": "Do not use #define to define constant: 'THREAD'", "markdown": "**\\[Line 7\\] Do not use \\#define to define constant: 'THREAD'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-031", "level": "warning", "message": { "text": "Do not use the macro definition 'THREAD'", "markdown": "**\\[Line 7\\] Do not use the macro definition 'THREAD'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_1_a", "level": "error", "message": { "text": "Do not use the macro definition 'THREAD'", "markdown": "**\\[Line 7\\] Do not use the macro definition 'THREAD'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-16_1_1-a", "level": "warning", "message": { "text": "Do not use the macro definition 'THREAD'", "markdown": "**\\[Line 7\\] Do not use the macro definition 'THREAD'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-01", "level": "warning", "message": { "text": "Do not use the macro definition 'THREAD'", "markdown": "**\\[Line 7\\] Do not use the macro definition 'THREAD'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A16_0_1-d", "level": "error", "message": { "text": "Do not use the macro definition 'THREAD'", "markdown": "**\\[Line 7\\] Do not use the macro definition 'THREAD'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-14", "level": "warning", "message": { "text": "Not all body of macro 'THREAD' is enclosed in braces", "markdown": "**\\[Line 7\\] Not all body of macro 'THREAD' is enclosed in braces**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_2", "level": "error", "message": { "text": "Do not use #define to define constant: 'THREAD_RETURN_TYPE'", "markdown": "**\\[Line 8\\] Do not use \\#define to define constant: 'THREAD\\_RETURN\\_TYPE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-12", "level": "warning", "message": { "text": "Do not use #define to define constant: 'THREAD_RETURN_TYPE'", "markdown": "**\\[Line 8\\] Do not use \\#define to define constant: 'THREAD\\_RETURN\\_TYPE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-031", "level": "warning", "message": { "text": "Do not use the macro definition 'THREAD_RETURN_TYPE'", "markdown": "**\\[Line 8\\] Do not use the macro definition 'THREAD\\_RETURN\\_TYPE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_1_a", "level": "error", "message": { "text": "Do not use the macro definition 'THREAD_RETURN_TYPE'", "markdown": "**\\[Line 8\\] Do not use the macro definition 'THREAD\\_RETURN\\_TYPE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-16_1_1-a", "level": "warning", "message": { "text": "Do not use the macro definition 'THREAD_RETURN_TYPE'", "markdown": "**\\[Line 8\\] Do not use the macro definition 'THREAD\\_RETURN\\_TYPE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-01", "level": "warning", "message": { "text": "Do not use the macro definition 'THREAD_RETURN_TYPE'", "markdown": "**\\[Line 8\\] Do not use the macro definition 'THREAD\\_RETURN\\_TYPE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A16_0_1-d", "level": "error", "message": { "text": "Do not use the macro definition 'THREAD_RETURN_TYPE'", "markdown": "**\\[Line 8\\] Do not use the macro definition 'THREAD\\_RETURN\\_TYPE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-14", "level": "warning", "message": { "text": "Not all body of macro 'THREAD_RETURN_TYPE' is enclosed in braces", "markdown": "**\\[Line 8\\] Not all body of macro 'THREAD\\_RETURN\\_TYPE' is enclosed in braces**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA-096", "level": "warning", "message": { "text": "Body of macro 'THREAD_CREATE' is defined without parentheses", "markdown": "**\\[Line 9\\] Body of macro 'THREAD\\_CREATE' is defined without parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CERT_C-PRE02-a", "level": "error", "message": { "text": "Body of macro 'THREAD_CREATE' is defined without parentheses", "markdown": "**\\[Line 9\\] Body of macro 'THREAD\\_CREATE' is defined without parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_0_4", "level": "error", "message": { "text": "Do not define function-like macro: THREAD_CREATE", "markdown": "**\\[Line 9\\] Do not define function\\-like macro: THREAD\\_CREATE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_9-a", "level": "warning", "message": { "text": "Do not define function-like macro: THREAD_CREATE", "markdown": "**\\[Line 9\\] Do not define function\\-like macro: THREAD\\_CREATE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-19_7", "level": "warning", "message": { "text": "Do not define function-like macro: THREAD_CREATE", "markdown": "**\\[Line 9\\] Do not define function\\-like macro: THREAD\\_CREATE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-029", "level": "error", "message": { "text": "Do not define function-like macro: THREAD_CREATE", "markdown": "**\\[Line 9\\] Do not define function\\-like macro: THREAD\\_CREATE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2012-DIR-4_9", "level": "warning", "message": { "text": "Do not define function-like macro: THREAD_CREATE", "markdown": "**\\[Line 9\\] Do not define function\\-like macro: THREAD\\_CREATE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CERT_C-PRE00-a", "level": "warning", "message": { "text": "Do not define function-like macro: THREAD_CREATE", "markdown": "**\\[Line 9\\] Do not define function\\-like macro: THREAD\\_CREATE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_2", "level": "error", "message": { "text": "Do not define function-like macro: THREAD_CREATE", "markdown": "**\\[Line 9\\] Do not define function\\-like macro: THREAD\\_CREATE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-12", "level": "warning", "message": { "text": "Do not define function-like macro: THREAD_CREATE", "markdown": "**\\[Line 9\\] Do not define function\\-like macro: THREAD\\_CREATE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-031", "level": "warning", "message": { "text": "Do not use the macro definition 'THREAD_CREATE'", "markdown": "**\\[Line 9\\] Do not use the macro definition 'THREAD\\_CREATE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_1_a", "level": "error", "message": { "text": "Do not use the macro definition 'THREAD_CREATE'", "markdown": "**\\[Line 9\\] Do not use the macro definition 'THREAD\\_CREATE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-16_1_1-a", "level": "warning", "message": { "text": "Do not use the macro definition 'THREAD_CREATE'", "markdown": "**\\[Line 9\\] Do not use the macro definition 'THREAD\\_CREATE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-01", "level": "warning", "message": { "text": "Do not use the macro definition 'THREAD_CREATE'", "markdown": "**\\[Line 9\\] Do not use the macro definition 'THREAD\\_CREATE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A16_0_1-d", "level": "error", "message": { "text": "Do not use the macro definition 'THREAD_CREATE'", "markdown": "**\\[Line 9\\] Do not use the macro definition 'THREAD\\_CREATE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-19_10", "level": "warning", "message": { "text": "Each instance of parameter: 'func' should be enclosed in parentheses", "markdown": "**\\[Line 9\\] Each instance of parameter: 'func' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 65, "endColumn": 66 } } } ] }, { "ruleId": "MISRA2008-16_0_6", "level": "error", "message": { "text": "Each instance of parameter: 'func' should be enclosed in parentheses", "markdown": "**\\[Line 9\\] Each instance of parameter: 'func' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 65, "endColumn": 66 } } } ] }, { "ruleId": "MISRA2012-RULE-20_7", "level": "error", "message": { "text": "Each instance of parameter: 'func' should be enclosed in parentheses", "markdown": "**\\[Line 9\\] Each instance of parameter: 'func' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 65, "endColumn": 66 } } } ] }, { "ruleId": "AUTOSAR-M16_0_6-a", "level": "error", "message": { "text": "Each instance of parameter: 'func' should be enclosed in parentheses", "markdown": "**\\[Line 9\\] Each instance of parameter: 'func' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 65, "endColumn": 66 } } } ] }, { "ruleId": "CERT_C-PRE01-a", "level": "error", "message": { "text": "Each instance of parameter: 'func' should be enclosed in parentheses", "markdown": "**\\[Line 9\\] Each instance of parameter: 'func' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 65, "endColumn": 66 } } } ] }, { "ruleId": "MISRAC2012-RULE_20_7-a", "level": "error", "message": { "text": "Each instance of parameter: 'func' should be enclosed in parentheses", "markdown": "**\\[Line 9\\] Each instance of parameter: 'func' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 65, "endColumn": 66 } } } ] }, { "ruleId": "MISRA2004-19_10", "level": "warning", "message": { "text": "Each instance of parameter: 'thread' should be enclosed in parentheses", "markdown": "**\\[Line 9\\] Each instance of parameter: 'thread' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 37, "endColumn": 38 } } } ] }, { "ruleId": "MISRA2008-16_0_6", "level": "error", "message": { "text": "Each instance of parameter: 'thread' should be enclosed in parentheses", "markdown": "**\\[Line 9\\] Each instance of parameter: 'thread' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 37, "endColumn": 38 } } } ] }, { "ruleId": "MISRA2012-RULE-20_7", "level": "error", "message": { "text": "Each instance of parameter: 'thread' should be enclosed in parentheses", "markdown": "**\\[Line 9\\] Each instance of parameter: 'thread' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 37, "endColumn": 38 } } } ] }, { "ruleId": "AUTOSAR-M16_0_6-a", "level": "error", "message": { "text": "Each instance of parameter: 'thread' should be enclosed in parentheses", "markdown": "**\\[Line 9\\] Each instance of parameter: 'thread' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 37, "endColumn": 38 } } } ] }, { "ruleId": "CERT_C-PRE01-a", "level": "error", "message": { "text": "Each instance of parameter: 'thread' should be enclosed in parentheses", "markdown": "**\\[Line 9\\] Each instance of parameter: 'thread' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 37, "endColumn": 38 } } } ] }, { "ruleId": "MISRAC2012-RULE_20_7-a", "level": "error", "message": { "text": "Each instance of parameter: 'thread' should be enclosed in parentheses", "markdown": "**\\[Line 9\\] Each instance of parameter: 'thread' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 37, "endColumn": 38 } } } ] }, { "ruleId": "PREPROC-14", "level": "warning", "message": { "text": "Not all body of macro 'THREAD_CREATE' is enclosed in braces", "markdown": "**\\[Line 9\\] Not all body of macro 'THREAD\\_CREATE' is enclosed in braces**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_2", "level": "error", "message": { "text": "Do not use #define to define constant: 'LOCK'", "markdown": "**\\[Line 11\\] Do not use \\#define to define constant: 'LOCK'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-12", "level": "warning", "message": { "text": "Do not use #define to define constant: 'LOCK'", "markdown": "**\\[Line 11\\] Do not use \\#define to define constant: 'LOCK'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-031", "level": "warning", "message": { "text": "Do not use the macro definition 'LOCK'", "markdown": "**\\[Line 11\\] Do not use the macro definition 'LOCK'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_1_a", "level": "error", "message": { "text": "Do not use the macro definition 'LOCK'", "markdown": "**\\[Line 11\\] Do not use the macro definition 'LOCK'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-16_1_1-a", "level": "warning", "message": { "text": "Do not use the macro definition 'LOCK'", "markdown": "**\\[Line 11\\] Do not use the macro definition 'LOCK'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-01", "level": "warning", "message": { "text": "Do not use the macro definition 'LOCK'", "markdown": "**\\[Line 11\\] Do not use the macro definition 'LOCK'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A16_0_1-d", "level": "error", "message": { "text": "Do not use the macro definition 'LOCK'", "markdown": "**\\[Line 11\\] Do not use the macro definition 'LOCK'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-14", "level": "warning", "message": { "text": "Not all body of macro 'LOCK' is enclosed in braces", "markdown": "**\\[Line 11\\] Not all body of macro 'LOCK' is enclosed in braces**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA-096", "level": "warning", "message": { "text": "Body of macro 'LOCK_ACQUIRE' is defined without parentheses", "markdown": "**\\[Line 12\\] Body of macro 'LOCK\\_ACQUIRE' is defined without parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CERT_C-PRE02-a", "level": "error", "message": { "text": "Body of macro 'LOCK_ACQUIRE' is defined without parentheses", "markdown": "**\\[Line 12\\] Body of macro 'LOCK\\_ACQUIRE' is defined without parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_0_4", "level": "error", "message": { "text": "Do not define function-like macro: LOCK_ACQUIRE", "markdown": "**\\[Line 12\\] Do not define function\\-like macro: LOCK\\_ACQUIRE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_9-a", "level": "warning", "message": { "text": "Do not define function-like macro: LOCK_ACQUIRE", "markdown": "**\\[Line 12\\] Do not define function\\-like macro: LOCK\\_ACQUIRE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-19_7", "level": "warning", "message": { "text": "Do not define function-like macro: LOCK_ACQUIRE", "markdown": "**\\[Line 12\\] Do not define function\\-like macro: LOCK\\_ACQUIRE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-029", "level": "error", "message": { "text": "Do not define function-like macro: LOCK_ACQUIRE", "markdown": "**\\[Line 12\\] Do not define function\\-like macro: LOCK\\_ACQUIRE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2012-DIR-4_9", "level": "warning", "message": { "text": "Do not define function-like macro: LOCK_ACQUIRE", "markdown": "**\\[Line 12\\] Do not define function\\-like macro: LOCK\\_ACQUIRE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CERT_C-PRE00-a", "level": "warning", "message": { "text": "Do not define function-like macro: LOCK_ACQUIRE", "markdown": "**\\[Line 12\\] Do not define function\\-like macro: LOCK\\_ACQUIRE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_2", "level": "error", "message": { "text": "Do not define function-like macro: LOCK_ACQUIRE", "markdown": "**\\[Line 12\\] Do not define function\\-like macro: LOCK\\_ACQUIRE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-12", "level": "warning", "message": { "text": "Do not define function-like macro: LOCK_ACQUIRE", "markdown": "**\\[Line 12\\] Do not define function\\-like macro: LOCK\\_ACQUIRE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-031", "level": "warning", "message": { "text": "Do not use the macro definition 'LOCK_ACQUIRE'", "markdown": "**\\[Line 12\\] Do not use the macro definition 'LOCK\\_ACQUIRE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_1_a", "level": "error", "message": { "text": "Do not use the macro definition 'LOCK_ACQUIRE'", "markdown": "**\\[Line 12\\] Do not use the macro definition 'LOCK\\_ACQUIRE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-16_1_1-a", "level": "warning", "message": { "text": "Do not use the macro definition 'LOCK_ACQUIRE'", "markdown": "**\\[Line 12\\] Do not use the macro definition 'LOCK\\_ACQUIRE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-01", "level": "warning", "message": { "text": "Do not use the macro definition 'LOCK_ACQUIRE'", "markdown": "**\\[Line 12\\] Do not use the macro definition 'LOCK\\_ACQUIRE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A16_0_1-d", "level": "error", "message": { "text": "Do not use the macro definition 'LOCK_ACQUIRE'", "markdown": "**\\[Line 12\\] Do not use the macro definition 'LOCK\\_ACQUIRE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-19_10", "level": "warning", "message": { "text": "Each instance of parameter: 'lock' should be enclosed in parentheses", "markdown": "**\\[Line 12\\] Each instance of parameter: 'lock' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "MISRA2008-16_0_6", "level": "error", "message": { "text": "Each instance of parameter: 'lock' should be enclosed in parentheses", "markdown": "**\\[Line 12\\] Each instance of parameter: 'lock' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "MISRA2012-RULE-20_7", "level": "error", "message": { "text": "Each instance of parameter: 'lock' should be enclosed in parentheses", "markdown": "**\\[Line 12\\] Each instance of parameter: 'lock' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "AUTOSAR-M16_0_6-a", "level": "error", "message": { "text": "Each instance of parameter: 'lock' should be enclosed in parentheses", "markdown": "**\\[Line 12\\] Each instance of parameter: 'lock' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "CERT_C-PRE01-a", "level": "error", "message": { "text": "Each instance of parameter: 'lock' should be enclosed in parentheses", "markdown": "**\\[Line 12\\] Each instance of parameter: 'lock' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "MISRAC2012-RULE_20_7-a", "level": "error", "message": { "text": "Each instance of parameter: 'lock' should be enclosed in parentheses", "markdown": "**\\[Line 12\\] Each instance of parameter: 'lock' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "PREPROC-14", "level": "warning", "message": { "text": "Not all body of macro 'LOCK_ACQUIRE' is enclosed in braces", "markdown": "**\\[Line 12\\] Not all body of macro 'LOCK\\_ACQUIRE' is enclosed in braces**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA-096", "level": "warning", "message": { "text": "Body of macro 'LOCK_RELEASE' is defined without parentheses", "markdown": "**\\[Line 13\\] Body of macro 'LOCK\\_RELEASE' is defined without parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CERT_C-PRE02-a", "level": "error", "message": { "text": "Body of macro 'LOCK_RELEASE' is defined without parentheses", "markdown": "**\\[Line 13\\] Body of macro 'LOCK\\_RELEASE' is defined without parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_0_4", "level": "error", "message": { "text": "Do not define function-like macro: LOCK_RELEASE", "markdown": "**\\[Line 13\\] Do not define function\\-like macro: LOCK\\_RELEASE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_9-a", "level": "warning", "message": { "text": "Do not define function-like macro: LOCK_RELEASE", "markdown": "**\\[Line 13\\] Do not define function\\-like macro: LOCK\\_RELEASE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-19_7", "level": "warning", "message": { "text": "Do not define function-like macro: LOCK_RELEASE", "markdown": "**\\[Line 13\\] Do not define function\\-like macro: LOCK\\_RELEASE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-029", "level": "error", "message": { "text": "Do not define function-like macro: LOCK_RELEASE", "markdown": "**\\[Line 13\\] Do not define function\\-like macro: LOCK\\_RELEASE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2012-DIR-4_9", "level": "warning", "message": { "text": "Do not define function-like macro: LOCK_RELEASE", "markdown": "**\\[Line 13\\] Do not define function\\-like macro: LOCK\\_RELEASE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CERT_C-PRE00-a", "level": "warning", "message": { "text": "Do not define function-like macro: LOCK_RELEASE", "markdown": "**\\[Line 13\\] Do not define function\\-like macro: LOCK\\_RELEASE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_2", "level": "error", "message": { "text": "Do not define function-like macro: LOCK_RELEASE", "markdown": "**\\[Line 13\\] Do not define function\\-like macro: LOCK\\_RELEASE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-12", "level": "warning", "message": { "text": "Do not define function-like macro: LOCK_RELEASE", "markdown": "**\\[Line 13\\] Do not define function\\-like macro: LOCK\\_RELEASE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-031", "level": "warning", "message": { "text": "Do not use the macro definition 'LOCK_RELEASE'", "markdown": "**\\[Line 13\\] Do not use the macro definition 'LOCK\\_RELEASE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_1_a", "level": "error", "message": { "text": "Do not use the macro definition 'LOCK_RELEASE'", "markdown": "**\\[Line 13\\] Do not use the macro definition 'LOCK\\_RELEASE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-16_1_1-a", "level": "warning", "message": { "text": "Do not use the macro definition 'LOCK_RELEASE'", "markdown": "**\\[Line 13\\] Do not use the macro definition 'LOCK\\_RELEASE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-01", "level": "warning", "message": { "text": "Do not use the macro definition 'LOCK_RELEASE'", "markdown": "**\\[Line 13\\] Do not use the macro definition 'LOCK\\_RELEASE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A16_0_1-d", "level": "error", "message": { "text": "Do not use the macro definition 'LOCK_RELEASE'", "markdown": "**\\[Line 13\\] Do not use the macro definition 'LOCK\\_RELEASE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-19_10", "level": "warning", "message": { "text": "Each instance of parameter: 'lock' should be enclosed in parentheses", "markdown": "**\\[Line 13\\] Each instance of parameter: 'lock' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "MISRA2008-16_0_6", "level": "error", "message": { "text": "Each instance of parameter: 'lock' should be enclosed in parentheses", "markdown": "**\\[Line 13\\] Each instance of parameter: 'lock' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "MISRA2012-RULE-20_7", "level": "error", "message": { "text": "Each instance of parameter: 'lock' should be enclosed in parentheses", "markdown": "**\\[Line 13\\] Each instance of parameter: 'lock' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "AUTOSAR-M16_0_6-a", "level": "error", "message": { "text": "Each instance of parameter: 'lock' should be enclosed in parentheses", "markdown": "**\\[Line 13\\] Each instance of parameter: 'lock' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "CERT_C-PRE01-a", "level": "error", "message": { "text": "Each instance of parameter: 'lock' should be enclosed in parentheses", "markdown": "**\\[Line 13\\] Each instance of parameter: 'lock' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "MISRAC2012-RULE_20_7-a", "level": "error", "message": { "text": "Each instance of parameter: 'lock' should be enclosed in parentheses", "markdown": "**\\[Line 13\\] Each instance of parameter: 'lock' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "PREPROC-14", "level": "warning", "message": { "text": "Not all body of macro 'LOCK_RELEASE' is enclosed in braces", "markdown": "**\\[Line 13\\] Not all body of macro 'LOCK\\_RELEASE' is enclosed in braces**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA-096", "level": "warning", "message": { "text": "Body of macro 'SLEEP' is defined without parentheses", "markdown": "**\\[Line 15\\] Body of macro 'SLEEP' is defined without parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CERT_C-PRE02-a", "level": "error", "message": { "text": "Body of macro 'SLEEP' is defined without parentheses", "markdown": "**\\[Line 15\\] Body of macro 'SLEEP' is defined without parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_0_4", "level": "error", "message": { "text": "Do not define function-like macro: SLEEP", "markdown": "**\\[Line 15\\] Do not define function\\-like macro: SLEEP**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_9-a", "level": "warning", "message": { "text": "Do not define function-like macro: SLEEP", "markdown": "**\\[Line 15\\] Do not define function\\-like macro: SLEEP**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-19_7", "level": "warning", "message": { "text": "Do not define function-like macro: SLEEP", "markdown": "**\\[Line 15\\] Do not define function\\-like macro: SLEEP**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-029", "level": "error", "message": { "text": "Do not define function-like macro: SLEEP", "markdown": "**\\[Line 15\\] Do not define function\\-like macro: SLEEP**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2012-DIR-4_9", "level": "warning", "message": { "text": "Do not define function-like macro: SLEEP", "markdown": "**\\[Line 15\\] Do not define function\\-like macro: SLEEP**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CERT_C-PRE00-a", "level": "warning", "message": { "text": "Do not define function-like macro: SLEEP", "markdown": "**\\[Line 15\\] Do not define function\\-like macro: SLEEP**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_2", "level": "error", "message": { "text": "Do not define function-like macro: SLEEP", "markdown": "**\\[Line 15\\] Do not define function\\-like macro: SLEEP**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-12", "level": "warning", "message": { "text": "Do not define function-like macro: SLEEP", "markdown": "**\\[Line 15\\] Do not define function\\-like macro: SLEEP**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-031", "level": "warning", "message": { "text": "Do not use the macro definition 'SLEEP'", "markdown": "**\\[Line 15\\] Do not use the macro definition 'SLEEP'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_1_a", "level": "error", "message": { "text": "Do not use the macro definition 'SLEEP'", "markdown": "**\\[Line 15\\] Do not use the macro definition 'SLEEP'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-16_1_1-a", "level": "warning", "message": { "text": "Do not use the macro definition 'SLEEP'", "markdown": "**\\[Line 15\\] Do not use the macro definition 'SLEEP'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-01", "level": "warning", "message": { "text": "Do not use the macro definition 'SLEEP'", "markdown": "**\\[Line 15\\] Do not use the macro definition 'SLEEP'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A16_0_1-d", "level": "error", "message": { "text": "Do not use the macro definition 'SLEEP'", "markdown": "**\\[Line 15\\] Do not use the macro definition 'SLEEP'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-14", "level": "warning", "message": { "text": "Not all body of macro 'SLEEP' is enclosed in braces", "markdown": "**\\[Line 15\\] Not all body of macro 'SLEEP' is enclosed in braces**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_1_c", "level": "error", "message": { "text": "The #else preprocessor directive is used", "markdown": "**\\[Line 17\\] The \\#else preprocessor directive is used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 17, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-16_1_1-c", "level": "warning", "message": { "text": "The #else preprocessor directive is used", "markdown": "**\\[Line 17\\] The \\#else preprocessor directive is used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 17, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-026", "level": "error", "message": { "text": "The #else preprocessor directive is used", "markdown": "**\\[Line 17\\] The \\#else preprocessor directive is used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 17, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-11", "level": "warning", "message": { "text": "The #else preprocessor directive is used", "markdown": "**\\[Line 17\\] The \\#else preprocessor directive is used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 17, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-10_c", "level": "warning", "message": { "text": "#if pre-processor directive should not be used", "markdown": "**\\[Line 19\\] \\#if pre\\-processor directive should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_1_e", "level": "error", "message": { "text": "#if pre-processor directive should not be used", "markdown": "**\\[Line 19\\] \\#if pre\\-processor directive should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-16_1_1-f", "level": "warning", "message": { "text": "#if pre-processor directive should not be used", "markdown": "**\\[Line 19\\] \\#if pre\\-processor directive should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-041", "level": "warning", "message": { "text": "Line contains more than 120 characters: 302", "markdown": "**\\[Line 19\\] Line contains more than 120 characters: 302**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "METRICS-26", "level": "warning", "message": { "text": "Line contains more than 120 characters: 302", "markdown": "**\\[Line 19\\] Line contains more than 120 characters: 302**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-04", "level": "warning", "message": { "text": "Line has over 79 characters", "markdown": "**\\[Line 19\\] Line has over 79 characters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-11_b", "level": "warning", "message": { "text": "The #if preprocessor directive is used", "markdown": "**\\[Line 19\\] The \\#if preprocessor directive is used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-026_b", "level": "error", "message": { "text": "The #if preprocessor directive is used", "markdown": "**\\[Line 19\\] The \\#if preprocessor directive is used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-18_1_1-a", "level": "warning", "message": { "text": "Do not use platform-specific multi-threading facilities: <pthread.h>", "markdown": "**\\[Line 21\\] Do not use platform\\-specific multi\\-threading facilities: <pthread\\.h>**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 21, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-26", "level": "warning", "message": { "text": "#else pre-processor directive should not be used", "markdown": "**\\[Line 24\\] \\#else pre\\-processor directive should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 24, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A16_0_1-a", "level": "error", "message": { "text": "#else pre-processor directive should not be used", "markdown": "**\\[Line 24\\] \\#else pre\\-processor directive should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 24, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_1_c", "level": "error", "message": { "text": "The #else preprocessor directive is used", "markdown": "**\\[Line 24\\] The \\#else preprocessor directive is used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 24, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-16_1_1-c", "level": "warning", "message": { "text": "The #else preprocessor directive is used", "markdown": "**\\[Line 24\\] The \\#else preprocessor directive is used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 24, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-026", "level": "error", "message": { "text": "The #else preprocessor directive is used", "markdown": "**\\[Line 24\\] The \\#else preprocessor directive is used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 24, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-11", "level": "warning", "message": { "text": "The #else preprocessor directive is used", "markdown": "**\\[Line 24\\] The \\#else preprocessor directive is used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 24, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 30\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 30, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 30\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 30, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 30\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 30, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 30\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 30, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 30\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 30, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 30\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 30, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 30\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 30, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 30\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 30, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 30\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 30, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 30\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 30, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 35\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 35, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 35\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 35, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 35\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 35, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 35\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 35, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 35\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 35, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 35\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 35, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 35\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 35, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 35\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 35, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 35\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 35, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 35\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 35, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 37\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 37, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 37\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 37, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 37\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 37, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 37\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 37, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 37\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 37, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 37\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 37, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 37\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 37, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 37\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 37, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 37\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 37, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 37\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 37, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 39\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 39, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 39\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 39, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 39\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 39, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 39\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 39, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 39\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 39, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 39\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 39, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 39\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 39, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 39\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 39, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 39\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 39, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 39\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 39, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "PREPROC-10_b", "level": "warning", "message": { "text": "#endif pre-processor directive should not be used", "markdown": "**\\[Line 41\\] \\#endif pre\\-processor directive should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 41, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_1_d", "level": "error", "message": { "text": "#endif pre-processor directive should not be used", "markdown": "**\\[Line 41\\] \\#endif pre\\-processor directive should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 41, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-028_b", "level": "warning", "message": { "text": "#endif pre-processor directive should not be used", "markdown": "**\\[Line 41\\] \\#endif pre\\-processor directive should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 41, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-16_1_1-e", "level": "warning", "message": { "text": "#endif pre-processor directive should not be used", "markdown": "**\\[Line 41\\] \\#endif pre\\-processor directive should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 41, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-26", "level": "warning", "message": { "text": "#endif pre-processor directive should not be used", "markdown": "**\\[Line 41\\] \\#endif pre\\-processor directive should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 41, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A16_0_1-a", "level": "error", "message": { "text": "#endif pre-processor directive should not be used", "markdown": "**\\[Line 41\\] \\#endif pre\\-processor directive should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 41, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_2", "level": "error", "message": { "text": "Do not use #define to define constant: 'THREAD'", "markdown": "**\\[Line 43\\] Do not use \\#define to define constant: 'THREAD'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 43, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-12", "level": "warning", "message": { "text": "Do not use #define to define constant: 'THREAD'", "markdown": "**\\[Line 43\\] Do not use \\#define to define constant: 'THREAD'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 43, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-031", "level": "warning", "message": { "text": "Do not use the macro definition 'THREAD'", "markdown": "**\\[Line 43\\] Do not use the macro definition 'THREAD'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 43, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_1_a", "level": "error", "message": { "text": "Do not use the macro definition 'THREAD'", "markdown": "**\\[Line 43\\] Do not use the macro definition 'THREAD'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 43, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-16_1_1-a", "level": "warning", "message": { "text": "Do not use the macro definition 'THREAD'", "markdown": "**\\[Line 43\\] Do not use the macro definition 'THREAD'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 43, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-01", "level": "warning", "message": { "text": "Do not use the macro definition 'THREAD'", "markdown": "**\\[Line 43\\] Do not use the macro definition 'THREAD'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 43, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A16_0_1-d", "level": "error", "message": { "text": "Do not use the macro definition 'THREAD'", "markdown": "**\\[Line 43\\] Do not use the macro definition 'THREAD'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 43, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-14", "level": "warning", "message": { "text": "Not all body of macro 'THREAD' is enclosed in braces", "markdown": "**\\[Line 43\\] Not all body of macro 'THREAD' is enclosed in braces**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 43, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-04", "level": "warning", "message": { "text": "'THREAD_RETURN_TYPE' part of statement", "markdown": "**\\[Line 44\\] 'THREAD\\_RETURN\\_TYPE' part of statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 44, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_2", "level": "error", "message": { "text": "Do not use #define to define constant: 'THREAD_RETURN_TYPE'", "markdown": "**\\[Line 44\\] Do not use \\#define to define constant: 'THREAD\\_RETURN\\_TYPE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 44, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-12", "level": "warning", "message": { "text": "Do not use #define to define constant: 'THREAD_RETURN_TYPE'", "markdown": "**\\[Line 44\\] Do not use \\#define to define constant: 'THREAD\\_RETURN\\_TYPE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 44, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-031", "level": "warning", "message": { "text": "Do not use the macro definition 'THREAD_RETURN_TYPE'", "markdown": "**\\[Line 44\\] Do not use the macro definition 'THREAD\\_RETURN\\_TYPE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 44, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_1_a", "level": "error", "message": { "text": "Do not use the macro definition 'THREAD_RETURN_TYPE'", "markdown": "**\\[Line 44\\] Do not use the macro definition 'THREAD\\_RETURN\\_TYPE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 44, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-16_1_1-a", "level": "warning", "message": { "text": "Do not use the macro definition 'THREAD_RETURN_TYPE'", "markdown": "**\\[Line 44\\] Do not use the macro definition 'THREAD\\_RETURN\\_TYPE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 44, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-01", "level": "warning", "message": { "text": "Do not use the macro definition 'THREAD_RETURN_TYPE'", "markdown": "**\\[Line 44\\] Do not use the macro definition 'THREAD\\_RETURN\\_TYPE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 44, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A16_0_1-d", "level": "error", "message": { "text": "Do not use the macro definition 'THREAD_RETURN_TYPE'", "markdown": "**\\[Line 44\\] Do not use the macro definition 'THREAD\\_RETURN\\_TYPE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 44, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-14", "level": "warning", "message": { "text": "Not all body of macro 'THREAD_RETURN_TYPE' is enclosed in braces", "markdown": "**\\[Line 44\\] Not all body of macro 'THREAD\\_RETURN\\_TYPE' is enclosed in braces**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 44, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA-096", "level": "warning", "message": { "text": "Body of macro 'THREAD_CREATE' is defined without parentheses", "markdown": "**\\[Line 45\\] Body of macro 'THREAD\\_CREATE' is defined without parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CERT_C-PRE02-a", "level": "error", "message": { "text": "Body of macro 'THREAD_CREATE' is defined without parentheses", "markdown": "**\\[Line 45\\] Body of macro 'THREAD\\_CREATE' is defined without parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_0_4", "level": "error", "message": { "text": "Do not define function-like macro: THREAD_CREATE", "markdown": "**\\[Line 45\\] Do not define function\\-like macro: THREAD\\_CREATE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_9-a", "level": "warning", "message": { "text": "Do not define function-like macro: THREAD_CREATE", "markdown": "**\\[Line 45\\] Do not define function\\-like macro: THREAD\\_CREATE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-19_7", "level": "warning", "message": { "text": "Do not define function-like macro: THREAD_CREATE", "markdown": "**\\[Line 45\\] Do not define function\\-like macro: THREAD\\_CREATE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-029", "level": "error", "message": { "text": "Do not define function-like macro: THREAD_CREATE", "markdown": "**\\[Line 45\\] Do not define function\\-like macro: THREAD\\_CREATE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2012-DIR-4_9", "level": "warning", "message": { "text": "Do not define function-like macro: THREAD_CREATE", "markdown": "**\\[Line 45\\] Do not define function\\-like macro: THREAD\\_CREATE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CERT_C-PRE00-a", "level": "warning", "message": { "text": "Do not define function-like macro: THREAD_CREATE", "markdown": "**\\[Line 45\\] Do not define function\\-like macro: THREAD\\_CREATE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_2", "level": "error", "message": { "text": "Do not define function-like macro: THREAD_CREATE", "markdown": "**\\[Line 45\\] Do not define function\\-like macro: THREAD\\_CREATE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-12", "level": "warning", "message": { "text": "Do not define function-like macro: THREAD_CREATE", "markdown": "**\\[Line 45\\] Do not define function\\-like macro: THREAD\\_CREATE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-031", "level": "warning", "message": { "text": "Do not use the macro definition 'THREAD_CREATE'", "markdown": "**\\[Line 45\\] Do not use the macro definition 'THREAD\\_CREATE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_1_a", "level": "error", "message": { "text": "Do not use the macro definition 'THREAD_CREATE'", "markdown": "**\\[Line 45\\] Do not use the macro definition 'THREAD\\_CREATE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-16_1_1-a", "level": "warning", "message": { "text": "Do not use the macro definition 'THREAD_CREATE'", "markdown": "**\\[Line 45\\] Do not use the macro definition 'THREAD\\_CREATE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-01", "level": "warning", "message": { "text": "Do not use the macro definition 'THREAD_CREATE'", "markdown": "**\\[Line 45\\] Do not use the macro definition 'THREAD\\_CREATE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A16_0_1-d", "level": "error", "message": { "text": "Do not use the macro definition 'THREAD_CREATE'", "markdown": "**\\[Line 45\\] Do not use the macro definition 'THREAD\\_CREATE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-19_10", "level": "warning", "message": { "text": "Each instance of parameter: 'func' should be enclosed in parentheses", "markdown": "**\\[Line 45\\] Each instance of parameter: 'func' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 65, "endColumn": 66 } } } ] }, { "ruleId": "MISRA2008-16_0_6", "level": "error", "message": { "text": "Each instance of parameter: 'func' should be enclosed in parentheses", "markdown": "**\\[Line 45\\] Each instance of parameter: 'func' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 65, "endColumn": 66 } } } ] }, { "ruleId": "MISRA2012-RULE-20_7", "level": "error", "message": { "text": "Each instance of parameter: 'func' should be enclosed in parentheses", "markdown": "**\\[Line 45\\] Each instance of parameter: 'func' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 65, "endColumn": 66 } } } ] }, { "ruleId": "AUTOSAR-M16_0_6-a", "level": "error", "message": { "text": "Each instance of parameter: 'func' should be enclosed in parentheses", "markdown": "**\\[Line 45\\] Each instance of parameter: 'func' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 65, "endColumn": 66 } } } ] }, { "ruleId": "CERT_C-PRE01-a", "level": "error", "message": { "text": "Each instance of parameter: 'func' should be enclosed in parentheses", "markdown": "**\\[Line 45\\] Each instance of parameter: 'func' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 65, "endColumn": 66 } } } ] }, { "ruleId": "MISRAC2012-RULE_20_7-a", "level": "error", "message": { "text": "Each instance of parameter: 'func' should be enclosed in parentheses", "markdown": "**\\[Line 45\\] Each instance of parameter: 'func' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 65, "endColumn": 66 } } } ] }, { "ruleId": "MISRA2004-19_10", "level": "warning", "message": { "text": "Each instance of parameter: 'thread' should be enclosed in parentheses", "markdown": "**\\[Line 45\\] Each instance of parameter: 'thread' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 53, "endColumn": 54 } } } ] }, { "ruleId": "MISRA2008-16_0_6", "level": "error", "message": { "text": "Each instance of parameter: 'thread' should be enclosed in parentheses", "markdown": "**\\[Line 45\\] Each instance of parameter: 'thread' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 53, "endColumn": 54 } } } ] }, { "ruleId": "MISRA2012-RULE-20_7", "level": "error", "message": { "text": "Each instance of parameter: 'thread' should be enclosed in parentheses", "markdown": "**\\[Line 45\\] Each instance of parameter: 'thread' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 53, "endColumn": 54 } } } ] }, { "ruleId": "AUTOSAR-M16_0_6-a", "level": "error", "message": { "text": "Each instance of parameter: 'thread' should be enclosed in parentheses", "markdown": "**\\[Line 45\\] Each instance of parameter: 'thread' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 53, "endColumn": 54 } } } ] }, { "ruleId": "CERT_C-PRE01-a", "level": "error", "message": { "text": "Each instance of parameter: 'thread' should be enclosed in parentheses", "markdown": "**\\[Line 45\\] Each instance of parameter: 'thread' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 53, "endColumn": 54 } } } ] }, { "ruleId": "MISRAC2012-RULE_20_7-a", "level": "error", "message": { "text": "Each instance of parameter: 'thread' should be enclosed in parentheses", "markdown": "**\\[Line 45\\] Each instance of parameter: 'thread' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 53, "endColumn": 54 } } } ] }, { "ruleId": "PREPROC-14", "level": "warning", "message": { "text": "Not all body of macro 'THREAD_CREATE' is enclosed in braces", "markdown": "**\\[Line 45\\] Not all body of macro 'THREAD\\_CREATE' is enclosed in braces**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 45, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_2", "level": "error", "message": { "text": "Do not use #define to define constant: 'LOCK'", "markdown": "**\\[Line 47\\] Do not use \\#define to define constant: 'LOCK'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 47, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-12", "level": "warning", "message": { "text": "Do not use #define to define constant: 'LOCK'", "markdown": "**\\[Line 47\\] Do not use \\#define to define constant: 'LOCK'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 47, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-031", "level": "warning", "message": { "text": "Do not use the macro definition 'LOCK'", "markdown": "**\\[Line 47\\] Do not use the macro definition 'LOCK'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 47, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_1_a", "level": "error", "message": { "text": "Do not use the macro definition 'LOCK'", "markdown": "**\\[Line 47\\] Do not use the macro definition 'LOCK'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 47, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-16_1_1-a", "level": "warning", "message": { "text": "Do not use the macro definition 'LOCK'", "markdown": "**\\[Line 47\\] Do not use the macro definition 'LOCK'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 47, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-01", "level": "warning", "message": { "text": "Do not use the macro definition 'LOCK'", "markdown": "**\\[Line 47\\] Do not use the macro definition 'LOCK'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 47, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A16_0_1-d", "level": "error", "message": { "text": "Do not use the macro definition 'LOCK'", "markdown": "**\\[Line 47\\] Do not use the macro definition 'LOCK'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 47, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-14", "level": "warning", "message": { "text": "Not all body of macro 'LOCK' is enclosed in braces", "markdown": "**\\[Line 47\\] Not all body of macro 'LOCK' is enclosed in braces**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 47, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA-096", "level": "warning", "message": { "text": "Body of macro 'LOCK_ACQUIRE' is defined without parentheses", "markdown": "**\\[Line 48\\] Body of macro 'LOCK\\_ACQUIRE' is defined without parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 48, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CERT_C-PRE02-a", "level": "error", "message": { "text": "Body of macro 'LOCK_ACQUIRE' is defined without parentheses", "markdown": "**\\[Line 48\\] Body of macro 'LOCK\\_ACQUIRE' is defined without parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 48, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_0_4", "level": "error", "message": { "text": "Do not define function-like macro: LOCK_ACQUIRE", "markdown": "**\\[Line 48\\] Do not define function\\-like macro: LOCK\\_ACQUIRE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 48, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_9-a", "level": "warning", "message": { "text": "Do not define function-like macro: LOCK_ACQUIRE", "markdown": "**\\[Line 48\\] Do not define function\\-like macro: LOCK\\_ACQUIRE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 48, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-19_7", "level": "warning", "message": { "text": "Do not define function-like macro: LOCK_ACQUIRE", "markdown": "**\\[Line 48\\] Do not define function\\-like macro: LOCK\\_ACQUIRE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 48, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-029", "level": "error", "message": { "text": "Do not define function-like macro: LOCK_ACQUIRE", "markdown": "**\\[Line 48\\] Do not define function\\-like macro: LOCK\\_ACQUIRE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 48, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2012-DIR-4_9", "level": "warning", "message": { "text": "Do not define function-like macro: LOCK_ACQUIRE", "markdown": "**\\[Line 48\\] Do not define function\\-like macro: LOCK\\_ACQUIRE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 48, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CERT_C-PRE00-a", "level": "warning", "message": { "text": "Do not define function-like macro: LOCK_ACQUIRE", "markdown": "**\\[Line 48\\] Do not define function\\-like macro: LOCK\\_ACQUIRE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 48, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_2", "level": "error", "message": { "text": "Do not define function-like macro: LOCK_ACQUIRE", "markdown": "**\\[Line 48\\] Do not define function\\-like macro: LOCK\\_ACQUIRE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 48, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-12", "level": "warning", "message": { "text": "Do not define function-like macro: LOCK_ACQUIRE", "markdown": "**\\[Line 48\\] Do not define function\\-like macro: LOCK\\_ACQUIRE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 48, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-031", "level": "warning", "message": { "text": "Do not use the macro definition 'LOCK_ACQUIRE'", "markdown": "**\\[Line 48\\] Do not use the macro definition 'LOCK\\_ACQUIRE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 48, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_1_a", "level": "error", "message": { "text": "Do not use the macro definition 'LOCK_ACQUIRE'", "markdown": "**\\[Line 48\\] Do not use the macro definition 'LOCK\\_ACQUIRE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 48, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-16_1_1-a", "level": "warning", "message": { "text": "Do not use the macro definition 'LOCK_ACQUIRE'", "markdown": "**\\[Line 48\\] Do not use the macro definition 'LOCK\\_ACQUIRE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 48, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-01", "level": "warning", "message": { "text": "Do not use the macro definition 'LOCK_ACQUIRE'", "markdown": "**\\[Line 48\\] Do not use the macro definition 'LOCK\\_ACQUIRE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 48, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A16_0_1-d", "level": "error", "message": { "text": "Do not use the macro definition 'LOCK_ACQUIRE'", "markdown": "**\\[Line 48\\] Do not use the macro definition 'LOCK\\_ACQUIRE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 48, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-19_10", "level": "warning", "message": { "text": "Each instance of parameter: 'lock' should be enclosed in parentheses", "markdown": "**\\[Line 48\\] Each instance of parameter: 'lock' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 48, "startColumn": 48, "endColumn": 49 } } } ] }, { "ruleId": "MISRA2008-16_0_6", "level": "error", "message": { "text": "Each instance of parameter: 'lock' should be enclosed in parentheses", "markdown": "**\\[Line 48\\] Each instance of parameter: 'lock' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 48, "startColumn": 48, "endColumn": 49 } } } ] }, { "ruleId": "MISRA2012-RULE-20_7", "level": "error", "message": { "text": "Each instance of parameter: 'lock' should be enclosed in parentheses", "markdown": "**\\[Line 48\\] Each instance of parameter: 'lock' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 48, "startColumn": 48, "endColumn": 49 } } } ] }, { "ruleId": "AUTOSAR-M16_0_6-a", "level": "error", "message": { "text": "Each instance of parameter: 'lock' should be enclosed in parentheses", "markdown": "**\\[Line 48\\] Each instance of parameter: 'lock' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 48, "startColumn": 48, "endColumn": 49 } } } ] }, { "ruleId": "CERT_C-PRE01-a", "level": "error", "message": { "text": "Each instance of parameter: 'lock' should be enclosed in parentheses", "markdown": "**\\[Line 48\\] Each instance of parameter: 'lock' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 48, "startColumn": 48, "endColumn": 49 } } } ] }, { "ruleId": "MISRAC2012-RULE_20_7-a", "level": "error", "message": { "text": "Each instance of parameter: 'lock' should be enclosed in parentheses", "markdown": "**\\[Line 48\\] Each instance of parameter: 'lock' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 48, "startColumn": 48, "endColumn": 49 } } } ] }, { "ruleId": "PREPROC-14", "level": "warning", "message": { "text": "Not all body of macro 'LOCK_ACQUIRE' is enclosed in braces", "markdown": "**\\[Line 48\\] Not all body of macro 'LOCK\\_ACQUIRE' is enclosed in braces**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 48, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA-096", "level": "warning", "message": { "text": "Body of macro 'LOCK_RELEASE' is defined without parentheses", "markdown": "**\\[Line 49\\] Body of macro 'LOCK\\_RELEASE' is defined without parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 49, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CERT_C-PRE02-a", "level": "error", "message": { "text": "Body of macro 'LOCK_RELEASE' is defined without parentheses", "markdown": "**\\[Line 49\\] Body of macro 'LOCK\\_RELEASE' is defined without parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 49, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_0_4", "level": "error", "message": { "text": "Do not define function-like macro: LOCK_RELEASE", "markdown": "**\\[Line 49\\] Do not define function\\-like macro: LOCK\\_RELEASE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 49, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_9-a", "level": "warning", "message": { "text": "Do not define function-like macro: LOCK_RELEASE", "markdown": "**\\[Line 49\\] Do not define function\\-like macro: LOCK\\_RELEASE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 49, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-19_7", "level": "warning", "message": { "text": "Do not define function-like macro: LOCK_RELEASE", "markdown": "**\\[Line 49\\] Do not define function\\-like macro: LOCK\\_RELEASE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 49, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-029", "level": "error", "message": { "text": "Do not define function-like macro: LOCK_RELEASE", "markdown": "**\\[Line 49\\] Do not define function\\-like macro: LOCK\\_RELEASE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 49, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2012-DIR-4_9", "level": "warning", "message": { "text": "Do not define function-like macro: LOCK_RELEASE", "markdown": "**\\[Line 49\\] Do not define function\\-like macro: LOCK\\_RELEASE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 49, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CERT_C-PRE00-a", "level": "warning", "message": { "text": "Do not define function-like macro: LOCK_RELEASE", "markdown": "**\\[Line 49\\] Do not define function\\-like macro: LOCK\\_RELEASE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 49, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_2", "level": "error", "message": { "text": "Do not define function-like macro: LOCK_RELEASE", "markdown": "**\\[Line 49\\] Do not define function\\-like macro: LOCK\\_RELEASE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 49, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-12", "level": "warning", "message": { "text": "Do not define function-like macro: LOCK_RELEASE", "markdown": "**\\[Line 49\\] Do not define function\\-like macro: LOCK\\_RELEASE**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 49, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-031", "level": "warning", "message": { "text": "Do not use the macro definition 'LOCK_RELEASE'", "markdown": "**\\[Line 49\\] Do not use the macro definition 'LOCK\\_RELEASE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 49, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_1_a", "level": "error", "message": { "text": "Do not use the macro definition 'LOCK_RELEASE'", "markdown": "**\\[Line 49\\] Do not use the macro definition 'LOCK\\_RELEASE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 49, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-16_1_1-a", "level": "warning", "message": { "text": "Do not use the macro definition 'LOCK_RELEASE'", "markdown": "**\\[Line 49\\] Do not use the macro definition 'LOCK\\_RELEASE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 49, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-01", "level": "warning", "message": { "text": "Do not use the macro definition 'LOCK_RELEASE'", "markdown": "**\\[Line 49\\] Do not use the macro definition 'LOCK\\_RELEASE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 49, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A16_0_1-d", "level": "error", "message": { "text": "Do not use the macro definition 'LOCK_RELEASE'", "markdown": "**\\[Line 49\\] Do not use the macro definition 'LOCK\\_RELEASE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 49, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-19_10", "level": "warning", "message": { "text": "Each instance of parameter: 'lock' should be enclosed in parentheses", "markdown": "**\\[Line 49\\] Each instance of parameter: 'lock' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 49, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "MISRA2008-16_0_6", "level": "error", "message": { "text": "Each instance of parameter: 'lock' should be enclosed in parentheses", "markdown": "**\\[Line 49\\] Each instance of parameter: 'lock' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 49, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "MISRA2012-RULE-20_7", "level": "error", "message": { "text": "Each instance of parameter: 'lock' should be enclosed in parentheses", "markdown": "**\\[Line 49\\] Each instance of parameter: 'lock' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 49, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "AUTOSAR-M16_0_6-a", "level": "error", "message": { "text": "Each instance of parameter: 'lock' should be enclosed in parentheses", "markdown": "**\\[Line 49\\] Each instance of parameter: 'lock' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 49, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "CERT_C-PRE01-a", "level": "error", "message": { "text": "Each instance of parameter: 'lock' should be enclosed in parentheses", "markdown": "**\\[Line 49\\] Each instance of parameter: 'lock' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 49, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "MISRAC2012-RULE_20_7-a", "level": "error", "message": { "text": "Each instance of parameter: 'lock' should be enclosed in parentheses", "markdown": "**\\[Line 49\\] Each instance of parameter: 'lock' should be enclosed in parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 49, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "PREPROC-14", "level": "warning", "message": { "text": "Not all body of macro 'LOCK_RELEASE' is enclosed in braces", "markdown": "**\\[Line 49\\] Not all body of macro 'LOCK\\_RELEASE' is enclosed in braces**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 49, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA-096", "level": "warning", "message": { "text": "Body of macro 'SLEEP' is defined without parentheses", "markdown": "**\\[Line 51\\] Body of macro 'SLEEP' is defined without parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 51, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CERT_C-PRE02-a", "level": "error", "message": { "text": "Body of macro 'SLEEP' is defined without parentheses", "markdown": "**\\[Line 51\\] Body of macro 'SLEEP' is defined without parentheses**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 51, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_0_4", "level": "error", "message": { "text": "Do not define function-like macro: SLEEP", "markdown": "**\\[Line 51\\] Do not define function\\-like macro: SLEEP**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 51, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_9-a", "level": "warning", "message": { "text": "Do not define function-like macro: SLEEP", "markdown": "**\\[Line 51\\] Do not define function\\-like macro: SLEEP**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 51, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-19_7", "level": "warning", "message": { "text": "Do not define function-like macro: SLEEP", "markdown": "**\\[Line 51\\] Do not define function\\-like macro: SLEEP**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 51, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-029", "level": "error", "message": { "text": "Do not define function-like macro: SLEEP", "markdown": "**\\[Line 51\\] Do not define function\\-like macro: SLEEP**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 51, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2012-DIR-4_9", "level": "warning", "message": { "text": "Do not define function-like macro: SLEEP", "markdown": "**\\[Line 51\\] Do not define function\\-like macro: SLEEP**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 51, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CERT_C-PRE00-a", "level": "warning", "message": { "text": "Do not define function-like macro: SLEEP", "markdown": "**\\[Line 51\\] Do not define function\\-like macro: SLEEP**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 51, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_2", "level": "error", "message": { "text": "Do not define function-like macro: SLEEP", "markdown": "**\\[Line 51\\] Do not define function\\-like macro: SLEEP**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 51, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-12", "level": "warning", "message": { "text": "Do not define function-like macro: SLEEP", "markdown": "**\\[Line 51\\] Do not define function\\-like macro: SLEEP**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 51, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-031", "level": "warning", "message": { "text": "Do not use the macro definition 'SLEEP'", "markdown": "**\\[Line 51\\] Do not use the macro definition 'SLEEP'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 51, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_1_a", "level": "error", "message": { "text": "Do not use the macro definition 'SLEEP'", "markdown": "**\\[Line 51\\] Do not use the macro definition 'SLEEP'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 51, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-16_1_1-a", "level": "warning", "message": { "text": "Do not use the macro definition 'SLEEP'", "markdown": "**\\[Line 51\\] Do not use the macro definition 'SLEEP'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 51, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-01", "level": "warning", "message": { "text": "Do not use the macro definition 'SLEEP'", "markdown": "**\\[Line 51\\] Do not use the macro definition 'SLEEP'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 51, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A16_0_1-d", "level": "error", "message": { "text": "Do not use the macro definition 'SLEEP'", "markdown": "**\\[Line 51\\] Do not use the macro definition 'SLEEP'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 51, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-14", "level": "warning", "message": { "text": "Not all body of macro 'SLEEP' is enclosed in braces", "markdown": "**\\[Line 51\\] Not all body of macro 'SLEEP' is enclosed in braces**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 51, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-10_b", "level": "warning", "message": { "text": "#endif pre-processor directive should not be used", "markdown": "**\\[Line 53\\] \\#endif pre\\-processor directive should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 53, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_1_d", "level": "error", "message": { "text": "#endif pre-processor directive should not be used", "markdown": "**\\[Line 53\\] \\#endif pre\\-processor directive should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 53, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-028_b", "level": "warning", "message": { "text": "#endif pre-processor directive should not be used", "markdown": "**\\[Line 53\\] \\#endif pre\\-processor directive should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 53, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-16_1_1-e", "level": "warning", "message": { "text": "#endif pre-processor directive should not be used", "markdown": "**\\[Line 53\\] \\#endif pre\\-processor directive should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 53, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-030", "level": "error", "message": { "text": "Define constant 'MAX_OBJECTS' using 'const' or 'enum' instead of '#define'", "markdown": "**\\[Line 55\\] Define constant 'MAX\\_OBJECTS' using 'const' or 'enum' instead of '\\#define'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 55, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CODSTA-03", "level": "warning", "message": { "text": "Define constant 'MAX_OBJECTS' using 'const' or 'enum' instead of '#define'", "markdown": "**\\[Line 55\\] Define constant 'MAX\\_OBJECTS' using 'const' or 'enum' instead of '\\#define'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 55, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_2", "level": "error", "message": { "text": "Do not use #define to define constant: 'MAX_OBJECTS'", "markdown": "**\\[Line 55\\] Do not use \\#define to define constant: 'MAX\\_OBJECTS'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 55, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-12", "level": "warning", "message": { "text": "Do not use #define to define constant: 'MAX_OBJECTS'", "markdown": "**\\[Line 55\\] Do not use \\#define to define constant: 'MAX\\_OBJECTS'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 55, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-031", "level": "warning", "message": { "text": "Do not use the macro definition 'MAX_OBJECTS'", "markdown": "**\\[Line 55\\] Do not use the macro definition 'MAX\\_OBJECTS'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 55, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_1_a", "level": "error", "message": { "text": "Do not use the macro definition 'MAX_OBJECTS'", "markdown": "**\\[Line 55\\] Do not use the macro definition 'MAX\\_OBJECTS'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 55, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-16_1_1-a", "level": "warning", "message": { "text": "Do not use the macro definition 'MAX_OBJECTS'", "markdown": "**\\[Line 55\\] Do not use the macro definition 'MAX\\_OBJECTS'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 55, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-01", "level": "warning", "message": { "text": "Do not use the macro definition 'MAX_OBJECTS'", "markdown": "**\\[Line 55\\] Do not use the macro definition 'MAX\\_OBJECTS'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 55, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A16_0_1-d", "level": "error", "message": { "text": "Do not use the macro definition 'MAX_OBJECTS'", "markdown": "**\\[Line 55\\] Do not use the macro definition 'MAX\\_OBJECTS'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 55, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CODSTA-37", "level": "warning", "message": { "text": "Replace the 'MAX_OBJECTS' macro with a constant variable", "markdown": "**\\[Line 55\\] Replace the 'MAX\\_OBJECTS' macro with a constant variable**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 55, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-030", "level": "error", "message": { "text": "Define constant 'STEP' using 'const' or 'enum' instead of '#define'", "markdown": "**\\[Line 56\\] Define constant 'STEP' using 'const' or 'enum' instead of '\\#define'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 56, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CODSTA-03", "level": "warning", "message": { "text": "Define constant 'STEP' using 'const' or 'enum' instead of '#define'", "markdown": "**\\[Line 56\\] Define constant 'STEP' using 'const' or 'enum' instead of '\\#define'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 56, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_2", "level": "error", "message": { "text": "Do not use #define to define constant: 'STEP'", "markdown": "**\\[Line 56\\] Do not use \\#define to define constant: 'STEP'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 56, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-12", "level": "warning", "message": { "text": "Do not use #define to define constant: 'STEP'", "markdown": "**\\[Line 56\\] Do not use \\#define to define constant: 'STEP'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 56, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-031", "level": "warning", "message": { "text": "Do not use the macro definition 'STEP'", "markdown": "**\\[Line 56\\] Do not use the macro definition 'STEP'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 56, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-16_2_1_a", "level": "error", "message": { "text": "Do not use the macro definition 'STEP'", "markdown": "**\\[Line 56\\] Do not use the macro definition 'STEP'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 56, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-16_1_1-a", "level": "warning", "message": { "text": "Do not use the macro definition 'STEP'", "markdown": "**\\[Line 56\\] Do not use the macro definition 'STEP'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 56, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-01", "level": "warning", "message": { "text": "Do not use the macro definition 'STEP'", "markdown": "**\\[Line 56\\] Do not use the macro definition 'STEP'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 56, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A16_0_1-d", "level": "error", "message": { "text": "Do not use the macro definition 'STEP'", "markdown": "**\\[Line 56\\] Do not use the macro definition 'STEP'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 56, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CODSTA-37", "level": "warning", "message": { "text": "Replace the 'STEP' macro with a constant variable", "markdown": "**\\[Line 56\\] Replace the 'STEP' macro with a constant variable**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 56, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PORT-13", "level": "warning", "message": { "text": "'condition' shall be declared as unsigned int or signed int", "markdown": "**\\[Line 58\\] 'condition' shall be declared as unsigned int or signed int**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "JSF-098", "level": "warning", "message": { "text": "Do not declare the 'assertion' function in the global namespace", "markdown": "**\\[Line 58\\] Do not declare the 'assertion' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-M7_3_1-a", "level": "error", "message": { "text": "Do not declare the 'assertion' function in the global namespace", "markdown": "**\\[Line 58\\] Do not declare the 'assertion' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "CODSTA-CPP-36", "level": "warning", "message": { "text": "Do not declare the 'assertion' function in the global namespace", "markdown": "**\\[Line 58\\] Do not declare the 'assertion' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2008-7_3_1", "level": "error", "message": { "text": "Do not declare the 'assertion' function in the global namespace", "markdown": "**\\[Line 58\\] Do not declare the 'assertion' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 58\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 16, "endColumn": 17 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'assertion' has Cyclomatic Complexity value: 2", "markdown": "**\\[Line 58\\] Function 'assertion' has Cyclomatic Complexity value: 2**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'assertion' has Essential Complexity value: 1", "markdown": "**\\[Line 58\\] Function 'assertion' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "OWASP2019-API9-e", "level": "warning", "message": { "text": "Function 'assertion' has external linkage and is not declared in the header", "markdown": "**\\[Line 58\\] Function 'assertion' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-A3_3_1-a", "level": "error", "message": { "text": "Function 'assertion' has external linkage and is not declared in the header", "markdown": "**\\[Line 58\\] Function 'assertion' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "JSF-137", "level": "warning", "message": { "text": "Function 'assertion' has external linkage and is not declared in the header", "markdown": "**\\[Line 58\\] Function 'assertion' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA-023", "level": "warning", "message": { "text": "Function 'assertion' has external linkage and is not declared in the header", "markdown": "**\\[Line 58\\] Function 'assertion' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2008-3_3_1", "level": "error", "message": { "text": "Function 'assertion' has external linkage and is not declared in the header", "markdown": "**\\[Line 58\\] Function 'assertion' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "CERT_C-DCL15-a", "level": "warning", "message": { "text": "Function 'assertion' has external linkage and is not declared in the header", "markdown": "**\\[Line 58\\] Function 'assertion' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2004-8_10", "level": "warning", "message": { "text": "Function 'assertion' has external linkage and is not declared in the header", "markdown": "**\\[Line 58\\] Function 'assertion' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "NAMING-17", "level": "warning", "message": { "text": "Naming convention not followed: assertion", "markdown": "**\\[Line 58\\] Naming convention not followed: assertion**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "CERT_C-API00-a", "level": "warning", "message": { "text": "Parameter 'message' is not validated before use", "markdown": "**\\[Line 58\\] Parameter 'message' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "CODSTA-86", "level": "warning", "message": { "text": "Parameter 'message' is not validated before use", "markdown": "**\\[Line 58\\] Parameter 'message' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "FORMAT-28", "level": "warning", "message": { "text": "Return type is not placed in line before function 'assertion'", "markdown": "**\\[Line 58\\] Return type is not placed in line before function 'assertion'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'assertion' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 58\\] The 'assertion' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'assertion' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 58\\] The 'assertion' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "NAMING-HN-22", "level": "warning", "message": { "text": "The 'condition' identifier should have the 'i' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 58\\] The 'condition' identifier should have the 'i' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "NAMING-HN-43", "level": "warning", "message": { "text": "The 'condition' identifier should have the 'i' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 58\\] The 'condition' identifier should have the 'i' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "NAMING-HN-30", "level": "warning", "message": { "text": "The 'condition' identifier should have the 'n' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 58\\] The 'condition' identifier should have the 'n' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'condition' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 58\\] The 'condition' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'condition' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 58\\] The 'condition' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "FORMAT-47_a", "level": "warning", "message": { "text": "The 'const' qualifier should be placed on the right hand side of the type", "markdown": "**\\[Line 58\\] The 'const' qualifier should be placed on the right hand side of the type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "HICPP-7_1_4-a", "level": "warning", "message": { "text": "The 'const' qualifier should be placed on the right hand side of the type", "markdown": "**\\[Line 58\\] The 'const' qualifier should be placed on the right hand side of the type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "NAMING-HN-05", "level": "warning", "message": { "text": "The 'message' identifier should have the 'c' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 58\\] The 'message' identifier should have the 'c' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "NAMING-HN-09", "level": "warning", "message": { "text": "The 'message' identifier should have the 'c' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 58\\] The 'message' identifier should have the 'c' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "NAMING-HN-10", "level": "warning", "message": { "text": "The 'message' identifier should have the 'c' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 58\\] The 'message' identifier should have the 'c' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "NAMING-HN-34", "level": "warning", "message": { "text": "The 'message' identifier should have the 'p' prefix", "markdown": "**\\[Line 58\\] The 'message' identifier should have the 'p' prefix**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'message' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 58\\] The 'message' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'message' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 58\\] The 'message' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'char' should not be used", "markdown": "**\\[Line 58\\] The basic numerical type 'char' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 37, "endColumn": 38 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'char' should not be used", "markdown": "**\\[Line 58\\] The basic numerical type 'char' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 37, "endColumn": 38 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 58\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 16, "endColumn": 17 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 58\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 16, "endColumn": 17 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 58\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 16, "endColumn": 17 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 58\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 16, "endColumn": 17 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 58\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 16, "endColumn": 17 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 58\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 16, "endColumn": 17 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 58\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 16, "endColumn": 17 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'assertion' function is not preceded by a comment", "markdown": "**\\[Line 58\\] The definition of the 'assertion' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'assertion' function is not preceded by a comment", "markdown": "**\\[Line 58\\] The definition of the 'assertion' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The parameter of pointer or array type is declared: message", "markdown": "**\\[Line 58\\] The parameter of pointer or array type is declared: message**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The parameter of pointer type is declared: message", "markdown": "**\\[Line 58\\] The parameter of pointer type is declared: message**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 58\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 16, "endColumn": 17 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 58\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 58, "startColumn": 16, "endColumn": 17 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 59\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 59, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CODSTA-46", "level": "note", "message": { "text": "In 'assertion' function use positive logic rather than negative logic whenever possible", "markdown": "**\\[Line 60\\] In 'assertion' function use positive logic rather than negative logic whenever possible**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 60, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 60\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 60, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 60\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 60, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 60\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 60, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-43", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 60\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 60, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_b", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 60\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 60, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 60\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 60, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 60\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 60, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 60\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 60, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-02", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 60\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 60, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CODSTA-23", "level": "warning", "message": { "text": "The 'if' statement doesn't have an 'else' clause", "markdown": "**\\[Line 60\\] The 'if' statement doesn't have an 'else' clause**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 60, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "AUTOSAR-M5_3_1-a", "level": "error", "message": { "text": "The operand of logical operator '!' has 'int' type instead of 'bool' type", "markdown": "**\\[Line 60\\] The operand of logical operator '\\!' has 'int' type instead of 'bool' type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 60, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "CODSTA-CPP-67", "level": "warning", "message": { "text": "The operand of logical operator '!' has 'int' type instead of 'bool' type", "markdown": "**\\[Line 60\\] The operand of logical operator '\\!' has 'int' type instead of 'bool' type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 60, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2008-5_3_1", "level": "error", "message": { "text": "The operand of logical operator '!' has 'int' type instead of 'bool' type", "markdown": "**\\[Line 60\\] The operand of logical operator '\\!' has 'int' type instead of 'bool' type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 60, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2004-12_6_a", "level": "warning", "message": { "text": "The operand of logical operator '!' is not 'effectively Boolean'", "markdown": "**\\[Line 60\\] The operand of logical operator '\\!' is not 'effectively Boolean'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 60, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2008-15_0_2", "level": "warning", "message": { "text": "Exception of type 'const char *' is thrown by pointer; throw by value instead", "markdown": "**\\[Line 61\\] Exception of type 'const char \\*' is thrown by pointer; throw by value instead**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 61, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "AUTOSAR-A15_1_2-a", "level": "error", "message": { "text": "Exception of type 'const char *' is thrown by pointer; throw by value instead", "markdown": "**\\[Line 61\\] Exception of type 'const char \\*' is thrown by pointer; throw by value instead**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 61, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "EXCEPT-09", "level": "warning", "message": { "text": "Exception of type 'const char *' is thrown by pointer; throw by value instead", "markdown": "**\\[Line 61\\] Exception of type 'const char \\*' is thrown by pointer; throw by value instead**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 61, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 61\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 61, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 61\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 61, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 61\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 61, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 61\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 61, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 61\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 61, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 61\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 61, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "AUTOSAR-A15_1_1-a", "level": "warning", "message": { "text": "Throw only instances of std::exception", "markdown": "**\\[Line 61\\] Throw only instances of std::exception**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 61, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "HICPP-15_1_1-a", "level": "warning", "message": { "text": "Throw only instances of std::exception", "markdown": "**\\[Line 61\\] Throw only instances of std::exception**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 61, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "JSF-208", "level": "error", "message": { "text": "c++ exception handling structure is used in function 'assertion'", "markdown": "**\\[Line 61\\] c\\+\\+ exception handling structure is used in function 'assertion'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 61, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "EXCEPT-05", "level": "error", "message": { "text": "c++ exception handling structure is used in function 'assertion'", "markdown": "**\\[Line 61\\] c\\+\\+ exception handling structure is used in function 'assertion'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 61, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 62\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 62, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 62\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 62, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 62\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 62, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CODSTA-CPP-18", "level": "note", "message": { "text": "'changePositionMutex' should be encapsulated in a class", "markdown": "**\\[Line 65\\] 'changePositionMutex' should be encapsulated in a class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 65, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "JSF-098", "level": "warning", "message": { "text": "Do not declare the 'changePositionMutex' variable in the global namespace", "markdown": "**\\[Line 65\\] Do not declare the 'changePositionMutex' variable in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 65, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "AUTOSAR-M7_3_1-a", "level": "error", "message": { "text": "Do not declare the 'changePositionMutex' variable in the global namespace", "markdown": "**\\[Line 65\\] Do not declare the 'changePositionMutex' variable in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 65, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "CODSTA-CPP-36", "level": "warning", "message": { "text": "Do not declare the 'changePositionMutex' variable in the global namespace", "markdown": "**\\[Line 65\\] Do not declare the 'changePositionMutex' variable in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 65, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "MISRA2008-7_3_1", "level": "error", "message": { "text": "Do not declare the 'changePositionMutex' variable in the global namespace", "markdown": "**\\[Line 65\\] Do not declare the 'changePositionMutex' variable in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 65, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "JSF-207", "level": "warning", "message": { "text": "Do not define the 'changePositionMutex' global variable", "markdown": "**\\[Line 65\\] Do not define the 'changePositionMutex' global variable**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 65, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "CODSTA-CPP-82", "level": "warning", "message": { "text": "Do not define the 'changePositionMutex' global variable", "markdown": "**\\[Line 65\\] Do not define the 'changePositionMutex' global variable**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 65, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "MISRA-022", "level": "note", "message": { "text": "Global variable 'changePositionMutex' is declared", "markdown": "**\\[Line 65\\] Global variable 'changePositionMutex' is declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 65, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "NAMING-18", "level": "warning", "message": { "text": "Naming convention not followed: changePositionMutex", "markdown": "**\\[Line 65\\] Naming convention not followed: changePositionMutex**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 65, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "NAMING-HN-38", "level": "warning", "message": { "text": "The 'changePositionMutex' identifier should have the 's' prefix", "markdown": "**\\[Line 65\\] The 'changePositionMutex' identifier should have the 's' prefix**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 65, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'changePositionMutex' variable should be commented", "markdown": "**\\[Line 65\\] The 'changePositionMutex' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 65, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'changePositionMutex' variable should be commented", "markdown": "**\\[Line 65\\] The 'changePositionMutex' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 65, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "HICPP-7_4_1-a", "level": "warning", "message": { "text": "The 'static' keyword is used in 'changePositionMutex' variable declaration", "markdown": "**\\[Line 65\\] The 'static' keyword is used in 'changePositionMutex' variable declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 65, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "CODSTA-CPP-50", "level": "warning", "message": { "text": "The 'static' keyword is used in 'changePositionMutex' variable declaration", "markdown": "**\\[Line 65\\] The 'static' keyword is used in 'changePositionMutex' variable declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 65, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'changePositionMutex' should be composed only of lowercase letters", "markdown": "**\\[Line 65\\] The name 'changePositionMutex' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 65, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'changePositionMutex' should be composed only of lowercase letters", "markdown": "**\\[Line 65\\] The name 'changePositionMutex' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 65, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "HICPP-3_3_1-a", "level": "warning", "message": { "text": "Use of variable \"changePositionMutex\" with static storage duration is not allowed", "markdown": "**\\[Line 65\\] Use of variable \"changePositionMutex\" with static storage duration is not allowed**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 65, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "CODSTA-CPP-18", "level": "note", "message": { "text": "'ring' should be encapsulated in a class", "markdown": "**\\[Line 67\\] 'ring' should be encapsulated in a class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "PORT-16", "level": "warning", "message": { "text": "Argument type conversion from \"shorter\" type to \"longer\" type", "markdown": "**\\[Line 67\\] Argument type conversion from \"shorter\" type to \"longer\" type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-098", "level": "warning", "message": { "text": "Do not declare the 'ring' variable in the global namespace", "markdown": "**\\[Line 67\\] Do not declare the 'ring' variable in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-M7_3_1-a", "level": "error", "message": { "text": "Do not declare the 'ring' variable in the global namespace", "markdown": "**\\[Line 67\\] Do not declare the 'ring' variable in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CODSTA-CPP-36", "level": "warning", "message": { "text": "Do not declare the 'ring' variable in the global namespace", "markdown": "**\\[Line 67\\] Do not declare the 'ring' variable in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2008-7_3_1", "level": "error", "message": { "text": "Do not declare the 'ring' variable in the global namespace", "markdown": "**\\[Line 67\\] Do not declare the 'ring' variable in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-207", "level": "warning", "message": { "text": "Do not define the 'ring' global variable", "markdown": "**\\[Line 67\\] Do not define the 'ring' global variable**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CODSTA-CPP-82", "level": "warning", "message": { "text": "Do not define the 'ring' global variable", "markdown": "**\\[Line 67\\] Do not define the 'ring' global variable**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "OWASP2019-API9-e", "level": "warning", "message": { "text": "Global variable 'ring' has external linkage and is not declared in the header", "markdown": "**\\[Line 67\\] Global variable 'ring' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A3_3_1-a", "level": "error", "message": { "text": "Global variable 'ring' has external linkage and is not declared in the header", "markdown": "**\\[Line 67\\] Global variable 'ring' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-137", "level": "warning", "message": { "text": "Global variable 'ring' has external linkage and is not declared in the header", "markdown": "**\\[Line 67\\] Global variable 'ring' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA-023", "level": "warning", "message": { "text": "Global variable 'ring' has external linkage and is not declared in the header", "markdown": "**\\[Line 67\\] Global variable 'ring' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2008-3_3_1", "level": "error", "message": { "text": "Global variable 'ring' has external linkage and is not declared in the header", "markdown": "**\\[Line 67\\] Global variable 'ring' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CERT_C-DCL15-a", "level": "warning", "message": { "text": "Global variable 'ring' has external linkage and is not declared in the header", "markdown": "**\\[Line 67\\] Global variable 'ring' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2004-8_10", "level": "warning", "message": { "text": "Global variable 'ring' has external linkage and is not declared in the header", "markdown": "**\\[Line 67\\] Global variable 'ring' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA-022", "level": "note", "message": { "text": "Global variable 'ring' is declared", "markdown": "**\\[Line 67\\] Global variable 'ring' is declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2008-5_0_5_b", "level": "error", "message": { "text": "Implicit conversion from integral to floating type in function's argument", "markdown": "**\\[Line 67\\] Implicit conversion from integral to floating type in function's argument**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "CERT_C-EXP39-a", "level": "warning", "message": { "text": "Implicit conversion from integral to floating type in function's argument", "markdown": "**\\[Line 67\\] Implicit conversion from integral to floating type in function's argument**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "AUTOSAR-M5_0_5-a", "level": "error", "message": { "text": "Implicit conversion from integral to floating type in function's argument", "markdown": "**\\[Line 67\\] Implicit conversion from integral to floating type in function's argument**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "MISRA2004-10_1_b", "level": "warning", "message": { "text": "Implicit conversion from integral to floating type in function's argument", "markdown": "**\\[Line 67\\] Implicit conversion from integral to floating type in function's argument**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "NAMING-18", "level": "warning", "message": { "text": "Naming convention not followed: ring", "markdown": "**\\[Line 67\\] Naming convention not followed: ring**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-M15_3_1-a", "level": "error", "message": { "text": "The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe", "markdown": "**\\[Line 67\\] The 'Point' constructor called during the creation of the 'ring' object should be declared as exception\\-safe**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CERT_CPP-ERR58-a", "level": "error", "message": { "text": "The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe", "markdown": "**\\[Line 67\\] The 'Point' constructor called during the creation of the 'ring' object should be declared as exception\\-safe**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2008-15_3_1", "level": "error", "message": { "text": "The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe", "markdown": "**\\[Line 67\\] The 'Point' constructor called during the creation of the 'ring' object should be declared as exception\\-safe**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A15_5_3-f", "level": "error", "message": { "text": "The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe", "markdown": "**\\[Line 67\\] The 'Point' constructor called during the creation of the 'ring' object should be declared as exception\\-safe**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CERT_CPP-ERR50-f", "level": "warning", "message": { "text": "The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe", "markdown": "**\\[Line 67\\] The 'Point' constructor called during the creation of the 'ring' object should be declared as exception\\-safe**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "EXCEPT-08", "level": "warning", "message": { "text": "The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe", "markdown": "**\\[Line 67\\] The 'Point' constructor called during the creation of the 'ring' object should be declared as exception\\-safe**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2008-15_5_3_f", "level": "error", "message": { "text": "The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe", "markdown": "**\\[Line 67\\] The 'Point' constructor called during the creation of the 'ring' object should be declared as exception\\-safe**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'ring' variable should be commented", "markdown": "**\\[Line 67\\] The 'ring' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'ring' variable should be commented", "markdown": "**\\[Line 67\\] The 'ring' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A3_3_2-a", "level": "error", "message": { "text": "The declaration of variable 'ring' contains a non-constant initializer", "markdown": "**\\[Line 67\\] The declaration of variable 'ring' contains a non\\-constant initializer**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CODSTA-MCPP-32", "level": "warning", "message": { "text": "The declaration of variable 'ring' contains a non-constant initializer", "markdown": "**\\[Line 67\\] The declaration of variable 'ring' contains a non\\-constant initializer**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A8_5_2-a", "level": "error", "message": { "text": "The definition of the 'ring' variable should contain a braced initializer", "markdown": "**\\[Line 67\\] The definition of the 'ring' variable should contain a braced initializer**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CODSTA-MCPP-38", "level": "warning", "message": { "text": "The definition of the 'ring' variable should contain a braced initializer", "markdown": "**\\[Line 67\\] The definition of the 'ring' variable should contain a braced initializer**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "PB-11", "level": "warning", "message": { "text": "The type 'int' of function argument number '2' does not match declared type 'double'", "markdown": "**\\[Line 67\\] The type 'int' of function argument number '2' does not match declared type 'double'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "HICPP-3_3_1-a", "level": "warning", "message": { "text": "Use of variable \"ring\" with static storage duration is not allowed", "markdown": "**\\[Line 67\\] Use of variable \"ring\" with static storage duration is not allowed**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "HICPP-7_1_8-a", "level": "warning", "message": { "text": "Variable 'ring' should be declared using 'auto' specifier", "markdown": "**\\[Line 67\\] Variable 'ring' should be declared using 'auto' specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 67, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CODSTA-CPP-18", "level": "note", "message": { "text": "'participants' should be encapsulated in a class", "markdown": "**\\[Line 68\\] 'participants' should be encapsulated in a class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "HICPP-8_1_1-a", "level": "warning", "message": { "text": "Declaration of variable 'participants' contains more than one level of pointer indirection", "markdown": "**\\[Line 68\\] Declaration of variable 'participants' contains more than one level of pointer indirection**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CODSTA-89", "level": "warning", "message": { "text": "Declaration of variable 'participants' contains more than one level of pointer indirection", "markdown": "**\\[Line 68\\] Declaration of variable 'participants' contains more than one level of pointer indirection**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-098", "level": "warning", "message": { "text": "Do not declare the 'participants' variable in the global namespace", "markdown": "**\\[Line 68\\] Do not declare the 'participants' variable in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-M7_3_1-a", "level": "error", "message": { "text": "Do not declare the 'participants' variable in the global namespace", "markdown": "**\\[Line 68\\] Do not declare the 'participants' variable in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CODSTA-CPP-36", "level": "warning", "message": { "text": "Do not declare the 'participants' variable in the global namespace", "markdown": "**\\[Line 68\\] Do not declare the 'participants' variable in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2008-7_3_1", "level": "error", "message": { "text": "Do not declare the 'participants' variable in the global namespace", "markdown": "**\\[Line 68\\] Do not declare the 'participants' variable in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-207", "level": "warning", "message": { "text": "Do not define the 'participants' global variable", "markdown": "**\\[Line 68\\] Do not define the 'participants' global variable**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CODSTA-CPP-82", "level": "warning", "message": { "text": "Do not define the 'participants' global variable", "markdown": "**\\[Line 68\\] Do not define the 'participants' global variable**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "OWASP2019-API9-e", "level": "warning", "message": { "text": "Global variable 'participants' has external linkage and is not declared in the header", "markdown": "**\\[Line 68\\] Global variable 'participants' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A3_3_1-a", "level": "error", "message": { "text": "Global variable 'participants' has external linkage and is not declared in the header", "markdown": "**\\[Line 68\\] Global variable 'participants' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-137", "level": "warning", "message": { "text": "Global variable 'participants' has external linkage and is not declared in the header", "markdown": "**\\[Line 68\\] Global variable 'participants' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA-023", "level": "warning", "message": { "text": "Global variable 'participants' has external linkage and is not declared in the header", "markdown": "**\\[Line 68\\] Global variable 'participants' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2008-3_3_1", "level": "error", "message": { "text": "Global variable 'participants' has external linkage and is not declared in the header", "markdown": "**\\[Line 68\\] Global variable 'participants' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CERT_C-DCL15-a", "level": "warning", "message": { "text": "Global variable 'participants' has external linkage and is not declared in the header", "markdown": "**\\[Line 68\\] Global variable 'participants' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2004-8_10", "level": "warning", "message": { "text": "Global variable 'participants' has external linkage and is not declared in the header", "markdown": "**\\[Line 68\\] Global variable 'participants' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA-022", "level": "note", "message": { "text": "Global variable 'participants' is declared", "markdown": "**\\[Line 68\\] Global variable 'participants' is declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-18", "level": "warning", "message": { "text": "Naming convention not followed: participants", "markdown": "**\\[Line 68\\] Naming convention not followed: participants**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "STL-37", "level": "warning", "message": { "text": "The 'participants' array should not be used", "markdown": "**\\[Line 68\\] The 'participants' array should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A18_1_1-a", "level": "error", "message": { "text": "The 'participants' array should not be used", "markdown": "**\\[Line 68\\] The 'participants' array should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-HN-01", "level": "warning", "message": { "text": "The 'participants' identifier should have the 'rg' prefix", "markdown": "**\\[Line 68\\] The 'participants' identifier should have the 'rg' prefix**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'participants' variable should be commented", "markdown": "**\\[Line 68\\] The 'participants' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'participants' variable should be commented", "markdown": "**\\[Line 68\\] The 'participants' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-062", "level": "warning", "message": { "text": "The operator '*', used for 'participants' declaration, should be directly connected with the type", "markdown": "**\\[Line 68\\] The operator '\\*', used for 'participants' declaration, should be directly connected with the type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "FORMAT-32", "level": "warning", "message": { "text": "The operator '*', used for 'participants' declaration, should be directly connected with the type", "markdown": "**\\[Line 68\\] The operator '\\*', used for 'participants' declaration, should be directly connected with the type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The variable of pointer or array type is declared: participants", "markdown": "**\\[Line 68\\] The variable of pointer or array type is declared: participants**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The variable of pointer type is declared: participants", "markdown": "**\\[Line 68\\] The variable of pointer type is declared: participants**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "HICPP-3_3_1-a", "level": "warning", "message": { "text": "Use of variable \"participants\" with static storage duration is not allowed", "markdown": "**\\[Line 68\\] Use of variable \"participants\" with static storage duration is not allowed**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 68, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "PORT-13", "level": "warning", "message": { "text": "'participantsCount' shall be declared as unsigned int or signed int", "markdown": "**\\[Line 69\\] 'participantsCount' shall be declared as unsigned int or signed int**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "CODSTA-CPP-18", "level": "note", "message": { "text": "'participantsCount' should be encapsulated in a class", "markdown": "**\\[Line 69\\] 'participantsCount' should be encapsulated in a class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-098", "level": "warning", "message": { "text": "Do not declare the 'participantsCount' variable in the global namespace", "markdown": "**\\[Line 69\\] Do not declare the 'participantsCount' variable in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-M7_3_1-a", "level": "error", "message": { "text": "Do not declare the 'participantsCount' variable in the global namespace", "markdown": "**\\[Line 69\\] Do not declare the 'participantsCount' variable in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "CODSTA-CPP-36", "level": "warning", "message": { "text": "Do not declare the 'participantsCount' variable in the global namespace", "markdown": "**\\[Line 69\\] Do not declare the 'participantsCount' variable in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2008-7_3_1", "level": "error", "message": { "text": "Do not declare the 'participantsCount' variable in the global namespace", "markdown": "**\\[Line 69\\] Do not declare the 'participantsCount' variable in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-207", "level": "warning", "message": { "text": "Do not define the 'participantsCount' global variable", "markdown": "**\\[Line 69\\] Do not define the 'participantsCount' global variable**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "CODSTA-CPP-82", "level": "warning", "message": { "text": "Do not define the 'participantsCount' global variable", "markdown": "**\\[Line 69\\] Do not define the 'participantsCount' global variable**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 69\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "OWASP2019-API9-e", "level": "warning", "message": { "text": "Global variable 'participantsCount' has external linkage and is not declared in the header", "markdown": "**\\[Line 69\\] Global variable 'participantsCount' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A3_3_1-a", "level": "error", "message": { "text": "Global variable 'participantsCount' has external linkage and is not declared in the header", "markdown": "**\\[Line 69\\] Global variable 'participantsCount' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-137", "level": "warning", "message": { "text": "Global variable 'participantsCount' has external linkage and is not declared in the header", "markdown": "**\\[Line 69\\] Global variable 'participantsCount' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA-023", "level": "warning", "message": { "text": "Global variable 'participantsCount' has external linkage and is not declared in the header", "markdown": "**\\[Line 69\\] Global variable 'participantsCount' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2008-3_3_1", "level": "error", "message": { "text": "Global variable 'participantsCount' has external linkage and is not declared in the header", "markdown": "**\\[Line 69\\] Global variable 'participantsCount' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "CERT_C-DCL15-a", "level": "warning", "message": { "text": "Global variable 'participantsCount' has external linkage and is not declared in the header", "markdown": "**\\[Line 69\\] Global variable 'participantsCount' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2004-8_10", "level": "warning", "message": { "text": "Global variable 'participantsCount' has external linkage and is not declared in the header", "markdown": "**\\[Line 69\\] Global variable 'participantsCount' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA-022", "level": "note", "message": { "text": "Global variable 'participantsCount' is declared", "markdown": "**\\[Line 69\\] Global variable 'participantsCount' is declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-18", "level": "warning", "message": { "text": "Naming convention not followed: participantsCount", "markdown": "**\\[Line 69\\] Naming convention not followed: participantsCount**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-19", "level": "warning", "message": { "text": "Naming convention not followed: participantsCount", "markdown": "**\\[Line 69\\] Naming convention not followed: participantsCount**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-HN-22", "level": "warning", "message": { "text": "The 'participantsCount' identifier should have the 'i' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 69\\] The 'participantsCount' identifier should have the 'i' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-HN-43", "level": "warning", "message": { "text": "The 'participantsCount' identifier should have the 'i' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 69\\] The 'participantsCount' identifier should have the 'i' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-HN-30", "level": "warning", "message": { "text": "The 'participantsCount' identifier should have the 'n' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 69\\] The 'participantsCount' identifier should have the 'n' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'participantsCount' variable should be commented", "markdown": "**\\[Line 69\\] The 'participantsCount' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'participantsCount' variable should be commented", "markdown": "**\\[Line 69\\] The 'participantsCount' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 69\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 69\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 69\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 69\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 69\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 69\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 69\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'participantsCount' should be composed only of lowercase letters", "markdown": "**\\[Line 69\\] The name 'participantsCount' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'participantsCount' should be composed only of lowercase letters", "markdown": "**\\[Line 69\\] The name 'participantsCount' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-142_b", "level": "error", "message": { "text": "The variable \"participantsCount\" was not initialized when declared", "markdown": "**\\[Line 69\\] The variable \"participantsCount\" was not initialized when declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "INIT-03", "level": "warning", "message": { "text": "The variable \"participantsCount\" was not initialized when declared", "markdown": "**\\[Line 69\\] The variable \"participantsCount\" was not initialized when declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-3_3_1-a", "level": "warning", "message": { "text": "Use of variable \"participantsCount\" with static storage duration is not allowed", "markdown": "**\\[Line 69\\] Use of variable \"participantsCount\" with static storage duration is not allowed**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 69\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 69\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 69, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PORT-13", "level": "warning", "message": { "text": "'exitGame' shall be declared as unsigned int or signed int", "markdown": "**\\[Line 70\\] 'exitGame' shall be declared as unsigned int or signed int**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "CODSTA-CPP-18", "level": "note", "message": { "text": "'exitGame' should be encapsulated in a class", "markdown": "**\\[Line 70\\] 'exitGame' should be encapsulated in a class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-098", "level": "warning", "message": { "text": "Do not declare the 'exitGame' variable in the global namespace", "markdown": "**\\[Line 70\\] Do not declare the 'exitGame' variable in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-M7_3_1-a", "level": "error", "message": { "text": "Do not declare the 'exitGame' variable in the global namespace", "markdown": "**\\[Line 70\\] Do not declare the 'exitGame' variable in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "CODSTA-CPP-36", "level": "warning", "message": { "text": "Do not declare the 'exitGame' variable in the global namespace", "markdown": "**\\[Line 70\\] Do not declare the 'exitGame' variable in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2008-7_3_1", "level": "error", "message": { "text": "Do not declare the 'exitGame' variable in the global namespace", "markdown": "**\\[Line 70\\] Do not declare the 'exitGame' variable in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-207", "level": "warning", "message": { "text": "Do not define the 'exitGame' global variable", "markdown": "**\\[Line 70\\] Do not define the 'exitGame' global variable**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "CODSTA-CPP-82", "level": "warning", "message": { "text": "Do not define the 'exitGame' global variable", "markdown": "**\\[Line 70\\] Do not define the 'exitGame' global variable**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 70\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "OWASP2019-API9-e", "level": "warning", "message": { "text": "Global variable 'exitGame' has external linkage and is not declared in the header", "markdown": "**\\[Line 70\\] Global variable 'exitGame' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A3_3_1-a", "level": "error", "message": { "text": "Global variable 'exitGame' has external linkage and is not declared in the header", "markdown": "**\\[Line 70\\] Global variable 'exitGame' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-137", "level": "warning", "message": { "text": "Global variable 'exitGame' has external linkage and is not declared in the header", "markdown": "**\\[Line 70\\] Global variable 'exitGame' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA-023", "level": "warning", "message": { "text": "Global variable 'exitGame' has external linkage and is not declared in the header", "markdown": "**\\[Line 70\\] Global variable 'exitGame' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2008-3_3_1", "level": "error", "message": { "text": "Global variable 'exitGame' has external linkage and is not declared in the header", "markdown": "**\\[Line 70\\] Global variable 'exitGame' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "CERT_C-DCL15-a", "level": "warning", "message": { "text": "Global variable 'exitGame' has external linkage and is not declared in the header", "markdown": "**\\[Line 70\\] Global variable 'exitGame' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2004-8_10", "level": "warning", "message": { "text": "Global variable 'exitGame' has external linkage and is not declared in the header", "markdown": "**\\[Line 70\\] Global variable 'exitGame' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA-022", "level": "note", "message": { "text": "Global variable 'exitGame' is declared", "markdown": "**\\[Line 70\\] Global variable 'exitGame' is declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-18", "level": "warning", "message": { "text": "Naming convention not followed: exitGame", "markdown": "**\\[Line 70\\] Naming convention not followed: exitGame**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-19", "level": "warning", "message": { "text": "Naming convention not followed: exitGame", "markdown": "**\\[Line 70\\] Naming convention not followed: exitGame**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-HN-22", "level": "warning", "message": { "text": "The 'exitGame' identifier should have the 'i' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 70\\] The 'exitGame' identifier should have the 'i' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-HN-43", "level": "warning", "message": { "text": "The 'exitGame' identifier should have the 'i' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 70\\] The 'exitGame' identifier should have the 'i' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-HN-30", "level": "warning", "message": { "text": "The 'exitGame' identifier should have the 'n' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 70\\] The 'exitGame' identifier should have the 'n' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'exitGame' variable should be commented", "markdown": "**\\[Line 70\\] The 'exitGame' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'exitGame' variable should be commented", "markdown": "**\\[Line 70\\] The 'exitGame' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 70\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 70\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 70\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 70\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 70\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 70\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 70\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'exitGame' should be composed only of lowercase letters", "markdown": "**\\[Line 70\\] The name 'exitGame' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'exitGame' should be composed only of lowercase letters", "markdown": "**\\[Line 70\\] The name 'exitGame' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-142_b", "level": "error", "message": { "text": "The variable \"exitGame\" was not initialized when declared", "markdown": "**\\[Line 70\\] The variable \"exitGame\" was not initialized when declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "INIT-03", "level": "warning", "message": { "text": "The variable \"exitGame\" was not initialized when declared", "markdown": "**\\[Line 70\\] The variable \"exitGame\" was not initialized when declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-3_3_1-a", "level": "warning", "message": { "text": "Use of variable \"exitGame\" with static storage duration is not allowed", "markdown": "**\\[Line 70\\] Use of variable \"exitGame\" with static storage duration is not allowed**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 70\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 70\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 70, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A7_1_2-b", "level": "error", "message": { "text": "Consider using 'constexpr' for the 'GameLogic_Thread' function", "markdown": "**\\[Line 72\\] Consider using 'constexpr' for the 'GameLogic\\_Thread' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-MCPP-11_b_cpp11", "level": "warning", "message": { "text": "Consider using 'constexpr' for the 'GameLogic_Thread' function", "markdown": "**\\[Line 72\\] Consider using 'constexpr' for the 'GameLogic\\_Thread' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-098", "level": "warning", "message": { "text": "Do not declare the 'GameLogic_Thread' function in the global namespace", "markdown": "**\\[Line 72\\] Do not declare the 'GameLogic\\_Thread' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-M7_3_1-a", "level": "error", "message": { "text": "Do not declare the 'GameLogic_Thread' function in the global namespace", "markdown": "**\\[Line 72\\] Do not declare the 'GameLogic\\_Thread' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-36", "level": "warning", "message": { "text": "Do not declare the 'GameLogic_Thread' function in the global namespace", "markdown": "**\\[Line 72\\] Do not declare the 'GameLogic\\_Thread' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2008-7_3_1", "level": "error", "message": { "text": "Do not declare the 'GameLogic_Thread' function in the global namespace", "markdown": "**\\[Line 72\\] Do not declare the 'GameLogic\\_Thread' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'GameLogic_Thread' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 72\\] Function 'GameLogic\\_Thread' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'GameLogic_Thread' has Essential Complexity value: 1", "markdown": "**\\[Line 72\\] Function 'GameLogic\\_Thread' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "OWASP2019-API9-e", "level": "warning", "message": { "text": "Function 'GameLogic_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 72\\] Function 'GameLogic\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A3_3_1-a", "level": "error", "message": { "text": "Function 'GameLogic_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 72\\] Function 'GameLogic\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-137", "level": "warning", "message": { "text": "Function 'GameLogic_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 72\\] Function 'GameLogic\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA-023", "level": "warning", "message": { "text": "Function 'GameLogic_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 72\\] Function 'GameLogic\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2008-3_3_1", "level": "error", "message": { "text": "Function 'GameLogic_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 72\\] Function 'GameLogic\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CERT_C-DCL15-a", "level": "warning", "message": { "text": "Function 'GameLogic_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 72\\] Function 'GameLogic\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2004-8_10", "level": "warning", "message": { "text": "Function 'GameLogic_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 72\\] Function 'GameLogic\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A15_4_4-a", "level": "error", "message": { "text": "The 'GameLogic_Thread' function should be declared 'noexcept'", "markdown": "**\\[Line 72\\] The 'GameLogic\\_Thread' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-MCPP-09", "level": "warning", "message": { "text": "The 'GameLogic_Thread' function should be declared 'noexcept'", "markdown": "**\\[Line 72\\] The 'GameLogic\\_Thread' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'GameLogic_Thread' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 72\\] The 'GameLogic\\_Thread' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'GameLogic_Thread' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 72\\] The 'GameLogic\\_Thread' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'GameLogic_Thread' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 72\\] The 'GameLogic\\_Thread' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'GameLogic_Thread' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 72\\] The 'GameLogic\\_Thread' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'GameLogic_Thread' function is not preceded by a comment", "markdown": "**\\[Line 72\\] The definition of the 'GameLogic\\_Thread' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'GameLogic_Thread' function is not preceded by a comment", "markdown": "**\\[Line 72\\] The definition of the 'GameLogic\\_Thread' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-34", "level": "warning", "message": { "text": "The incorrect global function name GameLogic_Thread was found", "markdown": "**\\[Line 72\\] The incorrect global function name GameLogic\\_Thread was found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'GameLogic_Thread' should be composed only of lowercase letters", "markdown": "**\\[Line 72\\] The name 'GameLogic\\_Thread' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'GameLogic_Thread' should be composed only of lowercase letters", "markdown": "**\\[Line 72\\] The name 'GameLogic\\_Thread' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The parameter of pointer or array type is declared", "markdown": "**\\[Line 72\\] The parameter of pointer or array type is declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The parameter of pointer type is declared", "markdown": "**\\[Line 72\\] The parameter of pointer type is declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "CODSTA-MCPP-08_b", "level": "error", "message": { "text": "The return type of the 'GameLogic_Thread' function should be declared as 'auto'", "markdown": "**\\[Line 72\\] The return type of the 'GameLogic\\_Thread' function should be declared as 'auto'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 72, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CDD-DUPM", "level": "error", "message": { "text": "Duplicated function: 'THREAD_RETURN_TYPE GameLogic_Thread ( void * ) { return (...'", "markdown": "**\\[Line 73\\] Duplicated function: 'THREAD\\_RETURN\\_TYPE GameLogic\\_Thread \\( void \\* \\) \\{ return \\(\\.\\.\\.'**  \n  \nReview duplicate in:&nbsp;DeadLock.cpp&nbsp;(73)  \nReview duplicate in:&nbsp;DeadLock.cpp&nbsp;(79)" }, "partialFingerprints": { "violType": "DupViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 73, "startColumn": 1, "endLine": 76, "endColumn": 2 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 74\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 74, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 74\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 74, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 74\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 74, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-25_b", "level": "warning", "message": { "text": "'return' statement should be used with parenthesis", "markdown": "**\\[Line 75\\] 'return' statement should be used with parenthesis**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 75, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-4_2_2-b", "level": "warning", "message": { "text": "Cast to primitive type should not be used if possible", "markdown": "**\\[Line 75\\] Cast to primitive type should not be used if possible**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 75, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-183", "level": "warning", "message": { "text": "Cast to primitive type should not be used if possible", "markdown": "**\\[Line 75\\] Cast to primitive type should not be used if possible**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 75, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-31", "level": "warning", "message": { "text": "Cast to primitive type should not be used if possible", "markdown": "**\\[Line 75\\] Cast to primitive type should not be used if possible**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 75, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-185", "level": "error", "message": { "text": "Do not use a C-style cast to the 'DWORD' type", "markdown": "**\\[Line 75\\] Do not use a C\\-style cast to the 'DWORD' type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 75, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "MISRA2008-5_2_4", "level": "error", "message": { "text": "Do not use a C-style cast to the 'DWORD' type", "markdown": "**\\[Line 75\\] Do not use a C\\-style cast to the 'DWORD' type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 75, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-CPP-66", "level": "warning", "message": { "text": "Do not use a C-style cast to the 'DWORD' type", "markdown": "**\\[Line 75\\] Do not use a C\\-style cast to the 'DWORD' type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 75, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CDD-DUPC", "level": "warning", "message": { "text": "Duplicated code: 'return (THREAD_RETURN_TYPE)0;'", "markdown": "**\\[Line 75\\] Duplicated code: 'return \\(THREAD\\_RETURN\\_TYPE\\)0;'**  \n  \nReview duplicate in:&nbsp;DeadLock.cpp&nbsp;(75)  \nReview duplicate in:&nbsp;DeadLock.cpp&nbsp;(81)" }, "partialFingerprints": { "violType": "DupViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 75, "startColumn": 2, "endColumn": 31 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 75\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 75, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 75\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 75, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 75\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 75, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-5_4_1-a", "level": "warning", "message": { "text": "Use a C++-style cast instead of a C-style cast to the 'DWORD' type", "markdown": "**\\[Line 75\\] Use a C\\+\\+\\-style cast instead of a C\\-style cast to the 'DWORD' type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 75, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-A5_2_2-a", "level": "error", "message": { "text": "Use a C++-style cast instead of a C-style cast to the 'DWORD' type", "markdown": "**\\[Line 75\\] Use a C\\+\\+\\-style cast instead of a C\\-style cast to the 'DWORD' type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 75, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-CPP-11", "level": "warning", "message": { "text": "Use a C++-style cast instead of a C-style cast to the 'DWORD' type", "markdown": "**\\[Line 75\\] Use a C\\+\\+\\-style cast instead of a C\\-style cast to the 'DWORD' type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 75, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-A7_1_2-b", "level": "error", "message": { "text": "Consider using 'constexpr' for the 'Controller_Thread' function", "markdown": "**\\[Line 78\\] Consider using 'constexpr' for the 'Controller\\_Thread' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-MCPP-11_b_cpp11", "level": "warning", "message": { "text": "Consider using 'constexpr' for the 'Controller_Thread' function", "markdown": "**\\[Line 78\\] Consider using 'constexpr' for the 'Controller\\_Thread' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-098", "level": "warning", "message": { "text": "Do not declare the 'Controller_Thread' function in the global namespace", "markdown": "**\\[Line 78\\] Do not declare the 'Controller\\_Thread' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-M7_3_1-a", "level": "error", "message": { "text": "Do not declare the 'Controller_Thread' function in the global namespace", "markdown": "**\\[Line 78\\] Do not declare the 'Controller\\_Thread' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-36", "level": "warning", "message": { "text": "Do not declare the 'Controller_Thread' function in the global namespace", "markdown": "**\\[Line 78\\] Do not declare the 'Controller\\_Thread' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2008-7_3_1", "level": "error", "message": { "text": "Do not declare the 'Controller_Thread' function in the global namespace", "markdown": "**\\[Line 78\\] Do not declare the 'Controller\\_Thread' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'Controller_Thread' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 78\\] Function 'Controller\\_Thread' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'Controller_Thread' has Essential Complexity value: 1", "markdown": "**\\[Line 78\\] Function 'Controller\\_Thread' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "OWASP2019-API9-e", "level": "warning", "message": { "text": "Function 'Controller_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 78\\] Function 'Controller\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A3_3_1-a", "level": "error", "message": { "text": "Function 'Controller_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 78\\] Function 'Controller\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-137", "level": "warning", "message": { "text": "Function 'Controller_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 78\\] Function 'Controller\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA-023", "level": "warning", "message": { "text": "Function 'Controller_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 78\\] Function 'Controller\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2008-3_3_1", "level": "error", "message": { "text": "Function 'Controller_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 78\\] Function 'Controller\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CERT_C-DCL15-a", "level": "warning", "message": { "text": "Function 'Controller_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 78\\] Function 'Controller\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2004-8_10", "level": "warning", "message": { "text": "Function 'Controller_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 78\\] Function 'Controller\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A15_4_4-a", "level": "error", "message": { "text": "The 'Controller_Thread' function should be declared 'noexcept'", "markdown": "**\\[Line 78\\] The 'Controller\\_Thread' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-MCPP-09", "level": "warning", "message": { "text": "The 'Controller_Thread' function should be declared 'noexcept'", "markdown": "**\\[Line 78\\] The 'Controller\\_Thread' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'Controller_Thread' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 78\\] The 'Controller\\_Thread' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'Controller_Thread' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 78\\] The 'Controller\\_Thread' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'Controller_Thread' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 78\\] The 'Controller\\_Thread' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'Controller_Thread' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 78\\] The 'Controller\\_Thread' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'Controller_Thread' function is not preceded by a comment", "markdown": "**\\[Line 78\\] The definition of the 'Controller\\_Thread' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'Controller_Thread' function is not preceded by a comment", "markdown": "**\\[Line 78\\] The definition of the 'Controller\\_Thread' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-34", "level": "warning", "message": { "text": "The incorrect global function name Controller_Thread was found", "markdown": "**\\[Line 78\\] The incorrect global function name Controller\\_Thread was found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'Controller_Thread' should be composed only of lowercase letters", "markdown": "**\\[Line 78\\] The name 'Controller\\_Thread' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'Controller_Thread' should be composed only of lowercase letters", "markdown": "**\\[Line 78\\] The name 'Controller\\_Thread' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The parameter of pointer or array type is declared", "markdown": "**\\[Line 78\\] The parameter of pointer or array type is declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The parameter of pointer type is declared", "markdown": "**\\[Line 78\\] The parameter of pointer type is declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "CODSTA-MCPP-08_b", "level": "error", "message": { "text": "The return type of the 'Controller_Thread' function should be declared as 'auto'", "markdown": "**\\[Line 78\\] The return type of the 'Controller\\_Thread' function should be declared as 'auto'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 78, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 80\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 80, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 80\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 80, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 80\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 80, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-25_b", "level": "warning", "message": { "text": "'return' statement should be used with parenthesis", "markdown": "**\\[Line 81\\] 'return' statement should be used with parenthesis**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 81, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-4_2_2-b", "level": "warning", "message": { "text": "Cast to primitive type should not be used if possible", "markdown": "**\\[Line 81\\] Cast to primitive type should not be used if possible**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 81, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-183", "level": "warning", "message": { "text": "Cast to primitive type should not be used if possible", "markdown": "**\\[Line 81\\] Cast to primitive type should not be used if possible**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 81, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-31", "level": "warning", "message": { "text": "Cast to primitive type should not be used if possible", "markdown": "**\\[Line 81\\] Cast to primitive type should not be used if possible**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 81, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-185", "level": "error", "message": { "text": "Do not use a C-style cast to the 'DWORD' type", "markdown": "**\\[Line 81\\] Do not use a C\\-style cast to the 'DWORD' type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 81, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "MISRA2008-5_2_4", "level": "error", "message": { "text": "Do not use a C-style cast to the 'DWORD' type", "markdown": "**\\[Line 81\\] Do not use a C\\-style cast to the 'DWORD' type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 81, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-CPP-66", "level": "warning", "message": { "text": "Do not use a C-style cast to the 'DWORD' type", "markdown": "**\\[Line 81\\] Do not use a C\\-style cast to the 'DWORD' type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 81, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 81\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 81, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 81\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 81, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 81\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 81, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-5_4_1-a", "level": "warning", "message": { "text": "Use a C++-style cast instead of a C-style cast to the 'DWORD' type", "markdown": "**\\[Line 81\\] Use a C\\+\\+\\-style cast instead of a C\\-style cast to the 'DWORD' type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 81, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-A5_2_2-a", "level": "error", "message": { "text": "Use a C++-style cast instead of a C-style cast to the 'DWORD' type", "markdown": "**\\[Line 81\\] Use a C\\+\\+\\-style cast instead of a C\\-style cast to the 'DWORD' type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 81, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-CPP-11", "level": "warning", "message": { "text": "Use a C++-style cast instead of a C-style cast to the 'DWORD' type", "markdown": "**\\[Line 81\\] Use a C\\+\\+\\-style cast instead of a C\\-style cast to the 'DWORD' type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 81, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "HICPP-8_1_1-a", "level": "warning", "message": { "text": "Declaration of variable 'velocityArray' contains more than one level of pointer indirection", "markdown": "**\\[Line 86\\] Declaration of variable 'velocityArray' contains more than one level of pointer indirection**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-89", "level": "warning", "message": { "text": "Declaration of variable 'velocityArray' contains more than one level of pointer indirection", "markdown": "**\\[Line 86\\] Declaration of variable 'velocityArray' contains more than one level of pointer indirection**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-207", "level": "warning", "message": { "text": "Do not define the 'velocityArray' global variable", "markdown": "**\\[Line 86\\] Do not define the 'velocityArray' global variable**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-CPP-82", "level": "warning", "message": { "text": "Do not define the 'velocityArray' global variable", "markdown": "**\\[Line 86\\] Do not define the 'velocityArray' global variable**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "OWASP2019-API9-e", "level": "warning", "message": { "text": "Global variable 'velocityArray' has external linkage and is not declared in the header", "markdown": "**\\[Line 86\\] Global variable 'velocityArray' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-A3_3_1-a", "level": "error", "message": { "text": "Global variable 'velocityArray' has external linkage and is not declared in the header", "markdown": "**\\[Line 86\\] Global variable 'velocityArray' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-137", "level": "warning", "message": { "text": "Global variable 'velocityArray' has external linkage and is not declared in the header", "markdown": "**\\[Line 86\\] Global variable 'velocityArray' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "MISRA-023", "level": "warning", "message": { "text": "Global variable 'velocityArray' has external linkage and is not declared in the header", "markdown": "**\\[Line 86\\] Global variable 'velocityArray' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "MISRA2008-3_3_1", "level": "error", "message": { "text": "Global variable 'velocityArray' has external linkage and is not declared in the header", "markdown": "**\\[Line 86\\] Global variable 'velocityArray' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CERT_C-DCL15-a", "level": "warning", "message": { "text": "Global variable 'velocityArray' has external linkage and is not declared in the header", "markdown": "**\\[Line 86\\] Global variable 'velocityArray' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "MISRA2004-8_10", "level": "warning", "message": { "text": "Global variable 'velocityArray' has external linkage and is not declared in the header", "markdown": "**\\[Line 86\\] Global variable 'velocityArray' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "MISRA-022", "level": "note", "message": { "text": "Global variable 'velocityArray' is declared", "markdown": "**\\[Line 86\\] Global variable 'velocityArray' is declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-18", "level": "warning", "message": { "text": "Naming convention not followed: velocityArray", "markdown": "**\\[Line 86\\] Naming convention not followed: velocityArray**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 86\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 86\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 86\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "STL-37", "level": "warning", "message": { "text": "The 'velocityArray' array should not be used", "markdown": "**\\[Line 86\\] The 'velocityArray' array should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-A18_1_1-a", "level": "error", "message": { "text": "The 'velocityArray' array should not be used", "markdown": "**\\[Line 86\\] The 'velocityArray' array should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-HN-01", "level": "warning", "message": { "text": "The 'velocityArray' identifier should have the 'rg' prefix", "markdown": "**\\[Line 86\\] The 'velocityArray' identifier should have the 'rg' prefix**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-M0_1_4-a", "level": "error", "message": { "text": "The 'velocityArray' variable has only one use", "markdown": "**\\[Line 86\\] The 'velocityArray' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "MISRA2008-0_1_4", "level": "error", "message": { "text": "The 'velocityArray' variable has only one use", "markdown": "**\\[Line 86\\] The 'velocityArray' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "GLOBAL-ONEUSEVAR", "level": "warning", "message": { "text": "The 'velocityArray' variable has only one use", "markdown": "**\\[Line 86\\] The 'velocityArray' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'velocityArray' variable should be commented", "markdown": "**\\[Line 86\\] The 'velocityArray' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'velocityArray' variable should be commented", "markdown": "**\\[Line 86\\] The 'velocityArray' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'velocityArray' should be composed only of lowercase letters", "markdown": "**\\[Line 86\\] The name 'velocityArray' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'velocityArray' should be composed only of lowercase letters", "markdown": "**\\[Line 86\\] The name 'velocityArray' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-062", "level": "warning", "message": { "text": "The operator '*', used for 'velocityArray' declaration, should be directly connected with the type", "markdown": "**\\[Line 86\\] The operator '\\*', used for 'velocityArray' declaration, should be directly connected with the type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "FORMAT-32", "level": "warning", "message": { "text": "The operator '*', used for 'velocityArray' declaration, should be directly connected with the type", "markdown": "**\\[Line 86\\] The operator '\\*', used for 'velocityArray' declaration, should be directly connected with the type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The variable of pointer or array type is declared: velocityArray", "markdown": "**\\[Line 86\\] The variable of pointer or array type is declared: velocityArray**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The variable of pointer type is declared: velocityArray", "markdown": "**\\[Line 86\\] The variable of pointer type is declared: velocityArray**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "HICPP-3_3_1-a", "level": "warning", "message": { "text": "Use of variable \"velocityArray\" with static storage duration is not allowed", "markdown": "**\\[Line 86\\] Use of variable \"velocityArray\" with static storage duration is not allowed**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 86, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'Physics_Thread' has Cyclomatic Complexity value: 3", "markdown": "**\\[Line 88\\] Function 'Physics\\_Thread' has Cyclomatic Complexity value: 3**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 88, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'Physics_Thread' has Essential Complexity value: 1", "markdown": "**\\[Line 88\\] Function 'Physics\\_Thread' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 88, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "OWASP2019-API9-e", "level": "warning", "message": { "text": "Function 'Physics_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 88\\] Function 'Physics\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 88, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A3_3_1-a", "level": "error", "message": { "text": "Function 'Physics_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 88\\] Function 'Physics\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 88, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-137", "level": "warning", "message": { "text": "Function 'Physics_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 88\\] Function 'Physics\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 88, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA-023", "level": "warning", "message": { "text": "Function 'Physics_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 88\\] Function 'Physics\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 88, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2008-3_3_1", "level": "error", "message": { "text": "Function 'Physics_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 88\\] Function 'Physics\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 88, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CERT_C-DCL15-a", "level": "warning", "message": { "text": "Function 'Physics_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 88\\] Function 'Physics\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 88, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2004-8_10", "level": "warning", "message": { "text": "Function 'Physics_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 88\\] Function 'Physics\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 88, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 88\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 88, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 88\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 88, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 88\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 88, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'Physics_Thread' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 88\\] The 'Physics\\_Thread' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 88, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'Physics_Thread' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 88\\] The 'Physics\\_Thread' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 88, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'Physics_Thread' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 88\\] The 'Physics\\_Thread' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 88, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'Physics_Thread' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 88\\] The 'Physics\\_Thread' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 88, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'Physics_Thread' function is not preceded by a comment", "markdown": "**\\[Line 88\\] The definition of the 'Physics\\_Thread' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 88, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'Physics_Thread' function is not preceded by a comment", "markdown": "**\\[Line 88\\] The definition of the 'Physics\\_Thread' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 88, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-34", "level": "warning", "message": { "text": "The incorrect global function name Physics_Thread was found", "markdown": "**\\[Line 88\\] The incorrect global function name Physics\\_Thread was found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 88, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'Physics_Thread' should be composed only of lowercase letters", "markdown": "**\\[Line 88\\] The name 'Physics\\_Thread' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 88, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'Physics_Thread' should be composed only of lowercase letters", "markdown": "**\\[Line 88\\] The name 'Physics\\_Thread' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 88, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The parameter of pointer or array type is declared", "markdown": "**\\[Line 88\\] The parameter of pointer or array type is declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 88, "startColumn": 23, "endColumn": 24 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The parameter of pointer type is declared", "markdown": "**\\[Line 88\\] The parameter of pointer type is declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 88, "startColumn": 23, "endColumn": 24 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 89\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 89, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 89\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 89, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 89\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 89, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 13", "markdown": "**\\[Line 89\\] Percentage of comment lines vs\\. all method's lines is: 13**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 89, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CODSTA-83", "level": "warning", "message": { "text": "A loop does not have a fixed upper nor lower bound", "markdown": "**\\[Line 90\\] A loop does not have a fixed upper nor lower bound**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 90, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "CODSTA-46", "level": "note", "message": { "text": "In 'Physics_Thread' function use positive logic rather than negative logic whenever possible", "markdown": "**\\[Line 90\\] In 'Physics\\_Thread' function use positive logic rather than negative logic whenever possible**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 90, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 90\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 90, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 90\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 90, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 90\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 90, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 90\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 90, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 90\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 90, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 90\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 90, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-43", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 90\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 90, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_b", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 90\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 90, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 90\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 90, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 90\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 90, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 90\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 90, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-02", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 90\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 90, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-M5_3_1-a", "level": "error", "message": { "text": "The operand of logical operator '!' has 'int' type instead of 'bool' type", "markdown": "**\\[Line 90\\] The operand of logical operator '\\!' has 'int' type instead of 'bool' type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 90, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "CODSTA-CPP-67", "level": "warning", "message": { "text": "The operand of logical operator '!' has 'int' type instead of 'bool' type", "markdown": "**\\[Line 90\\] The operand of logical operator '\\!' has 'int' type instead of 'bool' type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 90, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "MISRA2008-5_3_1", "level": "error", "message": { "text": "The operand of logical operator '!' has 'int' type instead of 'bool' type", "markdown": "**\\[Line 90\\] The operand of logical operator '\\!' has 'int' type instead of 'bool' type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 90, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "MISRA2004-12_6_a", "level": "warning", "message": { "text": "The operand of logical operator '!' is not 'effectively Boolean'", "markdown": "**\\[Line 90\\] The operand of logical operator '\\!' is not 'effectively Boolean'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 90, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "PORT-13", "level": "warning", "message": { "text": "'i' shall be declared as unsigned int or signed int", "markdown": "**\\[Line 91\\] 'i' shall be declared as unsigned int or signed int**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-83", "level": "warning", "message": { "text": "A loop does not have a fixed upper nor lower bound", "markdown": "**\\[Line 91\\] A loop does not have a fixed upper nor lower bound**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "FORMAT-12", "level": "warning", "message": { "text": "Between conditional statement 'for' and its opening parenthesis '(' should be exactly one space", "markdown": "**\\[Line 91\\] Between conditional statement 'for' and its opening parenthesis '\\(' should be exactly one space**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 91\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CDD-DUPC", "level": "warning", "message": { "text": "Duplicated code: 'for(int i = 0;'", "markdown": "**\\[Line 91\\] Duplicated code: 'for\\(int i = 0;'**  \n  \nReview duplicate in:&nbsp;DeadLock.cpp&nbsp;(91)  \nReview duplicate in:&nbsp;DeadLock.cpp&nbsp;(122)  \nReview duplicate in:&nbsp;MemoryLeak.cpp&nbsp;(9)" }, "partialFingerprints": { "violType": "DupViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 4, "endColumn": 18 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 91\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 91\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 91\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 91\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 91\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 91\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 91\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 91\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 91\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "FORMAT-43", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 91\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_b", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 91\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "OPT-04", "level": "warning", "message": { "text": "Postfix operator applied to variable 'i'; prefer prefix type", "markdown": "**\\[Line 91\\] Postfix operator applied to variable 'i'; prefer prefix type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 91\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 91\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 91\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-02", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 91\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'i' variable should be commented", "markdown": "**\\[Line 91\\] The 'i' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'i' variable should be commented", "markdown": "**\\[Line 91\\] The 'i' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 91\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 91\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 91\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 91\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 91\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 91\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 91\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A8_5_2-a", "level": "error", "message": { "text": "The definition of the 'i' variable should contain a braced initializer", "markdown": "**\\[Line 91\\] The definition of the 'i' variable should contain a braced initializer**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-MCPP-38", "level": "warning", "message": { "text": "The definition of the 'i' variable should contain a braced initializer", "markdown": "**\\[Line 91\\] The definition of the 'i' variable should contain a braced initializer**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 91\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 91\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "OPT-10", "level": "warning", "message": { "text": "Variable \"i\" declaration was found in control statement", "markdown": "**\\[Line 91\\] Variable \"i\" declaration was found in control statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 91, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CDD-DUPC", "level": "warning", "message": { "text": "Duplicated code: 'LOCK_ACQUIRE(changePositionMutex);'", "markdown": "**\\[Line 92\\] Duplicated code: 'LOCK\\_ACQUIRE\\(changePositionMutex\\);'**  \n  \nReview duplicate in:&nbsp;DeadLock.cpp&nbsp;(92)  \nReview duplicate in:&nbsp;DeadLock.cpp&nbsp;(118)" }, "partialFingerprints": { "violType": "DupViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 92, "startColumn": 5, "endColumn": 39 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 92\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 92, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 92\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 92, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 92\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 92, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 92\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 92, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 92\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 92, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 92\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 92, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 92\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 92, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 92\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 92, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 92\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 92, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 92\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 92, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 92\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 92, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 92\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 92, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "CODSTA-CPP-23", "level": "note", "message": { "text": "The global function 'EnterCriticalSection' is called without scope resolution operator '::'", "markdown": "**\\[Line 92\\] The global function 'EnterCriticalSection' is called without scope resolution operator '::'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 92, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "BD-TRS-DIFCS", "level": "error", "message": { "text": "\"participants\" is used in two critical sections in context of single method, using one critical section will improve atomicity of operation", "markdown": "**\\[Line 93\\] \"participants\" is used in two critical sections in context of single method, using one critical section will improve atomicity of operation**  \n  \nDeadLock.cpp&nbsp;(90)&nbsp;:&nbsp;while \\(\\!exitGame\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\!exitGame \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nDeadLock.cpp&nbsp;(91)&nbsp;:&nbsp;for\\(int i = 0; i < participantsCount; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < participantsCount\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nDeadLock.cpp&nbsp;(92)&nbsp;:&nbsp;LOCK\\_ACQUIRE\\(changePositionMutex\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Locking: &changePositionMutex_  \n**Usage of \"participants\" in first critical section**  \nDeadLock.cpp&nbsp;(93)&nbsp;:&nbsp;Point& position = participants\\[i\\]\\->getPosition\\(\\);  \n        Shapes.hpp&nbsp;(10)&nbsp;:&nbsp;Point& getPosition\\(\\) \\{ return \\_position; \\}  \nDeadLock.cpp&nbsp;(94)&nbsp;:&nbsp;position\\.translate\\(\\*velocityArray\\[i\\]\\);  \n        Point.hpp&nbsp;(15)&nbsp;:&nbsp;\\_x \\+= vector\\.\\_x;  \n        Point.hpp&nbsp;(16)&nbsp;:&nbsp;\\_y \\+= vector\\.\\_y;  \nDeadLock.cpp&nbsp;(95)&nbsp;:&nbsp;ring\\.contains\\(\\.\\.\\.\\)  \n        Shapes.hpp&nbsp;(29)&nbsp;:&nbsp;getPosition\\(\\)  \n                Shapes.hpp&nbsp;(10)&nbsp;:&nbsp;Point& getPosition\\(\\) \\{ return \\_position; \\}  \n        Shapes.hpp&nbsp;(29)&nbsp;:&nbsp;point\\.squareDistanceTo\\(\\.\\.\\.\\)  \n                Point.hpp&nbsp;(21)&nbsp;:&nbsp;return \\(\\(\\_x \\- point\\.\\_x\\) \\* \\(\\_x \\- point\\.\\_x\\)\\) \\+ \\(\\(\\_y \\- point\\.\\_y\\) \\* \\(\\_y \\- point\\.\\_y\\)\\);  \n        Shapes.hpp&nbsp;(29)&nbsp;:&nbsp;return point\\.squareDistanceTo\\(getPosition\\(\\)\\) <= \\(\\_radius \\* \\_radius\\);  \nDeadLock.cpp&nbsp;(95)&nbsp;:&nbsp;assertion\\(ring\\.contains\\(position\\), \"Participant is out of ring\"\\);  \n        DeadLock.cpp&nbsp;(60)&nbsp;:&nbsp;if \\(\\!condition\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\!condition \\(assuming false\\)_  \nDeadLock.cpp&nbsp;(98)&nbsp;:&nbsp;LOCK\\_RELEASE\\(changePositionMutex\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Unlocking: &changePositionMutex_  \nDeadLock.cpp&nbsp;(91)&nbsp;:&nbsp;for\\(int i = 0; i < participantsCount; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < participantsCount\\) \\(true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nDeadLock.cpp&nbsp;(92)&nbsp;:&nbsp;LOCK\\_ACQUIRE\\(changePositionMutex\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Locking: &changePositionMutex_  \n**Usage of \"participants\" in second critical section**&nbsp;  \nDeadLock.cpp&nbsp;(93)&nbsp;:&nbsp;Point& position = participants\\[i\\]\\->getPosition\\(\\);" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 93, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 93\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 93, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 93\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 93, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 93\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 93, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 93\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 93, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 93\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 93, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 93\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 93, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 93\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 93, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 93\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 93, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 93\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 93, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 93\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 93, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 93\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 93, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 93\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 93, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'position' variable should be commented", "markdown": "**\\[Line 93\\] The 'position' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 93, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'position' variable should be commented", "markdown": "**\\[Line 93\\] The 'position' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 93, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-MCPP-08_a", "level": "error", "message": { "text": "The 'position' variable should be declared with the 'auto&' type specifier", "markdown": "**\\[Line 93\\] The 'position' variable should be declared with the 'auto&' type specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 93, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "AUTOSAR-A8_5_2-a", "level": "error", "message": { "text": "The definition of the 'position' variable should contain a braced initializer", "markdown": "**\\[Line 93\\] The definition of the 'position' variable should contain a braced initializer**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 93, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-MCPP-38", "level": "warning", "message": { "text": "The definition of the 'position' variable should contain a braced initializer", "markdown": "**\\[Line 93\\] The definition of the 'position' variable should contain a braced initializer**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 93, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "OPT-10", "level": "warning", "message": { "text": "Variable \"position\" declaration was found in control statement", "markdown": "**\\[Line 93\\] Variable \"position\" declaration was found in control statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 93, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "HICPP-7_1_8-a", "level": "warning", "message": { "text": "Variable 'position' should be declared using 'auto' specifier", "markdown": "**\\[Line 93\\] Variable 'position' should be declared using 'auto' specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 93, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "BD-TRS-DIFCS", "level": "error", "message": { "text": "\"velocityArray\" is used in two critical sections in context of single method, using one critical section will improve atomicity of operation", "markdown": "**\\[Line 94\\] \"velocityArray\" is used in two critical sections in context of single method, using one critical section will improve atomicity of operation**  \n  \nDeadLock.cpp&nbsp;(90)&nbsp;:&nbsp;while \\(\\!exitGame\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\!exitGame \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nDeadLock.cpp&nbsp;(91)&nbsp;:&nbsp;for\\(int i = 0; i < participantsCount; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < participantsCount\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nDeadLock.cpp&nbsp;(92)&nbsp;:&nbsp;LOCK\\_ACQUIRE\\(changePositionMutex\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Locking: &changePositionMutex_  \nDeadLock.cpp&nbsp;(93)&nbsp;:&nbsp;Point& position = participants\\[i\\]\\->getPosition\\(\\);  \n        Shapes.hpp&nbsp;(10)&nbsp;:&nbsp;Point& getPosition\\(\\) \\{ return \\_position; \\}  \n**Usage of \"velocityArray\" in first critical section**  \nDeadLock.cpp&nbsp;(94)&nbsp;:&nbsp;position\\.translate\\(\\*velocityArray\\[i\\]\\);  \n        Point.hpp&nbsp;(15)&nbsp;:&nbsp;\\_x \\+= vector\\.\\_x;  \n        Point.hpp&nbsp;(16)&nbsp;:&nbsp;\\_y \\+= vector\\.\\_y;  \nDeadLock.cpp&nbsp;(95)&nbsp;:&nbsp;ring\\.contains\\(\\.\\.\\.\\)  \n        Shapes.hpp&nbsp;(29)&nbsp;:&nbsp;getPosition\\(\\)  \n                Shapes.hpp&nbsp;(10)&nbsp;:&nbsp;Point& getPosition\\(\\) \\{ return \\_position; \\}  \n        Shapes.hpp&nbsp;(29)&nbsp;:&nbsp;point\\.squareDistanceTo\\(\\.\\.\\.\\)  \n                Point.hpp&nbsp;(21)&nbsp;:&nbsp;return \\(\\(\\_x \\- point\\.\\_x\\) \\* \\(\\_x \\- point\\.\\_x\\)\\) \\+ \\(\\(\\_y \\- point\\.\\_y\\) \\* \\(\\_y \\- point\\.\\_y\\)\\);  \n        Shapes.hpp&nbsp;(29)&nbsp;:&nbsp;return point\\.squareDistanceTo\\(getPosition\\(\\)\\) <= \\(\\_radius \\* \\_radius\\);  \nDeadLock.cpp&nbsp;(95)&nbsp;:&nbsp;assertion\\(ring\\.contains\\(position\\), \"Participant is out of ring\"\\);  \n        DeadLock.cpp&nbsp;(60)&nbsp;:&nbsp;if \\(\\!condition\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\!condition \\(assuming false\\)_  \nDeadLock.cpp&nbsp;(98)&nbsp;:&nbsp;LOCK\\_RELEASE\\(changePositionMutex\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Unlocking: &changePositionMutex_  \nDeadLock.cpp&nbsp;(91)&nbsp;:&nbsp;for\\(int i = 0; i < participantsCount; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < participantsCount\\) \\(true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nDeadLock.cpp&nbsp;(92)&nbsp;:&nbsp;LOCK\\_ACQUIRE\\(changePositionMutex\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Locking: &changePositionMutex_  \nDeadLock.cpp&nbsp;(93)&nbsp;:&nbsp;Point& position = participants\\[i\\]\\->getPosition\\(\\);  \n        Shapes.hpp&nbsp;(10)&nbsp;:&nbsp;Point& getPosition\\(\\) \\{ return \\_position; \\}  \n**Usage of \"velocityArray\" in second critical section**&nbsp;  \nDeadLock.cpp&nbsp;(94)&nbsp;:&nbsp;position\\.translate\\(\\*velocityArray\\[i\\]\\);" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 94, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "PB-01", "level": "warning", "message": { "text": "Dereferenced pointer type expression should not be used", "markdown": "**\\[Line 94\\] Dereferenced pointer type expression should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 94, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 94\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 94, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 94\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 94, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 94\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 94, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 94\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 94, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 94\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 94, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 94\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 94, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 94\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 94, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 94\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 94, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 94\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 94, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 94\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 94, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 94\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 94, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 94\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 94, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "BD-TRS-DIFCS", "level": "error", "message": { "text": "\"ring\" is used in two critical sections in context of single method, using one critical section will improve atomicity of operation", "markdown": "**\\[Line 95\\] \"ring\" is used in two critical sections in context of single method, using one critical section will improve atomicity of operation**  \n  \nDeadLock.cpp&nbsp;(90)&nbsp;:&nbsp;while \\(\\!exitGame\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\!exitGame \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nDeadLock.cpp&nbsp;(91)&nbsp;:&nbsp;for\\(int i = 0; i < participantsCount; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < participantsCount\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nDeadLock.cpp&nbsp;(92)&nbsp;:&nbsp;LOCK\\_ACQUIRE\\(changePositionMutex\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Locking: &changePositionMutex_  \nDeadLock.cpp&nbsp;(93)&nbsp;:&nbsp;Point& position = participants\\[i\\]\\->getPosition\\(\\);  \n        Shapes.hpp&nbsp;(10)&nbsp;:&nbsp;Point& getPosition\\(\\) \\{ return \\_position; \\}  \nDeadLock.cpp&nbsp;(94)&nbsp;:&nbsp;position\\.translate\\(\\*velocityArray\\[i\\]\\);  \n        Point.hpp&nbsp;(15)&nbsp;:&nbsp;\\_x \\+= vector\\.\\_x;  \n        Point.hpp&nbsp;(16)&nbsp;:&nbsp;\\_y \\+= vector\\.\\_y;  \n**Usage of \"ring\" in first critical section**  \nDeadLock.cpp&nbsp;(95)&nbsp;:&nbsp;ring\\.contains\\(\\.\\.\\.\\)  \n        Shapes.hpp&nbsp;(29)&nbsp;:&nbsp;getPosition\\(\\)  \n                Shapes.hpp&nbsp;(10)&nbsp;:&nbsp;Point& getPosition\\(\\) \\{ return \\_position; \\}  \n        Shapes.hpp&nbsp;(29)&nbsp;:&nbsp;point\\.squareDistanceTo\\(\\.\\.\\.\\)  \n                Point.hpp&nbsp;(21)&nbsp;:&nbsp;return \\(\\(\\_x \\- point\\.\\_x\\) \\* \\(\\_x \\- point\\.\\_x\\)\\) \\+ \\(\\(\\_y \\- point\\.\\_y\\) \\* \\(\\_y \\- point\\.\\_y\\)\\);  \n        Shapes.hpp&nbsp;(29)&nbsp;:&nbsp;return point\\.squareDistanceTo\\(getPosition\\(\\)\\) <= \\(\\_radius \\* \\_radius\\);  \nDeadLock.cpp&nbsp;(95)&nbsp;:&nbsp;assertion\\(ring\\.contains\\(position\\), \"Participant is out of ring\"\\);  \n        DeadLock.cpp&nbsp;(60)&nbsp;:&nbsp;if \\(\\!condition\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\!condition \\(assuming false\\)_  \nDeadLock.cpp&nbsp;(98)&nbsp;:&nbsp;LOCK\\_RELEASE\\(changePositionMutex\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Unlocking: &changePositionMutex_  \nDeadLock.cpp&nbsp;(91)&nbsp;:&nbsp;for\\(int i = 0; i < participantsCount; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < participantsCount\\) \\(true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nDeadLock.cpp&nbsp;(92)&nbsp;:&nbsp;LOCK\\_ACQUIRE\\(changePositionMutex\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Locking: &changePositionMutex_  \nDeadLock.cpp&nbsp;(93)&nbsp;:&nbsp;Point& position = participants\\[i\\]\\->getPosition\\(\\);  \n        Shapes.hpp&nbsp;(10)&nbsp;:&nbsp;Point& getPosition\\(\\) \\{ return \\_position; \\}  \nDeadLock.cpp&nbsp;(94)&nbsp;:&nbsp;position\\.translate\\(\\*velocityArray\\[i\\]\\);  \n        Point.hpp&nbsp;(15)&nbsp;:&nbsp;\\_x \\+= vector\\.\\_x;  \n        Point.hpp&nbsp;(16)&nbsp;:&nbsp;\\_y \\+= vector\\.\\_y;  \n**Usage of \"ring\" in second critical section**&nbsp;  \nDeadLock.cpp&nbsp;(95)&nbsp;:&nbsp;ring\\.contains\\(\\.\\.\\.\\)" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 95, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 95\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 95, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 95\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 95, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 95\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 95, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 95\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 95, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 95\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 95, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 95\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 95, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 95\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 95, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 95\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 95, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 95\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 95, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 95\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 95, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 95\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 95, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 95\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 95, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "CODSTA-CPP-23", "level": "note", "message": { "text": "The global function 'assertion' is called without scope resolution operator '::'", "markdown": "**\\[Line 95\\] The global function 'assertion' is called without scope resolution operator '::'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 95, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "CWE-798-a", "level": "note", "message": { "text": "The string literal is embedded directly in the code: Participant is out of ring", "markdown": "**\\[Line 95\\] The string literal is embedded directly in the code: Participant is out of ring**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 95, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "CODSTA-203", "level": "note", "message": { "text": "The string literal is embedded directly in the code: Participant is out of ring", "markdown": "**\\[Line 95\\] The string literal is embedded directly in the code: Participant is out of ring**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 95, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "APSC_DV-003110-a", "level": "error", "message": { "text": "The string literal is embedded directly in the code: Participant is out of ring", "markdown": "**\\[Line 95\\] The string literal is embedded directly in the code: Participant is out of ring**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 95, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "CERT_C-MSC41-a", "level": "error", "message": { "text": "The string literal is embedded directly in the code: Participant is out of ring", "markdown": "**\\[Line 95\\] The string literal is embedded directly in the code: Participant is out of ring**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 95, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "AUTOSAR-A27_0_4-d", "level": "error", "message": { "text": "The string literal should not be passed as an argument of the 'const char *' type in the 'assertion' function call", "markdown": "**\\[Line 95\\] The string literal should not be passed as an argument of the 'const char \\*' type in the 'assertion' function call**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 95, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "PB-76", "level": "warning", "message": { "text": "The string literal should not be passed as an argument of the 'const char *' type in the 'assertion' function call", "markdown": "**\\[Line 95\\] The string literal should not be passed as an argument of the 'const char \\*' type in the 'assertion' function call**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 95, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 96\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 96, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 97\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 97, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 98\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 98, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 98\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 98, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 98\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 98, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 98\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 98, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 98\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 98, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 98\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 98, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 98\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 98, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 98\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 98, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 98\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 98, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 98\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 98, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 98\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 98, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 98\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 98, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "CODSTA-CPP-23", "level": "note", "message": { "text": "The global function 'LeaveCriticalSection' is called without scope resolution operator '::'", "markdown": "**\\[Line 98\\] The global function 'LeaveCriticalSection' is called without scope resolution operator '::'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 98, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 99\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 99, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 99\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 99, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 99\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 99, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 99\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 99, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 99\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 99, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 99\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 99, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 99\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 99, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 99\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 99, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 99\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 99, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "HICPP-4_2_1-a", "level": "warning", "message": { "text": "A 'U' suffix shall be applied to constant: 20", "markdown": "**\\[Line 100\\] A 'U' suffix shall be applied to constant: 20**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 100, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "CDD-DUPC", "level": "warning", "message": { "text": "Duplicated code: 'SLEEP(STEP);'", "markdown": "**\\[Line 100\\] Duplicated code: 'SLEEP\\(STEP\\);'**  \n  \nReview duplicate in:&nbsp;DeadLock.cpp&nbsp;(100)  \nReview duplicate in:&nbsp;DeadLock.cpp&nbsp;(128)" }, "partialFingerprints": { "violType": "DupViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 100, "startColumn": 4, "endColumn": 16 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "MISRA2008-5_0_4_a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used", "markdown": "**\\[Line 100\\] Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 100, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "AUTOSAR-M5_0_4-a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used", "markdown": "**\\[Line 100\\] Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 100, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "MISRA2004-10_1_a", "level": "warning", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used", "markdown": "**\\[Line 100\\] Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 100, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 100\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 100, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 100\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 100, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 100\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 100, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 100\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 100, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 100\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 100, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 100\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 100, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 100\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 100, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 100\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 100, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 100\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 100, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "CODSTA-CPP-23", "level": "note", "message": { "text": "The global function 'Sleep' is called without scope resolution operator '::'", "markdown": "**\\[Line 100\\] The global function 'Sleep' is called without scope resolution operator '::'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 100, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "PB-11", "level": "warning", "message": { "text": "The type 'int' of function argument number '1' does not match declared type 'unsigned long'", "markdown": "**\\[Line 100\\] The type 'int' of function argument number '1' does not match declared type 'unsigned long'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 100, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 101\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 101, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 101\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 101, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 101\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 101, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 101\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 101, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 101\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 101, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 101\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 101, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-25_b", "level": "warning", "message": { "text": "'return' statement should be used with parenthesis", "markdown": "**\\[Line 102\\] 'return' statement should be used with parenthesis**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 102, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "AUTOSAR-M2_13_3-a", "level": "error", "message": { "text": "A 'U' suffix shall be applied to constant: 0", "markdown": "**\\[Line 102\\] A 'U' suffix shall be applied to constant: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 102, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "CODSTA-68", "level": "warning", "message": { "text": "A 'U' suffix shall be applied to constant: 0", "markdown": "**\\[Line 102\\] A 'U' suffix shall be applied to constant: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 102, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "MISRA2008-2_13_3", "level": "error", "message": { "text": "A 'U' suffix shall be applied to constant: 0", "markdown": "**\\[Line 102\\] A 'U' suffix shall be applied to constant: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 102, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "HICPP-4_2_1-a", "level": "warning", "message": { "text": "A 'U' suffix shall be applied to constant: 0", "markdown": "**\\[Line 102\\] A 'U' suffix shall be applied to constant: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 102, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "CDD-DUPC", "level": "warning", "message": { "text": "Duplicated code: 'return 0;'", "markdown": "**\\[Line 102\\] Duplicated code: 'return 0;'**  \n  \nReview duplicate in:&nbsp;DeadLock.cpp&nbsp;(102)  \nReview duplicate in:&nbsp;DeadLock.cpp&nbsp;(130)  \nReview duplicate in:&nbsp;NullPointer.cpp&nbsp;(13)  \nReview duplicate in:&nbsp;Shapes.hpp&nbsp;(19)" }, "partialFingerprints": { "violType": "DupViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 102, "startColumn": 3, "endColumn": 12 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "PB-05", "level": "warning", "message": { "text": "Function 'Physics_Thread' has declared return type 'unsigned long' but returns value of type 'int'", "markdown": "**\\[Line 102\\] Function 'Physics\\_Thread' has declared return type 'unsigned long' but returns value of type 'int'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 102, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "MISRA2008-5_0_4_a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function return statement shall not be used", "markdown": "**\\[Line 102\\] Implicit conversion between signed and unsigned type in the function return statement shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 102, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "AUTOSAR-M5_0_4-a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function return statement shall not be used", "markdown": "**\\[Line 102\\] Implicit conversion between signed and unsigned type in the function return statement shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 102, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "MISRA2004-10_1_a", "level": "warning", "message": { "text": "Implicit conversion between signed and unsigned type in the function return statement shall not be used", "markdown": "**\\[Line 102\\] Implicit conversion between signed and unsigned type in the function return statement shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 102, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 102\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 102, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 102\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 102, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 102\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 102, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 102\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 102, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 102\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 102, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 102\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 102, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 103\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 103, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 103\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 103, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 103\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 103, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "BD-TRS-LOCK", "level": "error", "message": { "text": "Unreleased lock: changePositionMutex", "markdown": "**\\[Line 103\\] Unreleased lock: changePositionMutex**  \n  \nDeadLock.cpp&nbsp;(90)&nbsp;:&nbsp;while \\(\\!exitGame\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\!exitGame \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nDeadLock.cpp&nbsp;(91)&nbsp;:&nbsp;for\\(int i = 0; i < participantsCount; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < participantsCount\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \n**Point where the lock is acquired**  \nDeadLock.cpp&nbsp;(92)&nbsp;:&nbsp;LOCK\\_ACQUIRE\\(changePositionMutex\\);  \nDeadLock.cpp&nbsp;(93)&nbsp;:&nbsp;Point& position = participants\\[i\\]\\->getPosition\\(\\);  \n        Shapes.hpp&nbsp;(10)&nbsp;:&nbsp;Point& getPosition\\(\\) \\{ return \\_position; \\}  \nDeadLock.cpp&nbsp;(94)&nbsp;:&nbsp;position\\.translate\\(\\*velocityArray\\[i\\]\\);  \n        Point.hpp&nbsp;(15)&nbsp;:&nbsp;\\_x \\+= vector\\.\\_x;  \n        Point.hpp&nbsp;(16)&nbsp;:&nbsp;\\_y \\+= vector\\.\\_y;  \nDeadLock.cpp&nbsp;(95)&nbsp;:&nbsp;ring\\.contains\\(\\.\\.\\.\\)  \n        Shapes.hpp&nbsp;(29)&nbsp;:&nbsp;getPosition\\(\\)  \n                Shapes.hpp&nbsp;(10)&nbsp;:&nbsp;Point& getPosition\\(\\) \\{ return \\_position; \\}  \n        Shapes.hpp&nbsp;(29)&nbsp;:&nbsp;point\\.squareDistanceTo\\(\\.\\.\\.\\)  \n                Point.hpp&nbsp;(21)&nbsp;:&nbsp;return \\(\\(\\_x \\- point\\.\\_x\\) \\* \\(\\_x \\- point\\.\\_x\\)\\) \\+ \\(\\(\\_y \\- point\\.\\_y\\) \\* \\(\\_y \\- point\\.\\_y\\)\\);  \n        Shapes.hpp&nbsp;(29)&nbsp;:&nbsp;return point\\.squareDistanceTo\\(getPosition\\(\\)\\) <= \\(\\_radius \\* \\_radius\\);  \nDeadLock.cpp&nbsp;(95)&nbsp;:&nbsp;assertion\\(ring\\.contains\\(position\\), \"Participant is out of ring\"\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;assertion\\(\\) throws const char \\*_  \n        DeadLock.cpp&nbsp;(60)&nbsp;:&nbsp;if \\(\\!condition\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\!condition \\(assuming true\\)_  \n        DeadLock.cpp&nbsp;(61)&nbsp;:&nbsp;throw message;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point prior to which the lock is to be released**&nbsp;  \nDeadLock.cpp&nbsp;(103)&nbsp;:&nbsp;\\}" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 103, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "CERT_C-CON01-a", "level": "warning", "message": { "text": "Unreleased lock: changePositionMutex", "markdown": "**\\[Line 103\\] Unreleased lock: changePositionMutex**  \n  \nDeadLock.cpp&nbsp;(90)&nbsp;:&nbsp;while \\(\\!exitGame\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\!exitGame \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nDeadLock.cpp&nbsp;(91)&nbsp;:&nbsp;for\\(int i = 0; i < participantsCount; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < participantsCount\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \n**Point where the lock is acquired**  \nDeadLock.cpp&nbsp;(92)&nbsp;:&nbsp;LOCK\\_ACQUIRE\\(changePositionMutex\\);  \nDeadLock.cpp&nbsp;(93)&nbsp;:&nbsp;Point& position = participants\\[i\\]\\->getPosition\\(\\);  \n        Shapes.hpp&nbsp;(10)&nbsp;:&nbsp;Point& getPosition\\(\\) \\{ return \\_position; \\}  \nDeadLock.cpp&nbsp;(94)&nbsp;:&nbsp;position\\.translate\\(\\*velocityArray\\[i\\]\\);  \n        Point.hpp&nbsp;(15)&nbsp;:&nbsp;\\_x \\+= vector\\.\\_x;  \n        Point.hpp&nbsp;(16)&nbsp;:&nbsp;\\_y \\+= vector\\.\\_y;  \nDeadLock.cpp&nbsp;(95)&nbsp;:&nbsp;ring\\.contains\\(\\.\\.\\.\\)  \n        Shapes.hpp&nbsp;(29)&nbsp;:&nbsp;getPosition\\(\\)  \n                Shapes.hpp&nbsp;(10)&nbsp;:&nbsp;Point& getPosition\\(\\) \\{ return \\_position; \\}  \n        Shapes.hpp&nbsp;(29)&nbsp;:&nbsp;point\\.squareDistanceTo\\(\\.\\.\\.\\)  \n                Point.hpp&nbsp;(21)&nbsp;:&nbsp;return \\(\\(\\_x \\- point\\.\\_x\\) \\* \\(\\_x \\- point\\.\\_x\\)\\) \\+ \\(\\(\\_y \\- point\\.\\_y\\) \\* \\(\\_y \\- point\\.\\_y\\)\\);  \n        Shapes.hpp&nbsp;(29)&nbsp;:&nbsp;return point\\.squareDistanceTo\\(getPosition\\(\\)\\) <= \\(\\_radius \\* \\_radius\\);  \nDeadLock.cpp&nbsp;(95)&nbsp;:&nbsp;assertion\\(ring\\.contains\\(position\\), \"Participant is out of ring\"\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;assertion\\(\\) throws const char \\*_  \n        DeadLock.cpp&nbsp;(60)&nbsp;:&nbsp;if \\(\\!condition\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\!condition \\(assuming true\\)_  \n        DeadLock.cpp&nbsp;(61)&nbsp;:&nbsp;throw message;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point prior to which the lock is to be released**&nbsp;  \nDeadLock.cpp&nbsp;(103)&nbsp;:&nbsp;\\}" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 103, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "MISRA2012-DIR-4_13_d", "level": "warning", "message": { "text": "Unreleased lock: changePositionMutex", "markdown": "**\\[Line 103\\] Unreleased lock: changePositionMutex**  \n  \nDeadLock.cpp&nbsp;(90)&nbsp;:&nbsp;while \\(\\!exitGame\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\!exitGame \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nDeadLock.cpp&nbsp;(91)&nbsp;:&nbsp;for\\(int i = 0; i < participantsCount; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < participantsCount\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \n**Point where the lock is acquired**  \nDeadLock.cpp&nbsp;(92)&nbsp;:&nbsp;LOCK\\_ACQUIRE\\(changePositionMutex\\);  \nDeadLock.cpp&nbsp;(93)&nbsp;:&nbsp;Point& position = participants\\[i\\]\\->getPosition\\(\\);  \n        Shapes.hpp&nbsp;(10)&nbsp;:&nbsp;Point& getPosition\\(\\) \\{ return \\_position; \\}  \nDeadLock.cpp&nbsp;(94)&nbsp;:&nbsp;position\\.translate\\(\\*velocityArray\\[i\\]\\);  \n        Point.hpp&nbsp;(15)&nbsp;:&nbsp;\\_x \\+= vector\\.\\_x;  \n        Point.hpp&nbsp;(16)&nbsp;:&nbsp;\\_y \\+= vector\\.\\_y;  \nDeadLock.cpp&nbsp;(95)&nbsp;:&nbsp;ring\\.contains\\(\\.\\.\\.\\)  \n        Shapes.hpp&nbsp;(29)&nbsp;:&nbsp;getPosition\\(\\)  \n                Shapes.hpp&nbsp;(10)&nbsp;:&nbsp;Point& getPosition\\(\\) \\{ return \\_position; \\}  \n        Shapes.hpp&nbsp;(29)&nbsp;:&nbsp;point\\.squareDistanceTo\\(\\.\\.\\.\\)  \n                Point.hpp&nbsp;(21)&nbsp;:&nbsp;return \\(\\(\\_x \\- point\\.\\_x\\) \\* \\(\\_x \\- point\\.\\_x\\)\\) \\+ \\(\\(\\_y \\- point\\.\\_y\\) \\* \\(\\_y \\- point\\.\\_y\\)\\);  \n        Shapes.hpp&nbsp;(29)&nbsp;:&nbsp;return point\\.squareDistanceTo\\(getPosition\\(\\)\\) <= \\(\\_radius \\* \\_radius\\);  \nDeadLock.cpp&nbsp;(95)&nbsp;:&nbsp;assertion\\(ring\\.contains\\(position\\), \"Participant is out of ring\"\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;assertion\\(\\) throws const char \\*_  \n        DeadLock.cpp&nbsp;(60)&nbsp;:&nbsp;if \\(\\!condition\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\!condition \\(assuming true\\)_  \n        DeadLock.cpp&nbsp;(61)&nbsp;:&nbsp;throw message;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point prior to which the lock is to be released**&nbsp;  \nDeadLock.cpp&nbsp;(103)&nbsp;:&nbsp;\\}" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 103, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "MISRAC2012-DIR_4_13-d", "level": "warning", "message": { "text": "Unreleased lock: changePositionMutex", "markdown": "**\\[Line 103\\] Unreleased lock: changePositionMutex**  \n  \nDeadLock.cpp&nbsp;(90)&nbsp;:&nbsp;while \\(\\!exitGame\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\!exitGame \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nDeadLock.cpp&nbsp;(91)&nbsp;:&nbsp;for\\(int i = 0; i < participantsCount; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < participantsCount\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \n**Point where the lock is acquired**  \nDeadLock.cpp&nbsp;(92)&nbsp;:&nbsp;LOCK\\_ACQUIRE\\(changePositionMutex\\);  \nDeadLock.cpp&nbsp;(93)&nbsp;:&nbsp;Point& position = participants\\[i\\]\\->getPosition\\(\\);  \n        Shapes.hpp&nbsp;(10)&nbsp;:&nbsp;Point& getPosition\\(\\) \\{ return \\_position; \\}  \nDeadLock.cpp&nbsp;(94)&nbsp;:&nbsp;position\\.translate\\(\\*velocityArray\\[i\\]\\);  \n        Point.hpp&nbsp;(15)&nbsp;:&nbsp;\\_x \\+= vector\\.\\_x;  \n        Point.hpp&nbsp;(16)&nbsp;:&nbsp;\\_y \\+= vector\\.\\_y;  \nDeadLock.cpp&nbsp;(95)&nbsp;:&nbsp;ring\\.contains\\(\\.\\.\\.\\)  \n        Shapes.hpp&nbsp;(29)&nbsp;:&nbsp;getPosition\\(\\)  \n                Shapes.hpp&nbsp;(10)&nbsp;:&nbsp;Point& getPosition\\(\\) \\{ return \\_position; \\}  \n        Shapes.hpp&nbsp;(29)&nbsp;:&nbsp;point\\.squareDistanceTo\\(\\.\\.\\.\\)  \n                Point.hpp&nbsp;(21)&nbsp;:&nbsp;return \\(\\(\\_x \\- point\\.\\_x\\) \\* \\(\\_x \\- point\\.\\_x\\)\\) \\+ \\(\\(\\_y \\- point\\.\\_y\\) \\* \\(\\_y \\- point\\.\\_y\\)\\);  \n        Shapes.hpp&nbsp;(29)&nbsp;:&nbsp;return point\\.squareDistanceTo\\(getPosition\\(\\)\\) <= \\(\\_radius \\* \\_radius\\);  \nDeadLock.cpp&nbsp;(95)&nbsp;:&nbsp;assertion\\(ring\\.contains\\(position\\), \"Participant is out of ring\"\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;assertion\\(\\) throws const char \\*_  \n        DeadLock.cpp&nbsp;(60)&nbsp;:&nbsp;if \\(\\!condition\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\!condition \\(assuming true\\)_  \n        DeadLock.cpp&nbsp;(61)&nbsp;:&nbsp;throw message;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point prior to which the lock is to be released**&nbsp;  \nDeadLock.cpp&nbsp;(103)&nbsp;:&nbsp;\\}" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 103, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "JSF-207", "level": "warning", "message": { "text": "Do not define the 'currentCameraVelocity' global variable", "markdown": "**\\[Line 108\\] Do not define the 'currentCameraVelocity' global variable**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 108, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-CPP-82", "level": "warning", "message": { "text": "Do not define the 'currentCameraVelocity' global variable", "markdown": "**\\[Line 108\\] Do not define the 'currentCameraVelocity' global variable**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 108, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "OWASP2019-API9-e", "level": "warning", "message": { "text": "Global variable 'currentCameraVelocity' has external linkage and is not declared in the header", "markdown": "**\\[Line 108\\] Global variable 'currentCameraVelocity' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 108, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-A3_3_1-a", "level": "error", "message": { "text": "Global variable 'currentCameraVelocity' has external linkage and is not declared in the header", "markdown": "**\\[Line 108\\] Global variable 'currentCameraVelocity' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 108, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-137", "level": "warning", "message": { "text": "Global variable 'currentCameraVelocity' has external linkage and is not declared in the header", "markdown": "**\\[Line 108\\] Global variable 'currentCameraVelocity' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 108, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "MISRA-023", "level": "warning", "message": { "text": "Global variable 'currentCameraVelocity' has external linkage and is not declared in the header", "markdown": "**\\[Line 108\\] Global variable 'currentCameraVelocity' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 108, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "MISRA2008-3_3_1", "level": "error", "message": { "text": "Global variable 'currentCameraVelocity' has external linkage and is not declared in the header", "markdown": "**\\[Line 108\\] Global variable 'currentCameraVelocity' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 108, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CERT_C-DCL15-a", "level": "warning", "message": { "text": "Global variable 'currentCameraVelocity' has external linkage and is not declared in the header", "markdown": "**\\[Line 108\\] Global variable 'currentCameraVelocity' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 108, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "MISRA2004-8_10", "level": "warning", "message": { "text": "Global variable 'currentCameraVelocity' has external linkage and is not declared in the header", "markdown": "**\\[Line 108\\] Global variable 'currentCameraVelocity' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 108, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "MISRA-022", "level": "note", "message": { "text": "Global variable 'currentCameraVelocity' is declared", "markdown": "**\\[Line 108\\] Global variable 'currentCameraVelocity' is declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 108, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-18", "level": "warning", "message": { "text": "Naming convention not followed: currentCameraVelocity", "markdown": "**\\[Line 108\\] Naming convention not followed: currentCameraVelocity**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 108, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-22", "level": "warning", "message": { "text": "Naming convention not followed: currentCameraVelocity", "markdown": "**\\[Line 108\\] Naming convention not followed: currentCameraVelocity**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 108, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 108\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 108, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 108\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 108, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 108\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 108, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "INIT-04", "level": "error", "message": { "text": "Pointer variable 'currentCameraVelocity' uninitialized when declared", "markdown": "**\\[Line 108\\] Pointer variable 'currentCameraVelocity' uninitialized when declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 108, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-HN-34", "level": "warning", "message": { "text": "The 'currentCameraVelocity' identifier should have the 'p' prefix", "markdown": "**\\[Line 108\\] The 'currentCameraVelocity' identifier should have the 'p' prefix**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 108, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'currentCameraVelocity' variable should be commented", "markdown": "**\\[Line 108\\] The 'currentCameraVelocity' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 108, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'currentCameraVelocity' variable should be commented", "markdown": "**\\[Line 108\\] The 'currentCameraVelocity' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 108, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'currentCameraVelocity' should be composed only of lowercase letters", "markdown": "**\\[Line 108\\] The name 'currentCameraVelocity' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 108, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'currentCameraVelocity' should be composed only of lowercase letters", "markdown": "**\\[Line 108\\] The name 'currentCameraVelocity' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 108, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-062", "level": "warning", "message": { "text": "The operator '*', used for 'currentCameraVelocity' declaration, should be directly connected with the type", "markdown": "**\\[Line 108\\] The operator '\\*', used for 'currentCameraVelocity' declaration, should be directly connected with the type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 108, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "FORMAT-32", "level": "warning", "message": { "text": "The operator '*', used for 'currentCameraVelocity' declaration, should be directly connected with the type", "markdown": "**\\[Line 108\\] The operator '\\*', used for 'currentCameraVelocity' declaration, should be directly connected with the type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 108, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The variable of pointer or array type is declared: currentCameraVelocity", "markdown": "**\\[Line 108\\] The variable of pointer or array type is declared: currentCameraVelocity**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 108, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The variable of pointer type is declared: currentCameraVelocity", "markdown": "**\\[Line 108\\] The variable of pointer type is declared: currentCameraVelocity**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 108, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "HICPP-3_3_1-a", "level": "warning", "message": { "text": "Use of variable \"currentCameraVelocity\" with static storage duration is not allowed", "markdown": "**\\[Line 108\\] Use of variable \"currentCameraVelocity\" with static storage duration is not allowed**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 108, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'draw' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 110\\] Function 'draw' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'draw' has Essential Complexity value: 1", "markdown": "**\\[Line 110\\] Function 'draw' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "OWASP2019-API9-e", "level": "warning", "message": { "text": "Function 'draw' has external linkage and is not declared in the header", "markdown": "**\\[Line 110\\] Function 'draw' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A3_3_1-a", "level": "error", "message": { "text": "Function 'draw' has external linkage and is not declared in the header", "markdown": "**\\[Line 110\\] Function 'draw' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-137", "level": "warning", "message": { "text": "Function 'draw' has external linkage and is not declared in the header", "markdown": "**\\[Line 110\\] Function 'draw' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA-023", "level": "warning", "message": { "text": "Function 'draw' has external linkage and is not declared in the header", "markdown": "**\\[Line 110\\] Function 'draw' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2008-3_3_1", "level": "error", "message": { "text": "Function 'draw' has external linkage and is not declared in the header", "markdown": "**\\[Line 110\\] Function 'draw' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CERT_C-DCL15-a", "level": "warning", "message": { "text": "Function 'draw' has external linkage and is not declared in the header", "markdown": "**\\[Line 110\\] Function 'draw' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2004-8_10", "level": "warning", "message": { "text": "Function 'draw' has external linkage and is not declared in the header", "markdown": "**\\[Line 110\\] Function 'draw' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2008-0_1_8_b", "level": "error", "message": { "text": "Function 'draw' is empty", "markdown": "**\\[Line 110\\] Function 'draw' is empty**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "OPT-32_b", "level": "warning", "message": { "text": "Function 'draw' is empty", "markdown": "**\\[Line 110\\] Function 'draw' is empty**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-M0_1_8-b", "level": "error", "message": { "text": "Function 'draw' is empty", "markdown": "**\\[Line 110\\] Function 'draw' is empty**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-17", "level": "warning", "message": { "text": "Naming convention not followed: draw", "markdown": "**\\[Line 110\\] Naming convention not followed: draw**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 110\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 110\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 110\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A0_1_4-a", "level": "error", "message": { "text": "Parameter 'object' is not used", "markdown": "**\\[Line 110\\] Parameter 'object' is not used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "OPT-03", "level": "error", "message": { "text": "Parameter 'object' is not used", "markdown": "**\\[Line 110\\] Parameter 'object' is not used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "OPT-31", "level": "warning", "message": { "text": "Parameter 'object' is not used", "markdown": "**\\[Line 110\\] Parameter 'object' is not used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "MISRA2008-0_1_11", "level": "error", "message": { "text": "Parameter 'object' is not used", "markdown": "**\\[Line 110\\] Parameter 'object' is not used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "PARSER-REMARK", "level": "note", "message": { "text": "R-828: parameter \"object\" was never referenced", "markdown": "**\\[Line 110\\] R\\-828: parameter \"object\" was never referenced**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "FORMAT-28", "level": "warning", "message": { "text": "Return type is not placed in line before function 'draw'", "markdown": "**\\[Line 110\\] Return type is not placed in line before function 'draw'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "FORMAT-47_a", "level": "warning", "message": { "text": "The 'const' qualifier should be placed on the right hand side of the type", "markdown": "**\\[Line 110\\] The 'const' qualifier should be placed on the right hand side of the type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "HICPP-7_1_4-a", "level": "warning", "message": { "text": "The 'const' qualifier should be placed on the right hand side of the type", "markdown": "**\\[Line 110\\] The 'const' qualifier should be placed on the right hand side of the type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "AUTOSAR-A15_4_4-a", "level": "error", "message": { "text": "The 'draw' function should be declared 'noexcept'", "markdown": "**\\[Line 110\\] The 'draw' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-MCPP-09", "level": "warning", "message": { "text": "The 'draw' function should be declared 'noexcept'", "markdown": "**\\[Line 110\\] The 'draw' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'draw' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 110\\] The 'draw' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'draw' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 110\\] The 'draw' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-HN-34", "level": "warning", "message": { "text": "The 'object' identifier should have the 'p' prefix", "markdown": "**\\[Line 110\\] The 'object' identifier should have the 'p' prefix**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'object' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 110\\] The 'object' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'object' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 110\\] The 'object' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'draw' function is not preceded by a comment", "markdown": "**\\[Line 110\\] The definition of the 'draw' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'draw' function is not preceded by a comment", "markdown": "**\\[Line 110\\] The definition of the 'draw' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-062", "level": "warning", "message": { "text": "The operator '*', used for 'object' declaration, should be directly connected with the type", "markdown": "**\\[Line 110\\] The operator '\\*', used for 'object' declaration, should be directly connected with the type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "FORMAT-32", "level": "warning", "message": { "text": "The operator '*', used for 'object' declaration, should be directly connected with the type", "markdown": "**\\[Line 110\\] The operator '\\*', used for 'object' declaration, should be directly connected with the type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The parameter of pointer or array type is declared: object", "markdown": "**\\[Line 110\\] The parameter of pointer or array type is declared: object**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The parameter of pointer type is declared: object", "markdown": "**\\[Line 110\\] The parameter of pointer type is declared: object**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 110, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 111\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 111, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 111\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 111, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 111\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 111, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 112\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 112, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 112\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 112, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 112\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 112, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 112\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 112, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 112\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 112, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 112\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 112, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 113\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 113, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 113\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 113, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 113\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 113, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'Render_Thread' has Cyclomatic Complexity value: 3", "markdown": "**\\[Line 115\\] Function 'Render\\_Thread' has Cyclomatic Complexity value: 3**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 115, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'Render_Thread' has Essential Complexity value: 1", "markdown": "**\\[Line 115\\] Function 'Render\\_Thread' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 115, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "OWASP2019-API9-e", "level": "warning", "message": { "text": "Function 'Render_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 115\\] Function 'Render\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 115, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A3_3_1-a", "level": "error", "message": { "text": "Function 'Render_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 115\\] Function 'Render\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 115, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-137", "level": "warning", "message": { "text": "Function 'Render_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 115\\] Function 'Render\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 115, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA-023", "level": "warning", "message": { "text": "Function 'Render_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 115\\] Function 'Render\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 115, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2008-3_3_1", "level": "error", "message": { "text": "Function 'Render_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 115\\] Function 'Render\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 115, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CERT_C-DCL15-a", "level": "warning", "message": { "text": "Function 'Render_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 115\\] Function 'Render\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 115, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2004-8_10", "level": "warning", "message": { "text": "Function 'Render_Thread' has external linkage and is not declared in the header", "markdown": "**\\[Line 115\\] Function 'Render\\_Thread' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 115, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 115\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 115, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 115\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 115, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 115\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 115, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'Render_Thread' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 115\\] The 'Render\\_Thread' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 115, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'Render_Thread' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 115\\] The 'Render\\_Thread' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 115, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'Render_Thread' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 115\\] The 'Render\\_Thread' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 115, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'Render_Thread' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 115\\] The 'Render\\_Thread' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 115, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'Render_Thread' function is not preceded by a comment", "markdown": "**\\[Line 115\\] The definition of the 'Render\\_Thread' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 115, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'Render_Thread' function is not preceded by a comment", "markdown": "**\\[Line 115\\] The definition of the 'Render\\_Thread' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 115, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-34", "level": "warning", "message": { "text": "The incorrect global function name Render_Thread was found", "markdown": "**\\[Line 115\\] The incorrect global function name Render\\_Thread was found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 115, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'Render_Thread' should be composed only of lowercase letters", "markdown": "**\\[Line 115\\] The name 'Render\\_Thread' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 115, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'Render_Thread' should be composed only of lowercase letters", "markdown": "**\\[Line 115\\] The name 'Render\\_Thread' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 115, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The parameter of pointer or array type is declared", "markdown": "**\\[Line 115\\] The parameter of pointer or array type is declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 115, "startColumn": 22, "endColumn": 23 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The parameter of pointer type is declared", "markdown": "**\\[Line 115\\] The parameter of pointer type is declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 115, "startColumn": 22, "endColumn": 23 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 116\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 116, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 116\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 116, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 116\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 116, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 116\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 116, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CODSTA-83", "level": "warning", "message": { "text": "A loop does not have a fixed upper nor lower bound", "markdown": "**\\[Line 117\\] A loop does not have a fixed upper nor lower bound**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 117, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "CODSTA-46", "level": "note", "message": { "text": "In 'Render_Thread' function use positive logic rather than negative logic whenever possible", "markdown": "**\\[Line 117\\] In 'Render\\_Thread' function use positive logic rather than negative logic whenever possible**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 117, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 117\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 117, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 117\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 117, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 117\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 117, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 117\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 117, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 117\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 117, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 117\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 117, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-43", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 117\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 117, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_b", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 117\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 117, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 117\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 117, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 117\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 117, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 117\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 117, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-02", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 117\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 117, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-M5_3_1-a", "level": "error", "message": { "text": "The operand of logical operator '!' has 'int' type instead of 'bool' type", "markdown": "**\\[Line 117\\] The operand of logical operator '\\!' has 'int' type instead of 'bool' type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 117, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "CODSTA-CPP-67", "level": "warning", "message": { "text": "The operand of logical operator '!' has 'int' type instead of 'bool' type", "markdown": "**\\[Line 117\\] The operand of logical operator '\\!' has 'int' type instead of 'bool' type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 117, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "MISRA2008-5_3_1", "level": "error", "message": { "text": "The operand of logical operator '!' has 'int' type instead of 'bool' type", "markdown": "**\\[Line 117\\] The operand of logical operator '\\!' has 'int' type instead of 'bool' type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 117, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "MISRA2004-12_6_a", "level": "warning", "message": { "text": "The operand of logical operator '!' is not 'effectively Boolean'", "markdown": "**\\[Line 117\\] The operand of logical operator '\\!' is not 'effectively Boolean'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 117, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 118\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 118, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 118\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 118, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 118\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 118, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 118\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 118, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 118\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 118, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 118\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 118, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 118\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 118, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 118\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 118, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 118\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 118, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "CODSTA-CPP-23", "level": "note", "message": { "text": "The global function 'EnterCriticalSection' is called without scope resolution operator '::'", "markdown": "**\\[Line 118\\] The global function 'EnterCriticalSection' is called without scope resolution operator '::'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 118, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "BD-TRS-DIFCS", "level": "error", "message": { "text": "\"ring\" is used in two critical sections in context of single method, using one critical section will improve atomicity of operation", "markdown": "**\\[Line 119\\] \"ring\" is used in two critical sections in context of single method, using one critical section will improve atomicity of operation**  \n  \nDeadLock.cpp&nbsp;(117)&nbsp;:&nbsp;while \\(\\!exitGame\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\!exitGame \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nDeadLock.cpp&nbsp;(118)&nbsp;:&nbsp;LOCK\\_ACQUIRE\\(changePositionMutex\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Locking: &changePositionMutex_  \n**Usage of \"ring\" in first critical section**  \nDeadLock.cpp&nbsp;(119)&nbsp;:&nbsp;ring\\.getPosition\\(\\)  \n        Shapes.hpp&nbsp;(10)&nbsp;:&nbsp;Point& getPosition\\(\\) \\{ return \\_position; \\}  \nDeadLock.cpp&nbsp;(119)&nbsp;:&nbsp;ring\\.getPosition\\(\\)\\.translate\\(\\*currentCameraVelocity\\);  \n        Point.hpp&nbsp;(15)&nbsp;:&nbsp;\\_x \\+= vector\\.\\_x;  \n        Point.hpp&nbsp;(16)&nbsp;:&nbsp;\\_y \\+= vector\\.\\_y;  \nDeadLock.cpp&nbsp;(120)&nbsp;:&nbsp;LOCK\\_RELEASE\\(changePositionMutex\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Unlocking: &changePositionMutex_  \nDeadLock.cpp&nbsp;(122)&nbsp;:&nbsp;for\\(int i = 0; i < participantsCount; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < participantsCount\\) \\(assuming false\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Not entering the loop_  \nDeadLock.cpp&nbsp;(128)&nbsp;:&nbsp;SLEEP\\(STEP\\);  \nDeadLock.cpp&nbsp;(117)&nbsp;:&nbsp;while \\(\\!exitGame\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\!exitGame \\(true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nDeadLock.cpp&nbsp;(118)&nbsp;:&nbsp;LOCK\\_ACQUIRE\\(changePositionMutex\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Locking: &changePositionMutex_  \n**Usage of \"ring\" in second critical section**&nbsp;  \nDeadLock.cpp&nbsp;(119)&nbsp;:&nbsp;ring\\.getPosition\\(\\)" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 119, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 119\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 119, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 119\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 119, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 119\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 119, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 119\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 119, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 119\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 119, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 119\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 119, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 119\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 119, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 119\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 119, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 119\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 119, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 120\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 120, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 120\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 120, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 120\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 120, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 120\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 120, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 120\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 120, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 120\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 120, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 120\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 120, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 120\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 120, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 120\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 120, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "CODSTA-CPP-23", "level": "note", "message": { "text": "The global function 'LeaveCriticalSection' is called without scope resolution operator '::'", "markdown": "**\\[Line 120\\] The global function 'LeaveCriticalSection' is called without scope resolution operator '::'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 120, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "PORT-13", "level": "warning", "message": { "text": "'i' shall be declared as unsigned int or signed int", "markdown": "**\\[Line 122\\] 'i' shall be declared as unsigned int or signed int**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-83", "level": "warning", "message": { "text": "A loop does not have a fixed upper nor lower bound", "markdown": "**\\[Line 122\\] A loop does not have a fixed upper nor lower bound**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "FORMAT-12", "level": "warning", "message": { "text": "Between conditional statement 'for' and its opening parenthesis '(' should be exactly one space", "markdown": "**\\[Line 122\\] Between conditional statement 'for' and its opening parenthesis '\\(' should be exactly one space**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 122\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 122\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 122\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 122\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 122\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 122\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 122\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 122\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 122\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 122\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "FORMAT-43", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 122\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_b", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 122\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "OPT-04", "level": "warning", "message": { "text": "Postfix operator applied to variable 'i'; prefer prefix type", "markdown": "**\\[Line 122\\] Postfix operator applied to variable 'i'; prefer prefix type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 122\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 122\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 122\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-02", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 122\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'i' variable should be commented", "markdown": "**\\[Line 122\\] The 'i' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'i' variable should be commented", "markdown": "**\\[Line 122\\] The 'i' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 122\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 122\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 122\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 122\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 122\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 122\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 122\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A8_5_2-a", "level": "error", "message": { "text": "The definition of the 'i' variable should contain a braced initializer", "markdown": "**\\[Line 122\\] The definition of the 'i' variable should contain a braced initializer**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-MCPP-38", "level": "warning", "message": { "text": "The definition of the 'i' variable should contain a braced initializer", "markdown": "**\\[Line 122\\] The definition of the 'i' variable should contain a braced initializer**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 122\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 122\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "OPT-10", "level": "warning", "message": { "text": "Variable \"i\" declaration was found in control statement", "markdown": "**\\[Line 122\\] Variable \"i\" declaration was found in control statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 122, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 123\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 123, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 123\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 123, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 123\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 123, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 123\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 123, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 123\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 123, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 123\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 123, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 123\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 123, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 123\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 123, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 123\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 123, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 123\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 123, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 123\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 123, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 123\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 123, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "CODSTA-CPP-23", "level": "note", "message": { "text": "The global function 'EnterCriticalSection' is called without scope resolution operator '::'", "markdown": "**\\[Line 123\\] The global function 'EnterCriticalSection' is called without scope resolution operator '::'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 123, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "BD-TRS-DIFCS", "level": "error", "message": { "text": "\"currentCameraVelocity\" is used in two critical sections in context of single method, using one critical section will improve atomicity of operation", "markdown": "**\\[Line 124\\] \"currentCameraVelocity\" is used in two critical sections in context of single method, using one critical section will improve atomicity of operation**  \n  \nDeadLock.cpp&nbsp;(117)&nbsp;:&nbsp;while \\(\\!exitGame\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\!exitGame \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nDeadLock.cpp&nbsp;(118)&nbsp;:&nbsp;LOCK\\_ACQUIRE\\(changePositionMutex\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Locking: &changePositionMutex_  \nDeadLock.cpp&nbsp;(119)&nbsp;:&nbsp;ring\\.getPosition\\(\\)  \n        Shapes.hpp&nbsp;(10)&nbsp;:&nbsp;Point& getPosition\\(\\) \\{ return \\_position; \\}  \n**Usage of \"currentCameraVelocity\" in first critical section**  \nDeadLock.cpp&nbsp;(119)&nbsp;:&nbsp;ring\\.getPosition\\(\\)\\.translate\\(\\*currentCameraVelocity\\);  \n        Point.hpp&nbsp;(15)&nbsp;:&nbsp;\\_x \\+= vector\\.\\_x;  \n        Point.hpp&nbsp;(16)&nbsp;:&nbsp;\\_y \\+= vector\\.\\_y;  \nDeadLock.cpp&nbsp;(120)&nbsp;:&nbsp;LOCK\\_RELEASE\\(changePositionMutex\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Unlocking: &changePositionMutex_  \nDeadLock.cpp&nbsp;(122)&nbsp;:&nbsp;for\\(int i = 0; i < participantsCount; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < participantsCount\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nDeadLock.cpp&nbsp;(123)&nbsp;:&nbsp;LOCK\\_ACQUIRE\\(changePositionMutex\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Locking: &changePositionMutex_  \nDeadLock.cpp&nbsp;(124)&nbsp;:&nbsp;participants\\[i\\]\\->getPosition\\(\\)  \n        Shapes.hpp&nbsp;(10)&nbsp;:&nbsp;Point& getPosition\\(\\) \\{ return \\_position; \\}  \n**Usage of \"currentCameraVelocity\" in second critical section**&nbsp;  \nDeadLock.cpp&nbsp;(124)&nbsp;:&nbsp;participants\\[i\\]\\->getPosition\\(\\)\\.translate\\(\\*currentCameraVelocity\\);" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 124, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "BD-TRS-DIFCS", "level": "error", "message": { "text": "\"participants\" is used in two critical sections in context of single method, using one critical section will improve atomicity of operation", "markdown": "**\\[Line 124\\] \"participants\" is used in two critical sections in context of single method, using one critical section will improve atomicity of operation**  \n  \nDeadLock.cpp&nbsp;(117)&nbsp;:&nbsp;while \\(\\!exitGame\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\!exitGame \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nDeadLock.cpp&nbsp;(118)&nbsp;:&nbsp;LOCK\\_ACQUIRE\\(changePositionMutex\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Locking: &changePositionMutex_  \nDeadLock.cpp&nbsp;(119)&nbsp;:&nbsp;ring\\.getPosition\\(\\)  \n        Shapes.hpp&nbsp;(10)&nbsp;:&nbsp;Point& getPosition\\(\\) \\{ return \\_position; \\}  \nDeadLock.cpp&nbsp;(119)&nbsp;:&nbsp;ring\\.getPosition\\(\\)\\.translate\\(\\*currentCameraVelocity\\);  \n        Point.hpp&nbsp;(15)&nbsp;:&nbsp;\\_x \\+= vector\\.\\_x;  \n        Point.hpp&nbsp;(16)&nbsp;:&nbsp;\\_y \\+= vector\\.\\_y;  \nDeadLock.cpp&nbsp;(120)&nbsp;:&nbsp;LOCK\\_RELEASE\\(changePositionMutex\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Unlocking: &changePositionMutex_  \nDeadLock.cpp&nbsp;(122)&nbsp;:&nbsp;for\\(int i = 0; i < participantsCount; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < participantsCount\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nDeadLock.cpp&nbsp;(123)&nbsp;:&nbsp;LOCK\\_ACQUIRE\\(changePositionMutex\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Locking: &changePositionMutex_  \n**Usage of \"participants\" in first critical section**  \nDeadLock.cpp&nbsp;(124)&nbsp;:&nbsp;participants\\[i\\]\\->getPosition\\(\\)  \n        Shapes.hpp&nbsp;(10)&nbsp;:&nbsp;Point& getPosition\\(\\) \\{ return \\_position; \\}  \nDeadLock.cpp&nbsp;(124)&nbsp;:&nbsp;participants\\[i\\]\\->getPosition\\(\\)\\.translate\\(\\*currentCameraVelocity\\);  \n        Point.hpp&nbsp;(15)&nbsp;:&nbsp;\\_x \\+= vector\\.\\_x;  \n        Point.hpp&nbsp;(16)&nbsp;:&nbsp;\\_y \\+= vector\\.\\_y;  \nDeadLock.cpp&nbsp;(125)&nbsp;:&nbsp;LOCK\\_RELEASE\\(changePositionMutex\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Unlocking: &changePositionMutex_  \nDeadLock.cpp&nbsp;(126)&nbsp;:&nbsp;draw\\(participants\\[i\\]\\);  \nDeadLock.cpp&nbsp;(122)&nbsp;:&nbsp;for\\(int i = 0; i < participantsCount; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < participantsCount\\) \\(true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nDeadLock.cpp&nbsp;(123)&nbsp;:&nbsp;LOCK\\_ACQUIRE\\(changePositionMutex\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Locking: &changePositionMutex_  \n**Usage of \"participants\" in second critical section**&nbsp;  \nDeadLock.cpp&nbsp;(124)&nbsp;:&nbsp;participants\\[i\\]\\->getPosition\\(\\)" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 124, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 124\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 124, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 124\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 124, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 124\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 124, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 124\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 124, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 124\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 124, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 124\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 124, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 124\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 124, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 124\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 124, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 124\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 124, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 124\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 124, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 124\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 124, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 124\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 124, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 125\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 125, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 125\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 125, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 125\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 125, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 125\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 125, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 125\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 125, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 125\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 125, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 125\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 125, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 125\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 125, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 125\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 125, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 125\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 125, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 125\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 125, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 125\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 125, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "CODSTA-CPP-23", "level": "note", "message": { "text": "The global function 'LeaveCriticalSection' is called without scope resolution operator '::'", "markdown": "**\\[Line 125\\] The global function 'LeaveCriticalSection' is called without scope resolution operator '::'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 125, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 126\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 126, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 126\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 126, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 126\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 126, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 126\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 126, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 126\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 126, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 126\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 126, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 126\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 126, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 126\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 126, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 126\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 126, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 126\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 126, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 126\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 126, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 126\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 126, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 127\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 127, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 127\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 127, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 127\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 127, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 127\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 127, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 127\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 127, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 127\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 127, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 127\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 127, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 127\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 127, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 127\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 127, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "HICPP-4_2_1-a", "level": "warning", "message": { "text": "A 'U' suffix shall be applied to constant: 20", "markdown": "**\\[Line 128\\] A 'U' suffix shall be applied to constant: 20**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 128, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "MISRA2008-5_0_4_a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used", "markdown": "**\\[Line 128\\] Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 128, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "AUTOSAR-M5_0_4-a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used", "markdown": "**\\[Line 128\\] Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 128, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "MISRA2004-10_1_a", "level": "warning", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used", "markdown": "**\\[Line 128\\] Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 128, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 128\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 128, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 128\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 128, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 128\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 128, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 128\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 128, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 128\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 128, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 128\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 128, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 128\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 128, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 128\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 128, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 128\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 128, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "CODSTA-CPP-23", "level": "note", "message": { "text": "The global function 'Sleep' is called without scope resolution operator '::'", "markdown": "**\\[Line 128\\] The global function 'Sleep' is called without scope resolution operator '::'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 128, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "PB-11", "level": "warning", "message": { "text": "The type 'int' of function argument number '1' does not match declared type 'unsigned long'", "markdown": "**\\[Line 128\\] The type 'int' of function argument number '1' does not match declared type 'unsigned long'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 128, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 129\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 129, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 129\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 129, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 129\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 129, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 129\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 129, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 129\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 129, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 129\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 129, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-25_b", "level": "warning", "message": { "text": "'return' statement should be used with parenthesis", "markdown": "**\\[Line 130\\] 'return' statement should be used with parenthesis**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 130, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "AUTOSAR-M2_13_3-a", "level": "error", "message": { "text": "A 'U' suffix shall be applied to constant: 0", "markdown": "**\\[Line 130\\] A 'U' suffix shall be applied to constant: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 130, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "CODSTA-68", "level": "warning", "message": { "text": "A 'U' suffix shall be applied to constant: 0", "markdown": "**\\[Line 130\\] A 'U' suffix shall be applied to constant: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 130, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "MISRA2008-2_13_3", "level": "error", "message": { "text": "A 'U' suffix shall be applied to constant: 0", "markdown": "**\\[Line 130\\] A 'U' suffix shall be applied to constant: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 130, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "HICPP-4_2_1-a", "level": "warning", "message": { "text": "A 'U' suffix shall be applied to constant: 0", "markdown": "**\\[Line 130\\] A 'U' suffix shall be applied to constant: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 130, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "PB-05", "level": "warning", "message": { "text": "Function 'Render_Thread' has declared return type 'unsigned long' but returns value of type 'int'", "markdown": "**\\[Line 130\\] Function 'Render\\_Thread' has declared return type 'unsigned long' but returns value of type 'int'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 130, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "MISRA2008-5_0_4_a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function return statement shall not be used", "markdown": "**\\[Line 130\\] Implicit conversion between signed and unsigned type in the function return statement shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 130, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "AUTOSAR-M5_0_4-a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function return statement shall not be used", "markdown": "**\\[Line 130\\] Implicit conversion between signed and unsigned type in the function return statement shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 130, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "MISRA2004-10_1_a", "level": "warning", "message": { "text": "Implicit conversion between signed and unsigned type in the function return statement shall not be used", "markdown": "**\\[Line 130\\] Implicit conversion between signed and unsigned type in the function return statement shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 130, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 130\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 130, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 130\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 130, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 130\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 130, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 130\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 130, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 130\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 130, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 130\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 130, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 131\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 131, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 131\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 131, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 131\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 131, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-098", "level": "warning", "message": { "text": "Do not declare the 'runGameThreads' function in the global namespace", "markdown": "**\\[Line 134\\] Do not declare the 'runGameThreads' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-M7_3_1-a", "level": "error", "message": { "text": "Do not declare the 'runGameThreads' function in the global namespace", "markdown": "**\\[Line 134\\] Do not declare the 'runGameThreads' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "CODSTA-CPP-36", "level": "warning", "message": { "text": "Do not declare the 'runGameThreads' function in the global namespace", "markdown": "**\\[Line 134\\] Do not declare the 'runGameThreads' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2008-7_3_1", "level": "error", "message": { "text": "Do not declare the 'runGameThreads' function in the global namespace", "markdown": "**\\[Line 134\\] Do not declare the 'runGameThreads' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'runGameThreads' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 134\\] Function 'runGameThreads' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'runGameThreads' has Essential Complexity value: 1", "markdown": "**\\[Line 134\\] Function 'runGameThreads' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "OWASP2019-API9-e", "level": "warning", "message": { "text": "Function 'runGameThreads' has external linkage and is not declared in the header", "markdown": "**\\[Line 134\\] Function 'runGameThreads' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-A3_3_1-a", "level": "error", "message": { "text": "Function 'runGameThreads' has external linkage and is not declared in the header", "markdown": "**\\[Line 134\\] Function 'runGameThreads' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "JSF-137", "level": "warning", "message": { "text": "Function 'runGameThreads' has external linkage and is not declared in the header", "markdown": "**\\[Line 134\\] Function 'runGameThreads' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA-023", "level": "warning", "message": { "text": "Function 'runGameThreads' has external linkage and is not declared in the header", "markdown": "**\\[Line 134\\] Function 'runGameThreads' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2008-3_3_1", "level": "error", "message": { "text": "Function 'runGameThreads' has external linkage and is not declared in the header", "markdown": "**\\[Line 134\\] Function 'runGameThreads' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "CERT_C-DCL15-a", "level": "warning", "message": { "text": "Function 'runGameThreads' has external linkage and is not declared in the header", "markdown": "**\\[Line 134\\] Function 'runGameThreads' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2004-8_10", "level": "warning", "message": { "text": "Function 'runGameThreads' has external linkage and is not declared in the header", "markdown": "**\\[Line 134\\] Function 'runGameThreads' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "NAMING-17", "level": "warning", "message": { "text": "Naming convention not followed: runGameThreads", "markdown": "**\\[Line 134\\] Naming convention not followed: runGameThreads**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "FORMAT-28", "level": "warning", "message": { "text": "Return type is not placed in line before function 'runGameThreads'", "markdown": "**\\[Line 134\\] Return type is not placed in line before function 'runGameThreads'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "GLOBAL-UNUSEDFUNC", "level": "warning", "message": { "text": "The 'runGameThreads' function is not used in the testing scope", "markdown": "**\\[Line 134\\] The 'runGameThreads' function is not used in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-M0_1_10-a", "level": "warning", "message": { "text": "The 'runGameThreads' function is not used in the testing scope", "markdown": "**\\[Line 134\\] The 'runGameThreads' function is not used in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2008-0_1_10_b", "level": "error", "message": { "text": "The 'runGameThreads' function is not used in the testing scope", "markdown": "**\\[Line 134\\] The 'runGameThreads' function is not used in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'runGameThreads' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 134\\] The 'runGameThreads' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'runGameThreads' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 134\\] The 'runGameThreads' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'runGameThreads' function is not preceded by a comment", "markdown": "**\\[Line 134\\] The definition of the 'runGameThreads' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'runGameThreads' function is not preceded by a comment", "markdown": "**\\[Line 134\\] The definition of the 'runGameThreads' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'runGameThreads' should be composed only of lowercase letters", "markdown": "**\\[Line 134\\] The name 'runGameThreads' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'runGameThreads' should be composed only of lowercase letters", "markdown": "**\\[Line 134\\] The name 'runGameThreads' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "CDD-DUPM", "level": "error", "message": { "text": "Duplicated function: 'void runGameThreads ( ) { exitGame = 0 ; THREAD thread1 ,...'", "markdown": "**\\[Line 135\\] Duplicated function: 'void runGameThreads \\( \\) \\{ exitGame = 0 ; THREAD thread1 ,\\.\\.\\.'**  \n  \nReview duplicate in:&nbsp;DeadLock.cpp&nbsp;(135)  \nReview duplicate in:&nbsp;DeadLock.cpp&nbsp;(145)" }, "partialFingerprints": { "violType": "DupViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 135, "startColumn": 1, "endLine": 142, "endColumn": 2 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 135\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 135, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CDD-DUPC", "level": "warning", "message": { "text": "Duplicated code: 'exitGame = 0;\tTHREAD thread1, thread2, thread3, thread4;\tTHR...'", "markdown": "**\\[Line 136\\] Duplicated code: 'exitGame = 0;\tTHREAD thread1, thread2, thread3, thread4;\tTHR\\.\\.\\.'**  \n  \nReview duplicate in:&nbsp;DeadLock.cpp&nbsp;(136)  \nReview duplicate in:&nbsp;DeadLock.cpp&nbsp;(146)" }, "partialFingerprints": { "violType": "DupViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 136, "startColumn": 2, "endLine": 141, "endColumn": 48 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "CODSTA-27", "level": "warning", "message": { "text": "Global variable 'exitGame' is modified in function 'runGameThreads'", "markdown": "**\\[Line 136\\] Global variable 'exitGame' is modified in function 'runGameThreads'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 136, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 136\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 136, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 136\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 136, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 136\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 136, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A7_1_7-c", "level": "error", "message": { "text": "Declare variable 'thread2' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread2' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "FORMAT-33", "level": "warning", "message": { "text": "Declare variable 'thread2' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread2' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "MISRA2008-8_0_1", "level": "error", "message": { "text": "Declare variable 'thread2' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread2' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "HICPP-7_1_1-b", "level": "warning", "message": { "text": "Declare variable 'thread2' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread2' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "AUTOSAR-M8_0_1-a", "level": "error", "message": { "text": "Declare variable 'thread2' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread2' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "CERT_C-DCL04-a", "level": "warning", "message": { "text": "Declare variable 'thread2' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread2' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "JSF-152", "level": "error", "message": { "text": "Declare variable 'thread2' in a separate line", "markdown": "**\\[Line 137\\] Declare variable 'thread2' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "AUTOSAR-A7_1_7-b", "level": "error", "message": { "text": "Declare variable 'thread2' in a separate line", "markdown": "**\\[Line 137\\] Declare variable 'thread2' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "HICPP-7_1_1-a", "level": "warning", "message": { "text": "Declare variable 'thread2' in a separate line", "markdown": "**\\[Line 137\\] Declare variable 'thread2' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "FORMAT-29", "level": "warning", "message": { "text": "Declare variable 'thread2' in a separate line", "markdown": "**\\[Line 137\\] Declare variable 'thread2' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "AUTOSAR-A7_1_7-c", "level": "error", "message": { "text": "Declare variable 'thread3' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread3' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "FORMAT-33", "level": "warning", "message": { "text": "Declare variable 'thread3' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread3' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "MISRA2008-8_0_1", "level": "error", "message": { "text": "Declare variable 'thread3' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread3' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "HICPP-7_1_1-b", "level": "warning", "message": { "text": "Declare variable 'thread3' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread3' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "AUTOSAR-M8_0_1-a", "level": "error", "message": { "text": "Declare variable 'thread3' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread3' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "CERT_C-DCL04-a", "level": "warning", "message": { "text": "Declare variable 'thread3' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread3' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "JSF-152", "level": "error", "message": { "text": "Declare variable 'thread3' in a separate line", "markdown": "**\\[Line 137\\] Declare variable 'thread3' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "AUTOSAR-A7_1_7-b", "level": "error", "message": { "text": "Declare variable 'thread3' in a separate line", "markdown": "**\\[Line 137\\] Declare variable 'thread3' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "HICPP-7_1_1-a", "level": "warning", "message": { "text": "Declare variable 'thread3' in a separate line", "markdown": "**\\[Line 137\\] Declare variable 'thread3' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "FORMAT-29", "level": "warning", "message": { "text": "Declare variable 'thread3' in a separate line", "markdown": "**\\[Line 137\\] Declare variable 'thread3' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "AUTOSAR-A7_1_7-c", "level": "error", "message": { "text": "Declare variable 'thread4' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread4' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "FORMAT-33", "level": "warning", "message": { "text": "Declare variable 'thread4' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread4' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "MISRA2008-8_0_1", "level": "error", "message": { "text": "Declare variable 'thread4' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread4' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "HICPP-7_1_1-b", "level": "warning", "message": { "text": "Declare variable 'thread4' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread4' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "AUTOSAR-M8_0_1-a", "level": "error", "message": { "text": "Declare variable 'thread4' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread4' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "CERT_C-DCL04-a", "level": "warning", "message": { "text": "Declare variable 'thread4' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread4' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "JSF-152", "level": "error", "message": { "text": "Declare variable 'thread4' in a separate line", "markdown": "**\\[Line 137\\] Declare variable 'thread4' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "AUTOSAR-A7_1_7-b", "level": "error", "message": { "text": "Declare variable 'thread4' in a separate line", "markdown": "**\\[Line 137\\] Declare variable 'thread4' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "HICPP-7_1_1-a", "level": "warning", "message": { "text": "Declare variable 'thread4' in a separate line", "markdown": "**\\[Line 137\\] Declare variable 'thread4' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "FORMAT-29", "level": "warning", "message": { "text": "Declare variable 'thread4' in a separate line", "markdown": "**\\[Line 137\\] Declare variable 'thread4' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "CERT_C-MSC13-a", "level": "warning", "message": { "text": "Local variable 'thread1' declared in function 'runGameThreads' is unnecessary", "markdown": "**\\[Line 137\\] Local variable 'thread1' declared in function 'runGameThreads' is unnecessary**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "OPT-06", "level": "warning", "message": { "text": "Local variable 'thread1' declared in function 'runGameThreads' is unnecessary", "markdown": "**\\[Line 137\\] Local variable 'thread1' declared in function 'runGameThreads' is unnecessary**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CERT_C-MSC13-a", "level": "warning", "message": { "text": "Local variable 'thread2' declared in function 'runGameThreads' is unnecessary", "markdown": "**\\[Line 137\\] Local variable 'thread2' declared in function 'runGameThreads' is unnecessary**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "OPT-06", "level": "warning", "message": { "text": "Local variable 'thread2' declared in function 'runGameThreads' is unnecessary", "markdown": "**\\[Line 137\\] Local variable 'thread2' declared in function 'runGameThreads' is unnecessary**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "CERT_C-MSC13-a", "level": "warning", "message": { "text": "Local variable 'thread3' declared in function 'runGameThreads' is unnecessary", "markdown": "**\\[Line 137\\] Local variable 'thread3' declared in function 'runGameThreads' is unnecessary**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "OPT-06", "level": "warning", "message": { "text": "Local variable 'thread3' declared in function 'runGameThreads' is unnecessary", "markdown": "**\\[Line 137\\] Local variable 'thread3' declared in function 'runGameThreads' is unnecessary**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "CERT_C-MSC13-a", "level": "warning", "message": { "text": "Local variable 'thread4' declared in function 'runGameThreads' is unnecessary", "markdown": "**\\[Line 137\\] Local variable 'thread4' declared in function 'runGameThreads' is unnecessary**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "OPT-06", "level": "warning", "message": { "text": "Local variable 'thread4' declared in function 'runGameThreads' is unnecessary", "markdown": "**\\[Line 137\\] Local variable 'thread4' declared in function 'runGameThreads' is unnecessary**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 137\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 137\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 137\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "INIT-04", "level": "error", "message": { "text": "Pointer variable 'thread1' uninitialized when declared", "markdown": "**\\[Line 137\\] Pointer variable 'thread1' uninitialized when declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "INIT-04", "level": "error", "message": { "text": "Pointer variable 'thread2' uninitialized when declared", "markdown": "**\\[Line 137\\] Pointer variable 'thread2' uninitialized when declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "INIT-04", "level": "error", "message": { "text": "Pointer variable 'thread3' uninitialized when declared", "markdown": "**\\[Line 137\\] Pointer variable 'thread3' uninitialized when declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "INIT-04", "level": "error", "message": { "text": "Pointer variable 'thread4' uninitialized when declared", "markdown": "**\\[Line 137\\] Pointer variable 'thread4' uninitialized when declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "AUTOSAR-M0_1_4-a", "level": "error", "message": { "text": "The 'thread1' variable has only one use", "markdown": "**\\[Line 137\\] The 'thread1' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "MISRA2008-0_1_4", "level": "error", "message": { "text": "The 'thread1' variable has only one use", "markdown": "**\\[Line 137\\] The 'thread1' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "GLOBAL-ONEUSEVAR", "level": "warning", "message": { "text": "The 'thread1' variable has only one use", "markdown": "**\\[Line 137\\] The 'thread1' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'thread1' variable should be commented", "markdown": "**\\[Line 137\\] The 'thread1' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'thread1' variable should be commented", "markdown": "**\\[Line 137\\] The 'thread1' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-M0_1_4-a", "level": "error", "message": { "text": "The 'thread2' variable has only one use", "markdown": "**\\[Line 137\\] The 'thread2' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "MISRA2008-0_1_4", "level": "error", "message": { "text": "The 'thread2' variable has only one use", "markdown": "**\\[Line 137\\] The 'thread2' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "GLOBAL-ONEUSEVAR", "level": "warning", "message": { "text": "The 'thread2' variable has only one use", "markdown": "**\\[Line 137\\] The 'thread2' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'thread2' variable should be commented", "markdown": "**\\[Line 137\\] The 'thread2' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'thread2' variable should be commented", "markdown": "**\\[Line 137\\] The 'thread2' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "AUTOSAR-M0_1_4-a", "level": "error", "message": { "text": "The 'thread3' variable has only one use", "markdown": "**\\[Line 137\\] The 'thread3' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "MISRA2008-0_1_4", "level": "error", "message": { "text": "The 'thread3' variable has only one use", "markdown": "**\\[Line 137\\] The 'thread3' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "GLOBAL-ONEUSEVAR", "level": "warning", "message": { "text": "The 'thread3' variable has only one use", "markdown": "**\\[Line 137\\] The 'thread3' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'thread3' variable should be commented", "markdown": "**\\[Line 137\\] The 'thread3' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'thread3' variable should be commented", "markdown": "**\\[Line 137\\] The 'thread3' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "AUTOSAR-M0_1_4-a", "level": "error", "message": { "text": "The 'thread4' variable has only one use", "markdown": "**\\[Line 137\\] The 'thread4' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "MISRA2008-0_1_4", "level": "error", "message": { "text": "The 'thread4' variable has only one use", "markdown": "**\\[Line 137\\] The 'thread4' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "GLOBAL-ONEUSEVAR", "level": "warning", "message": { "text": "The 'thread4' variable has only one use", "markdown": "**\\[Line 137\\] The 'thread4' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'thread4' variable should be commented", "markdown": "**\\[Line 137\\] The 'thread4' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'thread4' variable should be commented", "markdown": "**\\[Line 137\\] The 'thread4' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The variable of pointer or array type is declared: thread1", "markdown": "**\\[Line 137\\] The variable of pointer or array type is declared: thread1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The variable of pointer or array type is declared: thread2", "markdown": "**\\[Line 137\\] The variable of pointer or array type is declared: thread2**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The variable of pointer or array type is declared: thread3", "markdown": "**\\[Line 137\\] The variable of pointer or array type is declared: thread3**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The variable of pointer or array type is declared: thread4", "markdown": "**\\[Line 137\\] The variable of pointer or array type is declared: thread4**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The variable of pointer type is declared: thread1", "markdown": "**\\[Line 137\\] The variable of pointer type is declared: thread1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The variable of pointer type is declared: thread2", "markdown": "**\\[Line 137\\] The variable of pointer type is declared: thread2**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The variable of pointer type is declared: thread3", "markdown": "**\\[Line 137\\] The variable of pointer type is declared: thread3**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The variable of pointer type is declared: thread4", "markdown": "**\\[Line 137\\] The variable of pointer type is declared: thread4**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "PARSER-WARNING", "level": "warning", "message": { "text": "W-552: variable \"thread1\" was set but never used", "markdown": "**\\[Line 137\\] W\\-552: variable \"thread1\" was set but never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "PARSER-WARNING", "level": "warning", "message": { "text": "W-552: variable \"thread2\" was set but never used", "markdown": "**\\[Line 137\\] W\\-552: variable \"thread2\" was set but never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "PARSER-WARNING", "level": "warning", "message": { "text": "W-552: variable \"thread3\" was set but never used", "markdown": "**\\[Line 137\\] W\\-552: variable \"thread3\" was set but never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "PARSER-WARNING", "level": "warning", "message": { "text": "W-552: variable \"thread4\" was set but never used", "markdown": "**\\[Line 137\\] W\\-552: variable \"thread4\" was set but never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "HICPP-4_2_1-a", "level": "warning", "message": { "text": "A 'U' suffix shall be applied to constant: 0", "markdown": "**\\[Line 138\\] A 'U' suffix shall be applied to constant: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "HICPP-4_2_1-a", "level": "warning", "message": { "text": "A 'U' suffix shall be applied to constant: 0", "markdown": "**\\[Line 138\\] A 'U' suffix shall be applied to constant: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "CERT_CPP-EXP56-a", "level": "warning", "message": { "text": "Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage", "markdown": "**\\[Line 138\\] Do not assing the pointer to the function with C\\+\\+ language linkage to the pointer to the function with C language linkage**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "CODSTA-CPP-96", "level": "warning", "message": { "text": "Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage", "markdown": "**\\[Line 138\\] Do not assing the pointer to the function with C\\+\\+ language linkage to the pointer to the function with C language linkage**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "MISRA2008-5_0_4_a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used", "markdown": "**\\[Line 138\\] Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "AUTOSAR-M5_0_4-a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used", "markdown": "**\\[Line 138\\] Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "MISRA2004-10_1_a", "level": "warning", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used", "markdown": "**\\[Line 138\\] Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "MISRA2008-5_0_4_a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used", "markdown": "**\\[Line 138\\] Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "AUTOSAR-M5_0_4-a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used", "markdown": "**\\[Line 138\\] Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "MISRA2004-10_1_a", "level": "warning", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used", "markdown": "**\\[Line 138\\] Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 138\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 138\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 138\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-16_9", "level": "warning", "message": { "text": "Pointer to function 'GameLogic_Thread' should be preceded by '&' operator or followed by '()'", "markdown": "**\\[Line 138\\] Pointer to function 'GameLogic\\_Thread' should be preceded by '&' operator or followed by '\\(\\)'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "AUTOSAR-M8_4_4-a", "level": "error", "message": { "text": "Pointer to function 'GameLogic_Thread' should be preceded by '&' operator or followed by '()'", "markdown": "**\\[Line 138\\] Pointer to function 'GameLogic\\_Thread' should be preceded by '&' operator or followed by '\\(\\)'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "MISRA2008-8_4_4", "level": "error", "message": { "text": "Pointer to function 'GameLogic_Thread' should be preceded by '&' operator or followed by '()'", "markdown": "**\\[Line 138\\] Pointer to function 'GameLogic\\_Thread' should be preceded by '&' operator or followed by '\\(\\)'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "AUTOSAR-A4_10_1-b", "level": "error", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 138\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "HICPP-2_5_3-a", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 138\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "CODSTA-MCPP-04", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 138\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "AUTOSAR-A4_10_1-b", "level": "error", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 138\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "HICPP-2_5_3-a", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 138\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "CODSTA-MCPP-04", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 138\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "CODSTA-CPP-23", "level": "note", "message": { "text": "The global function 'CreateThread' is called without scope resolution operator '::'", "markdown": "**\\[Line 138\\] The global function 'CreateThread' is called without scope resolution operator '::'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "PB-11", "level": "warning", "message": { "text": "The type 'DWORD (void *)*' of function argument number '3' does not match declared type 'DWORD (LPVOID)*'", "markdown": "**\\[Line 138\\] The type 'DWORD \\(void \\*\\)\\*' of function argument number '3' does not match declared type 'DWORD \\(LPVOID\\)\\*'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "PB-11", "level": "warning", "message": { "text": "The type 'int' of function argument number '2' does not match declared type 'unsigned long long'", "markdown": "**\\[Line 138\\] The type 'int' of function argument number '2' does not match declared type 'unsigned long long'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "PB-11", "level": "warning", "message": { "text": "The type 'int' of function argument number '5' does not match declared type 'unsigned long'", "markdown": "**\\[Line 138\\] The type 'int' of function argument number '5' does not match declared type 'unsigned long'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '1' argument to function 'CreateThread' ", "markdown": "**\\[Line 138\\] The value '0' is passed as '1' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '1' argument to function 'CreateThread' ", "markdown": "**\\[Line 138\\] The value '0' is passed as '1' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '1' argument to function 'CreateThread' ", "markdown": "**\\[Line 138\\] The value '0' is passed as '1' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '4' argument to function 'CreateThread' ", "markdown": "**\\[Line 138\\] The value '0' is passed as '4' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '4' argument to function 'CreateThread' ", "markdown": "**\\[Line 138\\] The value '0' is passed as '4' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '4' argument to function 'CreateThread' ", "markdown": "**\\[Line 138\\] The value '0' is passed as '4' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '6' argument to function 'CreateThread' ", "markdown": "**\\[Line 138\\] The value '0' is passed as '6' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '6' argument to function 'CreateThread' ", "markdown": "**\\[Line 138\\] The value '0' is passed as '6' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '6' argument to function 'CreateThread' ", "markdown": "**\\[Line 138\\] The value '0' is passed as '6' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "MISRA2012-RULE-2_2_b", "level": "error", "message": { "text": "Value of \"thread1\" is never used", "markdown": "**\\[Line 138\\] Value of \"thread1\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 1 } } } ] }, { "ruleId": "MISRAC2012-RULE_2_2-b", "level": "error", "message": { "text": "Value of \"thread1\" is never used", "markdown": "**\\[Line 138\\] Value of \"thread1\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 1 } } } ] }, { "ruleId": "AUTOSAR-A0_1_1-a", "level": "error", "message": { "text": "Value of \"thread1\" is never used", "markdown": "**\\[Line 138\\] Value of \"thread1\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 1 } } } ] }, { "ruleId": "CERT_C-DCL22-a", "level": "warning", "message": { "text": "Value of \"thread1\" is never used", "markdown": "**\\[Line 138\\] Value of \"thread1\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 1 } } } ] }, { "ruleId": "MISRA2008-0_1_6", "level": "error", "message": { "text": "Value of \"thread1\" is never used", "markdown": "**\\[Line 138\\] Value of \"thread1\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 1 } } } ] }, { "ruleId": "BD-PB-VOVR", "level": "warning", "message": { "text": "Value of \"thread1\" is never used", "markdown": "**\\[Line 138\\] Value of \"thread1\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 1 } } } ] }, { "ruleId": "HICPP-4_2_1-a", "level": "warning", "message": { "text": "A 'U' suffix shall be applied to constant: 0", "markdown": "**\\[Line 139\\] A 'U' suffix shall be applied to constant: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "HICPP-4_2_1-a", "level": "warning", "message": { "text": "A 'U' suffix shall be applied to constant: 0", "markdown": "**\\[Line 139\\] A 'U' suffix shall be applied to constant: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "CERT_CPP-EXP56-a", "level": "warning", "message": { "text": "Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage", "markdown": "**\\[Line 139\\] Do not assing the pointer to the function with C\\+\\+ language linkage to the pointer to the function with C language linkage**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "CODSTA-CPP-96", "level": "warning", "message": { "text": "Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage", "markdown": "**\\[Line 139\\] Do not assing the pointer to the function with C\\+\\+ language linkage to the pointer to the function with C language linkage**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "MISRA2008-5_0_4_a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used", "markdown": "**\\[Line 139\\] Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "AUTOSAR-M5_0_4-a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used", "markdown": "**\\[Line 139\\] Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "MISRA2004-10_1_a", "level": "warning", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used", "markdown": "**\\[Line 139\\] Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "MISRA2008-5_0_4_a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used", "markdown": "**\\[Line 139\\] Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "AUTOSAR-M5_0_4-a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used", "markdown": "**\\[Line 139\\] Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "MISRA2004-10_1_a", "level": "warning", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used", "markdown": "**\\[Line 139\\] Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 139\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 139\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 139\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-16_9", "level": "warning", "message": { "text": "Pointer to function 'Controller_Thread' should be preceded by '&' operator or followed by '()'", "markdown": "**\\[Line 139\\] Pointer to function 'Controller\\_Thread' should be preceded by '&' operator or followed by '\\(\\)'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "AUTOSAR-M8_4_4-a", "level": "error", "message": { "text": "Pointer to function 'Controller_Thread' should be preceded by '&' operator or followed by '()'", "markdown": "**\\[Line 139\\] Pointer to function 'Controller\\_Thread' should be preceded by '&' operator or followed by '\\(\\)'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "MISRA2008-8_4_4", "level": "error", "message": { "text": "Pointer to function 'Controller_Thread' should be preceded by '&' operator or followed by '()'", "markdown": "**\\[Line 139\\] Pointer to function 'Controller\\_Thread' should be preceded by '&' operator or followed by '\\(\\)'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "AUTOSAR-A4_10_1-b", "level": "error", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 139\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "HICPP-2_5_3-a", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 139\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "CODSTA-MCPP-04", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 139\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "AUTOSAR-A4_10_1-b", "level": "error", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 139\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "HICPP-2_5_3-a", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 139\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "CODSTA-MCPP-04", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 139\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "CODSTA-CPP-23", "level": "note", "message": { "text": "The global function 'CreateThread' is called without scope resolution operator '::'", "markdown": "**\\[Line 139\\] The global function 'CreateThread' is called without scope resolution operator '::'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "PB-11", "level": "warning", "message": { "text": "The type 'DWORD (void *)*' of function argument number '3' does not match declared type 'DWORD (LPVOID)*'", "markdown": "**\\[Line 139\\] The type 'DWORD \\(void \\*\\)\\*' of function argument number '3' does not match declared type 'DWORD \\(LPVOID\\)\\*'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "PB-11", "level": "warning", "message": { "text": "The type 'int' of function argument number '2' does not match declared type 'unsigned long long'", "markdown": "**\\[Line 139\\] The type 'int' of function argument number '2' does not match declared type 'unsigned long long'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "PB-11", "level": "warning", "message": { "text": "The type 'int' of function argument number '5' does not match declared type 'unsigned long'", "markdown": "**\\[Line 139\\] The type 'int' of function argument number '5' does not match declared type 'unsigned long'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '1' argument to function 'CreateThread' ", "markdown": "**\\[Line 139\\] The value '0' is passed as '1' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '1' argument to function 'CreateThread' ", "markdown": "**\\[Line 139\\] The value '0' is passed as '1' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '1' argument to function 'CreateThread' ", "markdown": "**\\[Line 139\\] The value '0' is passed as '1' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '4' argument to function 'CreateThread' ", "markdown": "**\\[Line 139\\] The value '0' is passed as '4' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '4' argument to function 'CreateThread' ", "markdown": "**\\[Line 139\\] The value '0' is passed as '4' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '4' argument to function 'CreateThread' ", "markdown": "**\\[Line 139\\] The value '0' is passed as '4' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '6' argument to function 'CreateThread' ", "markdown": "**\\[Line 139\\] The value '0' is passed as '6' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '6' argument to function 'CreateThread' ", "markdown": "**\\[Line 139\\] The value '0' is passed as '6' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '6' argument to function 'CreateThread' ", "markdown": "**\\[Line 139\\] The value '0' is passed as '6' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "BD-PB-VOVR", "level": "warning", "message": { "text": "Value of \"thread2\" is never used", "markdown": "**\\[Line 139\\] Value of \"thread2\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 1 } } } ] }, { "ruleId": "MISRA2012-RULE-2_2_b", "level": "error", "message": { "text": "Value of \"thread2\" is never used", "markdown": "**\\[Line 139\\] Value of \"thread2\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 1 } } } ] }, { "ruleId": "MISRAC2012-RULE_2_2-b", "level": "error", "message": { "text": "Value of \"thread2\" is never used", "markdown": "**\\[Line 139\\] Value of \"thread2\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 1 } } } ] }, { "ruleId": "AUTOSAR-A0_1_1-a", "level": "error", "message": { "text": "Value of \"thread2\" is never used", "markdown": "**\\[Line 139\\] Value of \"thread2\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 1 } } } ] }, { "ruleId": "CERT_C-DCL22-a", "level": "warning", "message": { "text": "Value of \"thread2\" is never used", "markdown": "**\\[Line 139\\] Value of \"thread2\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 1 } } } ] }, { "ruleId": "MISRA2008-0_1_6", "level": "error", "message": { "text": "Value of \"thread2\" is never used", "markdown": "**\\[Line 139\\] Value of \"thread2\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 1 } } } ] }, { "ruleId": "HICPP-4_2_1-a", "level": "warning", "message": { "text": "A 'U' suffix shall be applied to constant: 0", "markdown": "**\\[Line 140\\] A 'U' suffix shall be applied to constant: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "HICPP-4_2_1-a", "level": "warning", "message": { "text": "A 'U' suffix shall be applied to constant: 0", "markdown": "**\\[Line 140\\] A 'U' suffix shall be applied to constant: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 49, "endColumn": 50 } } } ] }, { "ruleId": "CERT_CPP-EXP56-a", "level": "warning", "message": { "text": "Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage", "markdown": "**\\[Line 140\\] Do not assing the pointer to the function with C\\+\\+ language linkage to the pointer to the function with C language linkage**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "CODSTA-CPP-96", "level": "warning", "message": { "text": "Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage", "markdown": "**\\[Line 140\\] Do not assing the pointer to the function with C\\+\\+ language linkage to the pointer to the function with C language linkage**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "MISRA2008-5_0_4_a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used", "markdown": "**\\[Line 140\\] Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "AUTOSAR-M5_0_4-a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used", "markdown": "**\\[Line 140\\] Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "MISRA2004-10_1_a", "level": "warning", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used", "markdown": "**\\[Line 140\\] Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "MISRA2008-5_0_4_a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used", "markdown": "**\\[Line 140\\] Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 49, "endColumn": 50 } } } ] }, { "ruleId": "AUTOSAR-M5_0_4-a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used", "markdown": "**\\[Line 140\\] Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 49, "endColumn": 50 } } } ] }, { "ruleId": "MISRA2004-10_1_a", "level": "warning", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used", "markdown": "**\\[Line 140\\] Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 49, "endColumn": 50 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 140\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 140\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 140\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-16_9", "level": "warning", "message": { "text": "Pointer to function 'Physics_Thread' should be preceded by '&' operator or followed by '()'", "markdown": "**\\[Line 140\\] Pointer to function 'Physics\\_Thread' should be preceded by '&' operator or followed by '\\(\\)'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "AUTOSAR-M8_4_4-a", "level": "error", "message": { "text": "Pointer to function 'Physics_Thread' should be preceded by '&' operator or followed by '()'", "markdown": "**\\[Line 140\\] Pointer to function 'Physics\\_Thread' should be preceded by '&' operator or followed by '\\(\\)'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "MISRA2008-8_4_4", "level": "error", "message": { "text": "Pointer to function 'Physics_Thread' should be preceded by '&' operator or followed by '()'", "markdown": "**\\[Line 140\\] Pointer to function 'Physics\\_Thread' should be preceded by '&' operator or followed by '\\(\\)'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "AUTOSAR-A4_10_1-b", "level": "error", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 140\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "HICPP-2_5_3-a", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 140\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "CODSTA-MCPP-04", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 140\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "AUTOSAR-A4_10_1-b", "level": "error", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 140\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 49, "endColumn": 50 } } } ] }, { "ruleId": "HICPP-2_5_3-a", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 140\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 49, "endColumn": 50 } } } ] }, { "ruleId": "CODSTA-MCPP-04", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 140\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 49, "endColumn": 50 } } } ] }, { "ruleId": "CODSTA-CPP-23", "level": "note", "message": { "text": "The global function 'CreateThread' is called without scope resolution operator '::'", "markdown": "**\\[Line 140\\] The global function 'CreateThread' is called without scope resolution operator '::'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "PB-11", "level": "warning", "message": { "text": "The type 'DWORD (void *)*' of function argument number '3' does not match declared type 'DWORD (LPVOID)*'", "markdown": "**\\[Line 140\\] The type 'DWORD \\(void \\*\\)\\*' of function argument number '3' does not match declared type 'DWORD \\(LPVOID\\)\\*'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "PB-11", "level": "warning", "message": { "text": "The type 'int' of function argument number '2' does not match declared type 'unsigned long long'", "markdown": "**\\[Line 140\\] The type 'int' of function argument number '2' does not match declared type 'unsigned long long'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "PB-11", "level": "warning", "message": { "text": "The type 'int' of function argument number '5' does not match declared type 'unsigned long'", "markdown": "**\\[Line 140\\] The type 'int' of function argument number '5' does not match declared type 'unsigned long'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '1' argument to function 'CreateThread' ", "markdown": "**\\[Line 140\\] The value '0' is passed as '1' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '1' argument to function 'CreateThread' ", "markdown": "**\\[Line 140\\] The value '0' is passed as '1' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '1' argument to function 'CreateThread' ", "markdown": "**\\[Line 140\\] The value '0' is passed as '1' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '4' argument to function 'CreateThread' ", "markdown": "**\\[Line 140\\] The value '0' is passed as '4' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 49, "endColumn": 50 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '4' argument to function 'CreateThread' ", "markdown": "**\\[Line 140\\] The value '0' is passed as '4' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 49, "endColumn": 50 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '4' argument to function 'CreateThread' ", "markdown": "**\\[Line 140\\] The value '0' is passed as '4' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 49, "endColumn": 50 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '6' argument to function 'CreateThread' ", "markdown": "**\\[Line 140\\] The value '0' is passed as '6' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 49, "endColumn": 50 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '6' argument to function 'CreateThread' ", "markdown": "**\\[Line 140\\] The value '0' is passed as '6' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 49, "endColumn": 50 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '6' argument to function 'CreateThread' ", "markdown": "**\\[Line 140\\] The value '0' is passed as '6' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 49, "endColumn": 50 } } } ] }, { "ruleId": "MISRA2012-RULE-2_2_b", "level": "error", "message": { "text": "Value of \"thread3\" is never used", "markdown": "**\\[Line 140\\] Value of \"thread3\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 1 } } } ] }, { "ruleId": "MISRAC2012-RULE_2_2-b", "level": "error", "message": { "text": "Value of \"thread3\" is never used", "markdown": "**\\[Line 140\\] Value of \"thread3\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 1 } } } ] }, { "ruleId": "AUTOSAR-A0_1_1-a", "level": "error", "message": { "text": "Value of \"thread3\" is never used", "markdown": "**\\[Line 140\\] Value of \"thread3\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 1 } } } ] }, { "ruleId": "CERT_C-DCL22-a", "level": "warning", "message": { "text": "Value of \"thread3\" is never used", "markdown": "**\\[Line 140\\] Value of \"thread3\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 1 } } } ] }, { "ruleId": "MISRA2008-0_1_6", "level": "error", "message": { "text": "Value of \"thread3\" is never used", "markdown": "**\\[Line 140\\] Value of \"thread3\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 1 } } } ] }, { "ruleId": "BD-PB-VOVR", "level": "warning", "message": { "text": "Value of \"thread3\" is never used", "markdown": "**\\[Line 140\\] Value of \"thread3\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 1 } } } ] }, { "ruleId": "HICPP-4_2_1-a", "level": "warning", "message": { "text": "A 'U' suffix shall be applied to constant: 0", "markdown": "**\\[Line 141\\] A 'U' suffix shall be applied to constant: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "HICPP-4_2_1-a", "level": "warning", "message": { "text": "A 'U' suffix shall be applied to constant: 0", "markdown": "**\\[Line 141\\] A 'U' suffix shall be applied to constant: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 47, "endColumn": 48 } } } ] }, { "ruleId": "CERT_CPP-EXP56-a", "level": "warning", "message": { "text": "Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage", "markdown": "**\\[Line 141\\] Do not assing the pointer to the function with C\\+\\+ language linkage to the pointer to the function with C language linkage**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "CODSTA-CPP-96", "level": "warning", "message": { "text": "Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage", "markdown": "**\\[Line 141\\] Do not assing the pointer to the function with C\\+\\+ language linkage to the pointer to the function with C language linkage**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "MISRA2008-5_0_4_a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used", "markdown": "**\\[Line 141\\] Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "AUTOSAR-M5_0_4-a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used", "markdown": "**\\[Line 141\\] Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "MISRA2004-10_1_a", "level": "warning", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used", "markdown": "**\\[Line 141\\] Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "MISRA2008-5_0_4_a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used", "markdown": "**\\[Line 141\\] Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 47, "endColumn": 48 } } } ] }, { "ruleId": "AUTOSAR-M5_0_4-a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used", "markdown": "**\\[Line 141\\] Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 47, "endColumn": 48 } } } ] }, { "ruleId": "MISRA2004-10_1_a", "level": "warning", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used", "markdown": "**\\[Line 141\\] Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 47, "endColumn": 48 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 141\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 141\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 141\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-16_9", "level": "warning", "message": { "text": "Pointer to function 'Render_Thread' should be preceded by '&' operator or followed by '()'", "markdown": "**\\[Line 141\\] Pointer to function 'Render\\_Thread' should be preceded by '&' operator or followed by '\\(\\)'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "AUTOSAR-M8_4_4-a", "level": "error", "message": { "text": "Pointer to function 'Render_Thread' should be preceded by '&' operator or followed by '()'", "markdown": "**\\[Line 141\\] Pointer to function 'Render\\_Thread' should be preceded by '&' operator or followed by '\\(\\)'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "MISRA2008-8_4_4", "level": "error", "message": { "text": "Pointer to function 'Render_Thread' should be preceded by '&' operator or followed by '()'", "markdown": "**\\[Line 141\\] Pointer to function 'Render\\_Thread' should be preceded by '&' operator or followed by '\\(\\)'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "AUTOSAR-A4_10_1-b", "level": "error", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 141\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "HICPP-2_5_3-a", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 141\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "CODSTA-MCPP-04", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 141\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "AUTOSAR-A4_10_1-b", "level": "error", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 141\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 47, "endColumn": 48 } } } ] }, { "ruleId": "HICPP-2_5_3-a", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 141\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 47, "endColumn": 48 } } } ] }, { "ruleId": "CODSTA-MCPP-04", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 141\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 47, "endColumn": 48 } } } ] }, { "ruleId": "CODSTA-CPP-23", "level": "note", "message": { "text": "The global function 'CreateThread' is called without scope resolution operator '::'", "markdown": "**\\[Line 141\\] The global function 'CreateThread' is called without scope resolution operator '::'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "PB-11", "level": "warning", "message": { "text": "The type 'DWORD (void *)*' of function argument number '3' does not match declared type 'DWORD (LPVOID)*'", "markdown": "**\\[Line 141\\] The type 'DWORD \\(void \\*\\)\\*' of function argument number '3' does not match declared type 'DWORD \\(LPVOID\\)\\*'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "PB-11", "level": "warning", "message": { "text": "The type 'int' of function argument number '2' does not match declared type 'unsigned long long'", "markdown": "**\\[Line 141\\] The type 'int' of function argument number '2' does not match declared type 'unsigned long long'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "PB-11", "level": "warning", "message": { "text": "The type 'int' of function argument number '5' does not match declared type 'unsigned long'", "markdown": "**\\[Line 141\\] The type 'int' of function argument number '5' does not match declared type 'unsigned long'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '1' argument to function 'CreateThread' ", "markdown": "**\\[Line 141\\] The value '0' is passed as '1' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '1' argument to function 'CreateThread' ", "markdown": "**\\[Line 141\\] The value '0' is passed as '1' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '1' argument to function 'CreateThread' ", "markdown": "**\\[Line 141\\] The value '0' is passed as '1' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '4' argument to function 'CreateThread' ", "markdown": "**\\[Line 141\\] The value '0' is passed as '4' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 47, "endColumn": 48 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '4' argument to function 'CreateThread' ", "markdown": "**\\[Line 141\\] The value '0' is passed as '4' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 47, "endColumn": 48 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '4' argument to function 'CreateThread' ", "markdown": "**\\[Line 141\\] The value '0' is passed as '4' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 47, "endColumn": 48 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '6' argument to function 'CreateThread' ", "markdown": "**\\[Line 141\\] The value '0' is passed as '6' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 47, "endColumn": 48 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '6' argument to function 'CreateThread' ", "markdown": "**\\[Line 141\\] The value '0' is passed as '6' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 47, "endColumn": 48 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '6' argument to function 'CreateThread' ", "markdown": "**\\[Line 141\\] The value '0' is passed as '6' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 47, "endColumn": 48 } } } ] }, { "ruleId": "BD-PB-VOVR", "level": "warning", "message": { "text": "Value of \"thread4\" is never used", "markdown": "**\\[Line 141\\] Value of \"thread4\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 1 } } } ] }, { "ruleId": "MISRA2012-RULE-2_2_b", "level": "error", "message": { "text": "Value of \"thread4\" is never used", "markdown": "**\\[Line 141\\] Value of \"thread4\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 1 } } } ] }, { "ruleId": "MISRAC2012-RULE_2_2-b", "level": "error", "message": { "text": "Value of \"thread4\" is never used", "markdown": "**\\[Line 141\\] Value of \"thread4\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 1 } } } ] }, { "ruleId": "AUTOSAR-A0_1_1-a", "level": "error", "message": { "text": "Value of \"thread4\" is never used", "markdown": "**\\[Line 141\\] Value of \"thread4\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 1 } } } ] }, { "ruleId": "CERT_C-DCL22-a", "level": "warning", "message": { "text": "Value of \"thread4\" is never used", "markdown": "**\\[Line 141\\] Value of \"thread4\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 1 } } } ] }, { "ruleId": "MISRA2008-0_1_6", "level": "error", "message": { "text": "Value of \"thread4\" is never used", "markdown": "**\\[Line 141\\] Value of \"thread4\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 1 } } } ] }, { "ruleId": "JSF-098", "level": "warning", "message": { "text": "Do not declare the 'runGameThreads2' function in the global namespace", "markdown": "**\\[Line 144\\] Do not declare the 'runGameThreads2' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 144, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-M7_3_1-a", "level": "error", "message": { "text": "Do not declare the 'runGameThreads2' function in the global namespace", "markdown": "**\\[Line 144\\] Do not declare the 'runGameThreads2' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 144, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "CODSTA-CPP-36", "level": "warning", "message": { "text": "Do not declare the 'runGameThreads2' function in the global namespace", "markdown": "**\\[Line 144\\] Do not declare the 'runGameThreads2' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 144, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2008-7_3_1", "level": "error", "message": { "text": "Do not declare the 'runGameThreads2' function in the global namespace", "markdown": "**\\[Line 144\\] Do not declare the 'runGameThreads2' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 144, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'runGameThreads2' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 144\\] Function 'runGameThreads2' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 144, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'runGameThreads2' has Essential Complexity value: 1", "markdown": "**\\[Line 144\\] Function 'runGameThreads2' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 144, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "OWASP2019-API9-e", "level": "warning", "message": { "text": "Function 'runGameThreads2' has external linkage and is not declared in the header", "markdown": "**\\[Line 144\\] Function 'runGameThreads2' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 144, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-A3_3_1-a", "level": "error", "message": { "text": "Function 'runGameThreads2' has external linkage and is not declared in the header", "markdown": "**\\[Line 144\\] Function 'runGameThreads2' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 144, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "JSF-137", "level": "warning", "message": { "text": "Function 'runGameThreads2' has external linkage and is not declared in the header", "markdown": "**\\[Line 144\\] Function 'runGameThreads2' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 144, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA-023", "level": "warning", "message": { "text": "Function 'runGameThreads2' has external linkage and is not declared in the header", "markdown": "**\\[Line 144\\] Function 'runGameThreads2' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 144, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2008-3_3_1", "level": "error", "message": { "text": "Function 'runGameThreads2' has external linkage and is not declared in the header", "markdown": "**\\[Line 144\\] Function 'runGameThreads2' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 144, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "CERT_C-DCL15-a", "level": "warning", "message": { "text": "Function 'runGameThreads2' has external linkage and is not declared in the header", "markdown": "**\\[Line 144\\] Function 'runGameThreads2' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 144, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2004-8_10", "level": "warning", "message": { "text": "Function 'runGameThreads2' has external linkage and is not declared in the header", "markdown": "**\\[Line 144\\] Function 'runGameThreads2' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 144, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "NAMING-17", "level": "warning", "message": { "text": "Naming convention not followed: runGameThreads2", "markdown": "**\\[Line 144\\] Naming convention not followed: runGameThreads2**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 144, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "FORMAT-28", "level": "warning", "message": { "text": "Return type is not placed in line before function 'runGameThreads2'", "markdown": "**\\[Line 144\\] Return type is not placed in line before function 'runGameThreads2'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 144, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "GLOBAL-UNUSEDFUNC", "level": "warning", "message": { "text": "The 'runGameThreads2' function is not used in the testing scope", "markdown": "**\\[Line 144\\] The 'runGameThreads2' function is not used in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 144, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-M0_1_10-a", "level": "warning", "message": { "text": "The 'runGameThreads2' function is not used in the testing scope", "markdown": "**\\[Line 144\\] The 'runGameThreads2' function is not used in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 144, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2008-0_1_10_b", "level": "error", "message": { "text": "The 'runGameThreads2' function is not used in the testing scope", "markdown": "**\\[Line 144\\] The 'runGameThreads2' function is not used in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 144, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'runGameThreads2' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 144\\] The 'runGameThreads2' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 144, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'runGameThreads2' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 144\\] The 'runGameThreads2' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 144, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'runGameThreads2' function is not preceded by a comment", "markdown": "**\\[Line 144\\] The definition of the 'runGameThreads2' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 144, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'runGameThreads2' function is not preceded by a comment", "markdown": "**\\[Line 144\\] The definition of the 'runGameThreads2' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 144, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'runGameThreads2' should be composed only of lowercase letters", "markdown": "**\\[Line 144\\] The name 'runGameThreads2' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 144, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'runGameThreads2' should be composed only of lowercase letters", "markdown": "**\\[Line 144\\] The name 'runGameThreads2' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 144, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 145\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 145, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CODSTA-27", "level": "warning", "message": { "text": "Global variable 'exitGame' is modified in function 'runGameThreads2'", "markdown": "**\\[Line 146\\] Global variable 'exitGame' is modified in function 'runGameThreads2'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 146, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 146\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 146, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 146\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 146, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 146\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 146, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A7_1_7-c", "level": "error", "message": { "text": "Declare variable 'thread2' in a separate declaration statement", "markdown": "**\\[Line 147\\] Declare variable 'thread2' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "FORMAT-33", "level": "warning", "message": { "text": "Declare variable 'thread2' in a separate declaration statement", "markdown": "**\\[Line 147\\] Declare variable 'thread2' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "MISRA2008-8_0_1", "level": "error", "message": { "text": "Declare variable 'thread2' in a separate declaration statement", "markdown": "**\\[Line 147\\] Declare variable 'thread2' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "HICPP-7_1_1-b", "level": "warning", "message": { "text": "Declare variable 'thread2' in a separate declaration statement", "markdown": "**\\[Line 147\\] Declare variable 'thread2' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "AUTOSAR-M8_0_1-a", "level": "error", "message": { "text": "Declare variable 'thread2' in a separate declaration statement", "markdown": "**\\[Line 147\\] Declare variable 'thread2' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "CERT_C-DCL04-a", "level": "warning", "message": { "text": "Declare variable 'thread2' in a separate declaration statement", "markdown": "**\\[Line 147\\] Declare variable 'thread2' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "JSF-152", "level": "error", "message": { "text": "Declare variable 'thread2' in a separate line", "markdown": "**\\[Line 147\\] Declare variable 'thread2' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "AUTOSAR-A7_1_7-b", "level": "error", "message": { "text": "Declare variable 'thread2' in a separate line", "markdown": "**\\[Line 147\\] Declare variable 'thread2' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "HICPP-7_1_1-a", "level": "warning", "message": { "text": "Declare variable 'thread2' in a separate line", "markdown": "**\\[Line 147\\] Declare variable 'thread2' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "FORMAT-29", "level": "warning", "message": { "text": "Declare variable 'thread2' in a separate line", "markdown": "**\\[Line 147\\] Declare variable 'thread2' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "AUTOSAR-A7_1_7-c", "level": "error", "message": { "text": "Declare variable 'thread3' in a separate declaration statement", "markdown": "**\\[Line 147\\] Declare variable 'thread3' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "FORMAT-33", "level": "warning", "message": { "text": "Declare variable 'thread3' in a separate declaration statement", "markdown": "**\\[Line 147\\] Declare variable 'thread3' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "MISRA2008-8_0_1", "level": "error", "message": { "text": "Declare variable 'thread3' in a separate declaration statement", "markdown": "**\\[Line 147\\] Declare variable 'thread3' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "HICPP-7_1_1-b", "level": "warning", "message": { "text": "Declare variable 'thread3' in a separate declaration statement", "markdown": "**\\[Line 147\\] Declare variable 'thread3' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "AUTOSAR-M8_0_1-a", "level": "error", "message": { "text": "Declare variable 'thread3' in a separate declaration statement", "markdown": "**\\[Line 147\\] Declare variable 'thread3' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "CERT_C-DCL04-a", "level": "warning", "message": { "text": "Declare variable 'thread3' in a separate declaration statement", "markdown": "**\\[Line 147\\] Declare variable 'thread3' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "JSF-152", "level": "error", "message": { "text": "Declare variable 'thread3' in a separate line", "markdown": "**\\[Line 147\\] Declare variable 'thread3' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "AUTOSAR-A7_1_7-b", "level": "error", "message": { "text": "Declare variable 'thread3' in a separate line", "markdown": "**\\[Line 147\\] Declare variable 'thread3' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "HICPP-7_1_1-a", "level": "warning", "message": { "text": "Declare variable 'thread3' in a separate line", "markdown": "**\\[Line 147\\] Declare variable 'thread3' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "FORMAT-29", "level": "warning", "message": { "text": "Declare variable 'thread3' in a separate line", "markdown": "**\\[Line 147\\] Declare variable 'thread3' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "AUTOSAR-A7_1_7-c", "level": "error", "message": { "text": "Declare variable 'thread4' in a separate declaration statement", "markdown": "**\\[Line 147\\] Declare variable 'thread4' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "FORMAT-33", "level": "warning", "message": { "text": "Declare variable 'thread4' in a separate declaration statement", "markdown": "**\\[Line 147\\] Declare variable 'thread4' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "MISRA2008-8_0_1", "level": "error", "message": { "text": "Declare variable 'thread4' in a separate declaration statement", "markdown": "**\\[Line 147\\] Declare variable 'thread4' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "HICPP-7_1_1-b", "level": "warning", "message": { "text": "Declare variable 'thread4' in a separate declaration statement", "markdown": "**\\[Line 147\\] Declare variable 'thread4' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "AUTOSAR-M8_0_1-a", "level": "error", "message": { "text": "Declare variable 'thread4' in a separate declaration statement", "markdown": "**\\[Line 147\\] Declare variable 'thread4' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "CERT_C-DCL04-a", "level": "warning", "message": { "text": "Declare variable 'thread4' in a separate declaration statement", "markdown": "**\\[Line 147\\] Declare variable 'thread4' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "JSF-152", "level": "error", "message": { "text": "Declare variable 'thread4' in a separate line", "markdown": "**\\[Line 147\\] Declare variable 'thread4' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "AUTOSAR-A7_1_7-b", "level": "error", "message": { "text": "Declare variable 'thread4' in a separate line", "markdown": "**\\[Line 147\\] Declare variable 'thread4' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "HICPP-7_1_1-a", "level": "warning", "message": { "text": "Declare variable 'thread4' in a separate line", "markdown": "**\\[Line 147\\] Declare variable 'thread4' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "FORMAT-29", "level": "warning", "message": { "text": "Declare variable 'thread4' in a separate line", "markdown": "**\\[Line 147\\] Declare variable 'thread4' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "CERT_C-MSC13-a", "level": "warning", "message": { "text": "Local variable 'thread1' declared in function 'runGameThreads2' is unnecessary", "markdown": "**\\[Line 147\\] Local variable 'thread1' declared in function 'runGameThreads2' is unnecessary**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "OPT-06", "level": "warning", "message": { "text": "Local variable 'thread1' declared in function 'runGameThreads2' is unnecessary", "markdown": "**\\[Line 147\\] Local variable 'thread1' declared in function 'runGameThreads2' is unnecessary**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CERT_C-MSC13-a", "level": "warning", "message": { "text": "Local variable 'thread2' declared in function 'runGameThreads2' is unnecessary", "markdown": "**\\[Line 147\\] Local variable 'thread2' declared in function 'runGameThreads2' is unnecessary**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "OPT-06", "level": "warning", "message": { "text": "Local variable 'thread2' declared in function 'runGameThreads2' is unnecessary", "markdown": "**\\[Line 147\\] Local variable 'thread2' declared in function 'runGameThreads2' is unnecessary**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "CERT_C-MSC13-a", "level": "warning", "message": { "text": "Local variable 'thread3' declared in function 'runGameThreads2' is unnecessary", "markdown": "**\\[Line 147\\] Local variable 'thread3' declared in function 'runGameThreads2' is unnecessary**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "OPT-06", "level": "warning", "message": { "text": "Local variable 'thread3' declared in function 'runGameThreads2' is unnecessary", "markdown": "**\\[Line 147\\] Local variable 'thread3' declared in function 'runGameThreads2' is unnecessary**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "CERT_C-MSC13-a", "level": "warning", "message": { "text": "Local variable 'thread4' declared in function 'runGameThreads2' is unnecessary", "markdown": "**\\[Line 147\\] Local variable 'thread4' declared in function 'runGameThreads2' is unnecessary**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "OPT-06", "level": "warning", "message": { "text": "Local variable 'thread4' declared in function 'runGameThreads2' is unnecessary", "markdown": "**\\[Line 147\\] Local variable 'thread4' declared in function 'runGameThreads2' is unnecessary**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 147\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 147\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 147\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "INIT-04", "level": "error", "message": { "text": "Pointer variable 'thread1' uninitialized when declared", "markdown": "**\\[Line 147\\] Pointer variable 'thread1' uninitialized when declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "INIT-04", "level": "error", "message": { "text": "Pointer variable 'thread2' uninitialized when declared", "markdown": "**\\[Line 147\\] Pointer variable 'thread2' uninitialized when declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "INIT-04", "level": "error", "message": { "text": "Pointer variable 'thread3' uninitialized when declared", "markdown": "**\\[Line 147\\] Pointer variable 'thread3' uninitialized when declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "INIT-04", "level": "error", "message": { "text": "Pointer variable 'thread4' uninitialized when declared", "markdown": "**\\[Line 147\\] Pointer variable 'thread4' uninitialized when declared**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "AUTOSAR-M0_1_4-a", "level": "error", "message": { "text": "The 'thread1' variable has only one use", "markdown": "**\\[Line 147\\] The 'thread1' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "MISRA2008-0_1_4", "level": "error", "message": { "text": "The 'thread1' variable has only one use", "markdown": "**\\[Line 147\\] The 'thread1' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "GLOBAL-ONEUSEVAR", "level": "warning", "message": { "text": "The 'thread1' variable has only one use", "markdown": "**\\[Line 147\\] The 'thread1' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'thread1' variable should be commented", "markdown": "**\\[Line 147\\] The 'thread1' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'thread1' variable should be commented", "markdown": "**\\[Line 147\\] The 'thread1' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-M0_1_4-a", "level": "error", "message": { "text": "The 'thread2' variable has only one use", "markdown": "**\\[Line 147\\] The 'thread2' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "MISRA2008-0_1_4", "level": "error", "message": { "text": "The 'thread2' variable has only one use", "markdown": "**\\[Line 147\\] The 'thread2' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "GLOBAL-ONEUSEVAR", "level": "warning", "message": { "text": "The 'thread2' variable has only one use", "markdown": "**\\[Line 147\\] The 'thread2' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'thread2' variable should be commented", "markdown": "**\\[Line 147\\] The 'thread2' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'thread2' variable should be commented", "markdown": "**\\[Line 147\\] The 'thread2' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "AUTOSAR-M0_1_4-a", "level": "error", "message": { "text": "The 'thread3' variable has only one use", "markdown": "**\\[Line 147\\] The 'thread3' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "MISRA2008-0_1_4", "level": "error", "message": { "text": "The 'thread3' variable has only one use", "markdown": "**\\[Line 147\\] The 'thread3' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "GLOBAL-ONEUSEVAR", "level": "warning", "message": { "text": "The 'thread3' variable has only one use", "markdown": "**\\[Line 147\\] The 'thread3' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'thread3' variable should be commented", "markdown": "**\\[Line 147\\] The 'thread3' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'thread3' variable should be commented", "markdown": "**\\[Line 147\\] The 'thread3' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "AUTOSAR-M0_1_4-a", "level": "error", "message": { "text": "The 'thread4' variable has only one use", "markdown": "**\\[Line 147\\] The 'thread4' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "MISRA2008-0_1_4", "level": "error", "message": { "text": "The 'thread4' variable has only one use", "markdown": "**\\[Line 147\\] The 'thread4' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "GLOBAL-ONEUSEVAR", "level": "warning", "message": { "text": "The 'thread4' variable has only one use", "markdown": "**\\[Line 147\\] The 'thread4' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'thread4' variable should be commented", "markdown": "**\\[Line 147\\] The 'thread4' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'thread4' variable should be commented", "markdown": "**\\[Line 147\\] The 'thread4' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The variable of pointer or array type is declared: thread1", "markdown": "**\\[Line 147\\] The variable of pointer or array type is declared: thread1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The variable of pointer or array type is declared: thread2", "markdown": "**\\[Line 147\\] The variable of pointer or array type is declared: thread2**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The variable of pointer or array type is declared: thread3", "markdown": "**\\[Line 147\\] The variable of pointer or array type is declared: thread3**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The variable of pointer or array type is declared: thread4", "markdown": "**\\[Line 147\\] The variable of pointer or array type is declared: thread4**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The variable of pointer type is declared: thread1", "markdown": "**\\[Line 147\\] The variable of pointer type is declared: thread1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The variable of pointer type is declared: thread2", "markdown": "**\\[Line 147\\] The variable of pointer type is declared: thread2**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The variable of pointer type is declared: thread3", "markdown": "**\\[Line 147\\] The variable of pointer type is declared: thread3**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The variable of pointer type is declared: thread4", "markdown": "**\\[Line 147\\] The variable of pointer type is declared: thread4**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "PARSER-WARNING", "level": "warning", "message": { "text": "W-552: variable \"thread1\" was set but never used", "markdown": "**\\[Line 147\\] W\\-552: variable \"thread1\" was set but never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "PARSER-WARNING", "level": "warning", "message": { "text": "W-552: variable \"thread2\" was set but never used", "markdown": "**\\[Line 147\\] W\\-552: variable \"thread2\" was set but never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "PARSER-WARNING", "level": "warning", "message": { "text": "W-552: variable \"thread3\" was set but never used", "markdown": "**\\[Line 147\\] W\\-552: variable \"thread3\" was set but never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "PARSER-WARNING", "level": "warning", "message": { "text": "W-552: variable \"thread4\" was set but never used", "markdown": "**\\[Line 147\\] W\\-552: variable \"thread4\" was set but never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 147, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "HICPP-4_2_1-a", "level": "warning", "message": { "text": "A 'U' suffix shall be applied to constant: 0", "markdown": "**\\[Line 148\\] A 'U' suffix shall be applied to constant: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "HICPP-4_2_1-a", "level": "warning", "message": { "text": "A 'U' suffix shall be applied to constant: 0", "markdown": "**\\[Line 148\\] A 'U' suffix shall be applied to constant: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "CERT_CPP-EXP56-a", "level": "warning", "message": { "text": "Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage", "markdown": "**\\[Line 148\\] Do not assing the pointer to the function with C\\+\\+ language linkage to the pointer to the function with C language linkage**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "CODSTA-CPP-96", "level": "warning", "message": { "text": "Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage", "markdown": "**\\[Line 148\\] Do not assing the pointer to the function with C\\+\\+ language linkage to the pointer to the function with C language linkage**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "MISRA2008-5_0_4_a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used", "markdown": "**\\[Line 148\\] Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "AUTOSAR-M5_0_4-a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used", "markdown": "**\\[Line 148\\] Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "MISRA2004-10_1_a", "level": "warning", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used", "markdown": "**\\[Line 148\\] Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "MISRA2008-5_0_4_a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used", "markdown": "**\\[Line 148\\] Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "AUTOSAR-M5_0_4-a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used", "markdown": "**\\[Line 148\\] Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "MISRA2004-10_1_a", "level": "warning", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used", "markdown": "**\\[Line 148\\] Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 148\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 148\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 148\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-16_9", "level": "warning", "message": { "text": "Pointer to function 'GameLogic_Thread' should be preceded by '&' operator or followed by '()'", "markdown": "**\\[Line 148\\] Pointer to function 'GameLogic\\_Thread' should be preceded by '&' operator or followed by '\\(\\)'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "AUTOSAR-M8_4_4-a", "level": "error", "message": { "text": "Pointer to function 'GameLogic_Thread' should be preceded by '&' operator or followed by '()'", "markdown": "**\\[Line 148\\] Pointer to function 'GameLogic\\_Thread' should be preceded by '&' operator or followed by '\\(\\)'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "MISRA2008-8_4_4", "level": "error", "message": { "text": "Pointer to function 'GameLogic_Thread' should be preceded by '&' operator or followed by '()'", "markdown": "**\\[Line 148\\] Pointer to function 'GameLogic\\_Thread' should be preceded by '&' operator or followed by '\\(\\)'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "AUTOSAR-A4_10_1-b", "level": "error", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 148\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "HICPP-2_5_3-a", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 148\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "CODSTA-MCPP-04", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 148\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "AUTOSAR-A4_10_1-b", "level": "error", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 148\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "HICPP-2_5_3-a", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 148\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "CODSTA-MCPP-04", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 148\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "CODSTA-CPP-23", "level": "note", "message": { "text": "The global function 'CreateThread' is called without scope resolution operator '::'", "markdown": "**\\[Line 148\\] The global function 'CreateThread' is called without scope resolution operator '::'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "PB-11", "level": "warning", "message": { "text": "The type 'DWORD (void *)*' of function argument number '3' does not match declared type 'DWORD (LPVOID)*'", "markdown": "**\\[Line 148\\] The type 'DWORD \\(void \\*\\)\\*' of function argument number '3' does not match declared type 'DWORD \\(LPVOID\\)\\*'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "PB-11", "level": "warning", "message": { "text": "The type 'int' of function argument number '2' does not match declared type 'unsigned long long'", "markdown": "**\\[Line 148\\] The type 'int' of function argument number '2' does not match declared type 'unsigned long long'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "PB-11", "level": "warning", "message": { "text": "The type 'int' of function argument number '5' does not match declared type 'unsigned long'", "markdown": "**\\[Line 148\\] The type 'int' of function argument number '5' does not match declared type 'unsigned long'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '1' argument to function 'CreateThread' ", "markdown": "**\\[Line 148\\] The value '0' is passed as '1' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '1' argument to function 'CreateThread' ", "markdown": "**\\[Line 148\\] The value '0' is passed as '1' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '1' argument to function 'CreateThread' ", "markdown": "**\\[Line 148\\] The value '0' is passed as '1' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '4' argument to function 'CreateThread' ", "markdown": "**\\[Line 148\\] The value '0' is passed as '4' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '4' argument to function 'CreateThread' ", "markdown": "**\\[Line 148\\] The value '0' is passed as '4' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '4' argument to function 'CreateThread' ", "markdown": "**\\[Line 148\\] The value '0' is passed as '4' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '6' argument to function 'CreateThread' ", "markdown": "**\\[Line 148\\] The value '0' is passed as '6' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '6' argument to function 'CreateThread' ", "markdown": "**\\[Line 148\\] The value '0' is passed as '6' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '6' argument to function 'CreateThread' ", "markdown": "**\\[Line 148\\] The value '0' is passed as '6' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 42, "endColumn": 43 } } } ] }, { "ruleId": "MISRA2012-RULE-2_2_b", "level": "error", "message": { "text": "Value of \"thread1\" is never used", "markdown": "**\\[Line 148\\] Value of \"thread1\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 1 } } } ] }, { "ruleId": "MISRAC2012-RULE_2_2-b", "level": "error", "message": { "text": "Value of \"thread1\" is never used", "markdown": "**\\[Line 148\\] Value of \"thread1\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 1 } } } ] }, { "ruleId": "AUTOSAR-A0_1_1-a", "level": "error", "message": { "text": "Value of \"thread1\" is never used", "markdown": "**\\[Line 148\\] Value of \"thread1\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 1 } } } ] }, { "ruleId": "CERT_C-DCL22-a", "level": "warning", "message": { "text": "Value of \"thread1\" is never used", "markdown": "**\\[Line 148\\] Value of \"thread1\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 1 } } } ] }, { "ruleId": "MISRA2008-0_1_6", "level": "error", "message": { "text": "Value of \"thread1\" is never used", "markdown": "**\\[Line 148\\] Value of \"thread1\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 1 } } } ] }, { "ruleId": "BD-PB-VOVR", "level": "warning", "message": { "text": "Value of \"thread1\" is never used", "markdown": "**\\[Line 148\\] Value of \"thread1\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 148, "startColumn": 1 } } } ] }, { "ruleId": "HICPP-4_2_1-a", "level": "warning", "message": { "text": "A 'U' suffix shall be applied to constant: 0", "markdown": "**\\[Line 149\\] A 'U' suffix shall be applied to constant: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "HICPP-4_2_1-a", "level": "warning", "message": { "text": "A 'U' suffix shall be applied to constant: 0", "markdown": "**\\[Line 149\\] A 'U' suffix shall be applied to constant: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "CERT_CPP-EXP56-a", "level": "warning", "message": { "text": "Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage", "markdown": "**\\[Line 149\\] Do not assing the pointer to the function with C\\+\\+ language linkage to the pointer to the function with C language linkage**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "CODSTA-CPP-96", "level": "warning", "message": { "text": "Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage", "markdown": "**\\[Line 149\\] Do not assing the pointer to the function with C\\+\\+ language linkage to the pointer to the function with C language linkage**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "MISRA2008-5_0_4_a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used", "markdown": "**\\[Line 149\\] Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "AUTOSAR-M5_0_4-a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used", "markdown": "**\\[Line 149\\] Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "MISRA2004-10_1_a", "level": "warning", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used", "markdown": "**\\[Line 149\\] Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "MISRA2008-5_0_4_a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used", "markdown": "**\\[Line 149\\] Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "AUTOSAR-M5_0_4-a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used", "markdown": "**\\[Line 149\\] Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "MISRA2004-10_1_a", "level": "warning", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used", "markdown": "**\\[Line 149\\] Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 149\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 149\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 149\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-16_9", "level": "warning", "message": { "text": "Pointer to function 'Controller_Thread' should be preceded by '&' operator or followed by '()'", "markdown": "**\\[Line 149\\] Pointer to function 'Controller\\_Thread' should be preceded by '&' operator or followed by '\\(\\)'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "AUTOSAR-M8_4_4-a", "level": "error", "message": { "text": "Pointer to function 'Controller_Thread' should be preceded by '&' operator or followed by '()'", "markdown": "**\\[Line 149\\] Pointer to function 'Controller\\_Thread' should be preceded by '&' operator or followed by '\\(\\)'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "MISRA2008-8_4_4", "level": "error", "message": { "text": "Pointer to function 'Controller_Thread' should be preceded by '&' operator or followed by '()'", "markdown": "**\\[Line 149\\] Pointer to function 'Controller\\_Thread' should be preceded by '&' operator or followed by '\\(\\)'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "AUTOSAR-A4_10_1-b", "level": "error", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 149\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "HICPP-2_5_3-a", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 149\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "CODSTA-MCPP-04", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 149\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "AUTOSAR-A4_10_1-b", "level": "error", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 149\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "HICPP-2_5_3-a", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 149\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "CODSTA-MCPP-04", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 149\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "CODSTA-CPP-23", "level": "note", "message": { "text": "The global function 'CreateThread' is called without scope resolution operator '::'", "markdown": "**\\[Line 149\\] The global function 'CreateThread' is called without scope resolution operator '::'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "PB-11", "level": "warning", "message": { "text": "The type 'DWORD (void *)*' of function argument number '3' does not match declared type 'DWORD (LPVOID)*'", "markdown": "**\\[Line 149\\] The type 'DWORD \\(void \\*\\)\\*' of function argument number '3' does not match declared type 'DWORD \\(LPVOID\\)\\*'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "PB-11", "level": "warning", "message": { "text": "The type 'int' of function argument number '2' does not match declared type 'unsigned long long'", "markdown": "**\\[Line 149\\] The type 'int' of function argument number '2' does not match declared type 'unsigned long long'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "PB-11", "level": "warning", "message": { "text": "The type 'int' of function argument number '5' does not match declared type 'unsigned long'", "markdown": "**\\[Line 149\\] The type 'int' of function argument number '5' does not match declared type 'unsigned long'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '1' argument to function 'CreateThread' ", "markdown": "**\\[Line 149\\] The value '0' is passed as '1' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '1' argument to function 'CreateThread' ", "markdown": "**\\[Line 149\\] The value '0' is passed as '1' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '1' argument to function 'CreateThread' ", "markdown": "**\\[Line 149\\] The value '0' is passed as '1' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '4' argument to function 'CreateThread' ", "markdown": "**\\[Line 149\\] The value '0' is passed as '4' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '4' argument to function 'CreateThread' ", "markdown": "**\\[Line 149\\] The value '0' is passed as '4' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '4' argument to function 'CreateThread' ", "markdown": "**\\[Line 149\\] The value '0' is passed as '4' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '6' argument to function 'CreateThread' ", "markdown": "**\\[Line 149\\] The value '0' is passed as '6' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '6' argument to function 'CreateThread' ", "markdown": "**\\[Line 149\\] The value '0' is passed as '6' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '6' argument to function 'CreateThread' ", "markdown": "**\\[Line 149\\] The value '0' is passed as '6' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "BD-PB-VOVR", "level": "warning", "message": { "text": "Value of \"thread2\" is never used", "markdown": "**\\[Line 149\\] Value of \"thread2\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 1 } } } ] }, { "ruleId": "MISRA2012-RULE-2_2_b", "level": "error", "message": { "text": "Value of \"thread2\" is never used", "markdown": "**\\[Line 149\\] Value of \"thread2\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 1 } } } ] }, { "ruleId": "MISRAC2012-RULE_2_2-b", "level": "error", "message": { "text": "Value of \"thread2\" is never used", "markdown": "**\\[Line 149\\] Value of \"thread2\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 1 } } } ] }, { "ruleId": "AUTOSAR-A0_1_1-a", "level": "error", "message": { "text": "Value of \"thread2\" is never used", "markdown": "**\\[Line 149\\] Value of \"thread2\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 1 } } } ] }, { "ruleId": "CERT_C-DCL22-a", "level": "warning", "message": { "text": "Value of \"thread2\" is never used", "markdown": "**\\[Line 149\\] Value of \"thread2\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 1 } } } ] }, { "ruleId": "MISRA2008-0_1_6", "level": "error", "message": { "text": "Value of \"thread2\" is never used", "markdown": "**\\[Line 149\\] Value of \"thread2\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 149, "startColumn": 1 } } } ] }, { "ruleId": "HICPP-4_2_1-a", "level": "warning", "message": { "text": "A 'U' suffix shall be applied to constant: 0", "markdown": "**\\[Line 150\\] A 'U' suffix shall be applied to constant: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "HICPP-4_2_1-a", "level": "warning", "message": { "text": "A 'U' suffix shall be applied to constant: 0", "markdown": "**\\[Line 150\\] A 'U' suffix shall be applied to constant: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 49, "endColumn": 50 } } } ] }, { "ruleId": "CERT_CPP-EXP56-a", "level": "warning", "message": { "text": "Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage", "markdown": "**\\[Line 150\\] Do not assing the pointer to the function with C\\+\\+ language linkage to the pointer to the function with C language linkage**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "CODSTA-CPP-96", "level": "warning", "message": { "text": "Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage", "markdown": "**\\[Line 150\\] Do not assing the pointer to the function with C\\+\\+ language linkage to the pointer to the function with C language linkage**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "MISRA2008-5_0_4_a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used", "markdown": "**\\[Line 150\\] Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "AUTOSAR-M5_0_4-a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used", "markdown": "**\\[Line 150\\] Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "MISRA2004-10_1_a", "level": "warning", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used", "markdown": "**\\[Line 150\\] Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "MISRA2008-5_0_4_a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used", "markdown": "**\\[Line 150\\] Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 49, "endColumn": 50 } } } ] }, { "ruleId": "AUTOSAR-M5_0_4-a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used", "markdown": "**\\[Line 150\\] Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 49, "endColumn": 50 } } } ] }, { "ruleId": "MISRA2004-10_1_a", "level": "warning", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used", "markdown": "**\\[Line 150\\] Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 49, "endColumn": 50 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 150\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 150\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 150\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-16_9", "level": "warning", "message": { "text": "Pointer to function 'Physics_Thread' should be preceded by '&' operator or followed by '()'", "markdown": "**\\[Line 150\\] Pointer to function 'Physics\\_Thread' should be preceded by '&' operator or followed by '\\(\\)'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "AUTOSAR-M8_4_4-a", "level": "error", "message": { "text": "Pointer to function 'Physics_Thread' should be preceded by '&' operator or followed by '()'", "markdown": "**\\[Line 150\\] Pointer to function 'Physics\\_Thread' should be preceded by '&' operator or followed by '\\(\\)'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "MISRA2008-8_4_4", "level": "error", "message": { "text": "Pointer to function 'Physics_Thread' should be preceded by '&' operator or followed by '()'", "markdown": "**\\[Line 150\\] Pointer to function 'Physics\\_Thread' should be preceded by '&' operator or followed by '\\(\\)'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "AUTOSAR-A4_10_1-b", "level": "error", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 150\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "HICPP-2_5_3-a", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 150\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "CODSTA-MCPP-04", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 150\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "AUTOSAR-A4_10_1-b", "level": "error", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 150\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 49, "endColumn": 50 } } } ] }, { "ruleId": "HICPP-2_5_3-a", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 150\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 49, "endColumn": 50 } } } ] }, { "ruleId": "CODSTA-MCPP-04", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 150\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 49, "endColumn": 50 } } } ] }, { "ruleId": "CODSTA-CPP-23", "level": "note", "message": { "text": "The global function 'CreateThread' is called without scope resolution operator '::'", "markdown": "**\\[Line 150\\] The global function 'CreateThread' is called without scope resolution operator '::'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "PB-11", "level": "warning", "message": { "text": "The type 'DWORD (void *)*' of function argument number '3' does not match declared type 'DWORD (LPVOID)*'", "markdown": "**\\[Line 150\\] The type 'DWORD \\(void \\*\\)\\*' of function argument number '3' does not match declared type 'DWORD \\(LPVOID\\)\\*'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "PB-11", "level": "warning", "message": { "text": "The type 'int' of function argument number '2' does not match declared type 'unsigned long long'", "markdown": "**\\[Line 150\\] The type 'int' of function argument number '2' does not match declared type 'unsigned long long'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "PB-11", "level": "warning", "message": { "text": "The type 'int' of function argument number '5' does not match declared type 'unsigned long'", "markdown": "**\\[Line 150\\] The type 'int' of function argument number '5' does not match declared type 'unsigned long'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '1' argument to function 'CreateThread' ", "markdown": "**\\[Line 150\\] The value '0' is passed as '1' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '1' argument to function 'CreateThread' ", "markdown": "**\\[Line 150\\] The value '0' is passed as '1' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '1' argument to function 'CreateThread' ", "markdown": "**\\[Line 150\\] The value '0' is passed as '1' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '4' argument to function 'CreateThread' ", "markdown": "**\\[Line 150\\] The value '0' is passed as '4' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 49, "endColumn": 50 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '4' argument to function 'CreateThread' ", "markdown": "**\\[Line 150\\] The value '0' is passed as '4' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 49, "endColumn": 50 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '4' argument to function 'CreateThread' ", "markdown": "**\\[Line 150\\] The value '0' is passed as '4' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 49, "endColumn": 50 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '6' argument to function 'CreateThread' ", "markdown": "**\\[Line 150\\] The value '0' is passed as '6' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 49, "endColumn": 50 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '6' argument to function 'CreateThread' ", "markdown": "**\\[Line 150\\] The value '0' is passed as '6' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 49, "endColumn": 50 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '6' argument to function 'CreateThread' ", "markdown": "**\\[Line 150\\] The value '0' is passed as '6' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 49, "endColumn": 50 } } } ] }, { "ruleId": "MISRA2012-RULE-2_2_b", "level": "error", "message": { "text": "Value of \"thread3\" is never used", "markdown": "**\\[Line 150\\] Value of \"thread3\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 1 } } } ] }, { "ruleId": "MISRAC2012-RULE_2_2-b", "level": "error", "message": { "text": "Value of \"thread3\" is never used", "markdown": "**\\[Line 150\\] Value of \"thread3\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 1 } } } ] }, { "ruleId": "AUTOSAR-A0_1_1-a", "level": "error", "message": { "text": "Value of \"thread3\" is never used", "markdown": "**\\[Line 150\\] Value of \"thread3\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 1 } } } ] }, { "ruleId": "CERT_C-DCL22-a", "level": "warning", "message": { "text": "Value of \"thread3\" is never used", "markdown": "**\\[Line 150\\] Value of \"thread3\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 1 } } } ] }, { "ruleId": "MISRA2008-0_1_6", "level": "error", "message": { "text": "Value of \"thread3\" is never used", "markdown": "**\\[Line 150\\] Value of \"thread3\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 1 } } } ] }, { "ruleId": "BD-PB-VOVR", "level": "warning", "message": { "text": "Value of \"thread3\" is never used", "markdown": "**\\[Line 150\\] Value of \"thread3\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 150, "startColumn": 1 } } } ] }, { "ruleId": "HICPP-4_2_1-a", "level": "warning", "message": { "text": "A 'U' suffix shall be applied to constant: 0", "markdown": "**\\[Line 151\\] A 'U' suffix shall be applied to constant: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "HICPP-4_2_1-a", "level": "warning", "message": { "text": "A 'U' suffix shall be applied to constant: 0", "markdown": "**\\[Line 151\\] A 'U' suffix shall be applied to constant: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 47, "endColumn": 48 } } } ] }, { "ruleId": "CERT_CPP-EXP56-a", "level": "warning", "message": { "text": "Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage", "markdown": "**\\[Line 151\\] Do not assing the pointer to the function with C\\+\\+ language linkage to the pointer to the function with C language linkage**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "CODSTA-CPP-96", "level": "warning", "message": { "text": "Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage", "markdown": "**\\[Line 151\\] Do not assing the pointer to the function with C\\+\\+ language linkage to the pointer to the function with C language linkage**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "MISRA2008-5_0_4_a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used", "markdown": "**\\[Line 151\\] Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "AUTOSAR-M5_0_4-a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used", "markdown": "**\\[Line 151\\] Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "MISRA2004-10_1_a", "level": "warning", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used", "markdown": "**\\[Line 151\\] Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "MISRA2008-5_0_4_a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used", "markdown": "**\\[Line 151\\] Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 47, "endColumn": 48 } } } ] }, { "ruleId": "AUTOSAR-M5_0_4-a", "level": "error", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used", "markdown": "**\\[Line 151\\] Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 47, "endColumn": 48 } } } ] }, { "ruleId": "MISRA2004-10_1_a", "level": "warning", "message": { "text": "Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used", "markdown": "**\\[Line 151\\] Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 47, "endColumn": 48 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 151\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 151\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 151\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-16_9", "level": "warning", "message": { "text": "Pointer to function 'Render_Thread' should be preceded by '&' operator or followed by '()'", "markdown": "**\\[Line 151\\] Pointer to function 'Render\\_Thread' should be preceded by '&' operator or followed by '\\(\\)'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "AUTOSAR-M8_4_4-a", "level": "error", "message": { "text": "Pointer to function 'Render_Thread' should be preceded by '&' operator or followed by '()'", "markdown": "**\\[Line 151\\] Pointer to function 'Render\\_Thread' should be preceded by '&' operator or followed by '\\(\\)'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "MISRA2008-8_4_4", "level": "error", "message": { "text": "Pointer to function 'Render_Thread' should be preceded by '&' operator or followed by '()'", "markdown": "**\\[Line 151\\] Pointer to function 'Render\\_Thread' should be preceded by '&' operator or followed by '\\(\\)'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 31, "endColumn": 32 } } } ] }, { "ruleId": "AUTOSAR-A4_10_1-b", "level": "error", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 151\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "HICPP-2_5_3-a", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 151\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "CODSTA-MCPP-04", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 151\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "AUTOSAR-A4_10_1-b", "level": "error", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 151\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 47, "endColumn": 48 } } } ] }, { "ruleId": "HICPP-2_5_3-a", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 151\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 47, "endColumn": 48 } } } ] }, { "ruleId": "CODSTA-MCPP-04", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 151\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 47, "endColumn": 48 } } } ] }, { "ruleId": "CODSTA-CPP-23", "level": "note", "message": { "text": "The global function 'CreateThread' is called without scope resolution operator '::'", "markdown": "**\\[Line 151\\] The global function 'CreateThread' is called without scope resolution operator '::'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "PB-11", "level": "warning", "message": { "text": "The type 'DWORD (void *)*' of function argument number '3' does not match declared type 'DWORD (LPVOID)*'", "markdown": "**\\[Line 151\\] The type 'DWORD \\(void \\*\\)\\*' of function argument number '3' does not match declared type 'DWORD \\(LPVOID\\)\\*'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "PB-11", "level": "warning", "message": { "text": "The type 'int' of function argument number '2' does not match declared type 'unsigned long long'", "markdown": "**\\[Line 151\\] The type 'int' of function argument number '2' does not match declared type 'unsigned long long'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "PB-11", "level": "warning", "message": { "text": "The type 'int' of function argument number '5' does not match declared type 'unsigned long'", "markdown": "**\\[Line 151\\] The type 'int' of function argument number '5' does not match declared type 'unsigned long'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '1' argument to function 'CreateThread' ", "markdown": "**\\[Line 151\\] The value '0' is passed as '1' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '1' argument to function 'CreateThread' ", "markdown": "**\\[Line 151\\] The value '0' is passed as '1' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '1' argument to function 'CreateThread' ", "markdown": "**\\[Line 151\\] The value '0' is passed as '1' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 25, "endColumn": 26 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '4' argument to function 'CreateThread' ", "markdown": "**\\[Line 151\\] The value '0' is passed as '4' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 47, "endColumn": 48 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '4' argument to function 'CreateThread' ", "markdown": "**\\[Line 151\\] The value '0' is passed as '4' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 47, "endColumn": 48 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '4' argument to function 'CreateThread' ", "markdown": "**\\[Line 151\\] The value '0' is passed as '4' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 47, "endColumn": 48 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '6' argument to function 'CreateThread' ", "markdown": "**\\[Line 151\\] The value '0' is passed as '6' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 47, "endColumn": 48 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '6' argument to function 'CreateThread' ", "markdown": "**\\[Line 151\\] The value '0' is passed as '6' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 47, "endColumn": 48 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '6' argument to function 'CreateThread' ", "markdown": "**\\[Line 151\\] The value '0' is passed as '6' argument to function 'CreateThread' **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 47, "endColumn": 48 } } } ] }, { "ruleId": "BD-PB-VOVR", "level": "warning", "message": { "text": "Value of \"thread4\" is never used", "markdown": "**\\[Line 151\\] Value of \"thread4\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 1 } } } ] }, { "ruleId": "MISRA2012-RULE-2_2_b", "level": "error", "message": { "text": "Value of \"thread4\" is never used", "markdown": "**\\[Line 151\\] Value of \"thread4\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 1 } } } ] }, { "ruleId": "MISRAC2012-RULE_2_2-b", "level": "error", "message": { "text": "Value of \"thread4\" is never used", "markdown": "**\\[Line 151\\] Value of \"thread4\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 1 } } } ] }, { "ruleId": "AUTOSAR-A0_1_1-a", "level": "error", "message": { "text": "Value of \"thread4\" is never used", "markdown": "**\\[Line 151\\] Value of \"thread4\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 1 } } } ] }, { "ruleId": "CERT_C-DCL22-a", "level": "warning", "message": { "text": "Value of \"thread4\" is never used", "markdown": "**\\[Line 151\\] Value of \"thread4\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 1 } } } ] }, { "ruleId": "MISRA2008-0_1_6", "level": "error", "message": { "text": "Value of \"thread4\" is never used", "markdown": "**\\[Line 151\\] Value of \"thread4\" is never used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 151, "startColumn": 1 } } } ] }, { "ruleId": "COMMENT-02", "level": "warning", "message": { "text": "Add comment containing the copyright information at the begin of file 'DivisionByZero.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the copyright information at the begin of file 'DivisionByZero\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-133_b", "level": "warning", "message": { "text": "Add comment containing the copyright information at the begin of file 'DivisionByZero.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the copyright information at the begin of file 'DivisionByZero\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-03", "level": "warning", "message": { "text": "Add comment containing the information on the file at the begin of file 'DivisionByZero.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the information on the file at the begin of file 'DivisionByZero\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-133_a", "level": "warning", "message": { "text": "Add comment containing the information on the file at the begin of file 'DivisionByZero.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the information on the file at the begin of file 'DivisionByZero\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-09", "level": "error", "message": { "text": "Disallowed #include notation is being used: \"Shapes.hpp\"", "markdown": "**\\[Line 1\\] Disallowed \\#include notation is being used: \"Shapes\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-033", "level": "error", "message": { "text": "Disallowed #include notation is being used: \"Shapes.hpp\"", "markdown": "**\\[Line 1\\] Disallowed \\#include notation is being used: \"Shapes\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PFO-04", "level": "note", "message": { "text": "Implementation file 'DivisionByZero.cpp' should declare a local constant string that begins from characters \"@(#)\" ", "markdown": "**\\[Line 1\\] Implementation file 'DivisionByZero\\.cpp' should declare a local constant string that begins from characters \"@\\(\\#\\)\" **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-38", "level": "warning", "message": { "text": "Implementation file 'DivisionByZero.cpp' should have the file name extension \".cc\"", "markdown": "**\\[Line 1\\] Implementation file 'DivisionByZero\\.cpp' should have the file name extension \"\\.cc\"**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-032", "level": "warning", "message": { "text": "Not a proper header file (*.h ) is being included: \"Shapes.hpp\"", "markdown": "**\\[Line 1\\] Not a proper header file \\(\\*\\.h \\) is being included: \"Shapes\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-08", "level": "warning", "message": { "text": "Not a proper header file (*.h ) is being included: \"Shapes.hpp\"", "markdown": "**\\[Line 1\\] Not a proper header file \\(\\*\\.h \\) is being included: \"Shapes\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "METRICS-31", "level": "warning", "message": { "text": "The assertion density is lower than two assertions per function", "markdown": "**\\[Line 1\\] The assertion density is lower than two assertions per function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-03", "level": "warning", "message": { "text": "The filename 'DivisionByZero.cpp' should be in lowercase", "markdown": "**\\[Line 1\\] The filename 'DivisionByZero\\.cpp' should be in lowercase**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-098", "level": "warning", "message": { "text": "Do not declare the 'getShapeRatio' function in the global namespace", "markdown": "**\\[Line 3\\] Do not declare the 'getShapeRatio' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-M7_3_1-a", "level": "error", "message": { "text": "Do not declare the 'getShapeRatio' function in the global namespace", "markdown": "**\\[Line 3\\] Do not declare the 'getShapeRatio' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CODSTA-CPP-36", "level": "warning", "message": { "text": "Do not declare the 'getShapeRatio' function in the global namespace", "markdown": "**\\[Line 3\\] Do not declare the 'getShapeRatio' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2008-7_3_1", "level": "error", "message": { "text": "Do not declare the 'getShapeRatio' function in the global namespace", "markdown": "**\\[Line 3\\] Do not declare the 'getShapeRatio' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'getShapeRatio' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 3\\] Function 'getShapeRatio' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'getShapeRatio' has Essential Complexity value: 1", "markdown": "**\\[Line 3\\] Function 'getShapeRatio' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "OWASP2019-API9-e", "level": "warning", "message": { "text": "Function 'getShapeRatio' has external linkage and is not declared in the header", "markdown": "**\\[Line 3\\] Function 'getShapeRatio' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A3_3_1-a", "level": "error", "message": { "text": "Function 'getShapeRatio' has external linkage and is not declared in the header", "markdown": "**\\[Line 3\\] Function 'getShapeRatio' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-137", "level": "warning", "message": { "text": "Function 'getShapeRatio' has external linkage and is not declared in the header", "markdown": "**\\[Line 3\\] Function 'getShapeRatio' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA-023", "level": "warning", "message": { "text": "Function 'getShapeRatio' has external linkage and is not declared in the header", "markdown": "**\\[Line 3\\] Function 'getShapeRatio' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2008-3_3_1", "level": "error", "message": { "text": "Function 'getShapeRatio' has external linkage and is not declared in the header", "markdown": "**\\[Line 3\\] Function 'getShapeRatio' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CERT_C-DCL15-a", "level": "warning", "message": { "text": "Function 'getShapeRatio' has external linkage and is not declared in the header", "markdown": "**\\[Line 3\\] Function 'getShapeRatio' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2004-8_10", "level": "warning", "message": { "text": "Function 'getShapeRatio' has external linkage and is not declared in the header", "markdown": "**\\[Line 3\\] Function 'getShapeRatio' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-17", "level": "warning", "message": { "text": "Naming convention not followed: getShapeRatio", "markdown": "**\\[Line 3\\] Naming convention not followed: getShapeRatio**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CERT_C-API00-a", "level": "warning", "message": { "text": "Parameter 'shape1' is not validated before use", "markdown": "**\\[Line 3\\] Parameter 'shape1' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "CODSTA-86", "level": "warning", "message": { "text": "Parameter 'shape1' is not validated before use", "markdown": "**\\[Line 3\\] Parameter 'shape1' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "CERT_C-API00-a", "level": "warning", "message": { "text": "Parameter 'shape2' is not validated before use", "markdown": "**\\[Line 3\\] Parameter 'shape2' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "CODSTA-86", "level": "warning", "message": { "text": "Parameter 'shape2' is not validated before use", "markdown": "**\\[Line 3\\] Parameter 'shape2' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "AUTOSAR-M7_1_2-b", "level": "error", "message": { "text": "Pass parameter \"shape1\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape1\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "MISRAC2012-RULE_8_13-a", "level": "warning", "message": { "text": "Pass parameter \"shape1\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape1\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "CERT_C-DCL13-a", "level": "warning", "message": { "text": "Pass parameter \"shape1\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape1\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "MISRA2004-16_7", "level": "warning", "message": { "text": "Pass parameter \"shape1\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape1\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "MISRA2012-RULE-8_13_a", "level": "warning", "message": { "text": "Pass parameter \"shape1\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape1\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "JSF-118", "level": "warning", "message": { "text": "Pass parameter \"shape1\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape1\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "MISRA2008-7_1_2_a", "level": "error", "message": { "text": "Pass parameter \"shape1\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape1\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "AUTOSAR-M7_1_2-b", "level": "error", "message": { "text": "Pass parameter \"shape2\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape2\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "MISRAC2012-RULE_8_13-a", "level": "warning", "message": { "text": "Pass parameter \"shape2\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape2\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "CERT_C-DCL13-a", "level": "warning", "message": { "text": "Pass parameter \"shape2\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape2\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "MISRA2004-16_7", "level": "warning", "message": { "text": "Pass parameter \"shape2\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape2\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "MISRA2012-RULE-8_13_a", "level": "warning", "message": { "text": "Pass parameter \"shape2\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape2\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "JSF-118", "level": "warning", "message": { "text": "Pass parameter \"shape2\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape2\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "MISRA2008-7_1_2_a", "level": "error", "message": { "text": "Pass parameter \"shape2\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape2\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "FORMAT-28", "level": "warning", "message": { "text": "Return type is not placed in line before function 'getShapeRatio'", "markdown": "**\\[Line 3\\] Return type is not placed in line before function 'getShapeRatio'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A8_4_10-a", "level": "error", "message": { "text": "The \"shape1\" parameter of the \"getShapeRatio\" function cannot be NULL and should be passed by reference", "markdown": "**\\[Line 3\\] The \"shape1\" parameter of the \"getShapeRatio\" function cannot be NULL and should be passed by reference**  \n  \n**Function header**&nbsp;  \nDivisionByZero.cpp&nbsp;(3)&nbsp;:&nbsp;double getShapeRatio\\(Shape\\* shape1, Shape\\* shape2\\)  \n**Point where the parameter is dereferenced**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape1\\->getArea\\(\\)" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "BD-PB-REFPARAM", "level": "warning", "message": { "text": "The \"shape1\" parameter of the \"getShapeRatio\" function cannot be NULL and should be passed by reference", "markdown": "**\\[Line 3\\] The \"shape1\" parameter of the \"getShapeRatio\" function cannot be NULL and should be passed by reference**  \n  \n**Function header**&nbsp;  \nDivisionByZero.cpp&nbsp;(3)&nbsp;:&nbsp;double getShapeRatio\\(Shape\\* shape1, Shape\\* shape2\\)  \n**Point where the parameter is dereferenced**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape1\\->getArea\\(\\)" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "AUTOSAR-A8_4_10-a", "level": "error", "message": { "text": "The \"shape2\" parameter of the \"getShapeRatio\" function cannot be NULL and should be passed by reference", "markdown": "**\\[Line 3\\] The \"shape2\" parameter of the \"getShapeRatio\" function cannot be NULL and should be passed by reference**  \n  \n**Function header**&nbsp;  \nDivisionByZero.cpp&nbsp;(3)&nbsp;:&nbsp;double getShapeRatio\\(Shape\\* shape1, Shape\\* shape2\\)  \n**Point where the parameter is dereferenced**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape2\\->getArea\\(\\)" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "BD-PB-REFPARAM", "level": "warning", "message": { "text": "The \"shape2\" parameter of the \"getShapeRatio\" function cannot be NULL and should be passed by reference", "markdown": "**\\[Line 3\\] The \"shape2\" parameter of the \"getShapeRatio\" function cannot be NULL and should be passed by reference**  \n  \n**Function header**&nbsp;  \nDivisionByZero.cpp&nbsp;(3)&nbsp;:&nbsp;double getShapeRatio\\(Shape\\* shape1, Shape\\* shape2\\)  \n**Point where the parameter is dereferenced**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape2\\->getArea\\(\\)" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "GLOBAL-UNUSEDFUNC", "level": "warning", "message": { "text": "The 'getShapeRatio' function is not used in the testing scope", "markdown": "**\\[Line 3\\] The 'getShapeRatio' function is not used in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-M0_1_10-a", "level": "warning", "message": { "text": "The 'getShapeRatio' function is not used in the testing scope", "markdown": "**\\[Line 3\\] The 'getShapeRatio' function is not used in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2008-0_1_10_b", "level": "error", "message": { "text": "The 'getShapeRatio' function is not used in the testing scope", "markdown": "**\\[Line 3\\] The 'getShapeRatio' function is not used in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'getShapeRatio' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 3\\] The 'getShapeRatio' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'getShapeRatio' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 3\\] The 'getShapeRatio' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'getShapeRatio' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 3\\] The 'getShapeRatio' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'getShapeRatio' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 3\\] The 'getShapeRatio' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-HN-34", "level": "warning", "message": { "text": "The 'shape1' identifier should have the 'p' prefix", "markdown": "**\\[Line 3\\] The 'shape1' identifier should have the 'p' prefix**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'shape1' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 3\\] The 'shape1' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'shape1' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 3\\] The 'shape1' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-HN-34", "level": "warning", "message": { "text": "The 'shape2' identifier should have the 'p' prefix", "markdown": "**\\[Line 3\\] The 'shape2' identifier should have the 'p' prefix**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'shape2' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 3\\] The 'shape2' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'shape2' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 3\\] The 'shape2' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 3\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 3\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 3\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 3\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 3\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 3\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 3\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'getShapeRatio' function is not preceded by a comment", "markdown": "**\\[Line 3\\] The definition of the 'getShapeRatio' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'getShapeRatio' function is not preceded by a comment", "markdown": "**\\[Line 3\\] The definition of the 'getShapeRatio' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'getShapeRatio' should be composed only of lowercase letters", "markdown": "**\\[Line 3\\] The name 'getShapeRatio' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'getShapeRatio' should be composed only of lowercase letters", "markdown": "**\\[Line 3\\] The name 'getShapeRatio' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The parameter of pointer or array type is declared: shape1", "markdown": "**\\[Line 3\\] The parameter of pointer or array type is declared: shape1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The parameter of pointer or array type is declared: shape2", "markdown": "**\\[Line 3\\] The parameter of pointer or array type is declared: shape2**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The parameter of pointer type is declared: shape1", "markdown": "**\\[Line 3\\] The parameter of pointer type is declared: shape1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The parameter of pointer type is declared: shape2", "markdown": "**\\[Line 3\\] The parameter of pointer type is declared: shape2**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "CODSTA-MCPP-08_b", "level": "error", "message": { "text": "The return type of the 'getShapeRatio' function should be declared as 'auto'", "markdown": "**\\[Line 3\\] The return type of the 'getShapeRatio' function should be declared as 'auto'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 4\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-25_b", "level": "warning", "message": { "text": "'return' statement should be used with parenthesis", "markdown": "**\\[Line 5\\] 'return' statement should be used with parenthesis**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "AUTOSAR-A5_6_1-a", "level": "error", "message": { "text": "Division by \"shape2.getArea()\" which may possibly be zero", "markdown": "**\\[Line 5\\] Division by \"shape2\\.getArea\\(\\)\" which may possibly be zero**  \n  \n**Start of the path**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape2\\->getArea\\(\\)  \n        Shapes.hpp&nbsp;(19)&nbsp;:&nbsp;double getArea\\(\\) const \\{ return 0; \\}  \n**Point of division by zero**&nbsp;  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;return shape1\\->getArea\\(\\)\/shape2\\->getArea\\(\\);" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "AUTOSAR-M0_3_1-e", "level": "error", "message": { "text": "Division by \"shape2.getArea()\" which may possibly be zero", "markdown": "**\\[Line 5\\] Division by \"shape2\\.getArea\\(\\)\" which may possibly be zero**  \n  \n**Start of the path**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape2\\->getArea\\(\\)  \n        Shapes.hpp&nbsp;(19)&nbsp;:&nbsp;double getArea\\(\\) const \\{ return 0; \\}  \n**Point of division by zero**&nbsp;  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;return shape1\\->getArea\\(\\)\/shape2\\->getArea\\(\\);" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "BD-PB-ZERO", "level": "error", "message": { "text": "Division by \"shape2.getArea()\" which may possibly be zero", "markdown": "**\\[Line 5\\] Division by \"shape2\\.getArea\\(\\)\" which may possibly be zero**  \n  \n**Start of the path**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape2\\->getArea\\(\\)  \n        Shapes.hpp&nbsp;(19)&nbsp;:&nbsp;double getArea\\(\\) const \\{ return 0; \\}  \n**Point of division by zero**&nbsp;  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;return shape1\\->getArea\\(\\)\/shape2\\->getArea\\(\\);" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "CERT_C-FLP03-a", "level": "warning", "message": { "text": "Division by \"shape2.getArea()\" which may possibly be zero", "markdown": "**\\[Line 5\\] Division by \"shape2\\.getArea\\(\\)\" which may possibly be zero**  \n  \n**Start of the path**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape2\\->getArea\\(\\)  \n        Shapes.hpp&nbsp;(19)&nbsp;:&nbsp;double getArea\\(\\) const \\{ return 0; \\}  \n**Point of division by zero**&nbsp;  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;return shape1\\->getArea\\(\\)\/shape2\\->getArea\\(\\);" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "CERT_C-INT33-a", "level": "error", "message": { "text": "Division by \"shape2.getArea()\" which may possibly be zero", "markdown": "**\\[Line 5\\] Division by \"shape2\\.getArea\\(\\)\" which may possibly be zero**  \n  \n**Start of the path**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape2\\->getArea\\(\\)  \n        Shapes.hpp&nbsp;(19)&nbsp;:&nbsp;double getArea\\(\\) const \\{ return 0; \\}  \n**Point of division by zero**&nbsp;  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;return shape1\\->getArea\\(\\)\/shape2\\->getArea\\(\\);" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "HICPP-5_5_1-a", "level": "error", "message": { "text": "Division by \"shape2.getArea()\" which may possibly be zero", "markdown": "**\\[Line 5\\] Division by \"shape2\\.getArea\\(\\)\" which may possibly be zero**  \n  \n**Start of the path**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape2\\->getArea\\(\\)  \n        Shapes.hpp&nbsp;(19)&nbsp;:&nbsp;double getArea\\(\\) const \\{ return 0; \\}  \n**Point of division by zero**&nbsp;  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;return shape1\\->getArea\\(\\)\/shape2\\->getArea\\(\\);" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "MISRA2008-0_3_1_c", "level": "note", "message": { "text": "Division by \"shape2.getArea()\" which may possibly be zero", "markdown": "**\\[Line 5\\] Division by \"shape2\\.getArea\\(\\)\" which may possibly be zero**  \n  \n**Start of the path**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape2\\->getArea\\(\\)  \n        Shapes.hpp&nbsp;(19)&nbsp;:&nbsp;double getArea\\(\\) const \\{ return 0; \\}  \n**Point of division by zero**&nbsp;  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;return shape1\\->getArea\\(\\)\/shape2\\->getArea\\(\\);" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "MISRA2012-DIR-4_1_c", "level": "error", "message": { "text": "Division by \"shape2.getArea()\" which may possibly be zero", "markdown": "**\\[Line 5\\] Division by \"shape2\\.getArea\\(\\)\" which may possibly be zero**  \n  \n**Start of the path**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape2\\->getArea\\(\\)  \n        Shapes.hpp&nbsp;(19)&nbsp;:&nbsp;double getArea\\(\\) const \\{ return 0; \\}  \n**Point of division by zero**&nbsp;  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;return shape1\\->getArea\\(\\)\/shape2\\->getArea\\(\\);" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "MISRA2012-RULE-1_3_a", "level": "error", "message": { "text": "Division by \"shape2.getArea()\" which may possibly be zero", "markdown": "**\\[Line 5\\] Division by \"shape2\\.getArea\\(\\)\" which may possibly be zero**  \n  \n**Start of the path**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape2\\->getArea\\(\\)  \n        Shapes.hpp&nbsp;(19)&nbsp;:&nbsp;double getArea\\(\\) const \\{ return 0; \\}  \n**Point of division by zero**&nbsp;  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;return shape1\\->getArea\\(\\)\/shape2\\->getArea\\(\\);" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "MISRAC2012-DIR_4_1-c", "level": "error", "message": { "text": "Division by \"shape2.getArea()\" which may possibly be zero", "markdown": "**\\[Line 5\\] Division by \"shape2\\.getArea\\(\\)\" which may possibly be zero**  \n  \n**Start of the path**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape2\\->getArea\\(\\)  \n        Shapes.hpp&nbsp;(19)&nbsp;:&nbsp;double getArea\\(\\) const \\{ return 0; \\}  \n**Point of division by zero**&nbsp;  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;return shape1\\->getArea\\(\\)\/shape2\\->getArea\\(\\);" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "MISRAC2012-RULE_1_3-a", "level": "error", "message": { "text": "Division by \"shape2.getArea()\" which may possibly be zero", "markdown": "**\\[Line 5\\] Division by \"shape2\\.getArea\\(\\)\" which may possibly be zero**  \n  \n**Start of the path**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape2\\->getArea\\(\\)  \n        Shapes.hpp&nbsp;(19)&nbsp;:&nbsp;double getArea\\(\\) const \\{ return 0; \\}  \n**Point of division by zero**&nbsp;  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;return shape1\\->getArea\\(\\)\/shape2\\->getArea\\(\\);" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 5\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 5\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 5\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-0_4_2", "level": "note", "message": { "text": "floating-point arithmetic is not documented", "markdown": "**\\[Line 5\\] floating\\-point arithmetic is not documented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "OWASP2019-API9-d", "level": "warning", "message": { "text": "floating-point arithmetic is not documented", "markdown": "**\\[Line 5\\] floating\\-point arithmetic is not documented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-M0_4_2-a", "level": "error", "message": { "text": "floating-point arithmetic is not documented", "markdown": "**\\[Line 5\\] floating\\-point arithmetic is not documented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "COMMENT-10", "level": "warning", "message": { "text": "floating-point arithmetic is not documented", "markdown": "**\\[Line 5\\] floating\\-point arithmetic is not documented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "PREPROC-18", "level": "warning", "message": { "text": "<stdio.h> library shall not be used", "markdown": "**\\[Line 1\\] <stdio\\.h> library shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-022", "level": "error", "message": { "text": "<stdio.h> library shall not be used", "markdown": "**\\[Line 1\\] <stdio\\.h> library shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-M27_0_1-a", "level": "error", "message": { "text": "<stdio.h> library shall not be used", "markdown": "**\\[Line 1\\] <stdio\\.h> library shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-27_0_1", "level": "error", "message": { "text": "<stdio.h> library shall not be used", "markdown": "**\\[Line 1\\] <stdio\\.h> library shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-20_9", "level": "warning", "message": { "text": "<stdio.h> library shall not be used", "markdown": "**\\[Line 1\\] <stdio\\.h> library shall not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-02", "level": "warning", "message": { "text": "Add comment containing the copyright information at the begin of file 'MemoryLeak.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the copyright information at the begin of file 'MemoryLeak\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-133_b", "level": "warning", "message": { "text": "Add comment containing the copyright information at the begin of file 'MemoryLeak.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the copyright information at the begin of file 'MemoryLeak\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-03", "level": "warning", "message": { "text": "Add comment containing the information on the file at the begin of file 'MemoryLeak.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the information on the file at the begin of file 'MemoryLeak\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-133_a", "level": "warning", "message": { "text": "Add comment containing the information on the file at the begin of file 'MemoryLeak.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the information on the file at the begin of file 'MemoryLeak\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-17_2_1-a", "level": "warning", "message": { "text": "Ensure that C Standard Library is securely used", "markdown": "**\\[Line 1\\] Ensure that C Standard Library is securely used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PFO-04", "level": "note", "message": { "text": "Implementation file 'MemoryLeak.cpp' should declare a local constant string that begins from characters \"@(#)\" ", "markdown": "**\\[Line 1\\] Implementation file 'MemoryLeak\\.cpp' should declare a local constant string that begins from characters \"@\\(\\#\\)\" **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-38", "level": "warning", "message": { "text": "Implementation file 'MemoryLeak.cpp' should have the file name extension \".cc\"", "markdown": "**\\[Line 1\\] Implementation file 'MemoryLeak\\.cpp' should have the file name extension \"\\.cc\"**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-18_0_1", "level": "error", "message": { "text": "Instead of C library header '<stdio.h>' the corresponding C++ library header should be used", "markdown": "**\\[Line 1\\] Instead of C library header '<stdio\\.h>' the corresponding C\\+\\+ library header should be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-1_3_3-a", "level": "warning", "message": { "text": "Instead of C library header '<stdio.h>' the corresponding C++ library header should be used", "markdown": "**\\[Line 1\\] Instead of C library header '<stdio\\.h>' the corresponding C\\+\\+ library header should be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A18_0_1-a", "level": "error", "message": { "text": "Instead of C library header '<stdio.h>' the corresponding C++ library header should be used", "markdown": "**\\[Line 1\\] Instead of C library header '<stdio\\.h>' the corresponding C\\+\\+ library header should be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CODSTA-CPP-59", "level": "warning", "message": { "text": "Instead of C library header '<stdio.h>' the corresponding C++ library header should be used", "markdown": "**\\[Line 1\\] Instead of C library header '<stdio\\.h>' the corresponding C\\+\\+ library header should be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A1_1_1-d", "level": "error", "message": { "text": "Instead of C library header '<stdio.h>' the corresponding C++ library header should be used", "markdown": "**\\[Line 1\\] Instead of C library header '<stdio\\.h>' the corresponding C\\+\\+ library header should be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "METRICS-31", "level": "warning", "message": { "text": "The assertion density is lower than two assertions per function", "markdown": "**\\[Line 1\\] The assertion density is lower than two assertions per function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-03", "level": "warning", "message": { "text": "The filename 'MemoryLeak.cpp' should be in lowercase", "markdown": "**\\[Line 1\\] The filename 'MemoryLeak\\.cpp' should be in lowercase**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-40", "level": "warning", "message": { "text": "All letters beside the first one in name 'IOException' should be lowercase", "markdown": "**\\[Line 3\\] All letters beside the first one in name 'IOException' should be lowercase**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-19", "level": "error", "message": { "text": "Class 'IOException' does not define any constructors", "markdown": "**\\[Line 3\\] Class 'IOException' does not define any constructors**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-04", "level": "warning", "message": { "text": "Class 'IOException' missing assignment operator or special comment", "markdown": "**\\[Line 3\\] Class 'IOException' missing assignment operator or special comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-05", "level": "warning", "message": { "text": "Class 'IOException' missing copy constructor or special comment", "markdown": "**\\[Line 3\\] Class 'IOException' missing copy constructor or special comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A12_4_2-a", "level": "warning", "message": { "text": "Class 'IOException' should be final", "markdown": "**\\[Line 3\\] Class 'IOException' should be final**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-MCPP-23", "level": "warning", "message": { "text": "Class 'IOException' should be final", "markdown": "**\\[Line 3\\] Class 'IOException' should be final**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-098", "level": "warning", "message": { "text": "Do not declare the 'IOException' type in the global namespace", "markdown": "**\\[Line 3\\] Do not declare the 'IOException' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-M7_3_1-a", "level": "error", "message": { "text": "Do not declare the 'IOException' type in the global namespace", "markdown": "**\\[Line 3\\] Do not declare the 'IOException' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-36", "level": "warning", "message": { "text": "Do not declare the 'IOException' type in the global namespace", "markdown": "**\\[Line 3\\] Do not declare the 'IOException' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2008-7_3_1", "level": "error", "message": { "text": "Do not declare the 'IOException' type in the global namespace", "markdown": "**\\[Line 3\\] Do not declare the 'IOException' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare copy assignment operator in 'IOException'", "markdown": "**\\[Line 3\\] Explicitly declare copy assignment operator in 'IOException'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare copy constructor in 'IOException'", "markdown": "**\\[Line 3\\] Explicitly declare copy constructor in 'IOException'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare default constructor in 'IOException'", "markdown": "**\\[Line 3\\] Explicitly declare default constructor in 'IOException'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare destructor in 'IOException'", "markdown": "**\\[Line 3\\] Explicitly declare destructor in 'IOException'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare move assignment operator in 'IOException'", "markdown": "**\\[Line 3\\] Explicitly declare move assignment operator in 'IOException'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare move constructor in 'IOException'", "markdown": "**\\[Line 3\\] Explicitly declare move constructor in 'IOException'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-HN-19", "level": "warning", "message": { "text": "The 'IOException' identifier should have the 'C' prefix", "markdown": "**\\[Line 3\\] The 'IOException' identifier should have the 'C' prefix**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The declaration of the 'IOException' type should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 3\\] The declaration of the 'IOException' type should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The declaration of the 'IOException' type should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 3\\] The declaration of the 'IOException' type should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-098", "level": "warning", "message": { "text": "Do not declare the 'readIntegerArray' function in the global namespace", "markdown": "**\\[Line 5\\] Do not declare the 'readIntegerArray' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-M7_3_1-a", "level": "error", "message": { "text": "Do not declare the 'readIntegerArray' function in the global namespace", "markdown": "**\\[Line 5\\] Do not declare the 'readIntegerArray' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "CODSTA-CPP-36", "level": "warning", "message": { "text": "Do not declare the 'readIntegerArray' function in the global namespace", "markdown": "**\\[Line 5\\] Do not declare the 'readIntegerArray' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2008-7_3_1", "level": "error", "message": { "text": "Do not declare the 'readIntegerArray' function in the global namespace", "markdown": "**\\[Line 5\\] Do not declare the 'readIntegerArray' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 5\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 5\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'readIntegerArray' has Cyclomatic Complexity value: 3", "markdown": "**\\[Line 5\\] Function 'readIntegerArray' has Cyclomatic Complexity value: 3**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'readIntegerArray' has Essential Complexity value: 1", "markdown": "**\\[Line 5\\] Function 'readIntegerArray' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "OWASP2019-API9-e", "level": "warning", "message": { "text": "Function 'readIntegerArray' has external linkage and is not declared in the header", "markdown": "**\\[Line 5\\] Function 'readIntegerArray' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-A3_3_1-a", "level": "error", "message": { "text": "Function 'readIntegerArray' has external linkage and is not declared in the header", "markdown": "**\\[Line 5\\] Function 'readIntegerArray' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "JSF-137", "level": "warning", "message": { "text": "Function 'readIntegerArray' has external linkage and is not declared in the header", "markdown": "**\\[Line 5\\] Function 'readIntegerArray' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA-023", "level": "warning", "message": { "text": "Function 'readIntegerArray' has external linkage and is not declared in the header", "markdown": "**\\[Line 5\\] Function 'readIntegerArray' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2008-3_3_1", "level": "error", "message": { "text": "Function 'readIntegerArray' has external linkage and is not declared in the header", "markdown": "**\\[Line 5\\] Function 'readIntegerArray' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "CERT_C-DCL15-a", "level": "warning", "message": { "text": "Function 'readIntegerArray' has external linkage and is not declared in the header", "markdown": "**\\[Line 5\\] Function 'readIntegerArray' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2004-8_10", "level": "warning", "message": { "text": "Function 'readIntegerArray' has external linkage and is not declared in the header", "markdown": "**\\[Line 5\\] Function 'readIntegerArray' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "Function 'readIntegerArray' returns a pointer type", "markdown": "**\\[Line 5\\] Function 'readIntegerArray' returns a pointer type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "Function 'readIntegerArray' returns a pointer type", "markdown": "**\\[Line 5\\] Function 'readIntegerArray' returns a pointer type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2008-2_10_1", "level": "error", "message": { "text": "Identifier name: 'file' differs only by case from its type name: 'FILE'", "markdown": "**\\[Line 5\\] Identifier name: 'file' differs only by case from its type name: 'FILE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "HICPP-2_4_1-a", "level": "warning", "message": { "text": "Identifier name: 'file' differs only by case from its type name: 'FILE'", "markdown": "**\\[Line 5\\] Identifier name: 'file' differs only by case from its type name: 'FILE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "AUTOSAR-M2_10_1-a", "level": "error", "message": { "text": "Identifier name: 'file' differs only by case from its type name: 'FILE'", "markdown": "**\\[Line 5\\] Identifier name: 'file' differs only by case from its type name: 'FILE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "NAMING-47", "level": "warning", "message": { "text": "Identifier name: 'file' differs only by case from its type name: 'FILE'", "markdown": "**\\[Line 5\\] Identifier name: 'file' differs only by case from its type name: 'FILE'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "NAMING-17", "level": "warning", "message": { "text": "Naming convention not followed: readIntegerArray", "markdown": "**\\[Line 5\\] Naming convention not followed: readIntegerArray**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "CERT_C-API00-a", "level": "warning", "message": { "text": "Parameter 'file' is not validated before use", "markdown": "**\\[Line 5\\] Parameter 'file' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "CODSTA-86", "level": "warning", "message": { "text": "Parameter 'file' is not validated before use", "markdown": "**\\[Line 5\\] Parameter 'file' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "CERT_C-API00-a", "level": "warning", "message": { "text": "Parameter 'pSize' is not validated before use", "markdown": "**\\[Line 5\\] Parameter 'pSize' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "CODSTA-86", "level": "warning", "message": { "text": "Parameter 'pSize' is not validated before use", "markdown": "**\\[Line 5\\] Parameter 'pSize' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "AUTOSAR-M7_1_2-b", "level": "error", "message": { "text": "Pass parameter \"pSize\" with const specifier", "markdown": "**\\[Line 5\\] Pass parameter \"pSize\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "MISRAC2012-RULE_8_13-a", "level": "warning", "message": { "text": "Pass parameter \"pSize\" with const specifier", "markdown": "**\\[Line 5\\] Pass parameter \"pSize\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "CERT_C-DCL13-a", "level": "warning", "message": { "text": "Pass parameter \"pSize\" with const specifier", "markdown": "**\\[Line 5\\] Pass parameter \"pSize\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "MISRA2004-16_7", "level": "warning", "message": { "text": "Pass parameter \"pSize\" with const specifier", "markdown": "**\\[Line 5\\] Pass parameter \"pSize\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "MISRA2012-RULE-8_13_a", "level": "warning", "message": { "text": "Pass parameter \"pSize\" with const specifier", "markdown": "**\\[Line 5\\] Pass parameter \"pSize\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "JSF-118", "level": "warning", "message": { "text": "Pass parameter \"pSize\" with const specifier", "markdown": "**\\[Line 5\\] Pass parameter \"pSize\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "MISRA2008-7_1_2_a", "level": "error", "message": { "text": "Pass parameter \"pSize\" with const specifier", "markdown": "**\\[Line 5\\] Pass parameter \"pSize\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "FORMAT-28", "level": "warning", "message": { "text": "Return type is not placed in line before function 'readIntegerArray'", "markdown": "**\\[Line 5\\] Return type is not placed in line before function 'readIntegerArray'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "NAMING-HN-34", "level": "warning", "message": { "text": "The 'file' identifier should have the 'p' prefix", "markdown": "**\\[Line 5\\] The 'file' identifier should have the 'p' prefix**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'file' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 5\\] The 'file' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'file' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 5\\] The 'file' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "NAMING-HN-23", "level": "warning", "message": { "text": "The 'pSize' identifier should have the 'i' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 5\\] The 'pSize' identifier should have the 'i' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "NAMING-HN-44", "level": "warning", "message": { "text": "The 'pSize' identifier should have the 'i' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 5\\] The 'pSize' identifier should have the 'i' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "NAMING-HN-31", "level": "warning", "message": { "text": "The 'pSize' identifier should have the 'n' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 5\\] The 'pSize' identifier should have the 'n' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'pSize' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 5\\] The 'pSize' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'pSize' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 5\\] The 'pSize' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "GLOBAL-UNUSEDFUNC", "level": "warning", "message": { "text": "The 'readIntegerArray' function is not used in the testing scope", "markdown": "**\\[Line 5\\] The 'readIntegerArray' function is not used in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-M0_1_10-a", "level": "warning", "message": { "text": "The 'readIntegerArray' function is not used in the testing scope", "markdown": "**\\[Line 5\\] The 'readIntegerArray' function is not used in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2008-0_1_10_b", "level": "error", "message": { "text": "The 'readIntegerArray' function is not used in the testing scope", "markdown": "**\\[Line 5\\] The 'readIntegerArray' function is not used in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'readIntegerArray' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 5\\] The 'readIntegerArray' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'readIntegerArray' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 5\\] The 'readIntegerArray' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'readIntegerArray' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 5\\] The 'readIntegerArray' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'readIntegerArray' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 5\\] The 'readIntegerArray' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'readIntegerArray' function is not preceded by a comment", "markdown": "**\\[Line 5\\] The definition of the 'readIntegerArray' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'readIntegerArray' function is not preceded by a comment", "markdown": "**\\[Line 5\\] The definition of the 'readIntegerArray' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'file' differs only by case from identifier 'FILE' declared in file 'stdio.h'", "markdown": "**\\[Line 5\\] The identifier 'file' differs only by case from identifier 'FILE' declared in file 'stdio\\.h'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'file' differs only by case from identifier 'FILE' declared in file 'stdio.h'", "markdown": "**\\[Line 5\\] The identifier 'file' differs only by case from identifier 'FILE' declared in file 'stdio\\.h'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'readIntegerArray' should be composed only of lowercase letters", "markdown": "**\\[Line 5\\] The name 'readIntegerArray' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'readIntegerArray' should be composed only of lowercase letters", "markdown": "**\\[Line 5\\] The name 'readIntegerArray' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The parameter of pointer or array type is declared: file", "markdown": "**\\[Line 5\\] The parameter of pointer or array type is declared: file**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The parameter of pointer or array type is declared: pSize", "markdown": "**\\[Line 5\\] The parameter of pointer or array type is declared: pSize**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The parameter of pointer type is declared: file", "markdown": "**\\[Line 5\\] The parameter of pointer type is declared: file**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The parameter of pointer type is declared: pSize", "markdown": "**\\[Line 5\\] The parameter of pointer type is declared: pSize**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "CODSTA-MCPP-08_b", "level": "error", "message": { "text": "The return type of the 'readIntegerArray' function should be declared as 'auto'", "markdown": "**\\[Line 5\\] The return type of the 'readIntegerArray' function should be declared as 'auto'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 5\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 5\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 5\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 5\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 6\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CDD-DUPS", "level": "warning", "message": { "text": "Duplicated string: '\"%d\"'", "markdown": "**\\[Line 7\\] Duplicated string: '\"%d\"'**  \n  \nReview duplicate in:&nbsp;MemoryLeak.cpp&nbsp;(7)  \nReview duplicate in:&nbsp;MemoryLeak.cpp&nbsp;(10)" }, "partialFingerprints": { "violType": "DupViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 15, "endColumn": 19 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 7\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 7\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 7\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CODSTA-CPP-01", "level": "note", "message": { "text": "Prefer iostream.h to stdio.h", "markdown": "**\\[Line 7\\] Prefer iostream\\.h to stdio\\.h**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRAC2012-RULE_21_6-a", "level": "error", "message": { "text": "The 'fscanf' library function should not be used", "markdown": "**\\[Line 7\\] The 'fscanf' library function should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2012-RULE-21_6", "level": "error", "message": { "text": "The 'fscanf' library function should not be used", "markdown": "**\\[Line 7\\] The 'fscanf' library function should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CERT_C-ERR02-a", "level": "warning", "message": { "text": "The 'fscanf' library function should not be used", "markdown": "**\\[Line 7\\] The 'fscanf' library function should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CODSTA-110", "level": "warning", "message": { "text": "The 'fscanf' library function should not be used", "markdown": "**\\[Line 7\\] The 'fscanf' library function should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CWE-798-a", "level": "note", "message": { "text": "The string literal is embedded directly in the code: %d", "markdown": "**\\[Line 7\\] The string literal is embedded directly in the code: %d**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 15, "endColumn": 16 } } } ] }, { "ruleId": "CODSTA-203", "level": "note", "message": { "text": "The string literal is embedded directly in the code: %d", "markdown": "**\\[Line 7\\] The string literal is embedded directly in the code: %d**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 15, "endColumn": 16 } } } ] }, { "ruleId": "APSC_DV-003110-a", "level": "error", "message": { "text": "The string literal is embedded directly in the code: %d", "markdown": "**\\[Line 7\\] The string literal is embedded directly in the code: %d**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 15, "endColumn": 16 } } } ] }, { "ruleId": "CERT_C-MSC41-a", "level": "error", "message": { "text": "The string literal is embedded directly in the code: %d", "markdown": "**\\[Line 7\\] The string literal is embedded directly in the code: %d**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 15, "endColumn": 16 } } } ] }, { "ruleId": "AUTOSAR-A27_0_4-d", "level": "error", "message": { "text": "The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call", "markdown": "**\\[Line 7\\] The string literal should not be passed as an argument of the 'const char \\*' type in the 'fscanf' function call**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 15, "endColumn": 16 } } } ] }, { "ruleId": "PB-76", "level": "warning", "message": { "text": "The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call", "markdown": "**\\[Line 7\\] The string literal should not be passed as an argument of the 'const char \\*' type in the 'fscanf' function call**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 15, "endColumn": 16 } } } ] }, { "ruleId": "APSC_DV-003235-a", "level": "error", "message": { "text": "The value returned by the POSIX library function 'fscanf' should be used", "markdown": "**\\[Line 7\\] The value returned by the POSIX library function 'fscanf' should be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CERT_C-POS54-a", "level": "error", "message": { "text": "The value returned by the POSIX library function 'fscanf' should be used", "markdown": "**\\[Line 7\\] The value returned by the POSIX library function 'fscanf' should be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CERT_C-ERR33-a", "level": "error", "message": { "text": "The value returned by the standard library function 'fscanf' should be used", "markdown": "**\\[Line 7\\] The value returned by the standard library function 'fscanf' should be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "APSC_DV-002390-c", "level": "error", "message": { "text": "There should be number describing size of variable in '%d' on position:1", "markdown": "**\\[Line 7\\] There should be number describing size of variable in '%d' on position:1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "SECURITY-14", "level": "error", "message": { "text": "There should be number describing size of variable in '%d' on position:1", "markdown": "**\\[Line 7\\] There should be number describing size of variable in '%d' on position:1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CERT_C-STR07-a", "level": "error", "message": { "text": "Unsafe string function 'fscanf' is being used", "markdown": "**\\[Line 7\\] Unsafe string function 'fscanf' is being used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "AUTOSAR-A27_0_4-b", "level": "error", "message": { "text": "Unsafe string function 'fscanf' is being used", "markdown": "**\\[Line 7\\] Unsafe string function 'fscanf' is being used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CERT_C-INT05-a", "level": "warning", "message": { "text": "Unsafe string function 'fscanf' is being used", "markdown": "**\\[Line 7\\] Unsafe string function 'fscanf' is being used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "SECURITY-13", "level": "error", "message": { "text": "Unsafe string function 'fscanf' is being used", "markdown": "**\\[Line 7\\] Unsafe string function 'fscanf' is being used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CODSTA-122_a", "level": "warning", "message": { "text": "Unused function's \"fscanf\" return value", "markdown": "**\\[Line 7\\] Unused function's \"fscanf\" return value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRAC2012-RULE_17_7-a", "level": "error", "message": { "text": "Unused function's \"fscanf\" return value", "markdown": "**\\[Line 7\\] Unused function's \"fscanf\" return value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CERT_C-EXP12-a", "level": "warning", "message": { "text": "Unused function's \"fscanf\" return value", "markdown": "**\\[Line 7\\] Unused function's \"fscanf\" return value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2012-RULE-17_7_a", "level": "error", "message": { "text": "Unused function's \"fscanf\" return value", "markdown": "**\\[Line 7\\] Unused function's \"fscanf\" return value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2004-16_10", "level": "warning", "message": { "text": "Unused function's \"fscanf\" return value", "markdown": "**\\[Line 7\\] Unused function's \"fscanf\" return value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "AUTOSAR-M0_3_2-a", "level": "error", "message": { "text": "Unused function's \"fscanf\" return value", "markdown": "**\\[Line 7\\] Unused function's \"fscanf\" return value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2008-0_3_2", "level": "error", "message": { "text": "Unused function's \"fscanf\" return value", "markdown": "**\\[Line 7\\] Unused function's \"fscanf\" return value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-115", "level": "warning", "message": { "text": "Unused function's \"fscanf\" return value", "markdown": "**\\[Line 7\\] Unused function's \"fscanf\" return value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "AUTOSAR-A0_1_2-a", "level": "error", "message": { "text": "Unused function's 'fscanf' return value", "markdown": "**\\[Line 7\\] Unused function's 'fscanf' return value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CODSTA-CPP-58", "level": "warning", "message": { "text": "Unused function's 'fscanf' return value", "markdown": "**\\[Line 7\\] Unused function's 'fscanf' return value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2008-0_1_7", "level": "error", "message": { "text": "Unused function's 'fscanf' return value", "markdown": "**\\[Line 7\\] Unused function's 'fscanf' return value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-115_a", "level": "warning", "message": { "text": "Unused function's 'fscanf' return value", "markdown": "**\\[Line 7\\] Unused function's 'fscanf' return value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CERT_C-ERR33-d", "level": "error", "message": { "text": "Value returned from method \"fscanf\" should be checked", "markdown": "**\\[Line 7\\] Value returned from method \"fscanf\" should be checked**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } } ] }, { "ruleId": "MISRA2012-DIR-4_12", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 8\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 14, "endColumn": 15 } } } ] }, { "ruleId": "MISRA2008-18_4_1", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 8\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 14, "endColumn": 15 } } } ] }, { "ruleId": "MISRAC2012-RULE_21_3-a", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 8\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 14, "endColumn": 15 } } } ] }, { "ruleId": "AUTOSAR-A18_5_2-a", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 8\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 14, "endColumn": 15 } } } ] }, { "ruleId": "JSF-206", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 8\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 14, "endColumn": 15 } } } ] }, { "ruleId": "MISRA2012-RULE-21_3", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 8\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 14, "endColumn": 15 } } } ] }, { "ruleId": "MISRA2004-20_4", "level": "warning", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 8\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 14, "endColumn": 15 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_12-a", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 8\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 14, "endColumn": 15 } } } ] }, { "ruleId": "MRM-34", "level": "warning", "message": { "text": "Check the return value of new", "markdown": "**\\[Line 8\\] Check the return value of new**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CERT_CPP-MEM52-a", "level": "error", "message": { "text": "Check the return value of new", "markdown": "**\\[Line 8\\] Check the return value of new**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "BD-SECURITY-TDALLOC", "level": "error", "message": { "text": "Data obtained from a file (\"*pSize\") is used to determine the size of memory allocation", "markdown": "**\\[Line 8\\] Data obtained from a file \\(\"\\*pSize\"\\) is used to determine the size of memory allocation**  \n  \n**Tainting point**  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where the array is allocated**&nbsp;  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "CWE-770-a", "level": "error", "message": { "text": "Data obtained from a file (\"*pSize\") is used to determine the size of memory allocation", "markdown": "**\\[Line 8\\] Data obtained from a file \\(\"\\*pSize\"\\) is used to determine the size of memory allocation**  \n  \n**Tainting point**  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where the array is allocated**&nbsp;  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "OWASP2019-API4-a", "level": "error", "message": { "text": "Data obtained from a file (\"*pSize\") is used to determine the size of memory allocation", "markdown": "**\\[Line 8\\] Data obtained from a file \\(\"\\*pSize\"\\) is used to determine the size of memory allocation**  \n  \n**Tainting point**  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where the array is allocated**&nbsp;  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "CERT_C-DCL00-a", "level": "warning", "message": { "text": "Declare local variable 'data' as const", "markdown": "**\\[Line 8\\] Declare local variable 'data' as const**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A7_1_1-a", "level": "error", "message": { "text": "Declare local variable 'data' as const", "markdown": "**\\[Line 8\\] Declare local variable 'data' as const**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2008-7_1_1", "level": "error", "message": { "text": "Declare local variable 'data' as const", "markdown": "**\\[Line 8\\] Declare local variable 'data' as const**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-53", "level": "warning", "message": { "text": "Declare local variable 'data' as const", "markdown": "**\\[Line 8\\] Declare local variable 'data' as const**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-7_1_2-a", "level": "warning", "message": { "text": "Declare local variable 'data' as const", "markdown": "**\\[Line 8\\] Declare local variable 'data' as const**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 8\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 8\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "NAMING-22", "level": "warning", "message": { "text": "Naming convention not followed: data", "markdown": "**\\[Line 8\\] Naming convention not followed: data**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 8\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 8\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 8\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-HN-23", "level": "warning", "message": { "text": "The 'data' identifier should have the 'i' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 8\\] The 'data' identifier should have the 'i' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-HN-44", "level": "warning", "message": { "text": "The 'data' identifier should have the 'i' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 8\\] The 'data' identifier should have the 'i' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-HN-31", "level": "warning", "message": { "text": "The 'data' identifier should have the 'n' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 8\\] The 'data' identifier should have the 'n' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-HN-34", "level": "warning", "message": { "text": "The 'data' identifier should have the 'p' prefix", "markdown": "**\\[Line 8\\] The 'data' identifier should have the 'p' prefix**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-HN-16", "level": "warning", "message": { "text": "The 'data' identifier should have the 'prg' prefix", "markdown": "**\\[Line 8\\] The 'data' identifier should have the 'prg' prefix**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'data' variable should be commented", "markdown": "**\\[Line 8\\] The 'data' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'data' variable should be commented", "markdown": "**\\[Line 8\\] The 'data' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-MCPP-08_a", "level": "error", "message": { "text": "The 'data' variable should be declared with the 'auto' type specifier", "markdown": "**\\[Line 8\\] The 'data' variable should be declared with the 'auto' type specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "AUTOSAR-A8_5_2-a", "level": "error", "message": { "text": "The definition of the 'data' variable should contain a braced initializer", "markdown": "**\\[Line 8\\] The definition of the 'data' variable should contain a braced initializer**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-MCPP-38", "level": "warning", "message": { "text": "The definition of the 'data' variable should contain a braced initializer", "markdown": "**\\[Line 8\\] The definition of the 'data' variable should contain a braced initializer**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The variable of pointer or array type is declared: data", "markdown": "**\\[Line 8\\] The variable of pointer or array type is declared: data**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The variable of pointer type is declared: data", "markdown": "**\\[Line 8\\] The variable of pointer type is declared: data**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 8\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 8\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 8\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 8\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "STL-10", "level": "warning", "message": { "text": "Use vector or string instead of dynamically allocated array", "markdown": "**\\[Line 8\\] Use vector or string instead of dynamically allocated array**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 14, "endColumn": 15 } } } ] }, { "ruleId": "PORT-13", "level": "warning", "message": { "text": "'i' shall be declared as unsigned int or signed int", "markdown": "**\\[Line 9\\] 'i' shall be declared as unsigned int or signed int**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "CODSTA-83", "level": "warning", "message": { "text": "A loop does not have a fixed upper nor lower bound", "markdown": "**\\[Line 9\\] A loop does not have a fixed upper nor lower bound**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "BD-SECURITY-TDLOOP", "level": "error", "message": { "text": "Data obtained from a file (\"*pSize\") is used in a loop condition", "markdown": "**\\[Line 9\\] Data obtained from a file \\(\"\\*pSize\"\\) is used in a loop condition**  \n  \n**Tainting point**  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: pSize\\[\\]_  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];  \n**Tainted data use in a loop condition**&nbsp;  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: pSize\\[0\\]_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 9\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 9\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 9\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 9\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-43", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 9\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_b", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 9\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "OPT-04", "level": "warning", "message": { "text": "Postfix operator applied to variable 'i'; prefer prefix type", "markdown": "**\\[Line 9\\] Postfix operator applied to variable 'i'; prefer prefix type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 9\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 9\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 9\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-02", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 9\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'i' variable should be commented", "markdown": "**\\[Line 9\\] The 'i' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'i' variable should be commented", "markdown": "**\\[Line 9\\] The 'i' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A8_5_2-a", "level": "error", "message": { "text": "The definition of the 'i' variable should contain a braced initializer", "markdown": "**\\[Line 9\\] The definition of the 'i' variable should contain a braced initializer**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "CODSTA-MCPP-38", "level": "warning", "message": { "text": "The definition of the 'i' variable should contain a braced initializer", "markdown": "**\\[Line 9\\] The definition of the 'i' variable should contain a braced initializer**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 9\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 9\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "APSC_DV-002560-k", "level": "error", "message": { "text": "User input was directly used as a loop boundary: pSize", "markdown": "**\\[Line 9\\] User input was directly used as a loop boundary: pSize**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "APSC_DV-002550-k", "level": "error", "message": { "text": "User input was directly used as a loop boundary: pSize", "markdown": "**\\[Line 9\\] User input was directly used as a loop boundary: pSize**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "APSC_DV-001290-b", "level": "error", "message": { "text": "User input was directly used as a loop boundary: pSize", "markdown": "**\\[Line 9\\] User input was directly used as a loop boundary: pSize**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "SECURITY-38", "level": "error", "message": { "text": "User input was directly used as a loop boundary: pSize", "markdown": "**\\[Line 9\\] User input was directly used as a loop boundary: pSize**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "CWE-20-j", "level": "error", "message": { "text": "User input was directly used as a loop boundary: pSize", "markdown": "**\\[Line 9\\] User input was directly used as a loop boundary: pSize**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "APSC_DV-002530-k", "level": "error", "message": { "text": "User input was directly used as a loop boundary: pSize", "markdown": "**\\[Line 9\\] User input was directly used as a loop boundary: pSize**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "APSC_DV-002520-k", "level": "error", "message": { "text": "User input was directly used as a loop boundary: pSize", "markdown": "**\\[Line 9\\] User input was directly used as a loop boundary: pSize**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "MISRA2004-17_4", "level": "warning", "message": { "text": "Avoid indexing non-array objects", "markdown": "**\\[Line 10\\] Avoid indexing non\\-array objects**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "MISRA2008-5_0_15", "level": "error", "message": { "text": "Avoid indexing non-array objects", "markdown": "**\\[Line 10\\] Avoid indexing non\\-array objects**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "AUTOSAR-M5_0_15-a", "level": "error", "message": { "text": "Avoid indexing non-array objects", "markdown": "**\\[Line 10\\] Avoid indexing non\\-array objects**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 10\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 10\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 10\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 10\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 10\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 10\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-43", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 10\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_b", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 10\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CODSTA-CPP-01", "level": "note", "message": { "text": "Prefer iostream.h to stdio.h", "markdown": "**\\[Line 10\\] Prefer iostream\\.h to stdio\\.h**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 10\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 10\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 10\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-02", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 10\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRAC2012-RULE_21_6-a", "level": "error", "message": { "text": "The 'fscanf' library function should not be used", "markdown": "**\\[Line 10\\] The 'fscanf' library function should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2012-RULE-21_6", "level": "error", "message": { "text": "The 'fscanf' library function should not be used", "markdown": "**\\[Line 10\\] The 'fscanf' library function should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CERT_C-ERR02-a", "level": "warning", "message": { "text": "The 'fscanf' library function should not be used", "markdown": "**\\[Line 10\\] The 'fscanf' library function should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-110", "level": "warning", "message": { "text": "The 'fscanf' library function should not be used", "markdown": "**\\[Line 10\\] The 'fscanf' library function should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-23", "level": "warning", "message": { "text": "The 'if' statement doesn't have an 'else' clause", "markdown": "**\\[Line 10\\] The 'if' statement doesn't have an 'else' clause**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "CWE-798-a", "level": "note", "message": { "text": "The string literal is embedded directly in the code: %d", "markdown": "**\\[Line 10\\] The string literal is embedded directly in the code: %d**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "CODSTA-203", "level": "note", "message": { "text": "The string literal is embedded directly in the code: %d", "markdown": "**\\[Line 10\\] The string literal is embedded directly in the code: %d**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "APSC_DV-003110-a", "level": "error", "message": { "text": "The string literal is embedded directly in the code: %d", "markdown": "**\\[Line 10\\] The string literal is embedded directly in the code: %d**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "CERT_C-MSC41-a", "level": "error", "message": { "text": "The string literal is embedded directly in the code: %d", "markdown": "**\\[Line 10\\] The string literal is embedded directly in the code: %d**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "AUTOSAR-A27_0_4-d", "level": "error", "message": { "text": "The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call", "markdown": "**\\[Line 10\\] The string literal should not be passed as an argument of the 'const char \\*' type in the 'fscanf' function call**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "PB-76", "level": "warning", "message": { "text": "The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call", "markdown": "**\\[Line 10\\] The string literal should not be passed as an argument of the 'const char \\*' type in the 'fscanf' function call**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "APSC_DV-002390-c", "level": "error", "message": { "text": "There should be number describing size of variable in '%d' on position:1", "markdown": "**\\[Line 10\\] There should be number describing size of variable in '%d' on position:1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "SECURITY-14", "level": "error", "message": { "text": "There should be number describing size of variable in '%d' on position:1", "markdown": "**\\[Line 10\\] There should be number describing size of variable in '%d' on position:1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CERT_C-STR07-a", "level": "error", "message": { "text": "Unsafe string function 'fscanf' is being used", "markdown": "**\\[Line 10\\] Unsafe string function 'fscanf' is being used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A27_0_4-b", "level": "error", "message": { "text": "Unsafe string function 'fscanf' is being used", "markdown": "**\\[Line 10\\] Unsafe string function 'fscanf' is being used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CERT_C-INT05-a", "level": "warning", "message": { "text": "Unsafe string function 'fscanf' is being used", "markdown": "**\\[Line 10\\] Unsafe string function 'fscanf' is being used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "SECURITY-13", "level": "error", "message": { "text": "Unsafe string function 'fscanf' is being used", "markdown": "**\\[Line 10\\] Unsafe string function 'fscanf' is being used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 11\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 11\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 11\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 11\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 11\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 11\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 11\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 11\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 11\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "JSF-208", "level": "error", "message": { "text": "c++ exception handling structure is used in function 'readIntegerArray'", "markdown": "**\\[Line 11\\] c\\+\\+ exception handling structure is used in function 'readIntegerArray'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "EXCEPT-05", "level": "error", "message": { "text": "c++ exception handling structure is used in function 'readIntegerArray'", "markdown": "**\\[Line 11\\] c\\+\\+ exception handling structure is used in function 'readIntegerArray'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 12\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 12\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 12\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 12\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 12\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 12\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 13\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 13\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 13\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-25_b", "level": "warning", "message": { "text": "'return' statement should be used with parenthesis", "markdown": "**\\[Line 14\\] 'return' statement should be used with parenthesis**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 14, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 14\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 14, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 14\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 14, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 14\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 14, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "APSC_DV-002000-a", "level": "error", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "AUTOSAR-A15_0_2-a", "level": "error", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "AUTOSAR-A15_1_4-a", "level": "error", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "BD-RES-LEAKS", "level": "error", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "CERT_C-CON30-a", "level": "warning", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "CERT_C-FIO22-a", "level": "warning", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "CERT_C-FIO42-a", "level": "warning", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "CERT_C-MEM00-e", "level": "error", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "CERT_C-MEM12-a", "level": "warning", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "CERT_C-MEM31-a", "level": "error", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "CERT_C-WIN30-a", "level": "error", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "CERT_CPP-ERR57-a", "level": "warning", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "CERT_CPP-FIO51-a", "level": "warning", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "CWE-772-a", "level": "error", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "MISRA2012-DIR-4_13_a", "level": "warning", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "MISRA2012-RULE-22_1", "level": "error", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "MISRAC2012-DIR_4_13-a", "level": "warning", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "MISRAC2012-RULE_22_1-a", "level": "error", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "OWASP2019-API4-b", "level": "error", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "COMMENT-02", "level": "warning", "message": { "text": "Add comment containing the copyright information at the begin of file 'NullPointer.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the copyright information at the begin of file 'NullPointer\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-133_b", "level": "warning", "message": { "text": "Add comment containing the copyright information at the begin of file 'NullPointer.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the copyright information at the begin of file 'NullPointer\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-03", "level": "warning", "message": { "text": "Add comment containing the information on the file at the begin of file 'NullPointer.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the information on the file at the begin of file 'NullPointer\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-133_a", "level": "warning", "message": { "text": "Add comment containing the information on the file at the begin of file 'NullPointer.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the information on the file at the begin of file 'NullPointer\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-09", "level": "error", "message": { "text": "Disallowed #include notation is being used: \"Point.hpp\"", "markdown": "**\\[Line 1\\] Disallowed \\#include notation is being used: \"Point\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-033", "level": "error", "message": { "text": "Disallowed #include notation is being used: \"Point.hpp\"", "markdown": "**\\[Line 1\\] Disallowed \\#include notation is being used: \"Point\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PFO-04", "level": "note", "message": { "text": "Implementation file 'NullPointer.cpp' should declare a local constant string that begins from characters \"@(#)\" ", "markdown": "**\\[Line 1\\] Implementation file 'NullPointer\\.cpp' should declare a local constant string that begins from characters \"@\\(\\#\\)\" **" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-38", "level": "warning", "message": { "text": "Implementation file 'NullPointer.cpp' should have the file name extension \".cc\"", "markdown": "**\\[Line 1\\] Implementation file 'NullPointer\\.cpp' should have the file name extension \"\\.cc\"**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-032", "level": "warning", "message": { "text": "Not a proper header file (*.h ) is being included: \"Point.hpp\"", "markdown": "**\\[Line 1\\] Not a proper header file \\(\\*\\.h \\) is being included: \"Point\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-08", "level": "warning", "message": { "text": "Not a proper header file (*.h ) is being included: \"Point.hpp\"", "markdown": "**\\[Line 1\\] Not a proper header file \\(\\*\\.h \\) is being included: \"Point\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "METRICS-31", "level": "warning", "message": { "text": "The assertion density is lower than two assertions per function", "markdown": "**\\[Line 1\\] The assertion density is lower than two assertions per function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-03", "level": "warning", "message": { "text": "The filename 'NullPointer.cpp' should be in lowercase", "markdown": "**\\[Line 1\\] The filename 'NullPointer\\.cpp' should be in lowercase**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-17_2_1-a", "level": "warning", "message": { "text": "Ensure that C Standard Library is securely used", "markdown": "**\\[Line 3\\] Ensure that C Standard Library is securely used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-18_0_1", "level": "error", "message": { "text": "Instead of C library header '<stdlib.h>' the corresponding C++ library header should be used", "markdown": "**\\[Line 3\\] Instead of C library header '<stdlib\\.h>' the corresponding C\\+\\+ library header should be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-1_3_3-a", "level": "warning", "message": { "text": "Instead of C library header '<stdlib.h>' the corresponding C++ library header should be used", "markdown": "**\\[Line 3\\] Instead of C library header '<stdlib\\.h>' the corresponding C\\+\\+ library header should be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A18_0_1-a", "level": "error", "message": { "text": "Instead of C library header '<stdlib.h>' the corresponding C++ library header should be used", "markdown": "**\\[Line 3\\] Instead of C library header '<stdlib\\.h>' the corresponding C\\+\\+ library header should be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CODSTA-CPP-59", "level": "warning", "message": { "text": "Instead of C library header '<stdlib.h>' the corresponding C++ library header should be used", "markdown": "**\\[Line 3\\] Instead of C library header '<stdlib\\.h>' the corresponding C\\+\\+ library header should be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A1_1_1-d", "level": "error", "message": { "text": "Instead of C library header '<stdlib.h>' the corresponding C++ library header should be used", "markdown": "**\\[Line 3\\] Instead of C library header '<stdlib\\.h>' the corresponding C\\+\\+ library header should be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PORT-13", "level": "warning", "message": { "text": "'argc' shall be declared as unsigned int or signed int", "markdown": "**\\[Line 5\\] 'argc' shall be declared as unsigned int or signed int**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 14, "endColumn": 15 } } } ] }, { "ruleId": "PORT-13", "level": "warning", "message": { "text": "'main' shall be declared as unsigned int or signed int", "markdown": "**\\[Line 5\\] 'main' shall be declared as unsigned int or signed int**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'main' has Cyclomatic Complexity value: 2", "markdown": "**\\[Line 5\\] Function 'main' has Cyclomatic Complexity value: 2**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'main' has Essential Complexity value: 1", "markdown": "**\\[Line 5\\] Function 'main' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "CERT_C-API00-a", "level": "warning", "message": { "text": "Parameter 'argv' is not validated before use", "markdown": "**\\[Line 5\\] Parameter 'argv' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 26, "endColumn": 27 } } } ] }, { "ruleId": "CODSTA-86", "level": "warning", "message": { "text": "Parameter 'argv' is not validated before use", "markdown": "**\\[Line 5\\] Parameter 'argv' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 26, "endColumn": 27 } } } ] }, { "ruleId": "JSF-097_c", "level": "error", "message": { "text": "Parameter 'argv' with array type was found in 'main' function declaration", "markdown": "**\\[Line 5\\] Parameter 'argv' with array type was found in 'main' function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 26, "endColumn": 27 } } } ] }, { "ruleId": "CODSTA-142", "level": "error", "message": { "text": "Parameter 'argv' with array type was found in 'main' function declaration", "markdown": "**\\[Line 5\\] Parameter 'argv' with array type was found in 'main' function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 26, "endColumn": 27 } } } ] }, { "ruleId": "FORMAT-28", "level": "warning", "message": { "text": "Return type is not placed in line before function 'main'", "markdown": "**\\[Line 5\\] Return type is not placed in line before function 'main'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-HN-22", "level": "warning", "message": { "text": "The 'argc' identifier should have the 'i' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 5\\] The 'argc' identifier should have the 'i' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 14, "endColumn": 15 } } } ] }, { "ruleId": "NAMING-HN-43", "level": "warning", "message": { "text": "The 'argc' identifier should have the 'i' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 5\\] The 'argc' identifier should have the 'i' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 14, "endColumn": 15 } } } ] }, { "ruleId": "NAMING-HN-30", "level": "warning", "message": { "text": "The 'argc' identifier should have the 'n' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 5\\] The 'argc' identifier should have the 'n' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 14, "endColumn": 15 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'argc' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 5\\] The 'argc' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'argc' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 5\\] The 'argc' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'argv' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 5\\] The 'argv' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'argv' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 5\\] The 'argv' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "CERT_CPP-ERR50-d", "level": "warning", "message": { "text": "The 'main' function does not contain a catch(...) to catch all unhandled exceptions", "markdown": "**\\[Line 5\\] The 'main' function does not contain a catch\\(\\.\\.\\.\\) to catch all unhandled exceptions**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A15_3_3-a", "level": "error", "message": { "text": "The 'main' function does not contain a catch(...) to catch all unhandled exceptions", "markdown": "**\\[Line 5\\] The 'main' function does not contain a catch\\(\\.\\.\\.\\) to catch all unhandled exceptions**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-15_3_2-b", "level": "warning", "message": { "text": "The 'main' function does not contain a catch(...) to catch all unhandled exceptions", "markdown": "**\\[Line 5\\] The 'main' function does not contain a catch\\(\\.\\.\\.\\) to catch all unhandled exceptions**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2008-15_3_2", "level": "warning", "message": { "text": "The 'main' function does not contain a catch(...) to catch all unhandled exceptions", "markdown": "**\\[Line 5\\] The 'main' function does not contain a catch\\(\\.\\.\\.\\) to catch all unhandled exceptions**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A15_5_3-d", "level": "error", "message": { "text": "The 'main' function does not contain a catch(...) to catch all unhandled exceptions", "markdown": "**\\[Line 5\\] The 'main' function does not contain a catch\\(\\.\\.\\.\\) to catch all unhandled exceptions**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "EXCEPT-06", "level": "warning", "message": { "text": "The 'main' function does not contain a catch(...) to catch all unhandled exceptions", "markdown": "**\\[Line 5\\] The 'main' function does not contain a catch\\(\\.\\.\\.\\) to catch all unhandled exceptions**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2008-15_5_3_d", "level": "error", "message": { "text": "The 'main' function does not contain a catch(...) to catch all unhandled exceptions", "markdown": "**\\[Line 5\\] The 'main' function does not contain a catch\\(\\.\\.\\.\\) to catch all unhandled exceptions**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'main' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 5\\] The 'main' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'main' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 5\\] The 'main' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'main' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 5\\] The 'main' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'main' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 5\\] The 'main' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'char' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'char' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'char' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'char' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'main' function is not preceded by a comment", "markdown": "**\\[Line 5\\] The definition of the 'main' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'main' function is not preceded by a comment", "markdown": "**\\[Line 5\\] The definition of the 'main' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The parameter of pointer or array type is declared: argv", "markdown": "**\\[Line 5\\] The parameter of pointer or array type is declared: argv**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 26, "endColumn": 27 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The parameter of pointer type is declared: argv", "markdown": "**\\[Line 5\\] The parameter of pointer type is declared: argv**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 26, "endColumn": 27 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 6\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-2_10_1", "level": "error", "message": { "text": "Identifier name: 'point' differs only by case from its type name: 'Point'", "markdown": "**\\[Line 7\\] Identifier name: 'point' differs only by case from its type name: 'Point'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "HICPP-2_4_1-a", "level": "warning", "message": { "text": "Identifier name: 'point' differs only by case from its type name: 'Point'", "markdown": "**\\[Line 7\\] Identifier name: 'point' differs only by case from its type name: 'Point'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-M2_10_1-a", "level": "error", "message": { "text": "Identifier name: 'point' differs only by case from its type name: 'Point'", "markdown": "**\\[Line 7\\] Identifier name: 'point' differs only by case from its type name: 'Point'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-47", "level": "warning", "message": { "text": "Identifier name: 'point' differs only by case from its type name: 'Point'", "markdown": "**\\[Line 7\\] Identifier name: 'point' differs only by case from its type name: 'Point'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "MRM-18", "level": "warning", "message": { "text": "Locally allocated memory is not deleted locally for : point", "markdown": "**\\[Line 7\\] Locally allocated memory is not deleted locally for : point**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CERT_C-MEM00-a", "level": "error", "message": { "text": "Locally allocated memory is not deleted locally for : point", "markdown": "**\\[Line 7\\] Locally allocated memory is not deleted locally for : point**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 7\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 7\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 7\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A4_10_1-b", "level": "error", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 7\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "HICPP-2_5_3-a", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 7\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "CODSTA-MCPP-04", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 7\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'point' variable should be commented", "markdown": "**\\[Line 7\\] The 'point' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'point' variable should be commented", "markdown": "**\\[Line 7\\] The 'point' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-A8_5_2-a", "level": "error", "message": { "text": "The definition of the 'point' variable should contain a braced initializer", "markdown": "**\\[Line 7\\] The definition of the 'point' variable should contain a braced initializer**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-MCPP-38", "level": "warning", "message": { "text": "The definition of the 'point' variable should contain a braced initializer", "markdown": "**\\[Line 7\\] The definition of the 'point' variable should contain a braced initializer**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'", "markdown": "**\\[Line 7\\] The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'", "markdown": "**\\[Line 7\\] The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The variable of pointer or array type is declared: point", "markdown": "**\\[Line 7\\] The variable of pointer or array type is declared: point**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The variable of pointer type is declared: point", "markdown": "**\\[Line 7\\] The variable of pointer type is declared: point**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_a", "level": "error", "message": { "text": "Variable 'point' of pointer type is initialized with '0'", "markdown": "**\\[Line 7\\] Variable 'point' of pointer type is initialized with '0'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "AUTOSAR-M4_10_2-a", "level": "error", "message": { "text": "Variable 'point' of pointer type is initialized with '0'", "markdown": "**\\[Line 7\\] Variable 'point' of pointer type is initialized with '0'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "MISRA2008-4_10_2", "level": "error", "message": { "text": "Variable 'point' of pointer type is initialized with '0'", "markdown": "**\\[Line 7\\] Variable 'point' of pointer type is initialized with '0'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "CODSTA-CPP-63", "level": "warning", "message": { "text": "Variable 'point' of pointer type is initialized with '0'", "markdown": "**\\[Line 7\\] Variable 'point' of pointer type is initialized with '0'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-a", "level": "error", "message": { "text": "Variable 'point' of pointer type is initialized with '0'", "markdown": "**\\[Line 7\\] Variable 'point' of pointer type is initialized with '0'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "Variable 'point' of pointer type is initialized with '0'", "markdown": "**\\[Line 7\\] Variable 'point' of pointer type is initialized with '0'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "Variable 'point' of pointer type is initialized with '0'", "markdown": "**\\[Line 7\\] Variable 'point' of pointer type is initialized with '0'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "Variable 'point' of pointer type is initialized with '0'", "markdown": "**\\[Line 7\\] Variable 'point' of pointer type is initialized with '0'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "JSF-151", "level": "warning", "message": { "text": "Literal constant '3' is used", "markdown": "**\\[Line 8\\] Literal constant '3' is used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "CODSTA-26", "level": "warning", "message": { "text": "Literal constant '3' is used", "markdown": "**\\[Line 8\\] Literal constant '3' is used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "AUTOSAR-A5_1_1-a", "level": "error", "message": { "text": "Literal constant '3' is used", "markdown": "**\\[Line 8\\] Literal constant '3' is used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "HICPP-5_1_1-a", "level": "warning", "message": { "text": "Literal constant '3' is used", "markdown": "**\\[Line 8\\] Literal constant '3' is used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "SECURITY-35", "level": "error", "message": { "text": "No value of command line should be trusted: argc", "markdown": "**\\[Line 8\\] No value of command line should be trusted: argc**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 8\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 8\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 8\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-43", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 8\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_b", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 8\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 8\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 8\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 8\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-02", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 8\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CODSTA-23", "level": "warning", "message": { "text": "The 'if' statement doesn't have an 'else' clause", "markdown": "**\\[Line 8\\] The 'if' statement doesn't have an 'else' clause**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2012-DIR-4_12", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 9\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "MISRA2008-18_4_1", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 9\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "MISRAC2012-RULE_21_3-a", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 9\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "AUTOSAR-A18_5_2-a", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 9\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "JSF-206", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 9\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "MISRA2012-RULE-21_3", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 9\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "MISRA2004-20_4", "level": "warning", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 9\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_12-a", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 9\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "MRM-34", "level": "warning", "message": { "text": "Check the return value of new", "markdown": "**\\[Line 9\\] Check the return value of new**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "CERT_CPP-MEM52-a", "level": "error", "message": { "text": "Check the return value of new", "markdown": "**\\[Line 9\\] Check the return value of new**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "MISRAC2012-RULE_21_7-a", "level": "error", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "CERT_CPP-ERR62-a", "level": "warning", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "MISRA2008-18_0_2", "level": "error", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "CERT_C-ERR34-a", "level": "warning", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "MISRA2004-20_10", "level": "warning", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "CERT_C-MSC24-a", "level": "warning", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "CERT_C-ERR07-a", "level": "error", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "AUTOSAR-A18_0_2-a", "level": "error", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "MISRA2012-RULE-21_7", "level": "error", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "JSF-023", "level": "error", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "MISRAC2012-RULE_21_7-a", "level": "error", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "CERT_CPP-ERR62-a", "level": "warning", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "MISRA2008-18_0_2", "level": "error", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "CERT_C-ERR34-a", "level": "warning", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "MISRA2004-20_10", "level": "warning", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "CERT_C-MSC24-a", "level": "warning", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "CERT_C-ERR07-a", "level": "error", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "AUTOSAR-A18_0_2-a", "level": "error", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "MISRA2012-RULE-21_7", "level": "error", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "JSF-023", "level": "error", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "JSF-151", "level": "warning", "message": { "text": "Literal constant '2' is used", "markdown": "**\\[Line 9\\] Literal constant '2' is used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 46, "endColumn": 47 } } } ] }, { "ruleId": "CODSTA-26", "level": "warning", "message": { "text": "Literal constant '2' is used", "markdown": "**\\[Line 9\\] Literal constant '2' is used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 46, "endColumn": 47 } } } ] }, { "ruleId": "AUTOSAR-A5_1_1-a", "level": "error", "message": { "text": "Literal constant '2' is used", "markdown": "**\\[Line 9\\] Literal constant '2' is used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 46, "endColumn": 47 } } } ] }, { "ruleId": "HICPP-5_1_1-a", "level": "warning", "message": { "text": "Literal constant '2' is used", "markdown": "**\\[Line 9\\] Literal constant '2' is used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 46, "endColumn": 47 } } } ] }, { "ruleId": "SECURITY-35", "level": "error", "message": { "text": "No value of command line should be trusted: argv", "markdown": "**\\[Line 9\\] No value of command line should be trusted: argv**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "SECURITY-35", "level": "error", "message": { "text": "No value of command line should be trusted: argv", "markdown": "**\\[Line 9\\] No value of command line should be trusted: argv**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "SECURITY-35", "level": "error", "message": { "text": "No value of command line should be trusted: argv", "markdown": "**\\[Line 9\\] No value of command line should be trusted: argv**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "SECURITY-35", "level": "error", "message": { "text": "No value of command line should be trusted: argv", "markdown": "**\\[Line 9\\] No value of command line should be trusted: argv**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 26, "endColumn": 27 } } } ] }, { "ruleId": "SECURITY-35", "level": "error", "message": { "text": "No value of command line should be trusted: argv", "markdown": "**\\[Line 9\\] No value of command line should be trusted: argv**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "SECURITY-35", "level": "error", "message": { "text": "No value of command line should be trusted: argv", "markdown": "**\\[Line 9\\] No value of command line should be trusted: argv**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 41, "endColumn": 42 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 9\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 9\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 9\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 9\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 9\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 9\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 10\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 10\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 10\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A5_3_2-a", "level": "error", "message": { "text": "\"point\" may possibly be null", "markdown": "**\\[Line 11\\] \"point\" may possibly be null**  \n  \n**Source of null value**  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming false\\)_  \n**Null pointer dereferencing point**&nbsp;  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "AUTOSAR-M0_3_1-f", "level": "error", "message": { "text": "\"point\" may possibly be null", "markdown": "**\\[Line 11\\] \"point\" may possibly be null**  \n  \n**Source of null value**  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming false\\)_  \n**Null pointer dereferencing point**&nbsp;  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "BD-PB-NP", "level": "error", "message": { "text": "\"point\" may possibly be null", "markdown": "**\\[Line 11\\] \"point\" may possibly be null**  \n  \n**Source of null value**  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming false\\)_  \n**Null pointer dereferencing point**&nbsp;  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "CERT_C-EXP34-a", "level": "error", "message": { "text": "\"point\" may possibly be null", "markdown": "**\\[Line 11\\] \"point\" may possibly be null**  \n  \n**Source of null value**  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming false\\)_  \n**Null pointer dereferencing point**&nbsp;  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "CERT_C-MSC19-b", "level": "warning", "message": { "text": "\"point\" may possibly be null", "markdown": "**\\[Line 11\\] \"point\" may possibly be null**  \n  \n**Source of null value**  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming false\\)_  \n**Null pointer dereferencing point**&nbsp;  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "CERT_CPP-STR51-a", "level": "error", "message": { "text": "\"point\" may possibly be null", "markdown": "**\\[Line 11\\] \"point\" may possibly be null**  \n  \n**Source of null value**  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming false\\)_  \n**Null pointer dereferencing point**&nbsp;  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "CWE-476-a", "level": "error", "message": { "text": "\"point\" may possibly be null", "markdown": "**\\[Line 11\\] \"point\" may possibly be null**  \n  \n**Source of null value**  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming false\\)_  \n**Null pointer dereferencing point**&nbsp;  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "HICPP-5_2_1-c", "level": "error", "message": { "text": "\"point\" may possibly be null", "markdown": "**\\[Line 11\\] \"point\" may possibly be null**  \n  \n**Source of null value**  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming false\\)_  \n**Null pointer dereferencing point**&nbsp;  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "MISRA2008-0_3_1_b", "level": "note", "message": { "text": "\"point\" may possibly be null", "markdown": "**\\[Line 11\\] \"point\" may possibly be null**  \n  \n**Source of null value**  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming false\\)_  \n**Null pointer dereferencing point**&nbsp;  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "MISRA2012-DIR-4_1_b", "level": "error", "message": { "text": "\"point\" may possibly be null", "markdown": "**\\[Line 11\\] \"point\" may possibly be null**  \n  \n**Source of null value**  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming false\\)_  \n**Null pointer dereferencing point**&nbsp;  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "MISRAC2012-DIR_4_1-b", "level": "error", "message": { "text": "\"point\" may possibly be null", "markdown": "**\\[Line 11\\] \"point\" may possibly be null**  \n  \n**Source of null value**  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming false\\)_  \n**Null pointer dereferencing point**&nbsp;  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 11\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 11\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 11\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 12\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 12\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 12\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-25_b", "level": "warning", "message": { "text": "'return' statement should be used with parenthesis", "markdown": "**\\[Line 13\\] 'return' statement should be used with parenthesis**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 13\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 13\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 13\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-43", "level": "warning", "message": { "text": "'Point.hpp' filename extension does not adhere to naming conventions", "markdown": "**\\[Line 1\\] 'Point\\.hpp' filename extension does not adhere to naming conventions**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-02", "level": "warning", "message": { "text": "Add comment containing the copyright information at the begin of file 'Point.hpp'", "markdown": "**\\[Line 1\\] Add comment containing the copyright information at the begin of file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-133_b", "level": "warning", "message": { "text": "Add comment containing the copyright information at the begin of file 'Point.hpp'", "markdown": "**\\[Line 1\\] Add comment containing the copyright information at the begin of file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-03", "level": "warning", "message": { "text": "Add comment containing the information on the file at the begin of file 'Point.hpp'", "markdown": "**\\[Line 1\\] Add comment containing the information on the file at the begin of file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-133_a", "level": "warning", "message": { "text": "Add comment containing the information on the file at the begin of file 'Point.hpp'", "markdown": "**\\[Line 1\\] Add comment containing the information on the file at the begin of file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-39", "level": "warning", "message": { "text": "File 'Point.hpp'  should have the \".icc\" file name extension", "markdown": "**\\[Line 1\\] File 'Point\\.hpp'  should have the \"\\.icc\" file name extension**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-053", "level": "warning", "message": { "text": "Header file 'Point.hpp' should have the file name extension \".h\"", "markdown": "**\\[Line 1\\] Header file 'Point\\.hpp' should have the file name extension \"\\.h\"**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-41", "level": "warning", "message": { "text": "Header file 'Point.hpp' should have the file name extension \".h\"", "markdown": "**\\[Line 1\\] Header file 'Point\\.hpp' should have the file name extension \"\\.h\"**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-37", "level": "warning", "message": { "text": "Header file 'Point.hpp' should have the file name extension \".hh\"", "markdown": "**\\[Line 1\\] Header file 'Point\\.hpp' should have the file name extension \"\\.hh\"**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PFO-07", "level": "warning", "message": { "text": "POINT_HPP macro name should appear as first #ifndef or #if preprocessor directive", "markdown": "**\\[Line 1\\] POINT\\_HPP macro name should appear as first \\#ifndef or \\#if preprocessor directive**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "METRICS-31", "level": "warning", "message": { "text": "The assertion density is lower than two assertions per function", "markdown": "**\\[Line 1\\] The assertion density is lower than two assertions per function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-03", "level": "warning", "message": { "text": "The filename 'Point.hpp' should be in lowercase", "markdown": "**\\[Line 1\\] The filename 'Point\\.hpp' should be in lowercase**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MRM-04", "level": "warning", "message": { "text": "Class 'Point' missing assignment operator or special comment", "markdown": "**\\[Line 4\\] Class 'Point' missing assignment operator or special comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-47", "level": "warning", "message": { "text": "Class 'Point' missing assignment operator or special comment", "markdown": "**\\[Line 4\\] Class 'Point' missing assignment operator or special comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-05", "level": "warning", "message": { "text": "Class 'Point' missing copy constructor or special comment", "markdown": "**\\[Line 4\\] Class 'Point' missing copy constructor or special comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-48", "level": "warning", "message": { "text": "Class 'Point' missing copy constructor or special comment", "markdown": "**\\[Line 4\\] Class 'Point' missing copy constructor or special comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A12_4_2-a", "level": "warning", "message": { "text": "Class 'Point' should be final", "markdown": "**\\[Line 4\\] Class 'Point' should be final**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-MCPP-23", "level": "warning", "message": { "text": "Class 'Point' should be final", "markdown": "**\\[Line 4\\] Class 'Point' should be final**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-098", "level": "warning", "message": { "text": "Do not declare the 'Point' type in the global namespace", "markdown": "**\\[Line 4\\] Do not declare the 'Point' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-M7_3_1-a", "level": "error", "message": { "text": "Do not declare the 'Point' type in the global namespace", "markdown": "**\\[Line 4\\] Do not declare the 'Point' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-36", "level": "warning", "message": { "text": "Do not declare the 'Point' type in the global namespace", "markdown": "**\\[Line 4\\] Do not declare the 'Point' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2008-7_3_1", "level": "error", "message": { "text": "Do not declare the 'Point' type in the global namespace", "markdown": "**\\[Line 4\\] Do not declare the 'Point' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare copy assignment operator in 'Point'", "markdown": "**\\[Line 4\\] Explicitly declare copy assignment operator in 'Point'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare copy constructor in 'Point'", "markdown": "**\\[Line 4\\] Explicitly declare copy constructor in 'Point'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare default constructor in 'Point'", "markdown": "**\\[Line 4\\] Explicitly declare default constructor in 'Point'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare destructor in 'Point'", "markdown": "**\\[Line 4\\] Explicitly declare destructor in 'Point'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare move assignment operator in 'Point'", "markdown": "**\\[Line 4\\] Explicitly declare move assignment operator in 'Point'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare move constructor in 'Point'", "markdown": "**\\[Line 4\\] Explicitly declare move constructor in 'Point'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "FORMAT-34", "level": "warning", "message": { "text": "Opening '{' and closing '}' should be in the same column", "markdown": "**\\[Line 4\\] Opening '\\{' and closing '\\}' should be in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-057_a", "level": "warning", "message": { "text": "Public section must be before protected and private sections", "markdown": "**\\[Line 4\\] Public section must be before protected and private sections**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-46", "level": "warning", "message": { "text": "Public section must be before protected and private sections", "markdown": "**\\[Line 4\\] Public section must be before protected and private sections**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "FORMAT-02", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 4\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-HN-19", "level": "warning", "message": { "text": "The 'Point' identifier should have the 'C' prefix", "markdown": "**\\[Line 4\\] The 'Point' identifier should have the 'C' prefix**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The declaration of the 'Point' type should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 4\\] The declaration of the 'Point' type should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The declaration of the 'Point' type should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 4\\] The declaration of the 'Point' type should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'Point' differs only by case from identifier 'POINT' declared in file 'windef.h'", "markdown": "**\\[Line 4\\] The identifier 'Point' differs only by case from identifier 'POINT' declared in file 'windef\\.h'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'Point' differs only by case from identifier 'POINT' declared in file 'windef.h'", "markdown": "**\\[Line 4\\] The identifier 'Point' differs only by case from identifier 'POINT' declared in file 'windef\\.h'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'Point' differs only by case from identifier 'point' declared in file 'NullPointer.cpp'", "markdown": "**\\[Line 4\\] The identifier 'Point' differs only by case from identifier 'point' declared in file 'NullPointer\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'Point' differs only by case from identifier 'point' declared in file 'NullPointer.cpp'", "markdown": "**\\[Line 4\\] The identifier 'Point' differs only by case from identifier 'point' declared in file 'NullPointer\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'Point' differs only by case from identifier 'point' declared in file 'Point.hpp'", "markdown": "**\\[Line 4\\] The identifier 'Point' differs only by case from identifier 'point' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'Point' differs only by case from identifier 'point' declared in file 'Point.hpp'", "markdown": "**\\[Line 4\\] The identifier 'Point' differs only by case from identifier 'point' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'Point' differs only by case from identifier 'point' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 4\\] The identifier 'Point' differs only by case from identifier 'point' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'Point' differs only by case from identifier 'point' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 4\\] The identifier 'Point' differs only by case from identifier 'point' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2012-RULE-5_7_a", "level": "error", "message": { "text": "The type name 'Point' is not a unique identifier in the testing scope", "markdown": "**\\[Line 4\\] The type name 'Point' is not a unique identifier in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRAC2012-RULE_5_7-a", "level": "error", "message": { "text": "The type name 'Point' is not a unique identifier in the testing scope", "markdown": "**\\[Line 4\\] The type name 'Point' is not a unique identifier in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "PORT-13", "level": "warning", "message": { "text": "'_x' shall be declared as unsigned int or signed int", "markdown": "**\\[Line 5\\] '\\_x' shall be declared as unsigned int or signed int**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "PORT-13", "level": "warning", "message": { "text": "'_y' shall be declared as unsigned int or signed int", "markdown": "**\\[Line 5\\] '\\_y' shall be declared as unsigned int or signed int**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "AUTOSAR-A7_1_7-c", "level": "error", "message": { "text": "Declare variable '_y' in a separate declaration statement", "markdown": "**\\[Line 5\\] Declare variable '\\_y' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "FORMAT-33", "level": "warning", "message": { "text": "Declare variable '_y' in a separate declaration statement", "markdown": "**\\[Line 5\\] Declare variable '\\_y' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "MISRA2008-8_0_1", "level": "error", "message": { "text": "Declare variable '_y' in a separate declaration statement", "markdown": "**\\[Line 5\\] Declare variable '\\_y' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "HICPP-7_1_1-b", "level": "warning", "message": { "text": "Declare variable '_y' in a separate declaration statement", "markdown": "**\\[Line 5\\] Declare variable '\\_y' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "AUTOSAR-M8_0_1-a", "level": "error", "message": { "text": "Declare variable '_y' in a separate declaration statement", "markdown": "**\\[Line 5\\] Declare variable '\\_y' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "CERT_C-DCL04-a", "level": "warning", "message": { "text": "Declare variable '_y' in a separate declaration statement", "markdown": "**\\[Line 5\\] Declare variable '\\_y' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "JSF-152", "level": "error", "message": { "text": "Declare variable '_y' in a separate line", "markdown": "**\\[Line 5\\] Declare variable '\\_y' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "AUTOSAR-A7_1_7-b", "level": "error", "message": { "text": "Declare variable '_y' in a separate line", "markdown": "**\\[Line 5\\] Declare variable '\\_y' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "HICPP-7_1_1-a", "level": "warning", "message": { "text": "Declare variable '_y' in a separate line", "markdown": "**\\[Line 5\\] Declare variable '\\_y' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "FORMAT-29", "level": "warning", "message": { "text": "Declare variable '_y' in a separate line", "markdown": "**\\[Line 5\\] Declare variable '\\_y' in a separate line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 5\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-07", "level": "warning", "message": { "text": "Member variable '_x' shall begin with a lowercase letter", "markdown": "**\\[Line 5\\] Member variable '\\_x' shall begin with a lowercase letter**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-07", "level": "warning", "message": { "text": "Member variable '_y' shall begin with a lowercase letter", "markdown": "**\\[Line 5\\] Member variable '\\_y' shall begin with a lowercase letter**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "NAMING-14", "level": "warning", "message": { "text": "Naming convention not followed: _x", "markdown": "**\\[Line 5\\] Naming convention not followed: \\_x**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-19", "level": "warning", "message": { "text": "Naming convention not followed: _x", "markdown": "**\\[Line 5\\] Naming convention not followed: \\_x**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-14", "level": "warning", "message": { "text": "Naming convention not followed: _y", "markdown": "**\\[Line 5\\] Naming convention not followed: \\_y**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "NAMING-19", "level": "warning", "message": { "text": "Naming convention not followed: _y", "markdown": "**\\[Line 5\\] Naming convention not followed: \\_y**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "NAMING-HN-22", "level": "warning", "message": { "text": "The '_x' identifier should have the 'i' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 5\\] The '\\_x' identifier should have the 'i' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-HN-43", "level": "warning", "message": { "text": "The '_x' identifier should have the 'i' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 5\\] The '\\_x' identifier should have the 'i' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-HN-29", "level": "warning", "message": { "text": "The '_x' identifier should have the 'm_' prefix", "markdown": "**\\[Line 5\\] The '\\_x' identifier should have the 'm\\_' prefix**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-HN-30", "level": "warning", "message": { "text": "The '_x' identifier should have the 'n' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 5\\] The '\\_x' identifier should have the 'n' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The '_x' member variable should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 5\\] The '\\_x' member variable should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The '_x' member variable should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 5\\] The '\\_x' member variable should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-HN-22", "level": "warning", "message": { "text": "The '_y' identifier should have the 'i' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 5\\] The '\\_y' identifier should have the 'i' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "NAMING-HN-43", "level": "warning", "message": { "text": "The '_y' identifier should have the 'i' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 5\\] The '\\_y' identifier should have the 'i' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "NAMING-HN-29", "level": "warning", "message": { "text": "The '_y' identifier should have the 'm_' prefix", "markdown": "**\\[Line 5\\] The '\\_y' identifier should have the 'm\\_' prefix**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "NAMING-HN-30", "level": "warning", "message": { "text": "The '_y' identifier should have the 'n' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 5\\] The '\\_y' identifier should have the 'n' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The '_y' member variable should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 5\\] The '\\_y' member variable should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The '_y' member variable should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 5\\] The '\\_y' member variable should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier '_x' differs only by presence\/absence of the underscore character from identifier 'x' declared in file 'Point.hpp'", "markdown": "**\\[Line 5\\] The identifier '\\_x' differs only by presence\/absence of the underscore character from identifier 'x' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier '_x' differs only by presence\/absence of the underscore character from identifier 'x' declared in file 'Point.hpp'", "markdown": "**\\[Line 5\\] The identifier '\\_x' differs only by presence\/absence of the underscore character from identifier 'x' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier '_y' differs only by presence\/absence of the underscore character from identifier 'y' declared in file 'Point.hpp'", "markdown": "**\\[Line 5\\] The identifier '\\_y' differs only by presence\/absence of the underscore character from identifier 'y' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier '_y' differs only by presence\/absence of the underscore character from identifier 'y' declared in file 'Point.hpp'", "markdown": "**\\[Line 5\\] The identifier '\\_y' differs only by presence\/absence of the underscore character from identifier 'y' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 5\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 5\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-33", "level": "warning", "message": { "text": "Using underscore at the beginning of the name '_x' is not allowed", "markdown": "**\\[Line 5\\] Using underscore at the beginning of the name '\\_x' is not allowed**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-047", "level": "warning", "message": { "text": "Using underscore at the beginning of the name '_x' is not allowed", "markdown": "**\\[Line 5\\] Using underscore at the beginning of the name '\\_x' is not allowed**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-33", "level": "warning", "message": { "text": "Using underscore at the beginning of the name '_y' is not allowed", "markdown": "**\\[Line 5\\] Using underscore at the beginning of the name '\\_y' is not allowed**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "JSF-047", "level": "warning", "message": { "text": "Using underscore at the beginning of the name '_y' is not allowed", "markdown": "**\\[Line 5\\] Using underscore at the beginning of the name '\\_y' is not allowed**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "PORT-13", "level": "warning", "message": { "text": "'x' shall be declared as unsigned int or signed int", "markdown": "**\\[Line 7\\] 'x' shall be declared as unsigned int or signed int**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 15, "endColumn": 16 } } } ] }, { "ruleId": "PORT-13", "level": "warning", "message": { "text": "'y' shall be declared as unsigned int or signed int", "markdown": "**\\[Line 7\\] 'y' shall be declared as unsigned int or signed int**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 22, "endColumn": 23 } } } ] }, { "ruleId": "OPT-17", "level": "warning", "message": { "text": "Class 'Point' defines an inline constructor", "markdown": "**\\[Line 7\\] Class 'Point' defines an inline constructor**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 7\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 7\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'Point' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 7\\] Function 'Point' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'Point' has Essential Complexity value: 1", "markdown": "**\\[Line 7\\] Function 'Point' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2008-2_10_1", "level": "error", "message": { "text": "Identifier name: 'x' differs only by presence\/absence of the underscore character from identifier name: '_x' declared in class", "markdown": "**\\[Line 7\\] Identifier name: 'x' differs only by presence\/absence of the underscore character from identifier name: '\\_x' declared in class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 15, "endColumn": 16 } } } ] }, { "ruleId": "HICPP-2_4_1-a", "level": "warning", "message": { "text": "Identifier name: 'x' differs only by presence\/absence of the underscore character from identifier name: '_x' declared in class", "markdown": "**\\[Line 7\\] Identifier name: 'x' differs only by presence\/absence of the underscore character from identifier name: '\\_x' declared in class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 15, "endColumn": 16 } } } ] }, { "ruleId": "AUTOSAR-M2_10_1-a", "level": "error", "message": { "text": "Identifier name: 'x' differs only by presence\/absence of the underscore character from identifier name: '_x' declared in class", "markdown": "**\\[Line 7\\] Identifier name: 'x' differs only by presence\/absence of the underscore character from identifier name: '\\_x' declared in class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 15, "endColumn": 16 } } } ] }, { "ruleId": "NAMING-47", "level": "warning", "message": { "text": "Identifier name: 'x' differs only by presence\/absence of the underscore character from identifier name: '_x' declared in class", "markdown": "**\\[Line 7\\] Identifier name: 'x' differs only by presence\/absence of the underscore character from identifier name: '\\_x' declared in class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 15, "endColumn": 16 } } } ] }, { "ruleId": "MISRA2008-2_10_1", "level": "error", "message": { "text": "Identifier name: 'y' differs only by presence\/absence of the underscore character from identifier name: '_y' declared in class", "markdown": "**\\[Line 7\\] Identifier name: 'y' differs only by presence\/absence of the underscore character from identifier name: '\\_y' declared in class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 22, "endColumn": 23 } } } ] }, { "ruleId": "HICPP-2_4_1-a", "level": "warning", "message": { "text": "Identifier name: 'y' differs only by presence\/absence of the underscore character from identifier name: '_y' declared in class", "markdown": "**\\[Line 7\\] Identifier name: 'y' differs only by presence\/absence of the underscore character from identifier name: '\\_y' declared in class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 22, "endColumn": 23 } } } ] }, { "ruleId": "AUTOSAR-M2_10_1-a", "level": "error", "message": { "text": "Identifier name: 'y' differs only by presence\/absence of the underscore character from identifier name: '_y' declared in class", "markdown": "**\\[Line 7\\] Identifier name: 'y' differs only by presence\/absence of the underscore character from identifier name: '\\_y' declared in class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 22, "endColumn": 23 } } } ] }, { "ruleId": "NAMING-47", "level": "warning", "message": { "text": "Identifier name: 'y' differs only by presence\/absence of the underscore character from identifier name: '_y' declared in class", "markdown": "**\\[Line 7\\] Identifier name: 'y' differs only by presence\/absence of the underscore character from identifier name: '\\_y' declared in class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 22, "endColumn": 23 } } } ] }, { "ruleId": "FORMAT-43", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 7\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_b", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 7\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 7\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 7\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 41, "endColumn": 42 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 7\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 41, "endColumn": 42 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 7\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 41, "endColumn": 42 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 7\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 7\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 7\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A15_4_4-a", "level": "error", "message": { "text": "The 'Point' function should be declared 'noexcept'", "markdown": "**\\[Line 7\\] The 'Point' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "CODSTA-MCPP-09", "level": "warning", "message": { "text": "The 'Point' function should be declared 'noexcept'", "markdown": "**\\[Line 7\\] The 'Point' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'Point' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 7\\] The 'Point' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'Point' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 7\\] The 'Point' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2012-RULE-5_7_a", "level": "error", "message": { "text": "The 'Point' identifier is the same as the name of a type defined in the testing scope", "markdown": "**\\[Line 7\\] The 'Point' identifier is the same as the name of a type defined in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRAC2012-RULE_5_7-a", "level": "error", "message": { "text": "The 'Point' identifier is the same as the name of a type defined in the testing scope", "markdown": "**\\[Line 7\\] The 'Point' identifier is the same as the name of a type defined in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'x' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 7\\] The 'x' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'x' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 7\\] The 'x' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'y' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 7\\] The 'y' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'y' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 7\\] The 'y' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'Point' function is not preceded by a comment", "markdown": "**\\[Line 7\\] The definition of the 'Point' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'Point' function is not preceded by a comment", "markdown": "**\\[Line 7\\] The definition of the 'Point' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'Point' differs only by case from identifier 'POINT' declared in file 'windef.h'", "markdown": "**\\[Line 7\\] The identifier 'Point' differs only by case from identifier 'POINT' declared in file 'windef\\.h'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'Point' differs only by case from identifier 'POINT' declared in file 'windef.h'", "markdown": "**\\[Line 7\\] The identifier 'Point' differs only by case from identifier 'POINT' declared in file 'windef\\.h'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'Point' differs only by case from identifier 'point' declared in file 'Point.hpp'", "markdown": "**\\[Line 7\\] The identifier 'Point' differs only by case from identifier 'point' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'Point' differs only by case from identifier 'point' declared in file 'Point.hpp'", "markdown": "**\\[Line 7\\] The identifier 'Point' differs only by case from identifier 'point' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'x' differs only by presence\/absence of the underscore character from identifier '_x' declared in file 'Point.hpp'", "markdown": "**\\[Line 7\\] The identifier 'x' differs only by presence\/absence of the underscore character from identifier '\\_x' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 15, "endColumn": 16 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'x' differs only by presence\/absence of the underscore character from identifier '_x' declared in file 'Point.hpp'", "markdown": "**\\[Line 7\\] The identifier 'x' differs only by presence\/absence of the underscore character from identifier '\\_x' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 15, "endColumn": 16 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'y' differs only by presence\/absence of the underscore character from identifier '_y' declared in file 'Point.hpp'", "markdown": "**\\[Line 7\\] The identifier 'y' differs only by presence\/absence of the underscore character from identifier '\\_y' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 22, "endColumn": 23 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'y' differs only by presence\/absence of the underscore character from identifier '_y' declared in file 'Point.hpp'", "markdown": "**\\[Line 7\\] The identifier 'y' differs only by presence\/absence of the underscore character from identifier '\\_y' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 22, "endColumn": 23 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 7\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 7\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 7\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 7\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'reflectAcrossX' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 8\\] Function 'reflectAcrossX' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'reflectAcrossX' has Essential Complexity value: 1", "markdown": "**\\[Line 8\\] Function 'reflectAcrossX' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "NAMING-17", "level": "warning", "message": { "text": "Naming convention not followed: reflectAcrossX", "markdown": "**\\[Line 8\\] Naming convention not followed: reflectAcrossX**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "FORMAT-28", "level": "warning", "message": { "text": "Return type is not placed in line before function 'reflectAcrossX'", "markdown": "**\\[Line 8\\] Return type is not placed in line before function 'reflectAcrossX'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "AUTOSAR-A15_4_4-a", "level": "error", "message": { "text": "The 'reflectAcrossX' function should be declared 'noexcept'", "markdown": "**\\[Line 8\\] The 'reflectAcrossX' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "CODSTA-MCPP-09", "level": "warning", "message": { "text": "The 'reflectAcrossX' function should be declared 'noexcept'", "markdown": "**\\[Line 8\\] The 'reflectAcrossX' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'reflectAcrossX' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 8\\] The 'reflectAcrossX' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'reflectAcrossX' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 8\\] The 'reflectAcrossX' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'reflectAcrossX' function is not preceded by a comment", "markdown": "**\\[Line 8\\] The definition of the 'reflectAcrossX' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'reflectAcrossX' function is not preceded by a comment", "markdown": "**\\[Line 8\\] The definition of the 'reflectAcrossX' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'reflectAcrossX' should be composed only of lowercase letters", "markdown": "**\\[Line 8\\] The name 'reflectAcrossX' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'reflectAcrossX' should be composed only of lowercase letters", "markdown": "**\\[Line 8\\] The name 'reflectAcrossX' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 9\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "APSC_DV-002520-f", "level": "error", "message": { "text": "Evaluation of \"-this->_y\" may result in possible overflow\/underflow", "markdown": "**\\[Line 10\\] Evaluation of \"\\-this\\->\\_y\" may result in possible overflow\/underflow**  \n  \n**Point where value is defined by tainting function**  \nNullPointer.cpp&nbsp;(5)&nbsp;:&nbsp;int main\\(int argc, char\\* argv\\[\\]\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: argv\\[\\]_  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming true\\)_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;atoi\\(\\.\\.\\.\\)  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;Point\\(\\.\\.\\.\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: atoi\\(\\.\\.\\.\\)_  \n        Point.hpp&nbsp;(7)&nbsp;:&nbsp;Point\\(int x, int y\\) : \\_x\\(x\\), \\_y\\(y\\) \\{\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: y_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;point = new Point\\(atoi\\(argv\\[1\\]\\), atoi\\(argv\\[2\\]\\)\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: new Point\\->\\_y_  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: point\\->\\_y_  \n        **Point of possible overflow\/underflow**&nbsp;  \n        Point.hpp&nbsp;(10)&nbsp;:&nbsp;\\_y = \\-\\_y;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: this\\->\\_y_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "APSC_DV-002530-f", "level": "error", "message": { "text": "Evaluation of \"-this->_y\" may result in possible overflow\/underflow", "markdown": "**\\[Line 10\\] Evaluation of \"\\-this\\->\\_y\" may result in possible overflow\/underflow**  \n  \n**Point where value is defined by tainting function**  \nNullPointer.cpp&nbsp;(5)&nbsp;:&nbsp;int main\\(int argc, char\\* argv\\[\\]\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: argv\\[\\]_  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming true\\)_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;atoi\\(\\.\\.\\.\\)  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;Point\\(\\.\\.\\.\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: atoi\\(\\.\\.\\.\\)_  \n        Point.hpp&nbsp;(7)&nbsp;:&nbsp;Point\\(int x, int y\\) : \\_x\\(x\\), \\_y\\(y\\) \\{\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: y_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;point = new Point\\(atoi\\(argv\\[1\\]\\), atoi\\(argv\\[2\\]\\)\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: new Point\\->\\_y_  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: point\\->\\_y_  \n        **Point of possible overflow\/underflow**&nbsp;  \n        Point.hpp&nbsp;(10)&nbsp;:&nbsp;\\_y = \\-\\_y;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: this\\->\\_y_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "APSC_DV-002550-f", "level": "error", "message": { "text": "Evaluation of \"-this->_y\" may result in possible overflow\/underflow", "markdown": "**\\[Line 10\\] Evaluation of \"\\-this\\->\\_y\" may result in possible overflow\/underflow**  \n  \n**Point where value is defined by tainting function**  \nNullPointer.cpp&nbsp;(5)&nbsp;:&nbsp;int main\\(int argc, char\\* argv\\[\\]\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: argv\\[\\]_  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming true\\)_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;atoi\\(\\.\\.\\.\\)  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;Point\\(\\.\\.\\.\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: atoi\\(\\.\\.\\.\\)_  \n        Point.hpp&nbsp;(7)&nbsp;:&nbsp;Point\\(int x, int y\\) : \\_x\\(x\\), \\_y\\(y\\) \\{\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: y_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;point = new Point\\(atoi\\(argv\\[1\\]\\), atoi\\(argv\\[2\\]\\)\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: new Point\\->\\_y_  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: point\\->\\_y_  \n        **Point of possible overflow\/underflow**&nbsp;  \n        Point.hpp&nbsp;(10)&nbsp;:&nbsp;\\_y = \\-\\_y;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: this\\->\\_y_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "APSC_DV-002560-f", "level": "error", "message": { "text": "Evaluation of \"-this->_y\" may result in possible overflow\/underflow", "markdown": "**\\[Line 10\\] Evaluation of \"\\-this\\->\\_y\" may result in possible overflow\/underflow**  \n  \n**Point where value is defined by tainting function**  \nNullPointer.cpp&nbsp;(5)&nbsp;:&nbsp;int main\\(int argc, char\\* argv\\[\\]\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: argv\\[\\]_  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming true\\)_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;atoi\\(\\.\\.\\.\\)  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;Point\\(\\.\\.\\.\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: atoi\\(\\.\\.\\.\\)_  \n        Point.hpp&nbsp;(7)&nbsp;:&nbsp;Point\\(int x, int y\\) : \\_x\\(x\\), \\_y\\(y\\) \\{\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: y_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;point = new Point\\(atoi\\(argv\\[1\\]\\), atoi\\(argv\\[2\\]\\)\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: new Point\\->\\_y_  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: point\\->\\_y_  \n        **Point of possible overflow\/underflow**&nbsp;  \n        Point.hpp&nbsp;(10)&nbsp;:&nbsp;\\_y = \\-\\_y;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: this\\->\\_y_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "APSC_DV-002590-g", "level": "error", "message": { "text": "Evaluation of \"-this->_y\" may result in possible overflow\/underflow", "markdown": "**\\[Line 10\\] Evaluation of \"\\-this\\->\\_y\" may result in possible overflow\/underflow**  \n  \n**Point where value is defined by tainting function**  \nNullPointer.cpp&nbsp;(5)&nbsp;:&nbsp;int main\\(int argc, char\\* argv\\[\\]\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: argv\\[\\]_  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming true\\)_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;atoi\\(\\.\\.\\.\\)  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;Point\\(\\.\\.\\.\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: atoi\\(\\.\\.\\.\\)_  \n        Point.hpp&nbsp;(7)&nbsp;:&nbsp;Point\\(int x, int y\\) : \\_x\\(x\\), \\_y\\(y\\) \\{\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: y_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;point = new Point\\(atoi\\(argv\\[1\\]\\), atoi\\(argv\\[2\\]\\)\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: new Point\\->\\_y_  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: point\\->\\_y_  \n        **Point of possible overflow\/underflow**&nbsp;  \n        Point.hpp&nbsp;(10)&nbsp;:&nbsp;\\_y = \\-\\_y;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: this\\->\\_y_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "CERT_C-INT04-a", "level": "error", "message": { "text": "Evaluation of \"-this->_y\" may result in possible overflow\/underflow", "markdown": "**\\[Line 10\\] Evaluation of \"\\-this\\->\\_y\" may result in possible overflow\/underflow**  \n  \n**Point where value is defined by tainting function**  \nNullPointer.cpp&nbsp;(5)&nbsp;:&nbsp;int main\\(int argc, char\\* argv\\[\\]\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: argv\\[\\]_  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming true\\)_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;atoi\\(\\.\\.\\.\\)  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;Point\\(\\.\\.\\.\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: atoi\\(\\.\\.\\.\\)_  \n        Point.hpp&nbsp;(7)&nbsp;:&nbsp;Point\\(int x, int y\\) : \\_x\\(x\\), \\_y\\(y\\) \\{\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: y_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;point = new Point\\(atoi\\(argv\\[1\\]\\), atoi\\(argv\\[2\\]\\)\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: new Point\\->\\_y_  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: point\\->\\_y_  \n        **Point of possible overflow\/underflow**&nbsp;  \n        Point.hpp&nbsp;(10)&nbsp;:&nbsp;\\_y = \\-\\_y;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: this\\->\\_y_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "CWE-20-b", "level": "error", "message": { "text": "Evaluation of \"-this->_y\" may result in possible overflow\/underflow", "markdown": "**\\[Line 10\\] Evaluation of \"\\-this\\->\\_y\" may result in possible overflow\/underflow**  \n  \n**Point where value is defined by tainting function**  \nNullPointer.cpp&nbsp;(5)&nbsp;:&nbsp;int main\\(int argc, char\\* argv\\[\\]\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: argv\\[\\]_  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming true\\)_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;atoi\\(\\.\\.\\.\\)  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;Point\\(\\.\\.\\.\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: atoi\\(\\.\\.\\.\\)_  \n        Point.hpp&nbsp;(7)&nbsp;:&nbsp;Point\\(int x, int y\\) : \\_x\\(x\\), \\_y\\(y\\) \\{\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: y_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;point = new Point\\(atoi\\(argv\\[1\\]\\), atoi\\(argv\\[2\\]\\)\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: new Point\\->\\_y_  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: point\\->\\_y_  \n        **Point of possible overflow\/underflow**&nbsp;  \n        Point.hpp&nbsp;(10)&nbsp;:&nbsp;\\_y = \\-\\_y;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: this\\->\\_y_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "MISRA2012-DIR-4_14_b", "level": "error", "message": { "text": "Evaluation of \"-this->_y\" may result in possible overflow\/underflow", "markdown": "**\\[Line 10\\] Evaluation of \"\\-this\\->\\_y\" may result in possible overflow\/underflow**  \n  \n**Point where value is defined by tainting function**  \nNullPointer.cpp&nbsp;(5)&nbsp;:&nbsp;int main\\(int argc, char\\* argv\\[\\]\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: argv\\[\\]_  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming true\\)_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;atoi\\(\\.\\.\\.\\)  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;Point\\(\\.\\.\\.\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: atoi\\(\\.\\.\\.\\)_  \n        Point.hpp&nbsp;(7)&nbsp;:&nbsp;Point\\(int x, int y\\) : \\_x\\(x\\), \\_y\\(y\\) \\{\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: y_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;point = new Point\\(atoi\\(argv\\[1\\]\\), atoi\\(argv\\[2\\]\\)\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: new Point\\->\\_y_  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: point\\->\\_y_  \n        **Point of possible overflow\/underflow**&nbsp;  \n        Point.hpp&nbsp;(10)&nbsp;:&nbsp;\\_y = \\-\\_y;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: this\\->\\_y_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "MISRAC2012-DIR_4_14-b", "level": "error", "message": { "text": "Evaluation of \"-this->_y\" may result in possible overflow\/underflow", "markdown": "**\\[Line 10\\] Evaluation of \"\\-this\\->\\_y\" may result in possible overflow\/underflow**  \n  \n**Point where value is defined by tainting function**  \nNullPointer.cpp&nbsp;(5)&nbsp;:&nbsp;int main\\(int argc, char\\* argv\\[\\]\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: argv\\[\\]_  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming true\\)_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;atoi\\(\\.\\.\\.\\)  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;Point\\(\\.\\.\\.\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: atoi\\(\\.\\.\\.\\)_  \n        Point.hpp&nbsp;(7)&nbsp;:&nbsp;Point\\(int x, int y\\) : \\_x\\(x\\), \\_y\\(y\\) \\{\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: y_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;point = new Point\\(atoi\\(argv\\[1\\]\\), atoi\\(argv\\[2\\]\\)\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: new Point\\->\\_y_  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: point\\->\\_y_  \n        **Point of possible overflow\/underflow**&nbsp;  \n        Point.hpp&nbsp;(10)&nbsp;:&nbsp;\\_y = \\-\\_y;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: this\\->\\_y_" }, "partialFingerprints": { "violType": "FlowViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [  ] } ] } ] }, { "ruleId": "AUTOSAR-A8_4_7-a", "level": "error", "message": { "text": "Consider passing the 'vector' parameter by value instead of by const reference", "markdown": "**\\[Line 13\\] Consider passing the 'vector' parameter by value instead of by const reference**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 33, "endColumn": 34 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'translate' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 13\\] Function 'translate' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'translate' has Essential Complexity value: 1", "markdown": "**\\[Line 13\\] Function 'translate' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "NAMING-17", "level": "warning", "message": { "text": "Naming convention not followed: translate", "markdown": "**\\[Line 13\\] Naming convention not followed: translate**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "CERT_C-API00-a", "level": "warning", "message": { "text": "Parameter 'vector' is not validated before use", "markdown": "**\\[Line 13\\] Parameter 'vector' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 33, "endColumn": 34 } } } ] }, { "ruleId": "CODSTA-86", "level": "warning", "message": { "text": "Parameter 'vector' is not validated before use", "markdown": "**\\[Line 13\\] Parameter 'vector' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 33, "endColumn": 34 } } } ] }, { "ruleId": "FORMAT-28", "level": "warning", "message": { "text": "Return type is not placed in line before function 'translate'", "markdown": "**\\[Line 13\\] Return type is not placed in line before function 'translate'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "FORMAT-47_a", "level": "warning", "message": { "text": "The 'const' qualifier should be placed on the right hand side of the type", "markdown": "**\\[Line 13\\] The 'const' qualifier should be placed on the right hand side of the type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "HICPP-7_1_4-a", "level": "warning", "message": { "text": "The 'const' qualifier should be placed on the right hand side of the type", "markdown": "**\\[Line 13\\] The 'const' qualifier should be placed on the right hand side of the type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "AUTOSAR-A15_4_4-a", "level": "error", "message": { "text": "The 'translate' function should be declared 'noexcept'", "markdown": "**\\[Line 13\\] The 'translate' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "CODSTA-MCPP-09", "level": "warning", "message": { "text": "The 'translate' function should be declared 'noexcept'", "markdown": "**\\[Line 13\\] The 'translate' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'translate' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 13\\] The 'translate' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'translate' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 13\\] The 'translate' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "NAMING-HN-11", "level": "warning", "message": { "text": "The 'vector' identifier should have the 'k' prefix", "markdown": "**\\[Line 13\\] The 'vector' identifier should have the 'k' prefix**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 33, "endColumn": 34 } } } ] }, { "ruleId": "NAMING-HN-35", "level": "warning", "message": { "text": "The 'vector' identifier should have the 'r' prefix", "markdown": "**\\[Line 13\\] The 'vector' identifier should have the 'r' prefix**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 33, "endColumn": 34 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'vector' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 13\\] The 'vector' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'vector' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 13\\] The 'vector' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "HICPP-8_2_3-a", "level": "warning", "message": { "text": "The 'vector' parameter should be passed by value instead of by const reference", "markdown": "**\\[Line 13\\] The 'vector' parameter should be passed by value instead of by const reference**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 33, "endColumn": 34 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'translate' function is not preceded by a comment", "markdown": "**\\[Line 13\\] The definition of the 'translate' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'translate' function is not preceded by a comment", "markdown": "**\\[Line 13\\] The definition of the 'translate' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 14\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 14, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 15\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 15\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 15\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 16\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 16\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 16\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "PORT-13", "level": "warning", "message": { "text": "'squareDistanceTo' shall be declared as unsigned int or signed int", "markdown": "**\\[Line 19\\] 'squareDistanceTo' shall be declared as unsigned int or signed int**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-A8_4_7-a", "level": "error", "message": { "text": "Consider passing the 'point' parameter by value instead of by const reference", "markdown": "**\\[Line 19\\] Consider passing the 'point' parameter by value instead of by const reference**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 19\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'squareDistanceTo' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 19\\] Function 'squareDistanceTo' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'squareDistanceTo' has Essential Complexity value: 1", "markdown": "**\\[Line 19\\] Function 'squareDistanceTo' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "MISRA2008-2_10_1", "level": "error", "message": { "text": "Identifier name: 'point' differs only by case from identifier name: 'Point' ( line: '4')", "markdown": "**\\[Line 19\\] Identifier name: 'point' differs only by case from identifier name: 'Point' \\( line: '4'\\)**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "HICPP-2_4_1-a", "level": "warning", "message": { "text": "Identifier name: 'point' differs only by case from identifier name: 'Point' ( line: '4')", "markdown": "**\\[Line 19\\] Identifier name: 'point' differs only by case from identifier name: 'Point' \\( line: '4'\\)**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "AUTOSAR-M2_10_1-a", "level": "error", "message": { "text": "Identifier name: 'point' differs only by case from identifier name: 'Point' ( line: '4')", "markdown": "**\\[Line 19\\] Identifier name: 'point' differs only by case from identifier name: 'Point' \\( line: '4'\\)**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "NAMING-47", "level": "warning", "message": { "text": "Identifier name: 'point' differs only by case from identifier name: 'Point' ( line: '4')", "markdown": "**\\[Line 19\\] Identifier name: 'point' differs only by case from identifier name: 'Point' \\( line: '4'\\)**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "MISRA2008-2_10_1", "level": "error", "message": { "text": "Identifier name: 'point' differs only by case from identifier name: 'Point' declared in class", "markdown": "**\\[Line 19\\] Identifier name: 'point' differs only by case from identifier name: 'Point' declared in class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "HICPP-2_4_1-a", "level": "warning", "message": { "text": "Identifier name: 'point' differs only by case from identifier name: 'Point' declared in class", "markdown": "**\\[Line 19\\] Identifier name: 'point' differs only by case from identifier name: 'Point' declared in class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "AUTOSAR-M2_10_1-a", "level": "error", "message": { "text": "Identifier name: 'point' differs only by case from identifier name: 'Point' declared in class", "markdown": "**\\[Line 19\\] Identifier name: 'point' differs only by case from identifier name: 'Point' declared in class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "NAMING-47", "level": "warning", "message": { "text": "Identifier name: 'point' differs only by case from identifier name: 'Point' declared in class", "markdown": "**\\[Line 19\\] Identifier name: 'point' differs only by case from identifier name: 'Point' declared in class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "MISRA2008-2_10_1", "level": "error", "message": { "text": "Identifier name: 'point' differs only by case from its type name: 'Point'", "markdown": "**\\[Line 19\\] Identifier name: 'point' differs only by case from its type name: 'Point'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "HICPP-2_4_1-a", "level": "warning", "message": { "text": "Identifier name: 'point' differs only by case from its type name: 'Point'", "markdown": "**\\[Line 19\\] Identifier name: 'point' differs only by case from its type name: 'Point'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "AUTOSAR-M2_10_1-a", "level": "error", "message": { "text": "Identifier name: 'point' differs only by case from its type name: 'Point'", "markdown": "**\\[Line 19\\] Identifier name: 'point' differs only by case from its type name: 'Point'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "NAMING-47", "level": "warning", "message": { "text": "Identifier name: 'point' differs only by case from its type name: 'Point'", "markdown": "**\\[Line 19\\] Identifier name: 'point' differs only by case from its type name: 'Point'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "CODSTA-CPP-54", "level": "warning", "message": { "text": "Member function 'squareDistanceTo' should be declared as const", "markdown": "**\\[Line 19\\] Member function 'squareDistanceTo' should be declared as const**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-069", "level": "warning", "message": { "text": "Member function 'squareDistanceTo' should be declared as const", "markdown": "**\\[Line 19\\] Member function 'squareDistanceTo' should be declared as const**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "HICPP-9_1_1-a", "level": "warning", "message": { "text": "Member function 'squareDistanceTo' should be declared as const", "markdown": "**\\[Line 19\\] Member function 'squareDistanceTo' should be declared as const**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-M9_3_3-a", "level": "error", "message": { "text": "Member function 'squareDistanceTo' should be declared as const", "markdown": "**\\[Line 19\\] Member function 'squareDistanceTo' should be declared as const**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-CPP-78", "level": "warning", "message": { "text": "Member function 'squareDistanceTo' should be declared as const", "markdown": "**\\[Line 19\\] Member function 'squareDistanceTo' should be declared as const**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "MISRA2008-9_3_3", "level": "error", "message": { "text": "Member function 'squareDistanceTo' should be declared as const", "markdown": "**\\[Line 19\\] Member function 'squareDistanceTo' should be declared as const**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-17", "level": "warning", "message": { "text": "Naming convention not followed: squareDistanceTo", "markdown": "**\\[Line 19\\] Naming convention not followed: squareDistanceTo**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CERT_C-API00-a", "level": "warning", "message": { "text": "Parameter 'point' is not validated before use", "markdown": "**\\[Line 19\\] Parameter 'point' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "CODSTA-86", "level": "warning", "message": { "text": "Parameter 'point' is not validated before use", "markdown": "**\\[Line 19\\] Parameter 'point' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "FORMAT-28", "level": "warning", "message": { "text": "Return type is not placed in line before function 'squareDistanceTo'", "markdown": "**\\[Line 19\\] Return type is not placed in line before function 'squareDistanceTo'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "FORMAT-47_a", "level": "warning", "message": { "text": "The 'const' qualifier should be placed on the right hand side of the type", "markdown": "**\\[Line 19\\] The 'const' qualifier should be placed on the right hand side of the type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 26, "endColumn": 27 } } } ] }, { "ruleId": "HICPP-7_1_4-a", "level": "warning", "message": { "text": "The 'const' qualifier should be placed on the right hand side of the type", "markdown": "**\\[Line 19\\] The 'const' qualifier should be placed on the right hand side of the type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 26, "endColumn": 27 } } } ] }, { "ruleId": "NAMING-HN-11", "level": "warning", "message": { "text": "The 'point' identifier should have the 'k' prefix", "markdown": "**\\[Line 19\\] The 'point' identifier should have the 'k' prefix**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "NAMING-HN-35", "level": "warning", "message": { "text": "The 'point' identifier should have the 'r' prefix", "markdown": "**\\[Line 19\\] The 'point' identifier should have the 'r' prefix**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'point' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 19\\] The 'point' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'point' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 19\\] The 'point' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "HICPP-8_2_3-a", "level": "warning", "message": { "text": "The 'point' parameter should be passed by value instead of by const reference", "markdown": "**\\[Line 19\\] The 'point' parameter should be passed by value instead of by const reference**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "AUTOSAR-A15_4_4-a", "level": "error", "message": { "text": "The 'squareDistanceTo' function should be declared 'noexcept'", "markdown": "**\\[Line 19\\] The 'squareDistanceTo' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-MCPP-09", "level": "warning", "message": { "text": "The 'squareDistanceTo' function should be declared 'noexcept'", "markdown": "**\\[Line 19\\] The 'squareDistanceTo' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'squareDistanceTo' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 19\\] The 'squareDistanceTo' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'squareDistanceTo' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 19\\] The 'squareDistanceTo' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'squareDistanceTo' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 19\\] The 'squareDistanceTo' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'squareDistanceTo' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 19\\] The 'squareDistanceTo' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'squareDistanceTo' function is not preceded by a comment", "markdown": "**\\[Line 19\\] The definition of the 'squareDistanceTo' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'squareDistanceTo' function is not preceded by a comment", "markdown": "**\\[Line 19\\] The definition of the 'squareDistanceTo' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'point' differs only by case from identifier 'POINT' declared in file 'windef.h'", "markdown": "**\\[Line 19\\] The identifier 'point' differs only by case from identifier 'POINT' declared in file 'windef\\.h'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'point' differs only by case from identifier 'POINT' declared in file 'windef.h'", "markdown": "**\\[Line 19\\] The identifier 'point' differs only by case from identifier 'POINT' declared in file 'windef\\.h'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'", "markdown": "**\\[Line 19\\] The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'", "markdown": "**\\[Line 19\\] The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'squareDistanceTo' should be composed only of lowercase letters", "markdown": "**\\[Line 19\\] The name 'squareDistanceTo' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'squareDistanceTo' should be composed only of lowercase letters", "markdown": "**\\[Line 19\\] The name 'squareDistanceTo' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-MCPP-08_b", "level": "error", "message": { "text": "The return type of the 'squareDistanceTo' function should be declared as 'auto'", "markdown": "**\\[Line 19\\] The return type of the 'squareDistanceTo' function should be declared as 'auto'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 19\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 19\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 20\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 20, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-25_b", "level": "warning", "message": { "text": "'return' statement should be used with parenthesis", "markdown": "**\\[Line 21\\] 'return' statement should be used with parenthesis**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 21, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "FORMAT-04", "level": "warning", "message": { "text": "Line has over 79 characters", "markdown": "**\\[Line 21\\] Line has over 79 characters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 21, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 21\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 21, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 21\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 21, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 21\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 21, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-2_3_1-a", "level": "warning", "message": { "text": "Use \/\/ comments only", "markdown": "**\\[Line 25\\] Use \/\/ comments only**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-126", "level": "error", "message": { "text": "Use \/\/ comments only", "markdown": "**\\[Line 25\\] Use \/\/ comments only**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "COMMENT-01", "level": "warning", "message": { "text": "Use \/\/ comments only", "markdown": "**\\[Line 25\\] Use \/\/ comments only**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-43", "level": "warning", "message": { "text": "'Shapes.hpp' filename extension does not adhere to naming conventions", "markdown": "**\\[Line 1\\] 'Shapes\\.hpp' filename extension does not adhere to naming conventions**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-02", "level": "warning", "message": { "text": "Add comment containing the copyright information at the begin of file 'Shapes.hpp'", "markdown": "**\\[Line 1\\] Add comment containing the copyright information at the begin of file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-133_b", "level": "warning", "message": { "text": "Add comment containing the copyright information at the begin of file 'Shapes.hpp'", "markdown": "**\\[Line 1\\] Add comment containing the copyright information at the begin of file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-03", "level": "warning", "message": { "text": "Add comment containing the information on the file at the begin of file 'Shapes.hpp'", "markdown": "**\\[Line 1\\] Add comment containing the information on the file at the begin of file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-133_a", "level": "warning", "message": { "text": "Add comment containing the information on the file at the begin of file 'Shapes.hpp'", "markdown": "**\\[Line 1\\] Add comment containing the information on the file at the begin of file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-39", "level": "warning", "message": { "text": "File 'Shapes.hpp'  should have the \".icc\" file name extension", "markdown": "**\\[Line 1\\] File 'Shapes\\.hpp'  should have the \"\\.icc\" file name extension**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PFO-03", "level": "warning", "message": { "text": "File 'Shapes.hpp' contains more than one class definition", "markdown": "**\\[Line 1\\] File 'Shapes\\.hpp' contains more than one class definition**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PFO-10", "level": "warning", "message": { "text": "Header file 'Shapes.hpp' contains more than one class declaration: 'Shape, LineSegment, Circle'", "markdown": "**\\[Line 1\\] Header file 'Shapes\\.hpp' contains more than one class declaration: 'Shape, LineSegment, Circle'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-053", "level": "warning", "message": { "text": "Header file 'Shapes.hpp' should have the file name extension \".h\"", "markdown": "**\\[Line 1\\] Header file 'Shapes\\.hpp' should have the file name extension \"\\.h\"**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-41", "level": "warning", "message": { "text": "Header file 'Shapes.hpp' should have the file name extension \".h\"", "markdown": "**\\[Line 1\\] Header file 'Shapes\\.hpp' should have the file name extension \"\\.h\"**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-37", "level": "warning", "message": { "text": "Header file 'Shapes.hpp' should have the file name extension \".hh\"", "markdown": "**\\[Line 1\\] Header file 'Shapes\\.hpp' should have the file name extension \"\\.hh\"**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PFO-07", "level": "warning", "message": { "text": "SHAPES_HPP macro name should appear as first #ifndef or #if preprocessor directive", "markdown": "**\\[Line 1\\] SHAPES\\_HPP macro name should appear as first \\#ifndef or \\#if preprocessor directive**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "METRICS-31", "level": "warning", "message": { "text": "The assertion density is lower than two assertions per function", "markdown": "**\\[Line 1\\] The assertion density is lower than two assertions per function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-03", "level": "warning", "message": { "text": "The filename 'Shapes.hpp' should be in lowercase", "markdown": "**\\[Line 1\\] The filename 'Shapes\\.hpp' should be in lowercase**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-09", "level": "error", "message": { "text": "Disallowed #include notation is being used: \"Point.hpp\"", "markdown": "**\\[Line 4\\] Disallowed \\#include notation is being used: \"Point\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-033", "level": "error", "message": { "text": "Disallowed #include notation is being used: \"Point.hpp\"", "markdown": "**\\[Line 4\\] Disallowed \\#include notation is being used: \"Point\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-032", "level": "warning", "message": { "text": "Not a proper header file (*.h ) is being included: \"Point.hpp\"", "markdown": "**\\[Line 4\\] Not a proper header file \\(\\*\\.h \\) is being included: \"Point\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-08", "level": "warning", "message": { "text": "Not a proper header file (*.h ) is being included: \"Point.hpp\"", "markdown": "**\\[Line 4\\] Not a proper header file \\(\\*\\.h \\) is being included: \"Point\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "OOP-23", "level": "error", "message": { "text": "Class 'Shape' has virtual functions without a virtual destructor", "markdown": "**\\[Line 6\\] Class 'Shape' has virtual functions without a virtual destructor**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-04", "level": "warning", "message": { "text": "Class 'Shape' missing assignment operator or special comment", "markdown": "**\\[Line 6\\] Class 'Shape' missing assignment operator or special comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-47", "level": "warning", "message": { "text": "Class 'Shape' missing assignment operator or special comment", "markdown": "**\\[Line 6\\] Class 'Shape' missing assignment operator or special comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-05", "level": "warning", "message": { "text": "Class 'Shape' missing copy constructor or special comment", "markdown": "**\\[Line 6\\] Class 'Shape' missing copy constructor or special comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-48", "level": "warning", "message": { "text": "Class 'Shape' missing copy constructor or special comment", "markdown": "**\\[Line 6\\] Class 'Shape' missing copy constructor or special comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "OOP-22", "level": "error", "message": { "text": "Class 'Shape' must define a virtual destructor", "markdown": "**\\[Line 6\\] Class 'Shape' must define a virtual destructor**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CWE-772-b", "level": "error", "message": { "text": "Class 'Shape' must define a virtual destructor", "markdown": "**\\[Line 6\\] Class 'Shape' must define a virtual destructor**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CERT_CPP-OOP52-a", "level": "error", "message": { "text": "Class 'Shape' must define a virtual destructor", "markdown": "**\\[Line 6\\] Class 'Shape' must define a virtual destructor**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-078", "level": "error", "message": { "text": "Class 'Shape' must define a virtual destructor", "markdown": "**\\[Line 6\\] Class 'Shape' must define a virtual destructor**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A12_4_2-a", "level": "warning", "message": { "text": "Class 'Shape' should be final", "markdown": "**\\[Line 6\\] Class 'Shape' should be final**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-MCPP-23", "level": "warning", "message": { "text": "Class 'Shape' should be final", "markdown": "**\\[Line 6\\] Class 'Shape' should be final**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-098", "level": "warning", "message": { "text": "Do not declare the 'Shape' type in the global namespace", "markdown": "**\\[Line 6\\] Do not declare the 'Shape' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-M7_3_1-a", "level": "error", "message": { "text": "Do not declare the 'Shape' type in the global namespace", "markdown": "**\\[Line 6\\] Do not declare the 'Shape' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-36", "level": "warning", "message": { "text": "Do not declare the 'Shape' type in the global namespace", "markdown": "**\\[Line 6\\] Do not declare the 'Shape' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2008-7_3_1", "level": "error", "message": { "text": "Do not declare the 'Shape' type in the global namespace", "markdown": "**\\[Line 6\\] Do not declare the 'Shape' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare copy assignment operator in 'Shape'", "markdown": "**\\[Line 6\\] Explicitly declare copy assignment operator in 'Shape'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare copy constructor in 'Shape'", "markdown": "**\\[Line 6\\] Explicitly declare copy constructor in 'Shape'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare default constructor in 'Shape'", "markdown": "**\\[Line 6\\] Explicitly declare default constructor in 'Shape'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare destructor in 'Shape'", "markdown": "**\\[Line 6\\] Explicitly declare destructor in 'Shape'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare move assignment operator in 'Shape'", "markdown": "**\\[Line 6\\] Explicitly declare move assignment operator in 'Shape'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare move constructor in 'Shape'", "markdown": "**\\[Line 6\\] Explicitly declare move constructor in 'Shape'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "OPT-27", "level": "warning", "message": { "text": "In a class 'Shape' number of accessor functions (2) exceeds number of member variables (1)", "markdown": "**\\[Line 6\\] In a class 'Shape' number of accessor functions \\(2\\) exceeds number of member variables \\(1\\)**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "FORMAT-34", "level": "warning", "message": { "text": "Opening '{' and closing '}' should be in the same column", "markdown": "**\\[Line 6\\] Opening '\\{' and closing '\\}' should be in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-057_b", "level": "warning", "message": { "text": "Protected section must be before private section", "markdown": "**\\[Line 6\\] Protected section must be before private section**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-47", "level": "warning", "message": { "text": "Protected section must be before private section", "markdown": "**\\[Line 6\\] Protected section must be before private section**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-057_a", "level": "warning", "message": { "text": "Public section must be before protected and private sections", "markdown": "**\\[Line 6\\] Public section must be before protected and private sections**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-46", "level": "warning", "message": { "text": "Public section must be before protected and private sections", "markdown": "**\\[Line 6\\] Public section must be before protected and private sections**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-12", "level": "warning", "message": { "text": "Put base class 'Shape' into separate file", "markdown": "**\\[Line 6\\] Put base class 'Shape' into separate file**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "FORMAT-02", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 6\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-HN-19", "level": "warning", "message": { "text": "The 'Shape' identifier should have the 'C' prefix", "markdown": "**\\[Line 6\\] The 'Shape' identifier should have the 'C' prefix**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The declaration of the 'Shape' type should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 6\\] The declaration of the 'Shape' type should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The declaration of the 'Shape' type should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 6\\] The declaration of the 'Shape' type should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2012-RULE-5_7_a", "level": "error", "message": { "text": "The type name 'Shape' is not a unique identifier in the testing scope", "markdown": "**\\[Line 6\\] The type name 'Shape' is not a unique identifier in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRAC2012-RULE_5_7-a", "level": "error", "message": { "text": "The type name 'Shape' is not a unique identifier in the testing scope", "markdown": "**\\[Line 6\\] The type name 'Shape' is not a unique identifier in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-07", "level": "warning", "message": { "text": "Member variable '_position' shall begin with a lowercase letter", "markdown": "**\\[Line 7\\] Member variable '\\_position' shall begin with a lowercase letter**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-14", "level": "warning", "message": { "text": "Naming convention not followed: _position", "markdown": "**\\[Line 7\\] Naming convention not followed: \\_position**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 7\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 7\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 7\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-HN-29", "level": "warning", "message": { "text": "The '_position' identifier should have the 'm_' prefix", "markdown": "**\\[Line 7\\] The '\\_position' identifier should have the 'm\\_' prefix**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The '_position' member variable should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 7\\] The '\\_position' member variable should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The '_position' member variable should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 7\\] The '\\_position' member variable should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier '_position' differs only by presence\/absence of the underscore character from identifier 'position' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 7\\] The identifier '\\_position' differs only by presence\/absence of the underscore character from identifier 'position' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier '_position' differs only by presence\/absence of the underscore character from identifier 'position' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 7\\] The identifier '\\_position' differs only by presence\/absence of the underscore character from identifier 'position' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-33", "level": "warning", "message": { "text": "Using underscore at the beginning of the name '_position' is not allowed", "markdown": "**\\[Line 7\\] Using underscore at the beginning of the name '\\_position' is not allowed**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-047", "level": "warning", "message": { "text": "Using underscore at the beginning of the name '_position' is not allowed", "markdown": "**\\[Line 7\\] Using underscore at the beginning of the name '\\_position' is not allowed**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CODSTA-CPP-25", "level": "warning", "message": { "text": "Make virtual functions nonpublic, and public functions nonvirtual: getArea", "markdown": "**\\[Line 9\\] Make virtual functions nonpublic, and public functions nonvirtual: getArea**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "NAMING-17", "level": "warning", "message": { "text": "Naming convention not followed: getArea", "markdown": "**\\[Line 9\\] Naming convention not followed: getArea**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'getArea' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 9\\] The 'getArea' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'getArea' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 9\\] The 'getArea' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'getArea' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 9\\] The 'getArea' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'getArea' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 9\\] The 'getArea' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "JSF-134_b", "level": "warning", "message": { "text": "The declaration of the 'getArea' function is not preceded by a comment", "markdown": "**\\[Line 9\\] The declaration of the 'getArea' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "COMMENT-04_b", "level": "warning", "message": { "text": "The declaration of the 'getArea' function is not preceded by a comment", "markdown": "**\\[Line 9\\] The declaration of the 'getArea' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'getArea' should be composed only of lowercase letters", "markdown": "**\\[Line 9\\] The name 'getArea' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'getArea' should be composed only of lowercase letters", "markdown": "**\\[Line 9\\] The name 'getArea' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "FORMAT-25_b", "level": "warning", "message": { "text": "'return' statement should be used with parenthesis", "markdown": "**\\[Line 10\\] 'return' statement should be used with parenthesis**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'getPosition' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 10\\] Function 'getPosition' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'getPosition' has Essential Complexity value: 1", "markdown": "**\\[Line 10\\] Function 'getPosition' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-CPP-06", "level": "warning", "message": { "text": "Member function 'getPosition' returns handles to member data: '_position'", "markdown": "**\\[Line 10\\] Member function 'getPosition' returns handles to member data: '\\_position'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "NAMING-17", "level": "warning", "message": { "text": "Naming convention not followed: getPosition", "markdown": "**\\[Line 10\\] Naming convention not followed: getPosition**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "FORMAT-43", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 10\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_b", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 10\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-34", "level": "warning", "message": { "text": "Opening '{' and closing '}' should be in the same column", "markdown": "**\\[Line 10\\] Opening '\\{' and closing '\\}' should be in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 10\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-9_3_2_b", "level": "error", "message": { "text": "Public member function 'getPosition' returns non-const handles to member data: '_position'", "markdown": "**\\[Line 10\\] Public member function 'getPosition' returns non\\-const handles to member data: '\\_position'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "HICPP-9_1_4-a", "level": "warning", "message": { "text": "Public member function 'getPosition' returns non-const handles to member data: '_position'", "markdown": "**\\[Line 10\\] Public member function 'getPosition' returns non\\-const handles to member data: '\\_position'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "AUTOSAR-A9_3_1-a", "level": "error", "message": { "text": "Public member function 'getPosition' returns non-const handles to member data: '_position'", "markdown": "**\\[Line 10\\] Public member function 'getPosition' returns non\\-const handles to member data: '\\_position'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "OOP-36", "level": "warning", "message": { "text": "Public member function 'getPosition' returns non-const handles to member data: '_position'", "markdown": "**\\[Line 10\\] Public member function 'getPosition' returns non\\-const handles to member data: '\\_position'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "FORMAT-03", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 10\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 46, "endColumn": 47 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 10\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 46, "endColumn": 47 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 10\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 46, "endColumn": 47 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 10\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 46, "endColumn": 47 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 10\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 10\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 10\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-02", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 10\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-28", "level": "warning", "message": { "text": "Return type is not placed in line before function 'getPosition'", "markdown": "**\\[Line 10\\] Return type is not placed in line before function 'getPosition'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "AUTOSAR-A15_4_4-a", "level": "error", "message": { "text": "The 'getPosition' function should be declared 'noexcept'", "markdown": "**\\[Line 10\\] The 'getPosition' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-MCPP-09", "level": "warning", "message": { "text": "The 'getPosition' function should be declared 'noexcept'", "markdown": "**\\[Line 10\\] The 'getPosition' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'getPosition' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 10\\] The 'getPosition' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'getPosition' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 10\\] The 'getPosition' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'getPosition' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 10\\] The 'getPosition' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'getPosition' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 10\\] The 'getPosition' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'getPosition' function is not preceded by a comment", "markdown": "**\\[Line 10\\] The definition of the 'getPosition' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'getPosition' function is not preceded by a comment", "markdown": "**\\[Line 10\\] The definition of the 'getPosition' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'getPosition' should be composed only of lowercase letters", "markdown": "**\\[Line 10\\] The name 'getPosition' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'getPosition' should be composed only of lowercase letters", "markdown": "**\\[Line 10\\] The name 'getPosition' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-MCPP-08_b", "level": "error", "message": { "text": "The return type of the 'getPosition' function should be declared as 'auto&'", "markdown": "**\\[Line 10\\] The return type of the 'getPosition' function should be declared as 'auto&'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "OPT-17", "level": "warning", "message": { "text": "Class 'Shape' defines an inline constructor", "markdown": "**\\[Line 12\\] Class 'Shape' defines an inline constructor**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-177_b", "level": "warning", "message": { "text": "Constructor 'Shape' allowing conversion should be made explicit", "markdown": "**\\[Line 12\\] Constructor 'Shape' allowing conversion should be made explicit**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "CODSTA-CPP-04", "level": "error", "message": { "text": "Constructor 'Shape' allowing conversion should be made explicit", "markdown": "**\\[Line 12\\] Constructor 'Shape' allowing conversion should be made explicit**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-12_1_1-a", "level": "error", "message": { "text": "Constructor 'Shape' allowing conversion should be made explicit", "markdown": "**\\[Line 12\\] Constructor 'Shape' allowing conversion should be made explicit**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'Shape' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 12\\] Function 'Shape' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'Shape' has Essential Complexity value: 1", "markdown": "**\\[Line 12\\] Function 'Shape' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2008-2_10_1", "level": "error", "message": { "text": "Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '_position' declared in class", "markdown": "**\\[Line 12\\] Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '\\_position' declared in class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "HICPP-2_4_1-a", "level": "warning", "message": { "text": "Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '_position' declared in class", "markdown": "**\\[Line 12\\] Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '\\_position' declared in class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "AUTOSAR-M2_10_1-a", "level": "error", "message": { "text": "Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '_position' declared in class", "markdown": "**\\[Line 12\\] Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '\\_position' declared in class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "NAMING-47", "level": "warning", "message": { "text": "Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '_position' declared in class", "markdown": "**\\[Line 12\\] Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '\\_position' declared in class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "FORMAT-43", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 12\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_b", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 12\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 12\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 12\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 12\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 12\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 12\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 12\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 12\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'Shape' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 12\\] The 'Shape' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'Shape' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 12\\] The 'Shape' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2012-RULE-5_7_a", "level": "error", "message": { "text": "The 'Shape' identifier is the same as the name of a type defined in the testing scope", "markdown": "**\\[Line 12\\] The 'Shape' identifier is the same as the name of a type defined in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRAC2012-RULE_5_7-a", "level": "error", "message": { "text": "The 'Shape' identifier is the same as the name of a type defined in the testing scope", "markdown": "**\\[Line 12\\] The 'Shape' identifier is the same as the name of a type defined in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 12\\] The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 12\\] The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'Shape' function is not preceded by a comment", "markdown": "**\\[Line 12\\] The definition of the 'Shape' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'Shape' function is not preceded by a comment", "markdown": "**\\[Line 12\\] The definition of the 'Shape' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'position' differs only by presence\/absence of the underscore character from identifier '_position' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 12\\] The identifier 'position' differs only by presence\/absence of the underscore character from identifier '\\_position' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'position' differs only by presence\/absence of the underscore character from identifier '_position' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 12\\] The identifier 'position' differs only by presence\/absence of the underscore character from identifier '\\_position' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "OPT-14", "level": "warning", "message": { "text": "The parameter 'position' of function 'Shape' is passed by value", "markdown": "**\\[Line 12\\] The parameter 'position' of function 'Shape' is passed by value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "JSF-125_a", "level": "warning", "message": { "text": "The parameter 'position' of function 'Shape' is passed by value", "markdown": "**\\[Line 12\\] The parameter 'position' of function 'Shape' is passed by value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "JSF-117", "level": "warning", "message": { "text": "The parameter 'position' of function 'Shape' is passed by value", "markdown": "**\\[Line 12\\] The parameter 'position' of function 'Shape' is passed by value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "AUTOSAR-A0_1_6-a", "level": "warning", "message": { "text": "A declaration of the 'LineSegment' type which is not used has been found", "markdown": "**\\[Line 15\\] A declaration of the 'LineSegment' type which is not used has been found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "GLOBAL-UNUSEDTYPE", "level": "warning", "message": { "text": "A declaration of the 'LineSegment' type which is not used has been found", "markdown": "**\\[Line 15\\] A declaration of the 'LineSegment' type which is not used has been found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2008-0_1_5", "level": "error", "message": { "text": "A declaration of the 'LineSegment' type which is not used has been found", "markdown": "**\\[Line 15\\] A declaration of the 'LineSegment' type which is not used has been found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-40", "level": "warning", "message": { "text": "All letters beside the first one in name 'LineSegment' should be lowercase", "markdown": "**\\[Line 15\\] All letters beside the first one in name 'LineSegment' should be lowercase**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "OOP-23", "level": "error", "message": { "text": "Class 'LineSegment' has virtual functions without a virtual destructor", "markdown": "**\\[Line 15\\] Class 'LineSegment' has virtual functions without a virtual destructor**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-04", "level": "warning", "message": { "text": "Class 'LineSegment' missing assignment operator or special comment", "markdown": "**\\[Line 15\\] Class 'LineSegment' missing assignment operator or special comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-47", "level": "warning", "message": { "text": "Class 'LineSegment' missing assignment operator or special comment", "markdown": "**\\[Line 15\\] Class 'LineSegment' missing assignment operator or special comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-05", "level": "warning", "message": { "text": "Class 'LineSegment' missing copy constructor or special comment", "markdown": "**\\[Line 15\\] Class 'LineSegment' missing copy constructor or special comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-48", "level": "warning", "message": { "text": "Class 'LineSegment' missing copy constructor or special comment", "markdown": "**\\[Line 15\\] Class 'LineSegment' missing copy constructor or special comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A12_4_2-a", "level": "warning", "message": { "text": "Class 'LineSegment' should be final", "markdown": "**\\[Line 15\\] Class 'LineSegment' should be final**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-MCPP-23", "level": "warning", "message": { "text": "Class 'LineSegment' should be final", "markdown": "**\\[Line 15\\] Class 'LineSegment' should be final**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-098", "level": "warning", "message": { "text": "Do not declare the 'LineSegment' type in the global namespace", "markdown": "**\\[Line 15\\] Do not declare the 'LineSegment' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-M7_3_1-a", "level": "error", "message": { "text": "Do not declare the 'LineSegment' type in the global namespace", "markdown": "**\\[Line 15\\] Do not declare the 'LineSegment' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-36", "level": "warning", "message": { "text": "Do not declare the 'LineSegment' type in the global namespace", "markdown": "**\\[Line 15\\] Do not declare the 'LineSegment' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2008-7_3_1", "level": "error", "message": { "text": "Do not declare the 'LineSegment' type in the global namespace", "markdown": "**\\[Line 15\\] Do not declare the 'LineSegment' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare copy assignment operator in 'LineSegment'", "markdown": "**\\[Line 15\\] Explicitly declare copy assignment operator in 'LineSegment'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare copy constructor in 'LineSegment'", "markdown": "**\\[Line 15\\] Explicitly declare copy constructor in 'LineSegment'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare default constructor in 'LineSegment'", "markdown": "**\\[Line 15\\] Explicitly declare default constructor in 'LineSegment'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare destructor in 'LineSegment'", "markdown": "**\\[Line 15\\] Explicitly declare destructor in 'LineSegment'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare move assignment operator in 'LineSegment'", "markdown": "**\\[Line 15\\] Explicitly declare move assignment operator in 'LineSegment'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare move constructor in 'LineSegment'", "markdown": "**\\[Line 15\\] Explicitly declare move constructor in 'LineSegment'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "FORMAT-34", "level": "warning", "message": { "text": "Opening '{' and closing '}' should be in the same column", "markdown": "**\\[Line 15\\] Opening '\\{' and closing '\\}' should be in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-057_a", "level": "warning", "message": { "text": "Public section must be before protected and private sections", "markdown": "**\\[Line 15\\] Public section must be before protected and private sections**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-46", "level": "warning", "message": { "text": "Public section must be before protected and private sections", "markdown": "**\\[Line 15\\] Public section must be before protected and private sections**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "FORMAT-02", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 15\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-HN-19", "level": "warning", "message": { "text": "The 'LineSegment' identifier should have the 'C' prefix", "markdown": "**\\[Line 15\\] The 'LineSegment' identifier should have the 'C' prefix**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The declaration of the 'LineSegment' type should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 15\\] The declaration of the 'LineSegment' type should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The declaration of the 'LineSegment' type should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 15\\] The declaration of the 'LineSegment' type should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2012-RULE-5_7_a", "level": "error", "message": { "text": "The type name 'LineSegment' is not a unique identifier in the testing scope", "markdown": "**\\[Line 15\\] The type name 'LineSegment' is not a unique identifier in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRAC2012-RULE_5_7-a", "level": "error", "message": { "text": "The type name 'LineSegment' is not a unique identifier in the testing scope", "markdown": "**\\[Line 15\\] The type name 'LineSegment' is not a unique identifier in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-07", "level": "warning", "message": { "text": "Member variable '_end' shall begin with a lowercase letter", "markdown": "**\\[Line 16\\] Member variable '\\_end' shall begin with a lowercase letter**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-14", "level": "warning", "message": { "text": "Naming convention not followed: _end", "markdown": "**\\[Line 16\\] Naming convention not followed: \\_end**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 16\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 16\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 16\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "OPT-05", "level": "warning", "message": { "text": "Private member variable '_end' is declared but not used", "markdown": "**\\[Line 16\\] Private member variable '\\_end' is declared but not used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-M0_1_3-c", "level": "error", "message": { "text": "Private member variable '_end' is declared but not used", "markdown": "**\\[Line 16\\] Private member variable '\\_end' is declared but not used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2008-0_1_3_c", "level": "error", "message": { "text": "Private member variable '_end' is declared but not used", "markdown": "**\\[Line 16\\] Private member variable '\\_end' is declared but not used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-HN-29", "level": "warning", "message": { "text": "The '_end' identifier should have the 'm_' prefix", "markdown": "**\\[Line 16\\] The '\\_end' identifier should have the 'm\\_' prefix**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The '_end' member variable should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 16\\] The '\\_end' member variable should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The '_end' member variable should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 16\\] The '\\_end' member variable should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier '_end' differs only by presence\/absence of the underscore character from identifier 'end' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 16\\] The identifier '\\_end' differs only by presence\/absence of the underscore character from identifier 'end' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier '_end' differs only by presence\/absence of the underscore character from identifier 'end' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 16\\] The identifier '\\_end' differs only by presence\/absence of the underscore character from identifier 'end' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-33", "level": "warning", "message": { "text": "Using underscore at the beginning of the name '_end' is not allowed", "markdown": "**\\[Line 16\\] Using underscore at the beginning of the name '\\_end' is not allowed**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-047", "level": "warning", "message": { "text": "Using underscore at the beginning of the name '_end' is not allowed", "markdown": "**\\[Line 16\\] Using underscore at the beginning of the name '\\_end' is not allowed**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "OPT-17", "level": "warning", "message": { "text": "Class 'LineSegment' defines an inline constructor", "markdown": "**\\[Line 18\\] Class 'LineSegment' defines an inline constructor**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'LineSegment' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 18\\] Function 'LineSegment' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'LineSegment' has Essential Complexity value: 1", "markdown": "**\\[Line 18\\] Function 'LineSegment' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2008-2_10_1", "level": "error", "message": { "text": "Identifier name: 'end' differs only by presence\/absence of the underscore character from identifier name: '_end' declared in class", "markdown": "**\\[Line 18\\] Identifier name: 'end' differs only by presence\/absence of the underscore character from identifier name: '\\_end' declared in class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "HICPP-2_4_1-a", "level": "warning", "message": { "text": "Identifier name: 'end' differs only by presence\/absence of the underscore character from identifier name: '_end' declared in class", "markdown": "**\\[Line 18\\] Identifier name: 'end' differs only by presence\/absence of the underscore character from identifier name: '\\_end' declared in class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "AUTOSAR-M2_10_1-a", "level": "error", "message": { "text": "Identifier name: 'end' differs only by presence\/absence of the underscore character from identifier name: '_end' declared in class", "markdown": "**\\[Line 18\\] Identifier name: 'end' differs only by presence\/absence of the underscore character from identifier name: '\\_end' declared in class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "NAMING-47", "level": "warning", "message": { "text": "Identifier name: 'end' differs only by presence\/absence of the underscore character from identifier name: '_end' declared in class", "markdown": "**\\[Line 18\\] Identifier name: 'end' differs only by presence\/absence of the underscore character from identifier name: '\\_end' declared in class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "MISRA2008-2_10_1", "level": "error", "message": { "text": "Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '_position' declared in base class", "markdown": "**\\[Line 18\\] Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '\\_position' declared in base class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 23, "endColumn": 24 } } } ] }, { "ruleId": "HICPP-2_4_1-a", "level": "warning", "message": { "text": "Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '_position' declared in base class", "markdown": "**\\[Line 18\\] Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '\\_position' declared in base class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 23, "endColumn": 24 } } } ] }, { "ruleId": "AUTOSAR-M2_10_1-a", "level": "error", "message": { "text": "Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '_position' declared in base class", "markdown": "**\\[Line 18\\] Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '\\_position' declared in base class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 23, "endColumn": 24 } } } ] }, { "ruleId": "NAMING-47", "level": "warning", "message": { "text": "Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '_position' declared in base class", "markdown": "**\\[Line 18\\] Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '\\_position' declared in base class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 23, "endColumn": 24 } } } ] }, { "ruleId": "FORMAT-43", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 18\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_b", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 18\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 18\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 18\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 74, "endColumn": 75 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 18\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 74, "endColumn": 75 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 18\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 74, "endColumn": 75 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 18\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 18\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 18\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "GLOBAL-UNUSEDFUNC", "level": "warning", "message": { "text": "The 'LineSegment' function is not used in the testing scope", "markdown": "**\\[Line 18\\] The 'LineSegment' function is not used in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-M0_1_10-a", "level": "warning", "message": { "text": "The 'LineSegment' function is not used in the testing scope", "markdown": "**\\[Line 18\\] The 'LineSegment' function is not used in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2008-0_1_10_b", "level": "error", "message": { "text": "The 'LineSegment' function is not used in the testing scope", "markdown": "**\\[Line 18\\] The 'LineSegment' function is not used in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'LineSegment' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 18\\] The 'LineSegment' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'LineSegment' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 18\\] The 'LineSegment' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2012-RULE-5_7_a", "level": "error", "message": { "text": "The 'LineSegment' identifier is the same as the name of a type defined in the testing scope", "markdown": "**\\[Line 18\\] The 'LineSegment' identifier is the same as the name of a type defined in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRAC2012-RULE_5_7-a", "level": "error", "message": { "text": "The 'LineSegment' identifier is the same as the name of a type defined in the testing scope", "markdown": "**\\[Line 18\\] The 'LineSegment' identifier is the same as the name of a type defined in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'end' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 18\\] The 'end' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'end' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 18\\] The 'end' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 18\\] The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 18\\] The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'LineSegment' function is not preceded by a comment", "markdown": "**\\[Line 18\\] The definition of the 'LineSegment' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'LineSegment' function is not preceded by a comment", "markdown": "**\\[Line 18\\] The definition of the 'LineSegment' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'end' differs only by presence\/absence of the underscore character from identifier '_end' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 18\\] The identifier 'end' differs only by presence\/absence of the underscore character from identifier '\\_end' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'end' differs only by presence\/absence of the underscore character from identifier '_end' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 18\\] The identifier 'end' differs only by presence\/absence of the underscore character from identifier '\\_end' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'position' differs only by presence\/absence of the underscore character from identifier '_position' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 18\\] The identifier 'position' differs only by presence\/absence of the underscore character from identifier '\\_position' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 23, "endColumn": 24 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'position' differs only by presence\/absence of the underscore character from identifier '_position' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 18\\] The identifier 'position' differs only by presence\/absence of the underscore character from identifier '\\_position' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 23, "endColumn": 24 } } } ] }, { "ruleId": "OPT-14", "level": "warning", "message": { "text": "The parameter 'end' of function 'LineSegment' is passed by value", "markdown": "**\\[Line 18\\] The parameter 'end' of function 'LineSegment' is passed by value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "JSF-125_a", "level": "warning", "message": { "text": "The parameter 'end' of function 'LineSegment' is passed by value", "markdown": "**\\[Line 18\\] The parameter 'end' of function 'LineSegment' is passed by value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "JSF-117", "level": "warning", "message": { "text": "The parameter 'end' of function 'LineSegment' is passed by value", "markdown": "**\\[Line 18\\] The parameter 'end' of function 'LineSegment' is passed by value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "OPT-14", "level": "warning", "message": { "text": "The parameter 'position' of function 'LineSegment' is passed by value", "markdown": "**\\[Line 18\\] The parameter 'position' of function 'LineSegment' is passed by value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 23, "endColumn": 24 } } } ] }, { "ruleId": "JSF-125_a", "level": "warning", "message": { "text": "The parameter 'position' of function 'LineSegment' is passed by value", "markdown": "**\\[Line 18\\] The parameter 'position' of function 'LineSegment' is passed by value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 23, "endColumn": 24 } } } ] }, { "ruleId": "JSF-117", "level": "warning", "message": { "text": "The parameter 'position' of function 'LineSegment' is passed by value", "markdown": "**\\[Line 18\\] The parameter 'position' of function 'LineSegment' is passed by value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 23, "endColumn": 24 } } } ] }, { "ruleId": "FORMAT-25_b", "level": "warning", "message": { "text": "'return' statement should be used with parenthesis", "markdown": "**\\[Line 19\\] 'return' statement should be used with parenthesis**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "CODSTA-MCPP-24", "level": "warning", "message": { "text": "Declaration of virtual function 'getArea' should have 'override' or 'final' specifier", "markdown": "**\\[Line 19\\] Declaration of virtual function 'getArea' should have 'override' or 'final' specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "AUTOSAR-A10_3_1-a", "level": "error", "message": { "text": "Declaration of virtual function 'getArea' should have 'override' or 'final' specifier", "markdown": "**\\[Line 19\\] Declaration of virtual function 'getArea' should have 'override' or 'final' specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'getArea' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 19\\] Function 'getArea' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'getArea' has Essential Complexity value: 1", "markdown": "**\\[Line 19\\] Function 'getArea' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "PB-05", "level": "warning", "message": { "text": "Function 'getArea' has declared return type 'double' but returns value of type 'int'", "markdown": "**\\[Line 19\\] Function 'getArea' has declared return type 'double' but returns value of type 'int'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "OOP-25", "level": "warning", "message": { "text": "Function 'getArea' is both virtual and inline", "markdown": "**\\[Line 19\\] Function 'getArea' is both virtual and inline**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "MISRA2008-5_0_5_b", "level": "error", "message": { "text": "Implicit conversion from integral to floating type in function's return", "markdown": "**\\[Line 19\\] Implicit conversion from integral to floating type in function's return**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "CERT_C-EXP39-a", "level": "warning", "message": { "text": "Implicit conversion from integral to floating type in function's return", "markdown": "**\\[Line 19\\] Implicit conversion from integral to floating type in function's return**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "AUTOSAR-M5_0_5-a", "level": "error", "message": { "text": "Implicit conversion from integral to floating type in function's return", "markdown": "**\\[Line 19\\] Implicit conversion from integral to floating type in function's return**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "MISRA2004-10_1_b", "level": "warning", "message": { "text": "Implicit conversion from integral to floating type in function's return", "markdown": "**\\[Line 19\\] Implicit conversion from integral to floating type in function's return**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "CODSTA-CPP-25", "level": "warning", "message": { "text": "Make virtual functions nonpublic, and public functions nonvirtual: getArea", "markdown": "**\\[Line 19\\] Make virtual functions nonpublic, and public functions nonvirtual: getArea**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "NAMING-17", "level": "warning", "message": { "text": "Naming convention not followed: getArea", "markdown": "**\\[Line 19\\] Naming convention not followed: getArea**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "FORMAT-43", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 19\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_b", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 19\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-34", "level": "warning", "message": { "text": "Opening '{' and closing '}' should be in the same column", "markdown": "**\\[Line 19\\] Opening '\\{' and closing '\\}' should be in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 19\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-03", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 19\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 19\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 19\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 19\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 19\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 19\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 19\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-02", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 19\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-28", "level": "warning", "message": { "text": "Return type is not placed in line before function 'getArea'", "markdown": "**\\[Line 19\\] Return type is not placed in line before function 'getArea'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-MCPP-05", "level": "warning", "message": { "text": "The 'getArea' function should be declared with the 'override' specifier", "markdown": "**\\[Line 19\\] The 'getArea' function should be declared with the 'override' specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "AUTOSAR-A10_3_2-a", "level": "error", "message": { "text": "The 'getArea' function should be declared with the 'override' specifier", "markdown": "**\\[Line 19\\] The 'getArea' function should be declared with the 'override' specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "HICPP-10_2_1-a", "level": "warning", "message": { "text": "The 'getArea' function should be declared with the 'override' specifier", "markdown": "**\\[Line 19\\] The 'getArea' function should be declared with the 'override' specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'getArea' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 19\\] The 'getArea' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'getArea' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 19\\] The 'getArea' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'getArea' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 19\\] The 'getArea' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'getArea' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 19\\] The 'getArea' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'getArea' function is not preceded by a comment", "markdown": "**\\[Line 19\\] The definition of the 'getArea' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'getArea' function is not preceded by a comment", "markdown": "**\\[Line 19\\] The definition of the 'getArea' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'getArea' should be composed only of lowercase letters", "markdown": "**\\[Line 19\\] The name 'getArea' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'getArea' should be composed only of lowercase letters", "markdown": "**\\[Line 19\\] The name 'getArea' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "OOP-21", "level": "warning", "message": { "text": "Use the virtual keyword for 'getArea' function", "markdown": "**\\[Line 19\\] Use the virtual keyword for 'getArea' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "MISRA2008-10_3_2", "level": "error", "message": { "text": "Use the virtual keyword for 'getArea' function", "markdown": "**\\[Line 19\\] Use the virtual keyword for 'getArea' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "OOP-23", "level": "error", "message": { "text": "Class 'Circle' has virtual functions without a virtual destructor", "markdown": "**\\[Line 22\\] Class 'Circle' has virtual functions without a virtual destructor**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-04", "level": "warning", "message": { "text": "Class 'Circle' missing assignment operator or special comment", "markdown": "**\\[Line 22\\] Class 'Circle' missing assignment operator or special comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-47", "level": "warning", "message": { "text": "Class 'Circle' missing assignment operator or special comment", "markdown": "**\\[Line 22\\] Class 'Circle' missing assignment operator or special comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-05", "level": "warning", "message": { "text": "Class 'Circle' missing copy constructor or special comment", "markdown": "**\\[Line 22\\] Class 'Circle' missing copy constructor or special comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-48", "level": "warning", "message": { "text": "Class 'Circle' missing copy constructor or special comment", "markdown": "**\\[Line 22\\] Class 'Circle' missing copy constructor or special comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A12_4_2-a", "level": "warning", "message": { "text": "Class 'Circle' should be final", "markdown": "**\\[Line 22\\] Class 'Circle' should be final**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-MCPP-23", "level": "warning", "message": { "text": "Class 'Circle' should be final", "markdown": "**\\[Line 22\\] Class 'Circle' should be final**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-098", "level": "warning", "message": { "text": "Do not declare the 'Circle' type in the global namespace", "markdown": "**\\[Line 22\\] Do not declare the 'Circle' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-M7_3_1-a", "level": "error", "message": { "text": "Do not declare the 'Circle' type in the global namespace", "markdown": "**\\[Line 22\\] Do not declare the 'Circle' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-36", "level": "warning", "message": { "text": "Do not declare the 'Circle' type in the global namespace", "markdown": "**\\[Line 22\\] Do not declare the 'Circle' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2008-7_3_1", "level": "error", "message": { "text": "Do not declare the 'Circle' type in the global namespace", "markdown": "**\\[Line 22\\] Do not declare the 'Circle' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare copy assignment operator in 'Circle'", "markdown": "**\\[Line 22\\] Explicitly declare copy assignment operator in 'Circle'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare copy constructor in 'Circle'", "markdown": "**\\[Line 22\\] Explicitly declare copy constructor in 'Circle'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare default constructor in 'Circle'", "markdown": "**\\[Line 22\\] Explicitly declare default constructor in 'Circle'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare destructor in 'Circle'", "markdown": "**\\[Line 22\\] Explicitly declare destructor in 'Circle'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare move assignment operator in 'Circle'", "markdown": "**\\[Line 22\\] Explicitly declare move assignment operator in 'Circle'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare move constructor in 'Circle'", "markdown": "**\\[Line 22\\] Explicitly declare move constructor in 'Circle'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "FORMAT-34", "level": "warning", "message": { "text": "Opening '{' and closing '}' should be in the same column", "markdown": "**\\[Line 22\\] Opening '\\{' and closing '\\}' should be in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-057_a", "level": "warning", "message": { "text": "Public section must be before protected and private sections", "markdown": "**\\[Line 22\\] Public section must be before protected and private sections**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-46", "level": "warning", "message": { "text": "Public section must be before protected and private sections", "markdown": "**\\[Line 22\\] Public section must be before protected and private sections**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "FORMAT-02", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 22\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The declaration of the 'Circle' type should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 22\\] The declaration of the 'Circle' type should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The declaration of the 'Circle' type should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 22\\] The declaration of the 'Circle' type should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2012-RULE-5_7_a", "level": "error", "message": { "text": "The type name 'Circle' is not a unique identifier in the testing scope", "markdown": "**\\[Line 22\\] The type name 'Circle' is not a unique identifier in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRAC2012-RULE_5_7-a", "level": "error", "message": { "text": "The type name 'Circle' is not a unique identifier in the testing scope", "markdown": "**\\[Line 22\\] The type name 'Circle' is not a unique identifier in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-07", "level": "warning", "message": { "text": "Member variable '_radius' shall begin with a lowercase letter", "markdown": "**\\[Line 23\\] Member variable '\\_radius' shall begin with a lowercase letter**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-14", "level": "warning", "message": { "text": "Naming convention not followed: _radius", "markdown": "**\\[Line 23\\] Naming convention not followed: \\_radius**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-15", "level": "warning", "message": { "text": "Naming convention not followed: _radius", "markdown": "**\\[Line 23\\] Naming convention not followed: \\_radius**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 23\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 23\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 23\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-HN-12", "level": "warning", "message": { "text": "The '_radius' identifier should have the 'd' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 23\\] The '\\_radius' identifier should have the 'd' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-HN-29", "level": "warning", "message": { "text": "The '_radius' identifier should have the 'm_' prefix", "markdown": "**\\[Line 23\\] The '\\_radius' identifier should have the 'm\\_' prefix**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The '_radius' member variable should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 23\\] The '\\_radius' member variable should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The '_radius' member variable should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 23\\] The '\\_radius' member variable should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 23\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 23\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 23\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 23\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 23\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 23\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 23\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier '_radius' differs only by presence\/absence of the underscore character from identifier 'radius' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 23\\] The identifier '\\_radius' differs only by presence\/absence of the underscore character from identifier 'radius' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier '_radius' differs only by presence\/absence of the underscore character from identifier 'radius' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 23\\] The identifier '\\_radius' differs only by presence\/absence of the underscore character from identifier 'radius' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-33", "level": "warning", "message": { "text": "Using underscore at the beginning of the name '_radius' is not allowed", "markdown": "**\\[Line 23\\] Using underscore at the beginning of the name '\\_radius' is not allowed**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-047", "level": "warning", "message": { "text": "Using underscore at the beginning of the name '_radius' is not allowed", "markdown": "**\\[Line 23\\] Using underscore at the beginning of the name '\\_radius' is not allowed**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "OPT-17", "level": "warning", "message": { "text": "Class 'Circle' defines an inline constructor", "markdown": "**\\[Line 25\\] Class 'Circle' defines an inline constructor**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'Circle' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 25\\] Function 'Circle' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'Circle' has Essential Complexity value: 1", "markdown": "**\\[Line 25\\] Function 'Circle' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2008-2_10_1", "level": "error", "message": { "text": "Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '_position' declared in base class", "markdown": "**\\[Line 25\\] Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '\\_position' declared in base class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "HICPP-2_4_1-a", "level": "warning", "message": { "text": "Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '_position' declared in base class", "markdown": "**\\[Line 25\\] Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '\\_position' declared in base class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "AUTOSAR-M2_10_1-a", "level": "error", "message": { "text": "Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '_position' declared in base class", "markdown": "**\\[Line 25\\] Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '\\_position' declared in base class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "NAMING-47", "level": "warning", "message": { "text": "Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '_position' declared in base class", "markdown": "**\\[Line 25\\] Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '\\_position' declared in base class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "MISRA2008-2_10_1", "level": "error", "message": { "text": "Identifier name: 'radius' differs only by presence\/absence of the underscore character from identifier name: '_radius' declared in class", "markdown": "**\\[Line 25\\] Identifier name: 'radius' differs only by presence\/absence of the underscore character from identifier name: '\\_radius' declared in class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "HICPP-2_4_1-a", "level": "warning", "message": { "text": "Identifier name: 'radius' differs only by presence\/absence of the underscore character from identifier name: '_radius' declared in class", "markdown": "**\\[Line 25\\] Identifier name: 'radius' differs only by presence\/absence of the underscore character from identifier name: '\\_radius' declared in class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "AUTOSAR-M2_10_1-a", "level": "error", "message": { "text": "Identifier name: 'radius' differs only by presence\/absence of the underscore character from identifier name: '_radius' declared in class", "markdown": "**\\[Line 25\\] Identifier name: 'radius' differs only by presence\/absence of the underscore character from identifier name: '\\_radius' declared in class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "NAMING-47", "level": "warning", "message": { "text": "Identifier name: 'radius' differs only by presence\/absence of the underscore character from identifier name: '_radius' declared in class", "markdown": "**\\[Line 25\\] Identifier name: 'radius' differs only by presence\/absence of the underscore character from identifier name: '\\_radius' declared in class**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "FORMAT-43", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 25\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_b", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 25\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 25\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 25\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 79, "endColumn": 80 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 25\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 79, "endColumn": 80 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 25\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 79, "endColumn": 80 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 25\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 25\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 25\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'Circle' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 25\\] The 'Circle' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'Circle' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 25\\] The 'Circle' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2012-RULE-5_7_a", "level": "error", "message": { "text": "The 'Circle' identifier is the same as the name of a type defined in the testing scope", "markdown": "**\\[Line 25\\] The 'Circle' identifier is the same as the name of a type defined in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRAC2012-RULE_5_7-a", "level": "error", "message": { "text": "The 'Circle' identifier is the same as the name of a type defined in the testing scope", "markdown": "**\\[Line 25\\] The 'Circle' identifier is the same as the name of a type defined in the testing scope**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 25\\] The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 25\\] The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-HN-12", "level": "warning", "message": { "text": "The 'radius' identifier should have the 'd' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 25\\] The 'radius' identifier should have the 'd' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'radius' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 25\\] The 'radius' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'radius' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 25\\] The 'radius' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 25\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 25\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 25\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 25\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 25\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 25\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 25\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'Circle' function is not preceded by a comment", "markdown": "**\\[Line 25\\] The definition of the 'Circle' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'Circle' function is not preceded by a comment", "markdown": "**\\[Line 25\\] The definition of the 'Circle' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'position' differs only by presence\/absence of the underscore character from identifier '_position' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 25\\] The identifier 'position' differs only by presence\/absence of the underscore character from identifier '\\_position' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'position' differs only by presence\/absence of the underscore character from identifier '_position' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 25\\] The identifier 'position' differs only by presence\/absence of the underscore character from identifier '\\_position' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'radius' differs only by presence\/absence of the underscore character from identifier '_radius' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 25\\] The identifier 'radius' differs only by presence\/absence of the underscore character from identifier '\\_radius' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'radius' differs only by presence\/absence of the underscore character from identifier '_radius' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 25\\] The identifier 'radius' differs only by presence\/absence of the underscore character from identifier '\\_radius' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "OPT-14", "level": "warning", "message": { "text": "The parameter 'position' of function 'Circle' is passed by value", "markdown": "**\\[Line 25\\] The parameter 'position' of function 'Circle' is passed by value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "JSF-125_a", "level": "warning", "message": { "text": "The parameter 'position' of function 'Circle' is passed by value", "markdown": "**\\[Line 25\\] The parameter 'position' of function 'Circle' is passed by value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "JSF-117", "level": "warning", "message": { "text": "The parameter 'position' of function 'Circle' is passed by value", "markdown": "**\\[Line 25\\] The parameter 'position' of function 'Circle' is passed by value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "FORMAT-25_b", "level": "warning", "message": { "text": "'return' statement should be used with parenthesis", "markdown": "**\\[Line 26\\] 'return' statement should be used with parenthesis**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "CODSTA-MCPP-24", "level": "warning", "message": { "text": "Declaration of virtual function 'getArea' should have 'override' or 'final' specifier", "markdown": "**\\[Line 26\\] Declaration of virtual function 'getArea' should have 'override' or 'final' specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "AUTOSAR-A10_3_1-a", "level": "error", "message": { "text": "Declaration of virtual function 'getArea' should have 'override' or 'final' specifier", "markdown": "**\\[Line 26\\] Declaration of virtual function 'getArea' should have 'override' or 'final' specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'getArea' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 26\\] Function 'getArea' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'getArea' has Essential Complexity value: 1", "markdown": "**\\[Line 26\\] Function 'getArea' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "OOP-25", "level": "warning", "message": { "text": "Function 'getArea' is both virtual and inline", "markdown": "**\\[Line 26\\] Function 'getArea' is both virtual and inline**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "JSF-151", "level": "warning", "message": { "text": "Literal constant '3.141592653' is used", "markdown": "**\\[Line 26\\] Literal constant '3\\.141592653' is used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 37, "endColumn": 38 } } } ] }, { "ruleId": "CODSTA-26", "level": "warning", "message": { "text": "Literal constant '3.141592653' is used", "markdown": "**\\[Line 26\\] Literal constant '3\\.141592653' is used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 37, "endColumn": 38 } } } ] }, { "ruleId": "AUTOSAR-A5_1_1-a", "level": "error", "message": { "text": "Literal constant '3.141592653' is used", "markdown": "**\\[Line 26\\] Literal constant '3\\.141592653' is used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 37, "endColumn": 38 } } } ] }, { "ruleId": "HICPP-5_1_1-a", "level": "warning", "message": { "text": "Literal constant '3.141592653' is used", "markdown": "**\\[Line 26\\] Literal constant '3\\.141592653' is used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 37, "endColumn": 38 } } } ] }, { "ruleId": "CODSTA-CPP-25", "level": "warning", "message": { "text": "Make virtual functions nonpublic, and public functions nonvirtual: getArea", "markdown": "**\\[Line 26\\] Make virtual functions nonpublic, and public functions nonvirtual: getArea**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "NAMING-17", "level": "warning", "message": { "text": "Naming convention not followed: getArea", "markdown": "**\\[Line 26\\] Naming convention not followed: getArea**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "FORMAT-43", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 26\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_b", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 26\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-34", "level": "warning", "message": { "text": "Opening '{' and closing '}' should be in the same column", "markdown": "**\\[Line 26\\] Opening '\\{' and closing '\\}' should be in the same column**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 26\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 26\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 70, "endColumn": 71 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 26\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 70, "endColumn": 71 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 26\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 70, "endColumn": 71 } } } ] }, { "ruleId": "FORMAT-03", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 26\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 70, "endColumn": 71 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 26\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 26\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 26\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-02", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 26\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-28", "level": "warning", "message": { "text": "Return type is not placed in line before function 'getArea'", "markdown": "**\\[Line 26\\] Return type is not placed in line before function 'getArea'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-MCPP-05", "level": "warning", "message": { "text": "The 'getArea' function should be declared with the 'override' specifier", "markdown": "**\\[Line 26\\] The 'getArea' function should be declared with the 'override' specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "AUTOSAR-A10_3_2-a", "level": "error", "message": { "text": "The 'getArea' function should be declared with the 'override' specifier", "markdown": "**\\[Line 26\\] The 'getArea' function should be declared with the 'override' specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "HICPP-10_2_1-a", "level": "warning", "message": { "text": "The 'getArea' function should be declared with the 'override' specifier", "markdown": "**\\[Line 26\\] The 'getArea' function should be declared with the 'override' specifier**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'getArea' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 26\\] The 'getArea' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'getArea' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 26\\] The 'getArea' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'getArea' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 26\\] The 'getArea' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'getArea' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 26\\] The 'getArea' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 26\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 26\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 26\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 26\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 26\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 26\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 26\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'getArea' function is not preceded by a comment", "markdown": "**\\[Line 26\\] The definition of the 'getArea' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'getArea' function is not preceded by a comment", "markdown": "**\\[Line 26\\] The definition of the 'getArea' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'getArea' should be composed only of lowercase letters", "markdown": "**\\[Line 26\\] The name 'getArea' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'getArea' should be composed only of lowercase letters", "markdown": "**\\[Line 26\\] The name 'getArea' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "OOP-21", "level": "warning", "message": { "text": "Use the virtual keyword for 'getArea' function", "markdown": "**\\[Line 26\\] Use the virtual keyword for 'getArea' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "MISRA2008-10_3_2", "level": "error", "message": { "text": "Use the virtual keyword for 'getArea' function", "markdown": "**\\[Line 26\\] Use the virtual keyword for 'getArea' function**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "MISRA2008-0_4_2", "level": "note", "message": { "text": "floating-point arithmetic is not documented", "markdown": "**\\[Line 26\\] floating\\-point arithmetic is not documented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 37, "endColumn": 38 } } } ] }, { "ruleId": "OWASP2019-API9-d", "level": "warning", "message": { "text": "floating-point arithmetic is not documented", "markdown": "**\\[Line 26\\] floating\\-point arithmetic is not documented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 37, "endColumn": 38 } } } ] }, { "ruleId": "AUTOSAR-M0_4_2-a", "level": "error", "message": { "text": "floating-point arithmetic is not documented", "markdown": "**\\[Line 26\\] floating\\-point arithmetic is not documented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 37, "endColumn": 38 } } } ] }, { "ruleId": "COMMENT-10", "level": "warning", "message": { "text": "floating-point arithmetic is not documented", "markdown": "**\\[Line 26\\] floating\\-point arithmetic is not documented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 37, "endColumn": 38 } } } ] }, { "ruleId": "PORT-13", "level": "warning", "message": { "text": "'contains' shall be declared as unsigned int or signed int", "markdown": "**\\[Line 27\\] 'contains' shall be declared as unsigned int or signed int**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 27\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'contains' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 27\\] Function 'contains' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'contains' has Essential Complexity value: 1", "markdown": "**\\[Line 27\\] Function 'contains' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "MISRA2008-2_10_1", "level": "error", "message": { "text": "Identifier name: 'point' differs only by case from its type name: 'Point'", "markdown": "**\\[Line 27\\] Identifier name: 'point' differs only by case from its type name: 'Point'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "HICPP-2_4_1-a", "level": "warning", "message": { "text": "Identifier name: 'point' differs only by case from its type name: 'Point'", "markdown": "**\\[Line 27\\] Identifier name: 'point' differs only by case from its type name: 'Point'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "AUTOSAR-M2_10_1-a", "level": "error", "message": { "text": "Identifier name: 'point' differs only by case from its type name: 'Point'", "markdown": "**\\[Line 27\\] Identifier name: 'point' differs only by case from its type name: 'Point'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "NAMING-47", "level": "warning", "message": { "text": "Identifier name: 'point' differs only by case from its type name: 'Point'", "markdown": "**\\[Line 27\\] Identifier name: 'point' differs only by case from its type name: 'Point'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "NAMING-17", "level": "warning", "message": { "text": "Naming convention not followed: contains", "markdown": "**\\[Line 27\\] Naming convention not followed: contains**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CERT_C-API00-a", "level": "warning", "message": { "text": "Parameter 'point' is not validated before use", "markdown": "**\\[Line 27\\] Parameter 'point' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "CODSTA-86", "level": "warning", "message": { "text": "Parameter 'point' is not validated before use", "markdown": "**\\[Line 27\\] Parameter 'point' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "FORMAT-28", "level": "warning", "message": { "text": "Return type is not placed in line before function 'contains'", "markdown": "**\\[Line 27\\] Return type is not placed in line before function 'contains'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'contains' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 27\\] The 'contains' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'contains' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 27\\] The 'contains' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'contains' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 27\\] The 'contains' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'contains' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 27\\] The 'contains' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'point' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 27\\] The 'point' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'point' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 27\\] The 'point' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 27\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 27\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 27\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 27\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 27\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 27\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 27\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'contains' function is not preceded by a comment", "markdown": "**\\[Line 27\\] The definition of the 'contains' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'contains' function is not preceded by a comment", "markdown": "**\\[Line 27\\] The definition of the 'contains' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'point' differs only by case from identifier 'POINT' declared in file 'windef.h'", "markdown": "**\\[Line 27\\] The identifier 'point' differs only by case from identifier 'POINT' declared in file 'windef\\.h'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'point' differs only by case from identifier 'POINT' declared in file 'windef.h'", "markdown": "**\\[Line 27\\] The identifier 'point' differs only by case from identifier 'POINT' declared in file 'windef\\.h'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'", "markdown": "**\\[Line 27\\] The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'", "markdown": "**\\[Line 27\\] The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "OPT-14", "level": "warning", "message": { "text": "The parameter 'point' of function 'contains' is passed by value", "markdown": "**\\[Line 27\\] The parameter 'point' of function 'contains' is passed by value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "JSF-125_a", "level": "warning", "message": { "text": "The parameter 'point' of function 'contains' is passed by value", "markdown": "**\\[Line 27\\] The parameter 'point' of function 'contains' is passed by value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "JSF-117", "level": "warning", "message": { "text": "The parameter 'point' of function 'contains' is passed by value", "markdown": "**\\[Line 27\\] The parameter 'point' of function 'contains' is passed by value**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 27\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 27\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 28\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 28, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-25_b", "level": "warning", "message": { "text": "'return' statement should be used with parenthesis", "markdown": "**\\[Line 29\\] 'return' statement should be used with parenthesis**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "PB-05", "level": "warning", "message": { "text": "Function 'contains' has declared return type 'int' but returns value of type 'bool'", "markdown": "**\\[Line 29\\] Function 'contains' has declared return type 'int' but returns value of type 'bool'**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2008-5_0_5_b", "level": "error", "message": { "text": "Implicit conversion from integral to floating type in comparison expression", "markdown": "**\\[Line 29\\] Implicit conversion from integral to floating type in comparison expression**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "CERT_C-EXP39-a", "level": "warning", "message": { "text": "Implicit conversion from integral to floating type in comparison expression", "markdown": "**\\[Line 29\\] Implicit conversion from integral to floating type in comparison expression**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "AUTOSAR-M5_0_5-a", "level": "error", "message": { "text": "Implicit conversion from integral to floating type in comparison expression", "markdown": "**\\[Line 29\\] Implicit conversion from integral to floating type in comparison expression**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "MISRA2004-10_1_b", "level": "warning", "message": { "text": "Implicit conversion from integral to floating type in comparison expression", "markdown": "**\\[Line 29\\] Implicit conversion from integral to floating type in comparison expression**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 29\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 29\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 29\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "CODSTA-CPP-15", "level": "warning", "message": { "text": "Put function 'getPosition' that are used in the body of inline member function into separate file", "markdown": "**\\[Line 29\\] Put function 'getPosition' that are used in the body of inline member function into separate file**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "MISRA2008-0_4_2", "level": "note", "message": { "text": "floating-point arithmetic is not documented", "markdown": "**\\[Line 29\\] floating\\-point arithmetic is not documented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 55, "endColumn": 56 } } } ] }, { "ruleId": "OWASP2019-API9-d", "level": "warning", "message": { "text": "floating-point arithmetic is not documented", "markdown": "**\\[Line 29\\] floating\\-point arithmetic is not documented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 55, "endColumn": 56 } } } ] }, { "ruleId": "AUTOSAR-M0_4_2-a", "level": "error", "message": { "text": "floating-point arithmetic is not documented", "markdown": "**\\[Line 29\\] floating\\-point arithmetic is not documented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 55, "endColumn": 56 } } } ] }, { "ruleId": "COMMENT-10", "level": "warning", "message": { "text": "floating-point arithmetic is not documented", "markdown": "**\\[Line 29\\] floating\\-point arithmetic is not documented**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 55, "endColumn": 56 } } } ] }, { "ruleId": "HICPP-2_3_1-a", "level": "warning", "message": { "text": "Use \/\/ comments only", "markdown": "**\\[Line 33\\] Use \/\/ comments only**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 33, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-126", "level": "error", "message": { "text": "Use \/\/ comments only", "markdown": "**\\[Line 33\\] Use \/\/ comments only**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 33, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "COMMENT-01", "level": "warning", "message": { "text": "Use \/\/ comments only", "markdown": "**\\[Line 33\\] Use \/\/ comments only**" }, "partialFingerprints": { "violType": "StdViol" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 33, "startColumn": 8, "endColumn": 9 } } } ] }], "artifacts": [ { "location": { "uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" } },{ "location": { "uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" } },{ "location": { "uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" } },{ "location": { "uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" } },{ "location": { "uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" } },{ "location": { "uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" } }] } ] }