{ "$schema": "https://docs.oasis-open.org/sarif/sarif/v2.1.0/errata01/os/schemas/sarif-schema-2.1.0.json", "version": "2.1.0", "runs": [ {"tool": { "driver": {"name": "C/C++test", "semanticVersion": "2024.1.0","rules": [{ "id": "APSC_DV-002560-f", "name": "Avoid potential integer overflow\/underflow on tainted data", "shortDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data" }, "fullDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data [APSC_DV-002560-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid potential integer overflow\/underflow on tainted data [APSC_DV-002560-f]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002560 The application must not be subject to input handling vulnerabilities." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002560-k", "name": "Untrusted data is used as a loop boundary", "shortDescription": { "text": "Untrusted data is used as a loop boundary" }, "fullDescription": { "text": "Untrusted data is used as a loop boundary [APSC_DV-002560-k]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Untrusted data is used as a loop boundary [APSC_DV-002560-k]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002560 The application must not be subject to input handling vulnerabilities." ], "security-severity": "9.5" } }, { "id": "APSC_DV-003110-a", "name": "Do not hard code string literals", "shortDescription": { "text": "Do not hard code string literals" }, "fullDescription": { "text": "Do not hard code string literals [APSC_DV-003110-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not hard code string literals [APSC_DV-003110-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-003110 The application must not contain embedded authentication data." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002000-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [APSC_DV-002000-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure resources are freed [APSC_DV-002000-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002000 The application must terminate all network connections associated with a communications session at the end of the session." ], "security-severity": "8" } }, { "id": "APSC_DV-002520-f", "name": "Avoid potential integer overflow\/underflow on tainted data", "shortDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data" }, "fullDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data [APSC_DV-002520-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid potential integer overflow\/underflow on tainted data [APSC_DV-002520-f]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002520 The application must protect from canonical representation vulnerabilities." ], "security-severity": "8" } }, { "id": "APSC_DV-002520-k", "name": "Untrusted data is used as a loop boundary", "shortDescription": { "text": "Untrusted data is used as a loop boundary" }, "fullDescription": { "text": "Untrusted data is used as a loop boundary [APSC_DV-002520-k]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Untrusted data is used as a loop boundary [APSC_DV-002520-k]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002520 The application must protect from canonical representation vulnerabilities." ], "security-severity": "8" } }, { "id": "APSC_DV-003235-a", "name": "The value returned by a POSIX library function that may return an error should be used", "shortDescription": { "text": "The value returned by a POSIX library function that may return an error should be used" }, "fullDescription": { "text": "The value returned by a POSIX library function that may return an error should be used [APSC_DV-003235-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value returned by a POSIX library function that may return an error should be used [APSC_DV-003235-a]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-003235 The application must not be subject to error handling vulnerabilities." ], "security-severity": "8" } }, { "id": "APSC_DV-002390-c", "name": "Do not use scanf and fscanf functions without specifying variable size in format string", "shortDescription": { "text": "Do not use scanf and fscanf functions without specifying variable size in format string" }, "fullDescription": { "text": "Do not use scanf and fscanf functions without specifying variable size in format string [APSC_DV-002390-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use scanf and fscanf functions without specifying variable size in format string [APSC_DV-002390-c]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002390 XML-based applications must mitigate DoS attacks by using XML filters, parser options, or gateways." ], "security-severity": "8" } }, { "id": "APSC_DV-002590-g", "name": "Avoid potential integer overflow\/underflow on tainted data", "shortDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data" }, "fullDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data [APSC_DV-002590-g]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid potential integer overflow\/underflow on tainted data [APSC_DV-002590-g]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002590 The application must not be vulnerable to overflow attacks." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002550-f", "name": "Avoid potential integer overflow\/underflow on tainted data", "shortDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data" }, "fullDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data [APSC_DV-002550-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid potential integer overflow\/underflow on tainted data [APSC_DV-002550-f]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002550 The application must not be vulnerable to XML-oriented attacks." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002550-k", "name": "Untrusted data is used as a loop boundary", "shortDescription": { "text": "Untrusted data is used as a loop boundary" }, "fullDescription": { "text": "Untrusted data is used as a loop boundary [APSC_DV-002550-k]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Untrusted data is used as a loop boundary [APSC_DV-002550-k]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002550 The application must not be vulnerable to XML-oriented attacks." ], "security-severity": "9.5" } }, { "id": "APSC_DV-002530-f", "name": "Avoid potential integer overflow\/underflow on tainted data", "shortDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data" }, "fullDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data [APSC_DV-002530-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid potential integer overflow\/underflow on tainted data [APSC_DV-002530-f]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002530 The application must validate all input." ], "security-severity": "8" } }, { "id": "APSC_DV-002530-k", "name": "Untrusted data is used as a loop boundary", "shortDescription": { "text": "Untrusted data is used as a loop boundary" }, "fullDescription": { "text": "Untrusted data is used as a loop boundary [APSC_DV-002530-k]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Untrusted data is used as a loop boundary [APSC_DV-002530-k]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-002530 The application must validate all input." ], "security-severity": "8" } }, { "id": "APSC_DV-001290-b", "name": "Untrusted data is used as a loop boundary", "shortDescription": { "text": "Untrusted data is used as a loop boundary" }, "fullDescription": { "text": "Untrusted data is used as a loop boundary [APSC_DV-001290-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Untrusted data is used as a loop boundary [APSC_DV-001290-b]" }, "properties": { "tags": [ "DISA ASD STIG", "APSC_DV-001290 The application must protect audit information from unauthorized modification." ], "security-severity": "8" } }, { "id": "AUTOSAR-M27_0_1-a", "name": "The input\/output library stdio.h shall not be used", "shortDescription": { "text": "The input\/output library stdio.h shall not be used" }, "fullDescription": { "text": "The input\/output library stdio.h shall not be used [AUTOSAR-M27_0_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The input\/output library stdio.h shall not be used [AUTOSAR-M27_0_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M27-0-1 The stream input\/output library <cstdio> shall not be used" ] } }, { "id": "AUTOSAR-A15_1_4-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [AUTOSAR-A15_1_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure resources are freed [AUTOSAR-A15_1_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-1-4 If a function exits with an exception, then before a throw, the function shall place all objects\/resources that the function constructed in valid states or it shall delete them" ] } }, { "id": "AUTOSAR-M0_1_10-a", "name": "Every defined function with external linkage shall be used at least once", "shortDescription": { "text": "Every defined function with external linkage shall be used at least once" }, "fullDescription": { "text": "Every defined function with external linkage shall be used at least once [AUTOSAR-M0_1_10-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Every defined function with external linkage shall be used at least once [AUTOSAR-M0_1_10-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-10 Every defined function should be called at least once" ] } }, { "id": "AUTOSAR-A2_7_3-a", "name": "All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag", "shortDescription": { "text": "All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" }, "fullDescription": { "text": "All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag [AUTOSAR-A2_7_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag [AUTOSAR-A2_7_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-7-3 All declarations of \"user-defined\" types, static and non-static data members, functions and methods shall be preceded by documentation using \"\/\/\/\" comments and \"@tag\" tags" ] } }, { "id": "AUTOSAR-A2_7_3-b", "name": "Function parameters and return type should be documented in a comment that precedes the function declaration", "shortDescription": { "text": "Function parameters and return type should be documented in a comment that precedes the function declaration" }, "fullDescription": { "text": "Function parameters and return type should be documented in a comment that precedes the function declaration [AUTOSAR-A2_7_3-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Function parameters and return type should be documented in a comment that precedes the function declaration [AUTOSAR-A2_7_3-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A2-7-3 All declarations of \"user-defined\" types, static and non-static data members, functions and methods shall be preceded by documentation using \"\/\/\/\" comments and \"@tag\" tags" ] } }, { "id": "AUTOSAR-A1_1_1-d", "name": "The C library shall not be used", "shortDescription": { "text": "The C library shall not be used" }, "fullDescription": { "text": "The C library shall not be used [AUTOSAR-A1_1_1-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The C library shall not be used [AUTOSAR-A1_1_1-d]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A1-1-1 All code shall conform to ISO\/IEC 14882:2014 - Programming Language C++ and shall not use deprecated features" ] } }, { "id": "AUTOSAR-A5_6_1-a", "name": "Avoid division by zero", "shortDescription": { "text": "Avoid division by zero" }, "fullDescription": { "text": "Avoid division by zero [AUTOSAR-A5_6_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid division by zero [AUTOSAR-A5_6_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-6-1 The right hand operand of the integer division or remainder operators shall not be equal to zero" ] } }, { "id": "AUTOSAR-M5_0_15-a", "name": "Array indexing shall be the only allowed form of pointer arithmetic", "shortDescription": { "text": "Array indexing shall be the only allowed form of pointer arithmetic" }, "fullDescription": { "text": "Array indexing shall be the only allowed form of pointer arithmetic [AUTOSAR-M5_0_15-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Array indexing shall be the only allowed form of pointer arithmetic [AUTOSAR-M5_0_15-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-15 Array indexing shall be the only form of pointer arithmetic" ] } }, { "id": "AUTOSAR-A15_0_2-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [AUTOSAR-A15_0_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure resources are freed [AUTOSAR-A15_0_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-0-2 At least the basic guarantee for exception safety shall be provided for all operations. In addition, each function may offer either the strong guarantee or the nothrow guarantee" ] } }, { "id": "AUTOSAR-M9_3_3-a", "name": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const", "shortDescription": { "text": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" }, "fullDescription": { "text": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const [AUTOSAR-M9_3_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const [AUTOSAR-M9_3_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" ] } }, { "id": "AUTOSAR-M7_1_2-b", "name": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object", "shortDescription": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" }, "fullDescription": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object [AUTOSAR-M7_1_2-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object [AUTOSAR-M7_1_2-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified" ] } }, { "id": "AUTOSAR-A7_1_1-a", "name": "Declare local variable as const whenever possible", "shortDescription": { "text": "Declare local variable as const whenever possible" }, "fullDescription": { "text": "Declare local variable as const whenever possible [AUTOSAR-A7_1_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Declare local variable as const whenever possible [AUTOSAR-A7_1_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A7-1-1 Constexpr or const specifiers shall be used for immutable data declaration" ] } }, { "id": "AUTOSAR-A18_0_1-a", "name": "The C library shall not be used", "shortDescription": { "text": "The C library shall not be used" }, "fullDescription": { "text": "The C library shall not be used [AUTOSAR-A18_0_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The C library shall not be used [AUTOSAR-A18_0_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-0-1 The C library facilities shall only be accessed through C++ library headers" ] } }, { "id": "AUTOSAR-M0_4_2-a", "name": "Use of floating-point arithmetic shall be documented", "shortDescription": { "text": "Use of floating-point arithmetic shall be documented" }, "fullDescription": { "text": "Use of floating-point arithmetic shall be documented [AUTOSAR-M0_4_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use of floating-point arithmetic shall be documented [AUTOSAR-M0_4_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-4-2 Use of floating-point arithmetic shall be documented" ] } }, { "id": "AUTOSAR-A18_0_2-a", "name": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used", "shortDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" }, "fullDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [AUTOSAR-A18_0_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [AUTOSAR-A18_0_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-0-2 The error state of a conversion from string to a numeric value shall be checked" ] } }, { "id": "AUTOSAR-A12_4_2-a", "name": "If a public destructor of a class is non-virtual, then the class should be declared final", "shortDescription": { "text": "If a public destructor of a class is non-virtual, then the class should be declared final" }, "fullDescription": { "text": "If a public destructor of a class is non-virtual, then the class should be declared final [AUTOSAR-A12_4_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If a public destructor of a class is non-virtual, then the class should be declared final [AUTOSAR-A12_4_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A12-4-2 If a public destructor of a class is non-virtual, then the class should be declared final" ] } }, { "id": "AUTOSAR-A8_4_10-a", "name": "A parameter shall be passed by reference if it can't be NULL", "shortDescription": { "text": "A parameter shall be passed by reference if it can't be NULL" }, "fullDescription": { "text": "A parameter shall be passed by reference if it can't be NULL [AUTOSAR-A8_4_10-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A parameter shall be passed by reference if it can't be NULL [AUTOSAR-A8_4_10-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-4-10 A parameter shall be passed by reference if it can't be NULL" ] } }, { "id": "AUTOSAR-M2_10_1-a", "name": "Different identifiers shall be typographically unambiguous", "shortDescription": { "text": "Different identifiers shall be typographically unambiguous" }, "fullDescription": { "text": "Different identifiers shall be typographically unambiguous [AUTOSAR-M2_10_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Different identifiers shall be typographically unambiguous [AUTOSAR-M2_10_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M2-10-1 Different identifiers shall be typographically unambiguous" ] } }, { "id": "AUTOSAR-A7_1_7-b", "name": "Multiple variable declarations shall not be allowed on the same line", "shortDescription": { "text": "Multiple variable declarations shall not be allowed on the same line" }, "fullDescription": { "text": "Multiple variable declarations shall not be allowed on the same line [AUTOSAR-A7_1_7-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Multiple variable declarations shall not be allowed on the same line [AUTOSAR-A7_1_7-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A7-1-7 Each expression statement and identifier declaration shall be placed on a separate line" ] } }, { "id": "AUTOSAR-A7_1_7-c", "name": "Each variable should be declared in a separate declaration statement", "shortDescription": { "text": "Each variable should be declared in a separate declaration statement" }, "fullDescription": { "text": "Each variable should be declared in a separate declaration statement [AUTOSAR-A7_1_7-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Each variable should be declared in a separate declaration statement [AUTOSAR-A7_1_7-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A7-1-7 Each expression statement and identifier declaration shall be placed on a separate line" ] } }, { "id": "AUTOSAR-M7_3_1-a", "name": "The global namespace shall only contain main() and namespace declarations", "shortDescription": { "text": "The global namespace shall only contain main() and namespace declarations" }, "fullDescription": { "text": "The global namespace shall only contain main() and namespace declarations [AUTOSAR-M7_3_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The global namespace shall only contain main() and namespace declarations [AUTOSAR-M7_3_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M7-3-1 The global namespace shall only contain main, namespace declarations and extern \"C\" declarations" ] } }, { "id": "AUTOSAR-A8_5_2-a", "name": "Braced-initialization {}, without equals sign, shall be used for variable initialization", "shortDescription": { "text": "Braced-initialization {}, without equals sign, shall be used for variable initialization" }, "fullDescription": { "text": "Braced-initialization {}, without equals sign, shall be used for variable initialization [AUTOSAR-A8_5_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Braced-initialization {}, without equals sign, shall be used for variable initialization [AUTOSAR-A8_5_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-5-2 Braced-initialization {}, without equals sign, shall be used for variable initialization" ] } }, { "id": "AUTOSAR-A9_3_1-a", "name": "Public member functions shall not return non-const handles to private\/protected class-data", "shortDescription": { "text": "Public member functions shall not return non-const handles to private\/protected class-data" }, "fullDescription": { "text": "Public member functions shall not return non-const handles to private\/protected class-data [AUTOSAR-A9_3_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Public member functions shall not return non-const handles to private\/protected class-data [AUTOSAR-A9_3_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A9-3-1 Member functions shall not return non-const \"raw\" pointers or references to private or protected data owned by the class" ] } }, { "id": "AUTOSAR-A5_3_2-a", "name": "Avoid null pointer dereferencing", "shortDescription": { "text": "Avoid null pointer dereferencing" }, "fullDescription": { "text": "Avoid null pointer dereferencing [AUTOSAR-A5_3_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid null pointer dereferencing [AUTOSAR-A5_3_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-3-2 Null pointers shall not be dereferenced" ] } }, { "id": "AUTOSAR-M4_10_2-a", "name": "Literal zero (0) shall not be used as the null-pointer-constant", "shortDescription": { "text": "Literal zero (0) shall not be used as the null-pointer-constant" }, "fullDescription": { "text": "Literal zero (0) shall not be used as the null-pointer-constant [AUTOSAR-M4_10_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Literal zero (0) shall not be used as the null-pointer-constant [AUTOSAR-M4_10_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M4-10-2 Literal zero (0) shall not be used as the null-pointer-constant" ] } }, { "id": "AUTOSAR-A15_5_3-d", "name": "There should be at least one exception handler to catch all otherwise unhandled exceptions", "shortDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions" }, "fullDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [AUTOSAR-A15_5_3-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [AUTOSAR-A15_5_3-d]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-5-3 The std::terminate() function shall not be called implicitly" ] } }, { "id": "AUTOSAR-A3_9_1-b", "name": "Fixed width integer types from <cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types", "shortDescription": { "text": "Fixed width integer types from <cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" }, "fullDescription": { "text": "Fixed width integer types from <cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types [AUTOSAR-A3_9_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Fixed width integer types from <cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types [AUTOSAR-A3_9_1-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A3-9-1 Fixed width integer types from <cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" ] } }, { "id": "AUTOSAR-M8_0_1-a", "name": "Each variable should be declared in a separate declaration statement", "shortDescription": { "text": "Each variable should be declared in a separate declaration statement" }, "fullDescription": { "text": "Each variable should be declared in a separate declaration statement [AUTOSAR-M8_0_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Each variable should be declared in a separate declaration statement [AUTOSAR-M8_0_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" ] } }, { "id": "AUTOSAR-M0_3_2-a", "name": "If a function returns error information, then that error information shall be tested", "shortDescription": { "text": "If a function returns error information, then that error information shall be tested" }, "fullDescription": { "text": "If a function returns error information, then that error information shall be tested [AUTOSAR-M0_3_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If a function returns error information, then that error information shall be tested [AUTOSAR-M0_3_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested" ] } }, { "id": "AUTOSAR-M0_3_1-e", "name": "Avoid division by zero", "shortDescription": { "text": "Avoid division by zero" }, "fullDescription": { "text": "Avoid division by zero [AUTOSAR-M0_3_1-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid division by zero [AUTOSAR-M0_3_1-e]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-3-1 Minimization of run-time failures shall be ensured by the use of at least one of: (a) static analysis tools\/techniques; (b) dynamic analysis tools\/techniques; (c) explicit coding of checks to handle run-time faults" ] } }, { "id": "AUTOSAR-M0_3_1-f", "name": "Avoid null pointer dereferencing", "shortDescription": { "text": "Avoid null pointer dereferencing" }, "fullDescription": { "text": "Avoid null pointer dereferencing [AUTOSAR-M0_3_1-f]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid null pointer dereferencing [AUTOSAR-M0_3_1-f]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-3-1 Minimization of run-time failures shall be ensured by the use of at least one of: (a) static analysis tools\/techniques; (b) dynamic analysis tools\/techniques; (c) explicit coding of checks to handle run-time faults" ] } }, { "id": "AUTOSAR-A15_4_4-a", "name": "Declare functions 'noexcept' if they will not emit exceptions", "shortDescription": { "text": "Declare functions 'noexcept' if they will not emit exceptions" }, "fullDescription": { "text": "Declare functions 'noexcept' if they will not emit exceptions [AUTOSAR-A15_4_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Declare functions 'noexcept' if they will not emit exceptions [AUTOSAR-A15_4_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-4-4 A declaration of non-throwing function shall contain noexcept specification" ] } }, { "id": "AUTOSAR-A5_1_1-a", "name": "Avoid magic numbers", "shortDescription": { "text": "Avoid magic numbers" }, "fullDescription": { "text": "Avoid magic numbers [AUTOSAR-A5_1_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid magic numbers [AUTOSAR-A5_1_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A5-1-1 Literal values shall not be used apart from type initialization, otherwise symbolic names shall be used instead" ] } }, { "id": "AUTOSAR-A4_10_1-b", "name": "Prefer 'nullptr' over 'NULL' or '0'(zero)", "shortDescription": { "text": "Prefer 'nullptr' over 'NULL' or '0'(zero)" }, "fullDescription": { "text": "Prefer 'nullptr' over 'NULL' or '0'(zero) [AUTOSAR-A4_10_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Prefer 'nullptr' over 'NULL' or '0'(zero) [AUTOSAR-A4_10_1-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant" ] } }, { "id": "AUTOSAR-A15_3_3-a", "name": "There should be at least one exception handler to catch all otherwise unhandled exceptions", "shortDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions" }, "fullDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [AUTOSAR-A15_3_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [AUTOSAR-A15_3_3-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A15-3-3 Main function and a task main function shall catch at least: base class exceptions from all third-party libraries used, std::exception and all otherwise unhandled exceptions" ] } }, { "id": "AUTOSAR-A8_4_7-a", "name": "A parameter of const reference to a 'cheap to copy' type should be passed by value", "shortDescription": { "text": "A parameter of const reference to a 'cheap to copy' type should be passed by value" }, "fullDescription": { "text": "A parameter of const reference to a 'cheap to copy' type should be passed by value [AUTOSAR-A8_4_7-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A parameter of const reference to a 'cheap to copy' type should be passed by value [AUTOSAR-A8_4_7-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A8-4-7 \"in\" parameters for \"cheap to copy\" types shall be passed by value" ] } }, { "id": "AUTOSAR-A3_3_1-a", "name": "Objects or functions with external linkage shall be declared in a header file", "shortDescription": { "text": "Objects or functions with external linkage shall be declared in a header file" }, "fullDescription": { "text": "Objects or functions with external linkage shall be declared in a header file [AUTOSAR-A3_3_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Objects or functions with external linkage shall be declared in a header file [AUTOSAR-A3_3_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file" ] } }, { "id": "AUTOSAR-A0_1_2-a", "name": "The value returned by a function having a non-void return type that is not an overloaded operator shall always be used", "shortDescription": { "text": "The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" }, "fullDescription": { "text": "The value returned by a function having a non-void return type that is not an overloaded operator shall always be used [AUTOSAR-A0_1_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value returned by a function having a non-void return type that is not an overloaded operator shall always be used [AUTOSAR-A0_1_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used" ] } }, { "id": "AUTOSAR-M0_1_4-a", "name": "A project shall not contain non-volatile POD variables having only one use", "shortDescription": { "text": "A project shall not contain non-volatile POD variables having only one use" }, "fullDescription": { "text": "A project shall not contain non-volatile POD variables having only one use [AUTOSAR-M0_1_4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain non-volatile POD variables having only one use [AUTOSAR-M0_1_4-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-4 A project shall not contain non-volatile POD variables having only one use" ] } }, { "id": "AUTOSAR-M5_0_5-a", "name": "There shall be no implicit conversions from integral to floating type", "shortDescription": { "text": "There shall be no implicit conversions from integral to floating type" }, "fullDescription": { "text": "There shall be no implicit conversions from integral to floating type [AUTOSAR-M5_0_5-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no implicit conversions from integral to floating type [AUTOSAR-M5_0_5-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M5-0-5 There shall be no implicit floating-integral conversions" ] } }, { "id": "AUTOSAR-A27_0_4-b", "name": "Avoid using unsafe string functions that do not check bounds", "shortDescription": { "text": "Avoid using unsafe string functions that do not check bounds" }, "fullDescription": { "text": "Avoid using unsafe string functions that do not check bounds [AUTOSAR-A27_0_4-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using unsafe string functions that do not check bounds [AUTOSAR-A27_0_4-b]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A27-0-4 C-style strings shall not be used" ] } }, { "id": "AUTOSAR-A27_0_4-d", "name": "C-style strings shall not be used", "shortDescription": { "text": "C-style strings shall not be used" }, "fullDescription": { "text": "C-style strings shall not be used [AUTOSAR-A27_0_4-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "C-style strings shall not be used [AUTOSAR-A27_0_4-d]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A27-0-4 C-style strings shall not be used" ] } }, { "id": "AUTOSAR-M0_1_3-c", "name": "Avoid unused private member variables", "shortDescription": { "text": "Avoid unused private member variables" }, "fullDescription": { "text": "Avoid unused private member variables [AUTOSAR-M0_1_3-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid unused private member variables [AUTOSAR-M0_1_3-c]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR M0-1-3 A project shall not contain unused variables" ] } }, { "id": "AUTOSAR-A18_5_2-a", "name": "Dynamic heap memory allocation shall not be used", "shortDescription": { "text": "Dynamic heap memory allocation shall not be used" }, "fullDescription": { "text": "Dynamic heap memory allocation shall not be used [AUTOSAR-A18_5_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Dynamic heap memory allocation shall not be used [AUTOSAR-A18_5_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A18-5-2 Non-placement new or delete expressions shall not be used" ] } }, { "id": "AUTOSAR-A0_1_6-a", "name": "A project shall not contain unused type declarations", "shortDescription": { "text": "A project shall not contain unused type declarations" }, "fullDescription": { "text": "A project shall not contain unused type declarations [AUTOSAR-A0_1_6-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A project shall not contain unused type declarations [AUTOSAR-A0_1_6-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A0-1-6 There should be no unused type declarations" ] } }, { "id": "AUTOSAR-A10_3_1-a", "name": "Only one of virtual, override or final should be specified in a member function declaration", "shortDescription": { "text": "Only one of virtual, override or final should be specified in a member function declaration" }, "fullDescription": { "text": "Only one of virtual, override or final should be specified in a member function declaration [AUTOSAR-A10_3_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Only one of virtual, override or final should be specified in a member function declaration [AUTOSAR-A10_3_1-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A10-3-1 Virtual function declaration shall contain exactly one of the three specifiers:" ] } }, { "id": "AUTOSAR-A10_3_2-a", "name": "Each overriding virtual function shall be declared with the override or final specifier", "shortDescription": { "text": "Each overriding virtual function shall be declared with the override or final specifier" }, "fullDescription": { "text": "Each overriding virtual function shall be declared with the override or final specifier [AUTOSAR-A10_3_2-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Each overriding virtual function shall be declared with the override or final specifier [AUTOSAR-A10_3_2-a]" }, "properties": { "tags": [ "AUTOSAR C++14 Coding Guidelines", "AUTOSAR A10-3-2 Each overriding virtual function shall be declared with the override or final specifier" ] } }, { "id": "BD-PB-NP", "name": "Avoid null pointer dereferencing", "shortDescription": { "text": "Avoid null pointer dereferencing" }, "fullDescription": { "text": "Avoid null pointer dereferencing [BD-PB-NP]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid null pointer dereferencing [BD-PB-NP]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-ZERO", "name": "Avoid division by zero", "shortDescription": { "text": "Avoid division by zero" }, "fullDescription": { "text": "Avoid division by zero [BD-PB-ZERO]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid division by zero [BD-PB-ZERO]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-REFPARAM", "name": "A parameter shall be passed by reference if it can't be NULL", "shortDescription": { "text": "A parameter shall be passed by reference if it can't be NULL" }, "fullDescription": { "text": "A parameter shall be passed by reference if it can't be NULL [BD-PB-REFPARAM]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A parameter shall be passed by reference if it can't be NULL [BD-PB-REFPARAM]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-RES-LEAKS", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [BD-RES-LEAKS]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure resources are freed [BD-RES-LEAKS]" }, "properties": { "tags": [ "Flow Analysis", "Resources" ] } }, { "id": "BD-SECURITY-TDLOOP", "name": "Validate potentially tainted data before it is used in the controlling expression of a loop", "shortDescription": { "text": "Validate potentially tainted data before it is used in the controlling expression of a loop" }, "fullDescription": { "text": "Validate potentially tainted data before it is used in the controlling expression of a loop [BD-SECURITY-TDLOOP]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Validate potentially tainted data before it is used in the controlling expression of a loop [BD-SECURITY-TDLOOP]" }, "properties": { "tags": [ "Flow Analysis", "Security" ], "security-severity": "9.5" } }, { "id": "BD-SECURITY-TDALLOC", "name": "Validate potentially tainted data before it is used to determine the size of memory allocation", "shortDescription": { "text": "Validate potentially tainted data before it is used to determine the size of memory allocation" }, "fullDescription": { "text": "Validate potentially tainted data before it is used to determine the size of memory allocation [BD-SECURITY-TDALLOC]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Validate potentially tainted data before it is used to determine the size of memory allocation [BD-SECURITY-TDALLOC]" }, "properties": { "tags": [ "Flow Analysis", "Security" ], "security-severity": "8" } }, { "id": "CERT_C-FLP03-a", "name": "Avoid division by zero", "shortDescription": { "text": "Avoid division by zero" }, "fullDescription": { "text": "Avoid division by zero [CERT_C-FLP03-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid division by zero [CERT_C-FLP03-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FLP03_C (REC) Detect and handle floating-point errors" ] } }, { "id": "CERT_C-MSC19-b", "name": "Avoid null pointer dereferencing", "shortDescription": { "text": "Avoid null pointer dereferencing" }, "fullDescription": { "text": "Avoid null pointer dereferencing [CERT_C-MSC19-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid null pointer dereferencing [CERT_C-MSC19-b]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC19_C (REC) For functions that return an array, prefer returning an empty array over a null value" ] } }, { "id": "CERT_C-INT04-a", "name": "Avoid potential integer overflow\/underflow on tainted data", "shortDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data" }, "fullDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data [CERT_C-INT04-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid potential integer overflow\/underflow on tainted data [CERT_C-INT04-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT04_C (REC) Enforce limits on integer values originating from tainted sources" ] } }, { "id": "CERT_C-INT05-a", "name": "Avoid using unsafe string functions that do not check bounds", "shortDescription": { "text": "Avoid using unsafe string functions that do not check bounds" }, "fullDescription": { "text": "Avoid using unsafe string functions that do not check bounds [CERT_C-INT05-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid using unsafe string functions that do not check bounds [CERT_C-INT05-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT05_C (REC) Do not use input functions to convert character data if they cannot handle all possible inputs" ] } }, { "id": "CERT_C-MSC24-a", "name": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used", "shortDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" }, "fullDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [CERT_C-MSC24-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [CERT_C-MSC24-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC24_C (REC) Do not use deprecated or obsolescent functions" ] } }, { "id": "CERT_C-MEM00-a", "name": "Do not allocate memory and expect that someone else will deallocate it later", "shortDescription": { "text": "Do not allocate memory and expect that someone else will deallocate it later" }, "fullDescription": { "text": "Do not allocate memory and expect that someone else will deallocate it later [CERT_C-MEM00-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not allocate memory and expect that someone else will deallocate it later [CERT_C-MEM00-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM00_C (REC) Allocate and free memory in the same module, at the same level of abstraction" ] } }, { "id": "CERT_C-MEM00-e", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [CERT_C-MEM00-e]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure resources are freed [CERT_C-MEM00-e]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM00_C (REC) Allocate and free memory in the same module, at the same level of abstraction" ] } }, { "id": "CERT_C-INT33-a", "name": "Avoid division by zero", "shortDescription": { "text": "Avoid division by zero" }, "fullDescription": { "text": "Avoid division by zero [CERT_C-INT33-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid division by zero [CERT_C-INT33-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-INT33_C (RULE) Ensure that division and remainder operations do not result in divide-by-zero errors" ] } }, { "id": "CERT_C-MEM12-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [CERT_C-MEM12-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Ensure resources are freed [CERT_C-MEM12-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM12_C (REC) Consider using a goto chain when leaving a function on error when using and releasing resources" ] } }, { "id": "CERT_C-FIO42-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [CERT_C-FIO42-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Ensure resources are freed [CERT_C-FIO42-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO42_C (RULE) Close files when they are no longer needed" ] } }, { "id": "CERT_C-MSC41-a", "name": "Do not hard code string literals", "shortDescription": { "text": "Do not hard code string literals" }, "fullDescription": { "text": "Do not hard code string literals [CERT_C-MSC41-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not hard code string literals [CERT_C-MSC41-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MSC41_C (RULE) Never hard code sensitive information" ] } }, { "id": "CERT_C-MEM31-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [CERT_C-MEM31-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure resources are freed [CERT_C-MEM31-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-MEM31_C (RULE) Free dynamically allocated memory when no longer needed" ] } }, { "id": "CERT_C-API00-a", "name": "The validity of parameters must be checked inside each function", "shortDescription": { "text": "The validity of parameters must be checked inside each function" }, "fullDescription": { "text": "The validity of parameters must be checked inside each function [CERT_C-API00-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The validity of parameters must be checked inside each function [CERT_C-API00-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-API00_C (REC) Functions should validate their parameters" ] } }, { "id": "CERT_C-FIO22-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [CERT_C-FIO22-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Ensure resources are freed [CERT_C-FIO22-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-FIO22_C (REC) Close files before spawning processes" ] } }, { "id": "CERT_C-EXP34-a", "name": "Avoid null pointer dereferencing", "shortDescription": { "text": "Avoid null pointer dereferencing" }, "fullDescription": { "text": "Avoid null pointer dereferencing [CERT_C-EXP34-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid null pointer dereferencing [CERT_C-EXP34-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP34_C (RULE) Do not dereference null pointers" ] } }, { "id": "CERT_C-CON30-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [CERT_C-CON30-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Ensure resources are freed [CERT_C-CON30-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-CON30_C (RULE) Clean up thread-specific storage" ] } }, { "id": "CERT_C-EXP39-a", "name": "There shall be no implicit conversions from integral to floating type", "shortDescription": { "text": "There shall be no implicit conversions from integral to floating type" }, "fullDescription": { "text": "There shall be no implicit conversions from integral to floating type [CERT_C-EXP39-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no implicit conversions from integral to floating type [CERT_C-EXP39-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP39_C (RULE) Do not access a variable through a pointer of an incompatible type" ] } }, { "id": "CERT_C-DCL15-a", "name": "Objects or functions with external linkage shall be declared in a header file", "shortDescription": { "text": "Objects or functions with external linkage shall be declared in a header file" }, "fullDescription": { "text": "Objects or functions with external linkage shall be declared in a header file [CERT_C-DCL15-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Objects or functions with external linkage shall be declared in a header file [CERT_C-DCL15-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL15_C (REC) Declare file-scope objects or functions that do not need external linkage as static" ] } }, { "id": "CERT_C-DCL13-a", "name": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object", "shortDescription": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" }, "fullDescription": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object [CERT_C-DCL13-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object [CERT_C-DCL13-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL13_C (REC) Declare function parameters that are pointers to values not changed by the function as const" ] } }, { "id": "CERT_C-EXP12-a", "name": "The value returned by a function having non-void return type shall be used", "shortDescription": { "text": "The value returned by a function having non-void return type shall be used" }, "fullDescription": { "text": "The value returned by a function having non-void return type shall be used [CERT_C-EXP12-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The value returned by a function having non-void return type shall be used [CERT_C-EXP12-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-EXP12_C (REC) Do not ignore values returned by functions" ] } }, { "id": "CERT_C-STR07-a", "name": "Avoid using unsafe string functions that do not check bounds", "shortDescription": { "text": "Avoid using unsafe string functions that do not check bounds" }, "fullDescription": { "text": "Avoid using unsafe string functions that do not check bounds [CERT_C-STR07-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using unsafe string functions that do not check bounds [CERT_C-STR07-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-STR07_C (REC) Use the bounds-checking interfaces for string manipulation" ] } }, { "id": "CERT_C-POS54-a", "name": "The value returned by a POSIX library function that may return an error should be used", "shortDescription": { "text": "The value returned by a POSIX library function that may return an error should be used" }, "fullDescription": { "text": "The value returned by a POSIX library function that may return an error should be used [CERT_C-POS54-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value returned by a POSIX library function that may return an error should be used [CERT_C-POS54-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-POS54_C (RULE) Detect and handle POSIX library errors" ] } }, { "id": "CERT_C-ERR33-a", "name": "The value returned by a standard library function that may return an error should be used", "shortDescription": { "text": "The value returned by a standard library function that may return an error should be used" }, "fullDescription": { "text": "The value returned by a standard library function that may return an error should be used [CERT_C-ERR33-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value returned by a standard library function that may return an error should be used [CERT_C-ERR33-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ERR33_C (RULE) Detect and handle standard library errors" ] } }, { "id": "CERT_C-ERR33-d", "name": "Always check the returned value of non-void function", "shortDescription": { "text": "Always check the returned value of non-void function" }, "fullDescription": { "text": "Always check the returned value of non-void function [CERT_C-ERR33-d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Always check the returned value of non-void function [CERT_C-ERR33-d]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ERR33_C (RULE) Detect and handle standard library errors" ] } }, { "id": "CERT_C-ERR34-a", "name": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used", "shortDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" }, "fullDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [CERT_C-ERR34-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [CERT_C-ERR34-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ERR34_C (RULE) Detect errors when converting a string to a number" ] } }, { "id": "CERT_C-ERR07-a", "name": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used", "shortDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" }, "fullDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [CERT_C-ERR07-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [CERT_C-ERR07-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ERR07_C (REC) Prefer functions that support error checking over equivalent functions that don't" ] } }, { "id": "CERT_C-DCL00-a", "name": "Declare local variable as const whenever possible", "shortDescription": { "text": "Declare local variable as const whenever possible" }, "fullDescription": { "text": "Declare local variable as const whenever possible [CERT_C-DCL00-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare local variable as const whenever possible [CERT_C-DCL00-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL00_C (REC) Const-qualify immutable objects" ] } }, { "id": "CERT_C-DCL04-a", "name": "Each variable should be declared in a separate declaration statement", "shortDescription": { "text": "Each variable should be declared in a separate declaration statement" }, "fullDescription": { "text": "Each variable should be declared in a separate declaration statement [CERT_C-DCL04-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each variable should be declared in a separate declaration statement [CERT_C-DCL04-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-DCL04_C (REC) Do not declare more than one variable per declaration" ] } }, { "id": "CERT_C-WIN30-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [CERT_C-WIN30-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure resources are freed [CERT_C-WIN30-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-WIN30_C (RULE) Properly pair allocation and deallocation functions" ] } }, { "id": "CERT_C-ERR02-a", "name": "The input\/output functions from the 'cstdio' and 'cwchar' libraries should not be used", "shortDescription": { "text": "The input\/output functions from the 'cstdio' and 'cwchar' libraries should not be used" }, "fullDescription": { "text": "The input\/output functions from the 'cstdio' and 'cwchar' libraries should not be used [CERT_C-ERR02-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The input\/output functions from the 'cstdio' and 'cwchar' libraries should not be used [CERT_C-ERR02-a]" }, "properties": { "tags": [ "SEI CERT C", "CERT-ERR02_C (REC) Avoid in-band error indicators" ] } }, { "id": "CERT_CPP-ERR50-d", "name": "There should be at least one exception handler to catch all otherwise unhandled exceptions", "shortDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions" }, "fullDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [CERT_CPP-ERR50-d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [CERT_CPP-ERR50-d]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR50_CPP (RULE) Do not abruptly terminate the program" ] } }, { "id": "CERT_CPP-MEM52-a", "name": "Check the return value of new", "shortDescription": { "text": "Check the return value of new" }, "fullDescription": { "text": "Check the return value of new [CERT_CPP-MEM52-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Check the return value of new [CERT_CPP-MEM52-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-MEM52_CPP (RULE) Detect and handle memory allocation errors" ] } }, { "id": "CERT_CPP-ERR57-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [CERT_CPP-ERR57-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Ensure resources are freed [CERT_CPP-ERR57-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR57_CPP (RULE) Do not leak resources when handling exceptions" ] } }, { "id": "CERT_CPP-STR51-a", "name": "Avoid null pointer dereferencing", "shortDescription": { "text": "Avoid null pointer dereferencing" }, "fullDescription": { "text": "Avoid null pointer dereferencing [CERT_CPP-STR51-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid null pointer dereferencing [CERT_CPP-STR51-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-STR51_CPP (RULE) Do not attempt to create a std::string from a null pointer" ] } }, { "id": "CERT_CPP-OOP52-a", "name": "Define a virtual destructor in classes used as base classes which have virtual functions", "shortDescription": { "text": "Define a virtual destructor in classes used as base classes which have virtual functions" }, "fullDescription": { "text": "Define a virtual destructor in classes used as base classes which have virtual functions [CERT_CPP-OOP52-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Define a virtual destructor in classes used as base classes which have virtual functions [CERT_CPP-OOP52-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-OOP52_CPP (RULE) Do not delete a polymorphic object without a virtual destructor" ] } }, { "id": "CERT_CPP-FIO51-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [CERT_CPP-FIO51-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Ensure resources are freed [CERT_CPP-FIO51-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-FIO51_CPP (RULE) Close files when they are no longer needed" ] } }, { "id": "CERT_CPP-EXP56-a", "name": "Do not call a function with a mismatched language linkage", "shortDescription": { "text": "Do not call a function with a mismatched language linkage" }, "fullDescription": { "text": "Do not call a function with a mismatched language linkage [CERT_CPP-EXP56-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not call a function with a mismatched language linkage [CERT_CPP-EXP56-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-EXP56_CPP (RULE) Do not call a function with a mismatched language linkage" ] } }, { "id": "CERT_CPP-ERR62-a", "name": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used", "shortDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" }, "fullDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [CERT_CPP-ERR62-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [CERT_CPP-ERR62-a]" }, "properties": { "tags": [ "SEI CERT C++", "CERT-ERR62_CPP (RULE) Detect errors when converting a string to a number" ] } }, { "id": "CODSTA-142", "name": "Global functions shall not declare parameters with array type", "shortDescription": { "text": "Global functions shall not declare parameters with array type" }, "fullDescription": { "text": "Global functions shall not declare parameters with array type [CODSTA-142]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Global functions shall not declare parameters with array type [CODSTA-142]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-110", "name": "The input\/output functions from the 'cstdio' and 'cwchar' libraries should not be used", "shortDescription": { "text": "The input\/output functions from the 'cstdio' and 'cwchar' libraries should not be used" }, "fullDescription": { "text": "The input\/output functions from the 'cstdio' and 'cwchar' libraries should not be used [CODSTA-110]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The input\/output functions from the 'cstdio' and 'cwchar' libraries should not be used [CODSTA-110]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-122_a", "name": "The value returned by a function having non-void return type shall be used", "shortDescription": { "text": "The value returned by a function having non-void return type shall be used" }, "fullDescription": { "text": "The value returned by a function having non-void return type shall be used [CODSTA-122_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The value returned by a function having non-void return type shall be used [CODSTA-122_a]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-131", "name": "Use NULL instead of literal zero (0) as the null-pointer-constant", "shortDescription": { "text": "Use NULL instead of literal zero (0) as the null-pointer-constant" }, "fullDescription": { "text": "Use NULL instead of literal zero (0) as the null-pointer-constant [CODSTA-131]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use NULL instead of literal zero (0) as the null-pointer-constant [CODSTA-131]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-223", "name": "Fixed width integer types from <cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types", "shortDescription": { "text": "Fixed width integer types from <cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" }, "fullDescription": { "text": "Fixed width integer types from <cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types [CODSTA-223]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Fixed width integer types from <cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types [CODSTA-223]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-23", "name": "All 'if' statements should have an 'else' clause", "shortDescription": { "text": "All 'if' statements should have an 'else' clause" }, "fullDescription": { "text": "All 'if' statements should have an 'else' clause [CODSTA-23]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All 'if' statements should have an 'else' clause [CODSTA-23]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-26", "name": "Avoid magic numbers", "shortDescription": { "text": "Avoid magic numbers" }, "fullDescription": { "text": "Avoid magic numbers [CODSTA-26]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid magic numbers [CODSTA-26]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-27", "name": "Avoid functions that modify global variables", "shortDescription": { "text": "Avoid functions that modify global variables" }, "fullDescription": { "text": "Avoid functions that modify global variables [CODSTA-27]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid functions that modify global variables [CODSTA-27]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-83", "name": "All loops must have a fixed upper or lower bound", "shortDescription": { "text": "All loops must have a fixed upper or lower bound" }, "fullDescription": { "text": "All loops must have a fixed upper or lower bound [CODSTA-83]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All loops must have a fixed upper or lower bound [CODSTA-83]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-86", "name": "The validity of parameters must be checked inside each function", "shortDescription": { "text": "The validity of parameters must be checked inside each function" }, "fullDescription": { "text": "The validity of parameters must be checked inside each function [CODSTA-86]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The validity of parameters must be checked inside each function [CODSTA-86]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-94", "name": "Do not declare pointer or array type", "shortDescription": { "text": "Do not declare pointer or array type" }, "fullDescription": { "text": "Do not declare pointer or array type [CODSTA-94]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not declare pointer or array type [CODSTA-94]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-95", "name": "Do not declare pointer type", "shortDescription": { "text": "Do not declare pointer type" }, "fullDescription": { "text": "Do not declare pointer type [CODSTA-95]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not declare pointer type [CODSTA-95]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-203", "name": "Do not hard code string literals", "shortDescription": { "text": "Do not hard code string literals" }, "fullDescription": { "text": "Do not hard code string literals [CODSTA-203]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Do not hard code string literals [CODSTA-203]" }, "properties": { "tags": [ "Coding Conventions" ] } }, { "id": "CODSTA-CPP-04", "name": "Constructors allowing for conversion should be made explicit", "shortDescription": { "text": "Constructors allowing for conversion should be made explicit" }, "fullDescription": { "text": "Constructors allowing for conversion should be made explicit [CODSTA-CPP-04]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Constructors allowing for conversion should be made explicit [CODSTA-CPP-04]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-19", "name": "Declare at least one constructor to prevent the compiler from doing so", "shortDescription": { "text": "Declare at least one constructor to prevent the compiler from doing so" }, "fullDescription": { "text": "Declare at least one constructor to prevent the compiler from doing so [CODSTA-CPP-19]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Declare at least one constructor to prevent the compiler from doing so [CODSTA-CPP-19]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-06", "name": "Avoid returning handles to class data from member functions", "shortDescription": { "text": "Avoid returning handles to class data from member functions" }, "fullDescription": { "text": "Avoid returning handles to class data from member functions [CODSTA-CPP-06]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid returning handles to class data from member functions [CODSTA-CPP-06]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-12", "name": "Put classes that are used as base classes and classes that are used as member variables into separate include files", "shortDescription": { "text": "Put classes that are used as base classes and classes that are used as member variables into separate include files" }, "fullDescription": { "text": "Put classes that are used as base classes and classes that are used as member variables into separate include files [CODSTA-CPP-12]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Put classes that are used as base classes and classes that are used as member variables into separate include files [CODSTA-CPP-12]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-15", "name": "Put functions that are used in the body of inline member function into separate include file", "shortDescription": { "text": "Put functions that are used in the body of inline member function into separate include file" }, "fullDescription": { "text": "Put functions that are used in the body of inline member function into separate include file [CODSTA-CPP-15]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Put functions that are used in the body of inline member function into separate include file [CODSTA-CPP-15]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-25", "name": "Consider making virtual functions nonpublic, and public functions nonvirtual", "shortDescription": { "text": "Consider making virtual functions nonpublic, and public functions nonvirtual" }, "fullDescription": { "text": "Consider making virtual functions nonpublic, and public functions nonvirtual [CODSTA-CPP-25]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Consider making virtual functions nonpublic, and public functions nonvirtual [CODSTA-CPP-25]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-36", "name": "The global namespace shall only contain main() and namespace declarations", "shortDescription": { "text": "The global namespace shall only contain main() and namespace declarations" }, "fullDescription": { "text": "The global namespace shall only contain main() and namespace declarations [CODSTA-CPP-36]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The global namespace shall only contain main() and namespace declarations [CODSTA-CPP-36]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-46", "name": "Order of scopes in class: public before all others", "shortDescription": { "text": "Order of scopes in class: public before all others" }, "fullDescription": { "text": "Order of scopes in class: public before all others [CODSTA-CPP-46]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Order of scopes in class: public before all others [CODSTA-CPP-46]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-47", "name": "Order of scopes in classes: protected before private", "shortDescription": { "text": "Order of scopes in classes: protected before private" }, "fullDescription": { "text": "Order of scopes in classes: protected before private [CODSTA-CPP-47]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Order of scopes in classes: protected before private [CODSTA-CPP-47]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-53", "name": "Declare local variable as const whenever possible", "shortDescription": { "text": "Declare local variable as const whenever possible" }, "fullDescription": { "text": "Declare local variable as const whenever possible [CODSTA-CPP-53]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare local variable as const whenever possible [CODSTA-CPP-53]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-54", "name": "Member functions shall be declared const whenever possible", "shortDescription": { "text": "Member functions shall be declared const whenever possible" }, "fullDescription": { "text": "Member functions shall be declared const whenever possible [CODSTA-CPP-54]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Member functions shall be declared const whenever possible [CODSTA-CPP-54]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-58", "name": "The value returned by a function having a non-void return type that is not an overloaded operator shall always be used", "shortDescription": { "text": "The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" }, "fullDescription": { "text": "The value returned by a function having a non-void return type that is not an overloaded operator shall always be used [CODSTA-CPP-58]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The value returned by a function having a non-void return type that is not an overloaded operator shall always be used [CODSTA-CPP-58]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-59", "name": "The C library shall not be used", "shortDescription": { "text": "The C library shall not be used" }, "fullDescription": { "text": "The C library shall not be used [CODSTA-CPP-59]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The C library shall not be used [CODSTA-CPP-59]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-63", "name": "Literal zero (0) shall not be used as the null-pointer-constant", "shortDescription": { "text": "Literal zero (0) shall not be used as the null-pointer-constant" }, "fullDescription": { "text": "Literal zero (0) shall not be used as the null-pointer-constant [CODSTA-CPP-63]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Literal zero (0) shall not be used as the null-pointer-constant [CODSTA-CPP-63]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-78", "name": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const", "shortDescription": { "text": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" }, "fullDescription": { "text": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const [CODSTA-CPP-78]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const [CODSTA-CPP-78]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-96", "name": "Do not call a function with a mismatched language linkage", "shortDescription": { "text": "Do not call a function with a mismatched language linkage" }, "fullDescription": { "text": "Do not call a function with a mismatched language linkage [CODSTA-CPP-96]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not call a function with a mismatched language linkage [CODSTA-CPP-96]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-01", "name": "Prefer iostream.h to stdio.h", "shortDescription": { "text": "Prefer iostream.h to stdio.h" }, "fullDescription": { "text": "Prefer iostream.h to stdio.h [CODSTA-CPP-01]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Prefer iostream.h to stdio.h [CODSTA-CPP-01]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-CPP-23", "name": "Whenever a global function  is  referenced, use the :: operator", "shortDescription": { "text": "Whenever a global function  is  referenced, use the :: operator" }, "fullDescription": { "text": "Whenever a global function  is  referenced, use the :: operator [CODSTA-CPP-23]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Whenever a global function  is  referenced, use the :: operator [CODSTA-CPP-23]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for C++" ] } }, { "id": "CODSTA-MCPP-08_a", "name": "Prefer 'auto' to explicit type names in variable declarations", "shortDescription": { "text": "Prefer 'auto' to explicit type names in variable declarations" }, "fullDescription": { "text": "Prefer 'auto' to explicit type names in variable declarations [CODSTA-MCPP-08_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Prefer 'auto' to explicit type names in variable declarations [CODSTA-MCPP-08_a]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-08_b", "name": "Prefer 'auto' to explicit type names for function return types", "shortDescription": { "text": "Prefer 'auto' to explicit type names for function return types" }, "fullDescription": { "text": "Prefer 'auto' to explicit type names for function return types [CODSTA-MCPP-08_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Prefer 'auto' to explicit type names for function return types [CODSTA-MCPP-08_b]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-05", "name": "Each overriding virtual function shall be declared with the override or final specifier", "shortDescription": { "text": "Each overriding virtual function shall be declared with the override or final specifier" }, "fullDescription": { "text": "Each overriding virtual function shall be declared with the override or final specifier [CODSTA-MCPP-05]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each overriding virtual function shall be declared with the override or final specifier [CODSTA-MCPP-05]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-09", "name": "Declare functions 'noexcept' if they will not emit exceptions", "shortDescription": { "text": "Declare functions 'noexcept' if they will not emit exceptions" }, "fullDescription": { "text": "Declare functions 'noexcept' if they will not emit exceptions [CODSTA-MCPP-09]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare functions 'noexcept' if they will not emit exceptions [CODSTA-MCPP-09]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-23", "name": "If a public destructor of a class is non-virtual, then the class should be declared final", "shortDescription": { "text": "If a public destructor of a class is non-virtual, then the class should be declared final" }, "fullDescription": { "text": "If a public destructor of a class is non-virtual, then the class should be declared final [CODSTA-MCPP-23]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If a public destructor of a class is non-virtual, then the class should be declared final [CODSTA-MCPP-23]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-24", "name": "Only one of virtual, override or final should be specified in a member function declaration", "shortDescription": { "text": "Only one of virtual, override or final should be specified in a member function declaration" }, "fullDescription": { "text": "Only one of virtual, override or final should be specified in a member function declaration [CODSTA-MCPP-24]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Only one of virtual, override or final should be specified in a member function declaration [CODSTA-MCPP-24]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-38", "name": "Braced-initialization {}, without equals sign, shall be used for variable initialization", "shortDescription": { "text": "Braced-initialization {}, without equals sign, shall be used for variable initialization" }, "fullDescription": { "text": "Braced-initialization {}, without equals sign, shall be used for variable initialization [CODSTA-MCPP-38]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Braced-initialization {}, without equals sign, shall be used for variable initialization [CODSTA-MCPP-38]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "CODSTA-MCPP-04", "name": "Prefer 'nullptr' over 'NULL' or '0'(zero)", "shortDescription": { "text": "Prefer 'nullptr' over 'NULL' or '0'(zero)" }, "fullDescription": { "text": "Prefer 'nullptr' over 'NULL' or '0'(zero) [CODSTA-MCPP-04]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer 'nullptr' over 'NULL' or '0'(zero) [CODSTA-MCPP-04]" }, "properties": { "tags": [ "Coding Conventions", "Coding Conventions for Modern C++" ] } }, { "id": "COMMENT-01", "name": "Prefer C++ style comment", "shortDescription": { "text": "Prefer C++ style comment" }, "fullDescription": { "text": "Prefer C++ style comment [COMMENT-01]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer C++ style comment [COMMENT-01]" }, "properties": { "tags": [ "Comments" ] } }, { "id": "COMMENT-02", "name": "Provide copyright information", "shortDescription": { "text": "Provide copyright information" }, "fullDescription": { "text": "Provide copyright information [COMMENT-02]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Provide copyright information [COMMENT-02]" }, "properties": { "tags": [ "Comments" ] } }, { "id": "COMMENT-03", "name": "Every source file will be documented with an introductory comment that provides information on the file", "shortDescription": { "text": "Every source file will be documented with an introductory comment that provides information on the file" }, "fullDescription": { "text": "Every source file will be documented with an introductory comment that provides information on the file [COMMENT-03]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Every source file will be documented with an introductory comment that provides information on the file [COMMENT-03]" }, "properties": { "tags": [ "Comments" ] } }, { "id": "COMMENT-04", "name": "Document functions in comments that precede function definitions", "shortDescription": { "text": "Document functions in comments that precede function definitions" }, "fullDescription": { "text": "Document functions in comments that precede function definitions [COMMENT-04]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Document functions in comments that precede function definitions [COMMENT-04]" }, "properties": { "tags": [ "Comments" ] } }, { "id": "COMMENT-04_b", "name": "Document functions in comments that precede function declarations", "shortDescription": { "text": "Document functions in comments that precede function declarations" }, "fullDescription": { "text": "Document functions in comments that precede function declarations [COMMENT-04_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Document functions in comments that precede function declarations [COMMENT-04_b]" }, "properties": { "tags": [ "Comments" ] } }, { "id": "COMMENT-05", "name": "Each variable declaration should be commented", "shortDescription": { "text": "Each variable declaration should be commented" }, "fullDescription": { "text": "Each variable declaration should be commented [COMMENT-05]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each variable declaration should be commented [COMMENT-05]" }, "properties": { "tags": [ "Comments" ] } }, { "id": "COMMENT-10", "name": "Use of floating-point arithmetic shall be documented", "shortDescription": { "text": "Use of floating-point arithmetic shall be documented" }, "fullDescription": { "text": "Use of floating-point arithmetic shall be documented [COMMENT-10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use of floating-point arithmetic shall be documented [COMMENT-10]" }, "properties": { "tags": [ "Comments" ] } }, { "id": "COMMENT-14", "name": "All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag", "shortDescription": { "text": "All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" }, "fullDescription": { "text": "All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag [COMMENT-14]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag [COMMENT-14]" }, "properties": { "tags": [ "Comments" ] } }, { "id": "COMMENT-14_b", "name": "Function parameters and return type should be documented in a comment that precedes the function declaration", "shortDescription": { "text": "Function parameters and return type should be documented in a comment that precedes the function declaration" }, "fullDescription": { "text": "Function parameters and return type should be documented in a comment that precedes the function declaration [COMMENT-14_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Function parameters and return type should be documented in a comment that precedes the function declaration [COMMENT-14_b]" }, "properties": { "tags": [ "Comments" ] } }, { "id": "CWE-772-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [CWE-772-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure resources are freed [CWE-772-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-772 Missing Release of Resource after Effective Lifetime" ], "security-severity": "9.5" } }, { "id": "CWE-772-b", "name": "Define a virtual destructor in classes used as base classes which have virtual functions", "shortDescription": { "text": "Define a virtual destructor in classes used as base classes which have virtual functions" }, "fullDescription": { "text": "Define a virtual destructor in classes used as base classes which have virtual functions [CWE-772-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Define a virtual destructor in classes used as base classes which have virtual functions [CWE-772-b]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-772 Missing Release of Resource after Effective Lifetime" ], "security-severity": "9.5" } }, { "id": "CWE-476-a", "name": "Avoid null pointer dereferencing", "shortDescription": { "text": "Avoid null pointer dereferencing" }, "fullDescription": { "text": "Avoid null pointer dereferencing [CWE-476-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid null pointer dereferencing [CWE-476-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-476 NULL Pointer Dereference" ], "security-severity": "9.5" } }, { "id": "CWE-770-a", "name": "Validate potentially tainted data before it is used to determine the size of memory allocation", "shortDescription": { "text": "Validate potentially tainted data before it is used to determine the size of memory allocation" }, "fullDescription": { "text": "Validate potentially tainted data before it is used to determine the size of memory allocation [CWE-770-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Validate potentially tainted data before it is used to determine the size of memory allocation [CWE-770-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-770 Allocation of Resources Without Limits or Throttling" ], "security-severity": "8" } }, { "id": "CWE-798-a", "name": "Do not hard code string literals", "shortDescription": { "text": "Do not hard code string literals" }, "fullDescription": { "text": "Do not hard code string literals [CWE-798-a]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Do not hard code string literals [CWE-798-a]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-798 Use of Hard-coded Credentials" ], "security-severity": "2" } }, { "id": "CWE-20-b", "name": "Avoid potential integer overflow\/underflow on tainted data", "shortDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data" }, "fullDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data [CWE-20-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid potential integer overflow\/underflow on tainted data [CWE-20-b]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-20 Improper Input Validation" ], "security-severity": "9.5" } }, { "id": "CWE-20-j", "name": "Untrusted data is used as a loop boundary", "shortDescription": { "text": "Untrusted data is used as a loop boundary" }, "fullDescription": { "text": "Untrusted data is used as a loop boundary [CWE-20-j]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Untrusted data is used as a loop boundary [CWE-20-j]" }, "properties": { "tags": [ "Common Weakness Enumeration", "CWE-20 Improper Input Validation" ], "security-severity": "8" } }, { "id": "EXCEPT-05", "name": "C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.)", "shortDescription": { "text": "C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.)" }, "fullDescription": { "text": "C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.) [EXCEPT-05]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.) [EXCEPT-05]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "EXCEPT-06", "name": "There should be at least one exception handler to catch all otherwise unhandled exceptions", "shortDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions" }, "fullDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [EXCEPT-06]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [EXCEPT-06]" }, "properties": { "tags": [ "Exceptions" ] } }, { "id": "FORMAT-02", "name": "Place an opening brace '{' on its own line", "shortDescription": { "text": "Place an opening brace '{' on its own line" }, "fullDescription": { "text": "Place an opening brace '{' on its own line [FORMAT-02]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Place an opening brace '{' on its own line [FORMAT-02]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-03", "name": "Place a closing brace '}' on its own line", "shortDescription": { "text": "Place a closing brace '}' on its own line" }, "fullDescription": { "text": "Place a closing brace '}' on its own line [FORMAT-03]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Place a closing brace '}' on its own line [FORMAT-03]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-04", "name": "Physical lines should be less than eighty characters", "shortDescription": { "text": "Physical lines should be less than eighty characters" }, "fullDescription": { "text": "Physical lines should be less than eighty characters [FORMAT-04]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Physical lines should be less than eighty characters [FORMAT-04]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-25_b", "name": "Parenthesis shall be used with the \"return\" statement", "shortDescription": { "text": "Parenthesis shall be used with the \"return\" statement" }, "fullDescription": { "text": "Parenthesis shall be used with the \"return\" statement [FORMAT-25_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Parenthesis shall be used with the \"return\" statement [FORMAT-25_b]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-28", "name": "In a function definition, the return type of the function should be written on a separate line directly above the function name", "shortDescription": { "text": "In a function definition, the return type of the function should be written on a separate line directly above the function name" }, "fullDescription": { "text": "In a function definition, the return type of the function should be written on a separate line directly above the function name [FORMAT-28]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "In a function definition, the return type of the function should be written on a separate line directly above the function name [FORMAT-28]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-29", "name": "Multiple variable declarations shall not be allowed on the same line", "shortDescription": { "text": "Multiple variable declarations shall not be allowed on the same line" }, "fullDescription": { "text": "Multiple variable declarations shall not be allowed on the same line [FORMAT-29]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Multiple variable declarations shall not be allowed on the same line [FORMAT-29]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-33", "name": "Each variable should be declared in a separate declaration statement", "shortDescription": { "text": "Each variable should be declared in a separate declaration statement" }, "fullDescription": { "text": "Each variable should be declared in a separate declaration statement [FORMAT-33]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each variable should be declared in a separate declaration statement [FORMAT-33]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-34", "name": "Braces \"{}\" which enclose a block should be placed in the same column", "shortDescription": { "text": "Braces \"{}\" which enclose a block should be placed in the same column" }, "fullDescription": { "text": "Braces \"{}\" which enclose a block should be placed in the same column [FORMAT-34]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Braces \"{}\" which enclose a block should be placed in the same column [FORMAT-34]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-42", "name": "Braces (\"{}\") which enclose a block will have nothing else on the line except comments", "shortDescription": { "text": "Braces (\"{}\") which enclose a block will have nothing else on the line except comments" }, "fullDescription": { "text": "Braces (\"{}\") which enclose a block will have nothing else on the line except comments [FORMAT-42]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Braces (\"{}\") which enclose a block will have nothing else on the line except comments [FORMAT-42]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-43", "name": "Braces (\"{}\") which enclose a block will be placed in the same column", "shortDescription": { "text": "Braces (\"{}\") which enclose a block will be placed in the same column" }, "fullDescription": { "text": "Braces (\"{}\") which enclose a block will be placed in the same column [FORMAT-43]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Braces (\"{}\") which enclose a block will be placed in the same column [FORMAT-43]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-47_a", "name": "Place CV-qualifiers on the right hand side of the type they apply to", "shortDescription": { "text": "Place CV-qualifiers on the right hand side of the type they apply to" }, "fullDescription": { "text": "Place CV-qualifiers on the right hand side of the type they apply to [FORMAT-47_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Place CV-qualifiers on the right hand side of the type they apply to [FORMAT-47_a]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "FORMAT-01", "name": "Tabs that do not use ASCII spaces shall not be used", "shortDescription": { "text": "Tabs that do not use ASCII spaces shall not be used" }, "fullDescription": { "text": "Tabs that do not use ASCII spaces shall not be used [FORMAT-01]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Tabs that do not use ASCII spaces shall not be used [FORMAT-01]" }, "properties": { "tags": [ "Formatting" ] } }, { "id": "GLOBAL-ONEUSEVAR", "name": "A project shall not contain non-volatile POD variables having only one use", "shortDescription": { "text": "A project shall not contain non-volatile POD variables having only one use" }, "fullDescription": { "text": "A project shall not contain non-volatile POD variables having only one use [GLOBAL-ONEUSEVAR]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A project shall not contain non-volatile POD variables having only one use [GLOBAL-ONEUSEVAR]" }, "properties": { "tags": [ "Global Static Analysis" ] } }, { "id": "GLOBAL-UNUSEDFUNC", "name": "Every defined function with external linkage shall be used at least once", "shortDescription": { "text": "Every defined function with external linkage shall be used at least once" }, "fullDescription": { "text": "Every defined function with external linkage shall be used at least once [GLOBAL-UNUSEDFUNC]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Every defined function with external linkage shall be used at least once [GLOBAL-UNUSEDFUNC]" }, "properties": { "tags": [ "Global Static Analysis" ] } }, { "id": "GLOBAL-UNUSEDTYPE", "name": "A project shall not contain unused type declarations", "shortDescription": { "text": "A project shall not contain unused type declarations" }, "fullDescription": { "text": "A project shall not contain unused type declarations [GLOBAL-UNUSEDTYPE]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A project shall not contain unused type declarations [GLOBAL-UNUSEDTYPE]" }, "properties": { "tags": [ "Global Static Analysis" ] } }, { "id": "HICPP-2_1_1-a", "name": "Tabs that do not use ASCII spaces shall not be used", "shortDescription": { "text": "Tabs that do not use ASCII spaces shall not be used" }, "fullDescription": { "text": "Tabs that do not use ASCII spaces shall not be used [HICPP-2_1_1-a]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Tabs that do not use ASCII spaces shall not be used [HICPP-2_1_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 2.1.1 Do not use tab characters in source files" ] } }, { "id": "HICPP-2_5_3-a", "name": "Prefer 'nullptr' over 'NULL' or '0'(zero)", "shortDescription": { "text": "Prefer 'nullptr' over 'NULL' or '0'(zero)" }, "fullDescription": { "text": "Prefer 'nullptr' over 'NULL' or '0'(zero) [HICPP-2_5_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer 'nullptr' over 'NULL' or '0'(zero) [HICPP-2_5_3-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 2.5.3 Use nullptr for the null pointer constant" ] } }, { "id": "HICPP-2_4_1-a", "name": "Different identifiers shall be typographically unambiguous", "shortDescription": { "text": "Different identifiers shall be typographically unambiguous" }, "fullDescription": { "text": "Different identifiers shall be typographically unambiguous [HICPP-2_4_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Different identifiers shall be typographically unambiguous [HICPP-2_4_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 2.4.1 Ensure that each identifier is distinct from any other visible identifier" ] } }, { "id": "HICPP-5_2_1-c", "name": "Avoid null pointer dereferencing", "shortDescription": { "text": "Avoid null pointer dereferencing" }, "fullDescription": { "text": "Avoid null pointer dereferencing [HICPP-5_2_1-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid null pointer dereferencing [HICPP-5_2_1-c]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.2.1 Ensure that pointer or array access is demonstrably within bounds of a valid object" ] } }, { "id": "HICPP-15_3_2-b", "name": "There should be at least one exception handler to catch all otherwise unhandled exceptions", "shortDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions" }, "fullDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [HICPP-15_3_2-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [HICPP-15_3_2-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 15.3.2 Ensure that a program does not result in a call to std::terminate" ] } }, { "id": "HICPP-2_3_1-a", "name": "Prefer C++ style comment", "shortDescription": { "text": "Prefer C++ style comment" }, "fullDescription": { "text": "Prefer C++ style comment [HICPP-2_3_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer C++ style comment [HICPP-2_3_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 2.3.1 Do not use the C comment delimiters \/* ... *\/" ] } }, { "id": "HICPP-10_2_1-a", "name": "Each overriding virtual function shall be declared with the override or final specifier", "shortDescription": { "text": "Each overriding virtual function shall be declared with the override or final specifier" }, "fullDescription": { "text": "Each overriding virtual function shall be declared with the override or final specifier [HICPP-10_2_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each overriding virtual function shall be declared with the override or final specifier [HICPP-10_2_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 10.2.1 Use the override special identifier when overriding a virtual function" ] } }, { "id": "HICPP-3_5_1-b", "name": "typedefs should be used in place of the basic types", "shortDescription": { "text": "typedefs should be used in place of the basic types" }, "fullDescription": { "text": "typedefs should be used in place of the basic types [HICPP-3_5_1-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "typedefs should be used in place of the basic types [HICPP-3_5_1-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object" ] } }, { "id": "HICPP-8_2_3-a", "name": "Pass small objects with a trivial copy constructor by value", "shortDescription": { "text": "Pass small objects with a trivial copy constructor by value" }, "fullDescription": { "text": "Pass small objects with a trivial copy constructor by value [HICPP-8_2_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Pass small objects with a trivial copy constructor by value [HICPP-8_2_3-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 8.2.3 Pass small objects with a trivial copy constructor by value" ] } }, { "id": "HICPP-5_5_1-a", "name": "Avoid division by zero", "shortDescription": { "text": "Avoid division by zero" }, "fullDescription": { "text": "Avoid division by zero [HICPP-5_5_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid division by zero [HICPP-5_5_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.5.1 Ensure that the right hand operand of the division or remainder operators is demonstrably non-zero" ] } }, { "id": "HICPP-5_1_1-a", "name": "Avoid magic numbers", "shortDescription": { "text": "Avoid magic numbers" }, "fullDescription": { "text": "Avoid magic numbers [HICPP-5_1_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid magic numbers [HICPP-5_1_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 5.1.1 Use symbolic names instead of literal values in code" ] } }, { "id": "HICPP-12_5_1-a", "name": "Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler", "shortDescription": { "text": "Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" }, "fullDescription": { "text": "Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler [HICPP-12_5_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler [HICPP-12_5_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 12.5.1 Define explicitly =default or =delete implicit special member functions of concrete classes" ] } }, { "id": "HICPP-12_1_1-a", "name": "Constructors allowing for conversion should be made explicit", "shortDescription": { "text": "Constructors allowing for conversion should be made explicit" }, "fullDescription": { "text": "Constructors allowing for conversion should be made explicit [HICPP-12_1_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Constructors allowing for conversion should be made explicit [HICPP-12_1_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 12.1.1 Do not declare implicit user defined conversions" ] } }, { "id": "HICPP-7_1_4-a", "name": "Place CV-qualifiers on the right hand side of the type they apply to", "shortDescription": { "text": "Place CV-qualifiers on the right hand side of the type they apply to" }, "fullDescription": { "text": "Place CV-qualifiers on the right hand side of the type they apply to [HICPP-7_1_4-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Place CV-qualifiers on the right hand side of the type they apply to [HICPP-7_1_4-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 7.1.4 Place CV-qualifiers on the right hand side of the type they apply to" ] } }, { "id": "HICPP-7_1_6-b", "name": "The names of the standard signed integer types and standard unsigned integer types should not be used", "shortDescription": { "text": "The names of the standard signed integer types and standard unsigned integer types should not be used" }, "fullDescription": { "text": "The names of the standard signed integer types and standard unsigned integer types should not be used [HICPP-7_1_6-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The names of the standard signed integer types and standard unsigned integer types should not be used [HICPP-7_1_6-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 7.1.6 Use class types or typedefs to abstract scalar quantities and standard integer types" ] } }, { "id": "HICPP-7_1_2-a", "name": "Declare local variable as const whenever possible", "shortDescription": { "text": "Declare local variable as const whenever possible" }, "fullDescription": { "text": "Declare local variable as const whenever possible [HICPP-7_1_2-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Declare local variable as const whenever possible [HICPP-7_1_2-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 7.1.2 Use const whenever possible" ] } }, { "id": "HICPP-7_1_1-a", "name": "Multiple variable declarations shall not be allowed on the same line", "shortDescription": { "text": "Multiple variable declarations shall not be allowed on the same line" }, "fullDescription": { "text": "Multiple variable declarations shall not be allowed on the same line [HICPP-7_1_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Multiple variable declarations shall not be allowed on the same line [HICPP-7_1_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 7.1.1 Declare each identifier on a separate line in a separate declaration" ] } }, { "id": "HICPP-7_1_1-b", "name": "Each variable should be declared in a separate declaration statement", "shortDescription": { "text": "Each variable should be declared in a separate declaration statement" }, "fullDescription": { "text": "Each variable should be declared in a separate declaration statement [HICPP-7_1_1-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each variable should be declared in a separate declaration statement [HICPP-7_1_1-b]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 7.1.1 Declare each identifier on a separate line in a separate declaration" ] } }, { "id": "HICPP-17_2_1-a", "name": "Wrap use of the C Standard Library", "shortDescription": { "text": "Wrap use of the C Standard Library" }, "fullDescription": { "text": "Wrap use of the C Standard Library [HICPP-17_2_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Wrap use of the C Standard Library [HICPP-17_2_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 17.2.1 Wrap use of the C Standard Library" ] } }, { "id": "HICPP-9_1_4-a", "name": "Public member functions shall not return non-const handles to private\/protected class-data", "shortDescription": { "text": "Public member functions shall not return non-const handles to private\/protected class-data" }, "fullDescription": { "text": "Public member functions shall not return non-const handles to private\/protected class-data [HICPP-9_1_4-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Public member functions shall not return non-const handles to private\/protected class-data [HICPP-9_1_4-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 9.1.4 Do not write member functions which return non-const handles to data less accessible than the member function" ] } }, { "id": "HICPP-9_1_1-a", "name": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const", "shortDescription": { "text": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" }, "fullDescription": { "text": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const [HICPP-9_1_1-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const [HICPP-9_1_1-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 9.1.1 Declare static any member function that does not require this. Alternatively, declare const any member function that does not modify the externally visible state of the object" ] } }, { "id": "HICPP-1_3_3-a", "name": "The C library shall not be used", "shortDescription": { "text": "The C library shall not be used" }, "fullDescription": { "text": "The C library shall not be used [HICPP-1_3_3-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The C library shall not be used [HICPP-1_3_3-a]" }, "properties": { "tags": [ "High Integrity C++", "HIC++ 1.3.3 Do not use the C Standard Library .h headers" ] } }, { "id": "INIT-03", "name": "Initialize all variables", "shortDescription": { "text": "Initialize all variables" }, "fullDescription": { "text": "Initialize all variables [INIT-03]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Initialize all variables [INIT-03]" }, "properties": { "tags": [ "Initialization" ] } }, { "id": "JSF-022", "name": "The input\/output library <stdio.h> shall not be used", "shortDescription": { "text": "The input\/output library <stdio.h> shall not be used" }, "fullDescription": { "text": "The input\/output library <stdio.h> shall not be used [JSF-022]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The input\/output library <stdio.h> shall not be used [JSF-022]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-023", "name": "The library functions atof, atoi and atol from library <stdlib.h> shall not be used", "shortDescription": { "text": "The library functions atof, atoi and atol from library <stdlib.h> shall not be used" }, "fullDescription": { "text": "The library functions atof, atoi and atol from library <stdlib.h> shall not be used [JSF-023]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The library functions atof, atoi and atol from library <stdlib.h> shall not be used [JSF-023]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-033", "name": "The #include directive shall use the <filename.h> notation to include header files", "shortDescription": { "text": "The #include directive shall use the <filename.h> notation to include header files" }, "fullDescription": { "text": "The #include directive shall use the <filename.h> notation to include header files [JSF-033]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The #include directive shall use the <filename.h> notation to include header files [JSF-033]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-078", "name": "All base classes with a virtual function shall define a virtual destructor", "shortDescription": { "text": "All base classes with a virtual function shall define a virtual destructor" }, "fullDescription": { "text": "All base classes with a virtual function shall define a virtual destructor [JSF-078]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All base classes with a virtual function shall define a virtual destructor [JSF-078]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-097_c", "name": "Arrays shall not be used in global functions", "shortDescription": { "text": "Arrays shall not be used in global functions" }, "fullDescription": { "text": "Arrays shall not be used in global functions [JSF-097_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Arrays shall not be used in global functions [JSF-097_c]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-126", "name": "Only valid C++ style comments (\/\/) shall be used", "shortDescription": { "text": "Only valid C++ style comments (\/\/) shall be used" }, "fullDescription": { "text": "Only valid C++ style comments (\/\/) shall be used [JSF-126]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Only valid C++ style comments (\/\/) shall be used [JSF-126]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-142_b", "name": "All variables shall be initialized before use", "shortDescription": { "text": "All variables shall be initialized before use" }, "fullDescription": { "text": "All variables shall be initialized before use [JSF-142_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All variables shall be initialized before use [JSF-142_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-152", "name": "Multiple variable declarations shall not be allowed on the same line", "shortDescription": { "text": "Multiple variable declarations shall not be allowed on the same line" }, "fullDescription": { "text": "Multiple variable declarations shall not be allowed on the same line [JSF-152]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Multiple variable declarations shall not be allowed on the same line [JSF-152]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-206", "name": "Dynamic heap memory allocation shall not be used", "shortDescription": { "text": "Dynamic heap memory allocation shall not be used" }, "fullDescription": { "text": "Dynamic heap memory allocation shall not be used [JSF-206]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Dynamic heap memory allocation shall not be used [JSF-206]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-208", "name": "C++ exceptions shall not be used", "shortDescription": { "text": "C++ exceptions shall not be used" }, "fullDescription": { "text": "C++ exceptions shall not be used [JSF-208]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "C++ exceptions shall not be used [JSF-208]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-209_b", "name": "Typedefs that indicate size and signedness shall be used in place of the basic types", "shortDescription": { "text": "Typedefs that indicate size and signedness shall be used in place of the basic types" }, "fullDescription": { "text": "Typedefs that indicate size and signedness shall be used in place of the basic types [JSF-209_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Typedefs that indicate size and signedness shall be used in place of the basic types [JSF-209_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-032", "name": "The #include pre-processor directive will only be used to include header (*.h) files", "shortDescription": { "text": "The #include pre-processor directive will only be used to include header (*.h) files" }, "fullDescription": { "text": "The #include pre-processor directive will only be used to include header (*.h) files [JSF-032]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The #include pre-processor directive will only be used to include header (*.h) files [JSF-032]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-047", "name": "Identifiers will not begin with the underscore character \"_\"", "shortDescription": { "text": "Identifiers will not begin with the underscore character \"_\"" }, "fullDescription": { "text": "Identifiers will not begin with the underscore character \"_\" [JSF-047]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers will not begin with the underscore character \"_\" [JSF-047]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-048", "name": "Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers", "shortDescription": { "text": "Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" }, "fullDescription": { "text": "Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers [JSF-048]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers [JSF-048]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-051", "name": "All letters contained in function and variable names will be composed entirely of lowercase letters", "shortDescription": { "text": "All letters contained in function and variable names will be composed entirely of lowercase letters" }, "fullDescription": { "text": "All letters contained in function and variable names will be composed entirely of lowercase letters [JSF-051]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All letters contained in function and variable names will be composed entirely of lowercase letters [JSF-051]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-053", "name": "Header files will always have a file name extension of \".h\"", "shortDescription": { "text": "Header files will always have a file name extension of \".h\"" }, "fullDescription": { "text": "Header files will always have a file name extension of \".h\" [JSF-053]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Header files will always have a file name extension of \".h\" [JSF-053]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-057_a", "name": "The public section of a class will be declared before the protected section and before the private section", "shortDescription": { "text": "The public section of a class will be declared before the protected section and before the private section" }, "fullDescription": { "text": "The public section of a class will be declared before the protected section and before the private section [JSF-057_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The public section of a class will be declared before the protected section and before the private section [JSF-057_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-057_b", "name": "The protected section of a class will be declared before the private section", "shortDescription": { "text": "The protected section of a class will be declared before the private section" }, "fullDescription": { "text": "The protected section of a class will be declared before the private section [JSF-057_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The protected section of a class will be declared before the private section [JSF-057_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-060_a", "name": "Braces (\"{}\") which enclose a block will have nothing else on the line except comments", "shortDescription": { "text": "Braces (\"{}\") which enclose a block will have nothing else on the line except comments" }, "fullDescription": { "text": "Braces (\"{}\") which enclose a block will have nothing else on the line except comments [JSF-060_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Braces (\"{}\") which enclose a block will have nothing else on the line except comments [JSF-060_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-060_b", "name": "Braces (\"{}\") which enclose a block will be placed in the same column", "shortDescription": { "text": "Braces (\"{}\") which enclose a block will be placed in the same column" }, "fullDescription": { "text": "Braces (\"{}\") which enclose a block will be placed in the same column [JSF-060_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Braces (\"{}\") which enclose a block will be placed in the same column [JSF-060_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-061", "name": "Braces (\"{}\") which enclose a block will have nothing else on the line except comments", "shortDescription": { "text": "Braces (\"{}\") which enclose a block will have nothing else on the line except comments" }, "fullDescription": { "text": "Braces (\"{}\") which enclose a block will have nothing else on the line except comments [JSF-061]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Braces (\"{}\") which enclose a block will have nothing else on the line except comments [JSF-061]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-069", "name": "A member function that does not affect the state of an object will be declared const", "shortDescription": { "text": "A member function that does not affect the state of an object will be declared const" }, "fullDescription": { "text": "A member function that does not affect the state of an object will be declared const [JSF-069]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A member function that does not affect the state of an object will be declared const [JSF-069]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-115", "name": "If a function returns error information, then that error information will be tested", "shortDescription": { "text": "If a function returns error information, then that error information will be tested" }, "fullDescription": { "text": "If a function returns error information, then that error information will be tested [JSF-115]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If a function returns error information, then that error information will be tested [JSF-115]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-132_a", "name": "Each variable declaration will be commented", "shortDescription": { "text": "Each variable declaration will be commented" }, "fullDescription": { "text": "Each variable declaration will be commented [JSF-132_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Each variable declaration will be commented [JSF-132_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-133_a", "name": "Every source file will be documented with an introductory comment that provides information on the file", "shortDescription": { "text": "Every source file will be documented with an introductory comment that provides information on the file" }, "fullDescription": { "text": "Every source file will be documented with an introductory comment that provides information on the file [JSF-133_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Every source file will be documented with an introductory comment that provides information on the file [JSF-133_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-133_b", "name": "Every source file will contain copyright information", "shortDescription": { "text": "Every source file will contain copyright information" }, "fullDescription": { "text": "Every source file will contain copyright information [JSF-133_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Every source file will contain copyright information [JSF-133_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-151", "name": "Numeric values in code will not be used; symbolic values will be used instead", "shortDescription": { "text": "Numeric values in code will not be used; symbolic values will be used instead" }, "fullDescription": { "text": "Numeric values in code will not be used; symbolic values will be used instead [JSF-151]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Numeric values in code will not be used; symbolic values will be used instead [JSF-151]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-043", "name": "Tabs should be avoided", "shortDescription": { "text": "Tabs should be avoided" }, "fullDescription": { "text": "Tabs should be avoided [JSF-043]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Tabs should be avoided [JSF-043]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-098", "name": "Every nonlocal name, except main(), should be placed in some namespace", "shortDescription": { "text": "Every nonlocal name, except main(), should be placed in some namespace" }, "fullDescription": { "text": "Every nonlocal name, except main(), should be placed in some namespace [JSF-098]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Every nonlocal name, except main(), should be placed in some namespace [JSF-098]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-115_a", "name": "Value returned by a function having a non-void return type that is not an overloaded operator shall always be used", "shortDescription": { "text": "Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" }, "fullDescription": { "text": "Value returned by a function having a non-void return type that is not an overloaded operator shall always be used [JSF-115_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Value returned by a function having a non-void return type that is not an overloaded operator shall always be used [JSF-115_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-117", "name": "Arguments should be passed by reference", "shortDescription": { "text": "Arguments should be passed by reference" }, "fullDescription": { "text": "Arguments should be passed by reference [JSF-117]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Arguments should be passed by reference [JSF-117]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-118", "name": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object", "shortDescription": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" }, "fullDescription": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object [JSF-118]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object [JSF-118]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-125_a", "name": "Pass and return by reference when possible", "shortDescription": { "text": "Pass and return by reference when possible" }, "fullDescription": { "text": "Pass and return by reference when possible [JSF-125_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Pass and return by reference when possible [JSF-125_a]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-134", "name": "Document functions in comments that precede function definitions", "shortDescription": { "text": "Document functions in comments that precede function definitions" }, "fullDescription": { "text": "Document functions in comments that precede function definitions [JSF-134]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Document functions in comments that precede function definitions [JSF-134]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-134_b", "name": "Document functions in comments that precede function declarations", "shortDescription": { "text": "Document functions in comments that precede function declarations" }, "fullDescription": { "text": "Document functions in comments that precede function declarations [JSF-134_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Document functions in comments that precede function declarations [JSF-134_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-137", "name": "All declarations at file scope should be static where possible", "shortDescription": { "text": "All declarations at file scope should be static where possible" }, "fullDescription": { "text": "All declarations at file scope should be static where possible [JSF-137]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All declarations at file scope should be static where possible [JSF-137]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "JSF-177_b", "name": "Constructors allowing for conversion should be made explicit", "shortDescription": { "text": "Constructors allowing for conversion should be made explicit" }, "fullDescription": { "text": "Constructors allowing for conversion should be made explicit [JSF-177_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Constructors allowing for conversion should be made explicit [JSF-177_b]" }, "properties": { "tags": [ "Joint Strike Fighter" ] } }, { "id": "METRICS-19", "name": "The percentage of comment lines versus the total number of module lines should be between 20 and 60", "shortDescription": { "text": "The percentage of comment lines versus the total number of module lines should be between 20 and 60" }, "fullDescription": { "text": "The percentage of comment lines versus the total number of module lines should be between 20 and 60 [METRICS-19]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The percentage of comment lines versus the total number of module lines should be between 20 and 60 [METRICS-19]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-31", "name": "The assertion density of the code should average to a minimum of two assertions per function", "shortDescription": { "text": "The assertion density of the code should average to a minimum of two assertions per function" }, "fullDescription": { "text": "The assertion density of the code should average to a minimum of two assertions per function [METRICS-31]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The assertion density of the code should average to a minimum of two assertions per function [METRICS-31]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-29", "name": "Report Cyclomatic Complexity", "shortDescription": { "text": "Report Cyclomatic Complexity" }, "fullDescription": { "text": "Report Cyclomatic Complexity [METRICS-29]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Report Cyclomatic Complexity [METRICS-29]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "METRICS-33", "name": "Report Essential Complexity", "shortDescription": { "text": "Report Essential Complexity" }, "fullDescription": { "text": "Report Essential Complexity [METRICS-33]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Report Essential Complexity [METRICS-33]" }, "properties": { "tags": [ "Metrics" ] } }, { "id": "MISRA-013", "name": "The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd", "shortDescription": { "text": "The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" }, "fullDescription": { "text": "The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd [MISRA-013]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd [MISRA-013]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA-023", "name": "Objects or functions with external linkage shall be declared in a header file", "shortDescription": { "text": "Objects or functions with external linkage shall be declared in a header file" }, "fullDescription": { "text": "Objects or functions with external linkage shall be declared in a header file [MISRA-023]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Objects or functions with external linkage shall be declared in a header file [MISRA-023]" }, "properties": { "tags": [ "MISRA C 1998" ] } }, { "id": "MISRA2004-10_1_b", "name": "There shall be no implicit conversions from integral to floating type", "shortDescription": { "text": "There shall be no implicit conversions from integral to floating type" }, "fullDescription": { "text": "There shall be no implicit conversions from integral to floating type [MISRA2004-10_1_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There shall be no implicit conversions from integral to floating type [MISRA2004-10_1_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-16_10", "name": "If a function returns error information, then that error information shall be tested", "shortDescription": { "text": "If a function returns error information, then that error information shall be tested" }, "fullDescription": { "text": "If a function returns error information, then that error information shall be tested [MISRA2004-16_10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "If a function returns error information, then that error information shall be tested [MISRA2004-16_10]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-16_7", "name": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object", "shortDescription": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" }, "fullDescription": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object [MISRA2004-16_7]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object [MISRA2004-16_7]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-17_4", "name": "Array indexing shall be the only allowed form of pointer arithmetic", "shortDescription": { "text": "Array indexing shall be the only allowed form of pointer arithmetic" }, "fullDescription": { "text": "Array indexing shall be the only allowed form of pointer arithmetic [MISRA2004-17_4]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Array indexing shall be the only allowed form of pointer arithmetic [MISRA2004-17_4]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-20_10", "name": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used", "shortDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" }, "fullDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [MISRA2004-20_10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [MISRA2004-20_10]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-20_4", "name": "Dynamic heap memory allocation shall not be used", "shortDescription": { "text": "Dynamic heap memory allocation shall not be used" }, "fullDescription": { "text": "Dynamic heap memory allocation shall not be used [MISRA2004-20_4]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Dynamic heap memory allocation shall not be used [MISRA2004-20_4]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-20_9", "name": "The input\/output library stdio.h shall not be used", "shortDescription": { "text": "The input\/output library stdio.h shall not be used" }, "fullDescription": { "text": "The input\/output library stdio.h shall not be used [MISRA2004-20_9]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The input\/output library stdio.h shall not be used [MISRA2004-20_9]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-6_3_b", "name": "typedefs should be used in place of the basic types", "shortDescription": { "text": "typedefs should be used in place of the basic types" }, "fullDescription": { "text": "typedefs should be used in place of the basic types [MISRA2004-6_3_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "typedefs should be used in place of the basic types [MISRA2004-6_3_b]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2004-8_10", "name": "Objects or functions with external linkage shall be declared in a header file", "shortDescription": { "text": "Objects or functions with external linkage shall be declared in a header file" }, "fullDescription": { "text": "Objects or functions with external linkage shall be declared in a header file [MISRA2004-8_10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Objects or functions with external linkage shall be declared in a header file [MISRA2004-8_10]" }, "properties": { "tags": [ "MISRA C 2004" ] } }, { "id": "MISRA2008-0_1_10_b", "name": "Every defined function with external linkage shall be used", "shortDescription": { "text": "Every defined function with external linkage shall be used" }, "fullDescription": { "text": "Every defined function with external linkage shall be used [MISRA2008-0_1_10_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Every defined function with external linkage shall be used [MISRA2008-0_1_10_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_3_c", "name": "Eliminate unused private member variables", "shortDescription": { "text": "Eliminate unused private member variables" }, "fullDescription": { "text": "Eliminate unused private member variables [MISRA2008-0_1_3_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Eliminate unused private member variables [MISRA2008-0_1_3_c]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_4", "name": "A project shall not contain non-volatile POD variables having only one use", "shortDescription": { "text": "A project shall not contain non-volatile POD variables having only one use" }, "fullDescription": { "text": "A project shall not contain non-volatile POD variables having only one use [MISRA2008-0_1_4]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain non-volatile POD variables having only one use [MISRA2008-0_1_4]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_5", "name": "A project shall not contain unused type declarations", "shortDescription": { "text": "A project shall not contain unused type declarations" }, "fullDescription": { "text": "A project shall not contain unused type declarations [MISRA2008-0_1_5]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A project shall not contain unused type declarations [MISRA2008-0_1_5]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_1_7", "name": "The value returned by a function having a non-void return type that is not an overloaded operator shall always be used", "shortDescription": { "text": "The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" }, "fullDescription": { "text": "The value returned by a function having a non-void return type that is not an overloaded operator shall always be used [MISRA2008-0_1_7]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value returned by a function having a non-void return type that is not an overloaded operator shall always be used [MISRA2008-0_1_7]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_3_2", "name": "If a function generates error information, then that error information shall be tested", "shortDescription": { "text": "If a function generates error information, then that error information shall be tested" }, "fullDescription": { "text": "If a function generates error information, then that error information shall be tested [MISRA2008-0_3_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If a function generates error information, then that error information shall be tested [MISRA2008-0_3_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-10_3_2", "name": "Each overriding virtual function shall be declared with the virtual keyword", "shortDescription": { "text": "Each overriding virtual function shall be declared with the virtual keyword" }, "fullDescription": { "text": "Each overriding virtual function shall be declared with the virtual keyword [MISRA2008-10_3_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Each overriding virtual function shall be declared with the virtual keyword [MISRA2008-10_3_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_5_3_d", "name": "There should be at least one exception handler to catch all otherwise unhandled exceptions", "shortDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions" }, "fullDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [MISRA2008-15_5_3_d]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [MISRA2008-15_5_3_d]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-18_0_1", "name": "The C library shall not be used", "shortDescription": { "text": "The C library shall not be used" }, "fullDescription": { "text": "The C library shall not be used [MISRA2008-18_0_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The C library shall not be used [MISRA2008-18_0_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-18_0_2", "name": "The library functions atof, atoi and atol from library <cstdlib> shall not be used", "shortDescription": { "text": "The library functions atof, atoi and atol from library <cstdlib> shall not be used" }, "fullDescription": { "text": "The library functions atof, atoi and atol from library <cstdlib> shall not be used [MISRA2008-18_0_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The library functions atof, atoi and atol from library <cstdlib> shall not be used [MISRA2008-18_0_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-18_4_1", "name": "Dynamic heap memory allocation shall not be used", "shortDescription": { "text": "Dynamic heap memory allocation shall not be used" }, "fullDescription": { "text": "Dynamic heap memory allocation shall not be used [MISRA2008-18_4_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Dynamic heap memory allocation shall not be used [MISRA2008-18_4_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-27_0_1", "name": "The stream input\/output library <cstdio> shall not be used", "shortDescription": { "text": "The stream input\/output library <cstdio> shall not be used" }, "fullDescription": { "text": "The stream input\/output library <cstdio> shall not be used [MISRA2008-27_0_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The stream input\/output library <cstdio> shall not be used [MISRA2008-27_0_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-2_10_1", "name": "Different identifiers shall be typographically unambiguous", "shortDescription": { "text": "Different identifiers shall be typographically unambiguous" }, "fullDescription": { "text": "Different identifiers shall be typographically unambiguous [MISRA2008-2_10_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Different identifiers shall be typographically unambiguous [MISRA2008-2_10_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-3_3_1", "name": "Objects or functions with external linkage shall be declared in a header file", "shortDescription": { "text": "Objects or functions with external linkage shall be declared in a header file" }, "fullDescription": { "text": "Objects or functions with external linkage shall be declared in a header file [MISRA2008-3_3_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Objects or functions with external linkage shall be declared in a header file [MISRA2008-3_3_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-4_10_2", "name": "Literal zero (0) shall not be used as the null-pointer-constant", "shortDescription": { "text": "Literal zero (0) shall not be used as the null-pointer-constant" }, "fullDescription": { "text": "Literal zero (0) shall not be used as the null-pointer-constant [MISRA2008-4_10_2]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Literal zero (0) shall not be used as the null-pointer-constant [MISRA2008-4_10_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_15", "name": "Array indexing shall be the only form of pointer arithmetic", "shortDescription": { "text": "Array indexing shall be the only form of pointer arithmetic" }, "fullDescription": { "text": "Array indexing shall be the only form of pointer arithmetic [MISRA2008-5_0_15]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Array indexing shall be the only form of pointer arithmetic [MISRA2008-5_0_15]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-5_0_5_b", "name": "There shall be no implicit floating-integral conversions", "shortDescription": { "text": "There shall be no implicit floating-integral conversions" }, "fullDescription": { "text": "There shall be no implicit floating-integral conversions [MISRA2008-5_0_5_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "There shall be no implicit floating-integral conversions [MISRA2008-5_0_5_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-7_1_1", "name": "Declare local variable as const whenever possible", "shortDescription": { "text": "Declare local variable as const whenever possible" }, "fullDescription": { "text": "Declare local variable as const whenever possible [MISRA2008-7_1_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Declare local variable as const whenever possible [MISRA2008-7_1_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-7_1_2_a", "name": "A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified", "shortDescription": { "text": "A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" }, "fullDescription": { "text": "A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified [MISRA2008-7_1_2_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified [MISRA2008-7_1_2_a]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-7_3_1", "name": "The global namespace shall only contain main, namespace declarations and extern \"C\" declarations", "shortDescription": { "text": "The global namespace shall only contain main, namespace declarations and extern \"C\" declarations" }, "fullDescription": { "text": "The global namespace shall only contain main, namespace declarations and extern \"C\" declarations [MISRA2008-7_3_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The global namespace shall only contain main, namespace declarations and extern \"C\" declarations [MISRA2008-7_3_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-8_0_1", "name": "An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively", "shortDescription": { "text": "An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" }, "fullDescription": { "text": "An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively [MISRA2008-8_0_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively [MISRA2008-8_0_1]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-9_3_2_b", "name": "Public member functions shall not return non-const handles to class-data", "shortDescription": { "text": "Public member functions shall not return non-const handles to class-data" }, "fullDescription": { "text": "Public member functions shall not return non-const handles to class-data [MISRA2008-9_3_2_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Public member functions shall not return non-const handles to class-data [MISRA2008-9_3_2_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-9_3_3", "name": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const", "shortDescription": { "text": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" }, "fullDescription": { "text": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const [MISRA2008-9_3_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const [MISRA2008-9_3_3]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-15_3_2", "name": "There should be at least one exception handler to catch all otherwise unhandled exceptions", "shortDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions" }, "fullDescription": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [MISRA2008-15_3_2]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "There should be at least one exception handler to catch all otherwise unhandled exceptions [MISRA2008-15_3_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-3_9_2", "name": "typedefs that indicate size and signedness should be used in place of the basic numerical types", "shortDescription": { "text": "typedefs that indicate size and signedness should be used in place of the basic numerical types" }, "fullDescription": { "text": "typedefs that indicate size and signedness should be used in place of the basic numerical types [MISRA2008-3_9_2]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "typedefs that indicate size and signedness should be used in place of the basic numerical types [MISRA2008-3_9_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_3_1_b", "name": "Avoid null pointer dereferencing", "shortDescription": { "text": "Avoid null pointer dereferencing" }, "fullDescription": { "text": "Avoid null pointer dereferencing [MISRA2008-0_3_1_b]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Avoid null pointer dereferencing [MISRA2008-0_3_1_b]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_3_1_c", "name": "Avoid division by zero", "shortDescription": { "text": "Avoid division by zero" }, "fullDescription": { "text": "Avoid division by zero [MISRA2008-0_3_1_c]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Avoid division by zero [MISRA2008-0_3_1_c]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2008-0_4_2", "name": "Use of floating-point arithmetic shall be documented", "shortDescription": { "text": "Use of floating-point arithmetic shall be documented" }, "fullDescription": { "text": "Use of floating-point arithmetic shall be documented [MISRA2008-0_4_2]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Use of floating-point arithmetic shall be documented [MISRA2008-0_4_2]" }, "properties": { "tags": [ "MISRA C++ 2008" ] } }, { "id": "MISRA2012-RULE-11_9_a", "name": "The macro NULL shall be the only permitted form of integer null pointer constant", "shortDescription": { "text": "The macro NULL shall be the only permitted form of integer null pointer constant" }, "fullDescription": { "text": "The macro NULL shall be the only permitted form of integer null pointer constant [MISRA2012-RULE-11_9_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The macro NULL shall be the only permitted form of integer null pointer constant [MISRA2012-RULE-11_9_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-11_9_b", "name": "The macro NULL shall be the only permitted form of integer null pointer constant", "shortDescription": { "text": "The macro NULL shall be the only permitted form of integer null pointer constant" }, "fullDescription": { "text": "The macro NULL shall be the only permitted form of integer null pointer constant [MISRA2012-RULE-11_9_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The macro NULL shall be the only permitted form of integer null pointer constant [MISRA2012-RULE-11_9_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-17_7_a", "name": "The value returned by a function having non-void return type shall be used", "shortDescription": { "text": "The value returned by a function having non-void return type shall be used" }, "fullDescription": { "text": "The value returned by a function having non-void return type shall be used [MISRA2012-RULE-17_7_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value returned by a function having non-void return type shall be used [MISRA2012-RULE-17_7_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-1_3_a", "name": "Avoid division by zero", "shortDescription": { "text": "Avoid division by zero" }, "fullDescription": { "text": "Avoid division by zero [MISRA2012-RULE-1_3_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid division by zero [MISRA2012-RULE-1_3_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_3", "name": "The memory allocation and deallocation functions of <stdlib.h> shall not be used", "shortDescription": { "text": "The memory allocation and deallocation functions of <stdlib.h> shall not be used" }, "fullDescription": { "text": "The memory allocation and deallocation functions of <stdlib.h> shall not be used [MISRA2012-RULE-21_3]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The memory allocation and deallocation functions of <stdlib.h> shall not be used [MISRA2012-RULE-21_3]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_6", "name": "The Standard Library input\/output functions shall not be used", "shortDescription": { "text": "The Standard Library input\/output functions shall not be used" }, "fullDescription": { "text": "The Standard Library input\/output functions shall not be used [MISRA2012-RULE-21_6]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The Standard Library input\/output functions shall not be used [MISRA2012-RULE-21_6]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-21_7", "name": "The atof, atoi, atol and atoll functions of <stdlib.h> shall not be used", "shortDescription": { "text": "The atof, atoi, atol and atoll functions of <stdlib.h> shall not be used" }, "fullDescription": { "text": "The atof, atoi, atol and atoll functions of <stdlib.h> shall not be used [MISRA2012-RULE-21_7]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The atof, atoi, atol and atoll functions of <stdlib.h> shall not be used [MISRA2012-RULE-21_7]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-22_1", "name": "All resources obtained dynamically by means of Standard Library functions shall be explicitly released", "shortDescription": { "text": "All resources obtained dynamically by means of Standard Library functions shall be explicitly released" }, "fullDescription": { "text": "All resources obtained dynamically by means of Standard Library functions shall be explicitly released [MISRA2012-RULE-22_1]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "All resources obtained dynamically by means of Standard Library functions shall be explicitly released [MISRA2012-RULE-22_1]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-5_7_a", "name": "A tag name shall be a unique identifier", "shortDescription": { "text": "A tag name shall be a unique identifier" }, "fullDescription": { "text": "A tag name shall be a unique identifier [MISRA2012-RULE-5_7_a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A tag name shall be a unique identifier [MISRA2012-RULE-5_7_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-RULE-8_13_a", "name": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object", "shortDescription": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" }, "fullDescription": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object [MISRA2012-RULE-8_13_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object [MISRA2012-RULE-8_13_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Rules" ] } }, { "id": "MISRA2012-DIR-4_12", "name": "Dynamic memory allocation shall not be used", "shortDescription": { "text": "Dynamic memory allocation shall not be used" }, "fullDescription": { "text": "Dynamic memory allocation shall not be used [MISRA2012-DIR-4_12]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Dynamic memory allocation shall not be used [MISRA2012-DIR-4_12]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_14_b", "name": "Protect against integer overflow\/underflow from tainted data", "shortDescription": { "text": "Protect against integer overflow\/underflow from tainted data" }, "fullDescription": { "text": "Protect against integer overflow\/underflow from tainted data [MISRA2012-DIR-4_14_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Protect against integer overflow\/underflow from tainted data [MISRA2012-DIR-4_14_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_1_b", "name": "Avoid null pointer dereferencing", "shortDescription": { "text": "Avoid null pointer dereferencing" }, "fullDescription": { "text": "Avoid null pointer dereferencing [MISRA2012-DIR-4_1_b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid null pointer dereferencing [MISRA2012-DIR-4_1_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_1_c", "name": "Avoid division by zero", "shortDescription": { "text": "Avoid division by zero" }, "fullDescription": { "text": "Avoid division by zero [MISRA2012-DIR-4_1_c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid division by zero [MISRA2012-DIR-4_1_c]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_13_a", "name": "All resources obtained dynamically by means of Standard Library functions shall be explicitly released", "shortDescription": { "text": "All resources obtained dynamically by means of Standard Library functions shall be explicitly released" }, "fullDescription": { "text": "All resources obtained dynamically by means of Standard Library functions shall be explicitly released [MISRA2012-DIR-4_13_a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All resources obtained dynamically by means of Standard Library functions shall be explicitly released [MISRA2012-DIR-4_13_a]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRA2012-DIR-4_6_b", "name": "typedefs should be used in place of the basic types", "shortDescription": { "text": "typedefs should be used in place of the basic types" }, "fullDescription": { "text": "typedefs should be used in place of the basic types [MISRA2012-DIR-4_6_b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "typedefs should be used in place of the basic types [MISRA2012-DIR-4_6_b]" }, "properties": { "tags": [ "MISRA C 2012 (Legacy)", "MISRA C 2012 Directives" ] } }, { "id": "MISRAC2012-RULE_11_9-a", "name": "Literal zero (0) shall not be used as the null-pointer-constant", "shortDescription": { "text": "Literal zero (0) shall not be used as the null-pointer-constant" }, "fullDescription": { "text": "Literal zero (0) shall not be used as the null-pointer-constant [MISRAC2012-RULE_11_9-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Literal zero (0) shall not be used as the null-pointer-constant [MISRAC2012-RULE_11_9-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant" ] } }, { "id": "MISRAC2012-RULE_11_9-b", "name": "Use NULL instead of literal zero (0) as the null-pointer-constant", "shortDescription": { "text": "Use NULL instead of literal zero (0) as the null-pointer-constant" }, "fullDescription": { "text": "Use NULL instead of literal zero (0) as the null-pointer-constant [MISRAC2012-RULE_11_9-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Use NULL instead of literal zero (0) as the null-pointer-constant [MISRAC2012-RULE_11_9-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant" ] } }, { "id": "MISRAC2012-DIR_4_14-b", "name": "Avoid potential integer overflow\/underflow on tainted data", "shortDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data" }, "fullDescription": { "text": "Avoid potential integer overflow\/underflow on tainted data [MISRAC2012-DIR_4_14-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid potential integer overflow\/underflow on tainted data [MISRAC2012-DIR_4_14-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.14 (Required) The validity of values received from external sources shall be checked" ] } }, { "id": "MISRAC2012-DIR_4_13-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [MISRAC2012-DIR_4_13-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Ensure resources are freed [MISRAC2012-DIR_4_13-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.13 (Advisory) Functions which are designed to provide operations on a resource should be called in an appropriate sequence" ] } }, { "id": "MISRAC2012-DIR_4_12-a", "name": "Dynamic heap memory allocation shall not be used", "shortDescription": { "text": "Dynamic heap memory allocation shall not be used" }, "fullDescription": { "text": "Dynamic heap memory allocation shall not be used [MISRAC2012-DIR_4_12-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Dynamic heap memory allocation shall not be used [MISRAC2012-DIR_4_12-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.12 (Required) Dynamic memory allocation shall not be used" ] } }, { "id": "MISRAC2012-RULE_22_1-a", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [MISRAC2012-RULE_22_1-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure resources are freed [MISRAC2012-RULE_22_1-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 22.1 (Required) All resources obtained dynamically by means of Standard Library functions shall be explicitly released" ] } }, { "id": "MISRAC2012-RULE_21_6-a", "name": "The input\/output functions from the 'cstdio' and 'cwchar' libraries should not be used", "shortDescription": { "text": "The input\/output functions from the 'cstdio' and 'cwchar' libraries should not be used" }, "fullDescription": { "text": "The input\/output functions from the 'cstdio' and 'cwchar' libraries should not be used [MISRAC2012-RULE_21_6-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The input\/output functions from the 'cstdio' and 'cwchar' libraries should not be used [MISRAC2012-RULE_21_6-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.6 (Required) The Standard Library input\/output functions shall not be used" ] } }, { "id": "MISRAC2012-RULE_21_7-a", "name": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used", "shortDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" }, "fullDescription": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [MISRAC2012-RULE_21_7-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used [MISRAC2012-RULE_21_7-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.7 (Required) The atof, atoi, atol and atoll functions of <stdlib.h> shall not be used" ] } }, { "id": "MISRAC2012-RULE_21_3-a", "name": "Dynamic heap memory allocation shall not be used", "shortDescription": { "text": "Dynamic heap memory allocation shall not be used" }, "fullDescription": { "text": "Dynamic heap memory allocation shall not be used [MISRAC2012-RULE_21_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Dynamic heap memory allocation shall not be used [MISRAC2012-RULE_21_3-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 21.3 (Required) The memory allocation and deallocation functions of <stdlib.h> shall not be used" ] } }, { "id": "MISRAC2012-RULE_17_7-a", "name": "The value returned by a function having non-void return type shall be used", "shortDescription": { "text": "The value returned by a function having non-void return type shall be used" }, "fullDescription": { "text": "The value returned by a function having non-void return type shall be used [MISRAC2012-RULE_17_7-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The value returned by a function having non-void return type shall be used [MISRAC2012-RULE_17_7-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 17.7 (Required) The value returned by a function having non-void return type shall be used" ] } }, { "id": "MISRAC2012-RULE_5_7-a", "name": "A tag name shall be a unique identifier", "shortDescription": { "text": "A tag name shall be a unique identifier" }, "fullDescription": { "text": "A tag name shall be a unique identifier [MISRAC2012-RULE_5_7-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "A tag name shall be a unique identifier [MISRAC2012-RULE_5_7-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 5.7 (Required) A tag name shall be a unique identifier" ] } }, { "id": "MISRAC2012-DIR_4_6-b", "name": "typedefs should be used in place of the basic types", "shortDescription": { "text": "typedefs should be used in place of the basic types" }, "fullDescription": { "text": "typedefs should be used in place of the basic types [MISRAC2012-DIR_4_6-b]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "typedefs should be used in place of the basic types [MISRAC2012-DIR_4_6-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types" ] } }, { "id": "MISRAC2012-DIR_4_1-b", "name": "Avoid null pointer dereferencing", "shortDescription": { "text": "Avoid null pointer dereferencing" }, "fullDescription": { "text": "Avoid null pointer dereferencing [MISRAC2012-DIR_4_1-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid null pointer dereferencing [MISRAC2012-DIR_4_1-b]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.1 (Required) Run-time failures shall be minimized" ] } }, { "id": "MISRAC2012-DIR_4_1-c", "name": "Avoid division by zero", "shortDescription": { "text": "Avoid division by zero" }, "fullDescription": { "text": "Avoid division by zero [MISRAC2012-DIR_4_1-c]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid division by zero [MISRAC2012-DIR_4_1-c]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Dir 4.1 (Required) Run-time failures shall be minimized" ] } }, { "id": "MISRAC2012-RULE_8_13-a", "name": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object", "shortDescription": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" }, "fullDescription": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object [MISRAC2012-RULE_8_13-a]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object [MISRAC2012-RULE_8_13-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 8.13 (Advisory) A pointer should point to a const-qualified type whenever possible" ] } }, { "id": "MISRAC2012-RULE_1_3-a", "name": "Avoid division by zero", "shortDescription": { "text": "Avoid division by zero" }, "fullDescription": { "text": "Avoid division by zero [MISRAC2012-RULE_1_3-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid division by zero [MISRAC2012-RULE_1_3-a]" }, "properties": { "tags": [ "MISRA C 2023 (MISRA C 2012)", "Rule 1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" ] } }, { "id": "MRM-04", "name": "All classes should contain the assignment operator or appropriate comment", "shortDescription": { "text": "All classes should contain the assignment operator or appropriate comment" }, "fullDescription": { "text": "All classes should contain the assignment operator or appropriate comment [MRM-04]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All classes should contain the assignment operator or appropriate comment [MRM-04]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-05", "name": "All classes should contain the copy constructor or appropriate comment", "shortDescription": { "text": "All classes should contain the copy constructor or appropriate comment" }, "fullDescription": { "text": "All classes should contain the copy constructor or appropriate comment [MRM-05]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All classes should contain the copy constructor or appropriate comment [MRM-05]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-18", "name": "Do not allocate memory and expect that someone else will deallocate it later", "shortDescription": { "text": "Do not allocate memory and expect that someone else will deallocate it later" }, "fullDescription": { "text": "Do not allocate memory and expect that someone else will deallocate it later [MRM-18]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not allocate memory and expect that someone else will deallocate it later [MRM-18]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-34", "name": "Check the return value of new", "shortDescription": { "text": "Check the return value of new" }, "fullDescription": { "text": "Check the return value of new [MRM-34]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Check the return value of new [MRM-34]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-47", "name": "Classes containing at least one non-static member variable should declare the assignment operator or contain appropriate comment", "shortDescription": { "text": "Classes containing at least one non-static member variable should declare the assignment operator or contain appropriate comment" }, "fullDescription": { "text": "Classes containing at least one non-static member variable should declare the assignment operator or contain appropriate comment [MRM-47]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Classes containing at least one non-static member variable should declare the assignment operator or contain appropriate comment [MRM-47]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "MRM-48", "name": "Classes containing at least one non-static member variable should declare the copy constructor or contain appropriate comment", "shortDescription": { "text": "Classes containing at least one non-static member variable should declare the copy constructor or contain appropriate comment" }, "fullDescription": { "text": "Classes containing at least one non-static member variable should declare the copy constructor or contain appropriate comment [MRM-48]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Classes containing at least one non-static member variable should declare the copy constructor or contain appropriate comment [MRM-48]" }, "properties": { "tags": [ "Memory and Resource Management" ] } }, { "id": "NAMING-03", "name": "Use lowercase for file names", "shortDescription": { "text": "Use lowercase for file names" }, "fullDescription": { "text": "Use lowercase for file names [NAMING-03]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use lowercase for file names [NAMING-03]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-07", "name": "Begin member variable names with a lowercase letters", "shortDescription": { "text": "Begin member variable names with a lowercase letters" }, "fullDescription": { "text": "Begin member variable names with a lowercase letters [NAMING-07]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Begin member variable names with a lowercase letters [NAMING-07]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-14", "name": "Begin class data member names with 'its'", "shortDescription": { "text": "Begin class data member names with 'its'" }, "fullDescription": { "text": "Begin class data member names with 'its' [NAMING-14]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Begin class data member names with 'its' [NAMING-14]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-15", "name": "Begin all double type variable with 'd'", "shortDescription": { "text": "Begin all double type variable with 'd'" }, "fullDescription": { "text": "Begin all double type variable with 'd' [NAMING-15]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Begin all double type variable with 'd' [NAMING-15]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-17", "name": "Begin all function names with uppercase letter", "shortDescription": { "text": "Begin all function names with uppercase letter" }, "fullDescription": { "text": "Begin all function names with uppercase letter [NAMING-17]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Begin all function names with uppercase letter [NAMING-17]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-19", "name": "Begin all integer type variable with 'i'", "shortDescription": { "text": "Begin all integer type variable with 'i'" }, "fullDescription": { "text": "Begin all integer type variable with 'i' [NAMING-19]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Begin all integer type variable with 'i' [NAMING-19]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-22", "name": "Prefix a variable type 'pointer' with a 'p' character", "shortDescription": { "text": "Prefix a variable type 'pointer' with a 'p' character" }, "fullDescription": { "text": "Prefix a variable type 'pointer' with a 'p' character [NAMING-22]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefix a variable type 'pointer' with a 'p' character [NAMING-22]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-33", "name": "Do not use identifiers which begin with one or two underscores (`_' or `__')", "shortDescription": { "text": "Do not use identifiers which begin with one or two underscores (`_' or `__')" }, "fullDescription": { "text": "Do not use identifiers which begin with one or two underscores (`_' or `__') [NAMING-33]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not use identifiers which begin with one or two underscores (`_' or `__') [NAMING-33]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-37", "name": "Include files in C++ always have the file name extension '.hh'", "shortDescription": { "text": "Include files in C++ always have the file name extension '.hh'" }, "fullDescription": { "text": "Include files in C++ always have the file name extension '.hh' [NAMING-37]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Include files in C++ always have the file name extension '.hh' [NAMING-37]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-38", "name": "Implementation files in C++ always have the file name extension \".cc\"", "shortDescription": { "text": "Implementation files in C++ always have the file name extension \".cc\"" }, "fullDescription": { "text": "Implementation files in C++ always have the file name extension \".cc\" [NAMING-38]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Implementation files in C++ always have the file name extension \".cc\" [NAMING-38]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-39", "name": "Inline definition files always have the file name extension \".icc\"", "shortDescription": { "text": "Inline definition files always have the file name extension \".icc\"" }, "fullDescription": { "text": "Inline definition files always have the file name extension \".icc\" [NAMING-39]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Inline definition files always have the file name extension \".icc\" [NAMING-39]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-40", "name": "Only the first word of the name of a class, structure, namespace, enumeration, or typedef will begin with an uppercase letter", "shortDescription": { "text": "Only the first word of the name of a class, structure, namespace, enumeration, or typedef will begin with an uppercase letter" }, "fullDescription": { "text": "Only the first word of the name of a class, structure, namespace, enumeration, or typedef will begin with an uppercase letter [NAMING-40]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Only the first word of the name of a class, structure, namespace, enumeration, or typedef will begin with an uppercase letter [NAMING-40]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-41", "name": "Header files will always have a file name extension of '.h'", "shortDescription": { "text": "Header files will always have a file name extension of '.h'" }, "fullDescription": { "text": "Header files will always have a file name extension of '.h' [NAMING-41]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Header files will always have a file name extension of '.h' [NAMING-41]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-43", "name": "File name extension, if present, should be \"*.cpp\" or \"*.h\"", "shortDescription": { "text": "File name extension, if present, should be \"*.cpp\" or \"*.h\"" }, "fullDescription": { "text": "File name extension, if present, should be \"*.cpp\" or \"*.h\" [NAMING-43]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "File name extension, if present, should be \"*.cpp\" or \"*.h\" [NAMING-43]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-44", "name": "All letters contained in function and variable names will be composed entirely of lowercase letters", "shortDescription": { "text": "All letters contained in function and variable names will be composed entirely of lowercase letters" }, "fullDescription": { "text": "All letters contained in function and variable names will be composed entirely of lowercase letters [NAMING-44]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "All letters contained in function and variable names will be composed entirely of lowercase letters [NAMING-44]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-45", "name": "Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers", "shortDescription": { "text": "Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" }, "fullDescription": { "text": "Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers [NAMING-45]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers [NAMING-45]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-47", "name": "Different identifiers shall be typographically unambiguous", "shortDescription": { "text": "Different identifiers shall be typographically unambiguous" }, "fullDescription": { "text": "Different identifiers shall be typographically unambiguous [NAMING-47]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Different identifiers shall be typographically unambiguous [NAMING-47]" }, "properties": { "tags": [ "Naming Conventions" ] } }, { "id": "NAMING-HN-11", "name": "Hungarian notation for constant parameters", "shortDescription": { "text": "Hungarian notation for constant parameters" }, "fullDescription": { "text": "Hungarian notation for constant parameters [NAMING-HN-11]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for constant parameters [NAMING-HN-11]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-12", "name": "Hungarian notation for double-precision floating point types", "shortDescription": { "text": "Hungarian notation for double-precision floating point types" }, "fullDescription": { "text": "Hungarian notation for double-precision floating point types [NAMING-HN-12]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for double-precision floating point types [NAMING-HN-12]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-16", "name": "Hungarian notation for dynamically allocated array", "shortDescription": { "text": "Hungarian notation for dynamically allocated array" }, "fullDescription": { "text": "Hungarian notation for dynamically allocated array [NAMING-HN-16]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for dynamically allocated array [NAMING-HN-16]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-19", "name": "Hungarian notation for class declaration", "shortDescription": { "text": "Hungarian notation for class declaration" }, "fullDescription": { "text": "Hungarian notation for class declaration [NAMING-HN-19]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for class declaration [NAMING-HN-19]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-22", "name": "Hungarian notation for int types", "shortDescription": { "text": "Hungarian notation for int types" }, "fullDescription": { "text": "Hungarian notation for int types [NAMING-HN-22]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for int types [NAMING-HN-22]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-23", "name": "Hungarian notation for int pointer, array, or reference types", "shortDescription": { "text": "Hungarian notation for int pointer, array, or reference types" }, "fullDescription": { "text": "Hungarian notation for int pointer, array, or reference types [NAMING-HN-23]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for int pointer, array, or reference types [NAMING-HN-23]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-29", "name": "Hungarian notation for member variables", "shortDescription": { "text": "Hungarian notation for member variables" }, "fullDescription": { "text": "Hungarian notation for member variables [NAMING-HN-29]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for member variables [NAMING-HN-29]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-30", "name": "Hungarian notation for int types", "shortDescription": { "text": "Hungarian notation for int types" }, "fullDescription": { "text": "Hungarian notation for int types [NAMING-HN-30]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for int types [NAMING-HN-30]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-31", "name": "Hungarian notation for int pointer, array, or reference types", "shortDescription": { "text": "Hungarian notation for int pointer, array, or reference types" }, "fullDescription": { "text": "Hungarian notation for int pointer, array, or reference types [NAMING-HN-31]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for int pointer, array, or reference types [NAMING-HN-31]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-34", "name": "Hungarian notation for pointer", "shortDescription": { "text": "Hungarian notation for pointer" }, "fullDescription": { "text": "Hungarian notation for pointer [NAMING-HN-34]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for pointer [NAMING-HN-34]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-35", "name": "Hungarian notation for reference parameters", "shortDescription": { "text": "Hungarian notation for reference parameters" }, "fullDescription": { "text": "Hungarian notation for reference parameters [NAMING-HN-35]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for reference parameters [NAMING-HN-35]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-43", "name": "Hungarian notation for word types", "shortDescription": { "text": "Hungarian notation for word types" }, "fullDescription": { "text": "Hungarian notation for word types [NAMING-HN-43]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for word types [NAMING-HN-43]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "NAMING-HN-44", "name": "Hungarian notation for word pointer, array, or reference types", "shortDescription": { "text": "Hungarian notation for word pointer, array, or reference types" }, "fullDescription": { "text": "Hungarian notation for word pointer, array, or reference types [NAMING-HN-44]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Hungarian notation for word pointer, array, or reference types [NAMING-HN-44]" }, "properties": { "tags": [ "Naming Conventions", "Hungarian Notation" ] } }, { "id": "OOP-22", "name": "Define a virtual destructor in classes used as base classes which have virtual functions", "shortDescription": { "text": "Define a virtual destructor in classes used as base classes which have virtual functions" }, "fullDescription": { "text": "Define a virtual destructor in classes used as base classes which have virtual functions [OOP-22]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Define a virtual destructor in classes used as base classes which have virtual functions [OOP-22]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-23", "name": "If a class has virtual functions it shall have a virtual destructor", "shortDescription": { "text": "If a class has virtual functions it shall have a virtual destructor" }, "fullDescription": { "text": "If a class has virtual functions it shall have a virtual destructor [OOP-23]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "If a class has virtual functions it shall have a virtual destructor [OOP-23]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-21", "name": "Use the virtual keyword if a subclass implements a virtual function", "shortDescription": { "text": "Use the virtual keyword if a subclass implements a virtual function" }, "fullDescription": { "text": "Use the virtual keyword if a subclass implements a virtual function [OOP-21]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use the virtual keyword if a subclass implements a virtual function [OOP-21]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-25", "name": "Avoid declaring virtual functions inline", "shortDescription": { "text": "Avoid declaring virtual functions inline" }, "fullDescription": { "text": "Avoid declaring virtual functions inline [OOP-25]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid declaring virtual functions inline [OOP-25]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OOP-36", "name": "Public member functions shall not return non-const handles to private\/protected class-data", "shortDescription": { "text": "Public member functions shall not return non-const handles to private\/protected class-data" }, "fullDescription": { "text": "Public member functions shall not return non-const handles to private\/protected class-data [OOP-36]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Public member functions shall not return non-const handles to private\/protected class-data [OOP-36]" }, "properties": { "tags": [ "Object Oriented" ] } }, { "id": "OPT-04", "name": "Prefer canonical form of ++ and --. Prefer calling the prefix forms", "shortDescription": { "text": "Prefer canonical form of ++ and --. Prefer calling the prefix forms" }, "fullDescription": { "text": "Prefer canonical form of ++ and --. Prefer calling the prefix forms [OPT-04]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer canonical form of ++ and --. Prefer calling the prefix forms [OPT-04]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-05", "name": "Avoid unused private member variables", "shortDescription": { "text": "Avoid unused private member variables" }, "fullDescription": { "text": "Avoid unused private member variables [OPT-05]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid unused private member variables [OPT-05]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-14", "name": "Pass objects by reference instead of by value", "shortDescription": { "text": "Pass objects by reference instead of by value" }, "fullDescription": { "text": "Pass objects by reference instead of by value [OPT-14]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Pass objects by reference instead of by value [OPT-14]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-17", "name": "Avoid inline constructors and destructors", "shortDescription": { "text": "Avoid inline constructors and destructors" }, "fullDescription": { "text": "Avoid inline constructors and destructors [OPT-17]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Avoid inline constructors and destructors [OPT-17]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OPT-27", "name": "The number of accessor and mutator functions should be minimized", "shortDescription": { "text": "The number of accessor and mutator functions should be minimized" }, "fullDescription": { "text": "The number of accessor and mutator functions should be minimized [OPT-27]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The number of accessor and mutator functions should be minimized [OPT-27]" }, "properties": { "tags": [ "Optimization" ] } }, { "id": "OWASP2019-API4-b", "name": "Ensure resources are freed", "shortDescription": { "text": "Ensure resources are freed" }, "fullDescription": { "text": "Ensure resources are freed [OWASP2019-API4-b]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Ensure resources are freed [OWASP2019-API4-b]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API4 Lack of Resources & Rate Limiting" ], "security-severity": "9.5" } }, { "id": "OWASP2019-API4-a", "name": "Validate potentially tainted data before it is used to determine the size of memory allocation", "shortDescription": { "text": "Validate potentially tainted data before it is used to determine the size of memory allocation" }, "fullDescription": { "text": "Validate potentially tainted data before it is used to determine the size of memory allocation [OWASP2019-API4-a]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Validate potentially tainted data before it is used to determine the size of memory allocation [OWASP2019-API4-a]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API4 Lack of Resources & Rate Limiting" ], "security-severity": "8" } }, { "id": "OWASP2019-API9-d", "name": "Use of floating-point arithmetic shall be documented", "shortDescription": { "text": "Use of floating-point arithmetic shall be documented" }, "fullDescription": { "text": "Use of floating-point arithmetic shall be documented [OWASP2019-API9-d]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use of floating-point arithmetic shall be documented [OWASP2019-API9-d]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API9 Improper Assets Management" ], "security-severity": "6" } }, { "id": "OWASP2019-API9-e", "name": "Objects or functions with external linkage shall be declared in a header file", "shortDescription": { "text": "Objects or functions with external linkage shall be declared in a header file" }, "fullDescription": { "text": "Objects or functions with external linkage shall be declared in a header file [OWASP2019-API9-e]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Objects or functions with external linkage shall be declared in a header file [OWASP2019-API9-e]" }, "properties": { "tags": [ "OWASP API Security Top 10 (2019)", "OWASP API9 Improper Assets Management" ], "security-severity": "4" } }, { "id": "PB-05", "name": "Return value of a function must match declared return type", "shortDescription": { "text": "Return value of a function must match declared return type" }, "fullDescription": { "text": "Return value of a function must match declared return type [PB-05]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Return value of a function must match declared return type [PB-05]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PB-76", "name": "C-style strings shall not be used", "shortDescription": { "text": "C-style strings shall not be used" }, "fullDescription": { "text": "C-style strings shall not be used [PB-76]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "C-style strings shall not be used [PB-76]" }, "properties": { "tags": [ "Possible Bugs" ] } }, { "id": "PFO-03", "name": "An include file should not contain more than one class definition", "shortDescription": { "text": "An include file should not contain more than one class definition" }, "fullDescription": { "text": "An include file should not contain more than one class definition [PFO-03]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "An include file should not contain more than one class definition [PFO-03]" }, "properties": { "tags": [ "Physical File Organization" ] } }, { "id": "PFO-07", "name": "Use multiple include guards with pattern based on the header file name", "shortDescription": { "text": "Use multiple include guards with pattern based on the header file name" }, "fullDescription": { "text": "Use multiple include guards with pattern based on the header file name [PFO-07]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Use multiple include guards with pattern based on the header file name [PFO-07]" }, "properties": { "tags": [ "Physical File Organization" ] } }, { "id": "PFO-10", "name": "Do not define more than on class in a header file", "shortDescription": { "text": "Do not define more than on class in a header file" }, "fullDescription": { "text": "Do not define more than on class in a header file [PFO-10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Do not define more than on class in a header file [PFO-10]" }, "properties": { "tags": [ "Physical File Organization" ] } }, { "id": "PFO-04", "name": "Every implementation file should declare a local constant string that describes the file", "shortDescription": { "text": "Every implementation file should declare a local constant string that describes the file" }, "fullDescription": { "text": "Every implementation file should declare a local constant string that describes the file [PFO-04]" }, "defaultConfiguration": { "level": "note" }, "help": { "text": "Every implementation file should declare a local constant string that describes the file [PFO-04]" }, "properties": { "tags": [ "Physical File Organization" ] } }, { "id": "PORT-13", "name": "The type int shall always be declared as unsigned int or signed int", "shortDescription": { "text": "The type int shall always be declared as unsigned int or signed int" }, "fullDescription": { "text": "The type int shall always be declared as unsigned int or signed int [PORT-13]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The type int shall always be declared as unsigned int or signed int [PORT-13]" }, "properties": { "tags": [ "Portability" ] } }, { "id": "PREPROC-09", "name": "The #include directive shall use the <filename.h> notation to include header files", "shortDescription": { "text": "The #include directive shall use the <filename.h> notation to include header files" }, "fullDescription": { "text": "The #include directive shall use the <filename.h> notation to include header files [PREPROC-09]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "The #include directive shall use the <filename.h> notation to include header files [PREPROC-09]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-08", "name": "The #include pre-processor directive will only be used to include header (*.h) files", "shortDescription": { "text": "The #include pre-processor directive will only be used to include header (*.h) files" }, "fullDescription": { "text": "The #include pre-processor directive will only be used to include header (*.h) files [PREPROC-08]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The #include pre-processor directive will only be used to include header (*.h) files [PREPROC-08]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "PREPROC-18", "name": "The input\/output library stdio.h shall not be included", "shortDescription": { "text": "The input\/output library stdio.h shall not be included" }, "fullDescription": { "text": "The input\/output library stdio.h shall not be included [PREPROC-18]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "The input\/output library stdio.h shall not be included [PREPROC-18]" }, "properties": { "tags": [ "Preprocessor" ] } }, { "id": "SECURITY-13", "name": "Avoid using unsafe string functions that do not check bounds", "shortDescription": { "text": "Avoid using unsafe string functions that do not check bounds" }, "fullDescription": { "text": "Avoid using unsafe string functions that do not check bounds [SECURITY-13]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid using unsafe string functions that do not check bounds [SECURITY-13]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-14", "name": "Do not use scanf and fscanf functions without specifying variable size in format string", "shortDescription": { "text": "Do not use scanf and fscanf functions without specifying variable size in format string" }, "fullDescription": { "text": "Do not use scanf and fscanf functions without specifying variable size in format string [SECURITY-14]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Do not use scanf and fscanf functions without specifying variable size in format string [SECURITY-14]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-35", "name": "Don't trust any value of command line if attacker can set them", "shortDescription": { "text": "Don't trust any value of command line if attacker can set them" }, "fullDescription": { "text": "Don't trust any value of command line if attacker can set them [SECURITY-35]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Don't trust any value of command line if attacker can set them [SECURITY-35]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "SECURITY-38", "name": "Untrusted data is used as a loop boundary", "shortDescription": { "text": "Untrusted data is used as a loop boundary" }, "fullDescription": { "text": "Untrusted data is used as a loop boundary [SECURITY-38]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Untrusted data is used as a loop boundary [SECURITY-38]" }, "properties": { "tags": [ "Security" ], "security-severity": "8" } }, { "id": "STL-10", "name": "Prefer vector and string to dynamically allocated arrays", "shortDescription": { "text": "Prefer vector and string to dynamically allocated arrays" }, "fullDescription": { "text": "Prefer vector and string to dynamically allocated arrays [STL-10]" }, "defaultConfiguration": { "level": "warning" }, "help": { "text": "Prefer vector and string to dynamically allocated arrays [STL-10]" }, "properties": { "tags": [ "STL Best Practices" ] } }] } }, "originalUriBaseIds": {"PROJECTROOT-1": { "uri": "file:/mnt/d/bitbucket/flowanalysiscpp/" }}, "results": [{ "ruleId": "OWASP2019-API9-e", "level": "warning", "message": { "text": "Function 'runGameThreads' has external linkage and is not declared in the header", "markdown": "**\\[Line 134\\] Function 'runGameThreads' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-106623271", "unbViolId": "ac9b14e0-898f-3709-bf9c-af3cd673572a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-A3_3_1-a", "level": "error", "message": { "text": "Function 'runGameThreads' has external linkage and is not declared in the header", "markdown": "**\\[Line 134\\] Function 'runGameThreads' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-106623271", "unbViolId": "988a1e7c-dc81-3dc4-9db6-bfa5968b8304" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "JSF-137", "level": "warning", "message": { "text": "Function 'runGameThreads' has external linkage and is not declared in the header", "markdown": "**\\[Line 134\\] Function 'runGameThreads' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-106623271", "unbViolId": "ff5fd906-a3fc-3f89-af47-f93c8847a02f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA-023", "level": "warning", "message": { "text": "Function 'runGameThreads' has external linkage and is not declared in the header", "markdown": "**\\[Line 134\\] Function 'runGameThreads' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-106623271", "unbViolId": "9c6237be-4f26-315b-96c2-6d480c0b7266" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2008-3_3_1", "level": "error", "message": { "text": "Function 'runGameThreads' has external linkage and is not declared in the header", "markdown": "**\\[Line 134\\] Function 'runGameThreads' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-106623271", "unbViolId": "844cc221-df1f-3d19-b82a-9fd27f710084" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "CERT_C-DCL15-a", "level": "warning", "message": { "text": "Function 'runGameThreads' has external linkage and is not declared in the header", "markdown": "**\\[Line 134\\] Function 'runGameThreads' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-106623271", "unbViolId": "a868f4f4-3773-3c7f-ba4e-0921fdbee58d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2004-8_10", "level": "warning", "message": { "text": "Function 'runGameThreads' has external linkage and is not declared in the header", "markdown": "**\\[Line 134\\] Function 'runGameThreads' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-106623271", "unbViolId": "95b7aa0e-91a1-395b-bbb6-25ae6340f519" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'runGameThreads' should be composed only of lowercase letters", "markdown": "**\\[Line 134\\] The name 'runGameThreads' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-106623271", "unbViolId": "2d375160-be99-33ec-b840-d1d12e60968e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'runGameThreads' should be composed only of lowercase letters", "markdown": "**\\[Line 134\\] The name 'runGameThreads' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-106623271", "unbViolId": "7ed483bc-6670-386e-8d7e-86ac2a4ff1ff" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "JSF-098", "level": "warning", "message": { "text": "Do not declare the 'runGameThreads' function in the global namespace", "markdown": "**\\[Line 134\\] Do not declare the 'runGameThreads' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-106623271", "unbViolId": "6012624f-c6b0-3822-af7e-72077056e4bd" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-M7_3_1-a", "level": "error", "message": { "text": "Do not declare the 'runGameThreads' function in the global namespace", "markdown": "**\\[Line 134\\] Do not declare the 'runGameThreads' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-106623271", "unbViolId": "e6b2dcf1-2356-371a-bf64-fa0907f6e024" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "CODSTA-CPP-36", "level": "warning", "message": { "text": "Do not declare the 'runGameThreads' function in the global namespace", "markdown": "**\\[Line 134\\] Do not declare the 'runGameThreads' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-106623271", "unbViolId": "15d5143e-c70b-3825-9c2b-c1bc735ead05" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2008-7_3_1", "level": "error", "message": { "text": "Do not declare the 'runGameThreads' function in the global namespace", "markdown": "**\\[Line 134\\] Do not declare the 'runGameThreads' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-106623271", "unbViolId": "fb917454-4e30-3dbe-97e9-e7ce54d83823" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'runGameThreads' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 134\\] The 'runGameThreads' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-106623271", "unbViolId": "7f2fd686-adfd-3aee-ae06-9a7bd5a29f47" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'runGameThreads' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 134\\] The 'runGameThreads' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-106623271", "unbViolId": "d929210d-5d49-3935-807a-5f5b790ba579" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-A15_4_4-a", "level": "error", "message": { "text": "The 'runGameThreads' function should be declared 'noexcept'", "markdown": "**\\[Line 134\\] The 'runGameThreads' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-106623271", "unbViolId": "13af1e12-9426-3bfd-8673-43173b4eef64" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "CODSTA-MCPP-09", "level": "warning", "message": { "text": "The 'runGameThreads' function should be declared 'noexcept'", "markdown": "**\\[Line 134\\] The 'runGameThreads' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-106623271", "unbViolId": "963e154d-115a-384f-86a8-fed3b5df816d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "FORMAT-28", "level": "warning", "message": { "text": "Return type is not placed in line before function 'runGameThreads'", "markdown": "**\\[Line 134\\] Return type is not placed in line before function 'runGameThreads'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-106623271", "unbViolId": "8e9ea149-3f42-3c02-adfc-d74475ff98a5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'runGameThreads' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 134\\] Function 'runGameThreads' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-106623271", "unbViolId": "f3a330cd-c3e8-358d-978f-94df46d72791" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'runGameThreads' has Essential Complexity value: 1", "markdown": "**\\[Line 134\\] Function 'runGameThreads' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-106623271", "unbViolId": "3c5d168c-5a4c-385e-a18d-32e70cdc3763" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "NAMING-17", "level": "warning", "message": { "text": "Naming convention not followed: runGameThreads", "markdown": "**\\[Line 134\\] Naming convention not followed: runGameThreads**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-106623271", "unbViolId": "89fc2059-c424-32f2-9913-74658717a0d9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "GLOBAL-UNUSEDFUNC", "level": "warning", "message": { "text": "The 'runGameThreads' function is not used in the testing scope", "markdown": "**\\[Line 134\\] The 'runGameThreads' function is not used in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-106623271", "unbViolId": "21f62b22-0a3f-3605-9e2d-55e372aa7966" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-M0_1_10-a", "level": "warning", "message": { "text": "The 'runGameThreads' function is not used in the testing scope", "markdown": "**\\[Line 134\\] The 'runGameThreads' function is not used in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-106623271", "unbViolId": "8d213b97-1a86-3d08-87bf-c4e2696ce908" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2008-0_1_10_b", "level": "error", "message": { "text": "The 'runGameThreads' function is not used in the testing scope", "markdown": "**\\[Line 134\\] The 'runGameThreads' function is not used in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-106623271", "unbViolId": "7a7064b8-6021-3c66-85ec-3ad9fdfa7d30" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 134, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 135\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "123", "unbViolId": "f6b70fad-9d25-369c-a6e7-2178af9fd40d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 135, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 136\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "409232213", "unbViolId": "bd8f39ed-f3ce-391b-8441-dfa1150d4cab" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 136, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 136\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "409232213", "unbViolId": "ef13ec27-b04c-34fe-9297-96222d4b90d1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 136, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 136\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "409232213", "unbViolId": "1b5aa1de-2ed4-35ff-ae81-0cb1a97ff049" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 136, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CODSTA-27", "level": "warning", "message": { "text": "Global variable 'exitGame' is modified in function 'runGameThreads'", "markdown": "**\\[Line 136\\] Global variable 'exitGame' is modified in function 'runGameThreads'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "409232213", "unbViolId": "c4dd58bd-7d34-3115-bb09-76feb4c6b03d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 136, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 137\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "8cd6a678-939b-3b3a-b648-2cb259244909" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 137\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "2f1f5737-c572-39eb-9904-c279be746847" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 137\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "4a2843bc-95b2-364e-a2a9-7658a9a8b693" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-142_b", "level": "error", "message": { "text": "The variable \"thread1\" was not initialized when declared", "markdown": "**\\[Line 137\\] The variable \"thread1\" was not initialized when declared**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "c2f4c029-e1ef-3018-84b6-bacd954b7e19" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "INIT-03", "level": "warning", "message": { "text": "The variable \"thread1\" was not initialized when declared", "markdown": "**\\[Line 137\\] The variable \"thread1\" was not initialized when declared**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "75c68ddd-374f-3dda-8ac9-502d62778c9c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'thread1' variable should be commented", "markdown": "**\\[Line 137\\] The 'thread1' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "89d554c6-202a-312a-9ac9-211cc06704e5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'thread1' variable should be commented", "markdown": "**\\[Line 137\\] The 'thread1' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "5211c740-75f7-3339-ab5e-06ac49792b05" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "AUTOSAR-M0_1_4-a", "level": "error", "message": { "text": "The 'thread1' variable has only one use", "markdown": "**\\[Line 137\\] The 'thread1' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "17249040-672a-336d-bd6e-14cc87eb3d43" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "MISRA2008-0_1_4", "level": "error", "message": { "text": "The 'thread1' variable has only one use", "markdown": "**\\[Line 137\\] The 'thread1' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "6afded98-b6dd-33ed-88c0-e48f8a3cebb4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "GLOBAL-ONEUSEVAR", "level": "warning", "message": { "text": "The 'thread1' variable has only one use", "markdown": "**\\[Line 137\\] The 'thread1' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "f92fc1db-e383-3e92-b5ba-4a0cb8e56fa3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "AUTOSAR-M0_1_4-a", "level": "error", "message": { "text": "The 'thread2' variable has only one use", "markdown": "**\\[Line 137\\] The 'thread2' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "a33dbd23-4222-359a-b614-06be40607487" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "MISRA2008-0_1_4", "level": "error", "message": { "text": "The 'thread2' variable has only one use", "markdown": "**\\[Line 137\\] The 'thread2' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "4058e6ee-41b2-3930-b6e2-7f1c8e5cd22a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "GLOBAL-ONEUSEVAR", "level": "warning", "message": { "text": "The 'thread2' variable has only one use", "markdown": "**\\[Line 137\\] The 'thread2' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "36f8f0ef-cefb-3c9e-85e4-812ad70f287c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "JSF-142_b", "level": "error", "message": { "text": "The variable \"thread2\" was not initialized when declared", "markdown": "**\\[Line 137\\] The variable \"thread2\" was not initialized when declared**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "eff7077b-7f25-330a-b977-b208a99509da" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "INIT-03", "level": "warning", "message": { "text": "The variable \"thread2\" was not initialized when declared", "markdown": "**\\[Line 137\\] The variable \"thread2\" was not initialized when declared**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "346c5fe9-b3d7-3e4c-babf-86d14f315619" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "JSF-152", "level": "error", "message": { "text": "Declare variable 'thread2' in a separate line", "markdown": "**\\[Line 137\\] Declare variable 'thread2' in a separate line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "ecafaf52-243b-323a-8595-ee0de69503b8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "AUTOSAR-A7_1_7-b", "level": "error", "message": { "text": "Declare variable 'thread2' in a separate line", "markdown": "**\\[Line 137\\] Declare variable 'thread2' in a separate line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "c88b689e-b97d-38e3-8cb6-7c43e7c67d2f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "HICPP-7_1_1-a", "level": "warning", "message": { "text": "Declare variable 'thread2' in a separate line", "markdown": "**\\[Line 137\\] Declare variable 'thread2' in a separate line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "059945a9-7c97-39d5-be5c-38e4904265fb" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "FORMAT-29", "level": "warning", "message": { "text": "Declare variable 'thread2' in a separate line", "markdown": "**\\[Line 137\\] Declare variable 'thread2' in a separate line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "3d355462-cd9d-33cf-a012-2238486ce932" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "AUTOSAR-A7_1_7-c", "level": "error", "message": { "text": "Declare variable 'thread2' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread2' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "27eb51d3-8549-3727-a248-4cdd58ef76c3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "FORMAT-33", "level": "warning", "message": { "text": "Declare variable 'thread2' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread2' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "a23eaced-a1b7-3eb7-80c3-0f3c210fd054" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "MISRA2008-8_0_1", "level": "error", "message": { "text": "Declare variable 'thread2' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread2' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "cf95d8f5-f823-3857-9286-22b12f47d1f2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "HICPP-7_1_1-b", "level": "warning", "message": { "text": "Declare variable 'thread2' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread2' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "c771bc21-bc77-36bd-bba8-f312ac8a7f43" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "AUTOSAR-M8_0_1-a", "level": "error", "message": { "text": "Declare variable 'thread2' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread2' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "96cfac7e-fadb-3195-a22c-859e5a9cf091" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "CERT_C-DCL04-a", "level": "warning", "message": { "text": "Declare variable 'thread2' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread2' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "311b8343-9ec7-3752-85ed-19473f4909a8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'thread2' variable should be commented", "markdown": "**\\[Line 137\\] The 'thread2' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "0bf6dbb5-acc6-3197-8bfa-0ddc30bbdcd7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'thread2' variable should be commented", "markdown": "**\\[Line 137\\] The 'thread2' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "bf25040d-47c2-3b4d-abca-c2b791617ca4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "JSF-142_b", "level": "error", "message": { "text": "The variable \"thread3\" was not initialized when declared", "markdown": "**\\[Line 137\\] The variable \"thread3\" was not initialized when declared**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "da264851-1048-3e7f-af80-492a2359d96e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "INIT-03", "level": "warning", "message": { "text": "The variable \"thread3\" was not initialized when declared", "markdown": "**\\[Line 137\\] The variable \"thread3\" was not initialized when declared**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "181e549f-0fc4-30fe-a438-e4784d02ff19" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "JSF-152", "level": "error", "message": { "text": "Declare variable 'thread3' in a separate line", "markdown": "**\\[Line 137\\] Declare variable 'thread3' in a separate line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "b3ef5a21-313e-3b17-a0b9-3353dfae45e4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "AUTOSAR-A7_1_7-b", "level": "error", "message": { "text": "Declare variable 'thread3' in a separate line", "markdown": "**\\[Line 137\\] Declare variable 'thread3' in a separate line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "784f0faf-69c1-3458-a5da-44e9f964b4b9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "HICPP-7_1_1-a", "level": "warning", "message": { "text": "Declare variable 'thread3' in a separate line", "markdown": "**\\[Line 137\\] Declare variable 'thread3' in a separate line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "9a897672-faa2-3a2a-b70d-c390ccc2b963" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "FORMAT-29", "level": "warning", "message": { "text": "Declare variable 'thread3' in a separate line", "markdown": "**\\[Line 137\\] Declare variable 'thread3' in a separate line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "0b2e03ee-420c-332a-b4b7-788dd0e8875e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "AUTOSAR-A7_1_7-c", "level": "error", "message": { "text": "Declare variable 'thread3' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread3' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "2c88f0ce-5721-3bb5-aef1-f6c264633d24" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "FORMAT-33", "level": "warning", "message": { "text": "Declare variable 'thread3' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread3' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "b2fb3ac7-ad71-3a9c-a1d6-032ac72ef435" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "MISRA2008-8_0_1", "level": "error", "message": { "text": "Declare variable 'thread3' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread3' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "bbe76150-5832-34b4-913c-158d15c76492" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "HICPP-7_1_1-b", "level": "warning", "message": { "text": "Declare variable 'thread3' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread3' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "c195e63b-2be1-32de-ab21-6cdeaa21e81b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "AUTOSAR-M8_0_1-a", "level": "error", "message": { "text": "Declare variable 'thread3' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread3' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "c27aebf5-0cda-3d29-a9cf-17d00e6ca864" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "CERT_C-DCL04-a", "level": "warning", "message": { "text": "Declare variable 'thread3' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread3' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "d1546a06-2381-3a59-9a7a-ea41122a4c84" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'thread3' variable should be commented", "markdown": "**\\[Line 137\\] The 'thread3' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "4b998c51-d78e-30ef-b07b-bf99c2533a21" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'thread3' variable should be commented", "markdown": "**\\[Line 137\\] The 'thread3' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "e9be04ca-b7e0-3132-9bf8-4e51834b1216" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "AUTOSAR-M0_1_4-a", "level": "error", "message": { "text": "The 'thread3' variable has only one use", "markdown": "**\\[Line 137\\] The 'thread3' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "a1da4ccf-32be-3913-871b-84e37e3292b8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "MISRA2008-0_1_4", "level": "error", "message": { "text": "The 'thread3' variable has only one use", "markdown": "**\\[Line 137\\] The 'thread3' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "83b1f568-6b15-35fc-b645-1a0a3202b48d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "GLOBAL-ONEUSEVAR", "level": "warning", "message": { "text": "The 'thread3' variable has only one use", "markdown": "**\\[Line 137\\] The 'thread3' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "f35a6da0-284d-35ea-8760-46f8a88e09c4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "AUTOSAR-M0_1_4-a", "level": "error", "message": { "text": "The 'thread4' variable has only one use", "markdown": "**\\[Line 137\\] The 'thread4' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "d06a7265-d407-33ab-b7f8-e3cc4a6e34f4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "MISRA2008-0_1_4", "level": "error", "message": { "text": "The 'thread4' variable has only one use", "markdown": "**\\[Line 137\\] The 'thread4' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "e9d4501a-5e0a-3e41-bc48-6066aea797c1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "GLOBAL-ONEUSEVAR", "level": "warning", "message": { "text": "The 'thread4' variable has only one use", "markdown": "**\\[Line 137\\] The 'thread4' variable has only one use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "4966829b-a896-357e-be98-0963c4e87673" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "JSF-142_b", "level": "error", "message": { "text": "The variable \"thread4\" was not initialized when declared", "markdown": "**\\[Line 137\\] The variable \"thread4\" was not initialized when declared**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "49a736d8-b0cc-3a6c-984f-33353817cfe2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "INIT-03", "level": "warning", "message": { "text": "The variable \"thread4\" was not initialized when declared", "markdown": "**\\[Line 137\\] The variable \"thread4\" was not initialized when declared**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "3b5c79d4-ca40-37cf-ba82-013aa2d0cc66" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "JSF-152", "level": "error", "message": { "text": "Declare variable 'thread4' in a separate line", "markdown": "**\\[Line 137\\] Declare variable 'thread4' in a separate line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "69dd1a41-97c4-3bb6-a12a-8c68876c233f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "AUTOSAR-A7_1_7-b", "level": "error", "message": { "text": "Declare variable 'thread4' in a separate line", "markdown": "**\\[Line 137\\] Declare variable 'thread4' in a separate line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "9477d24c-8301-3bde-b443-60ea901f7fdf" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "HICPP-7_1_1-a", "level": "warning", "message": { "text": "Declare variable 'thread4' in a separate line", "markdown": "**\\[Line 137\\] Declare variable 'thread4' in a separate line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "a498f1e1-653e-36d8-9e3d-eeb9f4c67c2b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "FORMAT-29", "level": "warning", "message": { "text": "Declare variable 'thread4' in a separate line", "markdown": "**\\[Line 137\\] Declare variable 'thread4' in a separate line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "25cb916e-29ae-3d9a-8b68-2407afbe83d9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "AUTOSAR-A7_1_7-c", "level": "error", "message": { "text": "Declare variable 'thread4' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread4' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "8f46d0c1-0a5c-3bed-9e20-ab041a046cf0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "FORMAT-33", "level": "warning", "message": { "text": "Declare variable 'thread4' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread4' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "bac8652a-9de1-39e2-9dea-103b04f39060" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "MISRA2008-8_0_1", "level": "error", "message": { "text": "Declare variable 'thread4' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread4' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "dd3fdbba-5bee-3c83-a650-213d08197fe9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "HICPP-7_1_1-b", "level": "warning", "message": { "text": "Declare variable 'thread4' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread4' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "d88ac0f6-cdc8-3dbd-9706-68601ad97850" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "AUTOSAR-M8_0_1-a", "level": "error", "message": { "text": "Declare variable 'thread4' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread4' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "4161b071-cf50-32fb-a7b7-9e26b4b82d83" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "CERT_C-DCL04-a", "level": "warning", "message": { "text": "Declare variable 'thread4' in a separate declaration statement", "markdown": "**\\[Line 137\\] Declare variable 'thread4' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "6dfc6424-c13a-3361-bc11-ce31ac828034" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'thread4' variable should be commented", "markdown": "**\\[Line 137\\] The 'thread4' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "14a392a4-2978-3f64-b14a-b74d2978fef6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'thread4' variable should be commented", "markdown": "**\\[Line 137\\] The 'thread4' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1123182240", "unbViolId": "3ef19b77-f296-35f5-a629-3337f2c08c0d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 137, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 138\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "afebec73-531a-329b-8758-eef9aa24e196" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 138\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "a7d9bbe3-b56c-3a03-a50c-ca1730aa34e7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 138\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "05bfa543-5bb2-3862-89b2-eca2ba8fea05" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "APSC_DV-003235-a", "level": "error", "message": { "text": "The value returned by the POSIX library function 'pthread_create' should be used", "markdown": "**\\[Line 138\\] The value returned by the POSIX library function 'pthread\\_create' should be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "ac38e292-479a-3b7f-a1cc-ed7ce70e5339" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CERT_C-POS54-a", "level": "error", "message": { "text": "The value returned by the POSIX library function 'pthread_create' should be used", "markdown": "**\\[Line 138\\] The value returned by the POSIX library function 'pthread\\_create' should be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "bbdab139-8322-31f8-8f2b-cf9ca4c8a61b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CODSTA-CPP-23", "level": "note", "message": { "text": "The global function 'pthread_create' is called without scope resolution operator '::'", "markdown": "**\\[Line 138\\] The global function 'pthread\\_create' is called without scope resolution operator '::'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "010d698e-0989-382b-a5bc-a85153dced39" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "AUTOSAR-A0_1_2-a", "level": "error", "message": { "text": "Unused function's 'pthread_create' return value", "markdown": "**\\[Line 138\\] Unused function's 'pthread\\_create' return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "75514b98-349f-3248-a94e-e4f36333b66b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CODSTA-CPP-58", "level": "warning", "message": { "text": "Unused function's 'pthread_create' return value", "markdown": "**\\[Line 138\\] Unused function's 'pthread\\_create' return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "1b763ec6-5390-3a8d-af1c-0d2ee2c3adbc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2008-0_1_7", "level": "error", "message": { "text": "Unused function's 'pthread_create' return value", "markdown": "**\\[Line 138\\] Unused function's 'pthread\\_create' return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "6de761a0-a8ed-3e6b-b2cb-bbee84c346fe" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-115_a", "level": "warning", "message": { "text": "Unused function's 'pthread_create' return value", "markdown": "**\\[Line 138\\] Unused function's 'pthread\\_create' return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "ff09f0cf-6f13-31c2-9e25-918016e2e6fa" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CODSTA-122_a", "level": "warning", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 138\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "9a6d07bc-9247-3fe1-92d5-dc9b2f56cab2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRAC2012-RULE_17_7-a", "level": "error", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 138\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "b31c71cf-e614-31cf-816f-fa5cb6f7de62" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CERT_C-EXP12-a", "level": "warning", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 138\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "937b155a-29a8-3393-a21f-fe213a205568" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2012-RULE-17_7_a", "level": "error", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 138\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "52014743-38ca-3123-94c6-b67464f81843" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2004-16_10", "level": "warning", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 138\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "932917c9-021c-3078-84ad-24f703e3a454" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "AUTOSAR-M0_3_2-a", "level": "error", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 138\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "30abf958-37cf-3829-8f92-222ec7a51739" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2008-0_3_2", "level": "error", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 138\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "2fa3cd4e-09dc-3c16-80d1-b1aa62759cc4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-115", "level": "warning", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 138\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "d941eddd-ffa2-38fc-9828-843c5b70ff15" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "AUTOSAR-A4_10_1-b", "level": "error", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 138\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "8217391c-97d7-3ccd-8007-12c6f4d877a8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "HICPP-2_5_3-a", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 138\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "4972c2e6-a574-3e8e-99ba-8cafd3874be0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "CODSTA-MCPP-04", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 138\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "7cc4503e-0c52-30e7-b1c7-40f115f1c770" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '2' argument to function 'pthread_create' ", "markdown": "**\\[Line 138\\] The value '0' is passed as '2' argument to function 'pthread\\_create' **" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "2aa5eb5e-7dec-3363-80b9-61cc00c872ae" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '2' argument to function 'pthread_create' ", "markdown": "**\\[Line 138\\] The value '0' is passed as '2' argument to function 'pthread\\_create' **" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "5e712883-d5a0-3e06-a221-11526ab80ccc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '2' argument to function 'pthread_create' ", "markdown": "**\\[Line 138\\] The value '0' is passed as '2' argument to function 'pthread\\_create' **" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "b4cbe5b5-0d81-38fd-8f69-c793eaf1ec74" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "CERT_CPP-EXP56-a", "level": "warning", "message": { "text": "Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage", "markdown": "**\\[Line 138\\] Do not assing the pointer to the function with C\\+\\+ language linkage to the pointer to the function with C language linkage**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "c62fe1fe-23c6-3ee9-b1a4-db477ab892db" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "CODSTA-CPP-96", "level": "warning", "message": { "text": "Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage", "markdown": "**\\[Line 138\\] Do not assing the pointer to the function with C\\+\\+ language linkage to the pointer to the function with C language linkage**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "6f3c1aa2-3038-3ea3-b516-36ec43d5d854" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "AUTOSAR-A4_10_1-b", "level": "error", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 138\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "326b858e-242e-3f3c-9f54-475f5608484d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "HICPP-2_5_3-a", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 138\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "aeed5681-1795-39d4-a5a2-f59dbcc27f68" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "CODSTA-MCPP-04", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 138\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "fb9b97e3-030e-3943-baf8-859c009c3db0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '4' argument to function 'pthread_create' ", "markdown": "**\\[Line 138\\] The value '0' is passed as '4' argument to function 'pthread\\_create' **" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "cd262c49-620c-3ccc-b394-796e279fb3eb" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '4' argument to function 'pthread_create' ", "markdown": "**\\[Line 138\\] The value '0' is passed as '4' argument to function 'pthread\\_create' **" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "c9448973-dc62-387c-92a6-707c08b2933d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '4' argument to function 'pthread_create' ", "markdown": "**\\[Line 138\\] The value '0' is passed as '4' argument to function 'pthread\\_create' **" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2033288726", "unbViolId": "f194d360-be25-38d6-a23f-4a08cb3174fb" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 138, "startColumn": 43, "endColumn": 44 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 139\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "c9b17d42-049e-3711-a3ea-a92b5523a82a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 139\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "cfc8a67d-961e-396b-9148-9276179c9ca7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 139\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "f57fd63b-535f-3c9a-ac57-d0f17c580605" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "APSC_DV-003235-a", "level": "error", "message": { "text": "The value returned by the POSIX library function 'pthread_create' should be used", "markdown": "**\\[Line 139\\] The value returned by the POSIX library function 'pthread\\_create' should be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "0229c88b-9985-3e2e-965f-863a387ed018" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CERT_C-POS54-a", "level": "error", "message": { "text": "The value returned by the POSIX library function 'pthread_create' should be used", "markdown": "**\\[Line 139\\] The value returned by the POSIX library function 'pthread\\_create' should be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "7c6fd77f-bd01-3b4e-82e7-1ecd63048634" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CODSTA-CPP-23", "level": "note", "message": { "text": "The global function 'pthread_create' is called without scope resolution operator '::'", "markdown": "**\\[Line 139\\] The global function 'pthread\\_create' is called without scope resolution operator '::'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "a43ad3c8-29b8-345b-8898-8965fc968849" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "AUTOSAR-A0_1_2-a", "level": "error", "message": { "text": "Unused function's 'pthread_create' return value", "markdown": "**\\[Line 139\\] Unused function's 'pthread\\_create' return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "ddd65476-e61b-323a-95a3-ae85c75cbb2d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CODSTA-CPP-58", "level": "warning", "message": { "text": "Unused function's 'pthread_create' return value", "markdown": "**\\[Line 139\\] Unused function's 'pthread\\_create' return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "f2e29f28-5998-3d3c-a645-42dea66487ea" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2008-0_1_7", "level": "error", "message": { "text": "Unused function's 'pthread_create' return value", "markdown": "**\\[Line 139\\] Unused function's 'pthread\\_create' return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "cbaf614c-a68d-3e5c-84d1-32004da7d9ee" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-115_a", "level": "warning", "message": { "text": "Unused function's 'pthread_create' return value", "markdown": "**\\[Line 139\\] Unused function's 'pthread\\_create' return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "45f50bb3-ce68-3e40-be35-a1cc8d5e8d47" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CODSTA-122_a", "level": "warning", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 139\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "f06ccdc3-761b-3a52-b120-285952fcd3ce" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRAC2012-RULE_17_7-a", "level": "error", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 139\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "11b6097b-1a7a-35b5-8d30-931f5c3323f4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CERT_C-EXP12-a", "level": "warning", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 139\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "11c256ce-1f82-30a2-a293-ae0b8513eadf" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2012-RULE-17_7_a", "level": "error", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 139\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "a5a0e4a3-2550-39ee-bf87-285002bc1683" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2004-16_10", "level": "warning", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 139\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "944ed155-b938-33d1-9655-7bc4ce3ee5d8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "AUTOSAR-M0_3_2-a", "level": "error", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 139\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "17a509b3-dcee-3a60-9538-fd36a317f073" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2008-0_3_2", "level": "error", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 139\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "befe1eba-8023-3d2c-b2a2-05481ebf6ca2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-115", "level": "warning", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 139\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "0a0dab25-a59e-3016-9fc5-73d555c03f03" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "AUTOSAR-A4_10_1-b", "level": "error", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 139\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "b0affa0b-2496-3054-82e7-60341d85f420" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "HICPP-2_5_3-a", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 139\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "0c00a3a7-9dd7-3430-872e-c4760bdcc94e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "CODSTA-MCPP-04", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 139\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "4bed7bf4-a65e-393f-a6fd-493e5f646fc3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '2' argument to function 'pthread_create' ", "markdown": "**\\[Line 139\\] The value '0' is passed as '2' argument to function 'pthread\\_create' **" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "d751440d-c706-3bb5-9bbf-a410993e678e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '2' argument to function 'pthread_create' ", "markdown": "**\\[Line 139\\] The value '0' is passed as '2' argument to function 'pthread\\_create' **" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "18ffc7bc-77e4-3bb4-9ae1-92406d8d6888" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '2' argument to function 'pthread_create' ", "markdown": "**\\[Line 139\\] The value '0' is passed as '2' argument to function 'pthread\\_create' **" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "0ba8b7c0-f82f-367b-b04f-33b111fffe80" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "CERT_CPP-EXP56-a", "level": "warning", "message": { "text": "Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage", "markdown": "**\\[Line 139\\] Do not assing the pointer to the function with C\\+\\+ language linkage to the pointer to the function with C language linkage**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "d399310d-bcc2-30c6-84d0-994583f4e37b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "CODSTA-CPP-96", "level": "warning", "message": { "text": "Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage", "markdown": "**\\[Line 139\\] Do not assing the pointer to the function with C\\+\\+ language linkage to the pointer to the function with C language linkage**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "54416a47-97f4-3175-867a-6be2c3852ae9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "AUTOSAR-A4_10_1-b", "level": "error", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 139\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "f98ba81e-465e-3928-8a2e-444de058a6fd" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "HICPP-2_5_3-a", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 139\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "0d3b46d5-de33-3044-b2c7-10d4a4c60c2b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "CODSTA-MCPP-04", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 139\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "33c241db-8069-366c-acb3-04f504272cdf" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '4' argument to function 'pthread_create' ", "markdown": "**\\[Line 139\\] The value '0' is passed as '4' argument to function 'pthread\\_create' **" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "dceaa3e4-09c5-3f17-b264-006e24d3a303" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '4' argument to function 'pthread_create' ", "markdown": "**\\[Line 139\\] The value '0' is passed as '4' argument to function 'pthread\\_create' **" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "d592ee6c-d564-37b8-9d9e-b4e5416a6c84" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '4' argument to function 'pthread_create' ", "markdown": "**\\[Line 139\\] The value '0' is passed as '4' argument to function 'pthread\\_create' **" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1824414877", "unbViolId": "286c372b-f737-3513-a793-d80d75100736" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 139, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 140\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "b120cead-4b54-3a6b-8bf4-e8bb17ad3fd1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 140\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "c0050c38-777e-3c69-af47-a818d4a6d7f9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 140\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "4a960bb0-e83d-307f-b578-04c5a6f0f362" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "APSC_DV-003235-a", "level": "error", "message": { "text": "The value returned by the POSIX library function 'pthread_create' should be used", "markdown": "**\\[Line 140\\] The value returned by the POSIX library function 'pthread\\_create' should be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "0157011d-2b61-3369-aff8-0badac6c4a40" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CERT_C-POS54-a", "level": "error", "message": { "text": "The value returned by the POSIX library function 'pthread_create' should be used", "markdown": "**\\[Line 140\\] The value returned by the POSIX library function 'pthread\\_create' should be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "a7ac7919-a507-32a9-9a15-67e547ea8f7b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CODSTA-CPP-23", "level": "note", "message": { "text": "The global function 'pthread_create' is called without scope resolution operator '::'", "markdown": "**\\[Line 140\\] The global function 'pthread\\_create' is called without scope resolution operator '::'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "381a4c65-27b3-355c-a323-3f3aaf7c6a62" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "AUTOSAR-A0_1_2-a", "level": "error", "message": { "text": "Unused function's 'pthread_create' return value", "markdown": "**\\[Line 140\\] Unused function's 'pthread\\_create' return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "19cf5523-f344-3935-a55c-514842da3b4a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CODSTA-CPP-58", "level": "warning", "message": { "text": "Unused function's 'pthread_create' return value", "markdown": "**\\[Line 140\\] Unused function's 'pthread\\_create' return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "b420385d-5c55-3e84-8a02-9658da4bc491" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2008-0_1_7", "level": "error", "message": { "text": "Unused function's 'pthread_create' return value", "markdown": "**\\[Line 140\\] Unused function's 'pthread\\_create' return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "b213bdac-04d5-3f85-b802-87840d19245a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-115_a", "level": "warning", "message": { "text": "Unused function's 'pthread_create' return value", "markdown": "**\\[Line 140\\] Unused function's 'pthread\\_create' return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "e3dd824d-1e35-3f05-8589-fe0266298748" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CODSTA-122_a", "level": "warning", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 140\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "e388f65c-66e2-33d1-a75d-b44a5aec617b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRAC2012-RULE_17_7-a", "level": "error", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 140\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "3387278b-d1c2-3ff3-926d-104986b5bcb6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CERT_C-EXP12-a", "level": "warning", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 140\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "d2026a2b-6d00-3a71-8bbd-f66a242c2e3b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2012-RULE-17_7_a", "level": "error", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 140\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "25d058a4-df42-37da-be24-90e8ca25e063" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2004-16_10", "level": "warning", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 140\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "5399323e-8935-3a16-ad8f-83821bbf86d6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "AUTOSAR-M0_3_2-a", "level": "error", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 140\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "362474c1-cbe6-39f9-b022-a2ad0814cada" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2008-0_3_2", "level": "error", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 140\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "7340c32a-6381-30fc-a363-6e5965cb5ca2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-115", "level": "warning", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 140\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "bc6194f7-1d47-3d78-a546-cab654816f3f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "AUTOSAR-A4_10_1-b", "level": "error", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 140\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "d40e6319-c192-31ec-8362-d01f9dc79c04" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "HICPP-2_5_3-a", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 140\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "dc1e87ce-49b0-3ab4-916f-fef7463b4482" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "CODSTA-MCPP-04", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 140\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "917a4d8d-b043-3051-a527-ba7e391304f5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '2' argument to function 'pthread_create' ", "markdown": "**\\[Line 140\\] The value '0' is passed as '2' argument to function 'pthread\\_create' **" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "bad85971-4d24-3cb6-8fad-1c1c74888e5f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '2' argument to function 'pthread_create' ", "markdown": "**\\[Line 140\\] The value '0' is passed as '2' argument to function 'pthread\\_create' **" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "63df94d7-a275-3f56-8a2d-dcb5eb0c7034" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '2' argument to function 'pthread_create' ", "markdown": "**\\[Line 140\\] The value '0' is passed as '2' argument to function 'pthread\\_create' **" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "e8348c25-d868-3e78-9a03-f9d5096d7c29" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "CERT_CPP-EXP56-a", "level": "warning", "message": { "text": "Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage", "markdown": "**\\[Line 140\\] Do not assing the pointer to the function with C\\+\\+ language linkage to the pointer to the function with C language linkage**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "e1a945bb-b62e-35fd-9db0-4a0683fbcf25" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "CODSTA-CPP-96", "level": "warning", "message": { "text": "Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage", "markdown": "**\\[Line 140\\] Do not assing the pointer to the function with C\\+\\+ language linkage to the pointer to the function with C language linkage**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "2db02c54-008f-3717-9ebe-28b4995761c8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "AUTOSAR-A4_10_1-b", "level": "error", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 140\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "1855cf1c-260c-36f5-9e08-0117ca453244" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "HICPP-2_5_3-a", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 140\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "f9cbaa03-f0f4-312a-a5db-7b61abe60884" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "CODSTA-MCPP-04", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 140\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "0bfc1c79-399c-35bc-83a4-55b1858210a7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '4' argument to function 'pthread_create' ", "markdown": "**\\[Line 140\\] The value '0' is passed as '4' argument to function 'pthread\\_create' **" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "c160fa78-bca5-3772-8854-110a81dfc235" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '4' argument to function 'pthread_create' ", "markdown": "**\\[Line 140\\] The value '0' is passed as '4' argument to function 'pthread\\_create' **" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "4dff33f1-fca0-30e7-ac64-93fce8656663" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '4' argument to function 'pthread_create' ", "markdown": "**\\[Line 140\\] The value '0' is passed as '4' argument to function 'pthread\\_create' **" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1305984162", "unbViolId": "b549e513-6ee7-374e-94a3-096b5a29e6f0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 140, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 141\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "603fc4af-32e0-3a23-abe1-c442f07c1606" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 141\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "e953f967-8778-347a-b340-901d369ec48e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 141\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "86ce3aa2-0255-389b-9f0c-383c061718b4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "APSC_DV-003235-a", "level": "error", "message": { "text": "The value returned by the POSIX library function 'pthread_create' should be used", "markdown": "**\\[Line 141\\] The value returned by the POSIX library function 'pthread\\_create' should be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "fce87290-e509-30e0-92b8-70042c53e081" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CERT_C-POS54-a", "level": "error", "message": { "text": "The value returned by the POSIX library function 'pthread_create' should be used", "markdown": "**\\[Line 141\\] The value returned by the POSIX library function 'pthread\\_create' should be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "45ccbc75-e1ca-3511-8cb4-6182853b9370" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CODSTA-CPP-23", "level": "note", "message": { "text": "The global function 'pthread_create' is called without scope resolution operator '::'", "markdown": "**\\[Line 141\\] The global function 'pthread\\_create' is called without scope resolution operator '::'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "d42ee731-e17b-36dd-879b-de06bb57fc6a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "AUTOSAR-A0_1_2-a", "level": "error", "message": { "text": "Unused function's 'pthread_create' return value", "markdown": "**\\[Line 141\\] Unused function's 'pthread\\_create' return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "fb574c37-dea1-33fb-83df-bc919a88973f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CODSTA-CPP-58", "level": "warning", "message": { "text": "Unused function's 'pthread_create' return value", "markdown": "**\\[Line 141\\] Unused function's 'pthread\\_create' return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "0e9710d1-f8e7-333d-813f-c681565a7771" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2008-0_1_7", "level": "error", "message": { "text": "Unused function's 'pthread_create' return value", "markdown": "**\\[Line 141\\] Unused function's 'pthread\\_create' return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "a1cdf8a4-0448-3c04-9f63-67140671f9c8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-115_a", "level": "warning", "message": { "text": "Unused function's 'pthread_create' return value", "markdown": "**\\[Line 141\\] Unused function's 'pthread\\_create' return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "6be2bc74-40da-3adc-b19f-e85ee482aeb4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CODSTA-122_a", "level": "warning", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 141\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "07afe359-2f69-3548-9e55-fd10bfc38702" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRAC2012-RULE_17_7-a", "level": "error", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 141\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "d85de0e8-74ae-314e-9798-1dc81dfd446f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CERT_C-EXP12-a", "level": "warning", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 141\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "63bc17e2-ba29-32f0-aa63-5bfcb1cb84e4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2012-RULE-17_7_a", "level": "error", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 141\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "fc91361f-776e-3097-85db-62160b8b0a30" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2004-16_10", "level": "warning", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 141\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "71853900-bb70-3a44-a2da-6ea451ebe7e8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "AUTOSAR-M0_3_2-a", "level": "error", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 141\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "94f9bca3-90fb-3f59-b23b-b3afd6dbb250" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2008-0_3_2", "level": "error", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 141\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "02b574d9-c786-3c56-be03-5f7c0885ba32" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-115", "level": "warning", "message": { "text": "Unused function's \"pthread_create\" return value", "markdown": "**\\[Line 141\\] Unused function's \"pthread\\_create\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "f76706c3-a617-31e4-a467-1496e12a84c0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "AUTOSAR-A4_10_1-b", "level": "error", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 141\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "eace244a-d4c8-3644-bd81-79f4ec1c3285" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "HICPP-2_5_3-a", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 141\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "593d655b-06b0-3f1e-9370-693fd0e44d53" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "CODSTA-MCPP-04", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 141\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "0002c75e-1892-378a-9f2d-291361b7e934" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '2' argument to function 'pthread_create' ", "markdown": "**\\[Line 141\\] The value '0' is passed as '2' argument to function 'pthread\\_create' **" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "7853ad8d-bdcb-30d9-b3a7-1c21787cc750" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '2' argument to function 'pthread_create' ", "markdown": "**\\[Line 141\\] The value '0' is passed as '2' argument to function 'pthread\\_create' **" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "7208661a-d7c6-3517-a0cc-a01c8a2c3b90" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '2' argument to function 'pthread_create' ", "markdown": "**\\[Line 141\\] The value '0' is passed as '2' argument to function 'pthread\\_create' **" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "e3fcfe64-41f6-3c50-925d-2e4747966f08" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "CERT_CPP-EXP56-a", "level": "warning", "message": { "text": "Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage", "markdown": "**\\[Line 141\\] Do not assing the pointer to the function with C\\+\\+ language linkage to the pointer to the function with C language linkage**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "5741eceb-b727-3540-bb01-605b70ea7513" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "CODSTA-CPP-96", "level": "warning", "message": { "text": "Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage", "markdown": "**\\[Line 141\\] Do not assing the pointer to the function with C\\+\\+ language linkage to the pointer to the function with C language linkage**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "cbefcf14-f68a-3ffa-849d-b978f140c2a6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "AUTOSAR-A4_10_1-b", "level": "error", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 141\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "e32dbed6-64d3-3f09-9002-dafa613c4d9d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 48, "endColumn": 49 } } } ] }, { "ruleId": "HICPP-2_5_3-a", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 141\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "17f41c0a-1449-31e4-ba02-769825f19663" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 48, "endColumn": 49 } } } ] }, { "ruleId": "CODSTA-MCPP-04", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 141\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "d2bba5c7-207b-3830-8256-6b838b61aeed" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 48, "endColumn": 49 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "The value '0' is passed as '4' argument to function 'pthread_create' ", "markdown": "**\\[Line 141\\] The value '0' is passed as '4' argument to function 'pthread\\_create' **" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "02a1e47f-a83e-3e29-8474-590f6edf0c09" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 48, "endColumn": 49 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "The value '0' is passed as '4' argument to function 'pthread_create' ", "markdown": "**\\[Line 141\\] The value '0' is passed as '4' argument to function 'pthread\\_create' **" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "93aadea5-b55a-3d6b-956a-c3570ddebbfc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 48, "endColumn": 49 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "The value '0' is passed as '4' argument to function 'pthread_create' ", "markdown": "**\\[Line 141\\] The value '0' is passed as '4' argument to function 'pthread\\_create' **" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-604051279", "unbViolId": "17f15970-f48d-3c3d-a230-72e72a280dc4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 141, "startColumn": 48, "endColumn": 49 } } } ] }, { "ruleId": "METRICS-31", "level": "warning", "message": { "text": "The assertion density is lower than two assertions per function", "markdown": "**\\[Line 1\\] The assertion density is lower than two assertions per function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "329732047", "unbViolId": "4389a96e-bebb-3e40-b80d-9cadf8eb9b61" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-03", "level": "warning", "message": { "text": "The filename 'DivisionByZero.cpp' should be in lowercase", "markdown": "**\\[Line 1\\] The filename 'DivisionByZero\\.cpp' should be in lowercase**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "329732047", "unbViolId": "4dcceeb8-6240-3dde-b42d-124c13e1d5bf" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-38", "level": "warning", "message": { "text": "Implementation file 'DivisionByZero.cpp' should have the file name extension \".cc\"", "markdown": "**\\[Line 1\\] Implementation file 'DivisionByZero\\.cpp' should have the file name extension \"\\.cc\"**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "329732047", "unbViolId": "0cd260ac-8ab9-3afc-9356-1fd097fb9233" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PFO-04", "level": "note", "message": { "text": "Implementation file 'DivisionByZero.cpp' should declare a local constant string that begins from characters \"@(#)\" ", "markdown": "**\\[Line 1\\] Implementation file 'DivisionByZero\\.cpp' should declare a local constant string that begins from characters \"@\\(\\#\\)\" **" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "329732047", "unbViolId": "c3c7a340-e21e-3d71-bd6e-b7b43a57294c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-02", "level": "warning", "message": { "text": "Add comment containing the copyright information at the begin of file 'DivisionByZero.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the copyright information at the begin of file 'DivisionByZero\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "329732047", "unbViolId": "6062dae8-69e5-30ed-983a-fb0262405c3d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-133_b", "level": "warning", "message": { "text": "Add comment containing the copyright information at the begin of file 'DivisionByZero.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the copyright information at the begin of file 'DivisionByZero\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "329732047", "unbViolId": "4c857923-b6b3-3f55-b5d3-3654eb43cbed" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-03", "level": "warning", "message": { "text": "Add comment containing the information on the file at the begin of file 'DivisionByZero.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the information on the file at the begin of file 'DivisionByZero\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "329732047", "unbViolId": "b862ba79-82a6-3287-9ce5-c071a4019f59" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-133_a", "level": "warning", "message": { "text": "Add comment containing the information on the file at the begin of file 'DivisionByZero.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the information on the file at the begin of file 'DivisionByZero\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "329732047", "unbViolId": "65dd9edd-9290-3538-bfb2-c161385745fe" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-032", "level": "warning", "message": { "text": "Not a proper header file (*.h ) is being included: \"Shapes.hpp\"", "markdown": "**\\[Line 1\\] Not a proper header file \\(\\*\\.h \\) is being included: \"Shapes\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "329732047", "unbViolId": "d8b25daf-2fe9-3553-ab08-d969448b7c0d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-08", "level": "warning", "message": { "text": "Not a proper header file (*.h ) is being included: \"Shapes.hpp\"", "markdown": "**\\[Line 1\\] Not a proper header file \\(\\*\\.h \\) is being included: \"Shapes\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "329732047", "unbViolId": "94fb5bb0-4897-37a3-b7d1-68a078bc409b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-09", "level": "error", "message": { "text": "Disallowed #include notation is being used: \"Shapes.hpp\"", "markdown": "**\\[Line 1\\] Disallowed \\#include notation is being used: \"Shapes\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "329732047", "unbViolId": "2c0779e5-29be-3dcf-bbcd-a3714bd77550" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-033", "level": "error", "message": { "text": "Disallowed #include notation is being used: \"Shapes.hpp\"", "markdown": "**\\[Line 1\\] Disallowed \\#include notation is being used: \"Shapes\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "329732047", "unbViolId": "00ad9acf-89bd-3eab-8e9a-68420b756d77" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 3\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "fa61d402-70b1-3c9b-940f-7439140fbcc0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 3\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "3df23102-edfb-3587-afe4-21487142738d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 3\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "4aebd34b-3f18-3e81-a8eb-e1c940fe0948" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 3\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "0f8f1a4f-7747-3309-8c1d-2f62a45bc434" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 3\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "a81de149-9f76-391a-be5e-94d9e9e12013" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 3\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "88f8d724-20c6-303b-b53d-15c8378d1d8c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 3\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "1a7bfd23-f68f-375a-aa62-970f61fffd39" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A8_4_10-a", "level": "error", "message": { "text": "The \"shape1\" parameter of the \"getShapeRatio\" function cannot be NULL and should be passed by reference", "markdown": "**\\[Line 3\\] The \"shape1\" parameter of the \"getShapeRatio\" function cannot be NULL and should be passed by reference**  \n  \n**Function header**&nbsp;  \nDivisionByZero.cpp&nbsp;(3)&nbsp;:&nbsp;double getShapeRatio\\(Shape\\* shape1, Shape\\* shape2\\)  \n**Point where the parameter is dereferenced**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape1\\->getArea\\(\\)" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "-1572071035", "unbViolId": "c005736f-945a-373b-8bd3-1b1b54c75480" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1 } }, "message": { "text": "Violation Point - Function header" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where the parameter is dereferenced" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "BD-PB-REFPARAM", "level": "warning", "message": { "text": "The \"shape1\" parameter of the \"getShapeRatio\" function cannot be NULL and should be passed by reference", "markdown": "**\\[Line 3\\] The \"shape1\" parameter of the \"getShapeRatio\" function cannot be NULL and should be passed by reference**  \n  \n**Function header**&nbsp;  \nDivisionByZero.cpp&nbsp;(3)&nbsp;:&nbsp;double getShapeRatio\\(Shape\\* shape1, Shape\\* shape2\\)  \n**Point where the parameter is dereferenced**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape1\\->getArea\\(\\)" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "-1572071035", "unbViolId": "7ec0f1ce-295b-3570-8dcb-8f81b4eed17f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1 } }, "message": { "text": "Violation Point - Function header" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where the parameter is dereferenced" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "AUTOSAR-A8_4_10-a", "level": "error", "message": { "text": "The \"shape2\" parameter of the \"getShapeRatio\" function cannot be NULL and should be passed by reference", "markdown": "**\\[Line 3\\] The \"shape2\" parameter of the \"getShapeRatio\" function cannot be NULL and should be passed by reference**  \n  \n**Function header**&nbsp;  \nDivisionByZero.cpp&nbsp;(3)&nbsp;:&nbsp;double getShapeRatio\\(Shape\\* shape1, Shape\\* shape2\\)  \n**Point where the parameter is dereferenced**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape2\\->getArea\\(\\)" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "-1572071035", "unbViolId": "1dd0cca9-1a4a-3b57-b56c-234601519a26" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1 } }, "message": { "text": "Violation Point - Function header" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where the parameter is dereferenced" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "BD-PB-REFPARAM", "level": "warning", "message": { "text": "The \"shape2\" parameter of the \"getShapeRatio\" function cannot be NULL and should be passed by reference", "markdown": "**\\[Line 3\\] The \"shape2\" parameter of the \"getShapeRatio\" function cannot be NULL and should be passed by reference**  \n  \n**Function header**&nbsp;  \nDivisionByZero.cpp&nbsp;(3)&nbsp;:&nbsp;double getShapeRatio\\(Shape\\* shape1, Shape\\* shape2\\)  \n**Point where the parameter is dereferenced**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape2\\->getArea\\(\\)" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "-1572071035", "unbViolId": "417e091a-4fc6-35a2-9cec-fcf8fb06e930" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1 } }, "message": { "text": "Violation Point - Function header" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where the parameter is dereferenced" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "GLOBAL-UNUSEDFUNC", "level": "warning", "message": { "text": "The 'getShapeRatio' function is not used in the testing scope", "markdown": "**\\[Line 3\\] The 'getShapeRatio' function is not used in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "e80d788a-a12d-34e4-92ea-20618368f29a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-M0_1_10-a", "level": "warning", "message": { "text": "The 'getShapeRatio' function is not used in the testing scope", "markdown": "**\\[Line 3\\] The 'getShapeRatio' function is not used in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "6037a5a1-0221-351b-be1a-4cb8c54f55f0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2008-0_1_10_b", "level": "error", "message": { "text": "The 'getShapeRatio' function is not used in the testing scope", "markdown": "**\\[Line 3\\] The 'getShapeRatio' function is not used in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "71f0946f-06c8-3d42-a109-b729a2aea07f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CODSTA-MCPP-08_b", "level": "error", "message": { "text": "The return type of the 'getShapeRatio' function should be declared as 'auto'", "markdown": "**\\[Line 3\\] The return type of the 'getShapeRatio' function should be declared as 'auto'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "4d0cd277-f7d9-31af-8645-87bd6b30d79a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'getShapeRatio' function is not preceded by a comment", "markdown": "**\\[Line 3\\] The definition of the 'getShapeRatio' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "fd6658c9-2af6-37df-8fc4-b4de64dc2e71" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'getShapeRatio' function is not preceded by a comment", "markdown": "**\\[Line 3\\] The definition of the 'getShapeRatio' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "bc87d3d2-8853-3aae-8651-1c786ffa3625" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "OWASP2019-API9-e", "level": "warning", "message": { "text": "Function 'getShapeRatio' has external linkage and is not declared in the header", "markdown": "**\\[Line 3\\] Function 'getShapeRatio' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "91772726-a258-36e5-a7c3-f1cded0f7e8d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A3_3_1-a", "level": "error", "message": { "text": "Function 'getShapeRatio' has external linkage and is not declared in the header", "markdown": "**\\[Line 3\\] Function 'getShapeRatio' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "13868235-dc96-3624-96b9-228f892add5d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-137", "level": "warning", "message": { "text": "Function 'getShapeRatio' has external linkage and is not declared in the header", "markdown": "**\\[Line 3\\] Function 'getShapeRatio' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "d3a8df2a-6c7d-327c-a67d-8c5dfa988802" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA-023", "level": "warning", "message": { "text": "Function 'getShapeRatio' has external linkage and is not declared in the header", "markdown": "**\\[Line 3\\] Function 'getShapeRatio' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "460821a1-99f8-3cf9-aac4-6e53af27589b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2008-3_3_1", "level": "error", "message": { "text": "Function 'getShapeRatio' has external linkage and is not declared in the header", "markdown": "**\\[Line 3\\] Function 'getShapeRatio' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "e3308a86-cbf8-307a-98b2-51a41b7f1464" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CERT_C-DCL15-a", "level": "warning", "message": { "text": "Function 'getShapeRatio' has external linkage and is not declared in the header", "markdown": "**\\[Line 3\\] Function 'getShapeRatio' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "33606cf8-40e2-327d-b18b-f1349161e783" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2004-8_10", "level": "warning", "message": { "text": "Function 'getShapeRatio' has external linkage and is not declared in the header", "markdown": "**\\[Line 3\\] Function 'getShapeRatio' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "10193ce4-a82d-3766-8f0a-950176c5ac9a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'getShapeRatio' should be composed only of lowercase letters", "markdown": "**\\[Line 3\\] The name 'getShapeRatio' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "9c80253c-0b40-3bf3-b5d9-5284cf5f2d01" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'getShapeRatio' should be composed only of lowercase letters", "markdown": "**\\[Line 3\\] The name 'getShapeRatio' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "e39ebdca-8cf5-3389-89de-0dbab78a1ff1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-098", "level": "warning", "message": { "text": "Do not declare the 'getShapeRatio' function in the global namespace", "markdown": "**\\[Line 3\\] Do not declare the 'getShapeRatio' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "59c28462-74e5-3321-aa5f-8ae5450344b5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-M7_3_1-a", "level": "error", "message": { "text": "Do not declare the 'getShapeRatio' function in the global namespace", "markdown": "**\\[Line 3\\] Do not declare the 'getShapeRatio' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "5df132a4-0a22-347f-897a-af1e70cd5d6d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CODSTA-CPP-36", "level": "warning", "message": { "text": "Do not declare the 'getShapeRatio' function in the global namespace", "markdown": "**\\[Line 3\\] Do not declare the 'getShapeRatio' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "71165d46-f695-303c-8d2e-1ba9da80319b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2008-7_3_1", "level": "error", "message": { "text": "Do not declare the 'getShapeRatio' function in the global namespace", "markdown": "**\\[Line 3\\] Do not declare the 'getShapeRatio' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "b5458b56-26be-3217-ad42-07245679be48" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'getShapeRatio' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 3\\] The 'getShapeRatio' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "21c65eff-a8da-3f45-bcaf-2b1e5b4b6605" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'getShapeRatio' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 3\\] The 'getShapeRatio' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "36776cff-830b-34a9-94af-2d31dbcc4dd7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'shape1' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 3\\] The 'shape1' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "ca932219-7d67-35d9-b69f-ba22c475d6f2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'shape1' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 3\\] The 'shape1' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "882c70e9-bd58-32f4-8d2f-7da7ead4aac3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'shape2' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 3\\] The 'shape2' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "ce1dd504-15c7-363e-ba13-5244fe2afe90" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'shape2' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 3\\] The 'shape2' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "a30fda64-8cab-330d-bbdc-e7c8e984b045" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'getShapeRatio' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 3\\] The 'getShapeRatio' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "eea47370-10fd-3e8f-bb64-60734c265d7a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'getShapeRatio' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 3\\] The 'getShapeRatio' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "b5144806-9175-3b5b-8995-4fe936d89a69" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "FORMAT-28", "level": "warning", "message": { "text": "Return type is not placed in line before function 'getShapeRatio'", "markdown": "**\\[Line 3\\] Return type is not placed in line before function 'getShapeRatio'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "4016ac96-e5eb-3e11-9525-b747564f395a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'getShapeRatio' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 3\\] Function 'getShapeRatio' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "d50ddaff-d9ad-31f6-a39a-778726f98d94" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'getShapeRatio' has Essential Complexity value: 1", "markdown": "**\\[Line 3\\] Function 'getShapeRatio' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "8f477b91-74ea-388c-a344-e7c3ee8cff46" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-17", "level": "warning", "message": { "text": "Naming convention not followed: getShapeRatio", "markdown": "**\\[Line 3\\] Naming convention not followed: getShapeRatio**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "e6df6e5a-afe2-3e96-9cbc-452bd9608b51" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The parameter of pointer or array type is declared: shape1", "markdown": "**\\[Line 3\\] The parameter of pointer or array type is declared: shape1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "0bbbf25e-6a3a-3ba2-b9b5-3c37bb21232c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The parameter of pointer type is declared: shape1", "markdown": "**\\[Line 3\\] The parameter of pointer type is declared: shape1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "030bd45d-f4dc-3a7c-98c4-ad7e5fbec9b1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "CERT_C-API00-a", "level": "warning", "message": { "text": "Parameter 'shape1' is not validated before use", "markdown": "**\\[Line 3\\] Parameter 'shape1' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "4f1b223f-317f-3e62-857e-6620fa2a166c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "CODSTA-86", "level": "warning", "message": { "text": "Parameter 'shape1' is not validated before use", "markdown": "**\\[Line 3\\] Parameter 'shape1' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "d6b1fe40-d40e-31a8-ba01-ccb8f448c2ae" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "AUTOSAR-M7_1_2-b", "level": "error", "message": { "text": "Pass parameter \"shape1\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape1\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "67046a09-d190-34e8-92a5-8599909d18c0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "MISRAC2012-RULE_8_13-a", "level": "warning", "message": { "text": "Pass parameter \"shape1\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape1\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "6b0fb80c-03fa-38cf-ad62-af42a268f632" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "CERT_C-DCL13-a", "level": "warning", "message": { "text": "Pass parameter \"shape1\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape1\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "4aaf4a51-52a7-31a1-be3b-53c5b27b61ae" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "MISRA2004-16_7", "level": "warning", "message": { "text": "Pass parameter \"shape1\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape1\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "2d51b64b-7de0-380a-9e05-6d682e4f70e0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "MISRA2012-RULE-8_13_a", "level": "warning", "message": { "text": "Pass parameter \"shape1\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape1\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "59ecd009-ff9a-346a-84fc-39d8251ce0f8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "JSF-118", "level": "warning", "message": { "text": "Pass parameter \"shape1\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape1\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "00b4e47d-2fff-3b3b-941e-ffc985d41112" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "MISRA2008-7_1_2_a", "level": "error", "message": { "text": "Pass parameter \"shape1\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape1\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "6b634cd2-1a0b-3874-a6d9-e55f139890ca" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "NAMING-HN-34", "level": "warning", "message": { "text": "The 'shape1' identifier should have the 'p' prefix", "markdown": "**\\[Line 3\\] The 'shape1' identifier should have the 'p' prefix**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "550f2cf0-d09c-314f-844c-1b0e2f8bfd6e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The parameter of pointer or array type is declared: shape2", "markdown": "**\\[Line 3\\] The parameter of pointer or array type is declared: shape2**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "3992d453-4ee6-3b88-b56f-ea421df8f02c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The parameter of pointer type is declared: shape2", "markdown": "**\\[Line 3\\] The parameter of pointer type is declared: shape2**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "04399b28-0d83-343c-80f1-0a41be697e97" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "CERT_C-API00-a", "level": "warning", "message": { "text": "Parameter 'shape2' is not validated before use", "markdown": "**\\[Line 3\\] Parameter 'shape2' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "4e4701cf-79e1-3030-b5ee-7edb01ebad3d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "CODSTA-86", "level": "warning", "message": { "text": "Parameter 'shape2' is not validated before use", "markdown": "**\\[Line 3\\] Parameter 'shape2' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "f4695202-8f0e-39e3-a733-3892fb630beb" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "AUTOSAR-M7_1_2-b", "level": "error", "message": { "text": "Pass parameter \"shape2\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape2\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "adbcbeb0-8669-348a-af5d-cf0f966d1bfe" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "MISRAC2012-RULE_8_13-a", "level": "warning", "message": { "text": "Pass parameter \"shape2\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape2\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "30324587-9f8f-35ac-99e8-2b1434c75d5d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "CERT_C-DCL13-a", "level": "warning", "message": { "text": "Pass parameter \"shape2\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape2\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "59602def-91cb-33b5-a18b-e56c07169784" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "MISRA2004-16_7", "level": "warning", "message": { "text": "Pass parameter \"shape2\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape2\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "503425d2-e866-3b2e-a4a9-a20102941ef1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "MISRA2012-RULE-8_13_a", "level": "warning", "message": { "text": "Pass parameter \"shape2\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape2\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "3cb67e23-49d2-33e7-9290-1f7f0f20ceb8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "JSF-118", "level": "warning", "message": { "text": "Pass parameter \"shape2\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape2\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "e2591f72-bea2-3903-ae34-809ee8e8697c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "MISRA2008-7_1_2_a", "level": "error", "message": { "text": "Pass parameter \"shape2\" with const specifier", "markdown": "**\\[Line 3\\] Pass parameter \"shape2\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "5c4efb23-7e13-352b-96f5-3b7261b3de5e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "NAMING-HN-34", "level": "warning", "message": { "text": "The 'shape2' identifier should have the 'p' prefix", "markdown": "**\\[Line 3\\] The 'shape2' identifier should have the 'p' prefix**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1572071035", "unbViolId": "244ecf4b-324a-3ae0-b2cf-9142cbe8bf08" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 44, "endColumn": 45 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 4\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "123", "unbViolId": "5c473ab7-b425-3078-8f52-c1918cd08907" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 5\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2070090220", "unbViolId": "fb4af0e0-8449-3faf-8c52-8c1798647c6d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 5\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2070090220", "unbViolId": "52aa823a-7e97-3cf3-b7d8-fe3e52727a87" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 5\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2070090220", "unbViolId": "a2826261-f10f-3187-b550-8fa5e90a20de" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A5_6_1-a", "level": "error", "message": { "text": "Division by \"shape2.getArea()\" which may possibly be zero", "markdown": "**\\[Line 5\\] Division by \"shape2\\.getArea\\(\\)\" which may possibly be zero**  \n  \n**Start of the path**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape2\\->getArea\\(\\)  \n        Shapes.hpp&nbsp;(19)&nbsp;:&nbsp;double getArea\\(\\) const \\{ return 0; \\}  \n**Point of division by zero**&nbsp;  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;return shape1\\->getArea\\(\\)\/shape2\\->getArea\\(\\);" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "2070090220", "unbViolId": "26195182-8dd0-3fd4-86ca-dc006c79a35e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Cause - Start of the path" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1 } } }, "nestingLevel": 1 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Point - Point of division by zero" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "AUTOSAR-M0_3_1-e", "level": "error", "message": { "text": "Division by \"shape2.getArea()\" which may possibly be zero", "markdown": "**\\[Line 5\\] Division by \"shape2\\.getArea\\(\\)\" which may possibly be zero**  \n  \n**Start of the path**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape2\\->getArea\\(\\)  \n        Shapes.hpp&nbsp;(19)&nbsp;:&nbsp;double getArea\\(\\) const \\{ return 0; \\}  \n**Point of division by zero**&nbsp;  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;return shape1\\->getArea\\(\\)\/shape2\\->getArea\\(\\);" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "2070090220", "unbViolId": "0b90681b-6662-3efe-a121-779d62a5f3de" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Cause - Start of the path" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1 } } }, "nestingLevel": 1 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Point - Point of division by zero" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "BD-PB-ZERO", "level": "error", "message": { "text": "Division by \"shape2.getArea()\" which may possibly be zero", "markdown": "**\\[Line 5\\] Division by \"shape2\\.getArea\\(\\)\" which may possibly be zero**  \n  \n**Start of the path**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape2\\->getArea\\(\\)  \n        Shapes.hpp&nbsp;(19)&nbsp;:&nbsp;double getArea\\(\\) const \\{ return 0; \\}  \n**Point of division by zero**&nbsp;  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;return shape1\\->getArea\\(\\)\/shape2\\->getArea\\(\\);" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "2070090220", "unbViolId": "d15dc7dd-1061-32bc-a6f9-54ef335bfa99" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Cause - Start of the path" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1 } } }, "nestingLevel": 1 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Point - Point of division by zero" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "CERT_C-FLP03-a", "level": "warning", "message": { "text": "Division by \"shape2.getArea()\" which may possibly be zero", "markdown": "**\\[Line 5\\] Division by \"shape2\\.getArea\\(\\)\" which may possibly be zero**  \n  \n**Start of the path**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape2\\->getArea\\(\\)  \n        Shapes.hpp&nbsp;(19)&nbsp;:&nbsp;double getArea\\(\\) const \\{ return 0; \\}  \n**Point of division by zero**&nbsp;  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;return shape1\\->getArea\\(\\)\/shape2\\->getArea\\(\\);" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "2070090220", "unbViolId": "87e22cb2-4e3f-3e28-900c-c7be19510fa0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Cause - Start of the path" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1 } } }, "nestingLevel": 1 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Point - Point of division by zero" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "CERT_C-INT33-a", "level": "error", "message": { "text": "Division by \"shape2.getArea()\" which may possibly be zero", "markdown": "**\\[Line 5\\] Division by \"shape2\\.getArea\\(\\)\" which may possibly be zero**  \n  \n**Start of the path**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape2\\->getArea\\(\\)  \n        Shapes.hpp&nbsp;(19)&nbsp;:&nbsp;double getArea\\(\\) const \\{ return 0; \\}  \n**Point of division by zero**&nbsp;  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;return shape1\\->getArea\\(\\)\/shape2\\->getArea\\(\\);" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "2070090220", "unbViolId": "c0041754-3e2f-369b-995c-7513d5fb8ea2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Cause - Start of the path" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1 } } }, "nestingLevel": 1 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Point - Point of division by zero" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "HICPP-5_5_1-a", "level": "error", "message": { "text": "Division by \"shape2.getArea()\" which may possibly be zero", "markdown": "**\\[Line 5\\] Division by \"shape2\\.getArea\\(\\)\" which may possibly be zero**  \n  \n**Start of the path**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape2\\->getArea\\(\\)  \n        Shapes.hpp&nbsp;(19)&nbsp;:&nbsp;double getArea\\(\\) const \\{ return 0; \\}  \n**Point of division by zero**&nbsp;  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;return shape1\\->getArea\\(\\)\/shape2\\->getArea\\(\\);" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "2070090220", "unbViolId": "d01c9009-1fdf-3a18-9be9-5e56bb9445cc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Cause - Start of the path" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1 } } }, "nestingLevel": 1 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Point - Point of division by zero" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "MISRA2008-0_3_1_c", "level": "note", "message": { "text": "Division by \"shape2.getArea()\" which may possibly be zero", "markdown": "**\\[Line 5\\] Division by \"shape2\\.getArea\\(\\)\" which may possibly be zero**  \n  \n**Start of the path**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape2\\->getArea\\(\\)  \n        Shapes.hpp&nbsp;(19)&nbsp;:&nbsp;double getArea\\(\\) const \\{ return 0; \\}  \n**Point of division by zero**&nbsp;  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;return shape1\\->getArea\\(\\)\/shape2\\->getArea\\(\\);" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "2070090220", "unbViolId": "1ce368b9-2cc8-3fca-bf02-19dfb609f2d0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Cause - Start of the path" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1 } } }, "nestingLevel": 1 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Point - Point of division by zero" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "MISRA2012-DIR-4_1_c", "level": "error", "message": { "text": "Division by \"shape2.getArea()\" which may possibly be zero", "markdown": "**\\[Line 5\\] Division by \"shape2\\.getArea\\(\\)\" which may possibly be zero**  \n  \n**Start of the path**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape2\\->getArea\\(\\)  \n        Shapes.hpp&nbsp;(19)&nbsp;:&nbsp;double getArea\\(\\) const \\{ return 0; \\}  \n**Point of division by zero**&nbsp;  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;return shape1\\->getArea\\(\\)\/shape2\\->getArea\\(\\);" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "2070090220", "unbViolId": "f3cbc908-6d4c-3461-a7a8-ba81e27054fe" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Cause - Start of the path" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1 } } }, "nestingLevel": 1 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Point - Point of division by zero" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "MISRA2012-RULE-1_3_a", "level": "error", "message": { "text": "Division by \"shape2.getArea()\" which may possibly be zero", "markdown": "**\\[Line 5\\] Division by \"shape2\\.getArea\\(\\)\" which may possibly be zero**  \n  \n**Start of the path**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape2\\->getArea\\(\\)  \n        Shapes.hpp&nbsp;(19)&nbsp;:&nbsp;double getArea\\(\\) const \\{ return 0; \\}  \n**Point of division by zero**&nbsp;  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;return shape1\\->getArea\\(\\)\/shape2\\->getArea\\(\\);" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "2070090220", "unbViolId": "ba7fe45d-0e4e-38c5-9d42-de5f671231c6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Cause - Start of the path" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1 } } }, "nestingLevel": 1 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Point - Point of division by zero" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "MISRAC2012-DIR_4_1-c", "level": "error", "message": { "text": "Division by \"shape2.getArea()\" which may possibly be zero", "markdown": "**\\[Line 5\\] Division by \"shape2\\.getArea\\(\\)\" which may possibly be zero**  \n  \n**Start of the path**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape2\\->getArea\\(\\)  \n        Shapes.hpp&nbsp;(19)&nbsp;:&nbsp;double getArea\\(\\) const \\{ return 0; \\}  \n**Point of division by zero**&nbsp;  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;return shape1\\->getArea\\(\\)\/shape2\\->getArea\\(\\);" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "2070090220", "unbViolId": "f93c89bb-930f-3e30-8044-3faa97b67fba" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Cause - Start of the path" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1 } } }, "nestingLevel": 1 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Point - Point of division by zero" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "MISRAC2012-RULE_1_3-a", "level": "error", "message": { "text": "Division by \"shape2.getArea()\" which may possibly be zero", "markdown": "**\\[Line 5\\] Division by \"shape2\\.getArea\\(\\)\" which may possibly be zero**  \n  \n**Start of the path**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape2\\->getArea\\(\\)  \n        Shapes.hpp&nbsp;(19)&nbsp;:&nbsp;double getArea\\(\\) const \\{ return 0; \\}  \n**Point of division by zero**&nbsp;  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;return shape1\\->getArea\\(\\)\/shape2\\->getArea\\(\\);" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "2070090220", "unbViolId": "b511c1c4-5b7a-38dd-923f-63c6607f03ad" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Cause - Start of the path" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1 } } }, "nestingLevel": 1 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Point - Point of division by zero" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "FORMAT-25_b", "level": "warning", "message": { "text": "'return' statement should be used with parenthesis", "markdown": "**\\[Line 5\\] 'return' statement should be used with parenthesis**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2070090220", "unbViolId": "ef284a30-c392-3088-9b22-1320bf0bf92f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2008-0_4_2", "level": "note", "message": { "text": "floating-point arithmetic is not documented", "markdown": "**\\[Line 5\\] floating\\-point arithmetic is not documented**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2070090220", "unbViolId": "80c3702b-e43e-32a7-999c-bda2cdd9a1c8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "OWASP2019-API9-d", "level": "warning", "message": { "text": "floating-point arithmetic is not documented", "markdown": "**\\[Line 5\\] floating\\-point arithmetic is not documented**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2070090220", "unbViolId": "1ed851f9-5ff4-3b12-9bdd-ce54ae6053d2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-M0_4_2-a", "level": "error", "message": { "text": "floating-point arithmetic is not documented", "markdown": "**\\[Line 5\\] floating\\-point arithmetic is not documented**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2070090220", "unbViolId": "1825dfa3-9dfd-3b79-82dd-a271eed6a9f8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "COMMENT-10", "level": "warning", "message": { "text": "floating-point arithmetic is not documented", "markdown": "**\\[Line 5\\] floating\\-point arithmetic is not documented**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2070090220", "unbViolId": "300ea0a8-bdb8-313f-83bb-20720596ec91" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "PREPROC-18", "level": "warning", "message": { "text": "<stdio.h> library shall not be used", "markdown": "**\\[Line 1\\] <stdio\\.h> library shall not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1233725276", "unbViolId": "72cb2ce2-de96-399c-b134-7b83becb1e73" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-022", "level": "error", "message": { "text": "<stdio.h> library shall not be used", "markdown": "**\\[Line 1\\] <stdio\\.h> library shall not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1233725276", "unbViolId": "bd7f9ff8-7dc6-36b6-8eac-4d63f198e882" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "METRICS-31", "level": "warning", "message": { "text": "The assertion density is lower than two assertions per function", "markdown": "**\\[Line 1\\] The assertion density is lower than two assertions per function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1233725276", "unbViolId": "1e30c7a1-643a-309e-94bf-2fa2f4ed44de" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-03", "level": "warning", "message": { "text": "The filename 'MemoryLeak.cpp' should be in lowercase", "markdown": "**\\[Line 1\\] The filename 'MemoryLeak\\.cpp' should be in lowercase**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1233725276", "unbViolId": "43cd8cc1-d3da-320e-8b17-6e582406899a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-38", "level": "warning", "message": { "text": "Implementation file 'MemoryLeak.cpp' should have the file name extension \".cc\"", "markdown": "**\\[Line 1\\] Implementation file 'MemoryLeak\\.cpp' should have the file name extension \"\\.cc\"**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1233725276", "unbViolId": "c94ce8fa-657c-36b2-b7ae-d89f2732f6a0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PFO-04", "level": "note", "message": { "text": "Implementation file 'MemoryLeak.cpp' should declare a local constant string that begins from characters \"@(#)\" ", "markdown": "**\\[Line 1\\] Implementation file 'MemoryLeak\\.cpp' should declare a local constant string that begins from characters \"@\\(\\#\\)\" **" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1233725276", "unbViolId": "ee76778f-347b-37a2-958b-89f9f87bdcf4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-18_0_1", "level": "error", "message": { "text": "Instead of C library header '<stdio.h>' the corresponding C++ library header should be used", "markdown": "**\\[Line 1\\] Instead of C library header '<stdio\\.h>' the corresponding C\\+\\+ library header should be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1233725276", "unbViolId": "012527dd-2d59-31f8-ac55-8b5b6c8289ff" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-1_3_3-a", "level": "warning", "message": { "text": "Instead of C library header '<stdio.h>' the corresponding C++ library header should be used", "markdown": "**\\[Line 1\\] Instead of C library header '<stdio\\.h>' the corresponding C\\+\\+ library header should be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1233725276", "unbViolId": "0407df1c-b843-3579-921c-0e30e9b09b96" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A18_0_1-a", "level": "error", "message": { "text": "Instead of C library header '<stdio.h>' the corresponding C++ library header should be used", "markdown": "**\\[Line 1\\] Instead of C library header '<stdio\\.h>' the corresponding C\\+\\+ library header should be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1233725276", "unbViolId": "a42b8122-27cd-3c92-a009-1ddca8c091b2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CODSTA-CPP-59", "level": "warning", "message": { "text": "Instead of C library header '<stdio.h>' the corresponding C++ library header should be used", "markdown": "**\\[Line 1\\] Instead of C library header '<stdio\\.h>' the corresponding C\\+\\+ library header should be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1233725276", "unbViolId": "f0ec1487-75cd-36b8-b1a9-28395ff56f62" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A1_1_1-d", "level": "error", "message": { "text": "Instead of C library header '<stdio.h>' the corresponding C++ library header should be used", "markdown": "**\\[Line 1\\] Instead of C library header '<stdio\\.h>' the corresponding C\\+\\+ library header should be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1233725276", "unbViolId": "48e35fe2-a84e-3b2d-a47e-198c956d032f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-02", "level": "warning", "message": { "text": "Add comment containing the copyright information at the begin of file 'MemoryLeak.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the copyright information at the begin of file 'MemoryLeak\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1233725276", "unbViolId": "c1480074-2c5a-35d8-8347-bf3e70570c23" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-133_b", "level": "warning", "message": { "text": "Add comment containing the copyright information at the begin of file 'MemoryLeak.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the copyright information at the begin of file 'MemoryLeak\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1233725276", "unbViolId": "6ce577ef-128a-329b-9c9b-69af38dfc818" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-03", "level": "warning", "message": { "text": "Add comment containing the information on the file at the begin of file 'MemoryLeak.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the information on the file at the begin of file 'MemoryLeak\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1233725276", "unbViolId": "2d50e480-a876-3bb2-b67f-bc0c6364b0ff" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-133_a", "level": "warning", "message": { "text": "Add comment containing the information on the file at the begin of file 'MemoryLeak.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the information on the file at the begin of file 'MemoryLeak\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1233725276", "unbViolId": "e07dd84c-70f6-3b65-9911-4619f7b151f5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-17_2_1-a", "level": "warning", "message": { "text": "Ensure that C Standard Library is securely used", "markdown": "**\\[Line 1\\] Ensure that C Standard Library is securely used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1233725276", "unbViolId": "70345903-2bbc-3d4d-9421-3a242533c56d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-M27_0_1-a", "level": "error", "message": { "text": "<stdio.h> library shall not be used", "markdown": "**\\[Line 1\\] <stdio\\.h> library shall not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1233725276", "unbViolId": "70ab9859-fcfb-3397-81f8-a02a88ead327" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-27_0_1", "level": "error", "message": { "text": "<stdio.h> library shall not be used", "markdown": "**\\[Line 1\\] <stdio\\.h> library shall not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1233725276", "unbViolId": "ef71b308-df09-3e7a-9915-c0b377203945" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-20_9", "level": "warning", "message": { "text": "<stdio.h> library shall not be used", "markdown": "**\\[Line 1\\] <stdio\\.h> library shall not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1233725276", "unbViolId": "4c07567a-97ec-3172-ab67-46e3f8fb1293" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-098", "level": "warning", "message": { "text": "Do not declare the 'IOException' type in the global namespace", "markdown": "**\\[Line 3\\] Do not declare the 'IOException' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-738024550", "unbViolId": "791f3a36-4aad-3725-9d31-09e08e19af10" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-M7_3_1-a", "level": "error", "message": { "text": "Do not declare the 'IOException' type in the global namespace", "markdown": "**\\[Line 3\\] Do not declare the 'IOException' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-738024550", "unbViolId": "04594719-0629-301c-96db-59c85a14ef54" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-36", "level": "warning", "message": { "text": "Do not declare the 'IOException' type in the global namespace", "markdown": "**\\[Line 3\\] Do not declare the 'IOException' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-738024550", "unbViolId": "45d81079-7f28-3ed7-98de-d6f68c2d1099" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2008-7_3_1", "level": "error", "message": { "text": "Do not declare the 'IOException' type in the global namespace", "markdown": "**\\[Line 3\\] Do not declare the 'IOException' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-738024550", "unbViolId": "c2691463-ef38-3dd4-80d3-e4e671d0f5c6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The declaration of the 'IOException' type should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 3\\] The declaration of the 'IOException' type should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-738024550", "unbViolId": "28378970-4eee-3e6d-a47a-49ca6ea210a8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The declaration of the 'IOException' type should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 3\\] The declaration of the 'IOException' type should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-738024550", "unbViolId": "59308d75-418d-3ec0-8e43-64fd041b9446" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-19", "level": "error", "message": { "text": "Class 'IOException' does not define any constructors", "markdown": "**\\[Line 3\\] Class 'IOException' does not define any constructors**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-738024550", "unbViolId": "e168748c-ec75-3457-976e-0dc9464702b1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A12_4_2-a", "level": "warning", "message": { "text": "Class 'IOException' should be final", "markdown": "**\\[Line 3\\] Class 'IOException' should be final**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-738024550", "unbViolId": "67a2e78d-eba0-36c4-9cfb-6497ea621edb" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-MCPP-23", "level": "warning", "message": { "text": "Class 'IOException' should be final", "markdown": "**\\[Line 3\\] Class 'IOException' should be final**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-738024550", "unbViolId": "faee3a8d-ad19-39b3-b0f8-493f620e57ab" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare default constructor in 'IOException'", "markdown": "**\\[Line 3\\] Explicitly declare default constructor in 'IOException'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-738024550", "unbViolId": "d3049906-d666-373a-b73b-97733e93222f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare destructor in 'IOException'", "markdown": "**\\[Line 3\\] Explicitly declare destructor in 'IOException'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-738024550", "unbViolId": "3bba5785-75ed-398a-98ab-cfcf4e210131" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare copy assignment operator in 'IOException'", "markdown": "**\\[Line 3\\] Explicitly declare copy assignment operator in 'IOException'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-738024550", "unbViolId": "ebfbfbf8-f439-3e6e-ac4f-70c1a4bccd25" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare move assignment operator in 'IOException'", "markdown": "**\\[Line 3\\] Explicitly declare move assignment operator in 'IOException'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-738024550", "unbViolId": "f419cde7-db3b-3985-942b-b3101034cf22" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare copy constructor in 'IOException'", "markdown": "**\\[Line 3\\] Explicitly declare copy constructor in 'IOException'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-738024550", "unbViolId": "b6965c4e-d29a-38bf-ac86-20262f385a8f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare move constructor in 'IOException'", "markdown": "**\\[Line 3\\] Explicitly declare move constructor in 'IOException'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-738024550", "unbViolId": "73df5539-9d83-327a-b51e-85d02df36f55" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-04", "level": "warning", "message": { "text": "Class 'IOException' missing assignment operator or special comment", "markdown": "**\\[Line 3\\] Class 'IOException' missing assignment operator or special comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-738024550", "unbViolId": "630ca55e-9439-3c29-be35-16f19421e608" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-05", "level": "warning", "message": { "text": "Class 'IOException' missing copy constructor or special comment", "markdown": "**\\[Line 3\\] Class 'IOException' missing copy constructor or special comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-738024550", "unbViolId": "e1a42f28-16b2-3471-bdf3-956b7e649eca" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-40", "level": "warning", "message": { "text": "All letters beside the first one in name 'IOException' should be lowercase", "markdown": "**\\[Line 3\\] All letters beside the first one in name 'IOException' should be lowercase**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-738024550", "unbViolId": "a221dd9a-1c18-37ea-a866-0de055eae92b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-HN-19", "level": "warning", "message": { "text": "The 'IOException' identifier should have the 'C' prefix", "markdown": "**\\[Line 3\\] The 'IOException' identifier should have the 'C' prefix**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-738024550", "unbViolId": "3eaee734-9bae-3092-b10a-f1c28c10058e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "3335da05-9ae2-334d-aac9-043313a3a23e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "02bdc106-aa38-3dbe-8ae9-f739e0b6b567" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 5\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "6435d0a2-9cc8-36eb-bd87-a572650f18bf" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 5\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "41c7cbee-a0b8-34af-ad7e-caad6127e435" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 5\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "6eddf022-b112-30c1-8b0a-12460f1e0c2b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "b0ea8fd0-4c1b-38b6-8801-e49b82008e5d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "3feb5036-ed7d-3047-9730-2c1dd144aabf" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "13bef3ce-1036-3001-a977-283755ce5360" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "c3febf87-3f7a-33a2-a530-676f3d090800" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "d7e069fe-e187-3c70-9145-18663a03e688" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'readIntegerArray' function is not preceded by a comment", "markdown": "**\\[Line 5\\] The definition of the 'readIntegerArray' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "c994a6db-9c34-37f6-910f-118089855a78" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'readIntegerArray' function is not preceded by a comment", "markdown": "**\\[Line 5\\] The definition of the 'readIntegerArray' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "5af00930-b39f-3f25-a9c6-a8aedc0fca05" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "OWASP2019-API9-e", "level": "warning", "message": { "text": "Function 'readIntegerArray' has external linkage and is not declared in the header", "markdown": "**\\[Line 5\\] Function 'readIntegerArray' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "be1db83e-019b-34e4-b450-6ed426338ae5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-A3_3_1-a", "level": "error", "message": { "text": "Function 'readIntegerArray' has external linkage and is not declared in the header", "markdown": "**\\[Line 5\\] Function 'readIntegerArray' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "d858cab3-ccd3-3656-af6a-b399155aa744" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "JSF-137", "level": "warning", "message": { "text": "Function 'readIntegerArray' has external linkage and is not declared in the header", "markdown": "**\\[Line 5\\] Function 'readIntegerArray' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "3078772c-ccf0-3055-8eca-3a78c49075fa" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA-023", "level": "warning", "message": { "text": "Function 'readIntegerArray' has external linkage and is not declared in the header", "markdown": "**\\[Line 5\\] Function 'readIntegerArray' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "934bf194-5766-3c5a-8a4e-bb65a461e752" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2008-3_3_1", "level": "error", "message": { "text": "Function 'readIntegerArray' has external linkage and is not declared in the header", "markdown": "**\\[Line 5\\] Function 'readIntegerArray' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "b408f530-c545-37fe-87d1-fe47effffec0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "CERT_C-DCL15-a", "level": "warning", "message": { "text": "Function 'readIntegerArray' has external linkage and is not declared in the header", "markdown": "**\\[Line 5\\] Function 'readIntegerArray' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "3ba77954-de55-38c2-b221-85265c384102" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2004-8_10", "level": "warning", "message": { "text": "Function 'readIntegerArray' has external linkage and is not declared in the header", "markdown": "**\\[Line 5\\] Function 'readIntegerArray' has external linkage and is not declared in the header**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "26942992-dc23-3775-9e2a-37fa9c32e825" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'readIntegerArray' should be composed only of lowercase letters", "markdown": "**\\[Line 5\\] The name 'readIntegerArray' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "35fe8cd2-48fb-3aef-b5e0-4c24b1e96c00" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'readIntegerArray' should be composed only of lowercase letters", "markdown": "**\\[Line 5\\] The name 'readIntegerArray' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "4e0e74c0-beb4-3bc0-89a2-41d0ef5d8f5e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "JSF-098", "level": "warning", "message": { "text": "Do not declare the 'readIntegerArray' function in the global namespace", "markdown": "**\\[Line 5\\] Do not declare the 'readIntegerArray' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "70c21715-0e34-32fa-aefe-cbbb890b9cf8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-M7_3_1-a", "level": "error", "message": { "text": "Do not declare the 'readIntegerArray' function in the global namespace", "markdown": "**\\[Line 5\\] Do not declare the 'readIntegerArray' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "74d2d65e-4e2a-3213-9922-3e60d230015f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "CODSTA-CPP-36", "level": "warning", "message": { "text": "Do not declare the 'readIntegerArray' function in the global namespace", "markdown": "**\\[Line 5\\] Do not declare the 'readIntegerArray' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "26b7a918-ed33-38a9-8e6a-4120606c1f23" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2008-7_3_1", "level": "error", "message": { "text": "Do not declare the 'readIntegerArray' function in the global namespace", "markdown": "**\\[Line 5\\] Do not declare the 'readIntegerArray' function in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "8a833445-2eb6-3fa0-91d2-fc0b30ad7292" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "Function 'readIntegerArray' returns a pointer type", "markdown": "**\\[Line 5\\] Function 'readIntegerArray' returns a pointer type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "eb926f47-1677-3759-a2bc-bc4097bd3285" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "Function 'readIntegerArray' returns a pointer type", "markdown": "**\\[Line 5\\] Function 'readIntegerArray' returns a pointer type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "5b7c0898-9d93-32a2-a75c-cdec47e21aaa" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'readIntegerArray' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 5\\] The 'readIntegerArray' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "aae483fd-6ba7-3860-abc3-afcdd08a63f7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'readIntegerArray' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 5\\] The 'readIntegerArray' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "c2709afd-6715-3297-9876-5bed70633d80" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'file' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 5\\] The 'file' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "08391ef0-7cd9-3a6f-ad30-160617698f36" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'file' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 5\\] The 'file' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "c4a70309-5478-337b-b853-9f5876d79ae5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'pSize' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 5\\] The 'pSize' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "dfc39a5f-f37a-30b4-8e4d-fb2ec87bc6df" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'pSize' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 5\\] The 'pSize' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "674c5d56-3cd0-32a1-a8d5-90fe5b48112e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'readIntegerArray' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 5\\] The 'readIntegerArray' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "dedca02e-93c8-3e14-9eac-a58c436fb787" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'readIntegerArray' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 5\\] The 'readIntegerArray' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "b913489d-646c-35ae-a8b5-f1fbbdde8cc3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "FORMAT-28", "level": "warning", "message": { "text": "Return type is not placed in line before function 'readIntegerArray'", "markdown": "**\\[Line 5\\] Return type is not placed in line before function 'readIntegerArray'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "799e5da6-e4de-3665-8bd1-20c18507c7c6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'readIntegerArray' has Cyclomatic Complexity value: 3", "markdown": "**\\[Line 5\\] Function 'readIntegerArray' has Cyclomatic Complexity value: 3**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "d739ae0d-6686-3cf9-92f0-fc4bfa807044" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'readIntegerArray' has Essential Complexity value: 1", "markdown": "**\\[Line 5\\] Function 'readIntegerArray' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "27b3dbb5-e131-38b6-9be2-0c25b05bd076" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "NAMING-17", "level": "warning", "message": { "text": "Naming convention not followed: readIntegerArray", "markdown": "**\\[Line 5\\] Naming convention not followed: readIntegerArray**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "780ac900-6710-3513-8d93-9969dc683a3e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "GLOBAL-UNUSEDFUNC", "level": "warning", "message": { "text": "The 'readIntegerArray' function is not used in the testing scope", "markdown": "**\\[Line 5\\] The 'readIntegerArray' function is not used in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "4915eea2-3c4b-32ab-86d9-ce3649197fb7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "AUTOSAR-M0_1_10-a", "level": "warning", "message": { "text": "The 'readIntegerArray' function is not used in the testing scope", "markdown": "**\\[Line 5\\] The 'readIntegerArray' function is not used in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "4339592d-da9c-3ec7-8de7-f62116186f66" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2008-0_1_10_b", "level": "error", "message": { "text": "The 'readIntegerArray' function is not used in the testing scope", "markdown": "**\\[Line 5\\] The 'readIntegerArray' function is not used in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "23c928da-b8dd-34b8-8a28-e961c6da350c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "CODSTA-MCPP-08_b", "level": "error", "message": { "text": "The return type of the 'readIntegerArray' function should be declared as 'auto'", "markdown": "**\\[Line 5\\] The return type of the 'readIntegerArray' function should be declared as 'auto'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "da68116f-6114-32d2-888e-444693a2d88f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'file' differs only by case from identifier 'FILE' declared in file 'FILE.h'", "markdown": "**\\[Line 5\\] The identifier 'file' differs only by case from identifier 'FILE' declared in file 'FILE\\.h'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "c04c6c5e-101a-37f0-a159-e2ea7326e027" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'file' differs only by case from identifier 'FILE' declared in file 'FILE.h'", "markdown": "**\\[Line 5\\] The identifier 'file' differs only by case from identifier 'FILE' declared in file 'FILE\\.h'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "c3232543-0d4c-3a9f-8d56-55c7c95606cc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The parameter of pointer or array type is declared: file", "markdown": "**\\[Line 5\\] The parameter of pointer or array type is declared: file**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "b338741e-e5fe-303a-9510-4ad2f40ec6d8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The parameter of pointer type is declared: file", "markdown": "**\\[Line 5\\] The parameter of pointer type is declared: file**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "c90588ac-b053-34e5-900a-3a01533d6fcf" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "MISRA2008-2_10_1", "level": "error", "message": { "text": "Identifier name: 'file' differs only by case from its type name: 'FILE'", "markdown": "**\\[Line 5\\] Identifier name: 'file' differs only by case from its type name: 'FILE'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "e6526b12-6472-3634-83c3-5b208482347e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "HICPP-2_4_1-a", "level": "warning", "message": { "text": "Identifier name: 'file' differs only by case from its type name: 'FILE'", "markdown": "**\\[Line 5\\] Identifier name: 'file' differs only by case from its type name: 'FILE'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "8b4dc9ed-a51b-3cb9-9d74-bab7fe9b225c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "AUTOSAR-M2_10_1-a", "level": "error", "message": { "text": "Identifier name: 'file' differs only by case from its type name: 'FILE'", "markdown": "**\\[Line 5\\] Identifier name: 'file' differs only by case from its type name: 'FILE'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "8288c72b-e473-337f-ac32-0d405761b28a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "NAMING-47", "level": "warning", "message": { "text": "Identifier name: 'file' differs only by case from its type name: 'FILE'", "markdown": "**\\[Line 5\\] Identifier name: 'file' differs only by case from its type name: 'FILE'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "7d193d85-3072-3f69-8c18-9946de0fcddf" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "CERT_C-API00-a", "level": "warning", "message": { "text": "Parameter 'file' is not validated before use", "markdown": "**\\[Line 5\\] Parameter 'file' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "9ad3318b-7336-36ce-950f-07cdcd7be1a2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "CODSTA-86", "level": "warning", "message": { "text": "Parameter 'file' is not validated before use", "markdown": "**\\[Line 5\\] Parameter 'file' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "26b05836-02ed-3965-836e-6209466e6b3b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "NAMING-HN-34", "level": "warning", "message": { "text": "The 'file' identifier should have the 'p' prefix", "markdown": "**\\[Line 5\\] The 'file' identifier should have the 'p' prefix**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "fdee8c62-ee8c-3187-9079-abdd78fcd3a7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 29, "endColumn": 30 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "97c06ade-e749-3da0-8b5a-770a5609d4a4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "243e6e7a-2be9-3982-a19a-d4e01500608d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 5\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "c254100c-2e13-3ff8-a1d6-7194bc0a6dab" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 5\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "1c28737d-38a5-3466-b06f-e78479024ae2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 5\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "6259623b-4569-3590-8ce6-9b8ded10c4de" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "d2610d7a-d070-3a98-8dea-dcfe19b729b1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "cbe362f5-035f-3a92-8f44-e28c6b522ad2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "c7a69b2f-0a64-3f5c-804b-d39efc7ad35f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "effc4cff-ec22-3d68-b39f-0132bb3b7811" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "77da1f97-87ae-3e6c-8d55-675c819dd682" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The parameter of pointer or array type is declared: pSize", "markdown": "**\\[Line 5\\] The parameter of pointer or array type is declared: pSize**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "b8f489fd-3d9e-3db3-93b0-389194a8bc7b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The parameter of pointer type is declared: pSize", "markdown": "**\\[Line 5\\] The parameter of pointer type is declared: pSize**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "46c7d5ce-0df7-3b9f-aae8-bc7d8e9a6ffc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "CERT_C-API00-a", "level": "warning", "message": { "text": "Parameter 'pSize' is not validated before use", "markdown": "**\\[Line 5\\] Parameter 'pSize' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "523ae292-fa17-3aab-975b-23fdbb1facac" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "CODSTA-86", "level": "warning", "message": { "text": "Parameter 'pSize' is not validated before use", "markdown": "**\\[Line 5\\] Parameter 'pSize' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "6cbaf8e4-33da-3eb6-8c3c-dc58d5779d22" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "AUTOSAR-M7_1_2-b", "level": "error", "message": { "text": "Pass parameter \"pSize\" with const specifier", "markdown": "**\\[Line 5\\] Pass parameter \"pSize\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "b4039f8d-9b2b-36dc-a8b3-33f873587d40" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "MISRAC2012-RULE_8_13-a", "level": "warning", "message": { "text": "Pass parameter \"pSize\" with const specifier", "markdown": "**\\[Line 5\\] Pass parameter \"pSize\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "4701b2f2-1d32-3724-ae5f-657987f8cb69" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "CERT_C-DCL13-a", "level": "warning", "message": { "text": "Pass parameter \"pSize\" with const specifier", "markdown": "**\\[Line 5\\] Pass parameter \"pSize\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "7e2b722c-f8b2-3ad7-a11d-fa231ba2c9e4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "MISRA2004-16_7", "level": "warning", "message": { "text": "Pass parameter \"pSize\" with const specifier", "markdown": "**\\[Line 5\\] Pass parameter \"pSize\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "74f07a29-ddc2-353f-8639-75b4d93f4166" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "MISRA2012-RULE-8_13_a", "level": "warning", "message": { "text": "Pass parameter \"pSize\" with const specifier", "markdown": "**\\[Line 5\\] Pass parameter \"pSize\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "d039359c-4bac-36cc-8000-5c4707eb2a7e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "JSF-118", "level": "warning", "message": { "text": "Pass parameter \"pSize\" with const specifier", "markdown": "**\\[Line 5\\] Pass parameter \"pSize\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "4ec993c2-cd5f-358b-9ba6-c8c601bc4d91" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "MISRA2008-7_1_2_a", "level": "error", "message": { "text": "Pass parameter \"pSize\" with const specifier", "markdown": "**\\[Line 5\\] Pass parameter \"pSize\" with const specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "32bb1538-759c-3ed7-8dc6-6cee1af9f753" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "NAMING-HN-23", "level": "warning", "message": { "text": "The 'pSize' identifier should have the 'i' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 5\\] The 'pSize' identifier should have the 'i' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "6d16562a-913c-310e-b7d8-6c9dcc9f7c03" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "NAMING-HN-31", "level": "warning", "message": { "text": "The 'pSize' identifier should have the 'n' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 5\\] The 'pSize' identifier should have the 'n' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "5a0f3bbf-0eb3-31c7-a6d8-30e974da0f0b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "NAMING-HN-44", "level": "warning", "message": { "text": "The 'pSize' identifier should have the 'i' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 5\\] The 'pSize' identifier should have the 'i' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1086168919", "unbViolId": "498d5d6d-8eb1-3fa0-bf5c-1db23e59e7e8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 6\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "123", "unbViolId": "249d9278-0b1e-3717-af8c-68fef35a2ef9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 7\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "c7c9cb3a-6548-350e-8f44-f50b598e55a5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 7\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "5d4d205f-3d4e-3a0b-8b61-6650a87bd0b3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 7\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "e2f1e5ec-e417-3d41-a96b-4720fe82e965" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CERT_C-ERR33-d", "level": "error", "message": { "text": "Value returned from method \"fscanf\" should be checked", "markdown": "**\\[Line 7\\] Value returned from method \"fscanf\" should be checked**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "dc1cb414-c37c-3b85-b0cb-ef5080ba5a5b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } } ] }, { "ruleId": "CERT_C-ERR33-a", "level": "error", "message": { "text": "The value returned by the standard library function 'fscanf' should be used", "markdown": "**\\[Line 7\\] The value returned by the standard library function 'fscanf' should be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "c69c58bd-27ab-3c2a-8cc9-3500c55f3010" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "APSC_DV-003235-a", "level": "error", "message": { "text": "The value returned by the POSIX library function 'fscanf' should be used", "markdown": "**\\[Line 7\\] The value returned by the POSIX library function 'fscanf' should be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "624fd7e3-901e-3955-b8e4-ac6b0a7f4185" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CERT_C-POS54-a", "level": "error", "message": { "text": "The value returned by the POSIX library function 'fscanf' should be used", "markdown": "**\\[Line 7\\] The value returned by the POSIX library function 'fscanf' should be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "84364b37-ee1f-3a74-8039-8c9ba66cc93e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "AUTOSAR-A0_1_2-a", "level": "error", "message": { "text": "Unused function's 'fscanf' return value", "markdown": "**\\[Line 7\\] Unused function's 'fscanf' return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "ccc09619-ead4-31f3-8147-260f64be5c48" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CODSTA-CPP-58", "level": "warning", "message": { "text": "Unused function's 'fscanf' return value", "markdown": "**\\[Line 7\\] Unused function's 'fscanf' return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "75aea3a6-cb47-33f7-b7b5-b1871e6faa47" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2008-0_1_7", "level": "error", "message": { "text": "Unused function's 'fscanf' return value", "markdown": "**\\[Line 7\\] Unused function's 'fscanf' return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "26bd283c-d37a-316f-8573-603fd35ba2b7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-115_a", "level": "warning", "message": { "text": "Unused function's 'fscanf' return value", "markdown": "**\\[Line 7\\] Unused function's 'fscanf' return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "e95aad97-f7d8-3245-a68e-4aba9a8643d0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CODSTA-122_a", "level": "warning", "message": { "text": "Unused function's \"fscanf\" return value", "markdown": "**\\[Line 7\\] Unused function's \"fscanf\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "5fae575e-a60c-3970-b00b-40f1c1e3e1c6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRAC2012-RULE_17_7-a", "level": "error", "message": { "text": "Unused function's \"fscanf\" return value", "markdown": "**\\[Line 7\\] Unused function's \"fscanf\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "a975bd60-1898-3e3a-adf1-fc5993c848eb" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CERT_C-EXP12-a", "level": "warning", "message": { "text": "Unused function's \"fscanf\" return value", "markdown": "**\\[Line 7\\] Unused function's \"fscanf\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "87e8953a-8339-3870-801c-6b46dbc6ca0b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2012-RULE-17_7_a", "level": "error", "message": { "text": "Unused function's \"fscanf\" return value", "markdown": "**\\[Line 7\\] Unused function's \"fscanf\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "fa5e3796-d14a-345f-abb3-991e86cd40f2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2004-16_10", "level": "warning", "message": { "text": "Unused function's \"fscanf\" return value", "markdown": "**\\[Line 7\\] Unused function's \"fscanf\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "36e5deef-4ef7-3f13-90a7-2b7e406ad607" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "AUTOSAR-M0_3_2-a", "level": "error", "message": { "text": "Unused function's \"fscanf\" return value", "markdown": "**\\[Line 7\\] Unused function's \"fscanf\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "113eebfe-2340-3c0d-9fea-854cb6686bad" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2008-0_3_2", "level": "error", "message": { "text": "Unused function's \"fscanf\" return value", "markdown": "**\\[Line 7\\] Unused function's \"fscanf\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "6bc62d96-b5c0-3ea6-84b2-685e0c614467" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-115", "level": "warning", "message": { "text": "Unused function's \"fscanf\" return value", "markdown": "**\\[Line 7\\] Unused function's \"fscanf\" return value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "d877a0c2-ddc4-3195-809c-fc8cca9605ab" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "APSC_DV-002390-c", "level": "error", "message": { "text": "There should be number describing size of variable in '%d' on position:1", "markdown": "**\\[Line 7\\] There should be number describing size of variable in '%d' on position:1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "2f72d1a2-ce56-3428-b7a5-461bfc6007c6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "SECURITY-14", "level": "error", "message": { "text": "There should be number describing size of variable in '%d' on position:1", "markdown": "**\\[Line 7\\] There should be number describing size of variable in '%d' on position:1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "e174d06b-e561-338f-bc8b-65559f551a9a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CODSTA-CPP-01", "level": "note", "message": { "text": "Prefer iostream.h to stdio.h", "markdown": "**\\[Line 7\\] Prefer iostream\\.h to stdio\\.h**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "36d5c800-f7ad-3ec2-bf9c-41a943d7d582" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CERT_C-STR07-a", "level": "error", "message": { "text": "Unsafe string function 'fscanf' is being used", "markdown": "**\\[Line 7\\] Unsafe string function 'fscanf' is being used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "24767e7d-e924-341d-9922-1042f0f397de" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "AUTOSAR-A27_0_4-b", "level": "error", "message": { "text": "Unsafe string function 'fscanf' is being used", "markdown": "**\\[Line 7\\] Unsafe string function 'fscanf' is being used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "c2acbcb2-0b4f-3eba-b8b1-ebe4630e883e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CERT_C-INT05-a", "level": "warning", "message": { "text": "Unsafe string function 'fscanf' is being used", "markdown": "**\\[Line 7\\] Unsafe string function 'fscanf' is being used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "da967002-b462-3356-87d2-8f0f809fd424" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "SECURITY-13", "level": "error", "message": { "text": "Unsafe string function 'fscanf' is being used", "markdown": "**\\[Line 7\\] Unsafe string function 'fscanf' is being used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "3c1da146-bc9f-31cb-8020-e320cddde86f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRAC2012-RULE_21_6-a", "level": "error", "message": { "text": "The 'fscanf' library function should not be used", "markdown": "**\\[Line 7\\] The 'fscanf' library function should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "4334dab2-56c3-3890-aa5d-df6b81a22619" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2012-RULE-21_6", "level": "error", "message": { "text": "The 'fscanf' library function should not be used", "markdown": "**\\[Line 7\\] The 'fscanf' library function should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "6fb1a852-59e1-379b-854f-b053dd2c963c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CERT_C-ERR02-a", "level": "warning", "message": { "text": "The 'fscanf' library function should not be used", "markdown": "**\\[Line 7\\] The 'fscanf' library function should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "b38dcd98-546c-3361-8b19-9f6b7ba91ac2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CODSTA-110", "level": "warning", "message": { "text": "The 'fscanf' library function should not be used", "markdown": "**\\[Line 7\\] The 'fscanf' library function should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "3dc5d77d-e446-3b03-9afc-e771ab388e7a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CWE-798-a", "level": "note", "message": { "text": "The string literal is embedded directly in the code: %d", "markdown": "**\\[Line 7\\] The string literal is embedded directly in the code: %d**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "025cbd91-ab33-3585-811a-4d9353ff5676" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 15, "endColumn": 16 } } } ] }, { "ruleId": "CODSTA-203", "level": "note", "message": { "text": "The string literal is embedded directly in the code: %d", "markdown": "**\\[Line 7\\] The string literal is embedded directly in the code: %d**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "b2892a53-a2dc-3afa-9229-16a1fe87337e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 15, "endColumn": 16 } } } ] }, { "ruleId": "APSC_DV-003110-a", "level": "error", "message": { "text": "The string literal is embedded directly in the code: %d", "markdown": "**\\[Line 7\\] The string literal is embedded directly in the code: %d**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "8813261b-f7d2-31cf-887b-2a7e4e59bb09" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 15, "endColumn": 16 } } } ] }, { "ruleId": "CERT_C-MSC41-a", "level": "error", "message": { "text": "The string literal is embedded directly in the code: %d", "markdown": "**\\[Line 7\\] The string literal is embedded directly in the code: %d**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "414ec16a-42cf-3efc-a1f1-6b304f9432e4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 15, "endColumn": 16 } } } ] }, { "ruleId": "AUTOSAR-A27_0_4-d", "level": "error", "message": { "text": "The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call", "markdown": "**\\[Line 7\\] The string literal should not be passed as an argument of the 'const char \\*' type in the 'fscanf' function call**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "8667d133-ebc6-322f-aa94-1fd5029da841" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 15, "endColumn": 16 } } } ] }, { "ruleId": "PB-76", "level": "warning", "message": { "text": "The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call", "markdown": "**\\[Line 7\\] The string literal should not be passed as an argument of the 'const char \\*' type in the 'fscanf' function call**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1844934654", "unbViolId": "c25512d3-9572-3c48-a2a8-a746f23bacf3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 15, "endColumn": 16 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 8\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "68bad1b6-f334-3797-9e5b-6b29726121c4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 8\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "95bc16d3-90ea-31cb-9486-60f86969eaed" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 8\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "08ff75eb-2b60-35d3-8b32-59ed67a0bf69" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "BD-SECURITY-TDALLOC", "level": "error", "message": { "text": "Data obtained from a file (\"*pSize\") is used to determine the size of memory allocation", "markdown": "**\\[Line 8\\] Data obtained from a file \\(\"\\*pSize\"\\) is used to determine the size of memory allocation**  \n  \n**Tainting point**  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where the array is allocated**&nbsp;  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "1773312110", "unbViolId": "d2a63bf1-f581-31ff-98ad-af26f40b8c12" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } }, "message": { "text": "Violation Cause - Tainting point" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "Violation Point - Point where the array is allocated" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "CWE-770-a", "level": "error", "message": { "text": "Data obtained from a file (\"*pSize\") is used to determine the size of memory allocation", "markdown": "**\\[Line 8\\] Data obtained from a file \\(\"\\*pSize\"\\) is used to determine the size of memory allocation**  \n  \n**Tainting point**  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where the array is allocated**&nbsp;  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "1773312110", "unbViolId": "a2aa8c37-c3c0-38a4-8d00-ce9419973547" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } }, "message": { "text": "Violation Cause - Tainting point" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "Violation Point - Point where the array is allocated" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "OWASP2019-API4-a", "level": "error", "message": { "text": "Data obtained from a file (\"*pSize\") is used to determine the size of memory allocation", "markdown": "**\\[Line 8\\] Data obtained from a file \\(\"\\*pSize\"\\) is used to determine the size of memory allocation**  \n  \n**Tainting point**  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where the array is allocated**&nbsp;  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "1773312110", "unbViolId": "7c897b2b-5287-3fd5-9ead-2b9914778808" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } }, "message": { "text": "Violation Cause - Tainting point" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "Violation Point - Point where the array is allocated" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "c8805dc6-77b5-3b47-8747-61e16a8c8449" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "f56ddb4f-2de5-3623-9a57-a50c18aa1b5a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 8\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "428a1948-e3fd-3895-ae65-661a9cb91187" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 8\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "301dd7d6-4a51-3137-9045-e2a53f6a610e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 8\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "08d096cf-92ef-38d1-ba6d-c1700f2b1a6e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "2bdcca6d-20ed-321a-b37d-4895bd02e8bc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "e4bbae44-d138-3c1b-8ba9-75e7506588da" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "bff48475-57bc-32f0-b75e-d7fc351a9c2d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "972698be-2c7f-36a7-8460-4a1eacd0fa10" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "75bf1478-c52f-3a60-b16a-4b8a422cf6a4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CODSTA-MCPP-08_a", "level": "error", "message": { "text": "The 'data' variable should be declared with the 'auto' type specifier", "markdown": "**\\[Line 8\\] The 'data' variable should be declared with the 'auto' type specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "353ccf7b-900f-37f7-a544-e152059da07b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The variable of pointer or array type is declared: data", "markdown": "**\\[Line 8\\] The variable of pointer or array type is declared: data**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "b77d4b92-73da-30c9-aff1-acf684aab61a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The variable of pointer type is declared: data", "markdown": "**\\[Line 8\\] The variable of pointer type is declared: data**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "fddd3ce4-018f-3a96-b930-40bb6398d07e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CERT_C-DCL00-a", "level": "warning", "message": { "text": "Declare local variable 'data' as const", "markdown": "**\\[Line 8\\] Declare local variable 'data' as const**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "556e9446-877f-38ef-8353-0aad44b1b1c7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A7_1_1-a", "level": "error", "message": { "text": "Declare local variable 'data' as const", "markdown": "**\\[Line 8\\] Declare local variable 'data' as const**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "6ec946e1-662a-39ee-9ebd-1df4060669d9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2008-7_1_1", "level": "error", "message": { "text": "Declare local variable 'data' as const", "markdown": "**\\[Line 8\\] Declare local variable 'data' as const**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "39eb1774-639b-3a3c-81dd-d800b75e4dd4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-53", "level": "warning", "message": { "text": "Declare local variable 'data' as const", "markdown": "**\\[Line 8\\] Declare local variable 'data' as const**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "4f7e0a7a-ca48-3f3d-b68b-9b149c1b0b85" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-7_1_2-a", "level": "warning", "message": { "text": "Declare local variable 'data' as const", "markdown": "**\\[Line 8\\] Declare local variable 'data' as const**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "d7c27968-15c8-3f71-ae73-c1f4b81474cb" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'data' variable should be commented", "markdown": "**\\[Line 8\\] The 'data' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "5df43693-999e-342e-8d0c-2fc5ee9423b4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'data' variable should be commented", "markdown": "**\\[Line 8\\] The 'data' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "6a622cf1-e9c8-32a4-9aa2-1b2dea2d8f97" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-34", "level": "warning", "message": { "text": "Check the return value of new", "markdown": "**\\[Line 8\\] Check the return value of new**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "2154e01a-2d32-315f-8b9c-841f01097216" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CERT_CPP-MEM52-a", "level": "error", "message": { "text": "Check the return value of new", "markdown": "**\\[Line 8\\] Check the return value of new**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "5b005b1d-5626-3f55-9b42-56fd630fb995" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-22", "level": "warning", "message": { "text": "Naming convention not followed: data", "markdown": "**\\[Line 8\\] Naming convention not followed: data**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "c6f76f5b-d705-3600-81cd-5adc78eb26fd" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-HN-16", "level": "warning", "message": { "text": "The 'data' identifier should have the 'prg' prefix", "markdown": "**\\[Line 8\\] The 'data' identifier should have the 'prg' prefix**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "bb1c5384-3382-34fb-ae7d-56ca443f356f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-HN-23", "level": "warning", "message": { "text": "The 'data' identifier should have the 'i' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 8\\] The 'data' identifier should have the 'i' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "8ce9458b-6e7e-3458-acc5-ed6340908b2b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-HN-31", "level": "warning", "message": { "text": "The 'data' identifier should have the 'n' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 8\\] The 'data' identifier should have the 'n' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "006c1a08-ff16-32bb-aa69-ade160b1f074" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-HN-34", "level": "warning", "message": { "text": "The 'data' identifier should have the 'p' prefix", "markdown": "**\\[Line 8\\] The 'data' identifier should have the 'p' prefix**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "8c8441db-8be3-3bc6-b58b-0e5ca0bc3521" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-HN-44", "level": "warning", "message": { "text": "The 'data' identifier should have the 'i' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 8\\] The 'data' identifier should have the 'i' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "b0ed3849-2715-38d2-8de8-4a644d743ba3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A8_5_2-a", "level": "error", "message": { "text": "The definition of the 'data' variable should contain a braced initializer", "markdown": "**\\[Line 8\\] The definition of the 'data' variable should contain a braced initializer**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "1d02e6fc-31f4-3672-b95b-3a0f673c2b3a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-MCPP-38", "level": "warning", "message": { "text": "The definition of the 'data' variable should contain a braced initializer", "markdown": "**\\[Line 8\\] The definition of the 'data' variable should contain a braced initializer**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "dd32f450-7d81-3bfb-9d67-3b1ecfd9159f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2012-DIR-4_12", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 8\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "7c253c57-47f4-3fbf-88d5-c2b6a360b917" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 14, "endColumn": 15 } } } ] }, { "ruleId": "MISRA2008-18_4_1", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 8\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "10bad79d-fb10-3ec8-9e29-766a3c0cdf24" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 14, "endColumn": 15 } } } ] }, { "ruleId": "MISRAC2012-RULE_21_3-a", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 8\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "057b60cc-7617-3b21-a441-105db7cd2043" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 14, "endColumn": 15 } } } ] }, { "ruleId": "AUTOSAR-A18_5_2-a", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 8\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "625032da-75f6-3dac-a553-e3f3bb643d70" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 14, "endColumn": 15 } } } ] }, { "ruleId": "JSF-206", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 8\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "2a3eaca0-dcf6-3ec9-bded-5cfe76ee8047" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 14, "endColumn": 15 } } } ] }, { "ruleId": "MISRA2012-RULE-21_3", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 8\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "91e02688-3c11-3a05-a301-e5ec424a8b43" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 14, "endColumn": 15 } } } ] }, { "ruleId": "MISRA2004-20_4", "level": "warning", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 8\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "a484fd5e-5a07-37b0-8a39-121b0689a1b8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 14, "endColumn": 15 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_12-a", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 8\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "a44898a1-9068-323c-a710-02a9886e7eec" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 14, "endColumn": 15 } } } ] }, { "ruleId": "STL-10", "level": "warning", "message": { "text": "Use vector or string instead of dynamically allocated array", "markdown": "**\\[Line 8\\] Use vector or string instead of dynamically allocated array**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "d87452c2-dc67-35f6-a9de-32fed90e2c0d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 14, "endColumn": 15 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "83f74243-3ee2-399c-b792-d425c2e51822" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "e78d6a64-ca18-3ffc-b166-e8601dd82f77" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 8\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "8becdfe2-799c-39b1-b0d1-2d4fb6d90302" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 8\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "0c38ae71-3e74-3487-a233-f4fce3391fb8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 8\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "ea99c154-97dc-3778-a269-a41ef60093d6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "db09e844-1f98-321a-b61a-427ddc396721" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "9de797b1-9c4e-3105-a75e-3edf2abb11d4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "865696ec-5341-39fd-97b2-65f04fb4d44e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "0820bf40-40ab-30dc-acb3-e671669fd152" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 8\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1773312110", "unbViolId": "ef429860-117e-3ce3-bc1f-a9388bf5f015" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 9\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "c8aee152-cca1-332b-8921-6d8ba328ce4c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 9\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "47819d6c-5e5c-3b5f-a7f0-a401b85f8d42" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 9\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "4d484832-f39c-366c-8fe8-9fc8057a609f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-43", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 9\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "7dcd7017-8f78-368c-b6e5-7203c2feef1b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_b", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 9\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "d3a1ee12-ef6e-3ae2-9dec-09675e7563a8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 9\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "448f4844-3ed2-301e-8b5c-7868c2e27815" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 9\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "64e07923-6931-3287-8d3b-b409fea1316c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 9\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "f7dbdddc-06f7-3805-9f43-85f03a86c6f4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-02", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 9\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "6b5b27d9-9187-3dd1-b17f-de01ce439b90" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "BD-SECURITY-TDLOOP", "level": "error", "message": { "text": "Data obtained from a file (\"*pSize\") is used in a loop condition", "markdown": "**\\[Line 9\\] Data obtained from a file \\(\"\\*pSize\"\\) is used in a loop condition**  \n  \n**Tainting point**  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: pSize\\[\\]_  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];  \n**Tainted data use in a loop condition**&nbsp;  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: pSize\\[0\\]_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "616861252", "unbViolId": "fdbe62f2-7587-3f43-b100-24db27e393ea" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } }, "message": { "text": "Violation Cause - Tainting point  *** Tainted data: pSize[]" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "Violation Point - Tainted data use in a loop condition  *** Tainted data: pSize[0]" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "CODSTA-83", "level": "warning", "message": { "text": "A loop does not have a fixed upper nor lower bound", "markdown": "**\\[Line 9\\] A loop does not have a fixed upper nor lower bound**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "657d866c-a4a0-3f89-bb7e-83867f064964" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "1b618b35-e8e6-3e1c-b0a9-558625361014" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "e3a5cc23-7e87-3113-bb44-c1ca78a4d2aa" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 9\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "fec799a8-7874-3050-acc1-4441e6062f7e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 9\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "cb15dd51-1bba-3ba8-a93b-2bea34788b39" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 9\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "de674751-940b-3714-8f5f-b576be29e2bd" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "ccd76f8c-cf76-32d9-82bc-200890eb9ed5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "4e978fd2-ade4-3c5b-9695-4c9529beab7f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "ac84c6e4-3255-3440-91f3-3a2f38ac3e05" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "7fdf457f-fec5-36f1-9aa1-deec80e7367a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "b31b666d-7f25-3d5e-9912-35bfa828bbcb" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "PORT-13", "level": "warning", "message": { "text": "'i' shall be declared as unsigned int or signed int", "markdown": "**\\[Line 9\\] 'i' shall be declared as unsigned int or signed int**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "e346a7f5-5f94-3e87-81fb-eb159f2e0f5b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'i' variable should be commented", "markdown": "**\\[Line 9\\] The 'i' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "c500281f-4034-3a5a-925f-d6cb1ea50969" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'i' variable should be commented", "markdown": "**\\[Line 9\\] The 'i' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "00dab5c6-7019-38af-a310-b99e6d50594a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "AUTOSAR-A8_5_2-a", "level": "error", "message": { "text": "The definition of the 'i' variable should contain a braced initializer", "markdown": "**\\[Line 9\\] The definition of the 'i' variable should contain a braced initializer**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "0673a277-1ed8-31b8-ad21-bb259fd421a2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "CODSTA-MCPP-38", "level": "warning", "message": { "text": "The definition of the 'i' variable should contain a braced initializer", "markdown": "**\\[Line 9\\] The definition of the 'i' variable should contain a braced initializer**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "3c82e1f9-c4d3-3ced-8432-66c6f3e48a68" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "APSC_DV-002560-k", "level": "error", "message": { "text": "User input was directly used as a loop boundary: pSize", "markdown": "**\\[Line 9\\] User input was directly used as a loop boundary: pSize**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "465acab0-6136-3271-bb7e-0b2011ed574a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "APSC_DV-002550-k", "level": "error", "message": { "text": "User input was directly used as a loop boundary: pSize", "markdown": "**\\[Line 9\\] User input was directly used as a loop boundary: pSize**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "8d33b60f-3814-3b6b-a53d-66c35ec89497" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "APSC_DV-001290-b", "level": "error", "message": { "text": "User input was directly used as a loop boundary: pSize", "markdown": "**\\[Line 9\\] User input was directly used as a loop boundary: pSize**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "1688df94-1a73-35ef-a021-84a072116766" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "SECURITY-38", "level": "error", "message": { "text": "User input was directly used as a loop boundary: pSize", "markdown": "**\\[Line 9\\] User input was directly used as a loop boundary: pSize**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "e3f52001-f4f0-3865-8229-c82e3e03a490" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "CWE-20-j", "level": "error", "message": { "text": "User input was directly used as a loop boundary: pSize", "markdown": "**\\[Line 9\\] User input was directly used as a loop boundary: pSize**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "e08fb7d8-9a86-3901-8f45-9f49271b4edc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "APSC_DV-002530-k", "level": "error", "message": { "text": "User input was directly used as a loop boundary: pSize", "markdown": "**\\[Line 9\\] User input was directly used as a loop boundary: pSize**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "ddc05e84-67af-325f-9b91-6cbf3a96ed01" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "APSC_DV-002520-k", "level": "error", "message": { "text": "User input was directly used as a loop boundary: pSize", "markdown": "**\\[Line 9\\] User input was directly used as a loop boundary: pSize**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "0591e211-7faa-3556-9cf1-038046459c74" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "OPT-04", "level": "warning", "message": { "text": "Postfix operator applied to variable 'i'; prefer prefix type", "markdown": "**\\[Line 9\\] Postfix operator applied to variable 'i'; prefer prefix type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "616861252", "unbViolId": "2c5383ee-99bd-3ab6-8f0a-7be8c1d42235" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 10\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "5f8b373c-3fa9-3fa6-be7c-da50d6c50cd8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 10\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "7941b4d5-67b3-333b-a7c1-30c5150f1991" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 10\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "e3df1c62-f801-3e06-bf90-06cf6a0bdb94" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-43", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 10\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "67462a2e-bc8d-31a7-80c5-fb63dd886a2e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_b", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 10\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "99ab1e1d-ffb0-372e-a9c8-e0b6496090be" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 10\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "fff763cc-d736-3675-b3fb-db95e53b6d65" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 10\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "38a6ea4f-cc7a-371b-bd49-ab2a8d34edc6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 10\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "425dab85-158b-35bc-bfa3-569d5be3001b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-02", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 10\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "8fddb422-c045-3019-a5e0-8a16cd559e0a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 10\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "27db80cc-2da1-308b-98be-d17902995585" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 10\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "6d3d990a-6d17-35a5-a79a-0694cec96e06" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 10\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "7a84636c-e97a-3266-b1c5-e4e43f52545e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "CODSTA-23", "level": "warning", "message": { "text": "The 'if' statement doesn't have an 'else' clause", "markdown": "**\\[Line 10\\] The 'if' statement doesn't have an 'else' clause**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "2838647a-0570-34ec-bd04-2ccb94247d42" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "APSC_DV-002390-c", "level": "error", "message": { "text": "There should be number describing size of variable in '%d' on position:1", "markdown": "**\\[Line 10\\] There should be number describing size of variable in '%d' on position:1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "013c44c4-25cb-38b5-94a2-78cdd2aeeeb0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "SECURITY-14", "level": "error", "message": { "text": "There should be number describing size of variable in '%d' on position:1", "markdown": "**\\[Line 10\\] There should be number describing size of variable in '%d' on position:1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "85cac63c-ee15-32db-a6d5-d6e65d01384b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-01", "level": "note", "message": { "text": "Prefer iostream.h to stdio.h", "markdown": "**\\[Line 10\\] Prefer iostream\\.h to stdio\\.h**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "e4ed2e24-5633-399a-a300-d355e2e4ff57" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CERT_C-STR07-a", "level": "error", "message": { "text": "Unsafe string function 'fscanf' is being used", "markdown": "**\\[Line 10\\] Unsafe string function 'fscanf' is being used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "a133ebe7-fb57-3740-b0fc-466b941fa32f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A27_0_4-b", "level": "error", "message": { "text": "Unsafe string function 'fscanf' is being used", "markdown": "**\\[Line 10\\] Unsafe string function 'fscanf' is being used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "d67b6733-4491-321d-ae6a-4d6fffa023d6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CERT_C-INT05-a", "level": "warning", "message": { "text": "Unsafe string function 'fscanf' is being used", "markdown": "**\\[Line 10\\] Unsafe string function 'fscanf' is being used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "24c1b228-1189-3958-ad1f-7c9aaa4f20ab" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "SECURITY-13", "level": "error", "message": { "text": "Unsafe string function 'fscanf' is being used", "markdown": "**\\[Line 10\\] Unsafe string function 'fscanf' is being used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "b4690e84-0db6-3f16-97ec-7fb5788d6271" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRAC2012-RULE_21_6-a", "level": "error", "message": { "text": "The 'fscanf' library function should not be used", "markdown": "**\\[Line 10\\] The 'fscanf' library function should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "993becd0-0833-31e4-a9dd-09c52370114a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2012-RULE-21_6", "level": "error", "message": { "text": "The 'fscanf' library function should not be used", "markdown": "**\\[Line 10\\] The 'fscanf' library function should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "bf628ee6-988b-3c8a-a062-84137717f23b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CERT_C-ERR02-a", "level": "warning", "message": { "text": "The 'fscanf' library function should not be used", "markdown": "**\\[Line 10\\] The 'fscanf' library function should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "cd63d2d3-719d-3e6b-abfb-f9300c2f89b2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-110", "level": "warning", "message": { "text": "The 'fscanf' library function should not be used", "markdown": "**\\[Line 10\\] The 'fscanf' library function should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "a5fa6bcd-5a6f-3d4a-aae6-e76192e698eb" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CWE-798-a", "level": "note", "message": { "text": "The string literal is embedded directly in the code: %d", "markdown": "**\\[Line 10\\] The string literal is embedded directly in the code: %d**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "f59f208d-3546-3ee2-92da-5e6dc96a269c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "CODSTA-203", "level": "note", "message": { "text": "The string literal is embedded directly in the code: %d", "markdown": "**\\[Line 10\\] The string literal is embedded directly in the code: %d**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "805db63c-b66d-3769-a244-df3ad11de9f3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "APSC_DV-003110-a", "level": "error", "message": { "text": "The string literal is embedded directly in the code: %d", "markdown": "**\\[Line 10\\] The string literal is embedded directly in the code: %d**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "9463152a-d54c-3507-ab55-bae0c7f34206" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "CERT_C-MSC41-a", "level": "error", "message": { "text": "The string literal is embedded directly in the code: %d", "markdown": "**\\[Line 10\\] The string literal is embedded directly in the code: %d**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "73136fa9-16d0-3d4e-8a85-820f44c6b10a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "AUTOSAR-A27_0_4-d", "level": "error", "message": { "text": "The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call", "markdown": "**\\[Line 10\\] The string literal should not be passed as an argument of the 'const char \\*' type in the 'fscanf' function call**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "ba5d9926-a772-321b-9911-1fa84d613e6a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "PB-76", "level": "warning", "message": { "text": "The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call", "markdown": "**\\[Line 10\\] The string literal should not be passed as an argument of the 'const char \\*' type in the 'fscanf' function call**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "c9e1811c-aa83-3e57-9fa5-cb48a4bd558e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "MISRA2004-17_4", "level": "warning", "message": { "text": "Avoid indexing non-array objects", "markdown": "**\\[Line 10\\] Avoid indexing non\\-array objects**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "46f6aa5b-4fc4-3691-b6a8-c95586217c95" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "MISRA2008-5_0_15", "level": "error", "message": { "text": "Avoid indexing non-array objects", "markdown": "**\\[Line 10\\] Avoid indexing non\\-array objects**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "87774edd-8868-3df5-beca-bdd5f867e922" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "AUTOSAR-M5_0_15-a", "level": "error", "message": { "text": "Avoid indexing non-array objects", "markdown": "**\\[Line 10\\] Avoid indexing non\\-array objects**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "700522989", "unbViolId": "786a8902-115b-3218-901c-279a1ef2004f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 27, "endColumn": 28 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 11\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-541829676", "unbViolId": "becda0d5-8bf3-3d5a-b2a9-47ec74aba1de" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 11\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-541829676", "unbViolId": "deed7623-3a5f-391f-b75f-d4b4f3de625a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 11\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-541829676", "unbViolId": "98c058ba-84ce-3da4-882e-36170836b714" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 11\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-541829676", "unbViolId": "8c986e60-8080-3036-8863-3703639b7d84" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 11\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-541829676", "unbViolId": "c9dd72c6-c7e0-3e6b-bd0b-aa86bed43e77" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 11\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-541829676", "unbViolId": "9b781750-2529-3104-be6d-b05a86efa03c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 11\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-541829676", "unbViolId": "50d57036-6a6f-32a5-bb85-28958231e9e9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 11\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-541829676", "unbViolId": "c38c515e-9ee2-3088-9755-dadf9c9370b8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 11\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-541829676", "unbViolId": "50e6893d-f5a7-321f-9858-0818367dc777" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "JSF-208", "level": "error", "message": { "text": "c++ exception handling structure is used in function 'readIntegerArray'", "markdown": "**\\[Line 11\\] c\\+\\+ exception handling structure is used in function 'readIntegerArray'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-541829676", "unbViolId": "844eec0d-0044-38e9-8f70-697efb917777" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "EXCEPT-05", "level": "error", "message": { "text": "c++ exception handling structure is used in function 'readIntegerArray'", "markdown": "**\\[Line 11\\] c\\+\\+ exception handling structure is used in function 'readIntegerArray'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-541829676", "unbViolId": "ef17c755-ea53-3081-99a6-fa82dc9989c4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 4, "endColumn": 5 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 12\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "9053", "unbViolId": "45957a8f-0931-343a-8381-34683326245d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 12\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "9053", "unbViolId": "45bfdf09-b4e7-3ce2-a2fa-c53377dd52b7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 12\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "9053", "unbViolId": "f548347e-25d8-3951-b606-a2892afcfe95" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 12\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "9053", "unbViolId": "4c93b9c4-3c90-3dc2-8545-ee2fa0bbed84" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 12\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "9053", "unbViolId": "e5eca777-cb86-30ca-83ef-f5dd951532f9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 12\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "9053", "unbViolId": "ef806d6f-6aef-3e69-9c3c-c42eb5e3d6d7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 13\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "404", "unbViolId": "e3382abc-cb17-3c83-b94d-6fd3c97936ec" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 13\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "404", "unbViolId": "c13c9897-50d0-31d3-a5d5-beca45bce1f7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 13\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "404", "unbViolId": "34986ddd-0548-3f50-8833-01f0a53d81e3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 14\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1006431594", "unbViolId": "d3e7af92-9a11-32c7-8ce5-63dcea25e424" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 14, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 14\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1006431594", "unbViolId": "c44914bd-6c24-34a1-9427-04a1a61865d7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 14, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 14\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1006431594", "unbViolId": "8d91a6fd-8198-3db5-a949-03cdecb7c151" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 14, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-25_b", "level": "warning", "message": { "text": "'return' statement should be used with parenthesis", "markdown": "**\\[Line 14\\] 'return' statement should be used with parenthesis**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1006431594", "unbViolId": "655be76f-fb1c-39ab-bcee-c1a1bc51f238" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 14, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "APSC_DV-002000-a", "level": "error", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "125", "unbViolId": "8b3f9919-dc5c-33ba-8453-af75d55b06e4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where memory is allocated  *** Allocated memory: data" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Loop condition evaluation: (i < *pSize) (assuming true)  *** Entering the loop" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (fscanf(...) == -1) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Throws an exception" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } }, "message": { "text": "Violation Point - Point where allocated memory is lost  *** Allocated memory: data" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "AUTOSAR-A15_0_2-a", "level": "error", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "125", "unbViolId": "c34f1f65-40a9-3346-9d1b-408647e1179d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where memory is allocated  *** Allocated memory: data" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Loop condition evaluation: (i < *pSize) (assuming true)  *** Entering the loop" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (fscanf(...) == -1) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Throws an exception" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } }, "message": { "text": "Violation Point - Point where allocated memory is lost  *** Allocated memory: data" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "AUTOSAR-A15_1_4-a", "level": "error", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "125", "unbViolId": "aaa818cc-3d39-3700-a395-d1c06c68d3da" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where memory is allocated  *** Allocated memory: data" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Loop condition evaluation: (i < *pSize) (assuming true)  *** Entering the loop" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (fscanf(...) == -1) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Throws an exception" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } }, "message": { "text": "Violation Point - Point where allocated memory is lost  *** Allocated memory: data" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "BD-RES-LEAKS", "level": "error", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "125", "unbViolId": "5cc0bf3c-eee8-3d76-9424-7b06927143d0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where memory is allocated  *** Allocated memory: data" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Loop condition evaluation: (i < *pSize) (assuming true)  *** Entering the loop" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (fscanf(...) == -1) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Throws an exception" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } }, "message": { "text": "Violation Point - Point where allocated memory is lost  *** Allocated memory: data" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "CERT_C-CON30-a", "level": "warning", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "125", "unbViolId": "c9ae289c-cbcb-3b9f-9231-dad9f828d5bc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where memory is allocated  *** Allocated memory: data" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Loop condition evaluation: (i < *pSize) (assuming true)  *** Entering the loop" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (fscanf(...) == -1) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Throws an exception" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } }, "message": { "text": "Violation Point - Point where allocated memory is lost  *** Allocated memory: data" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "CERT_C-FIO22-a", "level": "warning", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "125", "unbViolId": "62790c3f-2265-3399-881e-893a28ce5b33" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where memory is allocated  *** Allocated memory: data" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Loop condition evaluation: (i < *pSize) (assuming true)  *** Entering the loop" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (fscanf(...) == -1) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Throws an exception" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } }, "message": { "text": "Violation Point - Point where allocated memory is lost  *** Allocated memory: data" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "CERT_C-FIO42-a", "level": "warning", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "125", "unbViolId": "52e5b546-c732-3b86-8f73-672cc275bd5a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where memory is allocated  *** Allocated memory: data" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Loop condition evaluation: (i < *pSize) (assuming true)  *** Entering the loop" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (fscanf(...) == -1) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Throws an exception" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } }, "message": { "text": "Violation Point - Point where allocated memory is lost  *** Allocated memory: data" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "CERT_C-MEM00-e", "level": "error", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "125", "unbViolId": "843a4837-1f2b-3d6c-a0de-8265c390e17f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where memory is allocated  *** Allocated memory: data" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Loop condition evaluation: (i < *pSize) (assuming true)  *** Entering the loop" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (fscanf(...) == -1) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Throws an exception" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } }, "message": { "text": "Violation Point - Point where allocated memory is lost  *** Allocated memory: data" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "CERT_C-MEM12-a", "level": "warning", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "125", "unbViolId": "99feffd4-8599-3009-b641-5ac979ae3c7e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where memory is allocated  *** Allocated memory: data" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Loop condition evaluation: (i < *pSize) (assuming true)  *** Entering the loop" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (fscanf(...) == -1) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Throws an exception" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } }, "message": { "text": "Violation Point - Point where allocated memory is lost  *** Allocated memory: data" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "CERT_C-MEM31-a", "level": "error", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "125", "unbViolId": "1ae2b5ad-aa63-34ea-b791-9a7e97768ff6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where memory is allocated  *** Allocated memory: data" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Loop condition evaluation: (i < *pSize) (assuming true)  *** Entering the loop" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (fscanf(...) == -1) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Throws an exception" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } }, "message": { "text": "Violation Point - Point where allocated memory is lost  *** Allocated memory: data" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "CERT_C-WIN30-a", "level": "error", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "125", "unbViolId": "8d8aa12a-e309-3c47-ab20-08430b845f84" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where memory is allocated  *** Allocated memory: data" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Loop condition evaluation: (i < *pSize) (assuming true)  *** Entering the loop" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (fscanf(...) == -1) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Throws an exception" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } }, "message": { "text": "Violation Point - Point where allocated memory is lost  *** Allocated memory: data" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "CERT_CPP-ERR57-a", "level": "warning", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "125", "unbViolId": "d51bd892-3c21-350f-87a5-72baf9d963dd" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where memory is allocated  *** Allocated memory: data" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Loop condition evaluation: (i < *pSize) (assuming true)  *** Entering the loop" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (fscanf(...) == -1) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Throws an exception" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } }, "message": { "text": "Violation Point - Point where allocated memory is lost  *** Allocated memory: data" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "CERT_CPP-FIO51-a", "level": "warning", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "125", "unbViolId": "c13a35df-503f-34fe-9ad1-8ea8aee88c52" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where memory is allocated  *** Allocated memory: data" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Loop condition evaluation: (i < *pSize) (assuming true)  *** Entering the loop" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (fscanf(...) == -1) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Throws an exception" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } }, "message": { "text": "Violation Point - Point where allocated memory is lost  *** Allocated memory: data" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "CWE-772-a", "level": "error", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "125", "unbViolId": "bf5f163a-a5cb-32bf-a38d-8c559c442a59" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where memory is allocated  *** Allocated memory: data" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Loop condition evaluation: (i < *pSize) (assuming true)  *** Entering the loop" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (fscanf(...) == -1) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Throws an exception" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } }, "message": { "text": "Violation Point - Point where allocated memory is lost  *** Allocated memory: data" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "MISRA2012-DIR-4_13_a", "level": "warning", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "125", "unbViolId": "d890f876-feeb-3369-a83d-793c35d72abf" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where memory is allocated  *** Allocated memory: data" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Loop condition evaluation: (i < *pSize) (assuming true)  *** Entering the loop" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (fscanf(...) == -1) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Throws an exception" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } }, "message": { "text": "Violation Point - Point where allocated memory is lost  *** Allocated memory: data" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "MISRA2012-RULE-22_1", "level": "error", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "125", "unbViolId": "c182bba6-a8d3-387b-89bd-67914fe35b94" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where memory is allocated  *** Allocated memory: data" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Loop condition evaluation: (i < *pSize) (assuming true)  *** Entering the loop" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (fscanf(...) == -1) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Throws an exception" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } }, "message": { "text": "Violation Point - Point where allocated memory is lost  *** Allocated memory: data" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "MISRAC2012-DIR_4_13-a", "level": "warning", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "125", "unbViolId": "288eb50d-2a74-3657-842b-caa3adf0cca4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where memory is allocated  *** Allocated memory: data" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Loop condition evaluation: (i < *pSize) (assuming true)  *** Entering the loop" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (fscanf(...) == -1) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Throws an exception" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } }, "message": { "text": "Violation Point - Point where allocated memory is lost  *** Allocated memory: data" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "MISRAC2012-RULE_22_1-a", "level": "error", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "125", "unbViolId": "0cc35f38-cc68-354d-ab3f-ec332778027c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where memory is allocated  *** Allocated memory: data" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Loop condition evaluation: (i < *pSize) (assuming true)  *** Entering the loop" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (fscanf(...) == -1) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Throws an exception" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } }, "message": { "text": "Violation Point - Point where allocated memory is lost  *** Allocated memory: data" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "OWASP2019-API4-b", "level": "error", "message": { "text": "Memory not deallocated: data", "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "125", "unbViolId": "b4a2c8b8-c0d2-3b9b-aaaa-86751d0d0600" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where memory is allocated  *** Allocated memory: data" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Loop condition evaluation: (i < *pSize) (assuming true)  *** Entering the loop" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (fscanf(...) == -1) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Throws an exception" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1 } }, "message": { "text": "Violation Point - Point where allocated memory is lost  *** Allocated memory: data" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "METRICS-31", "level": "warning", "message": { "text": "The assertion density is lower than two assertions per function", "markdown": "**\\[Line 1\\] The assertion density is lower than two assertions per function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1179647073", "unbViolId": "dee2a589-d49b-3172-868a-0c56f70715a7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-03", "level": "warning", "message": { "text": "The filename 'NullPointer.cpp' should be in lowercase", "markdown": "**\\[Line 1\\] The filename 'NullPointer\\.cpp' should be in lowercase**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1179647073", "unbViolId": "26190c72-fe48-3f64-90c5-51fa3a19703b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-38", "level": "warning", "message": { "text": "Implementation file 'NullPointer.cpp' should have the file name extension \".cc\"", "markdown": "**\\[Line 1\\] Implementation file 'NullPointer\\.cpp' should have the file name extension \"\\.cc\"**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1179647073", "unbViolId": "c05fe132-1147-3b54-b360-166c0e65f8dc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PFO-04", "level": "note", "message": { "text": "Implementation file 'NullPointer.cpp' should declare a local constant string that begins from characters \"@(#)\" ", "markdown": "**\\[Line 1\\] Implementation file 'NullPointer\\.cpp' should declare a local constant string that begins from characters \"@\\(\\#\\)\" **" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1179647073", "unbViolId": "54743972-e1c5-3285-9275-dfe8cc42ed70" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-02", "level": "warning", "message": { "text": "Add comment containing the copyright information at the begin of file 'NullPointer.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the copyright information at the begin of file 'NullPointer\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1179647073", "unbViolId": "6edcd06b-6bd5-3686-9d38-4635ad18bb45" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-133_b", "level": "warning", "message": { "text": "Add comment containing the copyright information at the begin of file 'NullPointer.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the copyright information at the begin of file 'NullPointer\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1179647073", "unbViolId": "5945ab15-2869-3eb9-9718-bdfdf4a5cc01" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-03", "level": "warning", "message": { "text": "Add comment containing the information on the file at the begin of file 'NullPointer.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the information on the file at the begin of file 'NullPointer\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1179647073", "unbViolId": "56da4978-0f80-3370-9753-e31593f8afe8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-133_a", "level": "warning", "message": { "text": "Add comment containing the information on the file at the begin of file 'NullPointer.cpp'", "markdown": "**\\[Line 1\\] Add comment containing the information on the file at the begin of file 'NullPointer\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1179647073", "unbViolId": "6e806823-717a-3070-a152-f8fa2cd5727f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-032", "level": "warning", "message": { "text": "Not a proper header file (*.h ) is being included: \"Point.hpp\"", "markdown": "**\\[Line 1\\] Not a proper header file \\(\\*\\.h \\) is being included: \"Point\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1179647073", "unbViolId": "005a3f3d-9d74-3c16-94d0-10ea1eeacae9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-08", "level": "warning", "message": { "text": "Not a proper header file (*.h ) is being included: \"Point.hpp\"", "markdown": "**\\[Line 1\\] Not a proper header file \\(\\*\\.h \\) is being included: \"Point\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1179647073", "unbViolId": "b95dadea-9a32-36ab-adc5-46d289025391" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-09", "level": "error", "message": { "text": "Disallowed #include notation is being used: \"Point.hpp\"", "markdown": "**\\[Line 1\\] Disallowed \\#include notation is being used: \"Point\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1179647073", "unbViolId": "53180478-723d-3f7e-b80a-753c7d078ac2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-033", "level": "error", "message": { "text": "Disallowed #include notation is being used: \"Point.hpp\"", "markdown": "**\\[Line 1\\] Disallowed \\#include notation is being used: \"Point\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1179647073", "unbViolId": "7bc6cb43-356c-33ab-b9c9-374b67b1c7c1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-18_0_1", "level": "error", "message": { "text": "Instead of C library header '<stdlib.h>' the corresponding C++ library header should be used", "markdown": "**\\[Line 3\\] Instead of C library header '<stdlib\\.h>' the corresponding C\\+\\+ library header should be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-327381023", "unbViolId": "ce1c3e7b-1656-3432-9891-c9a6c6fb9bfe" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-1_3_3-a", "level": "warning", "message": { "text": "Instead of C library header '<stdlib.h>' the corresponding C++ library header should be used", "markdown": "**\\[Line 3\\] Instead of C library header '<stdlib\\.h>' the corresponding C\\+\\+ library header should be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-327381023", "unbViolId": "92ca40ec-04a7-3e35-8098-1b7670733613" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A18_0_1-a", "level": "error", "message": { "text": "Instead of C library header '<stdlib.h>' the corresponding C++ library header should be used", "markdown": "**\\[Line 3\\] Instead of C library header '<stdlib\\.h>' the corresponding C\\+\\+ library header should be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-327381023", "unbViolId": "8b8a139d-ff4c-311a-b657-b675409eb9a6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CODSTA-CPP-59", "level": "warning", "message": { "text": "Instead of C library header '<stdlib.h>' the corresponding C++ library header should be used", "markdown": "**\\[Line 3\\] Instead of C library header '<stdlib\\.h>' the corresponding C\\+\\+ library header should be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-327381023", "unbViolId": "b5682d09-8f45-3e13-bc09-8f21d8715393" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A1_1_1-d", "level": "error", "message": { "text": "Instead of C library header '<stdlib.h>' the corresponding C++ library header should be used", "markdown": "**\\[Line 3\\] Instead of C library header '<stdlib\\.h>' the corresponding C\\+\\+ library header should be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-327381023", "unbViolId": "b2b354ed-7320-3d83-bebc-0e83d90950c7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-17_2_1-a", "level": "warning", "message": { "text": "Ensure that C Standard Library is securely used", "markdown": "**\\[Line 3\\] Ensure that C Standard Library is securely used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-327381023", "unbViolId": "6e0de748-69c0-38c8-893d-94605e1d8672" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 3, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'main' function is not preceded by a comment", "markdown": "**\\[Line 5\\] The definition of the 'main' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "2cdd0ddc-cd4d-3481-b789-1be6f92f0c3f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'main' function is not preceded by a comment", "markdown": "**\\[Line 5\\] The definition of the 'main' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "605d90a0-2e78-3cbb-9c34-98bb835a693b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'main' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 5\\] The 'main' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "9b144fed-2fab-3334-be8b-a103513f2545" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'main' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 5\\] The 'main' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "a539d7fd-8f9c-3554-a02a-e7eb9d295b1e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'argc' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 5\\] The 'argc' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "92b83f18-bb69-3bc9-87d7-88f51bea88c3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'argc' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 5\\] The 'argc' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "fa51bd3b-659e-3ead-a5f4-0ba00e05826d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'argv' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 5\\] The 'argv' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "e1b2e3d8-1016-3892-870a-b9f99fdfe0b7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'argv' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 5\\] The 'argv' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "40d6afc4-c24a-3586-bd40-0ccc84e54a30" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'main' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 5\\] The 'main' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "06dd972e-f749-3a1a-b5e7-0cec7b670629" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'main' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 5\\] The 'main' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "c600a550-88c2-3fdc-b033-b93623c2ff5a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "PORT-13", "level": "warning", "message": { "text": "'main' shall be declared as unsigned int or signed int", "markdown": "**\\[Line 5\\] 'main' shall be declared as unsigned int or signed int**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "e22d24a6-a7b8-3587-9cd3-6054d922ad0a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "CERT_CPP-ERR50-d", "level": "warning", "message": { "text": "The 'main' function does not contain a catch(...) to catch all unhandled exceptions", "markdown": "**\\[Line 5\\] The 'main' function does not contain a catch\\(\\.\\.\\.\\) to catch all unhandled exceptions**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "8ca0dfe6-f61f-3d8a-9b96-bcd6814556be" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A15_3_3-a", "level": "error", "message": { "text": "The 'main' function does not contain a catch(...) to catch all unhandled exceptions", "markdown": "**\\[Line 5\\] The 'main' function does not contain a catch\\(\\.\\.\\.\\) to catch all unhandled exceptions**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "33d2831e-1372-3da7-9680-230a9f52226a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-15_3_2-b", "level": "warning", "message": { "text": "The 'main' function does not contain a catch(...) to catch all unhandled exceptions", "markdown": "**\\[Line 5\\] The 'main' function does not contain a catch\\(\\.\\.\\.\\) to catch all unhandled exceptions**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "ca20118b-4e87-365d-b76f-437eebafd563" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2008-15_3_2", "level": "warning", "message": { "text": "The 'main' function does not contain a catch(...) to catch all unhandled exceptions", "markdown": "**\\[Line 5\\] The 'main' function does not contain a catch\\(\\.\\.\\.\\) to catch all unhandled exceptions**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "79235a1f-60f4-3021-9fcd-92923575dff9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A15_5_3-d", "level": "error", "message": { "text": "The 'main' function does not contain a catch(...) to catch all unhandled exceptions", "markdown": "**\\[Line 5\\] The 'main' function does not contain a catch\\(\\.\\.\\.\\) to catch all unhandled exceptions**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "af7aceed-aac4-3671-ad04-0b07a13ea140" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "EXCEPT-06", "level": "warning", "message": { "text": "The 'main' function does not contain a catch(...) to catch all unhandled exceptions", "markdown": "**\\[Line 5\\] The 'main' function does not contain a catch\\(\\.\\.\\.\\) to catch all unhandled exceptions**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "1c1e6f03-f11d-34de-ae8c-c5e47957912a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2008-15_5_3_d", "level": "error", "message": { "text": "The 'main' function does not contain a catch(...) to catch all unhandled exceptions", "markdown": "**\\[Line 5\\] The 'main' function does not contain a catch\\(\\.\\.\\.\\) to catch all unhandled exceptions**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "d369c94e-4c63-38a3-b94d-6133b373d5cf" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "FORMAT-28", "level": "warning", "message": { "text": "Return type is not placed in line before function 'main'", "markdown": "**\\[Line 5\\] Return type is not placed in line before function 'main'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "ef98ecf5-95f9-33b8-b7d8-c472b2f28151" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'main' has Cyclomatic Complexity value: 2", "markdown": "**\\[Line 5\\] Function 'main' has Cyclomatic Complexity value: 2**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "1f9d2aa0-34f0-3a5f-9513-68f4942e7757" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'main' has Essential Complexity value: 1", "markdown": "**\\[Line 5\\] Function 'main' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "10b6e4ec-0ba7-393f-ac4c-68057c783f3b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "f75be9c0-3cb6-3f14-a445-1163ae29511b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "c3d182c1-0627-38ef-a9d1-6f7bbe50c241" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "PORT-13", "level": "warning", "message": { "text": "'argc' shall be declared as unsigned int or signed int", "markdown": "**\\[Line 5\\] 'argc' shall be declared as unsigned int or signed int**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "483e55fa-4f56-3ad7-8cf4-6597fd50098d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 14, "endColumn": 15 } } } ] }, { "ruleId": "NAMING-HN-22", "level": "warning", "message": { "text": "The 'argc' identifier should have the 'i' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 5\\] The 'argc' identifier should have the 'i' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "af6459c9-6584-385b-9110-7f67d54e7ddc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 14, "endColumn": 15 } } } ] }, { "ruleId": "NAMING-HN-30", "level": "warning", "message": { "text": "The 'argc' identifier should have the 'n' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 5\\] The 'argc' identifier should have the 'n' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "cdd96d3e-cf0b-3beb-b4a1-d479779ef636" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 14, "endColumn": 15 } } } ] }, { "ruleId": "NAMING-HN-43", "level": "warning", "message": { "text": "The 'argc' identifier should have the 'i' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 5\\] The 'argc' identifier should have the 'i' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "67360468-2b83-3b55-9014-848b146d4803" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 14, "endColumn": 15 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'char' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'char' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "aca797d9-f0cc-3f43-bf08-7bc0a2c64d0d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'char' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'char' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "b5d4b879-30a3-3bc7-b7a9-eb689f710796" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The parameter of pointer or array type is declared: argv", "markdown": "**\\[Line 5\\] The parameter of pointer or array type is declared: argv**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "69349221-bd56-3446-9913-077454ced502" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 26, "endColumn": 27 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The parameter of pointer type is declared: argv", "markdown": "**\\[Line 5\\] The parameter of pointer type is declared: argv**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "4a1ecb8f-9362-34fa-b50c-1e1b54e35706" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 26, "endColumn": 27 } } } ] }, { "ruleId": "JSF-097_c", "level": "error", "message": { "text": "Parameter 'argv' with array type was found in 'main' function declaration", "markdown": "**\\[Line 5\\] Parameter 'argv' with array type was found in 'main' function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "2dab15c0-f02e-3d3a-85dd-598bf0a359da" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 26, "endColumn": 27 } } } ] }, { "ruleId": "CODSTA-142", "level": "error", "message": { "text": "Parameter 'argv' with array type was found in 'main' function declaration", "markdown": "**\\[Line 5\\] Parameter 'argv' with array type was found in 'main' function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "3a4afbe6-5687-3788-a940-1b2065eadc12" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 26, "endColumn": 27 } } } ] }, { "ruleId": "CERT_C-API00-a", "level": "warning", "message": { "text": "Parameter 'argv' is not validated before use", "markdown": "**\\[Line 5\\] Parameter 'argv' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "77d34f76-aa94-3e39-ba0b-003c5d8feba4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 26, "endColumn": 27 } } } ] }, { "ruleId": "CODSTA-86", "level": "warning", "message": { "text": "Parameter 'argv' is not validated before use", "markdown": "**\\[Line 5\\] Parameter 'argv' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-332596053", "unbViolId": "daea1b6c-1bcb-3e1f-8009-3925d9b324cc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 26, "endColumn": 27 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 6\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "123", "unbViolId": "7ad6f144-6009-30ae-8161-2f10f0dec05d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 7\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "6fb65cf8-46e5-34e4-9dac-0e02871b2cd7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 7\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "aba60dea-eb72-30cb-a28f-d55d81a9bb6d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 7\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "a927d7a4-40ef-3320-9952-d540710908d3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A8_5_2-a", "level": "error", "message": { "text": "The definition of the 'point' variable should contain a braced initializer", "markdown": "**\\[Line 7\\] The definition of the 'point' variable should contain a braced initializer**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "1589f52c-baa1-3275-b13c-ca14f3746a9c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-MCPP-38", "level": "warning", "message": { "text": "The definition of the 'point' variable should contain a braced initializer", "markdown": "**\\[Line 7\\] The definition of the 'point' variable should contain a braced initializer**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "04fd32ac-a18c-3f39-8cfe-3b29828bbf57" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'", "markdown": "**\\[Line 7\\] The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "16f74a54-b4a7-3ba1-b7bd-d3bc4b91e5e1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'", "markdown": "**\\[Line 7\\] The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "378f377f-a89e-3d0e-aa24-11906eddbc73" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-94", "level": "warning", "message": { "text": "The variable of pointer or array type is declared: point", "markdown": "**\\[Line 7\\] The variable of pointer or array type is declared: point**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "d8502027-eef8-3b15-aa80-9efda2180f13" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-95", "level": "warning", "message": { "text": "The variable of pointer type is declared: point", "markdown": "**\\[Line 7\\] The variable of pointer type is declared: point**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "6d56ec6e-81dd-3dbe-8707-cb270ea5a594" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "MISRA2008-2_10_1", "level": "error", "message": { "text": "Identifier name: 'point' differs only by case from its type name: 'Point'", "markdown": "**\\[Line 7\\] Identifier name: 'point' differs only by case from its type name: 'Point'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "6e3de051-a3b6-3460-bc68-145847ab69d0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "HICPP-2_4_1-a", "level": "warning", "message": { "text": "Identifier name: 'point' differs only by case from its type name: 'Point'", "markdown": "**\\[Line 7\\] Identifier name: 'point' differs only by case from its type name: 'Point'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "98c4b077-08e7-34f8-8fab-e09cfd4d942e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-M2_10_1-a", "level": "error", "message": { "text": "Identifier name: 'point' differs only by case from its type name: 'Point'", "markdown": "**\\[Line 7\\] Identifier name: 'point' differs only by case from its type name: 'Point'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "2b87c961-7377-3a4c-9ff4-a086eb9f509f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-47", "level": "warning", "message": { "text": "Identifier name: 'point' differs only by case from its type name: 'Point'", "markdown": "**\\[Line 7\\] Identifier name: 'point' differs only by case from its type name: 'Point'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "2207ee0b-e8cc-3630-a4d3-6dea2e25a4aa" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "MRM-18", "level": "warning", "message": { "text": "Locally allocated memory is not deleted locally for : point", "markdown": "**\\[Line 7\\] Locally allocated memory is not deleted locally for : point**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "6a759686-e27e-36d0-ae42-119de224c412" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CERT_C-MEM00-a", "level": "error", "message": { "text": "Locally allocated memory is not deleted locally for : point", "markdown": "**\\[Line 7\\] Locally allocated memory is not deleted locally for : point**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "fdca545e-d213-3b51-bbcb-3e1f62728b88" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-132_a", "level": "warning", "message": { "text": "The 'point' variable should be commented", "markdown": "**\\[Line 7\\] The 'point' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "b31470b0-040b-379c-80ff-490eb903c9c6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "COMMENT-05", "level": "warning", "message": { "text": "The 'point' variable should be commented", "markdown": "**\\[Line 7\\] The 'point' variable should be commented**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "51bcc8c3-7635-387c-8c6e-058a780e1459" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-A4_10_1-b", "level": "error", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 7\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "ebf8eb99-d8e4-3fd5-bba1-372ab83ba347" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "HICPP-2_5_3-a", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 7\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "af6ff0b5-6d1b-3b62-83e3-a8826948e570" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "CODSTA-MCPP-04", "level": "warning", "message": { "text": "Prefer 'nullptr' to '0' as the null pointer value", "markdown": "**\\[Line 7\\] Prefer 'nullptr' to '0' as the null pointer value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "a095c4f9-a6a3-3b83-b425-01ebb27e6d44" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_a", "level": "error", "message": { "text": "Variable 'point' of pointer type is initialized with '0'", "markdown": "**\\[Line 7\\] Variable 'point' of pointer type is initialized with '0'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "042555dd-8b99-316b-88e0-7e27d6d00489" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "AUTOSAR-M4_10_2-a", "level": "error", "message": { "text": "Variable 'point' of pointer type is initialized with '0'", "markdown": "**\\[Line 7\\] Variable 'point' of pointer type is initialized with '0'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "8a507664-5f47-3731-b162-10a6cf2d239a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "MISRA2008-4_10_2", "level": "error", "message": { "text": "Variable 'point' of pointer type is initialized with '0'", "markdown": "**\\[Line 7\\] Variable 'point' of pointer type is initialized with '0'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "6a2608b8-c04d-37a2-b576-0ff6c2ce5199" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "CODSTA-CPP-63", "level": "warning", "message": { "text": "Variable 'point' of pointer type is initialized with '0'", "markdown": "**\\[Line 7\\] Variable 'point' of pointer type is initialized with '0'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "3159ae03-d759-3f3b-8c06-2d8950be280c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-a", "level": "error", "message": { "text": "Variable 'point' of pointer type is initialized with '0'", "markdown": "**\\[Line 7\\] Variable 'point' of pointer type is initialized with '0'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "b7b4229f-caf8-3f29-be16-1e0b9271eba9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "CODSTA-131", "level": "warning", "message": { "text": "Variable 'point' of pointer type is initialized with '0'", "markdown": "**\\[Line 7\\] Variable 'point' of pointer type is initialized with '0'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "f9d8e37a-a3d8-317f-be3d-6153c66831c2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "MISRA2012-RULE-11_9_b", "level": "error", "message": { "text": "Variable 'point' of pointer type is initialized with '0'", "markdown": "**\\[Line 7\\] Variable 'point' of pointer type is initialized with '0'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "aae5b770-bb7b-3af1-9e50-22b851b97d12" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "MISRAC2012-RULE_11_9-b", "level": "error", "message": { "text": "Variable 'point' of pointer type is initialized with '0'", "markdown": "**\\[Line 7\\] Variable 'point' of pointer type is initialized with '0'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "264435611", "unbViolId": "95046ffd-99f1-3671-80a7-3a6552d0c4d4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 8\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-620226472", "unbViolId": "4e190f1f-a054-3940-bc53-892d9c352678" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 8\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-620226472", "unbViolId": "bfc35de4-dfeb-3b56-97f3-d37857539303" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 8\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-620226472", "unbViolId": "e0501315-ef1d-3551-befe-bf440ac03235" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-43", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 8\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-620226472", "unbViolId": "9c142e28-eb3b-33ac-b560-56942b2b0c5d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_b", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 8\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-620226472", "unbViolId": "97625e20-c973-3ff8-ad98-4466df07313e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 8\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-620226472", "unbViolId": "61e4281f-1d84-3f0f-9178-5be601e3c027" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 8\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-620226472", "unbViolId": "c3ed56da-380e-3961-8462-447199d0b0bc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 8\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-620226472", "unbViolId": "67d3e199-768f-3042-8904-7989bbba1410" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-02", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 8\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-620226472", "unbViolId": "1e1d0124-b5b4-3750-b34f-7a029b5f3e50" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CODSTA-23", "level": "warning", "message": { "text": "The 'if' statement doesn't have an 'else' clause", "markdown": "**\\[Line 8\\] The 'if' statement doesn't have an 'else' clause**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-620226472", "unbViolId": "53f275ed-5a31-372b-bf28-1605a281f4b2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "SECURITY-35", "level": "error", "message": { "text": "No value of command line should be trusted: argc", "markdown": "**\\[Line 8\\] No value of command line should be trusted: argc**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-620226472", "unbViolId": "bc99284c-46dc-3398-a442-ea9c36cbf141" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "JSF-151", "level": "warning", "message": { "text": "Literal constant '3' is used", "markdown": "**\\[Line 8\\] Literal constant '3' is used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-620226472", "unbViolId": "ea8e13d5-8d29-38b3-acf6-438e2ff38de0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "CODSTA-26", "level": "warning", "message": { "text": "Literal constant '3' is used", "markdown": "**\\[Line 8\\] Literal constant '3' is used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-620226472", "unbViolId": "a3eacd8e-c670-3fec-bf8a-85e2441eb2b1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "AUTOSAR-A5_1_1-a", "level": "error", "message": { "text": "Literal constant '3' is used", "markdown": "**\\[Line 8\\] Literal constant '3' is used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-620226472", "unbViolId": "60e62091-d7b8-39ed-a786-3f7ba438de65" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "HICPP-5_1_1-a", "level": "warning", "message": { "text": "Literal constant '3' is used", "markdown": "**\\[Line 8\\] Literal constant '3' is used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-620226472", "unbViolId": "93802019-821f-3738-8cb9-29029f0e80b7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 9\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "2205995b-84a3-3394-a6dc-ac1bd32bf621" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 9\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "94800970-bf67-3237-8fa7-35d9658274cd" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 9\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "31b0c103-a8c0-3a6a-81ed-a16f5f212448" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 9\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "73a209a3-a148-3b99-bf6b-cad770037c13" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 9\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "6352fc85-6437-3524-a6ce-c716505c8bb8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 9\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "ae80c5ee-b1fc-327c-817f-c5a2ba35fbb7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "SECURITY-35", "level": "error", "message": { "text": "No value of command line should be trusted: argv", "markdown": "**\\[Line 9\\] No value of command line should be trusted: argv**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "7a88fc6f-31fe-3ab0-8f40-94056bd3998e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "MRM-34", "level": "warning", "message": { "text": "Check the return value of new", "markdown": "**\\[Line 9\\] Check the return value of new**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "50118b07-d249-388b-8a45-cc80aa2e9f46" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "CERT_CPP-MEM52-a", "level": "error", "message": { "text": "Check the return value of new", "markdown": "**\\[Line 9\\] Check the return value of new**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "d2432525-9ad9-3e99-b75f-5457535daba0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 3, "endColumn": 4 } } } ] }, { "ruleId": "MISRA2012-DIR-4_12", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 9\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "bbacaf15-2e2b-3c2e-8c6d-2e981c11fffc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "MISRA2008-18_4_1", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 9\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "1a4ccf23-c2b1-34dd-8c4b-cdb4171b0388" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "MISRAC2012-RULE_21_3-a", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 9\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "2e20136a-e0c2-3578-96a2-d7611ff4d303" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "AUTOSAR-A18_5_2-a", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 9\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "2242e128-be53-3749-b0d4-9678a7d2b1c8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "JSF-206", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 9\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "6d0eec2f-c8e8-30f7-878b-aef96a1cce0a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "MISRA2012-RULE-21_3", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 9\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "98cb8c5d-3410-3ddf-8eb0-8a36184491c5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "MISRA2004-20_4", "level": "warning", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 9\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "67078494-c51e-3158-936b-68ed1b963b9b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_12-a", "level": "error", "message": { "text": "'new' operator should not be used", "markdown": "**\\[Line 9\\] 'new' operator should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "0ea3943c-2bfe-3a52-880a-fc98a38df3a1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "SECURITY-35", "level": "error", "message": { "text": "No value of command line should be trusted: argv", "markdown": "**\\[Line 9\\] No value of command line should be trusted: argv**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "03e5d5ee-14ec-3aed-bb7e-16eec99ba73f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "MISRAC2012-RULE_21_7-a", "level": "error", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "7274ea13-f290-32ed-b913-f1923a98f27b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "CERT_CPP-ERR62-a", "level": "warning", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "2b00b415-399f-30f5-ac6d-5d752ee3b227" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "MISRA2008-18_0_2", "level": "error", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "5f405119-20c3-398f-a614-3d2c653f4b48" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "CERT_C-ERR34-a", "level": "warning", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "7eb1c0fe-9bff-3bc1-9f67-04c23edf9546" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "MISRA2004-20_10", "level": "warning", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "2d63fd31-e8b5-318d-ba78-8edb94f45b57" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "CERT_C-MSC24-a", "level": "warning", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "48110c2c-c782-3823-b89a-6bdc3794e75d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "CERT_C-ERR07-a", "level": "error", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "2579da7b-913e-3f2f-ba25-9e5b19dc924f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "AUTOSAR-A18_0_2-a", "level": "error", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "fbf2e9af-a7e2-3b1a-bc72-690f49bdaf42" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "MISRA2012-RULE-21_7", "level": "error", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "d57e81f3-fe68-30c6-b179-b4a61fbc6d4b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "JSF-023", "level": "error", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "aa02afdb-c7bc-3e4d-8d0f-ba0aa2f79046" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "SECURITY-35", "level": "error", "message": { "text": "No value of command line should be trusted: argv", "markdown": "**\\[Line 9\\] No value of command line should be trusted: argv**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "77a70291-857f-3520-918d-afb2f0d15fb0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 21, "endColumn": 22 } } } ] }, { "ruleId": "SECURITY-35", "level": "error", "message": { "text": "No value of command line should be trusted: argv", "markdown": "**\\[Line 9\\] No value of command line should be trusted: argv**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "b8dd3f9f-6455-35f8-8c27-1c31919b9d3a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 26, "endColumn": 27 } } } ] }, { "ruleId": "MISRAC2012-RULE_21_7-a", "level": "error", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "ea500f53-676f-3e1a-8e12-05f2c8a9106a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "CERT_CPP-ERR62-a", "level": "warning", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "772ef3c5-cbc0-30bb-9059-c088b18a0482" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "MISRA2008-18_0_2", "level": "error", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "64a1e676-d03c-37a1-a78e-2a471450df0a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "CERT_C-ERR34-a", "level": "warning", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "5cf501e3-8beb-3c80-afea-7c81c02ffbc8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "MISRA2004-20_10", "level": "warning", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "573ae821-bced-33fa-9963-98816376af26" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "CERT_C-MSC24-a", "level": "warning", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "c012b0f6-3601-39ca-bff0-899e8df7c389" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "CERT_C-ERR07-a", "level": "error", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "48808ff7-c75b-31c7-8547-0f364be9a447" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "AUTOSAR-A18_0_2-a", "level": "error", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "46494fd3-c5ae-3999-85fb-02141d8b78aa" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "MISRA2012-RULE-21_7", "level": "error", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "d97da612-95ac-3cd5-ba92-c4c99fc8c62e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "JSF-023", "level": "error", "message": { "text": "Do not use the 'atoi' function", "markdown": "**\\[Line 9\\] Do not use the 'atoi' function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "ab2452d4-9d98-3623-97e1-e23c4329b406" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "SECURITY-35", "level": "error", "message": { "text": "No value of command line should be trusted: argv", "markdown": "**\\[Line 9\\] No value of command line should be trusted: argv**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "a2553b38-9b75-3b37-87d6-601e0b36a45a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "SECURITY-35", "level": "error", "message": { "text": "No value of command line should be trusted: argv", "markdown": "**\\[Line 9\\] No value of command line should be trusted: argv**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "7c35da82-c3df-3fee-8c7c-0f1671505e8e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 41, "endColumn": 42 } } } ] }, { "ruleId": "JSF-151", "level": "warning", "message": { "text": "Literal constant '2' is used", "markdown": "**\\[Line 9\\] Literal constant '2' is used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "dd7f4b46-39cc-3b5b-b10b-f37cea2135c0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 46, "endColumn": 47 } } } ] }, { "ruleId": "CODSTA-26", "level": "warning", "message": { "text": "Literal constant '2' is used", "markdown": "**\\[Line 9\\] Literal constant '2' is used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "542429c9-ceee-3d7b-b4a2-f59c154fa96c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 46, "endColumn": 47 } } } ] }, { "ruleId": "AUTOSAR-A5_1_1-a", "level": "error", "message": { "text": "Literal constant '2' is used", "markdown": "**\\[Line 9\\] Literal constant '2' is used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "5c067374-bb36-3edc-97b7-beecf0a6448e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 46, "endColumn": 47 } } } ] }, { "ruleId": "HICPP-5_1_1-a", "level": "warning", "message": { "text": "Literal constant '2' is used", "markdown": "**\\[Line 9\\] Literal constant '2' is used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "212456074", "unbViolId": "8a478754-5a42-3c4a-bd9e-ab3629ee50de" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 46, "endColumn": 47 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 10\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "404", "unbViolId": "4f520168-013b-394c-a11e-16bea3912c18" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 10\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "404", "unbViolId": "6e269a87-85b7-3850-921e-ca74aae85274" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 10\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "404", "unbViolId": "094856bf-aec5-325c-a008-21cafb586aa1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 11\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1178067846", "unbViolId": "85502a6f-64d0-37db-b306-2dd4f0be0fb5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 11\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1178067846", "unbViolId": "af3990c7-9ce8-3071-8471-acd4e87f9ef1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 11\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1178067846", "unbViolId": "759046e3-ae1e-3fcd-b542-be99c23111f7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "AUTOSAR-A5_3_2-a", "level": "error", "message": { "text": "\"point\" may possibly be null", "markdown": "**\\[Line 11\\] \"point\" may possibly be null**  \n  \n**Source of null value**  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming false\\)_  \n**Null pointer dereferencing point**&nbsp;  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "1178067846", "unbViolId": "ab840931-3a46-3565-8e04-bd01f4d36379" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } }, "message": { "text": "Violation Cause - Source of null value  *** Null value carrier: point" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (argc > 3) (assuming false)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "Violation Point - Null pointer dereferencing point  *** Null value carrier: point" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "AUTOSAR-M0_3_1-f", "level": "error", "message": { "text": "\"point\" may possibly be null", "markdown": "**\\[Line 11\\] \"point\" may possibly be null**  \n  \n**Source of null value**  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming false\\)_  \n**Null pointer dereferencing point**&nbsp;  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "1178067846", "unbViolId": "074c0d10-1cef-3bc8-b3bc-5fe456b23f20" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } }, "message": { "text": "Violation Cause - Source of null value  *** Null value carrier: point" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (argc > 3) (assuming false)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "Violation Point - Null pointer dereferencing point  *** Null value carrier: point" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "BD-PB-NP", "level": "error", "message": { "text": "\"point\" may possibly be null", "markdown": "**\\[Line 11\\] \"point\" may possibly be null**  \n  \n**Source of null value**  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming false\\)_  \n**Null pointer dereferencing point**&nbsp;  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "1178067846", "unbViolId": "0269ecb4-4f4c-377e-a47e-b45a0b5999dd" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } }, "message": { "text": "Violation Cause - Source of null value  *** Null value carrier: point" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (argc > 3) (assuming false)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "Violation Point - Null pointer dereferencing point  *** Null value carrier: point" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "CERT_C-EXP34-a", "level": "error", "message": { "text": "\"point\" may possibly be null", "markdown": "**\\[Line 11\\] \"point\" may possibly be null**  \n  \n**Source of null value**  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming false\\)_  \n**Null pointer dereferencing point**&nbsp;  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "1178067846", "unbViolId": "7b028934-5339-3738-94d4-cfdeab9c85ee" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } }, "message": { "text": "Violation Cause - Source of null value  *** Null value carrier: point" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (argc > 3) (assuming false)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "Violation Point - Null pointer dereferencing point  *** Null value carrier: point" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "CERT_C-MSC19-b", "level": "warning", "message": { "text": "\"point\" may possibly be null", "markdown": "**\\[Line 11\\] \"point\" may possibly be null**  \n  \n**Source of null value**  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming false\\)_  \n**Null pointer dereferencing point**&nbsp;  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "1178067846", "unbViolId": "f81c95fd-942d-3afe-aa43-1a43c51c86d8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } }, "message": { "text": "Violation Cause - Source of null value  *** Null value carrier: point" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (argc > 3) (assuming false)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "Violation Point - Null pointer dereferencing point  *** Null value carrier: point" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "CERT_CPP-STR51-a", "level": "error", "message": { "text": "\"point\" may possibly be null", "markdown": "**\\[Line 11\\] \"point\" may possibly be null**  \n  \n**Source of null value**  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming false\\)_  \n**Null pointer dereferencing point**&nbsp;  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "1178067846", "unbViolId": "2211586b-3a19-397c-8e8c-0dcb36003ccd" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } }, "message": { "text": "Violation Cause - Source of null value  *** Null value carrier: point" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (argc > 3) (assuming false)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "Violation Point - Null pointer dereferencing point  *** Null value carrier: point" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "CWE-476-a", "level": "error", "message": { "text": "\"point\" may possibly be null", "markdown": "**\\[Line 11\\] \"point\" may possibly be null**  \n  \n**Source of null value**  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming false\\)_  \n**Null pointer dereferencing point**&nbsp;  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "1178067846", "unbViolId": "2c920dba-5f0c-3284-be5c-9ba1f622a635" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } }, "message": { "text": "Violation Cause - Source of null value  *** Null value carrier: point" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (argc > 3) (assuming false)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "Violation Point - Null pointer dereferencing point  *** Null value carrier: point" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "HICPP-5_2_1-c", "level": "error", "message": { "text": "\"point\" may possibly be null", "markdown": "**\\[Line 11\\] \"point\" may possibly be null**  \n  \n**Source of null value**  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming false\\)_  \n**Null pointer dereferencing point**&nbsp;  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "1178067846", "unbViolId": "b9b07576-75e7-3f33-888b-846975bba574" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } }, "message": { "text": "Violation Cause - Source of null value  *** Null value carrier: point" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (argc > 3) (assuming false)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "Violation Point - Null pointer dereferencing point  *** Null value carrier: point" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "MISRA2008-0_3_1_b", "level": "note", "message": { "text": "\"point\" may possibly be null", "markdown": "**\\[Line 11\\] \"point\" may possibly be null**  \n  \n**Source of null value**  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming false\\)_  \n**Null pointer dereferencing point**&nbsp;  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "1178067846", "unbViolId": "90297a4d-b786-3b30-bdc4-7beb2d3d596c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } }, "message": { "text": "Violation Cause - Source of null value  *** Null value carrier: point" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (argc > 3) (assuming false)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "Violation Point - Null pointer dereferencing point  *** Null value carrier: point" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "MISRA2012-DIR-4_1_b", "level": "error", "message": { "text": "\"point\" may possibly be null", "markdown": "**\\[Line 11\\] \"point\" may possibly be null**  \n  \n**Source of null value**  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming false\\)_  \n**Null pointer dereferencing point**&nbsp;  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "1178067846", "unbViolId": "ac523581-14ef-3614-8d53-74ff3c5d2dbc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } }, "message": { "text": "Violation Cause - Source of null value  *** Null value carrier: point" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (argc > 3) (assuming false)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "Violation Point - Null pointer dereferencing point  *** Null value carrier: point" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "MISRAC2012-DIR_4_1-b", "level": "error", "message": { "text": "\"point\" may possibly be null", "markdown": "**\\[Line 11\\] \"point\" may possibly be null**  \n  \n**Source of null value**  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming false\\)_  \n**Null pointer dereferencing point**&nbsp;  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "1178067846", "unbViolId": "8c54965e-d4e5-37c3-81a2-8746ed390520" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } }, "message": { "text": "Violation Cause - Source of null value  *** Null value carrier: point" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (argc > 3) (assuming false)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "Violation Point - Null pointer dereferencing point  *** Null value carrier: point" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 12\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "0", "unbViolId": "9aef99c1-d98a-3719-aa59-5877e694051d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 12\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "0", "unbViolId": "f1e1fc3c-5f0b-3b9a-b9fe-aa5d27a7f620" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 12\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "0", "unbViolId": "d4398ba7-4a2d-3b50-a20b-95aed4c17bf5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 13\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1599597842", "unbViolId": "3747d4db-dba8-3b0d-9311-1eb91fcfb1b9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 13\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1599597842", "unbViolId": "adb7f5c9-eeb5-3fe6-b000-76cd2227a1b1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 13\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1599597842", "unbViolId": "8ec478ba-657e-3561-9587-06c1f277c171" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-25_b", "level": "warning", "message": { "text": "'return' statement should be used with parenthesis", "markdown": "**\\[Line 13\\] 'return' statement should be used with parenthesis**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1599597842", "unbViolId": "0b1c4129-5b1e-3954-a2b6-f163548d3370" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "METRICS-31", "level": "warning", "message": { "text": "The assertion density is lower than two assertions per function", "markdown": "**\\[Line 1\\] The assertion density is lower than two assertions per function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-573060881", "unbViolId": "db37b429-1a65-327f-b306-0d8270d6562c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-03", "level": "warning", "message": { "text": "The filename 'Point.hpp' should be in lowercase", "markdown": "**\\[Line 1\\] The filename 'Point\\.hpp' should be in lowercase**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-573060881", "unbViolId": "1d8468b4-79d0-3dfd-b8ad-2043f6615ead" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-37", "level": "warning", "message": { "text": "Header file 'Point.hpp' should have the file name extension \".hh\"", "markdown": "**\\[Line 1\\] Header file 'Point\\.hpp' should have the file name extension \"\\.hh\"**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-573060881", "unbViolId": "046ea20b-ec39-35ce-a973-a6959a9abd2c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-053", "level": "warning", "message": { "text": "Header file 'Point.hpp' should have the file name extension \".h\"", "markdown": "**\\[Line 1\\] Header file 'Point\\.hpp' should have the file name extension \"\\.h\"**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-573060881", "unbViolId": "4d61a35b-1cac-3860-90ab-c72a112ef9fa" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-41", "level": "warning", "message": { "text": "Header file 'Point.hpp' should have the file name extension \".h\"", "markdown": "**\\[Line 1\\] Header file 'Point\\.hpp' should have the file name extension \"\\.h\"**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-573060881", "unbViolId": "d4744bf1-7849-3630-bb08-aa0e43a798f7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-43", "level": "warning", "message": { "text": "'Point.hpp' filename extension does not adhere to naming conventions", "markdown": "**\\[Line 1\\] 'Point\\.hpp' filename extension does not adhere to naming conventions**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-573060881", "unbViolId": "212277e7-9118-3bef-b16c-34d7604c2607" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PFO-07", "level": "warning", "message": { "text": "POINT_HPP macro name should appear as first #ifndef or #if preprocessor directive", "markdown": "**\\[Line 1\\] POINT\\_HPP macro name should appear as first \\#ifndef or \\#if preprocessor directive**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-573060881", "unbViolId": "882ddfa8-476b-3763-bf3a-1da286a93ecf" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-39", "level": "warning", "message": { "text": "File 'Point.hpp'  should have the \".icc\" file name extension", "markdown": "**\\[Line 1\\] File 'Point\\.hpp'  should have the \"\\.icc\" file name extension**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-573060881", "unbViolId": "fba8791f-497b-3ecd-ac00-81224b06c1bc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-02", "level": "warning", "message": { "text": "Add comment containing the copyright information at the begin of file 'Point.hpp'", "markdown": "**\\[Line 1\\] Add comment containing the copyright information at the begin of file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-573060881", "unbViolId": "0c2911cf-1238-3a39-9322-7d22a39f7960" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-133_b", "level": "warning", "message": { "text": "Add comment containing the copyright information at the begin of file 'Point.hpp'", "markdown": "**\\[Line 1\\] Add comment containing the copyright information at the begin of file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-573060881", "unbViolId": "414050c9-362c-38e1-b7e6-cc170d0cbe4f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-03", "level": "warning", "message": { "text": "Add comment containing the information on the file at the begin of file 'Point.hpp'", "markdown": "**\\[Line 1\\] Add comment containing the information on the file at the begin of file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-573060881", "unbViolId": "eb354961-7ec7-3b57-9a00-fb2522ac55b9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-133_a", "level": "warning", "message": { "text": "Add comment containing the information on the file at the begin of file 'Point.hpp'", "markdown": "**\\[Line 1\\] Add comment containing the information on the file at the begin of file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-573060881", "unbViolId": "fe5f8404-dcc7-37f9-9195-20ee467d279b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-02", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 4\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "6c55d8ad-a805-38e5-89de-73c16ff296e3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-34", "level": "warning", "message": { "text": "Opening '{' and closing '}' should be in the same column", "markdown": "**\\[Line 4\\] Opening '\\{' and closing '\\}' should be in the same column**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "dfe9e266-89a0-3cb4-b16c-ac72f0493520" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'Point' differs only by case from identifier 'point' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 4\\] The identifier 'Point' differs only by case from identifier 'point' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "6c6df16b-8a40-3597-b527-8fbdab5ce183" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'Point' differs only by case from identifier 'point' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 4\\] The identifier 'Point' differs only by case from identifier 'point' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "83d3c2d4-0be9-3092-a194-b731805cf61d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'Point' differs only by case from identifier 'point' declared in file 'Point.hpp'", "markdown": "**\\[Line 4\\] The identifier 'Point' differs only by case from identifier 'point' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "e7dc786c-d7ad-3e9e-a2b7-12aa4071d5f0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'Point' differs only by case from identifier 'point' declared in file 'Point.hpp'", "markdown": "**\\[Line 4\\] The identifier 'Point' differs only by case from identifier 'point' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "32a58201-355c-35ab-bae3-6e3ecfa96972" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-098", "level": "warning", "message": { "text": "Do not declare the 'Point' type in the global namespace", "markdown": "**\\[Line 4\\] Do not declare the 'Point' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "df94c4ae-2dc3-38b5-8f71-048518698f3d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-M7_3_1-a", "level": "error", "message": { "text": "Do not declare the 'Point' type in the global namespace", "markdown": "**\\[Line 4\\] Do not declare the 'Point' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "fbe747fb-ec8c-3a69-ab6d-489109010d62" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-36", "level": "warning", "message": { "text": "Do not declare the 'Point' type in the global namespace", "markdown": "**\\[Line 4\\] Do not declare the 'Point' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "7f8de262-c88c-339c-adf7-e4fadb04a1d9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2008-7_3_1", "level": "error", "message": { "text": "Do not declare the 'Point' type in the global namespace", "markdown": "**\\[Line 4\\] Do not declare the 'Point' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "34b75fd7-b322-38eb-95f1-324313588713" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The declaration of the 'Point' type should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 4\\] The declaration of the 'Point' type should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "f51834a9-6daf-3379-b928-89d123e7d09e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The declaration of the 'Point' type should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 4\\] The declaration of the 'Point' type should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "502c8b9a-1f5c-3625-8d98-874654cd3782" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-057_a", "level": "warning", "message": { "text": "Public section must be before protected and private sections", "markdown": "**\\[Line 4\\] Public section must be before protected and private sections**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "32b907d8-38f5-3fab-9cbf-452cbde47e8f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-46", "level": "warning", "message": { "text": "Public section must be before protected and private sections", "markdown": "**\\[Line 4\\] Public section must be before protected and private sections**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "c041c942-d448-3177-abca-655f5c04fe2c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A12_4_2-a", "level": "warning", "message": { "text": "Class 'Point' should be final", "markdown": "**\\[Line 4\\] Class 'Point' should be final**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "affa2a8d-a800-3963-af35-bf1aa341dbb9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-MCPP-23", "level": "warning", "message": { "text": "Class 'Point' should be final", "markdown": "**\\[Line 4\\] Class 'Point' should be final**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "da4d5d22-7e14-3b6d-b1c6-d9a008b72b4a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare default constructor in 'Point'", "markdown": "**\\[Line 4\\] Explicitly declare default constructor in 'Point'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "d44da3fd-d189-3733-9461-530b1facedf1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare destructor in 'Point'", "markdown": "**\\[Line 4\\] Explicitly declare destructor in 'Point'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "7f65e776-9f77-38f6-9ada-748b0f4ee558" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare copy assignment operator in 'Point'", "markdown": "**\\[Line 4\\] Explicitly declare copy assignment operator in 'Point'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "9b12915a-055f-39fe-86b0-d65036af89a5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare move assignment operator in 'Point'", "markdown": "**\\[Line 4\\] Explicitly declare move assignment operator in 'Point'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "bf508287-112f-3cb5-b0cf-c089d8acc561" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare copy constructor in 'Point'", "markdown": "**\\[Line 4\\] Explicitly declare copy constructor in 'Point'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "7d9b191f-940b-38e0-9959-435203f78fe9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare move constructor in 'Point'", "markdown": "**\\[Line 4\\] Explicitly declare move constructor in 'Point'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "9be55e25-c760-364c-8c33-661918b3d79f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-04", "level": "warning", "message": { "text": "Class 'Point' missing assignment operator or special comment", "markdown": "**\\[Line 4\\] Class 'Point' missing assignment operator or special comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "e4a6921c-af64-3011-929c-c7a5f64600b5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-05", "level": "warning", "message": { "text": "Class 'Point' missing copy constructor or special comment", "markdown": "**\\[Line 4\\] Class 'Point' missing copy constructor or special comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "75f19d00-923d-386d-a2d5-1da976372958" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-47", "level": "warning", "message": { "text": "Class 'Point' missing assignment operator or special comment", "markdown": "**\\[Line 4\\] Class 'Point' missing assignment operator or special comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "3c00ad2b-8939-3b83-9eee-c4d21f55396e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-48", "level": "warning", "message": { "text": "Class 'Point' missing copy constructor or special comment", "markdown": "**\\[Line 4\\] Class 'Point' missing copy constructor or special comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "0308a464-fb01-30b3-9416-1ae467f3da1d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-HN-19", "level": "warning", "message": { "text": "The 'Point' identifier should have the 'C' prefix", "markdown": "**\\[Line 4\\] The 'Point' identifier should have the 'C' prefix**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "2f84eae0-59f7-318e-8fb4-50b1e9567275" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'Point' differs only by case from identifier 'point' declared in file 'NullPointer.cpp'", "markdown": "**\\[Line 4\\] The identifier 'Point' differs only by case from identifier 'point' declared in file 'NullPointer\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "37f99c74-032c-3600-94de-ccbcce345716" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'Point' differs only by case from identifier 'point' declared in file 'NullPointer.cpp'", "markdown": "**\\[Line 4\\] The identifier 'Point' differs only by case from identifier 'point' declared in file 'NullPointer\\.cpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "96aa893c-a420-35a9-96cc-6aad19070096" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2012-RULE-5_7_a", "level": "error", "message": { "text": "The type name 'Point' is not a unique identifier in the testing scope", "markdown": "**\\[Line 4\\] The type name 'Point' is not a unique identifier in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "f12bf3a9-8de6-3a69-957e-10e5c68cf949" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRAC2012-RULE_5_7-a", "level": "error", "message": { "text": "The type name 'Point' is not a unique identifier in the testing scope", "markdown": "**\\[Line 4\\] The type name 'Point' is not a unique identifier in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-2055333085", "unbViolId": "419ac0c0-4d22-308b-bd68-b9010aaee15d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "c7a1e1ac-3977-3e10-ad2c-527dca3c78f2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "a4c2c1fb-5d0a-382c-926c-89930c96d353" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 5\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "d0be2e16-c143-3e29-bcfc-85704d1df630" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 5\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "fd1b7277-ec5a-31b2-8579-29bce14baacc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 5\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "f4377d82-be4c-373a-9680-154ec301f554" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "fb607856-a3f3-3213-b7b6-725bcd0f65f8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "a252238e-fa86-3c8f-a9b1-64dcab8ba13f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "d51acbb8-a5f7-3731-9f0c-cfd843114c79" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "0a37693c-0da9-3663-ad4b-b0d857476e4b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 5\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "9e17f770-ec16-3e0b-af0a-e867174aee70" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier '_x' differs only by presence\/absence of the underscore character from identifier 'x' declared in file 'Point.hpp'", "markdown": "**\\[Line 5\\] The identifier '\\_x' differs only by presence\/absence of the underscore character from identifier 'x' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "25786d20-cb6e-3883-9d43-4cd50c78101f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier '_x' differs only by presence\/absence of the underscore character from identifier 'x' declared in file 'Point.hpp'", "markdown": "**\\[Line 5\\] The identifier '\\_x' differs only by presence\/absence of the underscore character from identifier 'x' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "88607518-48b6-396b-97d8-2aa0382b8604" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The '_x' member variable should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 5\\] The '\\_x' member variable should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "fa4b9270-23de-3f99-9dc5-4842775e6825" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The '_x' member variable should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 5\\] The '\\_x' member variable should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "5a66b2c2-d619-3c66-8d1c-1bbc588d4fd2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "PORT-13", "level": "warning", "message": { "text": "'_x' shall be declared as unsigned int or signed int", "markdown": "**\\[Line 5\\] '\\_x' shall be declared as unsigned int or signed int**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "0bfaf2a8-9f82-3bfd-8527-398c222fb666" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-07", "level": "warning", "message": { "text": "Member variable '_x' shall begin with a lowercase letter", "markdown": "**\\[Line 5\\] Member variable '\\_x' shall begin with a lowercase letter**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "1031d321-64bd-321e-a9d9-3a9f701ae831" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-14", "level": "warning", "message": { "text": "Naming convention not followed: _x", "markdown": "**\\[Line 5\\] Naming convention not followed: \\_x**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "f2c8dc88-0741-3dfd-8d20-3f5b448e8aff" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-19", "level": "warning", "message": { "text": "Naming convention not followed: _x", "markdown": "**\\[Line 5\\] Naming convention not followed: \\_x**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "63beff7d-b4e1-3369-a31d-2683a3abc816" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-33", "level": "warning", "message": { "text": "Using underscore at the beginning of the name '_x' is not allowed", "markdown": "**\\[Line 5\\] Using underscore at the beginning of the name '\\_x' is not allowed**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "5e5553f9-e430-3eab-be0a-98d11ec2a3e5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-047", "level": "warning", "message": { "text": "Using underscore at the beginning of the name '_x' is not allowed", "markdown": "**\\[Line 5\\] Using underscore at the beginning of the name '\\_x' is not allowed**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "53e64cd0-8bba-3cce-a018-380981662b6d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-HN-22", "level": "warning", "message": { "text": "The '_x' identifier should have the 'i' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 5\\] The '\\_x' identifier should have the 'i' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "f7deb47e-62b1-378a-9f07-538c6109f86c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-HN-29", "level": "warning", "message": { "text": "The '_x' identifier should have the 'm_' prefix", "markdown": "**\\[Line 5\\] The '\\_x' identifier should have the 'm\\_' prefix**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "8b8b02c8-0892-378a-a170-79579cebf36e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-HN-30", "level": "warning", "message": { "text": "The '_x' identifier should have the 'n' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 5\\] The '\\_x' identifier should have the 'n' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "c8871160-3989-3304-9a5f-88a9cd3727d0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-HN-43", "level": "warning", "message": { "text": "The '_x' identifier should have the 'i' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 5\\] The '\\_x' identifier should have the 'i' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "0ca5bf99-7219-3a96-a407-593e424af0bc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier '_y' differs only by presence\/absence of the underscore character from identifier 'y' declared in file 'Point.hpp'", "markdown": "**\\[Line 5\\] The identifier '\\_y' differs only by presence\/absence of the underscore character from identifier 'y' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "8e912198-98a8-3978-95a5-372f0f6d1fc6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier '_y' differs only by presence\/absence of the underscore character from identifier 'y' declared in file 'Point.hpp'", "markdown": "**\\[Line 5\\] The identifier '\\_y' differs only by presence\/absence of the underscore character from identifier 'y' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "b40f5558-ae1d-3adb-aa06-580495d78019" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The '_y' member variable should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 5\\] The '\\_y' member variable should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "63f06aa5-3f26-31b4-8ae4-9d5b7984670a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The '_y' member variable should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 5\\] The '\\_y' member variable should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "bc281fc8-05fb-3a0c-8243-b3453c03b5a9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "JSF-152", "level": "error", "message": { "text": "Declare variable '_y' in a separate line", "markdown": "**\\[Line 5\\] Declare variable '\\_y' in a separate line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "088ad309-ac26-3646-ac2d-ee2bb69ed2c9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "AUTOSAR-A7_1_7-b", "level": "error", "message": { "text": "Declare variable '_y' in a separate line", "markdown": "**\\[Line 5\\] Declare variable '\\_y' in a separate line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "7c61e14a-855c-32d1-989c-dc2f900c2512" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "HICPP-7_1_1-a", "level": "warning", "message": { "text": "Declare variable '_y' in a separate line", "markdown": "**\\[Line 5\\] Declare variable '\\_y' in a separate line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "3cfddb32-9e22-3471-9cdd-98035839c376" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "FORMAT-29", "level": "warning", "message": { "text": "Declare variable '_y' in a separate line", "markdown": "**\\[Line 5\\] Declare variable '\\_y' in a separate line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "7894e3eb-b6e3-36d5-801a-7aad358b89d5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "AUTOSAR-A7_1_7-c", "level": "error", "message": { "text": "Declare variable '_y' in a separate declaration statement", "markdown": "**\\[Line 5\\] Declare variable '\\_y' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "3a579aa4-7795-39e0-bd5f-4cbf55495d9b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "FORMAT-33", "level": "warning", "message": { "text": "Declare variable '_y' in a separate declaration statement", "markdown": "**\\[Line 5\\] Declare variable '\\_y' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "ecd77887-4296-343c-8a9a-8883aef498e2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "MISRA2008-8_0_1", "level": "error", "message": { "text": "Declare variable '_y' in a separate declaration statement", "markdown": "**\\[Line 5\\] Declare variable '\\_y' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "b7b1023c-40e2-3bdf-86ea-126eedafb932" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "HICPP-7_1_1-b", "level": "warning", "message": { "text": "Declare variable '_y' in a separate declaration statement", "markdown": "**\\[Line 5\\] Declare variable '\\_y' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "3b3c277a-44dc-3eae-9152-242e8e9bb03c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "AUTOSAR-M8_0_1-a", "level": "error", "message": { "text": "Declare variable '_y' in a separate declaration statement", "markdown": "**\\[Line 5\\] Declare variable '\\_y' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "00cc5b4e-645a-3c75-9f8e-d4debbfbf81e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "CERT_C-DCL04-a", "level": "warning", "message": { "text": "Declare variable '_y' in a separate declaration statement", "markdown": "**\\[Line 5\\] Declare variable '\\_y' in a separate declaration statement**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "4616f7cf-5925-3e98-ac33-d46d0102efe0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "PORT-13", "level": "warning", "message": { "text": "'_y' shall be declared as unsigned int or signed int", "markdown": "**\\[Line 5\\] '\\_y' shall be declared as unsigned int or signed int**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "65b1f179-57c0-31d8-88fa-46d71bdab6ba" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "NAMING-07", "level": "warning", "message": { "text": "Member variable '_y' shall begin with a lowercase letter", "markdown": "**\\[Line 5\\] Member variable '\\_y' shall begin with a lowercase letter**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "fd9a36ce-a51a-3f2e-a070-373aab354656" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "NAMING-14", "level": "warning", "message": { "text": "Naming convention not followed: _y", "markdown": "**\\[Line 5\\] Naming convention not followed: \\_y**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "ba6a8934-c2f7-3f57-9558-95f23c82d8dd" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "NAMING-19", "level": "warning", "message": { "text": "Naming convention not followed: _y", "markdown": "**\\[Line 5\\] Naming convention not followed: \\_y**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "3f35f7b9-2d4e-3ec3-83bb-b6b8583919fd" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "NAMING-33", "level": "warning", "message": { "text": "Using underscore at the beginning of the name '_y' is not allowed", "markdown": "**\\[Line 5\\] Using underscore at the beginning of the name '\\_y' is not allowed**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "a3af8a37-e9d4-3fd0-9eb6-3607b67a6e22" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "JSF-047", "level": "warning", "message": { "text": "Using underscore at the beginning of the name '_y' is not allowed", "markdown": "**\\[Line 5\\] Using underscore at the beginning of the name '\\_y' is not allowed**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "8949d541-9797-36c1-a443-e4705d6fae12" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "NAMING-HN-22", "level": "warning", "message": { "text": "The '_y' identifier should have the 'i' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 5\\] The '\\_y' identifier should have the 'i' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "672962dc-4582-351c-acb1-8d3a756f82c0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "NAMING-HN-29", "level": "warning", "message": { "text": "The '_y' identifier should have the 'm_' prefix", "markdown": "**\\[Line 5\\] The '\\_y' identifier should have the 'm\\_' prefix**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "0ee0219c-ac12-3abc-a53a-d9957f416992" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "NAMING-HN-30", "level": "warning", "message": { "text": "The '_y' identifier should have the 'n' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 5\\] The '\\_y' identifier should have the 'n' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "37110b86-5da1-3a2b-a1cc-bf58999c5767" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "NAMING-HN-43", "level": "warning", "message": { "text": "The '_y' identifier should have the 'i' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 5\\] The '\\_y' identifier should have the 'i' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-487498237", "unbViolId": "02229dd9-8a19-36a0-a100-5ef20a7798aa" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 7\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "a43a2957-d9ba-3e36-a86a-c5715d21320d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 7\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "6a4e6f60-713a-3686-938e-51c69e75b04b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 7\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "8a4d70da-3473-3517-a041-57f3f90ad1b6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 7\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "53db7676-d794-356c-b759-1ef27a8ea434" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-43", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 7\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "802b2266-486b-3cf8-b2e5-3c45e58f4713" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_b", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 7\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "e6ef05aa-8714-3840-a646-188741d16a46" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'Point' function is not preceded by a comment", "markdown": "**\\[Line 7\\] The definition of the 'Point' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "f0a7c73d-8c77-3619-8e41-304ad82fb3f5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'Point' function is not preceded by a comment", "markdown": "**\\[Line 7\\] The definition of the 'Point' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "511c6340-6f8c-34d0-ac8a-3c0b8819f534" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'Point' differs only by case from identifier 'point' declared in file 'Point.hpp'", "markdown": "**\\[Line 7\\] The identifier 'Point' differs only by case from identifier 'point' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "2f2380b8-497e-34fc-b8a8-d8e77cb6cc6c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'Point' differs only by case from identifier 'point' declared in file 'Point.hpp'", "markdown": "**\\[Line 7\\] The identifier 'Point' differs only by case from identifier 'point' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "0ec136df-731e-3133-a68d-96394a554ca4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'Point' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 7\\] The 'Point' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "e2396cc4-d3dd-368a-8059-a5a40a7e70b3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'Point' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 7\\] The 'Point' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "a08d1ca7-8c98-3010-a58e-5b02601cc154" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'x' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 7\\] The 'x' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "8de7438e-be04-3d6b-b973-cfca4ccff485" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'x' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 7\\] The 'x' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "67496181-2c52-3508-99da-8f466a3636ed" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'y' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 7\\] The 'y' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "7cb497ef-ff2b-3065-8f1f-69afc995ee76" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'y' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 7\\] The 'y' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "8f5e5771-eb29-3f3b-baef-7916159fdc82" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "OPT-17", "level": "warning", "message": { "text": "Class 'Point' defines an inline constructor", "markdown": "**\\[Line 7\\] Class 'Point' defines an inline constructor**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "f6980b74-9c23-3398-981c-cf5872e3a413" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A15_4_4-a", "level": "error", "message": { "text": "The 'Point' function should be declared 'noexcept'", "markdown": "**\\[Line 7\\] The 'Point' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "31627163-18af-3dcd-b01b-78cb600b4af4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "CODSTA-MCPP-09", "level": "warning", "message": { "text": "The 'Point' function should be declared 'noexcept'", "markdown": "**\\[Line 7\\] The 'Point' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "4004bf82-f40b-30aa-98ce-529045e0931b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'Point' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 7\\] Function 'Point' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "e1a0f8ff-617a-352c-89da-1cd39f400655" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'Point' has Essential Complexity value: 1", "markdown": "**\\[Line 7\\] Function 'Point' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "81596080-9c74-3bd8-9f7c-b982d8861370" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2012-RULE-5_7_a", "level": "error", "message": { "text": "The 'Point' identifier is the same as the name of a type defined in the testing scope", "markdown": "**\\[Line 7\\] The 'Point' identifier is the same as the name of a type defined in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "75f4575f-8ffe-36b7-8cbc-0c6fe4e47804" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRAC2012-RULE_5_7-a", "level": "error", "message": { "text": "The 'Point' identifier is the same as the name of a type defined in the testing scope", "markdown": "**\\[Line 7\\] The 'Point' identifier is the same as the name of a type defined in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "f24a89b8-d67a-305d-9352-77a65cb5a3a6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "333a42e7-8a30-38e8-9391-aaae101ce0e1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "b5ad71f4-0656-3402-9b9f-b0621cb87268" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 7\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "3213d7e0-e226-3e16-b57d-55fad3dcc24c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 7\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "98002d9d-41bf-389a-81c9-93a4bf03d2e8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 7\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "772902f6-6ba7-3faf-a1db-f4a42e0ce9f7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "7148a5cc-7710-3dc5-9b8d-b8a6f051aff9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "10ef1cc2-5cfb-3ff1-89d7-0e55067a73ed" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "edf77401-6cfd-3da6-80ef-3a08dd52a5c6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "c5702de0-31b1-3bcc-a43b-8570dc509030" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "b70135f5-c50c-31f6-9efb-de758a0e6492" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 11, "endColumn": 12 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'x' differs only by presence\/absence of the underscore character from identifier '_x' declared in file 'Point.hpp'", "markdown": "**\\[Line 7\\] The identifier 'x' differs only by presence\/absence of the underscore character from identifier '\\_x' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "96449b0d-429c-3dcb-9f9e-d848edd96bca" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 15, "endColumn": 16 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'x' differs only by presence\/absence of the underscore character from identifier '_x' declared in file 'Point.hpp'", "markdown": "**\\[Line 7\\] The identifier 'x' differs only by presence\/absence of the underscore character from identifier '\\_x' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "d0ef74d0-06ea-3107-a823-cee44828e0f8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 15, "endColumn": 16 } } } ] }, { "ruleId": "MISRA2008-2_10_1", "level": "error", "message": { "text": "Identifier name: 'x' differs only by presence\/absence of the underscore character from identifier name: '_x' declared in class", "markdown": "**\\[Line 7\\] Identifier name: 'x' differs only by presence\/absence of the underscore character from identifier name: '\\_x' declared in class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "66860ac4-e742-35fb-ab35-05f1f8196457" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 15, "endColumn": 16 } } } ] }, { "ruleId": "HICPP-2_4_1-a", "level": "warning", "message": { "text": "Identifier name: 'x' differs only by presence\/absence of the underscore character from identifier name: '_x' declared in class", "markdown": "**\\[Line 7\\] Identifier name: 'x' differs only by presence\/absence of the underscore character from identifier name: '\\_x' declared in class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "c5344332-436c-33fd-a6ff-fc1379e8a348" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 15, "endColumn": 16 } } } ] }, { "ruleId": "AUTOSAR-M2_10_1-a", "level": "error", "message": { "text": "Identifier name: 'x' differs only by presence\/absence of the underscore character from identifier name: '_x' declared in class", "markdown": "**\\[Line 7\\] Identifier name: 'x' differs only by presence\/absence of the underscore character from identifier name: '\\_x' declared in class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "6069c343-8bbb-321f-8e0a-230a04e0f33e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 15, "endColumn": 16 } } } ] }, { "ruleId": "NAMING-47", "level": "warning", "message": { "text": "Identifier name: 'x' differs only by presence\/absence of the underscore character from identifier name: '_x' declared in class", "markdown": "**\\[Line 7\\] Identifier name: 'x' differs only by presence\/absence of the underscore character from identifier name: '\\_x' declared in class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "b94720da-78ae-3fca-ac14-822149fb97e3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 15, "endColumn": 16 } } } ] }, { "ruleId": "PORT-13", "level": "warning", "message": { "text": "'x' shall be declared as unsigned int or signed int", "markdown": "**\\[Line 7\\] 'x' shall be declared as unsigned int or signed int**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "517545a4-ae12-3cc6-9bda-2bbba4f059c8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 15, "endColumn": 16 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "190947b2-3afe-3ba5-8cef-46ca068610f2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "b3577633-efa5-3b2f-b9be-ef502bcfd770" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 7\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "c5e1a29c-c6c1-3b79-8157-eaee00879ce6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 7\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "fe459337-0f36-3830-ad6c-d067ebb3bd50" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 7\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "bee0c221-7488-3561-8772-0c49feb91d20" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "b3ca99df-7719-3d0e-999b-ae9cbc6dc2b8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "ba4f5d9d-6ccc-3779-838c-25455e783485" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "a5dd811e-b07e-351e-bd58-6251ac3ef709" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "4e8909f4-de09-3033-bf0f-2a66650f780e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 7\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "f8d127de-2ff0-3ec6-bf9e-a65d691a5cdd" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'y' differs only by presence\/absence of the underscore character from identifier '_y' declared in file 'Point.hpp'", "markdown": "**\\[Line 7\\] The identifier 'y' differs only by presence\/absence of the underscore character from identifier '\\_y' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "0cb5c185-da36-33dc-9ce2-a6dc1526c2ac" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 22, "endColumn": 23 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'y' differs only by presence\/absence of the underscore character from identifier '_y' declared in file 'Point.hpp'", "markdown": "**\\[Line 7\\] The identifier 'y' differs only by presence\/absence of the underscore character from identifier '\\_y' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "9b2bad4e-aa01-3909-bcc5-736ac9edd03e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 22, "endColumn": 23 } } } ] }, { "ruleId": "MISRA2008-2_10_1", "level": "error", "message": { "text": "Identifier name: 'y' differs only by presence\/absence of the underscore character from identifier name: '_y' declared in class", "markdown": "**\\[Line 7\\] Identifier name: 'y' differs only by presence\/absence of the underscore character from identifier name: '\\_y' declared in class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "9555e200-f3d4-3e6b-897f-1d505b947db3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 22, "endColumn": 23 } } } ] }, { "ruleId": "HICPP-2_4_1-a", "level": "warning", "message": { "text": "Identifier name: 'y' differs only by presence\/absence of the underscore character from identifier name: '_y' declared in class", "markdown": "**\\[Line 7\\] Identifier name: 'y' differs only by presence\/absence of the underscore character from identifier name: '\\_y' declared in class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "fbdb3c30-797e-3dce-bd10-2ba1ebc9bc7f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 22, "endColumn": 23 } } } ] }, { "ruleId": "AUTOSAR-M2_10_1-a", "level": "error", "message": { "text": "Identifier name: 'y' differs only by presence\/absence of the underscore character from identifier name: '_y' declared in class", "markdown": "**\\[Line 7\\] Identifier name: 'y' differs only by presence\/absence of the underscore character from identifier name: '\\_y' declared in class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "20e30cb5-df04-38c0-a48f-27f9bf9dde6e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 22, "endColumn": 23 } } } ] }, { "ruleId": "NAMING-47", "level": "warning", "message": { "text": "Identifier name: 'y' differs only by presence\/absence of the underscore character from identifier name: '_y' declared in class", "markdown": "**\\[Line 7\\] Identifier name: 'y' differs only by presence\/absence of the underscore character from identifier name: '\\_y' declared in class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "5a0c0679-1910-3726-bea4-b84456487631" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 22, "endColumn": 23 } } } ] }, { "ruleId": "PORT-13", "level": "warning", "message": { "text": "'y' shall be declared as unsigned int or signed int", "markdown": "**\\[Line 7\\] 'y' shall be declared as unsigned int or signed int**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "6dc1aafb-c9ed-3265-b3f3-bb1d4e9939ac" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 22, "endColumn": 23 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 7\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "1ab0ffdc-9d2b-38c5-93cc-c4dfb5671566" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 41, "endColumn": 42 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 7\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "7e03e543-709a-3da4-b2bf-d7014dd518ed" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 41, "endColumn": 42 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 7\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-33300074", "unbViolId": "5604dd43-1467-37d5-91a5-3117d6c2fa18" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 41, "endColumn": 42 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'reflectAcrossX' function is not preceded by a comment", "markdown": "**\\[Line 8\\] The definition of the 'reflectAcrossX' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1965707959", "unbViolId": "8db99f8f-4f92-3940-99a4-3c1f7580f9a9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'reflectAcrossX' function is not preceded by a comment", "markdown": "**\\[Line 8\\] The definition of the 'reflectAcrossX' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1965707959", "unbViolId": "a0eb39e3-183a-39ce-9cc5-d60252c930db" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'reflectAcrossX' should be composed only of lowercase letters", "markdown": "**\\[Line 8\\] The name 'reflectAcrossX' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1965707959", "unbViolId": "5589f176-ad5e-3349-9da2-62bceb658988" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'reflectAcrossX' should be composed only of lowercase letters", "markdown": "**\\[Line 8\\] The name 'reflectAcrossX' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1965707959", "unbViolId": "51dd54a3-0a11-3041-84fa-2a2b7b3e56ab" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'reflectAcrossX' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 8\\] The 'reflectAcrossX' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1965707959", "unbViolId": "f4efc636-86b3-30fd-904d-1468c8d424b4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'reflectAcrossX' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 8\\] The 'reflectAcrossX' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1965707959", "unbViolId": "a07693b2-f25d-3c78-a390-7b9b270d2150" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "AUTOSAR-A15_4_4-a", "level": "error", "message": { "text": "The 'reflectAcrossX' function should be declared 'noexcept'", "markdown": "**\\[Line 8\\] The 'reflectAcrossX' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1965707959", "unbViolId": "65245a14-b78c-3285-b772-096fe7e82f0c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "CODSTA-MCPP-09", "level": "warning", "message": { "text": "The 'reflectAcrossX' function should be declared 'noexcept'", "markdown": "**\\[Line 8\\] The 'reflectAcrossX' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1965707959", "unbViolId": "ccd9caaa-9a8a-3ec2-a4a3-5ecb221606eb" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "FORMAT-28", "level": "warning", "message": { "text": "Return type is not placed in line before function 'reflectAcrossX'", "markdown": "**\\[Line 8\\] Return type is not placed in line before function 'reflectAcrossX'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1965707959", "unbViolId": "6e1ff935-b044-3856-9106-b8204686eb8e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'reflectAcrossX' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 8\\] Function 'reflectAcrossX' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1965707959", "unbViolId": "0478ff9c-d85f-3828-b63a-d596686e00fa" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'reflectAcrossX' has Essential Complexity value: 1", "markdown": "**\\[Line 8\\] Function 'reflectAcrossX' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1965707959", "unbViolId": "52fac8ae-8712-3c9c-bc5c-e66ce9b94965" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "NAMING-17", "level": "warning", "message": { "text": "Naming convention not followed: reflectAcrossX", "markdown": "**\\[Line 8\\] Naming convention not followed: reflectAcrossX**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1965707959", "unbViolId": "3266d535-9be5-35ca-b6b6-f385cf59e518" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 9\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "30537851", "unbViolId": "a05c0241-6c2a-3314-827b-1c979e5df4d7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "APSC_DV-002520-f", "level": "error", "message": { "text": "Evaluation of \"-this->_y\" may result in possible overflow\/underflow", "markdown": "**\\[Line 10\\] Evaluation of \"\\-this\\->\\_y\" may result in possible overflow\/underflow**  \n  \n**Point where value is defined by tainting function**  \nNullPointer.cpp&nbsp;(5)&nbsp;:&nbsp;int main\\(int argc, char\\* argv\\[\\]\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: argv\\[\\]_  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming true\\)_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;atoi\\(\\.\\.\\.\\)  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;Point\\(\\.\\.\\.\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: atoi\\(\\.\\.\\.\\)_  \n        Point.hpp&nbsp;(7)&nbsp;:&nbsp;Point\\(int x, int y\\) : \\_x\\(x\\), \\_y\\(y\\) \\{\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: y_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;point = new Point\\(atoi\\(argv\\[1\\]\\), atoi\\(argv\\[2\\]\\)\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: new Point\\->\\_y_  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: point\\->\\_y_  \n        **Point of possible overflow\/underflow**&nbsp;  \n        Point.hpp&nbsp;(10)&nbsp;:&nbsp;\\_y = \\-\\_y;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: this\\->\\_y_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "-796707555", "unbViolId": "8efa0a24-740b-3a2a-bc8f-5bb9da380159" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where value is defined by tainting function  *** Tainted data: argv[]" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (argc > 3) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: atoi(...)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: y" } }, "nestingLevel": 1 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: new Point->_y" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: point->_y" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "Violation Point - Point of possible overflow\/underflow  *** Tainted data: this->_y" } }, "nestingLevel": 1 } ] } ] } ] }, { "ruleId": "APSC_DV-002530-f", "level": "error", "message": { "text": "Evaluation of \"-this->_y\" may result in possible overflow\/underflow", "markdown": "**\\[Line 10\\] Evaluation of \"\\-this\\->\\_y\" may result in possible overflow\/underflow**  \n  \n**Point where value is defined by tainting function**  \nNullPointer.cpp&nbsp;(5)&nbsp;:&nbsp;int main\\(int argc, char\\* argv\\[\\]\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: argv\\[\\]_  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming true\\)_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;atoi\\(\\.\\.\\.\\)  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;Point\\(\\.\\.\\.\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: atoi\\(\\.\\.\\.\\)_  \n        Point.hpp&nbsp;(7)&nbsp;:&nbsp;Point\\(int x, int y\\) : \\_x\\(x\\), \\_y\\(y\\) \\{\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: y_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;point = new Point\\(atoi\\(argv\\[1\\]\\), atoi\\(argv\\[2\\]\\)\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: new Point\\->\\_y_  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: point\\->\\_y_  \n        **Point of possible overflow\/underflow**&nbsp;  \n        Point.hpp&nbsp;(10)&nbsp;:&nbsp;\\_y = \\-\\_y;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: this\\->\\_y_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "-796707555", "unbViolId": "155cc265-c297-301f-8b19-6f9a6f4d1ddf" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where value is defined by tainting function  *** Tainted data: argv[]" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (argc > 3) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: atoi(...)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: y" } }, "nestingLevel": 1 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: new Point->_y" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: point->_y" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "Violation Point - Point of possible overflow\/underflow  *** Tainted data: this->_y" } }, "nestingLevel": 1 } ] } ] } ] }, { "ruleId": "APSC_DV-002550-f", "level": "error", "message": { "text": "Evaluation of \"-this->_y\" may result in possible overflow\/underflow", "markdown": "**\\[Line 10\\] Evaluation of \"\\-this\\->\\_y\" may result in possible overflow\/underflow**  \n  \n**Point where value is defined by tainting function**  \nNullPointer.cpp&nbsp;(5)&nbsp;:&nbsp;int main\\(int argc, char\\* argv\\[\\]\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: argv\\[\\]_  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming true\\)_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;atoi\\(\\.\\.\\.\\)  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;Point\\(\\.\\.\\.\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: atoi\\(\\.\\.\\.\\)_  \n        Point.hpp&nbsp;(7)&nbsp;:&nbsp;Point\\(int x, int y\\) : \\_x\\(x\\), \\_y\\(y\\) \\{\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: y_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;point = new Point\\(atoi\\(argv\\[1\\]\\), atoi\\(argv\\[2\\]\\)\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: new Point\\->\\_y_  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: point\\->\\_y_  \n        **Point of possible overflow\/underflow**&nbsp;  \n        Point.hpp&nbsp;(10)&nbsp;:&nbsp;\\_y = \\-\\_y;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: this\\->\\_y_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "-796707555", "unbViolId": "8b117f7c-4af0-39b7-93df-d0bcba795f0d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where value is defined by tainting function  *** Tainted data: argv[]" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (argc > 3) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: atoi(...)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: y" } }, "nestingLevel": 1 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: new Point->_y" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: point->_y" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "Violation Point - Point of possible overflow\/underflow  *** Tainted data: this->_y" } }, "nestingLevel": 1 } ] } ] } ] }, { "ruleId": "APSC_DV-002560-f", "level": "error", "message": { "text": "Evaluation of \"-this->_y\" may result in possible overflow\/underflow", "markdown": "**\\[Line 10\\] Evaluation of \"\\-this\\->\\_y\" may result in possible overflow\/underflow**  \n  \n**Point where value is defined by tainting function**  \nNullPointer.cpp&nbsp;(5)&nbsp;:&nbsp;int main\\(int argc, char\\* argv\\[\\]\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: argv\\[\\]_  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming true\\)_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;atoi\\(\\.\\.\\.\\)  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;Point\\(\\.\\.\\.\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: atoi\\(\\.\\.\\.\\)_  \n        Point.hpp&nbsp;(7)&nbsp;:&nbsp;Point\\(int x, int y\\) : \\_x\\(x\\), \\_y\\(y\\) \\{\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: y_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;point = new Point\\(atoi\\(argv\\[1\\]\\), atoi\\(argv\\[2\\]\\)\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: new Point\\->\\_y_  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: point\\->\\_y_  \n        **Point of possible overflow\/underflow**&nbsp;  \n        Point.hpp&nbsp;(10)&nbsp;:&nbsp;\\_y = \\-\\_y;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: this\\->\\_y_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "-796707555", "unbViolId": "ee287017-2ded-32f3-8a83-eca12fe29a72" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where value is defined by tainting function  *** Tainted data: argv[]" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (argc > 3) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: atoi(...)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: y" } }, "nestingLevel": 1 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: new Point->_y" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: point->_y" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "Violation Point - Point of possible overflow\/underflow  *** Tainted data: this->_y" } }, "nestingLevel": 1 } ] } ] } ] }, { "ruleId": "APSC_DV-002590-g", "level": "error", "message": { "text": "Evaluation of \"-this->_y\" may result in possible overflow\/underflow", "markdown": "**\\[Line 10\\] Evaluation of \"\\-this\\->\\_y\" may result in possible overflow\/underflow**  \n  \n**Point where value is defined by tainting function**  \nNullPointer.cpp&nbsp;(5)&nbsp;:&nbsp;int main\\(int argc, char\\* argv\\[\\]\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: argv\\[\\]_  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming true\\)_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;atoi\\(\\.\\.\\.\\)  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;Point\\(\\.\\.\\.\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: atoi\\(\\.\\.\\.\\)_  \n        Point.hpp&nbsp;(7)&nbsp;:&nbsp;Point\\(int x, int y\\) : \\_x\\(x\\), \\_y\\(y\\) \\{\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: y_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;point = new Point\\(atoi\\(argv\\[1\\]\\), atoi\\(argv\\[2\\]\\)\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: new Point\\->\\_y_  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: point\\->\\_y_  \n        **Point of possible overflow\/underflow**&nbsp;  \n        Point.hpp&nbsp;(10)&nbsp;:&nbsp;\\_y = \\-\\_y;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: this\\->\\_y_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "-796707555", "unbViolId": "e64c1f79-ffcb-3327-a382-9cfcb23dd36f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where value is defined by tainting function  *** Tainted data: argv[]" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (argc > 3) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: atoi(...)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: y" } }, "nestingLevel": 1 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: new Point->_y" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: point->_y" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "Violation Point - Point of possible overflow\/underflow  *** Tainted data: this->_y" } }, "nestingLevel": 1 } ] } ] } ] }, { "ruleId": "CERT_C-INT04-a", "level": "error", "message": { "text": "Evaluation of \"-this->_y\" may result in possible overflow\/underflow", "markdown": "**\\[Line 10\\] Evaluation of \"\\-this\\->\\_y\" may result in possible overflow\/underflow**  \n  \n**Point where value is defined by tainting function**  \nNullPointer.cpp&nbsp;(5)&nbsp;:&nbsp;int main\\(int argc, char\\* argv\\[\\]\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: argv\\[\\]_  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming true\\)_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;atoi\\(\\.\\.\\.\\)  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;Point\\(\\.\\.\\.\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: atoi\\(\\.\\.\\.\\)_  \n        Point.hpp&nbsp;(7)&nbsp;:&nbsp;Point\\(int x, int y\\) : \\_x\\(x\\), \\_y\\(y\\) \\{\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: y_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;point = new Point\\(atoi\\(argv\\[1\\]\\), atoi\\(argv\\[2\\]\\)\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: new Point\\->\\_y_  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: point\\->\\_y_  \n        **Point of possible overflow\/underflow**&nbsp;  \n        Point.hpp&nbsp;(10)&nbsp;:&nbsp;\\_y = \\-\\_y;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: this\\->\\_y_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "-796707555", "unbViolId": "2ebf3dc1-1083-3438-8902-c8e372eab2b2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where value is defined by tainting function  *** Tainted data: argv[]" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (argc > 3) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: atoi(...)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: y" } }, "nestingLevel": 1 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: new Point->_y" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: point->_y" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "Violation Point - Point of possible overflow\/underflow  *** Tainted data: this->_y" } }, "nestingLevel": 1 } ] } ] } ] }, { "ruleId": "CWE-20-b", "level": "error", "message": { "text": "Evaluation of \"-this->_y\" may result in possible overflow\/underflow", "markdown": "**\\[Line 10\\] Evaluation of \"\\-this\\->\\_y\" may result in possible overflow\/underflow**  \n  \n**Point where value is defined by tainting function**  \nNullPointer.cpp&nbsp;(5)&nbsp;:&nbsp;int main\\(int argc, char\\* argv\\[\\]\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: argv\\[\\]_  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming true\\)_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;atoi\\(\\.\\.\\.\\)  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;Point\\(\\.\\.\\.\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: atoi\\(\\.\\.\\.\\)_  \n        Point.hpp&nbsp;(7)&nbsp;:&nbsp;Point\\(int x, int y\\) : \\_x\\(x\\), \\_y\\(y\\) \\{\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: y_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;point = new Point\\(atoi\\(argv\\[1\\]\\), atoi\\(argv\\[2\\]\\)\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: new Point\\->\\_y_  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: point\\->\\_y_  \n        **Point of possible overflow\/underflow**&nbsp;  \n        Point.hpp&nbsp;(10)&nbsp;:&nbsp;\\_y = \\-\\_y;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: this\\->\\_y_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "-796707555", "unbViolId": "1f1ab8a0-536d-3359-aa68-2507cd561722" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where value is defined by tainting function  *** Tainted data: argv[]" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (argc > 3) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: atoi(...)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: y" } }, "nestingLevel": 1 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: new Point->_y" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: point->_y" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "Violation Point - Point of possible overflow\/underflow  *** Tainted data: this->_y" } }, "nestingLevel": 1 } ] } ] } ] }, { "ruleId": "MISRA2012-DIR-4_14_b", "level": "error", "message": { "text": "Evaluation of \"-this->_y\" may result in possible overflow\/underflow", "markdown": "**\\[Line 10\\] Evaluation of \"\\-this\\->\\_y\" may result in possible overflow\/underflow**  \n  \n**Point where value is defined by tainting function**  \nNullPointer.cpp&nbsp;(5)&nbsp;:&nbsp;int main\\(int argc, char\\* argv\\[\\]\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: argv\\[\\]_  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming true\\)_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;atoi\\(\\.\\.\\.\\)  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;Point\\(\\.\\.\\.\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: atoi\\(\\.\\.\\.\\)_  \n        Point.hpp&nbsp;(7)&nbsp;:&nbsp;Point\\(int x, int y\\) : \\_x\\(x\\), \\_y\\(y\\) \\{\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: y_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;point = new Point\\(atoi\\(argv\\[1\\]\\), atoi\\(argv\\[2\\]\\)\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: new Point\\->\\_y_  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: point\\->\\_y_  \n        **Point of possible overflow\/underflow**&nbsp;  \n        Point.hpp&nbsp;(10)&nbsp;:&nbsp;\\_y = \\-\\_y;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: this\\->\\_y_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "-796707555", "unbViolId": "ee0e9e09-49c3-3e78-a7a8-13dfefbec3d4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where value is defined by tainting function  *** Tainted data: argv[]" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (argc > 3) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: atoi(...)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: y" } }, "nestingLevel": 1 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: new Point->_y" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: point->_y" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "Violation Point - Point of possible overflow\/underflow  *** Tainted data: this->_y" } }, "nestingLevel": 1 } ] } ] } ] }, { "ruleId": "MISRAC2012-DIR_4_14-b", "level": "error", "message": { "text": "Evaluation of \"-this->_y\" may result in possible overflow\/underflow", "markdown": "**\\[Line 10\\] Evaluation of \"\\-this\\->\\_y\" may result in possible overflow\/underflow**  \n  \n**Point where value is defined by tainting function**  \nNullPointer.cpp&nbsp;(5)&nbsp;:&nbsp;int main\\(int argc, char\\* argv\\[\\]\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: argv\\[\\]_  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming true\\)_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;atoi\\(\\.\\.\\.\\)  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;Point\\(\\.\\.\\.\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: atoi\\(\\.\\.\\.\\)_  \n        Point.hpp&nbsp;(7)&nbsp;:&nbsp;Point\\(int x, int y\\) : \\_x\\(x\\), \\_y\\(y\\) \\{\\}&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: y_  \nNullPointer.cpp&nbsp;(9)&nbsp;:&nbsp;point = new Point\\(atoi\\(argv\\[1\\]\\), atoi\\(argv\\[2\\]\\)\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: new Point\\->\\_y_  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: point\\->\\_y_  \n        **Point of possible overflow\/underflow**&nbsp;  \n        Point.hpp&nbsp;(10)&nbsp;:&nbsp;\\_y = \\-\\_y;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Tainted data: this\\->\\_y_" }, "partialFingerprints": { "violType": "FlowViol", "lineHash": "-796707555", "unbViolId": "4bb919d1-811d-37b3-b7f2-3c90bb0e8b0e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 5, "startColumn": 1 } }, "message": { "text": "Violation Cause - Point where value is defined by tainting function  *** Tainted data: argv[]" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 8, "startColumn": 1 } }, "message": { "text": "  *** Condition evaluation: (argc > 3) (assuming true)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: atoi(...)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: y" } }, "nestingLevel": 1 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: new Point->_y" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 11, "startColumn": 1 } }, "message": { "text": "  *** Tainted data: point->_y" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1 } }, "message": { "text": "Violation Point - Point of possible overflow\/underflow  *** Tainted data: this->_y" } }, "nestingLevel": 1 } ] } ] } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'translate' function is not preceded by a comment", "markdown": "**\\[Line 13\\] The definition of the 'translate' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1158187041", "unbViolId": "a2ce3588-1172-35dc-bc96-7f3f5c16b683" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'translate' function is not preceded by a comment", "markdown": "**\\[Line 13\\] The definition of the 'translate' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1158187041", "unbViolId": "e49d556c-baa6-3ff7-9c54-0cb975e427f9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'translate' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 13\\] The 'translate' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1158187041", "unbViolId": "adf17b79-b7af-3829-b454-741f5dc16ccb" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'translate' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 13\\] The 'translate' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1158187041", "unbViolId": "624cd97d-200f-3471-bd4a-33d017ae59dd" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'vector' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 13\\] The 'vector' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1158187041", "unbViolId": "2a1efba3-6ed5-3fd3-8bd7-4498b65d1425" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'vector' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 13\\] The 'vector' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1158187041", "unbViolId": "4c916d42-182f-3691-b44f-26d67d088c1b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "AUTOSAR-A15_4_4-a", "level": "error", "message": { "text": "The 'translate' function should be declared 'noexcept'", "markdown": "**\\[Line 13\\] The 'translate' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1158187041", "unbViolId": "1710b04d-e208-320f-8ae8-b610b680001f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "CODSTA-MCPP-09", "level": "warning", "message": { "text": "The 'translate' function should be declared 'noexcept'", "markdown": "**\\[Line 13\\] The 'translate' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1158187041", "unbViolId": "0061c854-8828-34fd-8485-684aab01db0e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "FORMAT-28", "level": "warning", "message": { "text": "Return type is not placed in line before function 'translate'", "markdown": "**\\[Line 13\\] Return type is not placed in line before function 'translate'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1158187041", "unbViolId": "d1dc6ffa-29a7-32df-81f6-bc7f0e4cbc60" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'translate' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 13\\] Function 'translate' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1158187041", "unbViolId": "f7b20395-ffef-3fae-a2db-1cec6a198fe0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'translate' has Essential Complexity value: 1", "markdown": "**\\[Line 13\\] Function 'translate' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1158187041", "unbViolId": "ab300b23-5a9c-377e-9dba-5f1b750071ad" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "NAMING-17", "level": "warning", "message": { "text": "Naming convention not followed: translate", "markdown": "**\\[Line 13\\] Naming convention not followed: translate**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1158187041", "unbViolId": "ded3974a-9449-331a-a19f-198a200c1263" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 10, "endColumn": 11 } } } ] }, { "ruleId": "FORMAT-47_a", "level": "warning", "message": { "text": "The 'const' qualifier should be placed on the right hand side of the type", "markdown": "**\\[Line 13\\] The 'const' qualifier should be placed on the right hand side of the type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1158187041", "unbViolId": "5102e6c9-77a9-3e3a-abe8-c6b7d520f4c8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "HICPP-7_1_4-a", "level": "warning", "message": { "text": "The 'const' qualifier should be placed on the right hand side of the type", "markdown": "**\\[Line 13\\] The 'const' qualifier should be placed on the right hand side of the type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1158187041", "unbViolId": "36466872-2324-3906-8f56-a945efc79701" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "AUTOSAR-A8_4_7-a", "level": "error", "message": { "text": "Consider passing the 'vector' parameter by value instead of by const reference", "markdown": "**\\[Line 13\\] Consider passing the 'vector' parameter by value instead of by const reference**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1158187041", "unbViolId": "839c9691-0b1c-366d-b01c-0e6573b0c5a2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 33, "endColumn": 34 } } } ] }, { "ruleId": "HICPP-8_2_3-a", "level": "warning", "message": { "text": "The 'vector' parameter should be passed by value instead of by const reference", "markdown": "**\\[Line 13\\] The 'vector' parameter should be passed by value instead of by const reference**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1158187041", "unbViolId": "1040e20a-e7db-307d-a614-46cc4fa1ddb3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 33, "endColumn": 34 } } } ] }, { "ruleId": "CERT_C-API00-a", "level": "warning", "message": { "text": "Parameter 'vector' is not validated before use", "markdown": "**\\[Line 13\\] Parameter 'vector' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1158187041", "unbViolId": "a19d4d4c-8bc5-30d1-b033-a464c301665b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 33, "endColumn": 34 } } } ] }, { "ruleId": "CODSTA-86", "level": "warning", "message": { "text": "Parameter 'vector' is not validated before use", "markdown": "**\\[Line 13\\] Parameter 'vector' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1158187041", "unbViolId": "1c13cc7b-51e0-3114-be2f-c0f95d867b83" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 33, "endColumn": 34 } } } ] }, { "ruleId": "NAMING-HN-11", "level": "warning", "message": { "text": "The 'vector' identifier should have the 'k' prefix", "markdown": "**\\[Line 13\\] The 'vector' identifier should have the 'k' prefix**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1158187041", "unbViolId": "fc3299a1-393c-33aa-b9f7-ca559c132f8d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 33, "endColumn": 34 } } } ] }, { "ruleId": "NAMING-HN-35", "level": "warning", "message": { "text": "The 'vector' identifier should have the 'r' prefix", "markdown": "**\\[Line 13\\] The 'vector' identifier should have the 'r' prefix**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1158187041", "unbViolId": "563db9eb-199a-354f-9939-d07654db2166" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 13, "startColumn": 33, "endColumn": 34 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 14\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "30537851", "unbViolId": "14374875-b5f7-3a4e-8e2e-48f4706fee4f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 14, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 15\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "931387847", "unbViolId": "34fbd1f2-0103-308c-a38b-1e3c6a98b884" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 15\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "931387847", "unbViolId": "335f27ea-07ee-3731-a3af-f658b2ca3687" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 15\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "931387847", "unbViolId": "a30d4550-1d89-3256-9bf3-7696f82f2248" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 16\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1856027609", "unbViolId": "855d5c3b-b1e6-3a2a-8a28-334e502025cb" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 16\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1856027609", "unbViolId": "48964aef-2506-328c-adf3-d8d2e22bd453" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 16\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1856027609", "unbViolId": "9a267dfe-7e4b-31d7-ad58-9347e99b0ecf" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "66386084-5dff-3300-ae31-e2a8d1b45834" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "bfc52062-7b6c-3db2-8248-df897daff2ec" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 19\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "23d74040-62a5-396d-9868-db7e4e30c7d5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 19\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "cc47f092-1969-3c86-a899-2fa82a34bfe9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 19\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "c9471aea-19ec-3e6c-a513-71ce6fcde618" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "bfd7e6a3-9cbe-3861-a33a-a42f52aff956" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "58eb2436-d194-37a7-afdb-117b23375501" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "d1239fe5-507a-3024-9b0e-4f2c6ff1e717" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "1d3f329d-c055-3104-b194-c3663b072146" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "330ae605-e03a-3990-994e-b32fb4e8f154" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "CODSTA-MCPP-08_b", "level": "error", "message": { "text": "The return type of the 'squareDistanceTo' function should be declared as 'auto'", "markdown": "**\\[Line 19\\] The return type of the 'squareDistanceTo' function should be declared as 'auto'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "1b73d4ae-d733-3aba-88d2-f512050c4e5c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'squareDistanceTo' function is not preceded by a comment", "markdown": "**\\[Line 19\\] The definition of the 'squareDistanceTo' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "28d45994-28a0-3f2c-9059-2c8448af7ff3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'squareDistanceTo' function is not preceded by a comment", "markdown": "**\\[Line 19\\] The definition of the 'squareDistanceTo' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "2047db7a-1862-3921-9e15-4e7107937718" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'squareDistanceTo' should be composed only of lowercase letters", "markdown": "**\\[Line 19\\] The name 'squareDistanceTo' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "5d947241-8b9a-319a-9a15-686b14fcfd48" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'squareDistanceTo' should be composed only of lowercase letters", "markdown": "**\\[Line 19\\] The name 'squareDistanceTo' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "080e7f41-6ceb-3300-ac65-7e7ecd8fc7cf" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'squareDistanceTo' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 19\\] The 'squareDistanceTo' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "29680a56-188b-31ae-90c9-110adea45d82" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'squareDistanceTo' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 19\\] The 'squareDistanceTo' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "18d5f9d4-9ca5-3036-881c-05e5af928804" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'point' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 19\\] The 'point' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "7bc49a8f-faf2-3f04-be96-d7c02139202e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'point' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 19\\] The 'point' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "7b460a4f-4c17-34b0-8a7a-7f225cdfa774" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'squareDistanceTo' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 19\\] The 'squareDistanceTo' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "cc8b91d5-0017-35e3-92cd-12a5e63bee2a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'squareDistanceTo' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 19\\] The 'squareDistanceTo' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "ed3ac3ce-90f5-370c-91e9-6224c33c8c95" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "PORT-13", "level": "warning", "message": { "text": "'squareDistanceTo' shall be declared as unsigned int or signed int", "markdown": "**\\[Line 19\\] 'squareDistanceTo' shall be declared as unsigned int or signed int**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "e682575c-0e58-3abb-8c21-13b0c68f129a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-CPP-54", "level": "warning", "message": { "text": "Member function 'squareDistanceTo' should be declared as const", "markdown": "**\\[Line 19\\] Member function 'squareDistanceTo' should be declared as const**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "e7371295-5a79-33f5-8dee-7868691b24a5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-069", "level": "warning", "message": { "text": "Member function 'squareDistanceTo' should be declared as const", "markdown": "**\\[Line 19\\] Member function 'squareDistanceTo' should be declared as const**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "9e2f8657-056c-35ee-8fcc-deecc71f72e6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "HICPP-9_1_1-a", "level": "warning", "message": { "text": "Member function 'squareDistanceTo' should be declared as const", "markdown": "**\\[Line 19\\] Member function 'squareDistanceTo' should be declared as const**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "70d794a1-ae42-3287-9939-4b7601cd6731" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-M9_3_3-a", "level": "error", "message": { "text": "Member function 'squareDistanceTo' should be declared as const", "markdown": "**\\[Line 19\\] Member function 'squareDistanceTo' should be declared as const**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "dfb16902-549f-3629-81a4-525c4e959a2b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-CPP-78", "level": "warning", "message": { "text": "Member function 'squareDistanceTo' should be declared as const", "markdown": "**\\[Line 19\\] Member function 'squareDistanceTo' should be declared as const**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "7ba9835d-beb2-38c3-ba73-9d22e17d9e53" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "MISRA2008-9_3_3", "level": "error", "message": { "text": "Member function 'squareDistanceTo' should be declared as const", "markdown": "**\\[Line 19\\] Member function 'squareDistanceTo' should be declared as const**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "3aaba3ca-0d68-3740-98fc-a8d892c0cc72" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-A15_4_4-a", "level": "error", "message": { "text": "The 'squareDistanceTo' function should be declared 'noexcept'", "markdown": "**\\[Line 19\\] The 'squareDistanceTo' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "d8d99bad-61a2-38e3-a156-1685cced3c56" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "CODSTA-MCPP-09", "level": "warning", "message": { "text": "The 'squareDistanceTo' function should be declared 'noexcept'", "markdown": "**\\[Line 19\\] The 'squareDistanceTo' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "b33d6b77-a28c-36c4-86d6-4924ae59b158" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "FORMAT-28", "level": "warning", "message": { "text": "Return type is not placed in line before function 'squareDistanceTo'", "markdown": "**\\[Line 19\\] Return type is not placed in line before function 'squareDistanceTo'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "2ca23f95-74ee-3b74-b7ef-ea32c7085ec1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'squareDistanceTo' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 19\\] Function 'squareDistanceTo' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "11970bf1-2a75-390e-9715-30f5ad948711" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'squareDistanceTo' has Essential Complexity value: 1", "markdown": "**\\[Line 19\\] Function 'squareDistanceTo' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "2b1e37ec-75be-3baa-be3f-00fe0c341a53" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-17", "level": "warning", "message": { "text": "Naming convention not followed: squareDistanceTo", "markdown": "**\\[Line 19\\] Naming convention not followed: squareDistanceTo**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "0006528f-33a7-3804-b316-efe4f8152ba3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "FORMAT-47_a", "level": "warning", "message": { "text": "The 'const' qualifier should be placed on the right hand side of the type", "markdown": "**\\[Line 19\\] The 'const' qualifier should be placed on the right hand side of the type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "6f006fb7-508e-3cad-88e1-4408191384fc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 26, "endColumn": 27 } } } ] }, { "ruleId": "HICPP-7_1_4-a", "level": "warning", "message": { "text": "The 'const' qualifier should be placed on the right hand side of the type", "markdown": "**\\[Line 19\\] The 'const' qualifier should be placed on the right hand side of the type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "f23723b2-f14a-3767-b417-1c3154de00d8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 26, "endColumn": 27 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'", "markdown": "**\\[Line 19\\] The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "7f470a80-652d-34cc-b720-bda4a9e10925" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'", "markdown": "**\\[Line 19\\] The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "ed117640-74db-326e-b7e0-ec449cb6d5c7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "MISRA2008-2_10_1", "level": "error", "message": { "text": "Identifier name: 'point' differs only by case from identifier name: 'Point' ( line: '4')", "markdown": "**\\[Line 19\\] Identifier name: 'point' differs only by case from identifier name: 'Point' \\( line: '4'\\)**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "97434c3b-72cc-3ea4-a615-5230e7db01a4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "HICPP-2_4_1-a", "level": "warning", "message": { "text": "Identifier name: 'point' differs only by case from identifier name: 'Point' ( line: '4')", "markdown": "**\\[Line 19\\] Identifier name: 'point' differs only by case from identifier name: 'Point' \\( line: '4'\\)**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "81013261-bb20-36c3-9fb3-66fb9c510134" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "AUTOSAR-M2_10_1-a", "level": "error", "message": { "text": "Identifier name: 'point' differs only by case from identifier name: 'Point' ( line: '4')", "markdown": "**\\[Line 19\\] Identifier name: 'point' differs only by case from identifier name: 'Point' \\( line: '4'\\)**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "2112b957-9bb4-391a-8ec2-a341a5bf8c5b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "NAMING-47", "level": "warning", "message": { "text": "Identifier name: 'point' differs only by case from identifier name: 'Point' ( line: '4')", "markdown": "**\\[Line 19\\] Identifier name: 'point' differs only by case from identifier name: 'Point' \\( line: '4'\\)**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "daacb122-9618-31f6-931e-76603db2efb3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "MISRA2008-2_10_1", "level": "error", "message": { "text": "Identifier name: 'point' differs only by case from identifier name: 'Point' declared in class", "markdown": "**\\[Line 19\\] Identifier name: 'point' differs only by case from identifier name: 'Point' declared in class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "88eb625a-15ba-34e8-8491-df8ef30527ef" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "HICPP-2_4_1-a", "level": "warning", "message": { "text": "Identifier name: 'point' differs only by case from identifier name: 'Point' declared in class", "markdown": "**\\[Line 19\\] Identifier name: 'point' differs only by case from identifier name: 'Point' declared in class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "d4522170-a4fc-3fe6-85aa-e9e4e0adc118" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "AUTOSAR-M2_10_1-a", "level": "error", "message": { "text": "Identifier name: 'point' differs only by case from identifier name: 'Point' declared in class", "markdown": "**\\[Line 19\\] Identifier name: 'point' differs only by case from identifier name: 'Point' declared in class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "7d15c23f-0c46-34c4-afd2-e5926a2c8a1d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "NAMING-47", "level": "warning", "message": { "text": "Identifier name: 'point' differs only by case from identifier name: 'Point' declared in class", "markdown": "**\\[Line 19\\] Identifier name: 'point' differs only by case from identifier name: 'Point' declared in class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "548bb000-9a0d-3b10-a5b9-ae1d46b6269c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "MISRA2008-2_10_1", "level": "error", "message": { "text": "Identifier name: 'point' differs only by case from its type name: 'Point'", "markdown": "**\\[Line 19\\] Identifier name: 'point' differs only by case from its type name: 'Point'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "2ae692b2-3af1-3667-b0c8-f6f6a70456b4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "HICPP-2_4_1-a", "level": "warning", "message": { "text": "Identifier name: 'point' differs only by case from its type name: 'Point'", "markdown": "**\\[Line 19\\] Identifier name: 'point' differs only by case from its type name: 'Point'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "b0d90008-0524-326c-bf35-9c5ecea208e2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "AUTOSAR-M2_10_1-a", "level": "error", "message": { "text": "Identifier name: 'point' differs only by case from its type name: 'Point'", "markdown": "**\\[Line 19\\] Identifier name: 'point' differs only by case from its type name: 'Point'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "51ccef75-e1cf-35f7-82eb-852f8ce83c3f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "NAMING-47", "level": "warning", "message": { "text": "Identifier name: 'point' differs only by case from its type name: 'Point'", "markdown": "**\\[Line 19\\] Identifier name: 'point' differs only by case from its type name: 'Point'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "ab745c4e-b6c3-3db6-a905-2b56a8c05037" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "AUTOSAR-A8_4_7-a", "level": "error", "message": { "text": "Consider passing the 'point' parameter by value instead of by const reference", "markdown": "**\\[Line 19\\] Consider passing the 'point' parameter by value instead of by const reference**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "96226aec-55c9-3e40-a6c9-cfd2ed000cb3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "HICPP-8_2_3-a", "level": "warning", "message": { "text": "The 'point' parameter should be passed by value instead of by const reference", "markdown": "**\\[Line 19\\] The 'point' parameter should be passed by value instead of by const reference**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "5981a416-376c-3e1c-bd82-68edf0589d10" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "CERT_C-API00-a", "level": "warning", "message": { "text": "Parameter 'point' is not validated before use", "markdown": "**\\[Line 19\\] Parameter 'point' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "95cda53f-5d72-3f01-b033-a11fa1b0fa19" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "CODSTA-86", "level": "warning", "message": { "text": "Parameter 'point' is not validated before use", "markdown": "**\\[Line 19\\] Parameter 'point' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "c9ee9c31-d88b-3ed4-8fbc-acf46a82aca5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "NAMING-HN-11", "level": "warning", "message": { "text": "The 'point' identifier should have the 'k' prefix", "markdown": "**\\[Line 19\\] The 'point' identifier should have the 'k' prefix**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "42a07fa8-1545-397e-91a1-ab62326674a8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "NAMING-HN-35", "level": "warning", "message": { "text": "The 'point' identifier should have the 'r' prefix", "markdown": "**\\[Line 19\\] The 'point' identifier should have the 'r' prefix**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "905451388", "unbViolId": "b7429df7-ee85-34ba-870c-c7d37ae7ee60" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 20\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "30537851", "unbViolId": "84104753-9152-33e9-b8cb-35087427299b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 20, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-04", "level": "warning", "message": { "text": "Line has over 79 characters", "markdown": "**\\[Line 21\\] Line has over 79 characters**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "150478121", "unbViolId": "d1384222-6611-37e1-bf34-b27a48b9b2e3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 21, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 21\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "150478121", "unbViolId": "cb046013-1326-3c93-9b53-26f6fc595e25" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 21, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 21\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "150478121", "unbViolId": "97049249-acc4-30fb-8f2a-f88923613242" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 21, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 21\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "150478121", "unbViolId": "30557597-024d-3994-b2cc-20aa2f99e0a5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 21, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "FORMAT-25_b", "level": "warning", "message": { "text": "'return' statement should be used with parenthesis", "markdown": "**\\[Line 21\\] 'return' statement should be used with parenthesis**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "150478121", "unbViolId": "2a212037-2b4f-3951-a06e-45a5b3ebbadb" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 21, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "HICPP-2_3_1-a", "level": "warning", "message": { "text": "Use \/\/ comments only", "markdown": "**\\[Line 25\\] Use \/\/ comments only**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1963129393", "unbViolId": "535f86bd-5a3a-3fd0-ab8f-81068fdab2dd" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-126", "level": "error", "message": { "text": "Use \/\/ comments only", "markdown": "**\\[Line 25\\] Use \/\/ comments only**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1963129393", "unbViolId": "43aa12da-7aac-3cd3-ad64-b69b8ebbe65e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "COMMENT-01", "level": "warning", "message": { "text": "Use \/\/ comments only", "markdown": "**\\[Line 25\\] Use \/\/ comments only**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1963129393", "unbViolId": "a8256079-f3a0-3929-bc8c-072b6360dc73" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "METRICS-31", "level": "warning", "message": { "text": "The assertion density is lower than two assertions per function", "markdown": "**\\[Line 1\\] The assertion density is lower than two assertions per function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-290124037", "unbViolId": "1b1661e2-ff00-3574-998f-3d38ca280c7b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-03", "level": "warning", "message": { "text": "The filename 'Shapes.hpp' should be in lowercase", "markdown": "**\\[Line 1\\] The filename 'Shapes\\.hpp' should be in lowercase**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-290124037", "unbViolId": "99da7dbb-7f24-3a66-b5cc-0c0d607647ed" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-37", "level": "warning", "message": { "text": "Header file 'Shapes.hpp' should have the file name extension \".hh\"", "markdown": "**\\[Line 1\\] Header file 'Shapes\\.hpp' should have the file name extension \"\\.hh\"**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-290124037", "unbViolId": "621a5e32-18f0-33ab-8673-11a60bd1c609" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-053", "level": "warning", "message": { "text": "Header file 'Shapes.hpp' should have the file name extension \".h\"", "markdown": "**\\[Line 1\\] Header file 'Shapes\\.hpp' should have the file name extension \"\\.h\"**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-290124037", "unbViolId": "a9408dc8-034a-3d03-b6f2-b5f617fdf274" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-41", "level": "warning", "message": { "text": "Header file 'Shapes.hpp' should have the file name extension \".h\"", "markdown": "**\\[Line 1\\] Header file 'Shapes\\.hpp' should have the file name extension \"\\.h\"**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-290124037", "unbViolId": "e160d1db-7b79-32cb-b7cf-912a4a4fff19" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-43", "level": "warning", "message": { "text": "'Shapes.hpp' filename extension does not adhere to naming conventions", "markdown": "**\\[Line 1\\] 'Shapes\\.hpp' filename extension does not adhere to naming conventions**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-290124037", "unbViolId": "6b39ae8c-8b7d-35a0-91f6-77c6cc60d937" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PFO-03", "level": "warning", "message": { "text": "File 'Shapes.hpp' contains more than one class definition", "markdown": "**\\[Line 1\\] File 'Shapes\\.hpp' contains more than one class definition**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-290124037", "unbViolId": "cc2f3f11-8edf-3bbd-a4bd-07f64c81ab74" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PFO-07", "level": "warning", "message": { "text": "SHAPES_HPP macro name should appear as first #ifndef or #if preprocessor directive", "markdown": "**\\[Line 1\\] SHAPES\\_HPP macro name should appear as first \\#ifndef or \\#if preprocessor directive**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-290124037", "unbViolId": "16f9f3d1-bf89-3898-bf57-25a4e298ecd2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PFO-10", "level": "warning", "message": { "text": "Header file 'Shapes.hpp' contains more than one class declaration: 'Shape, LineSegment, Circle'", "markdown": "**\\[Line 1\\] Header file 'Shapes\\.hpp' contains more than one class declaration: 'Shape, LineSegment, Circle'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-290124037", "unbViolId": "5b8f5606-3c83-32e7-9435-9f4d1ed09786" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-39", "level": "warning", "message": { "text": "File 'Shapes.hpp'  should have the \".icc\" file name extension", "markdown": "**\\[Line 1\\] File 'Shapes\\.hpp'  should have the \"\\.icc\" file name extension**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-290124037", "unbViolId": "8cab1095-45e3-3e36-920e-b3a795b4f469" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-02", "level": "warning", "message": { "text": "Add comment containing the copyright information at the begin of file 'Shapes.hpp'", "markdown": "**\\[Line 1\\] Add comment containing the copyright information at the begin of file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-290124037", "unbViolId": "df06ea03-7ede-3ef8-9aa4-0574730ee876" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-133_b", "level": "warning", "message": { "text": "Add comment containing the copyright information at the begin of file 'Shapes.hpp'", "markdown": "**\\[Line 1\\] Add comment containing the copyright information at the begin of file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-290124037", "unbViolId": "8b42a9fe-c783-34e0-92cb-c4a89716caa2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-03", "level": "warning", "message": { "text": "Add comment containing the information on the file at the begin of file 'Shapes.hpp'", "markdown": "**\\[Line 1\\] Add comment containing the information on the file at the begin of file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-290124037", "unbViolId": "e316e97c-60d5-348e-89ea-4c688fd71c86" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-133_a", "level": "warning", "message": { "text": "Add comment containing the information on the file at the begin of file 'Shapes.hpp'", "markdown": "**\\[Line 1\\] Add comment containing the information on the file at the begin of file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-290124037", "unbViolId": "2d5c7a25-a703-341c-a8cc-643decda5a03" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 1, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-032", "level": "warning", "message": { "text": "Not a proper header file (*.h ) is being included: \"Point.hpp\"", "markdown": "**\\[Line 4\\] Not a proper header file \\(\\*\\.h \\) is being included: \"Point\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1179647073", "unbViolId": "772c0a27-5d22-3f85-a6ae-89e51cd80ca2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-08", "level": "warning", "message": { "text": "Not a proper header file (*.h ) is being included: \"Point.hpp\"", "markdown": "**\\[Line 4\\] Not a proper header file \\(\\*\\.h \\) is being included: \"Point\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1179647073", "unbViolId": "0e1b6903-6469-393c-b560-a380156650e1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "PREPROC-09", "level": "error", "message": { "text": "Disallowed #include notation is being used: \"Point.hpp\"", "markdown": "**\\[Line 4\\] Disallowed \\#include notation is being used: \"Point\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1179647073", "unbViolId": "149209fa-0749-3cf1-880e-53085bb6ea02" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-033", "level": "error", "message": { "text": "Disallowed #include notation is being used: \"Point.hpp\"", "markdown": "**\\[Line 4\\] Disallowed \\#include notation is being used: \"Point\\.hpp\"**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1179647073", "unbViolId": "c2f44497-163e-324f-a054-d65b9f8ffae2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 4, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-02", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 6\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "29657f8f-770b-34d9-b8f6-6b9fd102ea1a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-34", "level": "warning", "message": { "text": "Opening '{' and closing '}' should be in the same column", "markdown": "**\\[Line 6\\] Opening '\\{' and closing '\\}' should be in the same column**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "a25c4b07-9796-3818-ae34-7020c8783d6a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-098", "level": "warning", "message": { "text": "Do not declare the 'Shape' type in the global namespace", "markdown": "**\\[Line 6\\] Do not declare the 'Shape' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "169c5dbf-71bf-35c5-a51d-104c7f866589" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-M7_3_1-a", "level": "error", "message": { "text": "Do not declare the 'Shape' type in the global namespace", "markdown": "**\\[Line 6\\] Do not declare the 'Shape' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "81185672-bb4e-3b49-a63c-2d2df5745d30" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-36", "level": "warning", "message": { "text": "Do not declare the 'Shape' type in the global namespace", "markdown": "**\\[Line 6\\] Do not declare the 'Shape' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "42fe8f16-f4f6-3a0e-86a0-967c770392e1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2008-7_3_1", "level": "error", "message": { "text": "Do not declare the 'Shape' type in the global namespace", "markdown": "**\\[Line 6\\] Do not declare the 'Shape' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "2cffe0ac-6d01-3e32-8447-df602f308b53" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The declaration of the 'Shape' type should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 6\\] The declaration of the 'Shape' type should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "f574bbb6-5b4c-38d2-b0b6-e18c8aac4dd8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The declaration of the 'Shape' type should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 6\\] The declaration of the 'Shape' type should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "b19c5262-ea1f-328c-9aec-67805b8475fa" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-057_a", "level": "warning", "message": { "text": "Public section must be before protected and private sections", "markdown": "**\\[Line 6\\] Public section must be before protected and private sections**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "8a748acc-893d-38ba-b753-62bb8c284593" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-46", "level": "warning", "message": { "text": "Public section must be before protected and private sections", "markdown": "**\\[Line 6\\] Public section must be before protected and private sections**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "13bbbeaa-c5a8-3b81-8c73-3c94bb00663e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-057_b", "level": "warning", "message": { "text": "Protected section must be before private section", "markdown": "**\\[Line 6\\] Protected section must be before private section**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "8f673b33-ef00-3d4f-befe-d0dc1aea3b83" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-47", "level": "warning", "message": { "text": "Protected section must be before private section", "markdown": "**\\[Line 6\\] Protected section must be before private section**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "3f8d2fc3-b84a-3f46-b1b7-d6666bf4f6f1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A12_4_2-a", "level": "warning", "message": { "text": "Class 'Shape' should be final", "markdown": "**\\[Line 6\\] Class 'Shape' should be final**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "ab1a8f19-40f0-33d0-abff-74a117a69397" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-MCPP-23", "level": "warning", "message": { "text": "Class 'Shape' should be final", "markdown": "**\\[Line 6\\] Class 'Shape' should be final**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "a163b58e-0db8-3034-8d2a-1d3c677fda3b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare default constructor in 'Shape'", "markdown": "**\\[Line 6\\] Explicitly declare default constructor in 'Shape'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "85a5115f-9566-3daf-ae09-138824285d4e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare destructor in 'Shape'", "markdown": "**\\[Line 6\\] Explicitly declare destructor in 'Shape'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "754f1044-a786-3960-b424-569867eeb193" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare copy assignment operator in 'Shape'", "markdown": "**\\[Line 6\\] Explicitly declare copy assignment operator in 'Shape'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "3711984f-3473-3a37-a77f-9ad9c64d84ad" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare move assignment operator in 'Shape'", "markdown": "**\\[Line 6\\] Explicitly declare move assignment operator in 'Shape'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "eb39f360-f716-3d62-9617-996d0165cc40" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare copy constructor in 'Shape'", "markdown": "**\\[Line 6\\] Explicitly declare copy constructor in 'Shape'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "e28a148e-6fa9-3975-aab5-9298ef5fb02c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare move constructor in 'Shape'", "markdown": "**\\[Line 6\\] Explicitly declare move constructor in 'Shape'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "826be034-5d09-3787-8e83-55ebe5a6ff4f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-04", "level": "warning", "message": { "text": "Class 'Shape' missing assignment operator or special comment", "markdown": "**\\[Line 6\\] Class 'Shape' missing assignment operator or special comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "c95246e6-440e-353b-b767-c2425d18b4f5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-05", "level": "warning", "message": { "text": "Class 'Shape' missing copy constructor or special comment", "markdown": "**\\[Line 6\\] Class 'Shape' missing copy constructor or special comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "5831c729-7d95-3fcb-bc6c-3b659506de39" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-47", "level": "warning", "message": { "text": "Class 'Shape' missing assignment operator or special comment", "markdown": "**\\[Line 6\\] Class 'Shape' missing assignment operator or special comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "b1c08a42-0e5f-33fa-9480-4a7ad3cf496b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-48", "level": "warning", "message": { "text": "Class 'Shape' missing copy constructor or special comment", "markdown": "**\\[Line 6\\] Class 'Shape' missing copy constructor or special comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "1781fdb9-394e-3a0b-8abf-ce40897d309c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-HN-19", "level": "warning", "message": { "text": "The 'Shape' identifier should have the 'C' prefix", "markdown": "**\\[Line 6\\] The 'Shape' identifier should have the 'C' prefix**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "7bb1bb0a-1878-3f1e-a78c-c32ee1c5e2c7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "OOP-23", "level": "error", "message": { "text": "Class 'Shape' has virtual functions without a virtual destructor", "markdown": "**\\[Line 6\\] Class 'Shape' has virtual functions without a virtual destructor**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "4681bb1e-5e52-362d-ba5f-244d4521ca49" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "OPT-27", "level": "warning", "message": { "text": "In a class 'Shape' number of accessor functions (2) exceeds number of member variables (1)", "markdown": "**\\[Line 6\\] In a class 'Shape' number of accessor functions \\(2\\) exceeds number of member variables \\(1\\)**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "4cddac5a-e0b3-3fca-bcdf-3d83f6a938c0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-12", "level": "warning", "message": { "text": "Put base class 'Shape' into separate file", "markdown": "**\\[Line 6\\] Put base class 'Shape' into separate file**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "c574cd4e-94ed-3ae6-a46a-31e0a54f998c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "OOP-22", "level": "error", "message": { "text": "Class 'Shape' must define a virtual destructor", "markdown": "**\\[Line 6\\] Class 'Shape' must define a virtual destructor**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "b06f6c37-2ff2-3d6d-ae97-febaee785bb7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CWE-772-b", "level": "error", "message": { "text": "Class 'Shape' must define a virtual destructor", "markdown": "**\\[Line 6\\] Class 'Shape' must define a virtual destructor**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "2598f66c-5134-341b-8249-f6a6aae7cbbb" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CERT_CPP-OOP52-a", "level": "error", "message": { "text": "Class 'Shape' must define a virtual destructor", "markdown": "**\\[Line 6\\] Class 'Shape' must define a virtual destructor**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "e2ba3516-ddd3-3051-a34e-3a35cca3ff99" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-078", "level": "error", "message": { "text": "Class 'Shape' must define a virtual destructor", "markdown": "**\\[Line 6\\] Class 'Shape' must define a virtual destructor**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "7c6f3158-113e-3253-a845-6d38da1f9c71" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2012-RULE-5_7_a", "level": "error", "message": { "text": "The type name 'Shape' is not a unique identifier in the testing scope", "markdown": "**\\[Line 6\\] The type name 'Shape' is not a unique identifier in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "82769edf-4d4a-305d-bcbf-4594dc1906ca" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRAC2012-RULE_5_7-a", "level": "error", "message": { "text": "The type name 'Shape' is not a unique identifier in the testing scope", "markdown": "**\\[Line 6\\] The type name 'Shape' is not a unique identifier in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "399430900", "unbViolId": "96428e84-aeff-3189-9e41-4e5612d42ffd" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 6, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 7\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1878228628", "unbViolId": "746ec3a2-0605-3f09-9cc8-895f004a699c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 7\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1878228628", "unbViolId": "ee383f39-937d-3b7c-be38-094305fe90c3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 7\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1878228628", "unbViolId": "b14a8f83-1750-32af-9d89-20285046e8f0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier '_position' differs only by presence\/absence of the underscore character from identifier 'position' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 7\\] The identifier '\\_position' differs only by presence\/absence of the underscore character from identifier 'position' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1878228628", "unbViolId": "ed2acc09-11d5-30dd-a2b6-f721b2f53d84" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier '_position' differs only by presence\/absence of the underscore character from identifier 'position' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 7\\] The identifier '\\_position' differs only by presence\/absence of the underscore character from identifier 'position' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1878228628", "unbViolId": "83041096-c0f5-38bc-9029-27ab0d9a1e41" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The '_position' member variable should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 7\\] The '\\_position' member variable should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1878228628", "unbViolId": "e5b14da6-c266-38c4-a58b-2297fd3479b1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The '_position' member variable should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 7\\] The '\\_position' member variable should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1878228628", "unbViolId": "6f7f4929-2da7-33b6-b4d6-512f711a2d9f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-07", "level": "warning", "message": { "text": "Member variable '_position' shall begin with a lowercase letter", "markdown": "**\\[Line 7\\] Member variable '\\_position' shall begin with a lowercase letter**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1878228628", "unbViolId": "396a8656-5ee0-3d8a-925d-ece024053833" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-14", "level": "warning", "message": { "text": "Naming convention not followed: _position", "markdown": "**\\[Line 7\\] Naming convention not followed: \\_position**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1878228628", "unbViolId": "c0378af8-7634-39d7-91bb-d26f59e84088" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-33", "level": "warning", "message": { "text": "Using underscore at the beginning of the name '_position' is not allowed", "markdown": "**\\[Line 7\\] Using underscore at the beginning of the name '\\_position' is not allowed**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1878228628", "unbViolId": "33c1de6c-a6ac-343e-977e-6d57617adcf4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-047", "level": "warning", "message": { "text": "Using underscore at the beginning of the name '_position' is not allowed", "markdown": "**\\[Line 7\\] Using underscore at the beginning of the name '\\_position' is not allowed**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1878228628", "unbViolId": "35d8c65d-994d-39f9-87d4-ed02df4fe83d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-HN-29", "level": "warning", "message": { "text": "The '_position' identifier should have the 'm_' prefix", "markdown": "**\\[Line 7\\] The '\\_position' identifier should have the 'm\\_' prefix**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1878228628", "unbViolId": "96ddb8a0-559c-34b8-8ffe-9c83601fddd8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 7, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1257077025", "unbViolId": "126a2207-fac2-3e59-94de-907ddf3ab41b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1257077025", "unbViolId": "33b1486a-1980-37c2-9121-0918aaee4f6a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1257077025", "unbViolId": "0881fbbc-7715-3421-a352-488fdc478b6f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1257077025", "unbViolId": "c83c0709-0673-389b-9e15-74e8b336e242" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1257077025", "unbViolId": "85552c2b-89e0-39a5-b13d-a0fe5af5e6b0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1257077025", "unbViolId": "67b7995c-fbdb-38fe-b32b-e766bd6760b4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 9\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1257077025", "unbViolId": "b396a27d-6728-3dc0-bd46-20d4073cd4e6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'getArea' should be composed only of lowercase letters", "markdown": "**\\[Line 9\\] The name 'getArea' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1257077025", "unbViolId": "6c439926-d1fa-3afa-99a1-bc39b2da0099" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'getArea' should be composed only of lowercase letters", "markdown": "**\\[Line 9\\] The name 'getArea' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1257077025", "unbViolId": "e5c4a8a7-d181-3f6c-b08a-63cd7be42d60" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "JSF-134_b", "level": "warning", "message": { "text": "The declaration of the 'getArea' function is not preceded by a comment", "markdown": "**\\[Line 9\\] The declaration of the 'getArea' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1257077025", "unbViolId": "f57eb60d-a254-3800-822e-122f31e47754" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "COMMENT-04_b", "level": "warning", "message": { "text": "The declaration of the 'getArea' function is not preceded by a comment", "markdown": "**\\[Line 9\\] The declaration of the 'getArea' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1257077025", "unbViolId": "ea680064-0276-310a-acae-7844c9446ee0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'getArea' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 9\\] The 'getArea' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1257077025", "unbViolId": "57774968-a206-3774-8f9d-eb327f235392" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'getArea' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 9\\] The 'getArea' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1257077025", "unbViolId": "0f56ff02-1732-315c-8302-1007fb3d4603" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'getArea' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 9\\] The 'getArea' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1257077025", "unbViolId": "e75293d4-ac78-32bc-a0fd-7cd8d2e72c8c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'getArea' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 9\\] The 'getArea' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1257077025", "unbViolId": "eb9add9b-db58-32ac-a324-bd9fd5e6ac68" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "CODSTA-CPP-25", "level": "warning", "message": { "text": "Make virtual functions nonpublic, and public functions nonvirtual: getArea", "markdown": "**\\[Line 9\\] Make virtual functions nonpublic, and public functions nonvirtual: getArea**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1257077025", "unbViolId": "cb40f316-81a3-3013-8c84-b414a540e497" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "NAMING-17", "level": "warning", "message": { "text": "Naming convention not followed: getArea", "markdown": "**\\[Line 9\\] Naming convention not followed: getArea**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1257077025", "unbViolId": "e6e3a432-1a67-30a7-be9d-cce73a833b81" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 9, "startColumn": 20, "endColumn": 21 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 10\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "7106b2f2-a0e6-3e58-9bf9-7857d2c864e2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 10\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "6ebc4ae6-4ec0-39fb-8a56-5ea17cd9c44a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 10\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "141eaccc-86ed-3183-8b8f-84c9859debec" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 10\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "e218f47c-8c8a-3cf0-be06-74795ad9ecf4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-43", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 10\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "f91c1be3-6b7e-3f1f-9581-2490dbf99835" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_b", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 10\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "e1958709-f401-3efc-92b7-453a91899fcc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-02", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 10\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "ddf73521-872b-3a2b-ac22-505d58452fa2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-34", "level": "warning", "message": { "text": "Opening '{' and closing '}' should be in the same column", "markdown": "**\\[Line 10\\] Opening '\\{' and closing '\\}' should be in the same column**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "2e7b332e-7583-3354-8e71-107e9cc89c08" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "CODSTA-MCPP-08_b", "level": "error", "message": { "text": "The return type of the 'getPosition' function should be declared as 'auto&'", "markdown": "**\\[Line 10\\] The return type of the 'getPosition' function should be declared as 'auto&'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "2f572748-a65d-3614-891e-feff7677ef6f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'getPosition' function is not preceded by a comment", "markdown": "**\\[Line 10\\] The definition of the 'getPosition' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "06ed9f30-83ce-3a49-b97c-e3b9614c150f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'getPosition' function is not preceded by a comment", "markdown": "**\\[Line 10\\] The definition of the 'getPosition' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "750469c7-49b4-3b86-a704-381ea6e8cb84" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'getPosition' should be composed only of lowercase letters", "markdown": "**\\[Line 10\\] The name 'getPosition' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "36797277-d69b-392d-bb9d-ea05786d695f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'getPosition' should be composed only of lowercase letters", "markdown": "**\\[Line 10\\] The name 'getPosition' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "c87c89b7-801e-3a16-9b0c-5560c1007e89" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'getPosition' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 10\\] The 'getPosition' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "81822dee-a897-3222-b0a7-3318669f7f60" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'getPosition' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 10\\] The 'getPosition' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "d5b46b7f-98d1-38c4-8305-59be6bd432f4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'getPosition' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 10\\] The 'getPosition' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "2e925d26-219a-3d68-8831-17d6196bd16d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'getPosition' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 10\\] The 'getPosition' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "54e59886-9a7a-36d7-95b1-bd2ca7c772a7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "AUTOSAR-A15_4_4-a", "level": "error", "message": { "text": "The 'getPosition' function should be declared 'noexcept'", "markdown": "**\\[Line 10\\] The 'getPosition' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "29dcd4ed-6dfa-3848-96ee-4710f914d5b8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-MCPP-09", "level": "warning", "message": { "text": "The 'getPosition' function should be declared 'noexcept'", "markdown": "**\\[Line 10\\] The 'getPosition' function should be declared 'noexcept'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "e6e0edcb-ef44-30b6-b543-ae11d8280fe0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "FORMAT-28", "level": "warning", "message": { "text": "Return type is not placed in line before function 'getPosition'", "markdown": "**\\[Line 10\\] Return type is not placed in line before function 'getPosition'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "ad190f2c-ce07-3588-9955-c65de86728fa" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'getPosition' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 10\\] Function 'getPosition' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "e29a3a78-690f-38ec-a6d1-711a2a3c8cde" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'getPosition' has Essential Complexity value: 1", "markdown": "**\\[Line 10\\] Function 'getPosition' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "36a735e5-007c-31c9-a2c0-9afc11a4d3a4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "NAMING-17", "level": "warning", "message": { "text": "Naming convention not followed: getPosition", "markdown": "**\\[Line 10\\] Naming convention not followed: getPosition**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "90ae4e93-15f4-3b4e-ba2d-42af2eefbe23" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-CPP-06", "level": "warning", "message": { "text": "Member function 'getPosition' returns handles to member data: '_position'", "markdown": "**\\[Line 10\\] Member function 'getPosition' returns handles to member data: '\\_position'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "2dbd6e39-7888-3789-b273-09519232af39" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "MISRA2008-9_3_2_b", "level": "error", "message": { "text": "Public member function 'getPosition' returns non-const handles to member data: '_position'", "markdown": "**\\[Line 10\\] Public member function 'getPosition' returns non\\-const handles to member data: '\\_position'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "e8da5cb3-a8fd-3d24-a544-c51f5f63b51b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "HICPP-9_1_4-a", "level": "warning", "message": { "text": "Public member function 'getPosition' returns non-const handles to member data: '_position'", "markdown": "**\\[Line 10\\] Public member function 'getPosition' returns non\\-const handles to member data: '\\_position'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "46624a09-a63b-38c5-a982-81947c717e34" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "AUTOSAR-A9_3_1-a", "level": "error", "message": { "text": "Public member function 'getPosition' returns non-const handles to member data: '_position'", "markdown": "**\\[Line 10\\] Public member function 'getPosition' returns non\\-const handles to member data: '\\_position'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "f4da53a5-8f94-340f-9ef5-ea1eae215355" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "OOP-36", "level": "warning", "message": { "text": "Public member function 'getPosition' returns non-const handles to member data: '_position'", "markdown": "**\\[Line 10\\] Public member function 'getPosition' returns non\\-const handles to member data: '\\_position'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "8f06ccb3-abfb-3bc4-8ba9-e1c5fd0ead85" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "FORMAT-25_b", "level": "warning", "message": { "text": "'return' statement should be used with parenthesis", "markdown": "**\\[Line 10\\] 'return' statement should be used with parenthesis**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "0ef51933-5d6a-3fdb-bebb-a87479243baf" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 10\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "45ced668-63c0-35c2-b63e-0987534562e8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 46, "endColumn": 47 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 10\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "dd9a7547-e932-3f47-a6de-8243142b3e9f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 46, "endColumn": 47 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 10\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "67039d57-c2c0-3e9b-8ba5-d228be5b1a4a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 46, "endColumn": 47 } } } ] }, { "ruleId": "FORMAT-03", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 10\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-1486716559", "unbViolId": "2ed06b23-82fb-3693-8e4d-51e00d96c0c6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 10, "startColumn": 46, "endColumn": 47 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 12\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "1d3de210-1efe-3f94-bb48-22b74b9d7678" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 12\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "37a38867-57d4-344f-96ef-a893ab84c023" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 12\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "8c3f5c00-ee30-3a0c-be28-fd86ffd37b40" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 12\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "a3020c1b-47c7-33ec-b969-1e3420b3fc17" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-43", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 12\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "f84ab3f3-4d65-3d13-bd18-d91f8e268f76" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_b", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 12\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "7bdc82c6-40cd-3588-be4b-f9e328e7bf5a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'Shape' function is not preceded by a comment", "markdown": "**\\[Line 12\\] The definition of the 'Shape' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "1482de85-97d6-3d5f-bfb0-35f523524d53" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'Shape' function is not preceded by a comment", "markdown": "**\\[Line 12\\] The definition of the 'Shape' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "69056115-478a-3b59-8387-8c5495e9ddd4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'Shape' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 12\\] The 'Shape' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "c23b9ad1-1ac1-3d17-b372-b783ffb6c673" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'Shape' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 12\\] The 'Shape' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "bee745a2-0c89-386d-81f5-6b806decbcd4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 12\\] The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "2d8aefda-5bfc-392a-9b69-35498cb902e9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 12\\] The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "a823fdae-6877-3bef-b7de-4a3138aafa0a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "OPT-17", "level": "warning", "message": { "text": "Class 'Shape' defines an inline constructor", "markdown": "**\\[Line 12\\] Class 'Shape' defines an inline constructor**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "1cb0b3d8-27f1-39e0-9268-418a8933a9f9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-177_b", "level": "warning", "message": { "text": "Constructor 'Shape' allowing conversion should be made explicit", "markdown": "**\\[Line 12\\] Constructor 'Shape' allowing conversion should be made explicit**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "a27ab4bd-963f-38f9-9847-c23cab11dc6e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "CODSTA-CPP-04", "level": "error", "message": { "text": "Constructor 'Shape' allowing conversion should be made explicit", "markdown": "**\\[Line 12\\] Constructor 'Shape' allowing conversion should be made explicit**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "b561611c-a05e-3147-8bbb-5f6f7d9140a3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-12_1_1-a", "level": "error", "message": { "text": "Constructor 'Shape' allowing conversion should be made explicit", "markdown": "**\\[Line 12\\] Constructor 'Shape' allowing conversion should be made explicit**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "68ad3d4b-a074-3b27-97f6-3105758f6e26" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'Shape' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 12\\] Function 'Shape' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "f94fcfea-1b76-3f01-a536-5983038694b0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'Shape' has Essential Complexity value: 1", "markdown": "**\\[Line 12\\] Function 'Shape' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "7362bc9e-b0d2-369b-8c3a-035c6f9773fe" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2012-RULE-5_7_a", "level": "error", "message": { "text": "The 'Shape' identifier is the same as the name of a type defined in the testing scope", "markdown": "**\\[Line 12\\] The 'Shape' identifier is the same as the name of a type defined in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "8bbbfcaa-fff7-3abc-ba72-f3b762b835c5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRAC2012-RULE_5_7-a", "level": "error", "message": { "text": "The 'Shape' identifier is the same as the name of a type defined in the testing scope", "markdown": "**\\[Line 12\\] The 'Shape' identifier is the same as the name of a type defined in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "a315ee46-f96b-356d-af39-2eb887fe4ff7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'position' differs only by presence\/absence of the underscore character from identifier '_position' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 12\\] The identifier 'position' differs only by presence\/absence of the underscore character from identifier '\\_position' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "087e2b81-1c52-30c5-8344-1465bbeec4ab" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'position' differs only by presence\/absence of the underscore character from identifier '_position' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 12\\] The identifier 'position' differs only by presence\/absence of the underscore character from identifier '\\_position' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "1954add2-8f5f-31e9-84f9-b8509ab05841" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "MISRA2008-2_10_1", "level": "error", "message": { "text": "Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '_position' declared in class", "markdown": "**\\[Line 12\\] Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '\\_position' declared in class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "751b92e5-bf2a-3fa0-970b-9136e9f1a04c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "HICPP-2_4_1-a", "level": "warning", "message": { "text": "Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '_position' declared in class", "markdown": "**\\[Line 12\\] Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '\\_position' declared in class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "fe186676-38cc-3d9c-8bff-e5c78aefa75c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "AUTOSAR-M2_10_1-a", "level": "error", "message": { "text": "Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '_position' declared in class", "markdown": "**\\[Line 12\\] Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '\\_position' declared in class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "c18a17a1-575d-399b-8cca-6cfc31c8bafd" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "NAMING-47", "level": "warning", "message": { "text": "Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '_position' declared in class", "markdown": "**\\[Line 12\\] Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '\\_position' declared in class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "6e0f98a0-4708-39df-b100-683b33e4826a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "OPT-14", "level": "warning", "message": { "text": "The parameter 'position' of function 'Shape' is passed by value", "markdown": "**\\[Line 12\\] The parameter 'position' of function 'Shape' is passed by value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "b0e5e415-25f3-325d-a727-a970a7413b33" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "JSF-125_a", "level": "warning", "message": { "text": "The parameter 'position' of function 'Shape' is passed by value", "markdown": "**\\[Line 12\\] The parameter 'position' of function 'Shape' is passed by value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "cb232613-6ed4-3896-a77c-cf708279647a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "JSF-117", "level": "warning", "message": { "text": "The parameter 'position' of function 'Shape' is passed by value", "markdown": "**\\[Line 12\\] The parameter 'position' of function 'Shape' is passed by value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "ee970f79-70fa-38a2-bad4-3f7411575f43" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 17, "endColumn": 18 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 12\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "73d492f9-92ed-30ee-b64a-479a7003e176" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 12\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "18e61cdc-6a75-35b8-aa65-d95f7fa8e2db" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 12\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "469057311", "unbViolId": "2b3732eb-41da-3d58-88f1-cead602129d3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 12, "startColumn": 50, "endColumn": 51 } } } ] }, { "ruleId": "FORMAT-02", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 15\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "80d2de92-f02b-3711-80a8-478d8f92f567" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-34", "level": "warning", "message": { "text": "Opening '{' and closing '}' should be in the same column", "markdown": "**\\[Line 15\\] Opening '\\{' and closing '\\}' should be in the same column**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "d75de1d4-a7a2-3de1-9d46-c35938deb1c8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-098", "level": "warning", "message": { "text": "Do not declare the 'LineSegment' type in the global namespace", "markdown": "**\\[Line 15\\] Do not declare the 'LineSegment' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "0c2e9fd3-ca5f-3363-9738-8d698940f9cd" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-M7_3_1-a", "level": "error", "message": { "text": "Do not declare the 'LineSegment' type in the global namespace", "markdown": "**\\[Line 15\\] Do not declare the 'LineSegment' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "1ec88c18-59ca-3881-a768-36a97c443ea2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-36", "level": "warning", "message": { "text": "Do not declare the 'LineSegment' type in the global namespace", "markdown": "**\\[Line 15\\] Do not declare the 'LineSegment' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "bb255561-5b51-3283-874d-ae0d72af8ea9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2008-7_3_1", "level": "error", "message": { "text": "Do not declare the 'LineSegment' type in the global namespace", "markdown": "**\\[Line 15\\] Do not declare the 'LineSegment' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "52dd74b6-6261-35a5-b0ee-f94cc1ef5ed7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The declaration of the 'LineSegment' type should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 15\\] The declaration of the 'LineSegment' type should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "406c86d8-8e24-3a8e-b44b-111256c090f1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The declaration of the 'LineSegment' type should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 15\\] The declaration of the 'LineSegment' type should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "a5d51726-82aa-37c3-9292-509352ad4855" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-057_a", "level": "warning", "message": { "text": "Public section must be before protected and private sections", "markdown": "**\\[Line 15\\] Public section must be before protected and private sections**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "3fc7740d-445f-3e56-ac0c-3953473c6f5b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-46", "level": "warning", "message": { "text": "Public section must be before protected and private sections", "markdown": "**\\[Line 15\\] Public section must be before protected and private sections**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "decd64cc-cdd1-3406-82b2-e18671278e03" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A12_4_2-a", "level": "warning", "message": { "text": "Class 'LineSegment' should be final", "markdown": "**\\[Line 15\\] Class 'LineSegment' should be final**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "9c12b731-ce0a-3e9e-be23-d798840aed48" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-MCPP-23", "level": "warning", "message": { "text": "Class 'LineSegment' should be final", "markdown": "**\\[Line 15\\] Class 'LineSegment' should be final**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "6550452e-8208-3f3c-97c4-04c2af9b14f0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare default constructor in 'LineSegment'", "markdown": "**\\[Line 15\\] Explicitly declare default constructor in 'LineSegment'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "a94d4a08-92a3-3b25-beca-ac5fc1f80c10" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare destructor in 'LineSegment'", "markdown": "**\\[Line 15\\] Explicitly declare destructor in 'LineSegment'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "7fcb41a1-645e-3341-acdf-e7baf2dda793" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare copy assignment operator in 'LineSegment'", "markdown": "**\\[Line 15\\] Explicitly declare copy assignment operator in 'LineSegment'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "ad8246a5-51fa-3b72-b41b-cf8ade5cc852" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare move assignment operator in 'LineSegment'", "markdown": "**\\[Line 15\\] Explicitly declare move assignment operator in 'LineSegment'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "3ce889a6-ec86-351f-80f1-41b39a30737b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare copy constructor in 'LineSegment'", "markdown": "**\\[Line 15\\] Explicitly declare copy constructor in 'LineSegment'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "03e304f7-5cd4-3792-8a72-13d798120de7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare move constructor in 'LineSegment'", "markdown": "**\\[Line 15\\] Explicitly declare move constructor in 'LineSegment'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "071a153a-e72c-3249-b47b-0304d1d3c1f9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-04", "level": "warning", "message": { "text": "Class 'LineSegment' missing assignment operator or special comment", "markdown": "**\\[Line 15\\] Class 'LineSegment' missing assignment operator or special comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "5c5e7ab1-8545-3e89-9765-3d1f234e4b33" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-05", "level": "warning", "message": { "text": "Class 'LineSegment' missing copy constructor or special comment", "markdown": "**\\[Line 15\\] Class 'LineSegment' missing copy constructor or special comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "73253361-9010-3c18-b29b-764ad4b86fcb" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-47", "level": "warning", "message": { "text": "Class 'LineSegment' missing assignment operator or special comment", "markdown": "**\\[Line 15\\] Class 'LineSegment' missing assignment operator or special comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "4b548deb-b086-30a5-8c2d-e314ce57f206" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-48", "level": "warning", "message": { "text": "Class 'LineSegment' missing copy constructor or special comment", "markdown": "**\\[Line 15\\] Class 'LineSegment' missing copy constructor or special comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "6d6d45cb-6b51-3709-af44-5de2c7ceb036" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-40", "level": "warning", "message": { "text": "All letters beside the first one in name 'LineSegment' should be lowercase", "markdown": "**\\[Line 15\\] All letters beside the first one in name 'LineSegment' should be lowercase**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "68e9ffe3-192f-3809-a67e-d1bca4fe9652" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "NAMING-HN-19", "level": "warning", "message": { "text": "The 'LineSegment' identifier should have the 'C' prefix", "markdown": "**\\[Line 15\\] The 'LineSegment' identifier should have the 'C' prefix**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "633e1ffb-0e28-3023-8f80-b22e39f24dc1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "OOP-23", "level": "error", "message": { "text": "Class 'LineSegment' has virtual functions without a virtual destructor", "markdown": "**\\[Line 15\\] Class 'LineSegment' has virtual functions without a virtual destructor**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "89814d35-53f3-31ee-aa6a-2d59321a120f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2012-RULE-5_7_a", "level": "error", "message": { "text": "The type name 'LineSegment' is not a unique identifier in the testing scope", "markdown": "**\\[Line 15\\] The type name 'LineSegment' is not a unique identifier in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "3920f1e0-8640-3dff-a577-70b053e22c5a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRAC2012-RULE_5_7-a", "level": "error", "message": { "text": "The type name 'LineSegment' is not a unique identifier in the testing scope", "markdown": "**\\[Line 15\\] The type name 'LineSegment' is not a unique identifier in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "294789a4-620c-3720-9492-610876acec8c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A0_1_6-a", "level": "warning", "message": { "text": "A declaration of the 'LineSegment' type which is not used has been found", "markdown": "**\\[Line 15\\] A declaration of the 'LineSegment' type which is not used has been found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "ee4e4903-1744-398c-9ab9-4830d0907d49" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "GLOBAL-UNUSEDTYPE", "level": "warning", "message": { "text": "A declaration of the 'LineSegment' type which is not used has been found", "markdown": "**\\[Line 15\\] A declaration of the 'LineSegment' type which is not used has been found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "5c52b6e1-6d7b-3f5d-8f29-5de460dac0af" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2008-0_1_5", "level": "error", "message": { "text": "A declaration of the 'LineSegment' type which is not used has been found", "markdown": "**\\[Line 15\\] A declaration of the 'LineSegment' type which is not used has been found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-769770316", "unbViolId": "56638789-fca1-3f64-af5c-d5d5b51549a2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 15, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 16\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1606009158", "unbViolId": "66d094c8-3900-3e24-a7be-86378ed2c3f3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 16\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1606009158", "unbViolId": "f6acba3a-8ccb-3f80-81e8-3fbd0c4b63fc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 16\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1606009158", "unbViolId": "41a0a7c2-27a0-36f5-bad4-c076bdc1439b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier '_end' differs only by presence\/absence of the underscore character from identifier 'end' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 16\\] The identifier '\\_end' differs only by presence\/absence of the underscore character from identifier 'end' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1606009158", "unbViolId": "ffc20488-3559-3618-b9d2-5e863f3120b6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier '_end' differs only by presence\/absence of the underscore character from identifier 'end' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 16\\] The identifier '\\_end' differs only by presence\/absence of the underscore character from identifier 'end' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1606009158", "unbViolId": "b76ac6c5-2e0d-3667-85d5-2965920d3774" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "OPT-05", "level": "warning", "message": { "text": "Private member variable '_end' is declared but not used", "markdown": "**\\[Line 16\\] Private member variable '\\_end' is declared but not used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1606009158", "unbViolId": "c21040be-cf8f-3b66-8d3a-cbc7e19fcb74" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-M0_1_3-c", "level": "error", "message": { "text": "Private member variable '_end' is declared but not used", "markdown": "**\\[Line 16\\] Private member variable '\\_end' is declared but not used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1606009158", "unbViolId": "44161e51-9ddf-3753-8be4-6f3856cbcbf8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "MISRA2008-0_1_3_c", "level": "error", "message": { "text": "Private member variable '_end' is declared but not used", "markdown": "**\\[Line 16\\] Private member variable '\\_end' is declared but not used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1606009158", "unbViolId": "8af7ce29-dd68-3691-8857-bd1387efc499" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The '_end' member variable should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 16\\] The '\\_end' member variable should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1606009158", "unbViolId": "25a73682-0262-33a4-8f31-49cdd66c02a4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The '_end' member variable should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 16\\] The '\\_end' member variable should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1606009158", "unbViolId": "5cf37349-c93e-3e69-8eda-7259db0a36d5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-07", "level": "warning", "message": { "text": "Member variable '_end' shall begin with a lowercase letter", "markdown": "**\\[Line 16\\] Member variable '\\_end' shall begin with a lowercase letter**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1606009158", "unbViolId": "fa9964fd-d4ca-3251-ab4d-d22025d11db5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-14", "level": "warning", "message": { "text": "Naming convention not followed: _end", "markdown": "**\\[Line 16\\] Naming convention not followed: \\_end**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1606009158", "unbViolId": "9208de3e-b2ef-35db-b470-6891f6a0a581" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-33", "level": "warning", "message": { "text": "Using underscore at the beginning of the name '_end' is not allowed", "markdown": "**\\[Line 16\\] Using underscore at the beginning of the name '\\_end' is not allowed**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1606009158", "unbViolId": "0df6e812-3987-37be-a2be-471f62183b3c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-047", "level": "warning", "message": { "text": "Using underscore at the beginning of the name '_end' is not allowed", "markdown": "**\\[Line 16\\] Using underscore at the beginning of the name '\\_end' is not allowed**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1606009158", "unbViolId": "cfd958b0-0af9-3bb5-9665-a8c3f6b9fc2f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "NAMING-HN-29", "level": "warning", "message": { "text": "The '_end' identifier should have the 'm_' prefix", "markdown": "**\\[Line 16\\] The '\\_end' identifier should have the 'm\\_' prefix**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1606009158", "unbViolId": "7ebb8707-3693-3584-b736-ad5271f41869" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 16, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 18\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "d1776885-8846-3480-91ed-ebe9b11f3bcf" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 18\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "90c1c35f-1013-37ce-a052-223ca346e51c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 18\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "5b7d9003-7257-3109-866c-8acaccbe0b5c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 18\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "4bc136f8-e9d9-314e-ae28-d4673ffa1fd7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-43", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 18\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "81f21332-60f9-35ef-89f2-8167affffbc9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_b", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 18\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "a1a9d2b0-c652-3955-8d01-96e9baef8708" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'LineSegment' function is not preceded by a comment", "markdown": "**\\[Line 18\\] The definition of the 'LineSegment' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "e0d65eea-cd55-3531-be52-d1c1e2cc6a69" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'LineSegment' function is not preceded by a comment", "markdown": "**\\[Line 18\\] The definition of the 'LineSegment' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "27eea76b-c016-3116-aae7-6ad74ebece83" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'LineSegment' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 18\\] The 'LineSegment' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "c8d44565-3731-379c-a67d-6d4fdda3b441" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'LineSegment' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 18\\] The 'LineSegment' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "0f1c465d-032d-325a-b262-44741b95d239" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 18\\] The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "1ea7fe8a-b45c-397d-8a03-3c96341d6cab" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 18\\] The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "67c190dc-bcbd-31bc-9721-937089dfeb87" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'end' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 18\\] The 'end' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "14654ca0-ee46-3b5f-9a9b-2b4092f6ba84" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'end' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 18\\] The 'end' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "ff77c9b1-f2ff-3725-882d-c1e2c0b85472" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "OPT-17", "level": "warning", "message": { "text": "Class 'LineSegment' defines an inline constructor", "markdown": "**\\[Line 18\\] Class 'LineSegment' defines an inline constructor**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "c54b9f21-dcc6-33ec-9658-c520083ac099" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'LineSegment' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 18\\] Function 'LineSegment' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "451c279d-291c-37fd-ab02-c44ec8f3b733" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'LineSegment' has Essential Complexity value: 1", "markdown": "**\\[Line 18\\] Function 'LineSegment' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "f07a42d5-be93-35e6-a49a-8d339ddf4610" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2012-RULE-5_7_a", "level": "error", "message": { "text": "The 'LineSegment' identifier is the same as the name of a type defined in the testing scope", "markdown": "**\\[Line 18\\] The 'LineSegment' identifier is the same as the name of a type defined in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "ea0c8331-3090-34a2-98dc-735aaac56911" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRAC2012-RULE_5_7-a", "level": "error", "message": { "text": "The 'LineSegment' identifier is the same as the name of a type defined in the testing scope", "markdown": "**\\[Line 18\\] The 'LineSegment' identifier is the same as the name of a type defined in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "c5556f51-fca6-380d-8b65-e9649943f3c8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "GLOBAL-UNUSEDFUNC", "level": "warning", "message": { "text": "The 'LineSegment' function is not used in the testing scope", "markdown": "**\\[Line 18\\] The 'LineSegment' function is not used in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "1fc1902c-13f4-3f5b-96cf-c0ff9fdfb187" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-M0_1_10-a", "level": "warning", "message": { "text": "The 'LineSegment' function is not used in the testing scope", "markdown": "**\\[Line 18\\] The 'LineSegment' function is not used in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "bcb1f883-46a6-32a0-9297-b26f1902595f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2008-0_1_10_b", "level": "error", "message": { "text": "The 'LineSegment' function is not used in the testing scope", "markdown": "**\\[Line 18\\] The 'LineSegment' function is not used in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "995a4ac2-3450-371a-9546-9c3bd3daeec5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'position' differs only by presence\/absence of the underscore character from identifier '_position' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 18\\] The identifier 'position' differs only by presence\/absence of the underscore character from identifier '\\_position' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "9e5fb71c-a367-385c-98c7-3d6a5da80068" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 23, "endColumn": 24 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'position' differs only by presence\/absence of the underscore character from identifier '_position' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 18\\] The identifier 'position' differs only by presence\/absence of the underscore character from identifier '\\_position' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "66a9da7b-5aee-32dc-8b24-f98be9c05496" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 23, "endColumn": 24 } } } ] }, { "ruleId": "MISRA2008-2_10_1", "level": "error", "message": { "text": "Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '_position' declared in base class", "markdown": "**\\[Line 18\\] Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '\\_position' declared in base class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "1cad702e-a3e3-3ee3-ba4b-3193da80b26a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 23, "endColumn": 24 } } } ] }, { "ruleId": "HICPP-2_4_1-a", "level": "warning", "message": { "text": "Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '_position' declared in base class", "markdown": "**\\[Line 18\\] Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '\\_position' declared in base class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "f9fa068f-3203-3b2a-9255-3886d7e72bc8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 23, "endColumn": 24 } } } ] }, { "ruleId": "AUTOSAR-M2_10_1-a", "level": "error", "message": { "text": "Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '_position' declared in base class", "markdown": "**\\[Line 18\\] Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '\\_position' declared in base class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "9a8a7dfa-8b56-3cbd-a3ed-992558eb2ada" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 23, "endColumn": 24 } } } ] }, { "ruleId": "NAMING-47", "level": "warning", "message": { "text": "Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '_position' declared in base class", "markdown": "**\\[Line 18\\] Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '\\_position' declared in base class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "fccad6f4-82bb-31cf-ac0d-1a803f95cf72" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 23, "endColumn": 24 } } } ] }, { "ruleId": "OPT-14", "level": "warning", "message": { "text": "The parameter 'position' of function 'LineSegment' is passed by value", "markdown": "**\\[Line 18\\] The parameter 'position' of function 'LineSegment' is passed by value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "12bbf2f6-c258-39e2-8ac8-3cb9ef0a2602" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 23, "endColumn": 24 } } } ] }, { "ruleId": "JSF-125_a", "level": "warning", "message": { "text": "The parameter 'position' of function 'LineSegment' is passed by value", "markdown": "**\\[Line 18\\] The parameter 'position' of function 'LineSegment' is passed by value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "5cba6b78-9b94-36ea-bbe5-fc32b03f62fb" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 23, "endColumn": 24 } } } ] }, { "ruleId": "JSF-117", "level": "warning", "message": { "text": "The parameter 'position' of function 'LineSegment' is passed by value", "markdown": "**\\[Line 18\\] The parameter 'position' of function 'LineSegment' is passed by value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "4d5e6de2-5c09-342e-a2bd-e79db739f17a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 23, "endColumn": 24 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'end' differs only by presence\/absence of the underscore character from identifier '_end' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 18\\] The identifier 'end' differs only by presence\/absence of the underscore character from identifier '\\_end' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "fcbc09de-d1b9-3e66-8a4c-d0e32005dfe2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'end' differs only by presence\/absence of the underscore character from identifier '_end' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 18\\] The identifier 'end' differs only by presence\/absence of the underscore character from identifier '\\_end' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "35bdeb54-714c-33c1-854b-83651a663d03" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "MISRA2008-2_10_1", "level": "error", "message": { "text": "Identifier name: 'end' differs only by presence\/absence of the underscore character from identifier name: '_end' declared in class", "markdown": "**\\[Line 18\\] Identifier name: 'end' differs only by presence\/absence of the underscore character from identifier name: '\\_end' declared in class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "d907a690-1b4b-343a-9740-7d7e7c2a0a57" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "HICPP-2_4_1-a", "level": "warning", "message": { "text": "Identifier name: 'end' differs only by presence\/absence of the underscore character from identifier name: '_end' declared in class", "markdown": "**\\[Line 18\\] Identifier name: 'end' differs only by presence\/absence of the underscore character from identifier name: '\\_end' declared in class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "a9253846-e6a6-31a9-b807-55346f81b6d9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "AUTOSAR-M2_10_1-a", "level": "error", "message": { "text": "Identifier name: 'end' differs only by presence\/absence of the underscore character from identifier name: '_end' declared in class", "markdown": "**\\[Line 18\\] Identifier name: 'end' differs only by presence\/absence of the underscore character from identifier name: '\\_end' declared in class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "452a95f6-221e-3cce-9b98-4d28ece42ce4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "NAMING-47", "level": "warning", "message": { "text": "Identifier name: 'end' differs only by presence\/absence of the underscore character from identifier name: '_end' declared in class", "markdown": "**\\[Line 18\\] Identifier name: 'end' differs only by presence\/absence of the underscore character from identifier name: '\\_end' declared in class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "a7ca8290-3988-3a5f-bc65-641cbc4f1ad1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "OPT-14", "level": "warning", "message": { "text": "The parameter 'end' of function 'LineSegment' is passed by value", "markdown": "**\\[Line 18\\] The parameter 'end' of function 'LineSegment' is passed by value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "c0c2c002-bb9c-3622-9fdd-79c05f2db612" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "JSF-125_a", "level": "warning", "message": { "text": "The parameter 'end' of function 'LineSegment' is passed by value", "markdown": "**\\[Line 18\\] The parameter 'end' of function 'LineSegment' is passed by value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "60f23378-f0a2-3f97-a56f-0f360b26bd25" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "JSF-117", "level": "warning", "message": { "text": "The parameter 'end' of function 'LineSegment' is passed by value", "markdown": "**\\[Line 18\\] The parameter 'end' of function 'LineSegment' is passed by value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "0d3efd6f-d3dd-39a6-a037-460e122c7d2c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 39, "endColumn": 40 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 18\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "b01185c6-6b22-390e-b300-9bc74f707e19" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 74, "endColumn": 75 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 18\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "9d25a33e-5543-35a9-9b13-55858d744f27" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 74, "endColumn": 75 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 18\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "460467427", "unbViolId": "5fc78301-0363-3062-b29a-d73327f7a6fb" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 18, "startColumn": 74, "endColumn": 75 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 19\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "58c4f738-6a3c-338c-937a-9f61f2cfde81" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 19\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "388c5041-1179-3f63-851f-44d755ba62dc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 19\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "b57b6b1f-e049-3263-ab6d-38469b2f9f03" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 19\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "be9aab62-c11c-3bb9-8bdf-a2dbea9c2e23" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-43", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 19\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "40a7e129-d922-36d5-b149-810b8e947e7d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_b", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 19\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "bd307e11-0cbb-3cb2-a51e-9b1022da460c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-02", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 19\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "1c1f608b-c187-3d7c-ad99-79524ff30e21" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-34", "level": "warning", "message": { "text": "Opening '{' and closing '}' should be in the same column", "markdown": "**\\[Line 19\\] Opening '\\{' and closing '\\}' should be in the same column**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "b75c7393-466b-3423-9026-d47a0ba760f1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "377d51a3-4bec-3bab-a4d0-fd8faf567ed6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "6880b27c-758c-3d50-8a3c-8e1a93cc5d7c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "148ea6a9-4939-34bc-ba3a-fe2ac7eb929b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "a37978d9-7c52-3646-abf2-91d3886a5f6a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "d297635d-092e-3e57-bff5-79188e2f9c3a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "00498598-2f95-3952-bd0b-d84d116f9068" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 19\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "5673946f-bb15-3b0c-bc9a-2db2c6a27f3d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'getArea' function is not preceded by a comment", "markdown": "**\\[Line 19\\] The definition of the 'getArea' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "7a33bddc-a0b7-3bd4-a56f-59580ae932fb" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'getArea' function is not preceded by a comment", "markdown": "**\\[Line 19\\] The definition of the 'getArea' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "2d3e0c1c-fc71-3d37-9170-d1e4760862e5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'getArea' should be composed only of lowercase letters", "markdown": "**\\[Line 19\\] The name 'getArea' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "abf110eb-344a-3f8e-871c-3e8d7e368baf" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'getArea' should be composed only of lowercase letters", "markdown": "**\\[Line 19\\] The name 'getArea' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "a19f6dfa-fd8c-34e8-bb59-15640a5ec490" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'getArea' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 19\\] The 'getArea' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "f06581a1-91e3-30b0-a19c-7c0814c96f27" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'getArea' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 19\\] The 'getArea' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "69d833dd-001b-32d7-89c1-632e7a2a4407" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'getArea' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 19\\] The 'getArea' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "6e727f0e-591d-3a30-8735-9dee60481c29" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'getArea' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 19\\] The 'getArea' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "ce1e24b6-10c8-30d5-aab6-3ad3780c698d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-CPP-25", "level": "warning", "message": { "text": "Make virtual functions nonpublic, and public functions nonvirtual: getArea", "markdown": "**\\[Line 19\\] Make virtual functions nonpublic, and public functions nonvirtual: getArea**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "3f1af7cb-9c1a-3fc6-aff1-3111410e299e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-MCPP-05", "level": "warning", "message": { "text": "The 'getArea' function should be declared with the 'override' specifier", "markdown": "**\\[Line 19\\] The 'getArea' function should be declared with the 'override' specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "7dc3f884-7165-3c87-aa67-b86d10ea3d2d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "AUTOSAR-A10_3_2-a", "level": "error", "message": { "text": "The 'getArea' function should be declared with the 'override' specifier", "markdown": "**\\[Line 19\\] The 'getArea' function should be declared with the 'override' specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "741313b5-d04d-3528-876c-71f025b6157c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "HICPP-10_2_1-a", "level": "warning", "message": { "text": "The 'getArea' function should be declared with the 'override' specifier", "markdown": "**\\[Line 19\\] The 'getArea' function should be declared with the 'override' specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "33291f2c-9d13-3342-9a02-2753585b7000" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-MCPP-24", "level": "warning", "message": { "text": "Declaration of virtual function 'getArea' should have 'override' or 'final' specifier", "markdown": "**\\[Line 19\\] Declaration of virtual function 'getArea' should have 'override' or 'final' specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "b53ad0f5-b828-3887-b82a-45928148f762" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "AUTOSAR-A10_3_1-a", "level": "error", "message": { "text": "Declaration of virtual function 'getArea' should have 'override' or 'final' specifier", "markdown": "**\\[Line 19\\] Declaration of virtual function 'getArea' should have 'override' or 'final' specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "d778bc63-3eb5-3818-83d9-46b2a64f868d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "FORMAT-28", "level": "warning", "message": { "text": "Return type is not placed in line before function 'getArea'", "markdown": "**\\[Line 19\\] Return type is not placed in line before function 'getArea'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "886fcfcc-6708-3d2c-97a7-834431a35cba" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'getArea' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 19\\] Function 'getArea' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "0a6422a9-f49a-3446-b412-206b7b7241f3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'getArea' has Essential Complexity value: 1", "markdown": "**\\[Line 19\\] Function 'getArea' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "37404e66-4722-3302-a4ee-110120e3fe69" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "NAMING-17", "level": "warning", "message": { "text": "Naming convention not followed: getArea", "markdown": "**\\[Line 19\\] Naming convention not followed: getArea**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "52abf7fa-8c4c-346f-8f3a-abfd0ce659dc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "OOP-21", "level": "warning", "message": { "text": "Use the virtual keyword for 'getArea' function", "markdown": "**\\[Line 19\\] Use the virtual keyword for 'getArea' function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "f8c75bd1-7231-3595-b8a5-23d950df974e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "MISRA2008-10_3_2", "level": "error", "message": { "text": "Use the virtual keyword for 'getArea' function", "markdown": "**\\[Line 19\\] Use the virtual keyword for 'getArea' function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "cdabebdd-9e38-3f59-b433-71436fede36b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "OOP-25", "level": "warning", "message": { "text": "Function 'getArea' is both virtual and inline", "markdown": "**\\[Line 19\\] Function 'getArea' is both virtual and inline**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "59c8e137-b87e-3161-8879-0f084f9329d9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "MISRA2008-5_0_5_b", "level": "error", "message": { "text": "Implicit conversion from integral to floating type in function's return", "markdown": "**\\[Line 19\\] Implicit conversion from integral to floating type in function's return**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "f98aa1b8-f2c1-357a-b455-030800b87952" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "CERT_C-EXP39-a", "level": "warning", "message": { "text": "Implicit conversion from integral to floating type in function's return", "markdown": "**\\[Line 19\\] Implicit conversion from integral to floating type in function's return**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "604b153c-5d79-3835-bcf2-42e8432ee6ee" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "AUTOSAR-M5_0_5-a", "level": "error", "message": { "text": "Implicit conversion from integral to floating type in function's return", "markdown": "**\\[Line 19\\] Implicit conversion from integral to floating type in function's return**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "69c79f84-cab0-3f0b-83a1-5c4452fb2823" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "MISRA2004-10_1_b", "level": "warning", "message": { "text": "Implicit conversion from integral to floating type in function's return", "markdown": "**\\[Line 19\\] Implicit conversion from integral to floating type in function's return**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "0fd33db1-49a6-3448-b8b3-5f8cfe2776b2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "PB-05", "level": "warning", "message": { "text": "Function 'getArea' has declared return type 'double' but returns value of type 'int'", "markdown": "**\\[Line 19\\] Function 'getArea' has declared return type 'double' but returns value of type 'int'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "abfa88e4-c669-3c11-b346-b4f64711e197" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "FORMAT-25_b", "level": "warning", "message": { "text": "'return' statement should be used with parenthesis", "markdown": "**\\[Line 19\\] 'return' statement should be used with parenthesis**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "442c8fa0-f379-3f3b-bc9f-aa208ca1077e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 19\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "042f77a7-8662-33fe-adfb-a584cb8fe1f2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 19\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "6f90f4ce-7bb9-3450-885d-5beae432b7e2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 19\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "da426207-548e-3bd4-b8cd-b0178e14adab" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "FORMAT-03", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 19\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-392957557", "unbViolId": "87f902f9-5bd0-387a-9bc7-4b3b939fc759" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 19, "startColumn": 40, "endColumn": 41 } } } ] }, { "ruleId": "FORMAT-02", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 22\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2093521939", "unbViolId": "e8a536c7-7af3-3602-aa51-ce1cf2d02082" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-34", "level": "warning", "message": { "text": "Opening '{' and closing '}' should be in the same column", "markdown": "**\\[Line 22\\] Opening '\\{' and closing '\\}' should be in the same column**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2093521939", "unbViolId": "0f35af01-90a6-3337-a96e-a9a76d493311" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-098", "level": "warning", "message": { "text": "Do not declare the 'Circle' type in the global namespace", "markdown": "**\\[Line 22\\] Do not declare the 'Circle' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2093521939", "unbViolId": "ff66e714-0052-3b98-822c-bdf430bd47b2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-M7_3_1-a", "level": "error", "message": { "text": "Do not declare the 'Circle' type in the global namespace", "markdown": "**\\[Line 22\\] Do not declare the 'Circle' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2093521939", "unbViolId": "a374eb68-7f87-3d2d-8a16-c4bc77e97722" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-36", "level": "warning", "message": { "text": "Do not declare the 'Circle' type in the global namespace", "markdown": "**\\[Line 22\\] Do not declare the 'Circle' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2093521939", "unbViolId": "45ea7a24-02e8-3601-a6d5-004166389f4f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2008-7_3_1", "level": "error", "message": { "text": "Do not declare the 'Circle' type in the global namespace", "markdown": "**\\[Line 22\\] Do not declare the 'Circle' type in the global namespace**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2093521939", "unbViolId": "fd601832-b4f1-3f35-8770-c9b8c1b63dd7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The declaration of the 'Circle' type should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 22\\] The declaration of the 'Circle' type should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2093521939", "unbViolId": "ca744534-22cb-33f6-b51f-29077fbb0fe1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The declaration of the 'Circle' type should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 22\\] The declaration of the 'Circle' type should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2093521939", "unbViolId": "f570ad32-cda9-3c94-9bf7-4c6cdc36d5dd" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-057_a", "level": "warning", "message": { "text": "Public section must be before protected and private sections", "markdown": "**\\[Line 22\\] Public section must be before protected and private sections**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2093521939", "unbViolId": "fe63b469-fafa-3a5a-bec5-505b78174377" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-CPP-46", "level": "warning", "message": { "text": "Public section must be before protected and private sections", "markdown": "**\\[Line 22\\] Public section must be before protected and private sections**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2093521939", "unbViolId": "28d1fb2c-32b2-3552-bd0d-b1a49eaf66df" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "AUTOSAR-A12_4_2-a", "level": "warning", "message": { "text": "Class 'Circle' should be final", "markdown": "**\\[Line 22\\] Class 'Circle' should be final**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2093521939", "unbViolId": "43556de1-3b18-320e-a763-93ee41b48dbf" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "CODSTA-MCPP-23", "level": "warning", "message": { "text": "Class 'Circle' should be final", "markdown": "**\\[Line 22\\] Class 'Circle' should be final**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2093521939", "unbViolId": "946c6412-eedc-3157-8dea-5c6c03ed13f8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare default constructor in 'Circle'", "markdown": "**\\[Line 22\\] Explicitly declare default constructor in 'Circle'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2093521939", "unbViolId": "048e3bac-34ae-3580-834b-0cd5ef45af56" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare destructor in 'Circle'", "markdown": "**\\[Line 22\\] Explicitly declare destructor in 'Circle'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2093521939", "unbViolId": "4f470321-1d49-3507-bd0c-3e035356aff2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare copy assignment operator in 'Circle'", "markdown": "**\\[Line 22\\] Explicitly declare copy assignment operator in 'Circle'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2093521939", "unbViolId": "01561bac-685a-3a1e-897e-e563088d439a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare move assignment operator in 'Circle'", "markdown": "**\\[Line 22\\] Explicitly declare move assignment operator in 'Circle'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2093521939", "unbViolId": "897ad4cf-a296-325f-9e83-9209da39e04d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare copy constructor in 'Circle'", "markdown": "**\\[Line 22\\] Explicitly declare copy constructor in 'Circle'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2093521939", "unbViolId": "84880d79-0e32-3a51-92d2-7bf2833a3df9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "HICPP-12_5_1-a", "level": "warning", "message": { "text": "Explicitly declare move constructor in 'Circle'", "markdown": "**\\[Line 22\\] Explicitly declare move constructor in 'Circle'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2093521939", "unbViolId": "2695060d-7eaf-3130-baa6-caccdb5f42b4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-04", "level": "warning", "message": { "text": "Class 'Circle' missing assignment operator or special comment", "markdown": "**\\[Line 22\\] Class 'Circle' missing assignment operator or special comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2093521939", "unbViolId": "98d0f2d1-7dd2-3310-90f0-f1ec5fcbcb13" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-05", "level": "warning", "message": { "text": "Class 'Circle' missing copy constructor or special comment", "markdown": "**\\[Line 22\\] Class 'Circle' missing copy constructor or special comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2093521939", "unbViolId": "18a0f2d4-3c7a-3567-a658-5aea39761514" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-47", "level": "warning", "message": { "text": "Class 'Circle' missing assignment operator or special comment", "markdown": "**\\[Line 22\\] Class 'Circle' missing assignment operator or special comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2093521939", "unbViolId": "c783a5d1-f161-332d-9c07-0938857ad414" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MRM-48", "level": "warning", "message": { "text": "Class 'Circle' missing copy constructor or special comment", "markdown": "**\\[Line 22\\] Class 'Circle' missing copy constructor or special comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2093521939", "unbViolId": "7acd8a07-ac41-39df-a987-65d8ddd79d03" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "OOP-23", "level": "error", "message": { "text": "Class 'Circle' has virtual functions without a virtual destructor", "markdown": "**\\[Line 22\\] Class 'Circle' has virtual functions without a virtual destructor**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2093521939", "unbViolId": "f507ba5e-3f19-32bd-8592-2c2ba06aa080" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRA2012-RULE-5_7_a", "level": "error", "message": { "text": "The type name 'Circle' is not a unique identifier in the testing scope", "markdown": "**\\[Line 22\\] The type name 'Circle' is not a unique identifier in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2093521939", "unbViolId": "a5fa65e6-791f-36dd-8fc8-e0675d23d4e6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "MISRAC2012-RULE_5_7-a", "level": "error", "message": { "text": "The type name 'Circle' is not a unique identifier in the testing scope", "markdown": "**\\[Line 22\\] The type name 'Circle' is not a unique identifier in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "2093521939", "unbViolId": "9087185b-40f9-3567-9843-4eef4b4571ee" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 22, "startColumn": 7, "endColumn": 8 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 23\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1798682864", "unbViolId": "7eb9770f-8700-34f1-8577-7e812a8fc7b2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 23\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1798682864", "unbViolId": "2d2504ca-247c-33a9-b238-787082cf3bf1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 23\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1798682864", "unbViolId": "a501a7df-1f7c-30ac-8cfe-1a2593ed8a8f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 23\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1798682864", "unbViolId": "17a28e37-c8f0-3fdb-af96-2eb647777eec" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 23\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1798682864", "unbViolId": "76140126-36f6-3b1a-90a0-ed651791f155" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 23\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1798682864", "unbViolId": "7509863b-bd36-3231-90c7-a76a3547498c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 23\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1798682864", "unbViolId": "a9fd90ad-038a-30e7-9797-71a37e50b42e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 23\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1798682864", "unbViolId": "bbfdf631-776d-3ff6-b674-413933f2c4bf" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 23\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1798682864", "unbViolId": "ab40f2ac-91e5-34d0-9a72-4132b485afdb" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 23\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1798682864", "unbViolId": "56e2745e-665a-3f01-8b0c-27e1d2f04ff3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 2, "endColumn": 3 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier '_radius' differs only by presence\/absence of the underscore character from identifier 'radius' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 23\\] The identifier '\\_radius' differs only by presence\/absence of the underscore character from identifier 'radius' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1798682864", "unbViolId": "01f385fc-ca59-3a15-9ab1-82565d101c81" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier '_radius' differs only by presence\/absence of the underscore character from identifier 'radius' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 23\\] The identifier '\\_radius' differs only by presence\/absence of the underscore character from identifier 'radius' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1798682864", "unbViolId": "9893a8e3-3943-3436-9cd8-73e6e2e546df" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The '_radius' member variable should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 23\\] The '\\_radius' member variable should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1798682864", "unbViolId": "0fa32a6c-60e0-307e-b4c5-0e0ee49657af" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The '_radius' member variable should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 23\\] The '\\_radius' member variable should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1798682864", "unbViolId": "f458b355-9fe1-3dc0-ba59-9b1165a0481b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-07", "level": "warning", "message": { "text": "Member variable '_radius' shall begin with a lowercase letter", "markdown": "**\\[Line 23\\] Member variable '\\_radius' shall begin with a lowercase letter**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1798682864", "unbViolId": "17e4e9d7-4928-36f2-ae59-36dd761cc479" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-14", "level": "warning", "message": { "text": "Naming convention not followed: _radius", "markdown": "**\\[Line 23\\] Naming convention not followed: \\_radius**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1798682864", "unbViolId": "95fe9a00-752e-3fa3-9c17-873c5764ac48" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-15", "level": "warning", "message": { "text": "Naming convention not followed: _radius", "markdown": "**\\[Line 23\\] Naming convention not followed: \\_radius**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1798682864", "unbViolId": "c9a5730e-5031-353d-b7f9-c549d17168fa" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-33", "level": "warning", "message": { "text": "Using underscore at the beginning of the name '_radius' is not allowed", "markdown": "**\\[Line 23\\] Using underscore at the beginning of the name '\\_radius' is not allowed**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1798682864", "unbViolId": "d97d4bd5-d51c-3635-9df1-64a5224a75c2" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-047", "level": "warning", "message": { "text": "Using underscore at the beginning of the name '_radius' is not allowed", "markdown": "**\\[Line 23\\] Using underscore at the beginning of the name '\\_radius' is not allowed**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1798682864", "unbViolId": "4d45bf66-9d04-3d25-95d3-7a4c051ca59f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-HN-12", "level": "warning", "message": { "text": "The '_radius' identifier should have the 'd' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 23\\] The '\\_radius' identifier should have the 'd' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1798682864", "unbViolId": "f1dea1f8-eaaa-3dbe-bc0f-924a7c610ef3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-HN-29", "level": "warning", "message": { "text": "The '_radius' identifier should have the 'm_' prefix", "markdown": "**\\[Line 23\\] The '\\_radius' identifier should have the 'm\\_' prefix**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1798682864", "unbViolId": "83e7c063-ff6f-3147-93b2-277a369547e1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 23, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 25\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "dba38c5d-3e46-3033-83c1-3b7f232445d4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 25\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "ce877488-2f0a-3b31-aa8b-23e5ba4236fe" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 25\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "d5d7d17e-ee76-3278-b3ff-ad489ec9dff1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 25\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "ccb64748-0173-335b-b3d8-ac5b8a587cc7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-43", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 25\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "e75a7c32-e229-35af-9cb4-7c263406018b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_b", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 25\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "128e44a6-fb17-3117-8062-fbaba409e072" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'Circle' function is not preceded by a comment", "markdown": "**\\[Line 25\\] The definition of the 'Circle' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "89662892-f5f2-3764-b1f7-b7407bd7d6f8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'Circle' function is not preceded by a comment", "markdown": "**\\[Line 25\\] The definition of the 'Circle' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "9af2427c-9890-3c73-a90e-b0bff2fe7914" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'Circle' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 25\\] The 'Circle' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "6214dcfe-7d57-3ff1-a895-58e59bcf6f5c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'Circle' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 25\\] The 'Circle' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "0cedf945-d5f4-365d-815f-4fe32ad7cbfd" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 25\\] The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "77dc6268-b3f0-38f8-bc7a-a9a8ba7e22b6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 25\\] The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "d35236f0-44da-3286-8890-c76904d11983" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'radius' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 25\\] The 'radius' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "8cedc954-1bb1-3c05-a851-e08fb412c4aa" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'radius' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 25\\] The 'radius' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "d78bfce7-62c0-370e-9896-57ce75f51356" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "OPT-17", "level": "warning", "message": { "text": "Class 'Circle' defines an inline constructor", "markdown": "**\\[Line 25\\] Class 'Circle' defines an inline constructor**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "e4d0a4aa-3976-30f3-9176-21fe4ab3ae8b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'Circle' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 25\\] Function 'Circle' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "7c9e9d92-0789-39bd-a817-f6ae993a3869" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'Circle' has Essential Complexity value: 1", "markdown": "**\\[Line 25\\] Function 'Circle' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "2f60313d-40e3-3667-a8df-b4d7bc820a88" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2012-RULE-5_7_a", "level": "error", "message": { "text": "The 'Circle' identifier is the same as the name of a type defined in the testing scope", "markdown": "**\\[Line 25\\] The 'Circle' identifier is the same as the name of a type defined in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "88247940-1078-3b4a-a1fb-cc7b055de932" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRAC2012-RULE_5_7-a", "level": "error", "message": { "text": "The 'Circle' identifier is the same as the name of a type defined in the testing scope", "markdown": "**\\[Line 25\\] The 'Circle' identifier is the same as the name of a type defined in the testing scope**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "d250e9f3-b337-3267-b99a-0dd1f711b7c7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'position' differs only by presence\/absence of the underscore character from identifier '_position' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 25\\] The identifier 'position' differs only by presence\/absence of the underscore character from identifier '\\_position' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "7b95e98d-2811-3637-a0f3-09788e7200bd" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'position' differs only by presence\/absence of the underscore character from identifier '_position' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 25\\] The identifier 'position' differs only by presence\/absence of the underscore character from identifier '\\_position' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "36ede6c3-8fb1-3483-81ec-5e557a9b7822" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "MISRA2008-2_10_1", "level": "error", "message": { "text": "Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '_position' declared in base class", "markdown": "**\\[Line 25\\] Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '\\_position' declared in base class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "a36566e9-99bb-3f78-bc45-7f07d29a7594" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "HICPP-2_4_1-a", "level": "warning", "message": { "text": "Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '_position' declared in base class", "markdown": "**\\[Line 25\\] Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '\\_position' declared in base class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "0f2d1219-19a3-325e-8cb0-f4b20ff76577" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "AUTOSAR-M2_10_1-a", "level": "error", "message": { "text": "Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '_position' declared in base class", "markdown": "**\\[Line 25\\] Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '\\_position' declared in base class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "b0cac06d-81b0-36c6-a59d-8c7808fa88d9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "NAMING-47", "level": "warning", "message": { "text": "Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '_position' declared in base class", "markdown": "**\\[Line 25\\] Identifier name: 'position' differs only by presence\/absence of the underscore character from identifier name: '\\_position' declared in base class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "1fd3ad69-bae1-32a6-8cf8-c99c70c17ea4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "OPT-14", "level": "warning", "message": { "text": "The parameter 'position' of function 'Circle' is passed by value", "markdown": "**\\[Line 25\\] The parameter 'position' of function 'Circle' is passed by value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "8d93682b-da61-3dae-9d9b-8ac4221394b4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "JSF-125_a", "level": "warning", "message": { "text": "The parameter 'position' of function 'Circle' is passed by value", "markdown": "**\\[Line 25\\] The parameter 'position' of function 'Circle' is passed by value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "05839481-3f44-35cf-9682-799b76c89345" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "JSF-117", "level": "warning", "message": { "text": "The parameter 'position' of function 'Circle' is passed by value", "markdown": "**\\[Line 25\\] The parameter 'position' of function 'Circle' is passed by value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "08d49ccd-33d8-3062-b4fc-254f9c682b08" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 18, "endColumn": 19 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 25\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "0ea61706-3917-3880-9956-3be652ee712d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 25\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "064213bb-c0b2-3d24-b287-e3d0dc66d49e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 25\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "07327ab3-a365-3d03-80b9-710c81fab368" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 25\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "b8f9bd51-5387-36d0-9fc5-84b930e118d1" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 25\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "32fff5a1-95f1-34d7-93b3-548d033378b4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 25\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "504b93ec-c61e-303c-9af8-073ec78b6981" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 25\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "7eee04e1-c383-35d3-b4c0-0cacc947d105" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 28, "endColumn": 29 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'radius' differs only by presence\/absence of the underscore character from identifier '_radius' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 25\\] The identifier 'radius' differs only by presence\/absence of the underscore character from identifier '\\_radius' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "6338c86b-a897-354e-aa3b-2bd08b77d6f6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'radius' differs only by presence\/absence of the underscore character from identifier '_radius' declared in file 'Shapes.hpp'", "markdown": "**\\[Line 25\\] The identifier 'radius' differs only by presence\/absence of the underscore character from identifier '\\_radius' declared in file 'Shapes\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "e1a0f063-89be-3f62-9b92-9c600a256be3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "MISRA2008-2_10_1", "level": "error", "message": { "text": "Identifier name: 'radius' differs only by presence\/absence of the underscore character from identifier name: '_radius' declared in class", "markdown": "**\\[Line 25\\] Identifier name: 'radius' differs only by presence\/absence of the underscore character from identifier name: '\\_radius' declared in class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "f5471b1b-f6d7-30f2-9427-e45d4c3f63a3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "HICPP-2_4_1-a", "level": "warning", "message": { "text": "Identifier name: 'radius' differs only by presence\/absence of the underscore character from identifier name: '_radius' declared in class", "markdown": "**\\[Line 25\\] Identifier name: 'radius' differs only by presence\/absence of the underscore character from identifier name: '\\_radius' declared in class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "556deff1-9133-302c-a0b7-4ad618e3d509" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "AUTOSAR-M2_10_1-a", "level": "error", "message": { "text": "Identifier name: 'radius' differs only by presence\/absence of the underscore character from identifier name: '_radius' declared in class", "markdown": "**\\[Line 25\\] Identifier name: 'radius' differs only by presence\/absence of the underscore character from identifier name: '\\_radius' declared in class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "a05689bd-22b3-3572-b995-3012ddb72554" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "NAMING-47", "level": "warning", "message": { "text": "Identifier name: 'radius' differs only by presence\/absence of the underscore character from identifier name: '_radius' declared in class", "markdown": "**\\[Line 25\\] Identifier name: 'radius' differs only by presence\/absence of the underscore character from identifier name: '\\_radius' declared in class**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "de73275c-f2c3-3d45-93fd-97a1b8a73b7c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "NAMING-HN-12", "level": "warning", "message": { "text": "The 'radius' identifier should have the 'd' prefix followed by a capital letter or an underscore", "markdown": "**\\[Line 25\\] The 'radius' identifier should have the 'd' prefix followed by a capital letter or an underscore**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "a329c47a-b6d1-3b8e-9dc6-56955e616433" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 35, "endColumn": 36 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 25\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "6032e762-3f0c-399c-9ebe-8eb7229dbbb9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 79, "endColumn": 80 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 25\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "ae262775-34e0-35a5-9862-12e6d09c27c6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 79, "endColumn": 80 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 25\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "1689459350", "unbViolId": "0e1de870-9f65-3169-99ca-2e3b94907196" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 25, "startColumn": 79, "endColumn": 80 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 26\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "e86bbd18-08d2-3cec-8054-6985dc991ef8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 26\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "8094eaa4-8cb7-3a58-ad6a-e3916ec3b36b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 26\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "cd09716c-03e7-3b37-9542-59619c446ef6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 26\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "8ab272ca-b3a2-3236-9369-c79b4496441a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-43", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 26\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "4b5af99d-a80d-385e-87d5-b12054a3f589" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-060_b", "level": "warning", "message": { "text": "Opening '{' and closing '}' braces are not placed in the same column", "markdown": "**\\[Line 26\\] Opening '\\{' and closing '\\}' braces are not placed in the same column**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "01314af8-91d9-3c82-bc9e-6e1f639047c9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-02", "level": "warning", "message": { "text": "Put the opening brace '{' on its own line", "markdown": "**\\[Line 26\\] Put the opening brace '\\{' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "4546b312-ac33-35b0-af32-ed2e5ec0efe9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "FORMAT-34", "level": "warning", "message": { "text": "Opening '{' and closing '}' should be in the same column", "markdown": "**\\[Line 26\\] Opening '\\{' and closing '\\}' should be in the same column**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "248ca29e-d4de-34bf-a247-8412ea426448" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 26\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "f8037a9c-2710-3912-aff8-c52b76eb8073" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 26\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "e656d59b-c03c-35ef-8b70-99226432d06f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 26\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "7f833331-344f-35ec-ab33-b2b8d46abbbf" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 26\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "2af8fb87-7dad-32df-a79a-e6e287e74f81" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 26\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "4f1c36a3-0451-3779-9a32-7b78f6d81b2b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 26\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "58f0d3bf-0d67-312c-9abc-b435dbfe3777" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'double' should not be used", "markdown": "**\\[Line 26\\] The basic numerical type 'double' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "c9f31294-1830-3d0f-80c1-ee4a662b70ec" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'getArea' function is not preceded by a comment", "markdown": "**\\[Line 26\\] The definition of the 'getArea' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "03e821f2-f9c2-31ec-ae50-eac836d40794" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'getArea' function is not preceded by a comment", "markdown": "**\\[Line 26\\] The definition of the 'getArea' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "a04f362c-31b1-3aa4-93d4-d964fda08c2b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "JSF-051", "level": "warning", "message": { "text": "The name 'getArea' should be composed only of lowercase letters", "markdown": "**\\[Line 26\\] The name 'getArea' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "9ec3285a-8d3c-3d41-a1dd-d0fb8228cf34" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "NAMING-44", "level": "warning", "message": { "text": "The name 'getArea' should be composed only of lowercase letters", "markdown": "**\\[Line 26\\] The name 'getArea' should be composed only of lowercase letters**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "bbb38207-a5e4-38f1-990a-fd478b185f22" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'getArea' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 26\\] The 'getArea' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "f527207f-6aa5-3ade-bc0b-3432d6f54fd7" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'getArea' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 26\\] The 'getArea' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "b96aa911-04d2-3119-aa36-ef166fd3db68" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'getArea' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 26\\] The 'getArea' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "7a16a4c6-92d1-33c9-9165-2f387ee1bafc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'getArea' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 26\\] The 'getArea' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "b4f5c2d5-36fc-3da9-93d3-f8e45eb58724" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-CPP-25", "level": "warning", "message": { "text": "Make virtual functions nonpublic, and public functions nonvirtual: getArea", "markdown": "**\\[Line 26\\] Make virtual functions nonpublic, and public functions nonvirtual: getArea**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "4a0e3f88-e54c-346a-94d8-163757c6d9c4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-MCPP-05", "level": "warning", "message": { "text": "The 'getArea' function should be declared with the 'override' specifier", "markdown": "**\\[Line 26\\] The 'getArea' function should be declared with the 'override' specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "14b7b101-3aac-3155-bb2e-b6367b683ef8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "AUTOSAR-A10_3_2-a", "level": "error", "message": { "text": "The 'getArea' function should be declared with the 'override' specifier", "markdown": "**\\[Line 26\\] The 'getArea' function should be declared with the 'override' specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "820dc310-235e-314b-9a68-d7cc9d6cde0d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "HICPP-10_2_1-a", "level": "warning", "message": { "text": "The 'getArea' function should be declared with the 'override' specifier", "markdown": "**\\[Line 26\\] The 'getArea' function should be declared with the 'override' specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "93fac617-bd46-34f7-af52-a6875c68d273" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "CODSTA-MCPP-24", "level": "warning", "message": { "text": "Declaration of virtual function 'getArea' should have 'override' or 'final' specifier", "markdown": "**\\[Line 26\\] Declaration of virtual function 'getArea' should have 'override' or 'final' specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "75ae88ff-1994-3bcd-a7d3-42acba819b1c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "AUTOSAR-A10_3_1-a", "level": "error", "message": { "text": "Declaration of virtual function 'getArea' should have 'override' or 'final' specifier", "markdown": "**\\[Line 26\\] Declaration of virtual function 'getArea' should have 'override' or 'final' specifier**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "8c2616e8-f178-38b2-afca-6f298e4a7343" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "FORMAT-28", "level": "warning", "message": { "text": "Return type is not placed in line before function 'getArea'", "markdown": "**\\[Line 26\\] Return type is not placed in line before function 'getArea'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "1ff1134c-900b-31df-a590-3e823ccea04e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'getArea' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 26\\] Function 'getArea' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "295f507d-080b-3e31-8674-9a688df69e21" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'getArea' has Essential Complexity value: 1", "markdown": "**\\[Line 26\\] Function 'getArea' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "a50c5f30-5386-3cc9-be37-c5b18e5be012" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "NAMING-17", "level": "warning", "message": { "text": "Naming convention not followed: getArea", "markdown": "**\\[Line 26\\] Naming convention not followed: getArea**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "94cc2077-f694-3d9f-bb6c-d8e027a7f643" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "OOP-21", "level": "warning", "message": { "text": "Use the virtual keyword for 'getArea' function", "markdown": "**\\[Line 26\\] Use the virtual keyword for 'getArea' function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "14e70ad8-b15f-3901-955b-398e129f4056" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "MISRA2008-10_3_2", "level": "error", "message": { "text": "Use the virtual keyword for 'getArea' function", "markdown": "**\\[Line 26\\] Use the virtual keyword for 'getArea' function**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "42039253-e314-354f-95e5-c0c8bdac483a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "OOP-25", "level": "warning", "message": { "text": "Function 'getArea' is both virtual and inline", "markdown": "**\\[Line 26\\] Function 'getArea' is both virtual and inline**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "007ea9db-6d36-3cc4-a1e1-dc24dda9e2d5" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 12, "endColumn": 13 } } } ] }, { "ruleId": "FORMAT-25_b", "level": "warning", "message": { "text": "'return' statement should be used with parenthesis", "markdown": "**\\[Line 26\\] 'return' statement should be used with parenthesis**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "b2a61595-3a29-376e-8726-15167f83356a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 30, "endColumn": 31 } } } ] }, { "ruleId": "JSF-151", "level": "warning", "message": { "text": "Literal constant '3.141592653' is used", "markdown": "**\\[Line 26\\] Literal constant '3\\.141592653' is used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "818dafd6-7833-3a6a-b57b-b7f8067939ed" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 37, "endColumn": 38 } } } ] }, { "ruleId": "CODSTA-26", "level": "warning", "message": { "text": "Literal constant '3.141592653' is used", "markdown": "**\\[Line 26\\] Literal constant '3\\.141592653' is used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "65d90b47-5a73-3372-a8a3-e4e2fc8f825a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 37, "endColumn": 38 } } } ] }, { "ruleId": "AUTOSAR-A5_1_1-a", "level": "error", "message": { "text": "Literal constant '3.141592653' is used", "markdown": "**\\[Line 26\\] Literal constant '3\\.141592653' is used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "41a9b19b-078d-38b6-8ab9-aa1a16bea609" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 37, "endColumn": 38 } } } ] }, { "ruleId": "HICPP-5_1_1-a", "level": "warning", "message": { "text": "Literal constant '3.141592653' is used", "markdown": "**\\[Line 26\\] Literal constant '3\\.141592653' is used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "a96b6cd9-fbb6-39ea-b959-1599953d6e30" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 37, "endColumn": 38 } } } ] }, { "ruleId": "MISRA2008-0_4_2", "level": "note", "message": { "text": "floating-point arithmetic is not documented", "markdown": "**\\[Line 26\\] floating\\-point arithmetic is not documented**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "e1a78288-8ee5-3e64-bbd4-a229a48a0f50" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 37, "endColumn": 38 } } } ] }, { "ruleId": "OWASP2019-API9-d", "level": "warning", "message": { "text": "floating-point arithmetic is not documented", "markdown": "**\\[Line 26\\] floating\\-point arithmetic is not documented**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "f361d790-bb09-3f16-b55d-c37d83586f0b" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 37, "endColumn": 38 } } } ] }, { "ruleId": "AUTOSAR-M0_4_2-a", "level": "error", "message": { "text": "floating-point arithmetic is not documented", "markdown": "**\\[Line 26\\] floating\\-point arithmetic is not documented**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "597d86c7-2d7f-3973-be25-f622d6fff300" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 37, "endColumn": 38 } } } ] }, { "ruleId": "COMMENT-10", "level": "warning", "message": { "text": "floating-point arithmetic is not documented", "markdown": "**\\[Line 26\\] floating\\-point arithmetic is not documented**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "83b642c2-62f3-3592-bd13-e79d576b2339" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 37, "endColumn": 38 } } } ] }, { "ruleId": "JSF-061", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 26\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "762b374c-df99-3692-bf7d-030b24e88850" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 70, "endColumn": 71 } } } ] }, { "ruleId": "FORMAT-42", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 26\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "d1f6319e-b278-3e5c-b749-49c55beaee0f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 70, "endColumn": 71 } } } ] }, { "ruleId": "JSF-060_a", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 26\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "16afd6c8-b3b9-3eab-942d-e6a79a601075" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 70, "endColumn": 71 } } } ] }, { "ruleId": "FORMAT-03", "level": "warning", "message": { "text": "Put the closing brace '}' on its own line", "markdown": "**\\[Line 26\\] Put the closing brace '\\}' on its own line**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "-535658836", "unbViolId": "50215894-bf1f-3829-a7c1-52de94dd08cc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 26, "startColumn": 70, "endColumn": 71 } } } ] }, { "ruleId": "MISRA2008-3_9_2", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 27\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "df540ee1-14ee-3a39-ab0d-918245e7ec4a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA-013", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 27\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "661ee7ca-608c-317a-a750-7536c09cba02" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "CODSTA-223", "level": "warning", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 27\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "7429c91b-ee16-3082-aa5b-2eda8a595643" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "AUTOSAR-A3_9_1-b", "level": "error", "message": { "text": "Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type", "markdown": "**\\[Line 27\\] Use the fixed width integer type from <cstdint> instead of the 'int' basic numerical type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "8d322560-c2d6-3051-a614-e95f898704de" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-7_1_6-b", "level": "warning", "message": { "text": "Do not use the 'int' standard integer type", "markdown": "**\\[Line 27\\] Do not use the 'int' standard integer type**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "50256bfd-81f7-3144-846f-9ed7ac05a4e3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRAC2012-DIR_4_6-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 27\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "22c5ea3e-d621-3ba6-8e57-4f691a5f4ca9" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "JSF-209_b", "level": "error", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 27\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "ff7e656e-66d7-398d-9e4d-2c1d0e9edecb" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2004-6_3_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 27\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "897e240f-ed54-33c3-b1a1-05418375e023" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "MISRA2012-DIR-4_6_b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 27\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "2360016e-af44-3265-93d2-c51b331a7394" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-3_5_1-b", "level": "warning", "message": { "text": "The basic numerical type 'int' should not be used", "markdown": "**\\[Line 27\\] The basic numerical type 'int' should not be used**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "5f336691-4d8a-3b40-be79-a620c2937875" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "COMMENT-04", "level": "warning", "message": { "text": "The definition of the 'contains' function is not preceded by a comment", "markdown": "**\\[Line 27\\] The definition of the 'contains' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "eaecf1c7-39c9-3299-94a1-8d1c8e9b3833" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "JSF-134", "level": "warning", "message": { "text": "The definition of the 'contains' function is not preceded by a comment", "markdown": "**\\[Line 27\\] The definition of the 'contains' function is not preceded by a comment**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "b2b0d6db-02ab-3b1b-a9b4-ac75ac01e9fc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "COMMENT-14", "level": "warning", "message": { "text": "The 'contains' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 27\\] The 'contains' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "0e9d0827-c697-37b5-9dc1-77af2f330dbc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-a", "level": "error", "message": { "text": "The 'contains' function should be preceded by a comment that contains the '@brief' tag", "markdown": "**\\[Line 27\\] The 'contains' function should be preceded by a comment that contains the '@brief' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "9d5de590-15e0-33f0-82d4-af5d834279a0" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'point' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 27\\] The 'point' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "a0565cc1-bd29-3b7b-9350-5edfbf32723f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'point' parameter does not have a corresponding '@param' tag in the comment before the function declaration", "markdown": "**\\[Line 27\\] The 'point' parameter does not have a corresponding '@param' tag in the comment before the function declaration**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "7e56d6b6-a90d-3bc7-a7dd-32874e39f5f3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "AUTOSAR-A2_7_3-b", "level": "error", "message": { "text": "The 'contains' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 27\\] The 'contains' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "91ef37fd-0d34-3a62-aa07-9a0f31961c04" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "COMMENT-14_b", "level": "warning", "message": { "text": "The 'contains' function should be preceded by a comment that contains the '@return' tag", "markdown": "**\\[Line 27\\] The 'contains' function should be preceded by a comment that contains the '@return' tag**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "7bb13fd7-4a87-3b5c-bf79-2a53bd9768ad" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "PORT-13", "level": "warning", "message": { "text": "'contains' shall be declared as unsigned int or signed int", "markdown": "**\\[Line 27\\] 'contains' shall be declared as unsigned int or signed int**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "26346b85-d0ec-3f54-aa89-ce96bc42d3b3" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "FORMAT-28", "level": "warning", "message": { "text": "Return type is not placed in line before function 'contains'", "markdown": "**\\[Line 27\\] Return type is not placed in line before function 'contains'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "6adaf60c-7034-3761-8581-1a7676a8493f" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "METRICS-29", "level": "note", "message": { "text": "Function 'contains' has Cyclomatic Complexity value: 1", "markdown": "**\\[Line 27\\] Function 'contains' has Cyclomatic Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "a4dc9050-16e0-3db3-8c4c-364807a203b8" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "METRICS-33", "level": "note", "message": { "text": "Function 'contains' has Essential Complexity value: 1", "markdown": "**\\[Line 27\\] Function 'contains' has Essential Complexity value: 1**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "103ded33-2c18-3d4c-a140-3b9e08a01470" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-17", "level": "warning", "message": { "text": "Naming convention not followed: contains", "markdown": "**\\[Line 27\\] Naming convention not followed: contains**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "2531181e-b7b0-35e4-a929-a258c11fc4e6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 9, "endColumn": 10 } } } ] }, { "ruleId": "NAMING-45", "level": "warning", "message": { "text": "The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'", "markdown": "**\\[Line 27\\] The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "a55f3582-7d1e-3687-83a8-6ca9af7c55da" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "JSF-048", "level": "warning", "message": { "text": "The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'", "markdown": "**\\[Line 27\\] The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point\\.hpp'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "a5c12393-94ee-3106-a7a5-b392251e741d" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "MISRA2008-2_10_1", "level": "error", "message": { "text": "Identifier name: 'point' differs only by case from its type name: 'Point'", "markdown": "**\\[Line 27\\] Identifier name: 'point' differs only by case from its type name: 'Point'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "e947681b-789b-3601-815a-2a7263ba2d76" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "HICPP-2_4_1-a", "level": "warning", "message": { "text": "Identifier name: 'point' differs only by case from its type name: 'Point'", "markdown": "**\\[Line 27\\] Identifier name: 'point' differs only by case from its type name: 'Point'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "314961ac-0eb9-3b52-af1d-185610213e3a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "AUTOSAR-M2_10_1-a", "level": "error", "message": { "text": "Identifier name: 'point' differs only by case from its type name: 'Point'", "markdown": "**\\[Line 27\\] Identifier name: 'point' differs only by case from its type name: 'Point'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "95b0f90b-079e-3ea5-b7a8-b75aed1a7ed6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "NAMING-47", "level": "warning", "message": { "text": "Identifier name: 'point' differs only by case from its type name: 'Point'", "markdown": "**\\[Line 27\\] Identifier name: 'point' differs only by case from its type name: 'Point'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "cb4c26bb-b2db-39f2-bd3f-d48583e365df" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "OPT-14", "level": "warning", "message": { "text": "The parameter 'point' of function 'contains' is passed by value", "markdown": "**\\[Line 27\\] The parameter 'point' of function 'contains' is passed by value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "80890e55-f703-35b7-8851-364fd2cb70fd" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "JSF-125_a", "level": "warning", "message": { "text": "The parameter 'point' of function 'contains' is passed by value", "markdown": "**\\[Line 27\\] The parameter 'point' of function 'contains' is passed by value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "030a0a04-1a7f-38e4-85da-c4069c3ee75e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "JSF-117", "level": "warning", "message": { "text": "The parameter 'point' of function 'contains' is passed by value", "markdown": "**\\[Line 27\\] The parameter 'point' of function 'contains' is passed by value**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "2e423a80-f9b5-3412-8723-6fb0ebf114eb" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "CERT_C-API00-a", "level": "warning", "message": { "text": "Parameter 'point' is not validated before use", "markdown": "**\\[Line 27\\] Parameter 'point' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "d0da6f1f-17ad-36d0-9de0-fd72636057d6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "CODSTA-86", "level": "warning", "message": { "text": "Parameter 'point' is not validated before use", "markdown": "**\\[Line 27\\] Parameter 'point' is not validated before use**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "398250049", "unbViolId": "046973f2-b6ef-3f81-97c9-dba8a7f0d7c4" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 27, "startColumn": 24, "endColumn": 25 } } } ] }, { "ruleId": "METRICS-19", "level": "warning", "message": { "text": "Percentage of comment lines vs. all method's lines is: 0", "markdown": "**\\[Line 28\\] Percentage of comment lines vs\\. all method's lines is: 0**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "30537851", "unbViolId": "87c1ddbb-0fc2-3b04-bf30-c3adeb009683" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 28, "startColumn": 1, "endColumn": 2 } } } ] }, { "ruleId": "JSF-043", "level": "warning", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 29\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "538754804", "unbViolId": "02f5d6eb-0f93-3cb6-9685-5f99d728ed35" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "FORMAT-01", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 29\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "538754804", "unbViolId": "fc7673cd-34f2-3024-86db-41cf3b5e2199" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "HICPP-2_1_1-a", "level": "note", "message": { "text": "Non-ascii tab found", "markdown": "**\\[Line 29\\] Non\\-ascii tab found**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "538754804", "unbViolId": "e07c5aea-78fe-3861-b91c-4b4ca4495af6" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 5, "endColumn": 6 } } } ] }, { "ruleId": "PB-05", "level": "warning", "message": { "text": "Function 'contains' has declared return type 'int' but returns value of type 'bool'", "markdown": "**\\[Line 29\\] Function 'contains' has declared return type 'int' but returns value of type 'bool'**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "538754804", "unbViolId": "a2277c98-b8fa-371f-b2b8-b220a360c8bb" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "FORMAT-25_b", "level": "warning", "message": { "text": "'return' statement should be used with parenthesis", "markdown": "**\\[Line 29\\] 'return' statement should be used with parenthesis**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "538754804", "unbViolId": "064389de-8eb3-3a60-809c-730f4da3cb4c" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 6, "endColumn": 7 } } } ] }, { "ruleId": "MISRA2008-5_0_5_b", "level": "error", "message": { "text": "Implicit conversion from integral to floating type in comparison expression", "markdown": "**\\[Line 29\\] Implicit conversion from integral to floating type in comparison expression**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "538754804", "unbViolId": "0bfca8e6-6cc8-3ef8-97c7-4cce3aa64697" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "CERT_C-EXP39-a", "level": "warning", "message": { "text": "Implicit conversion from integral to floating type in comparison expression", "markdown": "**\\[Line 29\\] Implicit conversion from integral to floating type in comparison expression**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "538754804", "unbViolId": "abe5d723-0b0d-3909-a364-4304115189ba" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "AUTOSAR-M5_0_5-a", "level": "error", "message": { "text": "Implicit conversion from integral to floating type in comparison expression", "markdown": "**\\[Line 29\\] Implicit conversion from integral to floating type in comparison expression**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "538754804", "unbViolId": "7ddf3829-2552-3132-959a-0c87dc5c3cfd" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "MISRA2004-10_1_b", "level": "warning", "message": { "text": "Implicit conversion from integral to floating type in comparison expression", "markdown": "**\\[Line 29\\] Implicit conversion from integral to floating type in comparison expression**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "538754804", "unbViolId": "9f0b81a5-91dd-3451-8c7a-733e2fe03919" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 13, "endColumn": 14 } } } ] }, { "ruleId": "CODSTA-CPP-15", "level": "warning", "message": { "text": "Put function 'getPosition' that are used in the body of inline member function into separate file", "markdown": "**\\[Line 29\\] Put function 'getPosition' that are used in the body of inline member function into separate file**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "538754804", "unbViolId": "7a3b042b-db60-3f0f-9ea2-f5d29118339a" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 36, "endColumn": 37 } } } ] }, { "ruleId": "MISRA2008-0_4_2", "level": "note", "message": { "text": "floating-point arithmetic is not documented", "markdown": "**\\[Line 29\\] floating\\-point arithmetic is not documented**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "538754804", "unbViolId": "a4cc08d6-df76-335e-bdd1-0e171fcaaa8e" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 55, "endColumn": 56 } } } ] }, { "ruleId": "OWASP2019-API9-d", "level": "warning", "message": { "text": "floating-point arithmetic is not documented", "markdown": "**\\[Line 29\\] floating\\-point arithmetic is not documented**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "538754804", "unbViolId": "663fe175-5410-3bc0-99b7-e21d3f7b0b03" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 55, "endColumn": 56 } } } ] }, { "ruleId": "AUTOSAR-M0_4_2-a", "level": "error", "message": { "text": "floating-point arithmetic is not documented", "markdown": "**\\[Line 29\\] floating\\-point arithmetic is not documented**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "538754804", "unbViolId": "4342c4f8-95a1-3237-b35b-9ca6037b74bc" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 55, "endColumn": 56 } } } ] }, { "ruleId": "COMMENT-10", "level": "warning", "message": { "text": "floating-point arithmetic is not documented", "markdown": "**\\[Line 29\\] floating\\-point arithmetic is not documented**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "538754804", "unbViolId": "7668b57d-b2cc-31cc-a844-06188ec1ea81" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 29, "startColumn": 55, "endColumn": 56 } } } ] }, { "ruleId": "HICPP-2_3_1-a", "level": "warning", "message": { "text": "Use \/\/ comments only", "markdown": "**\\[Line 33\\] Use \/\/ comments only**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "652807523", "unbViolId": "403708ad-5eee-3411-862f-3c8555273772" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 33, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "JSF-126", "level": "error", "message": { "text": "Use \/\/ comments only", "markdown": "**\\[Line 33\\] Use \/\/ comments only**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "652807523", "unbViolId": "2fe86f29-95f8-3191-b65c-df0ebd8021cf" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 33, "startColumn": 8, "endColumn": 9 } } } ] }, { "ruleId": "COMMENT-01", "level": "warning", "message": { "text": "Use \/\/ comments only", "markdown": "**\\[Line 33\\] Use \/\/ comments only**" }, "partialFingerprints": { "violType": "StdViol", "lineHash": "652807523", "unbViolId": "c868a3bc-dec7-3c10-9b03-12fe833e6552" }, "locations": [ { "physicalLocation": { "artifactLocation": {"uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" }, "region": { "startLine": 33, "startColumn": 8, "endColumn": 9 } } } ] }], "artifacts": [ { "location": { "uri": "DeadLock.cpp", "uriBaseId": "PROJECTROOT-1" } },{ "location": { "uri": "DivisionByZero.cpp", "uriBaseId": "PROJECTROOT-1" } },{ "location": { "uri": "MemoryLeak.cpp", "uriBaseId": "PROJECTROOT-1" } },{ "location": { "uri": "NullPointer.cpp", "uriBaseId": "PROJECTROOT-1" } },{ "location": { "uri": "Point.hpp", "uriBaseId": "PROJECTROOT-1" } },{ "location": { "uri": "Shapes.hpp", "uriBaseId": "PROJECTROOT-1" } }] } ] }