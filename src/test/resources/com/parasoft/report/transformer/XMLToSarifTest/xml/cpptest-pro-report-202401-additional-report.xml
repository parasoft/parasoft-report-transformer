<?xml version='1.0' encoding='UTF-8'?><ResultsSession buildId="Default Project-2024-07-23" climode="true" endTime="2024-07-23T11:00:04+08:00" execEnv="win32_x86_64" hasViols="true" id="1721693494091" lang="en_US" machine="CD-LYAO-02" prjModule="flowanalysiscpp-2" project="" tag="cpptest_settings" time="2024-07-23T10:59:36+08:00" toolDispName="C/C++test" toolId="c++test" toolName="DTP Engine for C/C++" toolVer="2024.1.0" user="lyao">
   <TestConfig machine="CD-LYAO-02" name="cpptest_settings" pseudoUrl="D:\reports\projects\flowanalysiscpp (1)\conf\pro\cpptest_settings.properties" user="lyao"/>
   <Authors>
      <Author id="dev1" name="lyao"/>
   </Authors>
   <Analyzers>
      <Analyzer id="com.parasoft.xtest.scope.analyzer" name="Scope Analyzer" ver="10.7.0.20240508"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.code" name="Parasoft C/C++ Code Analyzer" ver="10.7.0.20240522B2384"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.desktop.files.in.scope" name="Helper Scope Analyzer for C/C++test Professional" ver="10.7.0.20240522B2384"/>
      <Analyzer id="com.parasoft.xtest.dupcode.parser" name="Code Duplication Parser" ver="10.7.0.20240508"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.pattern" name="Parasoft C/C++ Static Analyzer" ver="10.7.0.20240522B2384"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.flow" name="Parasoft C/C++ Flow Analyzer" ver="10.7.0.20240424B4736"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.metrics" name="Parasoft C/C++ Metrics Analyzer" ver="10.7.0.20240522B2384"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.dupcode" name="Code Duplication Detector" ver="10.7.0.20240508"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.global" name="Parasoft C/C++ Global Static Analyzer" ver="10.7.0.20240522B2384"/>
   </Analyzers>
   <VersionInfos>
      <StorageInfo ownerId="" resultId="ISetupResult" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IExecutionViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IFunctionalViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IChangeImpactViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IUnitTestViolation" ver="1" ver10x="1"/>
   </VersionInfos>
   <Goals tsks="50">
      
   </Goals>
   <Metrics>
      <Metric avg="0.6" disp="true" id="METRIC.CBO" max="1" min="0" name="Coupling Between Objects" noi="5" stddev="0.49">
         <Info avg="0.6" disp="true" elem="flowanalysiscpp-2" max="1" min="0" noi="5" stddev="0.49"/>
      </Metric>
      <Metric avg="1.364" disp="true" id="METRIC.CC" max="3" min="1" name="McCabe Cyclomatic Complexity" noi="22" stddev="0.71">
         <Info avg="1.364" disp="true" elem="flowanalysiscpp-2" max="3" min="1" noi="22" stddev="0.71"/>
      </Metric>
      <Metric avg="0.102" disp="true" id="METRIC.CLLOCRIF" max="0.25" min="0" name="Comment/Logical Lines in Files" noi="6" stddev="0.112">
         <Info avg="0.102" disp="true" elem="flowanalysiscpp-2" max="0.25" min="0" noi="6" stddev="0.112"/>
      </Metric>
      <Metric avg="0.129" disp="true" id="METRIC.CLLOCRIM" max="1" min="0" name="Comment/Logical Lines in Methods" noi="17" stddev="0.321">
         <Info avg="0.129" disp="true" elem="flowanalysiscpp-2" max="1" min="0" noi="17" stddev="0.321"/>
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.CLLOCRIT" max="0" min="0" name="Comment/Logical Lines in Types" noi="4" stddev="0">
         <Info avg="0" disp="true" elem="flowanalysiscpp-2" max="0" min="0" noi="4" stddev="0"/>
      </Metric>
      <Metric avg="0.136" disp="true" id="METRIC.DIF" max="1" min="0" name="Depth of Nested 'if' Statements" noi="22" stddev="0.343">
         <Info avg="0.136" disp="true" elem="flowanalysiscpp-2" max="1" min="0" noi="22" stddev="0.343"/>
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.ECC" max="1" min="1" name="Essential Cyclomatic Complexity" noi="22" stddev="0">
         <Info avg="1" disp="true" elem="flowanalysiscpp-2" max="1" min="1" noi="22" stddev="0"/>
      </Metric>
      <Metric avg="0.6" disp="true" id="METRIC.FO" max="1" min="0" name="Fan Out" noi="5" stddev="0.49">
         <Info avg="0.6" disp="true" elem="flowanalysiscpp-2" max="1" min="0" noi="5" stddev="0.49"/>
      </Metric>
      <Metric avg="4.479" disp="true" id="METRIC.HDIFM" max="16.333" min="1.25" name="Halstead Difficulty" noi="22" stddev="3.924">
         <Info avg="4.479" disp="true" elem="flowanalysiscpp-2" max="16.333" min="1.25" noi="22" stddev="3.924"/>
      </Metric>
      <Metric avg="738.759" disp="true" id="METRIC.HEFM" max="4452.883" min="23.265" name="Halstead Effort" noi="22" stddev="1202.865">
         <Info avg="738.759" disp="true" elem="flowanalysiscpp-2" max="4452.883" min="23.265" noi="22" stddev="1202.865"/>
      </Metric>
      <Metric avg="20.665" disp="true" id="METRIC.HICM" max="57.125" min="9.047" name="Halstead Intelligent Content" noi="22" stddev="12.999">
         <Info avg="20.665" disp="true" elem="flowanalysiscpp-2" max="57.125" min="9.047" noi="22" stddev="12.999"/>
      </Metric>
      <Metric avg="23.182" disp="true" id="METRIC.HLENM" max="62" min="6" name="Halstead Program Length" noi="22" stddev="18.06">
         <Info avg="23.182" disp="true" elem="flowanalysiscpp-2" max="62" min="6" noi="22" stddev="18.06"/>
      </Metric>
      <Metric avg="0.378" disp="true" id="METRIC.HLEVM" max="0.8" min="0.061" name="Halstead Program Level" noi="22" stddev="0.214">
         <Info avg="0.378" disp="true" elem="flowanalysiscpp-2" max="0.8" min="0.061" noi="22" stddev="0.214"/>
      </Metric>
      <Metric avg="0.021" disp="true" id="METRIC.HNOBM" max="0.09" min="0.003" name="Halstead Number of Bugs" noi="22" stddev="0.025">
         <Info avg="0.021" disp="true" elem="flowanalysiscpp-2" max="0.09" min="0.003" noi="22" stddev="0.025"/>
      </Metric>
      <Metric avg="41.042" disp="true" id="METRIC.HTTPM" max="247.382" min="1.292" name="Halstead Time to Program" noi="22" stddev="66.826">
         <Info avg="41.042" disp="true" elem="flowanalysiscpp-2" max="247.382" min="1.292" noi="22" stddev="66.826"/>
      </Metric>
      <Metric avg="13.636" disp="true" id="METRIC.HVOCM" max="37" min="6" name="Halstead Program Vocabulary" noi="22" stddev="8.621">
         <Info avg="13.636" disp="true" elem="flowanalysiscpp-2" max="37" min="6" noi="22" stddev="8.621"/>
      </Metric>
      <Metric avg="95.765" disp="true" id="METRIC.HVOLM" max="307.16" min="15.51" name="Halstead Program Volume" noi="22" stddev="94.078">
         <Info avg="95.765" disp="true" elem="flowanalysiscpp-2" max="307.16" min="15.51" noi="22" stddev="94.078"/>
      </Metric>
      <Metric avg="0.4" disp="true" id="METRIC.IDOC" max="1" min="0" name="Inheritance Depth of Class" noi="5" stddev="0.49">
         <Info avg="0.4" disp="true" elem="flowanalysiscpp-2" max="1" min="0" noi="5" stddev="0.49"/>
      </Metric>
      <Metric avg="0.033" disp="true" id="METRIC.LCOM" max="0.167" min="0" name="Lack of Cohesion" noi="5" stddev="0.067">
         <Info avg="0.033" disp="true" elem="flowanalysiscpp-2" max="0.167" min="0" noi="5" stddev="0.067"/>
      </Metric>
      <Metric avg="1.364" disp="true" id="METRIC.MCC" max="3" min="1" name="Modified Cyclomatic Complexity" noi="22" stddev="0.71">
         <Info avg="1.364" disp="true" elem="flowanalysiscpp-2" max="3" min="1" noi="22" stddev="0.71"/>
      </Metric>
      <Metric avg="149.546" disp="true" id="METRIC.MI" max="171" min="128.663" name="Maintainability Index" noi="5" stddev="14.46">
         <Info avg="149.546" disp="true" elem="flowanalysiscpp-2" max="171" min="128.663" noi="5" stddev="14.46"/>
      </Metric>
      <Metric avg="0.364" disp="true" id="METRIC.NBD" max="2" min="0" name="Nested Blocks Depth" noi="22" stddev="0.71">
         <Info avg="0.364" disp="true" elem="flowanalysiscpp-2" max="2" min="0" noi="22" stddev="0.71"/>
      </Metric>
      <Metric avg="8" disp="true" id="METRIC.NOBLIF" max="33" min="1" name="Blank Lines in Files" noi="6" stddev="11.255">
         <Info avg="8" disp="true" elem="flowanalysiscpp-2" max="33" min="1" noi="6" stddev="11.255"/>
      </Metric>
      <Metric avg="0.091" disp="true" id="METRIC.NOBLIM" max="1" min="0" name="Blank Lines in Methods" noi="22" stddev="0.287">
         <Info avg="0.091" disp="true" elem="flowanalysiscpp-2" max="1" min="0" noi="22" stddev="0.287"/>
      </Metric>
      <Metric avg="0.4" disp="true" id="METRIC.NOBLIT" max="2" min="0" name="Blank Lines in Types" noi="5" stddev="0.8">
         <Info avg="0.4" disp="true" elem="flowanalysiscpp-2" max="2" min="0" noi="5" stddev="0.8"/>
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.NOC" max="1" min="1" name="Number of Classes" noi="5" stddev="0">
         <Info avg="1" disp="true" elem="flowanalysiscpp-2" max="1" min="1" noi="5" stddev="0"/>
      </Metric>
      <Metric avg="1.167" disp="true" id="METRIC.NOCLIF" max="5" min="0" name="Comment Lines in Files" noi="6" stddev="1.772">
         <Info avg="1.167" disp="true" elem="flowanalysiscpp-2" max="5" min="0" noi="6" stddev="1.772"/>
      </Metric>
      <Metric avg="0.227" disp="true" id="METRIC.NOCLIM" max="2" min="0" name="Comment Lines in Methods" noi="22" stddev="0.516">
         <Info avg="0.227" disp="true" elem="flowanalysiscpp-2" max="2" min="0" noi="22" stddev="0.516"/>
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.NOCLIT" max="0" min="0" name="Comment Lines in Types" noi="5" stddev="0">
         <Info avg="0" disp="true" elem="flowanalysiscpp-2" max="0" min="0" noi="5" stddev="0"/>
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.NOF" max="1" min="1" name="Number of Files" noi="6" stddev="0">
         <Info avg="1" disp="true" elem="flowanalysiscpp-2" max="1" min="1" noi="6" stddev="0"/>
      </Metric>
      <Metric avg="10.833" disp="true" id="METRIC.NOLLOCIF" max="44" min="1" name="Logical Lines in Files" noi="6" stddev="14.938">
         <Info avg="10.833" disp="true" elem="flowanalysiscpp-2" max="44" min="1" noi="6" stddev="14.938"/>
      </Metric>
      <Metric avg="2.955" disp="true" id="METRIC.NOLLOCIM" max="12" min="0" name="Logical Lines in Methods" noi="22" stddev="3.723">
         <Info avg="2.955" disp="true" elem="flowanalysiscpp-2" max="12" min="0" noi="22" stddev="3.723"/>
      </Metric>
      <Metric avg="2" disp="true" id="METRIC.NOLLOCIT" max="4" min="1" name="Logical Lines in Types" noi="4" stddev="1.225">
         <Info avg="2" disp="true" elem="flowanalysiscpp-2" max="4" min="1" noi="4" stddev="1.225"/>
      </Metric>
      <Metric avg="1.545" disp="true" id="METRIC.NOMCIM" max="10" min="0" name="Method Calls In Methods" noi="22" stddev="2.606">
         <Info avg="1.545" disp="true" elem="flowanalysiscpp-2" max="10" min="0" noi="22" stddev="2.606"/>
      </Metric>
      <Metric avg="2.4" disp="true" id="METRIC.NOMIT" max="4" min="0" name="Number of Methods in Types" noi="5" stddev="1.356">
         <Info avg="2.4" disp="true" elem="flowanalysiscpp-2" max="4" min="0" noi="5" stddev="1.356"/>
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.NOPAR" max="2" min="0" name="Parameters of Methods" noi="23" stddev="0.78">
         <Info avg="1" disp="true" elem="flowanalysiscpp-2" max="2" min="0" noi="23" stddev="0.78"/>
      </Metric>
      <Metric avg="40.833" disp="true" id="METRIC.NOPLIF" max="152" min="6" name="Physical Lines in Files" noi="6" stddev="50.449">
         <Info avg="40.833" disp="true" elem="flowanalysiscpp-2" max="152" min="6" noi="6" stddev="50.449"/>
      </Metric>
      <Metric avg="5.455" disp="true" id="METRIC.NOPLIM" max="17" min="1" name="Physical Lines in Methods" noi="22" stddev="4.629">
         <Info avg="5.455" disp="true" elem="flowanalysiscpp-2" max="17" min="1" noi="22" stddev="4.629"/>
      </Metric>
      <Metric avg="9" disp="true" id="METRIC.NOPLIT" max="20" min="1" name="Physical Lines in Types" noi="5" stddev="6.261">
         <Info avg="9" disp="true" elem="flowanalysiscpp-2" max="20" min="1" noi="5" stddev="6.261"/>
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.NOPRIVMIT" max="2" min="0" name="Private Members of Types" noi="5" stddev="0.632">
         <Info avg="1" disp="true" elem="flowanalysiscpp-2" max="2" min="0" noi="5" stddev="0.632"/>
      </Metric>
      <Metric avg="0.2" disp="true" id="METRIC.NOPROTMIT" max="1" min="0" name="Protected Members of Types" noi="5" stddev="0.4">
         <Info avg="0.2" disp="true" elem="flowanalysiscpp-2" max="1" min="0" noi="5" stddev="0.4"/>
      </Metric>
      <Metric avg="2.2" disp="true" id="METRIC.NOPUBMIT" max="4" min="0" name="Public Members of Types" noi="5" stddev="1.327">
         <Info avg="2.2" disp="true" elem="flowanalysiscpp-2" max="4" min="0" noi="5" stddev="1.327"/>
      </Metric>
      <Metric avg="0.545" disp="true" id="METRIC.NORET" max="1" min="0" name="Number of Returns in Methods" noi="22" stddev="0.498">
         <Info avg="0.545" disp="true" elem="flowanalysiscpp-2" max="1" min="0" noi="22" stddev="0.498"/>
      </Metric>
      <Metric avg="32" disp="true" id="METRIC.NOSLIF" max="114" min="5" name="Source Lines in Files" noi="6" stddev="37.399">
         <Info avg="32" disp="true" elem="flowanalysiscpp-2" max="114" min="5" noi="6" stddev="37.399"/>
      </Metric>
      <Metric avg="5.136" disp="true" id="METRIC.NOSLIM" max="16" min="1" name="Source Lines in Methods" noi="22" stddev="4.31">
         <Info avg="5.136" disp="true" elem="flowanalysiscpp-2" max="16" min="1" noi="22" stddev="4.31"/>
      </Metric>
      <Metric avg="8.6" disp="true" id="METRIC.NOSLIT" max="18" min="1" name="Source Lines in Types" noi="5" stddev="5.571">
         <Info avg="8.6" disp="true" elem="flowanalysiscpp-2" max="18" min="1" noi="5" stddev="5.571"/>
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.NOT" max="1" min="1" name="Number of Types" noi="5" stddev="0">
         <Info avg="1" disp="true" elem="flowanalysiscpp-2" max="1" min="1" noi="5" stddev="0"/>
      </Metric>
      <Metric avg="2.6" disp="true" id="METRIC.RFC" max="4" min="0" name="Response for Class" noi="5" stddev="1.497">
         <Info avg="2.6" disp="true" elem="flowanalysiscpp-2" max="4" min="0" noi="5" stddev="1.497"/>
      </Metric>
      <Metric avg="1.364" disp="true" id="METRIC.SCC" max="3" min="1" name="Strict Cyclomatic Complexity" noi="22" stddev="0.71">
         <Info avg="1.364" disp="true" elem="flowanalysiscpp-2" max="3" min="1" noi="22" stddev="0.71"/>
      </Metric>
      <Metric avg="2.2" disp="true" id="METRIC.WMC" max="4" min="0" name="Weighted Methods of Class" noi="5" stddev="1.327">
         <Info avg="2.2" disp="true" elem="flowanalysiscpp-2" max="4" min="0" noi="5" stddev="1.327"/>
      </Metric>
   </Metrics>
   <Scope>
      <Repositories/>
      <Locations>
         <Loc auth="lyao" hash="972801700" locRef="1" projId="flowanalysiscpp-2" projPath="/flowanalysiscpp-2" project="flowanalysiscpp-2" resProjPath="flowanalysiscpp (1)/DeadLock.cpp" totLns="152" uri="file:/D:/reports/projects/flowanalysiscpp%20(1)/DeadLock.cpp"/>
         <Loc auth="lyao" hash="-1665970746" locRef="2" projId="flowanalysiscpp-2" projPath="/flowanalysiscpp-2" project="flowanalysiscpp-2" resProjPath="flowanalysiscpp (1)/DivisionByZero.cpp" totLns="6" uri="file:/D:/reports/projects/flowanalysiscpp%20(1)/DivisionByZero.cpp"/>
         <Loc auth="lyao" hash="1013754779" locRef="3" projId="flowanalysiscpp-2" projPath="/flowanalysiscpp-2" project="flowanalysiscpp-2" resProjPath="flowanalysiscpp (1)/MemoryLeak.cpp" totLns="15" uri="file:/D:/reports/projects/flowanalysiscpp%20(1)/MemoryLeak.cpp"/>
         <Loc auth="lyao" hash="-1257393797" locRef="4" projId="flowanalysiscpp-2" projPath="/flowanalysiscpp-2" project="flowanalysiscpp-2" resProjPath="flowanalysiscpp (1)/NullPointer.cpp" totLns="14" uri="file:/D:/reports/projects/flowanalysiscpp%20(1)/NullPointer.cpp"/>
         <Loc auth="lyao" hash="1950870755" locRef="5" projId="flowanalysiscpp-2" projPath="/flowanalysiscpp-2" project="flowanalysiscpp-2" resProjPath="flowanalysiscpp (1)/Point.hpp" totLns="25" uri="file:/D:/reports/projects/flowanalysiscpp%20(1)/Point.hpp"/>
         <Loc auth="lyao" hash="1537905639" locRef="6" projId="flowanalysiscpp-2" projPath="/flowanalysiscpp-2" project="flowanalysiscpp-2" resProjPath="flowanalysiscpp (1)/Shapes.hpp" totLns="33" uri="file:/D:/reports/projects/flowanalysiscpp%20(1)/Shapes.hpp"/>
      </Locations>
   </Scope>
   
  <SetupProblems/>

   <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:24">
      <Projects>
         <Project bdCheckedFiles="0" bdTotalFiles="0" checkedFiles="6" checkedLns="245" id="flowanalysiscpp-2" name="flowanalysiscpp-2" qfixErrs="0" suppErrs="0" totErrs="3136" totFiles="6" totLns="245"/>
      </Projects>
      
      
      <Rules>
         <CategoriesList>
            <Category authTot="0;" authUrg="0;" desc="DISA ASD STIG" name="APSC_DV" rules="139" total="0">
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001850 The application must not display passwords/PINs as clear text." name="APSC_DV-001850" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001750 The application must transmit only cryptographically-protected passwords." name="APSC_DV-001750" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000480 The application must enforce approved authorizations for controlling the flow of information within the system based on organization-defined information flow control policies." name="APSC_DV-000480" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000160 The application must implement DoD-approved encryption to protect the confidentiality of remote access sessions." name="APSC_DV-000160" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002460 The application must maintain the confidentiality and integrity of information during preparation for transmission." name="APSC_DV-002460" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="APSC_DV-002560 The application must not be subject to input handling vulnerabilities." name="APSC_DV-002560" rules="11" total="2"/>
               <Category authTot="3;" authUrg="0;" desc="APSC_DV-003110 The application must not contain embedded authentication data." name="APSC_DV-003110" rules="1" total="3"/>
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-002000 The application must terminate all network connections associated with a communications session at the end of the session." name="APSC_DV-002000" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002440 The application must protect the confidentiality and integrity of transmitted information." name="APSC_DV-002440" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002540 The application must not be vulnerable to SQL Injection." name="APSC_DV-002540" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000500 The application must prevent non-privileged users from executing privileged functions to include disabling, circumventing, or altering implemented security safeguards/countermeasures." name="APSC_DV-000500" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001995 The application must not be vulnerable to race conditions." name="APSC_DV-001995" rules="9" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="APSC_DV-002520 The application must protect from canonical representation vulnerabilities." name="APSC_DV-002520" rules="11" total="2"/>
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-003235 The application must not be subject to error handling vulnerabilities." name="APSC_DV-003235" rules="4" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002400 The application must restrict the ability to launch Denial of Service (DoS) attacks against itself or other information systems." name="APSC_DV-002400" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002290 The application must use the Federal Information Processing Standard (FIPS) 140-2-validated cryptographic modules and random number generator if the application implements encryption, key exchange, digital signature, and hash functionality." name="APSC_DV-002290" rules="4" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="APSC_DV-002390 XML-based applications must mitigate DoS attacks by using XML filters, parser options, or gateways." name="APSC_DV-002390" rules="4" total="2"/>
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-002590 The application must not be vulnerable to overflow attacks." name="APSC_DV-002590" rules="12" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000170 The application must implement cryptographic mechanisms to protect the integrity of remote access sessions." name="APSC_DV-000170" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001300 The application must protect audit information from unauthorized deletion." name="APSC_DV-001300" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001740 The application must only store cryptographic representations of passwords." name="APSC_DV-001740" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000650 The application must not write sensitive data into the application logs." name="APSC_DV-000650" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001860 The application must use mechanisms meeting the requirements of applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance for authentication to a cryptographic module." name="APSC_DV-001860" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002470 The application must maintain the confidentiality and integrity of information during reception." name="APSC_DV-002470" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002350 The application must use appropriate cryptography in order to protect stored DoD information when required by the information owner or DoD policy." name="APSC_DV-002350" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002570 The application must generate error messages that provide information necessary for corrective actions without revealing information that could be exploited by adversaries." name="APSC_DV-002570" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002010 The application must implement NSA-approved cryptography to protect classified information in accordance with applicable federal laws, Executive Orders, directives, policies, regulations, and standards." name="APSC_DV-002010" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="APSC_DV-002550 The application must not be vulnerable to XML-oriented attacks." name="APSC_DV-002550" rules="11" total="2"/>
               <Category authTot="2;" authUrg="0;" desc="APSC_DV-002530 The application must validate all input." name="APSC_DV-002530" rules="11" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002510 The application must protect from command injection." name="APSC_DV-002510" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002480 The application must not disclose unnecessary information to users." name="APSC_DV-002480" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-001290 The application must protect audit information from unauthorized modification." name="APSC_DV-001290" rules="4" total="1"/>
            </Category>
            <Category authTot="0;" authUrg="0;" desc="AUTOSAR C++14 Coding Guidelines" name="AUTOSAR" rules="568" total="0">
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-6-1 #error directive shall not be used" name="AUTOSAR-A16_6_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-3-1 All overloads of a function shall be visible from where it is called" name="AUTOSAR-A7_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M8-5-2 Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" name="AUTOSAR-M8_5_2" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-1 A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" name="AUTOSAR-A6_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A25-4-1 Ordering predicates used with associative containers and STL sorting and related algorithms shall adhere to a strict weak ordering relation" name="AUTOSAR-A25_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-1-1 The assignment-expression of a throw statement shall not itself cause an exception to be thrown" name="AUTOSAR-M15_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-1-3 An empty throw (throw;) shall only be used in the compound statement of a catch handler" name="AUTOSAR-M15_1_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-1-2 NULL shall not be thrown explicitly" name="AUTOSAR-M15_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-7-1 If the behavior of a user-defined special member function is identical to implicitly defined special member function, then it shall be defined &quot;=default&quot; or be left undefined" name="AUTOSAR-A12_7_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-3-2 The unary minus operator shall not be applied to an expression whose underlying type is unsigned" name="AUTOSAR-M5_3_2" rules="1" total="0"/>
               <Category authTot="3;" authUrg="0;" desc="AUTOSAR M5-3-1 Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" name="AUTOSAR-M5_3_1" rules="1" total="3"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-3-4 Evaluation of the operand to the sizeof operator shall not contain side effects" name="AUTOSAR-M5_3_4" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-3-3 The unary &amp; operator shall not be overloaded" name="AUTOSAR-M5_3_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-2 All user-defined conversion operators shall be defined explicit" name="AUTOSAR-A13_5_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-3 User-defined conversion operators should not be used" name="AUTOSAR-A13_5_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-6-1 The goto statement shall not be used" name="AUTOSAR-A6_6_1" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M27-0-1 The stream input/output library &lt;cstdio> shall not be used" name="AUTOSAR-M27_0_1" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-1 If &quot;operator[]&quot; is to be overloaded with a non-const version, const version shall also be implemented" name="AUTOSAR-A13_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-16-1 The ternary conditional operator shall not be used as a sub-expression" name="AUTOSAR-A5_16_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-4 If two opposite operators are defined, one shall be defined in terms of the other" name="AUTOSAR-A13_5_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-5 Comparison operators shall be non-member functions with identical parameter types and noexcept" name="AUTOSAR-A13_5_5" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A23-0-2 Elements of a container shall only be accessed via valid references, iterators, and pointers" name="AUTOSAR-A23_0_2" rules="2" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A15-1-4 If a function exits with an exception, then before a throw, the function shall place all objects/resources that the function constructed in valid states or it shall delete them" name="AUTOSAR-A15_1_4" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A23-0-1 An iterator shall not be implicitly converted to const_iterator" name="AUTOSAR-A23_0_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M4-5-3 Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary &amp; operator" name="AUTOSAR-M4_5_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-1-5 Exceptions shall not be thrown across execution boundaries" name="AUTOSAR-A15_1_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-17-1 The semantic equivalence between a binary operator and its assignment operator form shall be preserved" name="AUTOSAR-M5_17_1" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A15-1-2 An exception object shall not be a pointer" name="AUTOSAR-A15_1_2" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M4-5-1 Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &amp;&amp;, ||, !, the equality operators == and !=, the unary &amp; operator, and the conditional operator" name="AUTOSAR-M4_5_1" rules="1" total="0"/>
               <Category authTot="5;" authUrg="0;" desc="AUTOSAR M0-1-10 Every defined function should be called at least once" name="AUTOSAR-M0_1_10" rules="2" total="5"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A15-1-1 Only instances of types derived from std::exception shall be thrown" name="AUTOSAR-A15_1_1" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-4-1 Hierarchies should be based on interface classes" name="AUTOSAR-A10_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-7-1 The #pragma directive shall not be used" name="AUTOSAR-A16_7_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A11-0-1 A non-POD type should be defined as class" name="AUTOSAR-A11_0_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A11-0-2 A type defined as struct shall: (1) provide only public data members, (2) not provide any special member functions or methods, (3) not be a base of another struct or class, (4) not inherit from another struct or class" name="AUTOSAR-A11_0_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-3 Enumerations shall be declared as scoped enum classes" name="AUTOSAR-A7_2_3" rules="1" total="0"/>
               <Category authTot="8;" authUrg="0;" desc="AUTOSAR M8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &amp;" name="AUTOSAR-M8_4_4" rules="1" total="8"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-2 Enumeration underlying base type shall be explicitly defined" name="AUTOSAR-A7_2_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-1 An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" name="AUTOSAR-A7_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M8-4-2 The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration" name="AUTOSAR-M8_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-7-1 The character \ shall not occur as a last character of a C++ comment" name="AUTOSAR-A2_7_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-9-1 The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" name="AUTOSAR-M3_9_1" rules="1" total="0"/>
               <Category authTot="65;" authUrg="0;" desc="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags" name="AUTOSAR-A2_7_3" rules="2" total="65"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-7-2 Sections of code shall not be &quot;commented out&quot;" name="AUTOSAR-A2_7_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M12-1-1 An object's dynamic type shall not be used from the body of its constructor or destructor" name="AUTOSAR-M12_1_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-9-3 The underlying bit representations of floating-point values shall not be used" name="AUTOSAR-M3_9_3" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A1-1-1 All code shall conform to ISO/IEC 14882:2014 - Programming Language C++ and shall not use deprecated features" name="AUTOSAR-A1_1_1" rules="11" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-1-2 Functions shall not be declared at block scope" name="AUTOSAR-M3_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-4-1 A switch statement shall have at least two case-clauses, distinct from the default label" name="AUTOSAR-A6_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-6-1 All class data members that are initialized by the constructor shall be initialized using member initializers" name="AUTOSAR-A12_6_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-0-3 Control shall not be transferred into a try or catch block using a goto or a switch statement" name="AUTOSAR-M15_0_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-6 A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" name="AUTOSAR-M5_2_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-9 A cast shall not convert a pointer type to an integral type" name="AUTOSAR-M5_2_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M14-5-3 A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" name="AUTOSAR-M14_5_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-2-1 The macro offsetof shall not be used" name="AUTOSAR-M18_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-8 An object with integer type or pointer to void type shall not be converted to an object with pointer type" name="AUTOSAR-M5_2_8" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A5-6-1 The right hand operand of the integer division or remainder operators shall not be equal to zero" name="AUTOSAR-A5_6_1" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-3 Casts from a base class to a derived class should not be performed on polymorphic types" name="AUTOSAR-M5_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-2 A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" name="AUTOSAR-M5_2_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-3 Do statements should not be used" name="AUTOSAR-A6_5_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-2 A for loop shall contain a single loop-counter which shall not have floating-point type" name="AUTOSAR-A6_5_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-5 Hexadecimal constants should be upper case" name="AUTOSAR-A2_13_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-6 Universal character names shall be used only inside character or string literals" name="AUTOSAR-A2_13_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-4 For-init-statement and expression should not perform actions other than loop-counter initialization and modification" name="AUTOSAR-A6_5_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-3 Type wchar_t shall not be used" name="AUTOSAR-A2_13_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-4 String literals shall not be assigned to non-constant pointers" name="AUTOSAR-A2_13_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-1 Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used" name="AUTOSAR-A2_13_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-2 String literals with different encoding prefixes shall not be concatenated" name="AUTOSAR-A2_13_2" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M5-0-15 Array indexing shall be the only form of pointer arithmetic" name="AUTOSAR-M5_0_15" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-16 A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" name="AUTOSAR-M5_0_16" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-17 Subtraction between pointers shall only be applied to pointers that address elements of the same array" name="AUTOSAR-M5_0_17" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-18 >, >=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array" name="AUTOSAR-M5_0_18" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A15-0-2 At least the basic guarantee for exception safety shall be provided for all operations. In addition, each function may offer either the strong guarantee or the nothrow guarantee" name="AUTOSAR-A15_0_2" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M9-3-1 Const member functions shall not return non-const pointers or references to class-data" name="AUTOSAR-M9_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-10 If the bitwise operators ~ and &lt;&lt; are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" name="AUTOSAR-M5_0_10" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" name="AUTOSAR-M9_3_3" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-11 The plain char type shall only be used for the storage and use of character values" name="AUTOSAR-M5_0_11" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-12 Signed char and unsigned char type shall only be used for the storage and use of numeric values" name="AUTOSAR-M5_0_12" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-14 The first operand of a conditional-operator shall have type bool" name="AUTOSAR-M5_0_14" rules="1" total="0"/>
               <Category authTot="3;" authUrg="0;" desc="AUTOSAR M7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified" name="AUTOSAR-M7_1_2" rules="3" total="3"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-4 The register keyword shall not be used" name="AUTOSAR-A7_1_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-3 CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name" name="AUTOSAR-A7_1_3" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A7-1-2 The constexpr specifier shall be used for values that can be determined at compile time" name="AUTOSAR-A7_1_2" rules="2" total="2"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A7-1-1 Constexpr or const specifiers shall be used for immutable data declaration" name="AUTOSAR-A7_1_1" rules="2" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-8-1 A header file name shall be identical to a type name declared in it if it declares a type" name="AUTOSAR-A2_8_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-11-1 Volatile keyword shall not be used" name="AUTOSAR-A2_11_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A9-5-1 Unions shall not be used" name="AUTOSAR-A9_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement" name="AUTOSAR-M6_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-20 Non-constant operands to a binary bitwise operator shall have the same underlying type" name="AUTOSAR-M5_0_20" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-21 Bitwise operators shall only be applied to operands of unsigned underlying type" name="AUTOSAR-M5_0_21" rules="2" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A18-0-1 The C library facilities shall only be accessed through C++ library headers" name="AUTOSAR-A18_0_1" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-0-3 The library &lt;clocale> (locale.h) and the setlocale function shall not be used" name="AUTOSAR-A18_0_3" rules="2" total="0"/>
               <Category authTot="3;" authUrg="0;" desc="AUTOSAR M0-4-2 Use of floating-point arithmetic shall be documented" name="AUTOSAR-M0_4_2" rules="1" total="3"/>
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A18-0-2 The error state of a conversion from string to a numeric value shall be checked" name="AUTOSAR-A18_0_2" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-3-1 A function that contains &quot;forwarding reference&quot; as its argument shall not be overloaded" name="AUTOSAR-A13_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-5-1 A pointer to member shall not access non-existent class members" name="AUTOSAR-A5_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M14-6-1 In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" name="AUTOSAR-M14_6_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-4-2 Type long double shall not be used" name="AUTOSAR-A0_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-4-4 Range, domain and pole errors shall be checked when using math functions" name="AUTOSAR-A0_4_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A4-7-1 An integer expression shall not lead to data loss" name="AUTOSAR-A4_7_1" rules="11" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-5 Enumerations should be used to represent sets of related named constants" name="AUTOSAR-A7_2_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-4 In an enumeration, either (1) none, (2) the first or (3) all enumerators shall be initialized" name="AUTOSAR-A7_2_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-6 std::make_shared shall be used to construct objects owned by std::shared_ptr" name="AUTOSAR-A20_8_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-5 std::make_unique shall be used to construct objects owned by std::unique_ptr" name="AUTOSAR-A20_8_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-7 A std::weak_ptr shall be used to represent temporary shared ownership" name="AUTOSAR-A20_8_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-2 A std::unique_ptr shall be used to represent exclusive ownership" name="AUTOSAR-A20_8_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-1 An already-owned pointer value shall not be stored in an unrelated smart pointer" name="AUTOSAR-A20_8_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-4 A std::unique_ptr shall be used over std::shared_ptr if ownership sharing is not required" name="AUTOSAR-A20_8_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-3 A std::shared_ptr shall be used to represent shared ownership" name="AUTOSAR-A20_8_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A9-6-1 Data types used for interfacing with hardware or conforming to communication protocols shall be trivial, standard-layout and only contain members of types with defined sizes" name="AUTOSAR-A9_6_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-2-3 Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character" name="AUTOSAR-M6_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-2-2 Floating-point expressions shall not be directly or indirectly tested for equality or inequality" name="AUTOSAR-M6_2_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-4-1 Destructor of a base class shall be public virtual, public override or protected non-virtual" name="AUTOSAR-A12_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-1 An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" name="AUTOSAR-A2_10_1" rules="5" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-2-1 Assignment operators shall not be used in sub-expressions" name="AUTOSAR-M6_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-2-2 Expression statements shall not be explicit calls to constructors of temporary objects only" name="AUTOSAR-A6_2_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-2-1 Move and copy assignment operators shall either move or respectively copy base classes and data members of a class, without any side effects" name="AUTOSAR-A6_2_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A9-6-2 Bit-fields shall be used only when interfacing to hardware or conforming to communication protocols" name="AUTOSAR-A9_6_2" rules="1" total="0"/>
               <Category authTot="5;" authUrg="0;" desc="AUTOSAR A12-4-2 If a public destructor of a class is non-virtual, then the class should be declared final" name="AUTOSAR-A12_4_2" rules="1" total="5"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-11 &quot;operator new&quot; and &quot;operator delete&quot; shall be defined together" name="AUTOSAR-A18_5_11" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-11 A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" name="AUTOSAR-A8_4_11" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-10 Placement new shall be used only with properly aligned pointers to sufficient storage capacity" name="AUTOSAR-A18_5_10" rules="2" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A8-4-10 A parameter shall be passed by reference if it can't be NULL" name="AUTOSAR-A8_4_10" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-13 A std::shared_ptr shall be passed to a function as: (1) a copy to express the function shares ownership (2) an lvalue reference to express that the function replaces the managed object (3) a const lvalue reference to express that the function retains a reference count" name="AUTOSAR-A8_4_13" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-12 A std::unique_ptr shall be passed to a function as: (1) a copy to express the function assumes ownership (2) an lvalue reference to express that the function replaces the managed object" name="AUTOSAR-A8_4_12" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-2 The std::vector&lt;bool> specialization shall not be used" name="AUTOSAR-A18_1_2" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A18-1-1 C-style arrays shall not be used" name="AUTOSAR-A18_1_1" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-2-1 An assignment operator shall return a reference to &quot;this&quot;" name="AUTOSAR-A13_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-4 A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" name="AUTOSAR-A18_1_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-0-3 The library functions abort, exit, getenv and system from library &lt;cstdlib> shall not be used" name="AUTOSAR-M18_0_3" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-2-2 A binary arithmetic operator and a bitwise operator shall return a &quot;prvalue&quot;" name="AUTOSAR-A13_2_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-3 The std::auto_ptr type shall not be used" name="AUTOSAR-A18_1_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-6 All std::hash specializations for user-defined types shall have a noexcept function call operator" name="AUTOSAR-A18_1_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-2-3 A relational operator shall return a boolean value" name="AUTOSAR-A13_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-0-5 The unbounded functions of library &lt;cstring> shall not be used" name="AUTOSAR-M18_0_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-0-4 The time handling functions of library &lt;ctime> shall not be used" name="AUTOSAR-M18_0_4" rules="3" total="0"/>
               <Category authTot="13;" authUrg="0;" desc="AUTOSAR M2-10-1 Different identifiers shall be typographically unambiguous" name="AUTOSAR-M2_10_1" rules="1" total="13"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-14-1 The right hand operand of a logical &amp;&amp;, || operators shall not contain side effects" name="AUTOSAR-M5_14_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-9 A class, structure, or enumeration shall not be declared in the definition of its type" name="AUTOSAR-A7_1_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-8 A non-type specifier shall be placed before a type specifier in a declaration" name="AUTOSAR-A7_1_8" rules="1" total="0"/>
               <Category authTot="14;" authUrg="0;" desc="AUTOSAR A7-1-7 Each expression statement and identifier declaration shall be placed on a separate line" name="AUTOSAR-A7_1_7" rules="3" total="14"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-6 The typedef specifier shall not be used" name="AUTOSAR-A7_1_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-5 The auto specifier shall not be used apart from following cases: (1) to declare that a variable has the same type as return type of a function call, (2) to declare that a variable has the same type as initializer of non-fundamental type, (3) to declare parameters of a generic lambda expression, (4) to declare a function template using trailing return type syntax" name="AUTOSAR-A7_1_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-2 Forwarding values to other functions shall be done via: (1) std::move if the value is an rvalue reference, (2) std::forward if the value is forwarding reference" name="AUTOSAR-A18_9_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-1 The std::bind shall not be used" name="AUTOSAR-A18_9_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-4 An argument to std::forward shall not be subsequently used" name="AUTOSAR-A18_9_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-3 The std::move shall not be used on objects declared const or const&amp;" name="AUTOSAR-A18_9_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A14-8-2 Explicit specializations of function templates shall not be used" name="AUTOSAR-A14_8_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-8-1 An object shall not be accessed outside of its lifetime" name="AUTOSAR-A3_8_1" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-3-2 The # and ## operators should not be used" name="AUTOSAR-M16_3_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-4 If a class has a user-declared constructor that takes a parameter of type std::initializer_list, then it shall be the only constructor apart from special member function constructors" name="AUTOSAR-A8_5_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-3-1 There shall be at most one occurrence of the # or ## operators in a single macro definition" name="AUTOSAR-M16_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-3-2 The identifier main shall not be used for a function other than the global function main" name="AUTOSAR-M7_3_2" rules="1" total="0"/>
               <Category authTot="17;" authUrg="0;" desc="AUTOSAR M7-3-1 The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" name="AUTOSAR-M7_3_1" rules="1" total="17"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-2-1 The ', &quot;, /*, //, \ characters shall not occur in a header file name or in #include directive" name="AUTOSAR-A16_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-1 In an initialization list, the order of initialization shall be following: (1) virtual base classes in depth and left to right order of the inheritance graph, (2) direct base classes in left to right order of inheritance list, (3) non-static data members in the order they were declared in the class definition" name="AUTOSAR-A8_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-3-4 Using-directives shall not be used" name="AUTOSAR-M7_3_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-0 All memory shall be initialized before it is read" name="AUTOSAR-A8_5_0" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-3-3 There shall be no unnamed namespaces in header files" name="AUTOSAR-M7_3_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-3 A variable of type auto shall not be initialized using {} or ={} braced-initialization" name="AUTOSAR-A8_5_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-3-6 Using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" name="AUTOSAR-M7_3_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-2-2 There shall be no unused include directives" name="AUTOSAR-A16_2_2" rules="1" total="0"/>
               <Category authTot="7;" authUrg="0;" desc="AUTOSAR A8-5-2 Braced-initialization {}, without equals sign, shall be used for variable initialization" name="AUTOSAR-A8_5_2" rules="1" total="7"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A17-0-1 Reserved identifiers, macros and functions in the C++ standard library shall not be defined, redefined or undefined" name="AUTOSAR-A17_0_1" rules="5" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A9-3-1 Member functions shall not return non-const &quot;raw&quot; pointers or references to private or protected data owned by the class" name="AUTOSAR-A9_3_1" rules="2" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-5 A loop-control-variable other than the loop-counter shall not be modified within condition or expression" name="AUTOSAR-M6_5_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-4 The loop-counter shall be modified by one of: --, ++, -= n, or += n; where n remains constant for the duration of the loop" name="AUTOSAR-M6_5_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-4-1 An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" name="AUTOSAR-M3_4_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-3 The loop-counter shall not be modified within condition or statement" name="AUTOSAR-M6_5_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" name="AUTOSAR-M6_5_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-6 A loop-control-variable other than the loop-counter which is modified in statement shall have type bool" name="AUTOSAR-M6_5_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-1-2 User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" name="AUTOSAR-A13_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-2-1 An object shall not be assigned to an overlapping object" name="AUTOSAR-M0_2_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M4-10-1 NULL shall not be used as an integer value" name="AUTOSAR-M4_10_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-1-3 User defined literals operators shall only perform conversion of passed parameters" name="AUTOSAR-A13_1_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-3-3 Pointers to incomplete class types shall not be deleted" name="AUTOSAR-A5_3_3" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A5-3-2 Null pointers shall not be dereferenced" name="AUTOSAR-A5_3_2" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-3-1 Evaluation of the operand to the typeid operator shall not contain side effects" name="AUTOSAR-A5_3_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-7-1 The signal handling facilities of &lt;csignal> shall not be used" name="AUTOSAR-M18_7_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A26-5-1 Pseudorandom numbers shall not be generated using std::rand()" name="AUTOSAR-A26_5_1" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M4-10-2 Literal zero (0) shall not be used as the null-pointer-constant" name="AUTOSAR-M4_10_2" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-6 A class or enumeration name shall not be hidden by a variable, function or enumerator declaration in the same scope" name="AUTOSAR-A2_10_6" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A26-5-2 Random number engines shall not be default-initialized" name="AUTOSAR-A26_5_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-4 The identifier name of a non-member object with static storage duration or static function shall not be reused within a namespace" name="AUTOSAR-A2_10_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-5 An identifier name of a function with static storage duration or a non-member object with external or internal linkage should not be reused" name="AUTOSAR-A2_10_5" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A4-5-1 Expressions with type enum or enum class shall not be used as operands to built-in and overloaded operators other than the subscript operator [ ], the assignment operator =, the equality operators == and !=, the unary &amp; operator, and the relational operators &lt;, &lt;=, >, >=" name="AUTOSAR-A4_5_1" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A15-5-3 The std::terminate() function shall not be called implicitly" name="AUTOSAR-A15_5_3" rules="11" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-5-2 Program shall not be abruptly terminated. In particular, an implicit or explicit invocation of std::abort(), std::quick_exit(), std::_Exit(), std::terminate() shall not be done" name="AUTOSAR-A15_5_2" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-5-1 All user-provided class destructors, deallocation functions, move constructors, move assignment operators and swap functions shall not exit with an exception. A noexcept exception specification shall be added to these functions as appropriate" name="AUTOSAR-A15_5_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M9-6-4 Named bit-fields with signed integer type shall have a length of more than one bit" name="AUTOSAR-M9_6_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-10 The increment (++) and decrement (--) operators shall not be mixed with other operators in an expression" name="AUTOSAR-M5_2_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-12 An identifier with array type passed as a function argument shall not decay to a pointer" name="AUTOSAR-M5_2_12" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-11 The comma operator, &amp;&amp; operator and the || operator shall not be overloaded" name="AUTOSAR-M5_2_11" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A14-7-2 Template specialization shall be declared in the same file (1) as the primary template (2) as a user-defined type, for which the specialization is declared" name="AUTOSAR-A14_7_2" rules="1" total="0"/>
               <Category authTot="19;" authUrg="0;" desc="AUTOSAR A3-9-1 Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" name="AUTOSAR-A3_9_1" rules="2" total="19"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-2-3 Include guards shall be provided" name="AUTOSAR-M16_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-6 Trivial accessor and mutator functions should be inlined" name="AUTOSAR-A3_1_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-5 A function definition shall only be placed in a class definition if (1) the function is intended to be inlined (2) it is a member function template (3) it is a member function of a class template" name="AUTOSAR-A3_1_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-4 When an array with external linkage is declared, its size shall be stated explicitly" name="AUTOSAR-A3_1_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-3 Implementation files, that are defined locally in the project, should have a file name extension of &quot;.cpp&quot;" name="AUTOSAR-A3_1_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-2 Header files, that are defined locally in the project, shall have a file name extension of one of: &quot;.h&quot;, &quot;.hpp&quot; or &quot;.hxx&quot;" name="AUTOSAR-A3_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule" name="AUTOSAR-A3_1_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-3-1 Only those characters specified in the C++ Language Standard basic source character set shall be used in the source code" name="AUTOSAR-A2_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-1-2 A base class shall only be declared virtual if it is used in a diamond hierarchy" name="AUTOSAR-M10_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-1-1 Classes should not be derived from virtual bases" name="AUTOSAR-M10_1_1" rules="1" total="0"/>
               <Category authTot="7;" authUrg="0;" desc="AUTOSAR M8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" name="AUTOSAR-M8_0_1" rules="1" total="7"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-2 All if ... else if constructs shall be terminated with an else clause" name="AUTOSAR-M6_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement" name="AUTOSAR-M6_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A17-1-1 Use of the C Standard Library shall be encapsulated and isolated" name="AUTOSAR-A17_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A21-8-1 Arguments to character-handling functions shall be representable as an unsigned char" name="AUTOSAR-A21_8_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-1-3 An accessible base class shall not be both virtual and non-virtual in the same hierarchy" name="AUTOSAR-M10_1_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-6 The final clause of a switch statement shall be the default-clause" name="AUTOSAR-M6_4_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A25-1-1 Non-static data members or captured values of predicate function objects that are state related to this object's identity shall not be copied" name="AUTOSAR-A25_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause" name="AUTOSAR-M6_4_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-4 A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" name="AUTOSAR-M6_4_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-3 A switch statement shall be a well-formed switch statement" name="AUTOSAR-M6_4_3" rules="5" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M2-7-1 The character sequence /* shall not be used within a C-style comment" name="AUTOSAR-M2_7_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-7 The condition of a switch statement shall not have bool type" name="AUTOSAR-M6_4_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-1 dynamic_cast should not be used" name="AUTOSAR-A5_2_1" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested" name="AUTOSAR-M0_3_2" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-5 An array or container shall not be accessed beyond its range" name="AUTOSAR-A5_2_5" rules="4" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR M0-3-1 Minimization of run-time failures shall be ensured by the use of at least one of: (a) static analysis tools/techniques; (b) dynamic analysis tools/techniques; (c) explicit coding of checks to handle run-time faults" name="AUTOSAR-M0_3_1" rules="9" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-4 reinterpret_cast shall not be used" name="AUTOSAR-A5_2_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-3 A cast shall not remove any const or volatile qualification from the type of a pointer or reference" name="AUTOSAR-A5_2_3" rules="1" total="0"/>
               <Category authTot="2;" authUrg="2;" desc="AUTOSAR A5-2-2 Traditional C-style casts shall not be used" name="AUTOSAR-A5_2_2" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-5 Checked exceptions that could be thrown from a function shall be specified together with the function declaration and they shall be identical in all function declarations and for all its overriders" name="AUTOSAR-A15_4_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M17-0-2 The names of standard library macros and objects shall not be reused" name="AUTOSAR-M17_0_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-3 The noexcept specification of a function shall either be identical across all translation units, or identical or more restrictive between a virtual member function and an overrider" name="AUTOSAR-A15_4_3" rules="1" total="0"/>
               <Category authTot="8;" authUrg="0;" desc="AUTOSAR A15-4-4 A declaration of non-throwing function shall contain noexcept specification" name="AUTOSAR-A15_4_4" rules="1" total="8"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M17-0-3 The names of standard library functions shall not be overridden" name="AUTOSAR-M17_0_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-1 Dynamic exception-specification shall not be used" name="AUTOSAR-A15_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-2 If a function is declared to be noexcept, noexcept(true) or noexcept(&lt;true condition>), then it shall not exit with an exception" name="AUTOSAR-A15_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-1-1 Class shall not be derived from more than one base class which is not an interface class" name="AUTOSAR-A10_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M17-0-5 The setjmp macro and the longjmp function shall not be used" name="AUTOSAR-M17_0_5" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-1-2 All #else, #elif and #endif pre-processor directives shall reside in the same file as the #if or #ifdef directive to which they are related" name="AUTOSAR-M16_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A11-3-1 Friend declarations shall not be used" name="AUTOSAR-A11_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-1-1 The defined pre-processor operator shall only be used in one of the two standard forms" name="AUTOSAR-M16_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-5-2 The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" name="AUTOSAR-M7_5_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-5-1 A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function" name="AUTOSAR-M7_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-4 An identifier with external linkage shall have exactly one definition" name="AUTOSAR-M3_2_4" rules="2" total="0"/>
               <Category authTot="18;" authUrg="0;" desc="AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include" name="AUTOSAR-A16_0_1" rules="5" total="18"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-2-1 All accessible entity names within a multiple inheritance hierarchy should be unique" name="AUTOSAR-M10_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M8-3-1 Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments" name="AUTOSAR-M8_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-1 Constructors shall explicitly initialize all virtual base classes, all direct non-virtual base classes and all non-static data members" name="AUTOSAR-A12_1_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-2 Both NSDMI and a non-static member initializer in a constructor shall not be used in the same type" name="AUTOSAR-A12_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-4 Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" name="AUTOSAR-M15_3_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-3 If all user-defined constructors of a class initialize data members with constant values that are the same across all constructors, then data members shall be initialized using NSDMI instead" name="AUTOSAR-A12_1_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-7 Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last" name="AUTOSAR-M15_3_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-4 All constructors that are callable with a single argument of fundamental type shall be declared explicit" name="AUTOSAR-A12_1_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-6 Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" name="AUTOSAR-M15_3_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-1 All declarations of an object or function shall have compatible types" name="AUTOSAR-M3_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A17-6-1 Non-standard entities shall not be added to standard namespaces" name="AUTOSAR-A17_6_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-3 A type, object or function that is used in multiple translation units shall be declared in one and only one file" name="AUTOSAR-M3_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-10-1 A pointer to member virtual function shall only be tested for equality with null-pointer-constant" name="AUTOSAR-A5_10_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-2 The One Definition Rule shall not be violated" name="AUTOSAR-M3_2_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-6 The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators" name="AUTOSAR-A5_2_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-5 Common class initialization for non-constant members shall be done by a delegating constructor" name="AUTOSAR-A12_1_5" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M15-3-1 Exceptions shall be raised only after start-up and before termination" name="AUTOSAR-M15_3_1" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-6 Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors" name="AUTOSAR-A12_1_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-3 Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases" name="AUTOSAR-M15_3_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M11-0-1 Member data in non-POD class types shall be private" name="AUTOSAR-M11_0_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-2 Variables shall not be implicitly captured in a lambda expression" name="AUTOSAR-A5_1_2" rules="1" total="0"/>
               <Category authTot="3;" authUrg="1;" desc="AUTOSAR A5-1-1 Literal values shall not be used apart from type initialization, otherwise symbolic names shall be used instead" name="AUTOSAR-A5_1_1" rules="1" total="3"/>
               <Category authTot="17;" authUrg="0;" desc="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant" name="AUTOSAR-A4_10_1" rules="2" total="17"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-6 Return type of a non-void return type lambda expression should be explicitly specified" name="AUTOSAR-A5_1_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-4 A lambda expression object shall not outlive any of its reference-captured objects" name="AUTOSAR-A5_1_4" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-3 Parameter list (possibly empty) shall be included in every lambda expression" name="AUTOSAR-A5_1_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-3-4 Catch-all (ellipsis and std::exception) handlers shall be used only in (a) main, (b) task main functions, (c) in functions that are supposed to isolate independent components and (d) when calling third-party code that uses exceptions not according to AUTOSAR C++14 guidelines" name="AUTOSAR-A15_3_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-3-5 A class type exception shall be caught by reference or const reference" name="AUTOSAR-A15_3_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-3-2 If a function throws an exception, it shall be handled when meaningful actions can be taken, otherwise it shall be propagated" name="AUTOSAR-A15_3_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M2-13-2 Octal constants (other than zero) and octal escape sequences (other than &quot;\0&quot; ) shall not be used" name="AUTOSAR-M2_13_2" rules="2" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A15-3-3 Main function and a task main function shall catch at least: base class exceptions from all third-party libraries used, std::exception and all otherwise unhandled exceptions" name="AUTOSAR-A15_3_3" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-6-1 Functions declared with the [[noreturn]] attribute shall not return" name="AUTOSAR-A7_6_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M2-13-4 Literal suffixes shall be upper case" name="AUTOSAR-M2_13_4" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR M2-13-3 A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" name="AUTOSAR-M2_13_3" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-19-1 Evaluation of constant unsigned integer expressions shall not lead to wrap-around" name="AUTOSAR-M5_19_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A14-5-1 A template constructor shall not participate in overload resolution for a single argument of the enclosing class type" name="AUTOSAR-A14_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-2-1 Non-virtual member functions shall not be redefined in derived classes" name="AUTOSAR-A10_2_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-2-1 When declaring function templates, the trailing return type syntax shall be used if the return type depends on the type of parameters" name="AUTOSAR-A8_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A14-5-3 A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations." name="AUTOSAR-A14_5_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-6 &quot;forward&quot; parameters declared as T &amp;&amp; shall always be forwarded" name="AUTOSAR-A8_4_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-5 Arguments to a function-like macro shall not contain tokens that look like pre-processing directives" name="AUTOSAR-M16_0_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-5 &quot;consume&quot; parameters declared as X &amp;&amp; shall always be moved from" name="AUTOSAR-A8_4_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-8 Output parameters shall not be used" name="AUTOSAR-A8_4_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-4-1 All usage of assembler shall be documented" name="AUTOSAR-M7_4_1" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A8-4-7 &quot;in&quot; parameters for &quot;cheap to copy&quot; types shall be passed by value" name="AUTOSAR-A8_4_7" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-2 Macros shall only be #define'd or #undef'd in the global namespace" name="AUTOSAR-M16_0_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-6 Copy and move constructors and copy assignment and move assignment operators shall be declared protected or defined &quot;=delete&quot; in base class" name="AUTOSAR-A12_8_6" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A3-3-2 Static and thread-local objects shall be constant-initialized" name="AUTOSAR-A3_3_2" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-2 All exit paths from a function with non-void return type shall have an explicit return statement with an expression" name="AUTOSAR-A8_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-1 #include directives in a file shall only be preceded by other pre-processor directives or comments" name="AUTOSAR-M16_0_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-4-3 Assembly language shall be encapsulated and isolated" name="AUTOSAR-M7_4_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-7 Assignment operators should be declared with the ref-qualifier &amp;" name="AUTOSAR-A12_8_7" rules="1" total="0"/>
               <Category authTot="16;" authUrg="0;" desc="AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file" name="AUTOSAR-A3_3_1" rules="2" total="16"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-1 Functions shall not be defined using the ellipsis notation" name="AUTOSAR-A8_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-4-2 Assembler instructions shall only be introduced using the asm declaration" name="AUTOSAR-M7_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-4 Multiple output values from a function should be returned as a struct or tuple" name="AUTOSAR-A8_4_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-3 Common ways of passing parameters should be used" name="AUTOSAR-A8_4_3" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-4-1 The asm declaration shall not be used" name="AUTOSAR-A7_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-5-1 Trigraphs shall not be used" name="AUTOSAR-A2_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-5-2 Digraphs shall not be used" name="AUTOSAR-A2_5_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-9 &quot;in-out&quot; parameters declared as T &amp; shall be modified" name="AUTOSAR-A8_4_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-8 If the # token appears as the first token on a line, then it shall be immediately followed by a pre-processing token" name="AUTOSAR-M16_0_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-7 Undefined macro identifiers shall not be used in #if or #elif pre-processor directives, except as operands to the defined operator" name="AUTOSAR-M16_0_7" rules="1" total="0"/>
               <Category authTot="8;" authUrg="0;" desc="AUTOSAR M16-0-6 In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" name="AUTOSAR-M16_0_6" rules="1" total="8"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-0-2 Bitwise operations and operations that assume data representation in memory shall not be performed on objects" name="AUTOSAR-A12_0_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-3-3 A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" name="AUTOSAR-M10_3_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-6-3 The continue statement shall only be used within a well-formed for loop" name="AUTOSAR-M6_6_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-3-2 If a function has internal linkage then all re-declarations shall include the static storage class specifier" name="AUTOSAR-M3_3_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-6-2 The goto statement shall jump to a label declared later in the same function body" name="AUTOSAR-M6_6_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-0-1 If a class declares a copy or move operation, or a destructor, either via &quot;=default&quot;, &quot;=delete&quot;, or via a user-provided declaration, then all others of these five special member functions shall be declared as well" name="AUTOSAR-A12_0_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-6-1 Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" name="AUTOSAR-M6_6_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-2 User-defined copy and move assignment operators should use user-defined no-throw swap function" name="AUTOSAR-A12_8_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-3 Moved-from object shall not be read-accessed" name="AUTOSAR-A12_8_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-4 Move constructor shall not initialize its class members and base classes using copy semantics" name="AUTOSAR-A12_8_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-8 Lambda expressions should not be defined inside another lambda expression" name="AUTOSAR-A5_1_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-5 A copy assignment and a move assignment operators shall handle self-assignment" name="AUTOSAR-A12_8_5" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-7 A lambda shall not be an operand to decltype or typeid" name="AUTOSAR-A5_1_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M19-3-1 The error indicator errno shall not be used" name="AUTOSAR-M19_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-1 Move and copy constructors shall move and respectively copy base classes and data members of a class, without any side effects" name="AUTOSAR-A12_8_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-3 The declaration of objects shall contain no more than two levels of pointer indirection" name="AUTOSAR-A5_0_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-9 An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression" name="AUTOSAR-M5_0_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-8-1 The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand" name="AUTOSAR-M5_8_1" rules="2" total="0"/>
               <Category authTot="8;" authUrg="0;" desc="AUTOSAR A0-1-1 A project shall not contain instances of non-volatile variables being given values that are not subsequently used" name="AUTOSAR-A0_1_1" rules="1" total="8"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-2 The condition of an if-statement and the condition of an iteration statement shall have type bool" name="AUTOSAR-A5_0_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-8 An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" name="AUTOSAR-M5_0_8" rules="2" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used" name="AUTOSAR-A0_1_2" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-1 The value of an expression shall be the same under any order of evaluation that the standard permits" name="AUTOSAR-A5_0_1" rules="7" total="0"/>
               <Category authTot="9;" authUrg="0;" desc="AUTOSAR M0-1-4 A project shall not contain non-volatile POD variables having only one use" name="AUTOSAR-M0_1_4" rules="1" total="9"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-1-3 Every function defined in an anonymous namespace, or static function with internal linkage, or private member function shall be used" name="AUTOSAR-A0_1_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-1-2 A project shall not contain infeasible paths" name="AUTOSAR-M0_1_2" rules="29" total="0"/>
               <Category authTot="3;" authUrg="0;" desc="AUTOSAR M5-0-5 There shall be no implicit floating-integral conversions" name="AUTOSAR-M5_0_5" rules="2" total="3"/>
               <Category authTot="5;" authUrg="0;" desc="AUTOSAR A27-0-4 C-style strings shall not be used" name="AUTOSAR-A27_0_4" rules="5" total="5"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M0-1-3 A project shall not contain unused variables" name="AUTOSAR-M0_1_3" rules="4" total="1"/>
               <Category authTot="20;" authUrg="0;" desc="AUTOSAR M5-0-4 An implicit integral conversion shall not change the signedness of the underlying type" name="AUTOSAR-M5_0_4" rules="1" total="20"/>
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A18-5-2 Non-placement new or delete expressions shall not be used" name="AUTOSAR-A18_5_2" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A27-0-3 Alternate input and output operations on a file stream shall not be used without an intervening flush or positioning call" name="AUTOSAR-A27_0_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-7 There shall be no explicit floating-integral conversions of a cvalue expression" name="AUTOSAR-M5_0_7" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-1 Functions malloc, calloc, realloc and free shall not be used" name="AUTOSAR-A18_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A27-0-2 A C-style string shall guarantee sufficient space for data and the null terminator" name="AUTOSAR-A27_0_2" rules="5" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-4 Pointer arithmetic shall not be used with pointers to non-final classes" name="AUTOSAR-A5_0_4" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-1-1 A project shall not contain unreachable code" name="AUTOSAR-M0_1_1" rules="7" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-6 An implicit integral or floating-point conversion shall not reduce the size of the underlying type" name="AUTOSAR-M5_0_6" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-6-1 Digit sequences separators ' shall only be used as follows: (1) for decimal, every 3 digits, (2) for hexadecimal, every 2 digits, (3) for binary, every 4 digits" name="AUTOSAR-A13_6_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A27-0-1 Inputs from independent components shall be validated" name="AUTOSAR-A27_0_1" rules="8" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A0-1-4 There shall be no unused named parameters in non-virtual functions" name="AUTOSAR-A0_1_4" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-1-5 There shall be no unused named parameters in the set of parameters for a virtual function and all the functions that override it" name="AUTOSAR-A0_1_5" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A0-1-6 There should be no unused type declarations" name="AUTOSAR-A0_1_6" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-3-5 A user-defined assignment operator shall not be virtual" name="AUTOSAR-A10_3_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-2-1 Constructors that are not noexcept shall not be invoked before program startup" name="AUTOSAR-A15_2_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-5-2 Functions shall not call themselves, either directly or indirectly" name="AUTOSAR-A7_5_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-18-1 The comma operator shall not be used" name="AUTOSAR-M5_18_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-5-1 A function shall not return a reference or a pointer to a parameter that is passed by reference to const" name="AUTOSAR-A7_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-4 If a project has sized or unsized version of operator &quot;delete&quot; globally defined, then both sized and unsized versions shall be defined" name="AUTOSAR-A18_5_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-3 The form of the delete expression shall match the form of the new expression used to allocate the memory" name="AUTOSAR-A18_5_3" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-3 A cvalue expression shall not be implicitly converted to a different underlying type" name="AUTOSAR-M5_0_3" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-5 Memory management functions shall ensure the following: (a) deterministic behavior resulting with the existence of worst-case execution time, (b) avoiding memory fragmentation, (c) avoid running out of memory, (d) avoiding mismatched allocations or deallocations, (e) no dependence on non-deterministic calls to kernel" name="AUTOSAR-A18_5_5" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-2 Limited dependence should be placed on C++ operator precedence rules in expressions" name="AUTOSAR-M5_0_2" rules="6" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A10-3-1 Virtual function declaration shall contain exactly one of the three specifiers:" name="AUTOSAR-A10_3_1" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-8 Objects that do not outlive a function shall have automatic storage duration" name="AUTOSAR-A18_5_8" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A10-3-2 Each overriding virtual function shall be declared with the override or final specifier" name="AUTOSAR-A10_3_2" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-3-3 Virtual functions shall not be introduced in a final class" name="AUTOSAR-A10_3_3" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M0-1-8 All functions with void return type shall have external side effect(s)" name="AUTOSAR-M0_1_8" rules="2" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-9 Custom implementations of dynamic memory allocation and deallocation functions shall meet the semantic requirements specified in the corresponding &quot;Required behaviour&quot; clause from the C++ Standard" name="AUTOSAR-A18_5_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-1-9 There shall be no dead code" name="AUTOSAR-M0_1_9" rules="1" total="0"/>
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Flow Analysis" name="BD" rules="136" total="0">
               <Category authTot="0;" authUrg="0;" desc="Incorrect API usage" name="BD-API" rules="7" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Miscellaneous" name="BD-MISC" rules="2" total="0"/>
               <Category authTot="12;" authUrg="0;" desc="Possible Bugs" name="BD-PB" rules="73" total="12"/>
               <Category authTot="1;" authUrg="0;" desc="Resources" name="BD-RES" rules="8" total="1"/>
               <Category authTot="2;" authUrg="0;" desc="Security" name="BD-SECURITY" rules="20" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Containers" name="BD-CO" rules="5" total="0"/>
               <Category authTot="7;" authUrg="0;" desc="Threads &amp; Synchronization" name="BD-TRS" rules="21" total="7"/>
            </Category>
            <Category authTot="9;" authUrg="9;" desc="Code Duplication Detection" name="CDD" rules="4" total="9"/>
            <Category authTot="0;" authUrg="0;" desc="SEI CERT C" name="CERT_C" rules="369" total="0">
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC12_C (REC) Detect and remove code that has no effect or is never executed" name="CERT_C-MSC12" rules="11" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC11_C (REC) Incorporate diagnostic tests using assertions" name="CERT_C-MSC11" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC14_C (REC) Do not introduce unnecessary platform dependencies" name="CERT_C-MSC14" rules="2" total="0"/>
               <Category authTot="8;" authUrg="0;" desc="CERT-MSC13_C (REC) Detect and remove unused values" name="CERT_C-MSC13" rules="1" total="8"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC15_C (REC) Do not depend on undefined behavior" name="CERT_C-MSC15" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-WIN00_C (REC) Be specific when dynamically loading libraries" name="CERT_C-WIN00" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-FLP03_C (REC) Detect and handle floating-point errors" name="CERT_C-FLP03" rules="4" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC17_C (REC) Finish every set of statements associated with a case label with a break statement" name="CERT_C-MSC17" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP02_C (REC) Avoid using floating-point numbers when precise computation is needed" name="CERT_C-FLP02" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-MSC19_C (REC) For functions that return an array, prefer returning an empty array over a null value" name="CERT_C-MSC19" rules="2" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP06_C (REC) Convert integers to floating point for floating-point operations" name="CERT_C-FLP06" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT02_C (REC) Understand integer conversion rules" name="CERT_C-INT02" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP00_C (REC) Understand the limitations of floating-point numbers" name="CERT_C-FLP00" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-API01_C (REC) Avoid laying out strings in memory directly before sensitive data" name="CERT_C-API01" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-API02_C (REC) Functions that read or write to or from an array should take an argument to specify the source or target size" name="CERT_C-API02" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT08_C (REC) Verify that all integer values are in range" name="CERT_C-INT08" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT09_C (REC) Ensure enumeration constants map to unique values" name="CERT_C-INT09" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT07_C (REC) Use only explicitly signed or unsigned char type for numeric values" name="CERT_C-INT07" rules="2" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-INT04_C (REC) Enforce limits on integer values originating from tainted sources" name="CERT_C-INT04" rules="3" total="1"/>
               <Category authTot="2;" authUrg="0;" desc="CERT-INT05_C (REC) Do not use input functions to convert character data if they cannot handle all possible inputs" name="CERT_C-INT05" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV30_C (RULE) Do not modify the object referenced by the return value of certain functions" name="CERT_C-ENV30" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC22_C (REC) Use the setjmp(), longjmp() facility securely" name="CERT_C-MSC22" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="CERT-MSC24_C (REC) Do not use deprecated or obsolescent functions" name="CERT_C-MSC24" rules="4" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT13_C (REC) Use bitwise operators only on unsigned operands" name="CERT_C-INT13" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT12_C (REC) Do not make assumptions about the type of a plain int bit-field when used in an expression" name="CERT_C-INT12" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT10_C (REC) Do not assume a positive remainder when using the % operator" name="CERT_C-INT10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV33_C (RULE) Do not call system()" name="CERT_C-ENV33" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV34_C (RULE) Do not store pointers returned by certain functions" name="CERT_C-ENV34" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT18_C (REC) Evaluate integer expressions in a larger size before comparing or assigning to that size" name="CERT_C-INT18" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV31_C (RULE) Do not rely on an environment pointer following an operation that may invalidate it" name="CERT_C-ENV31" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT15_C (REC) Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types" name="CERT_C-INT15" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC30_C (RULE) Do not use the rand() function for generating pseudorandom numbers" name="CERT_C-MSC30" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV32_C (RULE) All exit handlers must return normally" name="CERT_C-ENV32" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT16_C (REC) Do not make assumptions about representation of signed integers" name="CERT_C-INT16" rules="2" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="CERT-MEM00_C (REC) Allocate and free memory in the same module, at the same level of abstraction" name="CERT_C-MEM00" rules="5" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM01_C (REC) Store a new value in pointers immediately after free()" name="CERT_C-MEM01" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG30_C (RULE) Call only asynchronous-safe functions within signal handlers" name="CERT_C-SIG30" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM04_C (REC) Beware of zero-length allocations" name="CERT_C-MEM04" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM05_C (REC) Avoid large stack allocations" name="CERT_C-MEM05" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG31_C (RULE) Do not access shared objects in signal handlers" name="CERT_C-SIG31" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM02_C (REC) Immediately cast the result of a memory allocation function call into a pointer to the allocated type" name="CERT_C-MEM02" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG34_C (RULE) Do not call signal() from within interruptible signal handlers" name="CERT_C-SIG34" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM03_C (REC) Clear sensitive information stored in reusable resources" name="CERT_C-MEM03" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG35_C (RULE) Do not return from a computational exception signal handler" name="CERT_C-SIG35" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE31_C (RULE) Avoid side effects in arguments to unsafe macros" name="CERT_C-PRE31" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE32_C (RULE) Do not use preprocessor directives in invocations of function-like macros" name="CERT_C-PRE32" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE30_C (RULE) Do not create a universal character name through concatenation" name="CERT_C-PRE30" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV02_C (REC) Beware of multiple environment variables with the same effective name" name="CERT_C-ENV02" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV01_C (REC) Do not make assumptions about the size of an environment variable" name="CERT_C-ENV01" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC01_C (REC) Strive for logical completeness" name="CERT_C-MSC01" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC04_C (REC) Use comments consistently and in a readable fashion" name="CERT_C-MSC04" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC07_C (REC) Detect and remove dead code" name="CERT_C-MSC07" rules="9" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC09_C (REC) Character encoding: Use subset of ASCII for safety" name="CERT_C-MSC09" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT35_C (RULE) Use correct integer precisions" name="CERT_C-INT35" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT36_C (RULE) Converting a pointer to integer or integer to pointer" name="CERT_C-INT36" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-INT33_C (RULE) Ensure that division and remainder operations do not result in divide-by-zero errors" name="CERT_C-INT33" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT34_C (RULE) Do not shift an expression by a negative number of bits or by greater than or equal to the number of bits that exist in the operand" name="CERT_C-INT34" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT31_C (RULE) Ensure that integer conversions do not result in lost or misinterpreted data" name="CERT_C-INT31" rules="16" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT32_C (RULE) Ensure that operations on signed integers do not result in overflow" name="CERT_C-INT32" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT30_C (RULE) Ensure that unsigned integer operations do not wrap" name="CERT_C-INT30" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO34_C (RULE) Distinguish between characters read from a file and EOF or WEOF" name="CERT_C-FIO34" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO32_C (RULE) Do not perform operations on devices that are only appropriate for files" name="CERT_C-FIO32" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO38_C (RULE) Do not copy a FILE object" name="CERT_C-FIO38" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO39_C (RULE) Do not alternately input and output from a stream without an intervening flush or positioning call" name="CERT_C-FIO39" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO37_C (RULE) Do not assume that fgets() or fgetws() returns a nonempty string when successful" name="CERT_C-FIO37" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP44_C (RULE) Do not rely on side effects in operands to sizeof, _Alignof, or _Generic" name="CERT_C-EXP44" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP45_C (RULE) Do not perform assignments in selection statements" name="CERT_C-EXP45" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP42_C (RULE) Do not compare padding data" name="CERT_C-EXP42" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP43_C (RULE) Avoid undefined behavior when using restrict-qualified pointers" name="CERT_C-EXP43" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO30_C (RULE) Exclude user input from format strings" name="CERT_C-FIO30" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP46_C (RULE) Do not use a bitwise operator with a Boolean-like operand" name="CERT_C-EXP46" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP47_C (RULE) Do not call va_arg with an argument of the incorrect type" name="CERT_C-EXP47" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-MEM12_C (REC) Consider using a goto chain when leaving a function on error when using and releasing resources" name="CERT_C-MEM12" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR34_C (RULE) Cast characters to unsigned char before converting to larger integer sizes" name="CERT_C-STR34" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR31_C (RULE) Guarantee that storage for strings has sufficient space for character data and the null terminator" name="CERT_C-STR31" rules="5" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR32_C (RULE) Do not pass a non-null-terminated character sequence to a library function that expects a string" name="CERT_C-STR32" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR30_C (RULE) Do not attempt to modify string literals" name="CERT_C-STR30" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO45_C (RULE) Avoid TOCTOU race conditions while accessing files" name="CERT_C-FIO45" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO46_C (RULE) Do not access a closed file" name="CERT_C-FIO46" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO44_C (RULE) Only use values for fsetpos() that are returned from fgetpos()" name="CERT_C-FIO44" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR37_C (RULE) Arguments to character-handling functions must be representable as an unsigned char" name="CERT_C-STR37" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR38_C (RULE) Do not confuse narrow and wide character strings and functions" name="CERT_C-STR38" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO47_C (RULE) Use valid format strings" name="CERT_C-FIO47" rules="6" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO41_C (RULE) Do not call getc(), putc(), getwc(), or putwc() with a stream argument that has side effects" name="CERT_C-FIO41" rules="2" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-FIO42_C (RULE) Close files when they are no longer needed" name="CERT_C-FIO42" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO40_C (RULE) Reset strings on fgets() or fgetws() failure" name="CERT_C-FIO40" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM07_C (REC) Ensure that the arguments to calloc(), when multiplied, do not wrap" name="CERT_C-MEM07" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC32_C (RULE) Properly seed pseudorandom number generators" name="CERT_C-MSC32" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC33_C (RULE) Do not pass invalid data to the asctime() function" name="CERT_C-MSC33" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC38_C (RULE) Do not treat a predefined identifier as an object if it might only be implemented as a macro" name="CERT_C-MSC38" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC37_C (RULE) Ensure that control never reaches the end of a non-void function" name="CERT_C-MSC37" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC39_C (RULE) Do not call va_arg() on a va_list that has an indeterminate value" name="CERT_C-MSC39" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP30_C (RULE) Do not depend on the order of evaluation for side effects" name="CERT_C-EXP30" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON40_C (RULE) Do not refer to an atomic variable twice in an expression" name="CERT_C-CON40" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP20_C (REC) Perform explicit tests to determine success, true and false, and equality" name="CERT_C-EXP20" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON43_C (RULE) Do not allow data races in multithreaded code" name="CERT_C-CON43" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON41_C (RULE) Wrap functions that can fail spuriously in a loop" name="CERT_C-CON41" rules="1" total="0"/>
               <Category authTot="3;" authUrg="0;" desc="CERT-MSC41_C (RULE) Never hard code sensitive information" name="CERT_C-MSC41" rules="1" total="3"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC40_C (RULE) Do not violate constraints" name="CERT_C-MSC40" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM33_C (RULE) Allocate and copy structures containing a flexible array member dynamically" name="CERT_C-MEM33" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM34_C (RULE) Only free memory allocated dynamically" name="CERT_C-MEM34" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-MEM31_C (RULE) Free dynamically allocated memory when no longer needed" name="CERT_C-MEM31" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM35_C (RULE) Allocate sufficient memory for an object" name="CERT_C-MEM35" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG01_C (REC) Understand implementation-specific details regarding signal handler persistence" name="CERT_C-SIG01" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM36_C (RULE) Do not modify the alignment of objects by calling realloc()" name="CERT_C-MEM36" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG00_C (REC) Mask signals handled by noninterruptible signal handlers" name="CERT_C-SIG00" rules="1" total="0"/>
               <Category authTot="9;" authUrg="0;" desc="CERT-API00_C (REC) Functions should validate their parameters" name="CERT_C-API00" rules="1" total="9"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO24_C (REC) Do not open a file that is already open" name="CERT_C-FIO24" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG02_C (REC) Avoid using signals to implement normal functionality" name="CERT_C-SIG02" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO21_C (REC) Do not create temporary files in shared directories" name="CERT_C-FIO21" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-FIO22_C (REC) Close files before spawning processes" name="CERT_C-FIO22" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP40_C (RULE) Do not modify constant objects" name="CERT_C-EXP40" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM30_C (RULE) Do not access freed memory" name="CERT_C-MEM30" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP33_C (RULE) Do not read uninitialized memory" name="CERT_C-EXP33" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-EXP34_C (RULE) Do not dereference null pointers" name="CERT_C-EXP34" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP32_C (RULE) Do not access a volatile object through a nonvolatile reference" name="CERT_C-EXP32" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON32_C (RULE) Prevent data races when accessing bit-fields from multiple threads" name="CERT_C-CON32" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP37_C (RULE) Call functions with the correct number and type of arguments" name="CERT_C-EXP37" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON33_C (RULE) Avoid race conditions when using library functions" name="CERT_C-CON33" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-CON30_C (RULE) Clean up thread-specific storage" name="CERT_C-CON30" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP35_C (RULE) Do not modify objects with temporary lifetime" name="CERT_C-EXP35" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON31_C (RULE) Do not destroy a mutex while it is locked" name="CERT_C-CON31" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP36_C (RULE) Do not cast pointers into more strictly aligned pointer types" name="CERT_C-EXP36" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON36_C (RULE) Wrap functions that can spuriously wake up in a loop" name="CERT_C-CON36" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON37_C (RULE) Do not call signal() in a multithreaded program" name="CERT_C-CON37" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON34_C (RULE) Declare objects shared between threads with appropriate storage durations" name="CERT_C-CON34" rules="1" total="0"/>
               <Category authTot="3;" authUrg="0;" desc="CERT-EXP39_C (RULE) Do not access a variable through a pointer of an incompatible type" name="CERT_C-EXP39" rules="6" total="3"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON35_C (RULE) Avoid deadlock by locking in a predefined order" name="CERT_C-CON35" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON38_C (RULE) Preserve thread safety and liveness when using condition variables" name="CERT_C-CON38" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON39_C (RULE) Do not join or detach a thread that was previously joined or detached" name="CERT_C-CON39" rules="1" total="0"/>
               <Category authTot="8;" authUrg="0;" desc="CERT-DCL22_C (REC) Use volatile for data that cannot be cached" name="CERT_C-DCL22" rules="1" total="8"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL20_C (REC) Explicitly specify void when a function accepts no arguments" name="CERT_C-DCL20" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP00_C (REC) Use parentheses for precedence of operation" name="CERT_C-EXP00" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP05_C (REC) Do not cast away a const qualification" name="CERT_C-EXP05" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP02_C (REC) Be aware of the short-circuit behavior of the logical AND and OR operators" name="CERT_C-EXP02" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP08_C (REC) Ensure pointer arithmetic is used correctly" name="CERT_C-EXP08" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL19_C (REC) Minimize the scope of variables and functions" name="CERT_C-DCL19" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL18_C (REC) Do not begin integer constants with 0 when specifying a decimal value" name="CERT_C-DCL18" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL12_C (REC) Implement abstract data types using opaque types" name="CERT_C-DCL12" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO01_C (REC) Be careful using functions that use file names for identification" name="CERT_C-FIO01" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL11_C (REC) Understand the type issues associated with variadic functions" name="CERT_C-DCL11" rules="6" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL10_C (REC) Maintain the contract between the writer and caller of variadic functions" name="CERT_C-DCL10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL16_C (REC) Use &quot;L,&quot; not &quot;l,&quot; to indicate a long value" name="CERT_C-DCL16" rules="1" total="0"/>
               <Category authTot="16;" authUrg="0;" desc="CERT-DCL15_C (REC) Declare file-scope objects or functions that do not need external linkage as static" name="CERT_C-DCL15" rules="1" total="16"/>
               <Category authTot="3;" authUrg="0;" desc="CERT-DCL13_C (REC) Declare function parameters that are pointers to values not changed by the function as const" name="CERT_C-DCL13" rules="1" total="3"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-EXP12_C (REC) Do not ignore values returned by functions" name="CERT_C-EXP12" rules="2" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP10_C (REC) Do not depend on the order of evaluation of subexpressions or the order in which side effects take place" name="CERT_C-EXP10" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP15_C (REC) Do not place a semicolon on the same line as an if, for, or while statement" name="CERT_C-EXP15" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP16_C (REC) Do not compare function pointers to constant values" name="CERT_C-EXP16" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP14_C (REC) Beware of integer promotion when performing bitwise operations on integer types smaller than int" name="CERT_C-EXP14" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP19_C (REC) Use braces for the body of an if, for, or while statement" name="CERT_C-EXP19" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR00_C (REC) Represent characters using an appropriate type" name="CERT_C-STR00" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR09_C (REC) Don't assume numeric values for expressions with type plain character" name="CERT_C-STR09" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="CERT-STR07_C (REC) Use the bounds-checking interfaces for string manipulation" name="CERT_C-STR07" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR04_C (REC) Use plain char for characters in the basic character set" name="CERT_C-STR04" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR05_C (REC) Use pointers to const when referring to string literals" name="CERT_C-STR05" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR02_C (REC) Sanitize data passed to complex subsystems" name="CERT_C-STR02" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR03_C (REC) Do not inadvertently truncate a string" name="CERT_C-STR03" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL41_C (RULE) Do not declare variables inside a switch statement before the first case label" name="CERT_C-DCL41" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL40_C (RULE) Do not create incompatible declarations of the same function or object" name="CERT_C-DCL40" rules="2" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-CON01_C (REC) Acquire and release synchronization primitives in the same module, at the same level of abstraction" name="CERT_C-CON01" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON02_C (REC) Do not use volatile as a synchronization primitive" name="CERT_C-CON02" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON05_C (REC) Do not perform operations that can block while holding a lock" name="CERT_C-CON05" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR11_C (REC) Do not specify the bound of a character array initialized with a string literal" name="CERT_C-STR11" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL39_C (RULE) Avoid information leakage when passing a structure across a trust boundary" name="CERT_C-DCL39" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR10_C (REC) Do not concatenate different type of string literals" name="CERT_C-STR10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL31_C (RULE) Declare identifiers before using them" name="CERT_C-DCL31" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL38_C (RULE) Use the correct syntax when declaring a flexible array member" name="CERT_C-DCL38" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL37_C (RULE) Do not declare or define a reserved identifier" name="CERT_C-DCL37" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL36_C (RULE) Do not declare an identifier with conflicting linkage classifications" name="CERT_C-DCL36" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL30_C (RULE) Declare objects with appropriate storage durations" name="CERT_C-DCL30" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR01_C (REC) Do not apply the sizeof operator to a pointer when taking the size of an array" name="CERT_C-ARR01" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR02_C (REC) Explicitly specify array bounds, even if implicitly defined by an initializer" name="CERT_C-ARR02" rules="1" total="0"/>
               <Category authTot="8;" authUrg="0;" desc="CERT-PRE02_C (REC) Macro replacement lists should be parenthesized" name="CERT_C-PRE02" rules="1" total="8"/>
               <Category authTot="8;" authUrg="0;" desc="CERT-PRE00_C (REC) Prefer inline or static functions to function-like macros" name="CERT_C-PRE00" rules="1" total="8"/>
               <Category authTot="8;" authUrg="0;" desc="CERT-PRE01_C (REC) Use parentheses within macros around parameter names" name="CERT_C-PRE01" rules="1" total="8"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE06_C (REC) Enclose header files in an include guard" name="CERT_C-PRE06" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE07_C (REC) Avoid using repeated question marks" name="CERT_C-PRE07" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-POS54_C (RULE) Detect and handle POSIX library errors" name="CERT_C-POS54" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR30_C (RULE) Set errno to zero before calling a library function known to set errno, and check errno only after the function returns a value indicating failure" name="CERT_C-ERR30" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR32_C (RULE) Do not rely on indeterminate values of errno" name="CERT_C-ERR32" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="CERT-ERR33_C (RULE) Detect and handle standard library errors" name="CERT_C-ERR33" rules="2" total="2"/>
               <Category authTot="2;" authUrg="0;" desc="CERT-ERR34_C (RULE) Detect errors when converting a string to a number" name="CERT_C-ERR34" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS51_C (RULE) Avoid deadlock with POSIX threads by locking in predefined order" name="CERT_C-POS51" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS50_C (RULE) Declare objects shared between POSIX threads with appropriate storage durations" name="CERT_C-POS50" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS53_C (RULE) Do not use more than one mutex for concurrent waiting operations on a condition variable" name="CERT_C-POS53" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS52_C (RULE) Do not perform operations that can block while holding a POSIX lock" name="CERT_C-POS52" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR06_C (REC) Understand the termination behavior of assert() and abort()" name="CERT_C-ERR06" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="CERT-ERR07_C (REC) Prefer functions that support error checking over equivalent functions that don't" name="CERT_C-ERR07" rules="2" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL06_C (REC) Use meaningful symbolic constants to represent literal values" name="CERT_C-DCL06" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL01_C (REC) Do not reuse variable names in subscopes" name="CERT_C-DCL01" rules="2" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-DCL00_C (REC) Const-qualify immutable objects" name="CERT_C-DCL00" rules="2" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL05_C (REC) Use typedefs of non-pointer types only" name="CERT_C-DCL05" rules="1" total="0"/>
               <Category authTot="7;" authUrg="0;" desc="CERT-DCL04_C (REC) Do not declare more than one variable per declaration" name="CERT_C-DCL04" rules="1" total="7"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL02_C (REC) Use visually distinct identifiers" name="CERT_C-DCL02" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS44_C (RULE) Do not use signals to terminate threads" name="CERT_C-POS44" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS48_C (RULE) Do not unlock or destroy another POSIX thread's mutex" name="CERT_C-POS48" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS47_C (RULE) Do not use threads that can be canceled asynchronously" name="CERT_C-POS47" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS49_C (RULE) When data must be accessed by multiple threads, provide a mutex and guarantee no adjacent data is also accessed" name="CERT_C-POS49" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-WIN30_C (RULE) Properly pair allocation and deallocation functions" name="CERT_C-WIN30" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR01_C (REC) Use ferror() rather than errno to check for FILE stream errors" name="CERT_C-ERR01" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="CERT-ERR02_C (REC) Avoid in-band error indicators" name="CERT_C-ERR02" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR04_C (REC) Choose an appropriate termination strategy" name="CERT_C-ERR04" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR05_C (REC) Application-independent code should provide error detection without dictating error handling" name="CERT_C-ERR05" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP37_C (RULE) Do not use object representations to compare floating-point values" name="CERT_C-FLP37" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP36_C (RULE) Preserve precision when converting integral values to floating-point type" name="CERT_C-FLP36" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP34_C (RULE) Ensure that floating-point conversions are within range of the new type" name="CERT_C-FLP34" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS33_C (RULE) Do not use vfork()" name="CERT_C-POS33" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR32_C (RULE) Ensure size arguments for variable length arrays are in a valid range" name="CERT_C-ARR32" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS35_C (RULE) Avoid race conditions while checking for the existence of a symbolic link" name="CERT_C-POS35" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS34_C (RULE) Do not call putenv() with a pointer to an automatic variable as the argument" name="CERT_C-POS34" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR30_C (RULE) Do not form or use out-of-bounds pointers or array subscripts" name="CERT_C-ARR30" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS37_C (RULE) Ensure that privilege relinquishment is successful" name="CERT_C-POS37" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP32_C (RULE) Prevent or detect domain and range errors in math functions" name="CERT_C-FLP32" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS36_C (RULE) Observe correct revocation order while relinquishing privileges" name="CERT_C-POS36" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS39_C (RULE) Use the correct byte ordering when transferring data between systems" name="CERT_C-POS39" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP30_C (RULE) Do not use floating-point variables as loop counters" name="CERT_C-FLP30" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS38_C (RULE) Beware of race conditions when using fork and file descriptors" name="CERT_C-POS38" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR39_C (RULE) Do not add or subtract a scaled integer to a pointer" name="CERT_C-ARR39" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR38_C (RULE) Guarantee that library functions do not form invalid pointers" name="CERT_C-ARR38" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR37_C (RULE) Do not add or subtract an integer to a pointer to a non-array object" name="CERT_C-ARR37" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR36_C (RULE) Do not subtract or compare two pointers that do not refer to the same array" name="CERT_C-ARR36" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS30_C (RULE) Use the readlink() function properly" name="CERT_C-POS30" rules="3" total="0"/>
            </Category>
            <Category authTot="0;" authUrg="0;" desc="SEI CERT C++" name="CERT_CPP" rules="143" total="0">
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL55_CPP (RULE) Avoid information leakage when passing a class object across a trust boundary" name="CERT_CPP-DCL55" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR52_CPP (RULE) Do not use setjmp() or longjmp()" name="CERT_CPP-ERR52" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL56_CPP (RULE) Avoid cycles during initialization of static objects" name="CERT_CPP-DCL56" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR51_CPP (RULE) Handle all exceptions" name="CERT_CPP-ERR51" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON56_CPP (RULE) Do not speculatively lock a non-recursive mutex that is already owned by the calling thread" name="CERT_CPP-CON56" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL53_CPP (RULE) Do not write syntactically ambiguous declarations" name="CERT_CPP-DCL53" rules="3" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="CERT-ERR50_CPP (RULE) Do not abruptly terminate the program" name="CERT_CPP-ERR50" rules="14" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL54_CPP (RULE) Overload allocation and deallocation functions as a pair in the same scope" name="CERT_CPP-DCL54" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL59_CPP (RULE) Do not define an unnamed namespace in a header file" name="CERT_CPP-DCL59" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM51_CPP (RULE) Properly deallocate dynamically allocated resources" name="CERT_CPP-MEM51" rules="4" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="CERT-MEM52_CPP (RULE) Detect and handle memory allocation errors" name="CERT_CPP-MEM52" rules="2" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL57_CPP (RULE) Do not let exceptions escape from destructors or deallocation functions" name="CERT_CPP-DCL57" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL58_CPP (RULE) Do not modify the standard namespaces" name="CERT_CPP-DCL58" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM50_CPP (RULE) Do not access freed memory" name="CERT_CPP-MEM50" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON50_CPP (RULE) Do not destroy a mutex while it is locked" name="CERT_CPP-CON50" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM55_CPP (RULE) Honor replacement dynamic storage management requirements" name="CERT_CPP-MEM55" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON51_CPP (RULE) Ensure actively held locks are released on exceptional conditions" name="CERT_CPP-CON51" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR59_CPP (RULE) Do not throw an exception across execution boundaries" name="CERT_CPP-ERR59" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM56_CPP (RULE) Do not store an already-owned pointer value in an unrelated smart pointer" name="CERT_CPP-MEM56" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-ERR58_CPP (RULE) Handle all exceptions thrown before main() begins executing" name="CERT_CPP-ERR58" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM53_CPP (RULE) Explicitly construct and destruct objects when manually managing object lifetime" name="CERT_CPP-MEM53" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-ERR57_CPP (RULE) Do not leak resources when handling exceptions" name="CERT_CPP-ERR57" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM54_CPP (RULE) Provide placement new with properly aligned pointers to sufficient storage capacity" name="CERT_CPP-MEM54" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON54_CPP (RULE) Wrap functions that can spuriously wake up in a loop" name="CERT_CPP-CON54" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR56_CPP (RULE) Guarantee exception safety" name="CERT_CPP-ERR56" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON55_CPP (RULE) Preserve thread safety and liveness when using condition variables" name="CERT_CPP-CON55" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR55_CPP (RULE) Honor exception specifications" name="CERT_CPP-ERR55" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON52_CPP (RULE) Prevent data races when accessing bit-fields from multiple threads" name="CERT_CPP-CON52" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR54_CPP (RULE) Catch handlers should order their parameter types from most derived to least derived" name="CERT_CPP-ERR54" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM57_CPP (RULE) Avoid using default operator new for over-aligned types" name="CERT_CPP-MEM57" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON53_CPP (RULE) Avoid deadlock by locking in a predefined order" name="CERT_CPP-CON53" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR53_CPP (RULE) Do not reference base classes or class data members in a constructor or destructor function-try-block handler" name="CERT_CPP-ERR53" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR53_CPP (RULE) Range check element access" name="CERT_CPP-STR53" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL51_CPP (RULE) Do not declare or define a reserved identifier" name="CERT_CPP-DCL51" rules="6" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR50_CPP (RULE) Guarantee that storage for strings has sufficient space for character data and the null terminator" name="CERT_CPP-STR50" rules="5" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL52_CPP (RULE) Never qualify a reference type with const or volatile" name="CERT_CPP-DCL52" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR52_CPP (RULE) Use valid references, pointers, and iterators to reference elements of a basic_string" name="CERT_CPP-STR52" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL50_CPP (RULE) Do not define a C-style variadic function" name="CERT_CPP-DCL50" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-STR51_CPP (RULE) Do not attempt to create a std::string from a null pointer" name="CERT_CPP-STR51" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP53_CPP (RULE) Write constructor member initializers in the canonical order" name="CERT_CPP-OOP53" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-OOP52_CPP (RULE) Do not delete a polymorphic object without a virtual destructor" name="CERT_CPP-OOP52" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP51_CPP (RULE) Do not slice derived objects" name="CERT_CPP-OOP51" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP50_CPP (RULE) Do not invoke virtual functions from constructors or destructors" name="CERT_CPP-OOP50" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP57_CPP (RULE) Prefer special member functions and overloaded operators to C Standard Library functions" name="CERT_CPP-OOP57" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC50_CPP (RULE) Do not use std::rand() for generating pseudorandom numbers" name="CERT_CPP-MSC50" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP56_CPP (RULE) Honor replacement handler requirements" name="CERT_CPP-OOP56" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC51_CPP (RULE) Ensure your random number generator is properly seeded" name="CERT_CPP-MSC51" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP55_CPP (RULE) Do not use pointer-to-member operators to access nonexistent members" name="CERT_CPP-OOP55" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC52_CPP (RULE) Value-returning functions must return a value from all exit paths" name="CERT_CPP-MSC52" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP54_CPP (RULE) Gracefully handle self-copy assignment" name="CERT_CPP-OOP54" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP58_CPP (RULE) Copy operations must not mutate the source object" name="CERT_CPP-OOP58" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-FIO51_CPP (RULE) Close files when they are no longer needed" name="CERT_CPP-FIO51" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO50_CPP (RULE) Do not alternately input and output from a file stream without an intervening positioning call" name="CERT_CPP-FIO50" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL60_CPP (RULE) Obey the one-definition rule" name="CERT_CPP-DCL60" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP55_CPP (RULE) Do not access a cv-qualified object through a cv-unqualified type" name="CERT_CPP-EXP55" rules="1" total="0"/>
               <Category authTot="8;" authUrg="5;" desc="CERT-EXP56_CPP (RULE) Do not call a function with a mismatched language linkage" name="CERT_CPP-EXP56" rules="1" total="8"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP53_CPP (RULE) Do not read uninitialized memory" name="CERT_CPP-EXP53" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP54_CPP (RULE) Do not access an object outside of its lifetime" name="CERT_CPP-EXP54" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP59_CPP (RULE) Use offsetof() on valid types and members" name="CERT_CPP-EXP59" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP57_CPP (RULE) Do not cast or delete pointers to incomplete classes" name="CERT_CPP-EXP57" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP58_CPP (RULE) Pass an object of the correct type to va_start" name="CERT_CPP-EXP58" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP62_CPP (RULE) Do not access the bits of an object representation that are not part of the object's value representation" name="CERT_CPP-EXP62" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP63_CPP (RULE) Do not rely on the value of a moved-from object" name="CERT_CPP-EXP63" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP60_CPP (RULE) Do not pass a nonstandard-layout type object across execution boundaries" name="CERT_CPP-EXP60" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP61_CPP (RULE) A lambda object must not outlive any of its reference captured objects" name="CERT_CPP-EXP61" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC53_CPP (RULE) Do not return from a function declared [[noreturn]]" name="CERT_CPP-MSC53" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC54_CPP (RULE) A signal handler must be a plain old function" name="CERT_CPP-MSC54" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="CERT-ERR62_CPP (RULE) Detect errors when converting a string to a number" name="CERT_CPP-ERR62" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR61_CPP (RULE) Catch exceptions by lvalue reference" name="CERT_CPP-ERR61" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR60_CPP (RULE) Exception objects must be nothrow copy constructible" name="CERT_CPP-ERR60" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR57_CPP (RULE) Provide a valid ordering predicate" name="CERT_CPP-CTR57" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR58_CPP (RULE) Predicate function objects should not be mutable" name="CERT_CPP-CTR58" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR53_CPP (RULE) Use valid iterator ranges" name="CERT_CPP-CTR53" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR54_CPP (RULE) Do not subtract iterators that do not refer to the same container" name="CERT_CPP-CTR54" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR55_CPP (RULE) Do not use an additive operator on an iterator if the result would overflow" name="CERT_CPP-CTR55" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR56_CPP (RULE) Do not use pointer arithmetic on polymorphic objects" name="CERT_CPP-CTR56" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR50_CPP (RULE) Guarantee that container indices and iterators are within the valid range" name="CERT_CPP-CTR50" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR51_CPP (RULE) Use valid references, pointers, and iterators to reference elements of a container" name="CERT_CPP-CTR51" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR52_CPP (RULE) Guarantee that library functions do not overflow" name="CERT_CPP-CTR52" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT50_CPP (RULE) Do not cast to an out-of-range enumeration value" name="CERT_CPP-INT50" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP51_CPP (RULE) Do not delete an array through a pointer of the incorrect type" name="CERT_CPP-EXP51" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP52_CPP (RULE) Do not rely on side effects in unevaluated operands" name="CERT_CPP-EXP52" rules="5" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP50_CPP (RULE) Do not depend on the order of evaluation for side effects" name="CERT_CPP-EXP50" rules="6" total="0"/>
            </Category>
            <Category authTot="136;" authUrg="1;" desc="Coding Conventions" name="CODSTA" rules="555" total="136">
               <Category authTot="84;" authUrg="8;" desc="Coding Conventions for C++" name="CODSTA-CPP" rules="135" total="84"/>
               <Category authTot="52;" authUrg="2;" desc="Coding Conventions for Modern C++" name="CODSTA-MCPP" rules="82" total="52"/>
            </Category>
            <Category authTot="126;" authUrg="3;" desc="Comments" name="COMMENT" rules="17" total="126"/>
            <Category authTot="0;" authUrg="0;" desc="Common Weakness Enumeration" name="CWE" rules="98" total="0">
               <Category authTot="0;" authUrg="0;" desc="CWE-532 Inclusion of Sensitive Information in Log Files" name="CWE-532" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="CWE-772 Missing Release of Resource after Effective Lifetime" name="CWE-772" rules="2" total="2"/>
               <Category authTot="1;" authUrg="0;" desc="CWE-476 NULL Pointer Dereference" name="CWE-476" rules="1" total="1"/>
               <Category authTot="1;" authUrg="0;" desc="CWE-770 Allocation of Resources Without Limits or Throttling" name="CWE-770" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-190 Integer Overflow or Wraparound" name="CWE-190" rules="11" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" name="CWE-78" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-617 Reachable Assertion" name="CWE-617" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-835 Loop with Unreachable Exit Condition ('Infinite Loop')" name="CWE-835" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-415 Double Free" name="CWE-415" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer" name="CWE-119" rules="11" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-416 Use After Free" name="CWE-416" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-611 Improper Restriction of XML External Entity Reference" name="CWE-611" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-732 Incorrect Permission Assignment for Critical Resource" name="CWE-732" rules="2" total="0"/>
               <Category authTot="3;" authUrg="0;" desc="CWE-798 Use of Hard-coded Credentials" name="CWE-798" rules="1" total="3"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-125 Out-of-bounds Read" name="CWE-125" rules="5" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-400 Uncontrolled Resource Consumption" name="CWE-400" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-269 Improper Privilege Management" name="CWE-269" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-863 Incorrect Authorization" name="CWE-863" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-200 Information Exposure" name="CWE-200" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-287 Improper Authentication" name="CWE-287" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-362 Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')" name="CWE-362" rules="5" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="CWE-20 Improper Input Validation" name="CWE-20" rules="10" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" name="CWE-22" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" name="CWE-89" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-704 Incorrect Type Conversion or Cast" name="CWE-704" rules="12" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-426 Untrusted Search Path" name="CWE-426" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-787 Out-of-bounds Write" name="CWE-787" rules="8" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-326 Inadequate Encryption Strength" name="CWE-326" rules="1" total="0"/>
            </Category>
            <Category authTot="5;" authUrg="0;" desc="Exceptions" name="EXCEPT" rules="27" total="5"/>
            <Category authTot="274;" authUrg="0;" desc="Formatting" name="FORMAT" rules="52" total="274"/>
            <Category authTot="15;" authUrg="0;" desc="Global Static Analysis" name="GLOBAL" rules="30" total="15"/>
            <Category authTot="0;" authUrg="0;" desc="High Integrity C++" name="HICPP" rules="239" total="0">
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.2.2 Initialize none, the first only or all enumerators in an enumeration" name="HICPP-7_2_2" rules="1" total="0"/>
               <Category authTot="160;" authUrg="0;" desc="HIC++ 2.1.1 Do not use tab characters in source files" name="HICPP-2_1_1" rules="1" total="160"/>
               <Category authTot="17;" authUrg="0;" desc="HIC++ 2.5.3 Use nullptr for the null pointer constant" name="HICPP-2_5_3" rules="1" total="17"/>
               <Category authTot="1;" authUrg="0;" desc="HIC++ 15.1.1 Only use instances of std::exception for exceptions" name="HICPP-15_1_1" rules="2" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.5.2 Do not use octal constants (other than zero)" name="HICPP-2_5_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.5.1 Do not concatenate strings with different encoding prefixes" name="HICPP-2_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.4 Write members in an initialization list in the order in which they are declared" name="HICPP-12_4_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.2.1 Use an explicit enumeration base and ensure that it is large enough to store all enumerators" name="HICPP-7_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.5 Use delegating constructors to reduce code duplication" name="HICPP-12_4_5" rules="1" total="0"/>
               <Category authTot="7;" authUrg="0;" desc="HIC++ 3.3.1 Do not use variables with static storage duration" name="HICPP-3_3_1" rules="1" total="7"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.5.1 Do not ignore the result of std::remove, std::remove if or std::unique" name="HICPP-17_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.5 Implement a minimal set of operators and use them to implement all other related operators" name="HICPP-13_2_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 4.1.1 Ensure that a function argument does not undergo an array-to-pointer conversion" name="HICPP-4_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.4.2 Ensure that a braced aggregate initializer matches the layout of the aggregate object" name="HICPP-8_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.4.1 Do not access an invalid object or an object with indeterminate value" name="HICPP-8_4_1" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.1.2 If a member of a set of callable functions includes a universal reference parameter, ensure that one appears in the same position for all other members" name="HICPP-13_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.1 Within the scope of a lock, ensure that no static path results in a lock of the same mutex" name="HICPP-18_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.2 Ensure that order of nesting of locks in a project forms a DAG" name="HICPP-18_3_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.5 Do not access the members of std::mutex directly" name="HICPP-18_3_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.6 Do not use relaxed atomics" name="HICPP-18_3_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.3.3 Ensure that the form of delete matches the form of new used to allocate the memory" name="HICPP-5_3_3" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.3 Do not use std::recursive mutex" name="HICPP-18_3_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.7.2 Ensure that a pointer to member that is a virtual function is only compared (==) with nullptr" name="HICPP-5_7_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.1.1 Ensure that all overloads of a function are visible from where it is called" name="HICPP-13_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.4 Only use std::unique lock when std::lock guard cannot be used" name="HICPP-18_3_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.7.1 Do not write code that expects floating point calculations to yield exact results" name="HICPP-5_7_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.3.2 Allocate memory using new and release it using delete" name="HICPP-5_3_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.3.1 Do not apply unary minus to operands of unsigned type" name="HICPP-5_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.2.1 Declare bit-fields with an explicitly unsigned integral or enumeration type" name="HICPP-9_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.3.1 Correctly declare overloads for operator new and delete" name="HICPP-12_3_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.1.4 Ensure that a switch statement has at least two case labels, distinct from the default label" name="HICPP-6_1_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 11.1.1 Declare all data members private" name="HICPP-11_1_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.1.3 Ensure that a non-empty case statement block does not fall through to the next label" name="HICPP-6_1_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.1.2 Explicitly cover all paths through multi-way selection statements" name="HICPP-6_1_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.1.1 Enclose the body of a selection or an iteration statement in a compound statement" name="HICPP-6_1_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.3.1 Do not use using directives" name="HICPP-7_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 15.2.1 Do not throw an exception from a destructor" name="HICPP-15_2_1" rules="1" total="0"/>
               <Category authTot="13;" authUrg="0;" desc="HIC++ 2.4.1 Ensure that each identifier is distinct from any other visible identifier" name="HICPP-2_4_1" rules="1" total="13"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.7 Declare assignment operators with the ref-qualifier &amp;" name="HICPP-12_5_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 10.3.1 Ensure that a derived class has at most one base class which is not an interface class" name="HICPP-10_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.8 Make the copy assignment operator of an abstract class protected or define it =delete" name="HICPP-12_5_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.6 Use an atomic, non-throwing swap operation to implement the copy and move assignment operators" name="HICPP-12_5_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.3 Ensure that a user defined move/copy constructor only moves/copies base and member objects" name="HICPP-12_5_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.4 Declare noexcept the move constructor and move assignment operator" name="HICPP-12_5_4" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="HIC++ 8.1.1 Do not use multiple levels of pointer indirection" name="HICPP-8_1_1" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.2.1 Do not declare functions at block scope" name="HICPP-3_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.4.1 Use const container calls when result is immediately converted to a const iterator" name="HICPP-17_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.4.2 Use API calls that construct objects in place" name="HICPP-17_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 4.4.1 Do not convert floating values to integral types except through use of standard library functions" name="HICPP-4_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.1 Do not overload operators with special semantics" name="HICPP-13_2_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.2.2 Synchronize access to data shared between threads using a single lock" name="HICPP-18_2_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.2 Ensure that the return type of an overloaded binary operator matches the built-in counterparts" name="HICPP-13_2_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.2.3 Do not share volatile data between threads" name="HICPP-18_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.3 Declare binary arithmetic and bitwise operators as non-members" name="HICPP-13_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.4 When overloading the subscript operator (operator[]) implement both const and non-const versions" name="HICPP-13_2_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.2.1 Use high integrity::thread in place of std::thread" name="HICPP-18_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.6.1 Do not use bitwise operators with signed operands" name="HICPP-5_6_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.2.4 Use std::call_once rather than the Double-Checked Locking pattern" name="HICPP-18_2_4" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="HIC++ 5.2.1 Ensure that pointer or array access is demonstrably within bounds of a valid object" name="HICPP-5_2_1" rules="3" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.2.2 Ensure that functions do not call themselves, either directly or indirectly" name="HICPP-5_2_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.2 Ensure that a constructor initializes explicitly all base classes and non-static data members" name="HICPP-12_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.3 Do not specify both an NSDMI and a member initializer in a constructor for the same non static member" name="HICPP-12_4_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.1 Do not use the dynamic type of an object unless the object is fully constructed" name="HICPP-12_4_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.4.1 Postpone variable definitions as long as possible" name="HICPP-6_4_1" rules="2" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="HIC++ 15.3.2 Ensure that a program does not result in a call to std::terminate" name="HICPP-15_3_2" rules="3" total="1"/>
               <Category authTot="22;" authUrg="0;" desc="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards" name="HICPP-16_1_1" rules="9" total="22"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 16.1.2 Do not include a path specifier in filenames supplied in #include directives" name="HICPP-16_1_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 11.2.1 Do not use friend declarations" name="HICPP-11_2_1" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="HIC++ 2.3.1 Do not use the C comment delimiters /* ... */" name="HICPP-2_3_1" rules="1" total="2"/>
               <Category authTot="1;" authUrg="0;" desc="HIC++ 7.4.1 Ensure that any objects, functions or types to be used from a single translation unit are defined in an unnamed namespace in the main source file" name="HICPP-7_4_1" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.4.3 Ensure that an object or a function used from multiple translation units is declared in a single header file" name="HICPP-7_4_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.4.2 Ensure that an inline function, a function template, or a type used from multiple translation units is defined in a single header file" name="HICPP-7_4_2" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 16.1.5 Include directly the minimum number of headers required for compilation" name="HICPP-16_1_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 16.1.3 Match the filename in a #include directive to the one on the filesystem" name="HICPP-16_1_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 15.3.1 Do not access non-static members from a catch handler of constructor/destructor function try block" name="HICPP-15_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 16.1.4 Use &lt;> brackets for system and standard library headers. Use quotes for all other headers" name="HICPP-16_1_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.3.2 Do not comment out code" name="HICPP-2_3_2" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="HIC++ 10.2.1 Use the override special identifier when overriding a virtual function" name="HICPP-10_2_1" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.4 Do not create smart pointers of array type" name="HICPP-17_3_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.5 Do not create an rvalue reference of std::array" name="HICPP-17_3_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.1.1 Do not hide declarations" name="HICPP-3_1_1" rules="5" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.1 Do not use std::move on objects declared with const or const &amp; type" name="HICPP-17_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 14.1.1 Use variadic templates rather than an ellipsis" name="HICPP-14_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.2 Use std::forward to forward universal references" name="HICPP-17_3_2" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.3 Do not subsequently use the argument to std::forward" name="HICPP-17_3_3" rules="1" total="0"/>
               <Category authTot="25;" authUrg="0;" desc="HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object" name="HICPP-3_5_1" rules="4" total="25"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 4.3.1 Do not convert an expression of wider floating point type to a narrower floating point type" name="HICPP-4_3_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.10 Use static assert for assertions involving compile time constants" name="HICPP-7_1_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.2.4 Do not pass std::unique ptr by const reference" name="HICPP-8_2_4" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="HIC++ 8.2.3 Pass small objects with a trivial copy constructor by value" name="HICPP-8_2_3" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.2.2 Do not declare functions with an excessive number of parameters" name="HICPP-8_2_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.2.1 Make parameter names absent or identical in all declarations" name="HICPP-8_2_1" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="HIC++ 18.1.1 Do not use platform specific multi-threading facilities" name="HICPP-18_1_1" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.6 Do not code side effects into the right-hand operands of: &amp;&amp;, ||, sizeof, typeid or a function passed to condition variable::wait" name="HICPP-5_1_6" rules="6" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.5 Include a (possibly empty) parameter list in every lambda expression" name="HICPP-5_1_5" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="HIC++ 5.5.1 Ensure that the right hand operand of the division or remainder operators is demonstrably non-zero" name="HICPP-5_5_1" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.2 Do not rely on the sequence of evaluation within an expression" name="HICPP-5_1_2" rules="10" total="0"/>
               <Category authTot="3;" authUrg="1;" desc="HIC++ 5.1.1 Use symbolic names instead of literal values in code" name="HICPP-5_1_1" rules="1" total="3"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.4 Do not capture variables implicitly in a lambda" name="HICPP-5_1_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.3 Use parentheses in expressions to specify the intent of the expression" name="HICPP-5_1_3" rules="2" total="0"/>
               <Category authTot="30;" authUrg="0;" desc="HIC++ 12.5.1 Define explicitly =default or =delete implicit special member functions of concrete classes" name="HICPP-12_5_1" rules="1" total="30"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.2 Define special members =default if the behavior is equivalent" name="HICPP-12_5_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.3.2 Ensure that execution of a function with a non-void return type ends in a return statement with a value" name="HICPP-6_3_2" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="HIC++ 12.1.1 Do not declare implicit user defined conversions" name="HICPP-12_1_1" rules="2" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.2.1 Ensure that all statements are reachable" name="HICPP-1_2_1" rules="10" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.2.2 Ensure that no expression or sub-expression is redundant" name="HICPP-1_2_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.3.1 Ensure that the label(s) for a jump statement or a switch condition appear later, in the same or an enclosing block" name="HICPP-6_3_1" rules="3" total="0"/>
               <Category authTot="4;" authUrg="0;" desc="HIC++ 7.1.4 Place CV-qualifiers on the right hand side of the type they apply to" name="HICPP-7_1_4" rules="1" total="4"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.2.1 Do not use digraphs or trigraphs" name="HICPP-2_2_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.3 Do not place type specifiers before non-type specifiers in a declaration" name="HICPP-7_1_3" rules="1" total="0"/>
               <Category authTot="19;" authUrg="0;" desc="HIC++ 7.1.6 Use class types or typedefs to abstract scalar quantities and standard integer types" name="HICPP-7_1_6" rules="3" total="19"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.5 Do not inline large functions" name="HICPP-7_1_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.5.1 Do not use the asm declaration" name="HICPP-7_5_1" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="HIC++ 7.1.8 Use auto id = expr when declaring a variable to have the same type as its initializer function call" name="HICPP-7_1_8" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.7 Use a trailing return type in preference to type disambiguation using typename" name="HICPP-7_1_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.9 Do not explicitly specify the return type of a lambda" name="HICPP-7_1_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 10.1.1 Ensure that access to base class subobjects does not require explicit disambiguation" name="HICPP-10_1_1" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="HIC++ 7.1.2 Use const whenever possible" name="HICPP-7_1_2" rules="2" total="1"/>
               <Category authTot="14;" authUrg="0;" desc="HIC++ 7.1.1 Declare each identifier on a separate line in a separate declaration" name="HICPP-7_1_1" rules="2" total="14"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 14.2.2 Do not explicitly specialize a function template that is overloaded with other templates" name="HICPP-14_2_2" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="HIC++ 17.2.1 Wrap use of the C Standard Library" name="HICPP-17_2_1" rules="2" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.4.1 Do not return a reference or a pointer to an automatic variable defined within the function" name="HICPP-3_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 14.2.3 Declare extern an explicitly instantiated template" name="HICPP-14_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.4.3 Use RAII for resources" name="HICPP-3_4_3" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 14.2.1 Declare template specializations in the same file as the primary template they specialize." name="HICPP-14_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.4.2 Do not assign the address of a variable to a pointer with a greater lifetime" name="HICPP-3_4_2" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="HIC++ 4.2.2 Ensure that data loss does not demonstrably occur in an integral expression" name="HICPP-4_2_2" rules="9" total="2"/>
               <Category authTot="20;" authUrg="0;" desc="HIC++ 4.2.1 Ensure that the U suffix is applied to a literal used in a context requiring an unsigned integral expression" name="HICPP-4_2_1" rules="1" total="20"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.3.4 Define =delete functions with parameters of type rvalue reference to const" name="HICPP-8_3_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.3.3 Do not use default arguments" name="HICPP-8_3_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.3.1 Do not write functions with an excessive McCabe Cyclomatic Complexity" name="HICPP-8_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.4.1 Do not use std::condition variable any on a std::mutex" name="HICPP-18_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.4.3 Do not convert from a base class to a derived class" name="HICPP-5_4_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.4.2 Do not cast an expression to an enumeration type" name="HICPP-5_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.8.1 Do not use the conditional operator (?:) as a sub-expression" name="HICPP-5_8_1" rules="1" total="0"/>
               <Category authTot="2;" authUrg="2;" desc="HIC++ 5.4.1 Only use casting forms: static cast (excl. void*), dynamic cast or explicit constructor call" name="HICPP-5_4_1" rules="3" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.1.5 Do not introduce virtual functions in a final class" name="HICPP-9_1_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.1.1 Do not use std::vector&lt;bool>" name="HICPP-17_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.1.3 Do not return non-const handles to class data from const member functions" name="HICPP-9_1_3" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="HIC++ 9.1.4 Do not write member functions which return non-const handles to data less accessible than the member function" name="HICPP-9_1_4" rules="1" total="1"/>
               <Category authTot="1;" authUrg="0;" desc="HIC++ 9.1.1 Declare static any member function that does not require this. Alternatively, declare const any member function that does not modify the externally visible state of the object" name="HICPP-9_1_1" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.1.2 Make default arguments the same or absent when overriding a virtual function" name="HICPP-9_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.3.4 Do not use deprecated STL library features" name="HICPP-1_3_4" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="HIC++ 1.3.3 Do not use the C Standard Library .h headers" name="HICPP-1_3_3" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.2.4 Only modify a for loop counter in the for expression" name="HICPP-6_2_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.3.5 Do not use throw exception specifications" name="HICPP-1_3_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.2.3 Do not alter a control or counter variable more than once in a loop" name="HICPP-6_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.2.1 Declare virtual, private or protected the destructor of a type used as a base class" name="HICPP-12_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.3.2 Do not use the register keyword" name="HICPP-1_3_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.3.1 Do not use the increment operator (++) on a variable of type bool" name="HICPP-1_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.2.2 Ensure that a loop has a single loop counter, an optional control variable, and is not degenerate" name="HICPP-6_2_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.2.1 Implement a loop that only uses element values as a range-based loop" name="HICPP-6_2_1" rules="1" total="0"/>
            </Category>
            <Category authTot="11;" authUrg="0;" desc="Initialization" name="INIT" rules="25" total="11"/>
            <Category authTot="484;" authUrg="5;" desc="Joint Strike Fighter" name="JSF" rules="279" total="484"/>
            <Category authTot="1;" authUrg="0;" desc="Metric" name="METRIC" rules="50" total="1"/>
            <Category authTot="70;" authUrg="0;" desc="Metrics" name="METRICS" rules="44" total="70"/>
            <Category authTot="59;" authUrg="0;" desc="MISRA C 1998" name="MISRA" rules="62" total="59"/>
            <Category authTot="101;" authUrg="0;" desc="MISRA C 2004" name="MISRA2004" rules="223" total="101"/>
            <Category authTot="228;" authUrg="2;" desc="MISRA C++ 2008" name="MISRA2008" rules="344" total="228"/>
            <Category authTot="0;" authUrg="0;" desc="MISRA C 2012 (Legacy)" name="MISRA2012" rules="381" total="0">
               <Category authTot="62;" authUrg="0;" desc="MISRA C 2012 Rules" name="MISRA2012-RULE" rules="331" total="62"/>
               <Category authTot="40;" authUrg="0;" desc="MISRA C 2012 Directives" name="MISRA2012-DIR" rules="50" total="40"/>
            </Category>
            <Category authTot="0;" authUrg="0;" desc="MISRA C 2023 (MISRA C 2012)" name="MISRAC2012" rules="381" total="0">
               <Category authTot="0;" authUrg="0;" desc="Rule 11.3 (Required) A conversion shall not be performed between a pointer to object type and a pointer to a different object type" name="MISRAC2012-RULE_11_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.13 (Required) A line whose first token is # shall be a valid preprocessing directive" name="MISRAC2012-RULE_20_13" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.5 (Required) An external object or function shall be declared once in one and only one file" name="MISRAC2012-RULE_8_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.4 (Advisory) A conversion should not be performed between a pointer to object and an integer type" name="MISRAC2012-RULE_11_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.12 (Required) A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" name="MISRAC2012-RULE_20_12" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.6 (Required) An identifier with external linkage shall have exactly one external definition" name="MISRAC2012-RULE_8_6" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.5 (Advisory) A conversion should not be performed from pointer to void into pointer to object" name="MISRAC2012-RULE_11_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.1 (Advisory) The goto statement should not be used" name="MISRAC2012-RULE_15_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.11 (Required) A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" name="MISRAC2012-RULE_20_11" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.3 (Required) All declarations of an object or function shall use the same names and type qualifiers" name="MISRAC2012-RULE_8_3" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.6 (Required) A cast shall not be performed between pointer to void and an arithmetic type" name="MISRAC2012-RULE_11_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.2 (Required) The goto statement shall jump to a label declared later in the same function" name="MISRAC2012-RULE_15_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.10 (Advisory) The # and ## preprocessor operators should not be used" name="MISRAC2012-RULE_20_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.4 (Required) A compatible declaration shall be visible when an object or function with external linkage is defined" name="MISRAC2012-RULE_8_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.7 (Required) A cast shall not be performed between pointer to object and a non-integer arithmetic type" name="MISRAC2012-RULE_11_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.3 (Required) Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement" name="MISRAC2012-RULE_15_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.9 (Advisory) An object should be declared at block scope if its identifier only appears in a single function" name="MISRAC2012-RULE_8_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.8 (Required) A conversion shall not remove any const, volatile or _Atomic qualification from the type pointed to by a pointer" name="MISRAC2012-RULE_11_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.4 (Advisory) There should be no more than one break or goto statement used to terminate any iteration statement" name="MISRAC2012-RULE_15_4" rules="1" total="0"/>
               <Category authTot="26;" authUrg="0;" desc="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant" name="MISRAC2012-RULE_11_9" rules="2" total="26"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.5 (Advisory) A function should have a single point of exit at the end" name="MISRAC2012-RULE_15_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.1 (Mandatory) An object shall not be assigned or copied to an overlapping object" name="MISRAC2012-RULE_19_1" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.7 (Advisory) Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" name="MISRAC2012-RULE_8_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.6 (Required) The body of an iteration-statement or a selection-statement shall be a compound-statement" name="MISRAC2012-RULE_15_6" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.2 (Advisory) The union keyword should not be used" name="MISRAC2012-RULE_19_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.8 (Required) The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage" name="MISRAC2012-RULE_8_8" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="Dir 4.14 (Required) The validity of values received from external sources shall be checked" name="MISRAC2012-DIR_4_14" rules="12" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.7 (Required) All if ... else if constructs shall be terminated with an else statement" name="MISRAC2012-RULE_15_7" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="Dir 4.13 (Advisory) Functions which are designed to provide operations on a resource should be called in an appropriate sequence" name="MISRAC2012-DIR_4_13" rules="6" total="2"/>
               <Category authTot="2;" authUrg="0;" desc="Dir 4.12 (Required) Dynamic memory allocation shall not be used" name="MISRAC2012-DIR_4_12" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.11 (Required) The validity of values passed to library functions shall be checked" name="MISRAC2012-DIR_4_11" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.10 (Required) Precautions shall be taken in order to prevent the contents of a header file being included more than once" name="MISRAC2012-DIR_4_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.14 (Required) All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related" name="MISRAC2012-RULE_20_14" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 4.1 (Required) Octal and hexadecimal escape sequences shall be terminated" name="MISRAC2012-RULE_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 4.2 (Advisory) Trigraphs should not be used" name="MISRAC2012-RULE_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.1 (Required) Types shall be explicitly specified" name="MISRAC2012-RULE_8_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.2 (Required) Function types shall be in prototype form with named parameters" name="MISRAC2012-RULE_8_2" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.1 (Required) Conversions shall not be performed between a pointer to a function and any other type" name="MISRAC2012-RULE_11_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.2 (Required) Conversions shall not be performed between a pointer to an incomplete type and any other type" name="MISRAC2012-RULE_11_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.3 (Required) The same file shall not be open for read and write access at the same time on different streams" name="MISRAC2012-RULE_22_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.4 (Mandatory) There shall be no attempt to write to a stream which has been opened as read-only" name="MISRAC2012-RULE_22_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.5 (Mandatory) A pointer to a FILE object shall not be dereferenced" name="MISRAC2012-RULE_22_5" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.6 (Mandatory) The value of a pointer to a FILE shall not be used after the associated stream has been closed" name="MISRAC2012-RULE_22_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.7 (Required) The macro EOF shall only be compared with the unmodified return value from any Standard Library function capable of returning EOF" name="MISRAC2012-RULE_22_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.8 (Required) The value of errno shall be set to zero prior to a call to an errno-setting-function" name="MISRAC2012-RULE_22_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.9 (Required) The value of errno shall be tested against zero after calling an errno-setting-function" name="MISRAC2012-RULE_22_9" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="Rule 22.1 (Required) All resources obtained dynamically by means of Standard Library functions shall be explicitly released" name="MISRAC2012-RULE_22_1" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.2 (Mandatory) A block of memory shall only be freed if it was allocated by means of a" name="MISRAC2012-RULE_22_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.4 (Required) Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" name="MISRAC2012-RULE_10_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.5 (Advisory) The value of an expression should not be cast to an inappropriate essential type" name="MISRAC2012-RULE_10_5" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 14.1 (Required) A loop counter shall not have essentially floating type" name="MISRAC2012-RULE_14_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.6 (Required) The value of a composite expression shall not be assigned to an object with wider essential type" name="MISRAC2012-RULE_10_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 14.2 (Required) A for loop shall be well-formed" name="MISRAC2012-RULE_14_2" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.4 (Required) A string literal shall not be assigned to an object unless the object's type is &quot;pointer to const-qualified char&quot;" name="MISRAC2012-RULE_7_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.7 (Required) If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" name="MISRAC2012-RULE_10_7" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 14.3 (Required) Controlling expressions shall not be invariant" name="MISRAC2012-RULE_14_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.8 (Required) The value of a composite expression shall not be cast to a different essential type category or a wider essential type" name="MISRAC2012-RULE_10_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 14.4 (Required) The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type" name="MISRAC2012-RULE_14_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.1 (Required) A pointer resulting from arithmetic on a pointer operand shall address an element of the same array as that pointer operand" name="MISRAC2012-RULE_18_1" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.2 (Required) Subtraction between pointers shall only be applied to pointers that address elements of the same array" name="MISRAC2012-RULE_18_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.3 (Required) The relational operators >, >=, &lt; and &lt;= shall not be applied to expressions of pointer type except where they point into the same object" name="MISRAC2012-RULE_18_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.4 (Advisory) The +, -, += and -= operators should not be applied to an expression of pointer type" name="MISRAC2012-RULE_18_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.5 (Advisory) Declarations should contain no more than two levels of pointer nesting" name="MISRAC2012-RULE_18_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.6 (Required) The address of an object with automatic or thread-local storage shall not be copied to another object that persists after the first object has ceased to exist" name="MISRAC2012-RULE_18_6" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.7 (Required) Flexible array members shall not be declared" name="MISRAC2012-RULE_18_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.8 (Required) Variable-length arrays shall not be used" name="MISRAC2012-RULE_18_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 3.2 (Required) Line-splicing shall not be used in // comments" name="MISRAC2012-RULE_3_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 3.1 (Required) The character sequences /* and // shall not be used within a comment" name="MISRAC2012-RULE_3_1" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.2 (Required) A &quot;u&quot; or &quot;U&quot; suffix shall be applied to all integer constants that are represented in an unsigned type" name="MISRAC2012-RULE_7_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.1 (Required) Operands shall not be of an inappropriate essential type" name="MISRAC2012-RULE_10_1" rules="8" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.3 (Required) The lowercase character &quot;l&quot; shall not be used in a literal suffix" name="MISRAC2012-RULE_7_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.2 (Required) Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" name="MISRAC2012-RULE_10_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.3 (Required) The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category" name="MISRAC2012-RULE_10_3" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.1 (Required) Octal constants shall not be used" name="MISRAC2012-RULE_7_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.14 (Required) The Standard Library function memcmp shall not be used to compare null terminated strings" name="MISRAC2012-RULE_21_14" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.4 (Required) The standard header file &lt;setjmp.h> shall not be used" name="MISRAC2012-RULE_21_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.13 (Mandatory) Any value passed to a function in &lt;ctype.h> shall be representable as an unsigned char or be the value EOF" name="MISRAC2012-RULE_21_13" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.5 (Required) The standard header file &lt;signal.h> shall not be used" name="MISRAC2012-RULE_21_5" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.12 (Required) The standard header file &lt;fenv.h> shall not be used" name="MISRAC2012-RULE_21_12" rules="2" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="Rule 21.6 (Required) The Standard Library input/output functions shall not be used" name="MISRAC2012-RULE_21_6" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.11 (Required) The standard header file &lt;tgmath.h> shall not be used" name="MISRAC2012-RULE_21_11" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="Rule 21.7 (Required) The atof, atoi, atol and atoll functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_7" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.10 (Required) The Standard Library time and date functions shall not be used" name="MISRAC2012-RULE_21_10" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.8 (Required) The Standard Library termination functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_8" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.9 (Required) The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.19 (Mandatory) The pointers returned by the Standard Library functions localeconv, getenv, setlocale or, strerror shall only be used as if they have pointer to const-qualified type" name="MISRAC2012-RULE_21_19" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.18 (Mandatory) The size_t argument passed to any function in &lt;string.h> shall have an appropriate value" name="MISRAC2012-RULE_21_18" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.17 (Mandatory) Use of the string handling functions from &lt;string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters" name="MISRAC2012-RULE_21_17" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.16 (Required) The pointer arguments to the Standard Library function memcmp shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" name="MISRAC2012-RULE_21_16" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.15 (Required) The pointer arguments to the Standard Library functions memcpy, memmove and memcmp shall be pointers to qualified or unqualified versions of compatible types" name="MISRAC2012-RULE_21_15" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.1 (Required) #define and #undef shall not be used on a reserved identifier or reserved macro name" name="MISRAC2012-RULE_21_1" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.2 (Required) A reserved identifier or macro name shall not be declared" name="MISRAC2012-RULE_21_2" rules="3" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="Rule 21.3 (Required) The memory allocation and deallocation functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_3" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.1 (Required) Initializer lists shall not contain persistent side effects" name="MISRAC2012-RULE_13_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.2 (Required) The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders and shall be independent from thread interleaving" name="MISRAC2012-RULE_13_2" rules="8" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.3 (Advisory) A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator" name="MISRAC2012-RULE_13_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.4 (Advisory) The result of an assignment operator should not be used" name="MISRAC2012-RULE_13_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.5 (Required) The right hand operand of a logical &amp;&amp; or || operator shall not contain persistent side effects" name="MISRAC2012-RULE_13_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.1 (Required) The features of &lt;stdarg.h> shall not be used" name="MISRAC2012-RULE_17_1" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.21 (Required) The Standard Library function system of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_21" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.6 (Required) The operand of the sizeof operator shall not contain any expression which has potential side effects" name="MISRAC2012-RULE_13_6" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.2 (Required) Functions shall not call themselves, either directly or indirectly" name="MISRAC2012-RULE_17_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.20 (Mandatory) The pointer returned by the Standard Library functions asctime, ctime, gmtime, localtime, localeconv, getenv, setlocale or strerror shall not be used following a subsequent call to the same function" name="MISRAC2012-RULE_21_20" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.3 (Mandatory) A function shall not be declared implicitly" name="MISRAC2012-RULE_17_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.4 (Mandatory) All exit paths from a function with non-void return type shall have an explicit return statement with an expression" name="MISRAC2012-RULE_17_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.5 (Required) The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" name="MISRAC2012-RULE_17_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.6 (Mandatory) The declaration of an array parameter shall not contain the static keyword between the [ ]" name="MISRAC2012-RULE_17_6" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used" name="MISRAC2012-RULE_17_7" rules="2" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.8 (Advisory) A function parameter should not be modified" name="MISRAC2012-RULE_17_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 2.3 (Advisory) A project should not contain unused type declarations" name="MISRAC2012-RULE_2_3" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 2.4 (Advisory) A project should not contain unused tag declarations" name="MISRAC2012-RULE_2_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 2.1 (Required) A project shall not contain unreachable code" name="MISRAC2012-RULE_2_1" rules="8" total="0"/>
               <Category authTot="8;" authUrg="0;" desc="Rule 2.2 (Required) A project shall not contain dead code" name="MISRAC2012-RULE_2_2" rules="2" total="8"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 2.7 (Advisory) A function should not contain unused parameters" name="MISRAC2012-RULE_2_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 2.5 (Advisory) A project should not contain unused macro definitions" name="MISRAC2012-RULE_2_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.1 (Required) Bit-fields shall only be declared with an appropriate type" name="MISRAC2012-RULE_6_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 2.6 (Advisory) A function should not contain unused label declarations" name="MISRAC2012-RULE_2_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.2 (Required) Single-bit named bit fields shall not be of a signed type" name="MISRAC2012-RULE_6_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.5 (Advisory) #undef should not be used" name="MISRAC2012-RULE_20_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.6 (Required) Tokens that look like a preprocessing directive shall not occur within a macro argument" name="MISRAC2012-RULE_20_6" rules="1" total="0"/>
               <Category authTot="8;" authUrg="0;" desc="Rule 20.7 (Required) Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" name="MISRAC2012-RULE_20_7" rules="1" total="8"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.8 (Required) The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" name="MISRAC2012-RULE_20_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.9 (Required) All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation" name="MISRAC2012-RULE_20_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.1 (Advisory) #include directives should only be preceded by preprocessor directives or comments" name="MISRAC2012-RULE_20_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.2 (Required) The ', &quot; or \ characters and the /* or // character sequences shall not occur in a header file name" name="MISRAC2012-RULE_20_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.3 (Required) The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" name="MISRAC2012-RULE_20_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.4 (Required) A macro shall not be defined with the same name as a keyword" name="MISRAC2012-RULE_20_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.2 (Required) The right hand operand of a shift operator shall lie in the range zero to one less than the width in bits of the essential type of the left hand operand" name="MISRAC2012-RULE_12_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.8 (Required) Identifiers that define objects or functions with external linkage shall be unique" name="MISRAC2012-RULE_5_8" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.4 (Required) An element of an object shall not be initialized more than once" name="MISRAC2012-RULE_9_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.3 (Advisory) The comma operator should not be used" name="MISRAC2012-RULE_12_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.9 (Advisory) Identifiers that define objects or functions with internal linkage should be unique" name="MISRAC2012-RULE_5_9" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.5 (Required) Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" name="MISRAC2012-RULE_9_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.4 (Advisory) Evaluation of constant expressions should not lead to unsigned integer wrap-around" name="MISRAC2012-RULE_12_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.6 (Required) A typedef name shall be a unique identifier" name="MISRAC2012-RULE_5_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.2 (Required) The initializer for an aggregate or union shall be enclosed in braces" name="MISRAC2012-RULE_9_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.5 (Mandatory) The sizeof operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" name="MISRAC2012-RULE_12_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.1 (Required) All switch statements shall be well-formed" name="MISRAC2012-RULE_16_1" rules="8" total="0"/>
               <Category authTot="8;" authUrg="0;" desc="Rule 5.7 (Required) A tag name shall be a unique identifier" name="MISRAC2012-RULE_5_7" rules="1" total="8"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.3 (Required) Arrays shall not be partially initialized" name="MISRAC2012-RULE_9_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.2 (Required) A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" name="MISRAC2012-RULE_16_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.3 (Required) An unconditional break statement shall terminate every switch-clause" name="MISRAC2012-RULE_16_3" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.10 (Required) The value of errno shall only be tested when the last function to be called was an errno-setting-function" name="MISRAC2012-RULE_22_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.4 (Required) Every switch statement shall have a default label" name="MISRAC2012-RULE_16_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.5 (Required) A default label shall appear as either the first or the last switch label of a switch statement" name="MISRAC2012-RULE_16_5" rules="1" total="0"/>
               <Category authTot="8;" authUrg="0;" desc="Dir 4.9 (Advisory) A function should be used in preference to a function-like macro where they are interchangeable" name="MISRAC2012-DIR_4_9" rules="1" total="8"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.6 (Required) Every switch statement shall have at least two switch-clauses" name="MISRAC2012-RULE_16_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.8 (Advisory) If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" name="MISRAC2012-DIR_4_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.7 (Required) A switch-expression shall not have essentially Boolean type" name="MISRAC2012-RULE_16_7" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.5 (Advisory) Identifiers in the same name space with overlapping visibility should be typographically unambiguous" name="MISRAC2012-DIR_4_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.4 (Advisory) Sections of code should not be &quot;commented out&quot;" name="MISRAC2012-DIR_4_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.7 (Required) If a function returns error information, then that error information shall be tested" name="MISRAC2012-DIR_4_7" rules="2" total="0"/>
               <Category authTot="25;" authUrg="0;" desc="Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types" name="MISRAC2012-DIR_4_6" rules="3" total="25"/>
               <Category authTot="2;" authUrg="0;" desc="Dir 4.1 (Required) Run-time failures shall be minimized" name="MISRAC2012-DIR_4_1" rules="12" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.12 (Required) Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" name="MISRAC2012-RULE_8_12" rules="1" total="0"/>
               <Category authTot="3;" authUrg="0;" desc="Rule 8.13 (Advisory) A pointer should point to a const-qualified type whenever possible" name="MISRAC2012-RULE_8_13" rules="2" total="3"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.3 (Required) Assembly language shall be encapsulated and isolated" name="MISRAC2012-DIR_4_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.14 (Required) The restrict type qualifier shall not be used" name="MISRAC2012-RULE_8_14" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.2 (Advisory) All usage of assembly language should be documented" name="MISRAC2012-DIR_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 1.1 (Required) The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits" name="MISRAC2012-RULE_1_1" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.10 (Required) An inline function shall be declared with the static storage class" name="MISRAC2012-RULE_8_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.11 (Advisory) When an array with external linkage is declared, its size should be explicitly specified" name="MISRAC2012-RULE_8_11" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 1.4 (Required) Emergent language features shall not be used" name="MISRAC2012-RULE_1_4" rules="5" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.1 (Required) External identifiers shall be distinct" name="MISRAC2012-RULE_5_1" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="Rule 1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" name="MISRAC2012-RULE_1_3" rules="15" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.4 (Required) Macro identifiers shall be distinct" name="MISRAC2012-RULE_5_4" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.5 (Required) Identifiers shall be distinct from macro names" name="MISRAC2012-RULE_5_5" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.1 (Mandatory) The value of an object with automatic storage duration shall not be read before it has been set" name="MISRAC2012-RULE_9_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.2 (Required) Identifiers declared in the same scope and name space shall be distinct" name="MISRAC2012-RULE_5_2" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.1 (Advisory) The precedence of operators within expressions should be made explicit" name="MISRAC2012-RULE_12_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.3 (Required) An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" name="MISRAC2012-RULE_5_3" rules="2" total="0"/>
            </Category>
            <Category authTot="21;" authUrg="0;" desc="Memory and Resource Management" name="MRM" rules="67" total="21"/>
            <Category authTot="123;" authUrg="0;" desc="Naming Conventions" name="NAMING" rules="103" total="123">
               <Category authTot="53;" authUrg="0;" desc="Hungarian Notation" name="NAMING-HN" rules="44" total="53"/>
            </Category>
            <Category authTot="9;" authUrg="0;" desc="Object Oriented" name="OOP" rules="63" total="9"/>
            <Category authTot="28;" authUrg="0;" desc="Optimization" name="OPT" rules="52" total="28"/>
            <Category authTot="0;" authUrg="0;" desc="OWASP Top 10 Most Critical Web Application Security Risks (2017)" name="OWASP2017" rules="16" total="0">
               <Category authTot="0;" authUrg="0;" desc="OWASP A3 Sensitive Data Exposure" name="OWASP2017-A3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP A2 Broken Authentication" name="OWASP2017-A2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP A1 Injection" name="OWASP2017-A1" rules="6" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP A10 Insufficient Logging&amp;Monitoring" name="OWASP2017-A10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP A6 Security Misconfiguration" name="OWASP2017-A6" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP A5 Broken Access Control" name="OWASP2017-A5" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP A4 XML External Entities (XXE)" name="OWASP2017-A4" rules="1" total="0"/>
            </Category>
            <Category authTot="0;" authUrg="0;" desc="OWASP API Security Top 10 (2019)" name="OWASP2019" rules="42" total="0">
               <Category authTot="0;" authUrg="0;" desc="OWASP API2 Broken User Authentication" name="OWASP2019-API2" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="OWASP API4 Lack of Resources &amp; Rate Limiting" name="OWASP2019-API4" rules="2" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP API3 Excessive Data Exposure" name="OWASP2019-API3" rules="17" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP API10 Insufficient Logging &amp; Monitoring" name="OWASP2019-API10" rules="2" total="0"/>
               <Category authTot="19;" authUrg="0;" desc="OWASP API9 Improper Assets Management" name="OWASP2019-API9" rules="7" total="19"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP API8 Injection" name="OWASP2019-API8" rules="10" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP API7 Security Misconfiguration" name="OWASP2019-API7" rules="3" total="0"/>
            </Category>
            <Category authTot="0;" authUrg="0;" desc="OWASP Top 10 Most Critical Web Application Security Risks (2021)" name="OWASP2021" rules="18" total="0">
               <Category authTot="0;" authUrg="0;" desc="OWASP A8 Software and Data Integrity Failures" name="OWASP2021-A8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP A7 Identification and Authentication Failures" name="OWASP2021-A7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP A5 Security Misconfiguration" name="OWASP2021-A5" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP A9 Security Logging and Monitoring Failures" name="OWASP2021-A9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP A4 Insecure Design" name="OWASP2021-A4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP A3 Injection" name="OWASP2021-A3" rules="6" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP A2 Cryptographic Failures" name="OWASP2021-A2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP A1 Broken Access Control" name="OWASP2021-A1" rules="3" total="0"/>
            </Category>
            <Category authTot="9;" authUrg="9;" desc="Parser diagnostics" name="PARSER" rules="2" total="9"/>
            <Category authTot="35;" authUrg="0;" desc="Possible Bugs" name="PB" rules="90" total="35"/>
            <Category authTot="8;" authUrg="0;" desc="Physical File Organization" name="PFO" rules="11" total="8"/>
            <Category authTot="15;" authUrg="0;" desc="Portability" name="PORT" rules="41" total="15"/>
            <Category authTot="66;" authUrg="0;" desc="Preprocessor" name="PREPROC" rules="33" total="66"/>
            <Category authTot="0;" authUrg="0;" desc="Qt Best Practices" name="QT" rules="18" total="0"/>
            <Category authTot="12;" authUrg="0;" desc="Security" name="SECURITY" rules="56" total="12"/>
            <Category authTot="3;" authUrg="0;" desc="STL Best Practices" name="STL" rules="42" total="3"/>
            <Category authTot="0;" authUrg="0;" desc="Template" name="TEMPL" rules="20" total="0"/>
         </CategoriesList>
         <RulesList>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-000160" desc="Do not use weak encryption functions" id="APSC_DV-000160-a" origId="SECURITY-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-000170" desc="Do not use weak encryption functions" id="APSC_DV-000170-a" origId="SECURITY-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-000480" desc="Protect against SQL injection" id="APSC_DV-000480-a" origId="BD-SECURITY-TDSQL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-000500" desc="Observe correct revocation order while relinquishing privileges" id="APSC_DV-000500-a" origId="SECURITY-44" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-000650" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="APSC_DV-000650-a" origId="SECURITY-15" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001290" desc="Protect against SQL injection" id="APSC_DV-001290-a" origId="BD-SECURITY-TDSQL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-001290" desc="Untrusted data is used as a loop boundary" id="APSC_DV-001290-b" origId="SECURITY-38" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001290" desc="Avoid passing user input into methods as parameters" id="APSC_DV-001290-c" origId="SECURITY-20" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001290" desc="Avoid using unsecured shell functions that may be affected by shell metacharacters" id="APSC_DV-001290-d" origId="SECURITY-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001300" desc="Protect against SQL injection" id="APSC_DV-001300-a" origId="BD-SECURITY-TDSQL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001740" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-001740-a" origId="BD-SECURITY-SENSLOG" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001750" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-001750-a" origId="BD-SECURITY-SENSLOG" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001850" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-001850-a" origId="BD-SECURITY-SENSLOG" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001860" desc="Do not use weak encryption functions" id="APSC_DV-001860-a" origId="SECURITY-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid race conditions when using fork and file descriptors" id="APSC_DV-001995-a" origId="BD-TRS-FORKFILE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid race conditions while checking for the existence of a symbolic link" id="APSC_DV-001995-b" origId="BD-TRS-SYMLINK" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid race conditions while accessing files" id="APSC_DV-001995-c" origId="BD-TRS-FRC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Use locks to prevent race conditions when modifying bit fields" id="APSC_DV-001995-d" origId="BD-TRS-BITLOCK" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Do not use global variable with different locks set" id="APSC_DV-001995-e" origId="BD-TRS-MLOCK" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid using thread-unsafe functions" id="APSC_DV-001995-f" origId="SECURITY-25" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Usage of functions prone to race is not allowed" id="APSC_DV-001995-g" origId="SECURITY-19" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid using the 'vfork()' function" id="APSC_DV-001995-h" origId="SECURITY-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Properly define signal handlers" id="APSC_DV-001995-i" origId="BD-PB-SIGHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="APSC_DV-002000" desc="Ensure resources are freed" id="APSC_DV-002000-a" origId="BD-RES-LEAKS" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002010" desc="Do not use weak encryption functions" id="APSC_DV-002010-a" origId="SECURITY-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002290" desc="Do not use the rand() function for generating pseudorandom numbers" id="APSC_DV-002290-a" origId="SECURITY-02_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002290" desc="Properly seed pseudorandom number generators" id="APSC_DV-002290-b" origId="BD-SECURITY-RAND" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002290" desc="The 'random_shuffle' identifier should not be used" id="APSC_DV-002290-c" origId="CODSTA-MCPP-41" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002290" desc="The random number generator functions 'rand()' and 'srand()' should not be used" id="APSC_DV-002290-d" origId="SECURITY-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002350" desc="Do not use weak encryption functions" id="APSC_DV-002350-a" origId="SECURITY-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002390" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="APSC_DV-002390-a" origId="BD-SECURITY-XXEXRC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002390" desc="Do not process structured text data natively" id="APSC_DV-002390-b" origId="CODSTA-201" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="APSC_DV-002390" desc="Do not use scanf and fscanf functions without specifying variable size in format string" id="APSC_DV-002390-c" origId="SECURITY-14" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002390" desc="Do not use mbstowcs() function" id="APSC_DV-002390-d" origId="SECURITY-22" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002400" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002400-a" origId="BD-SECURITY-TDINPUT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002400" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="APSC_DV-002400-b" origId="PB-44" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002400" desc="Avoid using the 'vfork()' function" id="APSC_DV-002400-c" origId="SECURITY-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002400" desc="Avoid using thread-unsafe functions" id="APSC_DV-002400-d" origId="SECURITY-25" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002440" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-002440-a" origId="BD-SECURITY-SENSLOG" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002460" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-002460-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002470" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-002470-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002480" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="APSC_DV-002480-a" origId="SECURITY-15" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002510" desc="Protect against command injection" id="APSC_DV-002510-a" origId="BD-SECURITY-TDCMD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against environment injection" id="APSC_DV-002520-a" origId="BD-SECURITY-TDENV" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against file name injection" id="APSC_DV-002520-b" origId="BD-SECURITY-TDFNAMES" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against SQL injection" id="APSC_DV-002520-c" origId="BD-SECURITY-TDSQL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Never use unfiltered data from an untrusted user as the format parameter" id="APSC_DV-002520-d" origId="SECURITY-36" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Avoid tainted data in array indexes" id="APSC_DV-002520-e" origId="BD-SECURITY-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="APSC_DV-002520" desc="Avoid potential integer overflow/underflow on tainted data" id="APSC_DV-002520-f" origId="BD-SECURITY-TDINTOVERF" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-002520-g" origId="BD-SECURITY-LOG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against command injection" id="APSC_DV-002520-h" origId="BD-SECURITY-TDCMD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Avoid printing tainted data on the output console" id="APSC_DV-002520-i" origId="BD-SECURITY-TDCONSOLE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002520-j" origId="BD-SECURITY-TDINPUT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-002520" desc="Untrusted data is used as a loop boundary" id="APSC_DV-002520-k" origId="SECURITY-38" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against environment injection" id="APSC_DV-002530-a" origId="BD-SECURITY-TDENV" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against file name injection" id="APSC_DV-002530-b" origId="BD-SECURITY-TDFNAMES" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against SQL injection" id="APSC_DV-002530-c" origId="BD-SECURITY-TDSQL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Never use unfiltered data from an untrusted user as the format parameter" id="APSC_DV-002530-d" origId="SECURITY-36" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Avoid tainted data in array indexes" id="APSC_DV-002530-e" origId="BD-SECURITY-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="APSC_DV-002530" desc="Avoid potential integer overflow/underflow on tainted data" id="APSC_DV-002530-f" origId="BD-SECURITY-TDINTOVERF" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-002530-g" origId="BD-SECURITY-LOG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against command injection" id="APSC_DV-002530-h" origId="BD-SECURITY-TDCMD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Avoid printing tainted data on the output console" id="APSC_DV-002530-i" origId="BD-SECURITY-TDCONSOLE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002530-j" origId="BD-SECURITY-TDINPUT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-002530" desc="Untrusted data is used as a loop boundary" id="APSC_DV-002530-k" origId="SECURITY-38" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002540" desc="Protect against SQL injection" id="APSC_DV-002540-a" origId="BD-SECURITY-TDSQL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against environment injection" id="APSC_DV-002550-a" origId="BD-SECURITY-TDENV" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against file name injection" id="APSC_DV-002550-b" origId="BD-SECURITY-TDFNAMES" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against SQL injection" id="APSC_DV-002550-c" origId="BD-SECURITY-TDSQL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Never use unfiltered data from an untrusted user as the format parameter" id="APSC_DV-002550-d" origId="SECURITY-36" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Avoid tainted data in array indexes" id="APSC_DV-002550-e" origId="BD-SECURITY-ARRAY" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="APSC_DV-002550" desc="Avoid potential integer overflow/underflow on tainted data" id="APSC_DV-002550-f" origId="BD-SECURITY-TDINTOVERF" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-002550-g" origId="BD-SECURITY-LOG" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against command injection" id="APSC_DV-002550-h" origId="BD-SECURITY-TDCMD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Avoid printing tainted data on the output console" id="APSC_DV-002550-i" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002550-j" origId="BD-SECURITY-TDINPUT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-002550" desc="Untrusted data is used as a loop boundary" id="APSC_DV-002550-k" origId="SECURITY-38" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against environment injection" id="APSC_DV-002560-a" origId="BD-SECURITY-TDENV" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against file name injection" id="APSC_DV-002560-b" origId="BD-SECURITY-TDFNAMES" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against SQL injection" id="APSC_DV-002560-c" origId="BD-SECURITY-TDSQL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Never use unfiltered data from an untrusted user as the format parameter" id="APSC_DV-002560-d" origId="SECURITY-36" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Avoid tainted data in array indexes" id="APSC_DV-002560-e" origId="BD-SECURITY-ARRAY" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="APSC_DV-002560" desc="Avoid potential integer overflow/underflow on tainted data" id="APSC_DV-002560-f" origId="BD-SECURITY-TDINTOVERF" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-002560-g" origId="BD-SECURITY-LOG" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against command injection" id="APSC_DV-002560-h" origId="BD-SECURITY-TDCMD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Avoid printing tainted data on the output console" id="APSC_DV-002560-i" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002560-j" origId="BD-SECURITY-TDINPUT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-002560" desc="Untrusted data is used as a loop boundary" id="APSC_DV-002560-k" origId="SECURITY-38" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002570" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-002570-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002570" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="APSC_DV-002570-b" origId="SECURITY-15" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid buffer overflow due to defining incorrect format limits" id="APSC_DV-002590-a" origId="BD-PB-OVERFFMT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid overflow due to reading a not zero terminated string" id="APSC_DV-002590-b" origId="BD-PB-OVERFNZT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid overflow when reading from a buffer" id="APSC_DV-002590-c" origId="BD-PB-OVERFRD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid overflow when writing to a buffer" id="APSC_DV-002590-d" origId="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid wraparounds when performing arithmetic integer operations" id="APSC_DV-002590-e" origId="BD-PB-INTWRAP" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Prevent buffer overflows from tainted data" id="APSC_DV-002590-f" origId="BD-SECURITY-BUFWRITE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid potential integer overflow/underflow on tainted data" id="APSC_DV-002590-g" origId="BD-SECURITY-TDINTOVERF" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="APSC_DV-002590-h" origId="BD-SECURITY-OVERFFMT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid buffer read overflow from tainted data" id="APSC_DV-002590-i" origId="BD-SECURITY-OVERFRD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid buffer write overflow from tainted data" id="APSC_DV-002590-j" origId="BD-SECURITY-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Ensure the output buffer is large enough when using path manipulation functions" id="APSC_DV-002590-k" origId="BD-PB-PATHBUF" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="APSC_DV-003110" desc="Do not hard code string literals" id="APSC_DV-003110-a" origId="CODSTA-203" sev="1" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-003235" desc="The value returned by a POSIX library function that may return an error should be used" id="APSC_DV-003235-a" origId="CODSTA-227" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-003235" desc="Empty 'catch' blocks should not be used" id="APSC_DV-003235-b" origId="EXCEPT-25" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="8;" authUrg="0;" cat="AUTOSAR-A0_1_1" desc="Avoid unused values" id="AUTOSAR-A0_1_1-a" origId="BD-PB-VOVR" sev="2" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A0_1_2" desc="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="AUTOSAR-A0_1_2-a" origId="CODSTA-CPP-58" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_1_3" desc="Every defined function with internal linkage shall be used at least once" id="AUTOSAR-A0_1_3-a" origId="OPT-30" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A0_1_4" desc="Eliminate unused parameters" id="AUTOSAR-A0_1_4-a" origId="OPT-03" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_1_5" desc="There shall be no unused named parameters in virtual functions" id="AUTOSAR-A0_1_5-a" origId="OPT-42" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="1;" authUrg="0;" cat="AUTOSAR-A0_1_6" desc="A project shall not contain unused type declarations" id="AUTOSAR-A0_1_6-a" origId="GLOBAL-UNUSEDTYPE" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_4_2" desc="Type long double shall not be used" id="AUTOSAR-A0_4_2-a" origId="PORT-32" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_4_4" desc="Validate values passed to library functions" id="AUTOSAR-A0_4_4-a" origId="BD-API-VALPARAM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_1_1" desc="Be wary about using multiple inheritance of classes that are not abstract interfaces" id="AUTOSAR-A10_1_1-a" origId="OOP-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_2_1" desc="Never redefine an inherited nonvirtual function" id="AUTOSAR-A10_2_1-a" origId="OOP-32" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_2_1" desc="Member functions declared in derived class should not hide functions declared in base classes" id="AUTOSAR-A10_2_1-b" origId="OOP-53" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A10_3_1" desc="Only one of virtual, override or final should be specified in a member function declaration" id="AUTOSAR-A10_3_1-a" origId="CODSTA-MCPP-24" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A10_3_2" desc="Each overriding virtual function shall be declared with the override or final specifier" id="AUTOSAR-A10_3_2-a" origId="CODSTA-MCPP-05" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_3_3" desc="Do not introduce virtual functions in a final class" id="AUTOSAR-A10_3_3-a" origId="CODSTA-MCPP-52" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_3_5" desc="A user-defined assignment operator shall not be virtual" id="AUTOSAR-A10_3_5-a" origId="OOP-56" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_4_1" desc="Hierarchies should be based on abstract classes" id="AUTOSAR-A10_4_1-a" origId="OOP-40" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A11_0_1" desc="A non-POD type should be defined as class" id="AUTOSAR-A11_0_1-a" origId="OOP-55" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A11_0_2" desc="Structs should only contain public data members and should not be a base or inherit" id="AUTOSAR-A11_0_2-a" origId="OOP-57" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A11_3_1" desc="Friend declarations shall not be used except declarations of comparison operators" id="AUTOSAR-A11_3_1-a" origId="OOP-11_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_0_1" desc="If a class declares a copy or move operation, or a destructor, either via '=default', '=delete', or via a user-provided declaration, then all others of these five special member functions shall be declared as well" id="AUTOSAR-A12_0_1-a" origId="CODSTA-MCPP-56" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_0_2" desc="Do not compare objects of a class that may contain padding bits with C standard library functions" id="AUTOSAR-A12_0_2-a" origId="CODSTA-CPP-100" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_1" desc="All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" id="AUTOSAR-A12_1_1-a" origId="PB-43" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_1" desc="All member variables should be initialized in constructor" id="AUTOSAR-A12_1_1-b" origId="INIT-06" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_2" desc="Both NSDMI and a non-static member initializer in a constructor shall not be used in the same type" id="AUTOSAR-A12_1_2-a" origId="INIT-18" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_3" desc="User-defined constructors that initialize data members with the same constant values across all constructors should initialize using NSDMI instead" id="AUTOSAR-A12_1_3-a" origId="INIT-17_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_4" desc="All constructors that are callable with a single argument of fundamental type shall be declared explicit" id="AUTOSAR-A12_1_4-a" origId="OOP-45" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_5" desc="Use delegating constructors to reduce code duplication" id="AUTOSAR-A12_1_5-a" origId="CODSTA-CPP-106" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_6" desc="Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors" id="AUTOSAR-A12_1_6-a" origId="CODSTA-MCPP-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_4_1" desc="Make base class destructors public and virtual, or protected and nonvirtual" id="AUTOSAR-A12_4_1-a" origId="OOP-31" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="AUTOSAR-A12_4_2" desc="If a public destructor of a class is non-virtual, then the class should be declared final" id="AUTOSAR-A12_4_2-a" origId="CODSTA-MCPP-23" sev="4" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_6_1" desc="Prefer initialization to assignment in constructors" id="AUTOSAR-A12_6_1-a" origId="INIT-14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_7_1" desc="Define special members as =default when the behavior is equivalent to the compiler's behavior" id="AUTOSAR-A12_7_1-a" origId="CODSTA-CPP-105" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_1" desc="A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member" id="AUTOSAR-A12_8_1-a" origId="OOP-46" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_2" desc="User-defined copy and move assignment operators should use user-defined no-throw swap function" id="AUTOSAR-A12_8_2-a" origId="CODSTA-MCPP-49" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_3" desc="Do not rely on the value of a moved-from object" id="AUTOSAR-A12_8_3-a" origId="BD-PB-SUBSEQMOVE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_4" desc="Use std::move() on rvalue references and std::forward() on forwarding references" id="AUTOSAR-A12_8_4-a" origId="CODSTA-MCPP-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_5" desc="User-provided copy assignment operators shall handle self-assignment" id="AUTOSAR-A12_8_5-a" origId="OOP-34" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_6" desc="Avoid public copy constructors and assignment operators in base classes" id="AUTOSAR-A12_8_6-a" origId="OOP-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_7" desc="Declare assignment operators with the ref-qualifier &amp;" id="AUTOSAR-A12_8_7-a" origId="CODSTA-MCPP-19" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_1_2" desc="User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" id="AUTOSAR-A13_1_2-a" origId="NAMING-51" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_1_3" desc="User defined literals operators shall only perform conversion of passed parameters" id="AUTOSAR-A13_1_3-a" origId="CODSTA-MCPP-33" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_2_1" desc="Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type" id="AUTOSAR-A13_2_1-a" origId="CODSTA-CPP-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_2_2" desc="A binary arithmetic operator and a bitwise operator shall return a 'prvalue'" id="AUTOSAR-A13_2_2-a" origId="CODSTA-CPP-102" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_2_3" desc="A relational operator shall return a boolean value" id="AUTOSAR-A13_2_3-a" origId="CODSTA-CPP-101" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_3_1" desc="Avoid Overloading on Forwarding References" id="AUTOSAR-A13_3_1-a" origId="CODSTA-MCPP-14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_1" desc="When overloading the subscript operator (operator[]), implement both const and non-const versions" id="AUTOSAR-A13_5_1-a" origId="HICPP-13_2_4-a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_2" desc="User-conversion cast operators should be made explicit" id="AUTOSAR-A13_5_2-a" origId="CODSTA-MCPP-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_3" desc="Do not use user-defined conversion functions" id="AUTOSAR-A13_5_3-a" origId="CODSTA-CPP-05" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_4" desc="If two opposite equality operators ('==', '!=') are defined in a class, one shall be defined in terms of the other" id="AUTOSAR-A13_5_4-b" origId="CODSTA-CPP-86" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_5" desc="Comparison operators shall be non-member functions" id="AUTOSAR-A13_5_5-a" origId="CODSTA-CPP-107" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_5" desc="Comparison operators shall be non-member functions with identical parameter types and noexcept" id="AUTOSAR-A13_5_5-b" origId="CODSTA-CPP-107_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_6_1" desc="Digit sequences separators ' shall only be used consistently" id="AUTOSAR-A13_6_1-a" origId="CODSTA-MCPP-25" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A14_5_1" desc="A template constructor shall not participate in overload resolution for a single argument of the enclosing class type" id="AUTOSAR-A14_5_1-a" origId="TEMPL-07_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A14_5_3" desc="A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations" id="AUTOSAR-A14_5_3-a" origId="TEMPL-18" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A14_7_2" desc="Template specialization shall be declared in the same file as the primary template or a user-defined type, for which the specialization is declared" id="AUTOSAR-A14_7_2-a" origId="TEMPL-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A14_8_2" desc="Overloaded function templates shall not be explicitly specialized" id="AUTOSAR-A14_8_2-a" origId="TEMPL-09" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_0_2" desc="Ensure resources are freed" id="AUTOSAR-A15_0_2-a" origId="BD-RES-LEAKS" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_1_1" desc="Only use instances of std::exception for exceptions" id="AUTOSAR-A15_1_1-a" origId="HICPP-15_1_1-a" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_1_2" desc="An exception object should not have pointer type" id="AUTOSAR-A15_1_2-a" origId="EXCEPT-09" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_1_4" desc="Ensure resources are freed" id="AUTOSAR-A15_1_4-a" origId="BD-RES-LEAKS" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_1_5" desc="Do not throw an exception across execution boundaries" id="AUTOSAR-A15_1_5-a" origId="PORT-30" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_2_1" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="AUTOSAR-A15_2_1-a" origId="EXCEPT-18" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_2_1" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-A15_2_1-b" origId="EXCEPT-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_3_2" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-A15_3_2-a" origId="EXCEPT-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_3_3" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="AUTOSAR-A15_3_3-a" origId="EXCEPT-06" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_3_4" desc="Avoid using catch-all exception handlers" id="AUTOSAR-A15_3_4-a" origId="EXCEPT-26" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_3_5" desc="A class type exception shall always be caught by reference" id="AUTOSAR-A15_3_5-a" origId="EXCEPT-15" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_1" desc="Do not use throw exception specifications" id="AUTOSAR-A15_4_1-a" origId="EXCEPT-23" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_2" desc="Avoid throwing exceptions from functions that are declared not to throw" id="AUTOSAR-A15_4_2-a" origId="BD-PB-NOEXCEPT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_3" desc="If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" id="AUTOSAR-A15_4_3-a" origId="GLOBAL-EXCSPECDECL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="AUTOSAR-A15_4_4" desc="Declare functions 'noexcept' if they will not emit exceptions" id="AUTOSAR-A15_4_4-a" origId="CODSTA-MCPP-09" sev="2" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_5" desc="Checked exceptions that could be thrown from a function shall be specified in the comment directly before the function declaration" id="AUTOSAR-A15_4_5-a" origId="EXCEPT-22" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_1" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="AUTOSAR-A15_5_1-a" origId="EXCEPT-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_1" desc="All user-provided move constructors and move assignment operators shall not exit with an exception" id="AUTOSAR-A15_5_1-b" origId="EXCEPT-21" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_2" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="AUTOSAR-A15_5_2-a" origId="PB-44" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_2" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-A15_5_2-b" origId="PB-75" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_2" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-A15_5_2-c" origId="PB-75_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="AUTOSAR-A15_5_3-a" origId="PB-44" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="AUTOSAR-A15_5_3-b" origId="EXCEPT-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Do not throw from within destructor" id="AUTOSAR-A15_5_3-c" origId="EXCEPT-03" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="AUTOSAR-A15_5_3-d" origId="EXCEPT-06" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="An empty throw shall only be used in the compound-statement of a catch handler" id="AUTOSAR-A15_5_3-e" origId="EXCEPT-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Exceptions shall be raised only after start-up and before termination of the program" id="AUTOSAR-A15_5_3-f" origId="EXCEPT-08" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-A15_5_3-g" origId="EXCEPT-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="AUTOSAR-A15_5_3-h" origId="EXCEPT-14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="AUTOSAR-A15_5_3-i" origId="EXCEPT-18" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Always catch exceptions" id="AUTOSAR-A15_5_3-j" origId="BD-PB-EXCEPT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Properly define exit handlers" id="AUTOSAR-A15_5_3-k" origId="BD-PB-EXITHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" id="AUTOSAR-A16_0_1-a" origId="PREPROC-26" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="#error directive shall not be used" id="AUTOSAR-A16_0_1-b" origId="PREPROC-22" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="The #pragma directive shall not be used" id="AUTOSAR-A16_0_1-c" origId="PREPROC-23" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="Avoid using macro definitions" id="AUTOSAR-A16_0_1-d" origId="PREPROC-01" sev="2" total="16"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="#undef shall not be used" id="AUTOSAR-A16_0_1-e" origId="PREPROC-25" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_2_1" desc="The following character sequences shall not appear in header file names: ', \, /*, //, or &quot;" id="AUTOSAR-A16_2_1-a" origId="PB-28" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_2_2" desc="A file should directly include only the headers that contain declarations and definitions required to compile that file" id="AUTOSAR-A16_2_2-a" origId="OPT-41" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_6_1" desc="#error directive shall not be used" id="AUTOSAR-A16_6_1-a" origId="PREPROC-22" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_7_1" desc="The #pragma directive shall not be used" id="AUTOSAR-A16_7_1-a" origId="PREPROC-23" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Do not #define nor #undef identifier 'defined'" id="AUTOSAR-A17_0_1-a" origId="MISRA2004-20_1_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)" id="AUTOSAR-A17_0_1-b" origId="CODSTA-92_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="AUTOSAR-A17_0_1-c" origId="CODSTA-92_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Do not redefine reserved words" id="AUTOSAR-A17_0_1-d" origId="MISRA2004-20_1_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Do not #define or #undef identifiers with names which start with underscore" id="AUTOSAR-A17_0_1-e" origId="MISRA2004-20_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_1_1" desc="The error indicator 'errno' shall not be used" id="AUTOSAR-A17_1_1-a" origId="MISRA2004-20_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_6_1" desc="Do not modify the standard namespaces 'std' and 'posix'" id="AUTOSAR-A17_6_1-a" origId="CODSTA-CPP-95" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A18_0_1" desc="The C library shall not be used" id="AUTOSAR-A18_0_1-a" origId="CODSTA-CPP-59" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A18_0_2" desc="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" id="AUTOSAR-A18_0_2-a" origId="MISRA2004-20_10" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_0_3" desc="Do not include &lt;locale.h> header" id="AUTOSAR-A18_0_3-a" origId="MISRA-121_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_0_3" desc="The 'setlocale' function should not be used" id="AUTOSAR-A18_0_3-b" origId="MISRA-121_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A18_1_1" desc="C-style arrays shall not be used" id="AUTOSAR-A18_1_1-a" origId="STL-37" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_2" desc="Avoid using vector&lt;bool>" id="AUTOSAR-A18_1_2-a" origId="STL-14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_3" desc="Prefer to use std::unique_ptr instead of std::auto_ptr" id="AUTOSAR-A18_1_3-a" origId="CODSTA-MCPP-16_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_4" desc="A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" id="AUTOSAR-A18_1_4-a" origId="BD-PB-ARRPTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_6" desc="All std::hash specializations for user-defined types shall have a noexcept function call operator" id="AUTOSAR-A18_1_6-a" origId="CODSTA-MCPP-27" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_1" desc="Do not use calloc, malloc, realloc and free functions" id="AUTOSAR-A18_5_1-a" origId="MRM-46" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_10" desc="Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new'" id="AUTOSAR-A18_5_10-a" origId="MRM-55" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_10" desc="An overhead should be used when an array of objects is passed to the placement 'new' allocation function" id="AUTOSAR-A18_5_10-b" origId="MRM-55_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_11" desc="Write operator delete if you write operator new" id="AUTOSAR-A18_5_11-a" origId="MRM-26" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_11" desc="Write operator delete[] if you write operator new[]" id="AUTOSAR-A18_5_11-b" origId="MRM-27" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A18_5_2" desc="Dynamic heap memory allocation shall not be used" id="AUTOSAR-A18_5_2-a" origId="MISRA2004-20_4" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_3" desc="Never provide brackets ([]) for delete when deallocating non-arrays" id="AUTOSAR-A18_5_3-a" origId="MRM-35" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_3" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="AUTOSAR-A18_5_3-b" origId="MRM-36" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_3" desc="Properly deallocate dynamically allocated resources" id="AUTOSAR-A18_5_3-c" origId="BD-RES-BADDEALLOC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_4" desc="Define both sized and unsized versions of operator delete" id="AUTOSAR-A18_5_4-a" origId="CODSTA-MCPP-31" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_5" desc="Use the same form in corresponding calls to new/malloc and delete/free" id="AUTOSAR-A18_5_5-a" origId="MRM-06" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_5" desc="Freed memory shouldn't be accessed under any circumstances" id="AUTOSAR-A18_5_5-b" origId="MRM-31" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_5" desc="Properly define new handlers" id="AUTOSAR-A18_5_5-c" origId="BD-PB-NEWHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_8" desc="Use allocation by declaration rather than by new or malloc" id="AUTOSAR-A18_5_8-a" origId="MRM-30" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_9" desc="The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails" id="AUTOSAR-A18_5_9-a" origId="MRM-53" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_1" desc="Prefer lambdas over std::bind, std::bind1st and std::bind2nd" id="AUTOSAR-A18_9_1-a" origId="CODSTA-MCPP-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_2" desc="The 'std::forward' function should be used to forward forwarding references" id="AUTOSAR-A18_9_2-a" origId="CODSTA-MCPP-13_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_3" desc="Do not use std::move on objects declared with the const or const &amp; type" id="AUTOSAR-A18_9_3-a" origId="CODSTA-MCPP-53" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_4" desc="Do not subsequently use the argument to std::forward" id="AUTOSAR-A18_9_4-a" origId="BD-PB-SUBSEQFRWD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'register' storage class specifier shall not be used" id="AUTOSAR-A1_1_1-a" origId="MISRA-028" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="A copy assignment operator should be declared when a copy constructor is declared (and vice versa)" id="AUTOSAR-A1_1_1-b" origId="MRM-40_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor" id="AUTOSAR-A1_1_1-c" origId="MRM-40_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The C library shall not be used" id="AUTOSAR-A1_1_1-d" origId="CODSTA-CPP-59" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Prefer lambdas over std::bind, std::bind1st and std::bind2nd" id="AUTOSAR-A1_1_1-e" origId="CODSTA-MCPP-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'binder1st' and 'binder2nd' identifiers should not be used" id="AUTOSAR-A1_1_1-f" origId="CODSTA-MCPP-07_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Prefer to use std::unique_ptr instead of std::auto_ptr" id="AUTOSAR-A1_1_1-g" origId="CODSTA-MCPP-16_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'random_shuffle' identifier should not be used" id="AUTOSAR-A1_1_1-h" origId="CODSTA-MCPP-41" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Do not use the increment operator (++) on an operand of type 'bool'" id="AUTOSAR-A1_1_1-i" origId="CODSTA-MCPP-42" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'set_unexpected' identifier should not be used" id="AUTOSAR-A1_1_1-j" origId="CODSTA-MCPP-43" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Do not use throw exception specifications" id="AUTOSAR-A1_1_1-k" origId="EXCEPT-23" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_1" desc="Do not store an already-owned pointer value in an unrelated smart pointer" id="AUTOSAR-A20_8_1-a" origId="BD-PB-PTRVALUE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_2" desc="Use smart pointers when passing a pointer to an object in a thread" id="AUTOSAR-A20_8_2-a" origId="CODSTA-MCPP-29" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_3" desc="Use smart pointers when passing a pointer to an object in a thread" id="AUTOSAR-A20_8_3-a" origId="CODSTA-MCPP-29" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_4" desc="Consider using 'std::unique_ptr' instead of 'std::shared_ptr' for local objects" id="AUTOSAR-A20_8_4-a" origId="CODSTA-MCPP-30" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_5" desc="'std::make_unique' shall be used to construct objects owned by 'std::unique_ptr'" id="AUTOSAR-A20_8_5-a" origId="CODSTA-MCPP-16_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_6" desc="Prefer 'std::make_shared' to the direct use of new" id="AUTOSAR-A20_8_6-a" origId="CODSTA-MCPP-16_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_7" desc="Avoid cyclic shared_ptr references" id="AUTOSAR-A20_8_7-a" origId="BD-RES-CSP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A21_8_1" desc="Do not pass incorrect values to ctype.h library functions" id="AUTOSAR-A21_8_1-a" origId="BD-API-CTYPE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A23_0_1" desc="Use const container calls when the result is immediately converted to a const iterator" id="AUTOSAR-A23_0_1-a" origId="CODSTA-MCPP-51" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A23_0_2" desc="Do not modify container while iterating over it" id="AUTOSAR-A23_0_2-a" origId="BD-CO-ITMOD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A23_0_2" desc="Use valid references, pointers, and iterators to reference elements of a basic_string" id="AUTOSAR-A23_0_2-b" origId="BD-CO-STRMOD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A25_1_1" desc="Make predicates const pure functions" id="AUTOSAR-A25_1_1-a" origId="STL-29" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A25_4_1" desc="For associative containers never use comparison function returning true for equal values" id="AUTOSAR-A25_4_1-a" origId="STL-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A26_5_1" desc="Do not use the rand() function for generating pseudorandom numbers" id="AUTOSAR-A26_5_1-a" origId="SECURITY-02_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A26_5_2" desc="Properly seed pseudorandom number generators" id="AUTOSAR-A26_5_2-a" origId="BD-SECURITY-RAND" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid calling functions printf/wprintf with only one argument other than string constant" id="AUTOSAR-A27_0_1-a" origId="SECURITY-05" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid tainted data in array indexes" id="AUTOSAR-A27_0_1-b" origId="BD-SECURITY-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Prevent buffer overflows from tainted data" id="AUTOSAR-A27_0_1-c" origId="BD-SECURITY-BUFWRITE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="AUTOSAR-A27_0_1-d" origId="BD-SECURITY-OVERFFMT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid buffer read overflow from tainted data" id="AUTOSAR-A27_0_1-e" origId="BD-SECURITY-OVERFRD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid buffer write overflow from tainted data" id="AUTOSAR-A27_0_1-f" origId="BD-SECURITY-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Protect against command injection" id="AUTOSAR-A27_0_1-g" origId="BD-SECURITY-TDCMD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Exclude unsanitized user input from format strings" id="AUTOSAR-A27_0_1-h" origId="BD-SECURITY-TDINPUT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Avoid overflow due to reading a not zero terminated string" id="AUTOSAR-A27_0_2-a" origId="BD-PB-OVERFNZT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Avoid overflow when writing to a buffer" id="AUTOSAR-A27_0_2-b" origId="BD-PB-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Do not use the 'char' buffer to store input from 'std::cin'" id="AUTOSAR-A27_0_2-c" origId="SECURITY-51" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Prevent buffer overflows from tainted data" id="AUTOSAR-A27_0_2-e" origId="BD-SECURITY-BUFWRITE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Avoid buffer write overflow from tainted data" id="AUTOSAR-A27_0_2-f" origId="BD-SECURITY-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_3" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="AUTOSAR-A27_0_3-a" origId="BD-PB-STREAMINOUT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="AUTOSAR-A27_0_4-a" origId="SECURITY-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="Avoid using unsafe string functions that do not check bounds" id="AUTOSAR-A27_0_4-b" origId="SECURITY-13" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="Do not use the 'char' buffer to store input from 'std::cin'" id="AUTOSAR-A27_0_4-c" origId="SECURITY-51" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="C-style strings shall not be used" id="AUTOSAR-A27_0_4-d" origId="PB-76" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="AUTOSAR-A2_10_1-a" origId="MISRA2004-5_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="AUTOSAR-A2_10_1-b" origId="MISRA2004-5_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in a local scope should not hide identifiers declared in a class scope" id="AUTOSAR-A2_10_1-c" origId="CODSTA-CPP-83" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope" id="AUTOSAR-A2_10_1-d" origId="CODSTA-CPP-84" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope" id="AUTOSAR-A2_10_1-e" origId="CODSTA-CPP-85" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_4" desc="The identifier name of a non-member object with static storage duration shall not be reused within a namespace" id="AUTOSAR-A2_10_4-a" origId="GLOBAL-REUSEDQUALGLOBVAR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_4" desc="The identifier name of a non-member static function shall not be reused within a namespace" id="AUTOSAR-A2_10_4-b" origId="GLOBAL-REUSEDQUALSTATFUN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_5" desc="Identifiers that define objects with external linkage shall be unique" id="AUTOSAR-A2_10_5-a" origId="GLOBAL-REUSEDEXTVAR" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_5" desc="Identifiers that define functions with external linkage shall be unique" id="AUTOSAR-A2_10_5-b" origId="GLOBAL-REUSEDEXTFUN" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_6" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="AUTOSAR-A2_10_6-a" origId="CODSTA-CPP-87_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_6" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="AUTOSAR-A2_10_6-b" origId="CODSTA-CPP-87_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_6" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="AUTOSAR-A2_10_6-c" origId="CODSTA-CPP-87_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_11_1" desc="Do not use the volatile keyword" id="AUTOSAR-A2_11_1-a" origId="MISRA-046_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_1" desc="Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used" id="AUTOSAR-A2_13_1-a" origId="CODSTA-CPP-60_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_2" desc="String literals with different encoding prefixes shall not be concatenated" id="AUTOSAR-A2_13_2-a" origId="PB-38_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_3" desc="Type wchar_t shall not be used" id="AUTOSAR-A2_13_3-a" origId="PORT-33" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_4" desc="A string literal shall not be modified" id="AUTOSAR-A2_13_4-a" origId="PB-27" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_5" desc="Hexadecimal constants will be represented using all uppercase letters" id="AUTOSAR-A2_13_5-a" origId="CODSTA-50" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_6" desc="Universal character names shall be used only inside character or string literals" id="AUTOSAR-A2_13_6-a" origId="NAMING-52" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_3_1" desc="Only use characters defined in the ISO C standard" id="AUTOSAR-A2_3_1-a" origId="MISRA-005" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_5_1" desc="Trigraphs shall not be used" id="AUTOSAR-A2_5_1-a" origId="MISRA2004-4_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_5_2" desc="Do not use the following digraphs: &lt;%, %>, &lt;:, :>, %:, %:%:" id="AUTOSAR-A2_5_2-a" origId="CODSTA-48" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_7_1" desc="Line-splicing shall not be used in // comments" id="AUTOSAR-A2_7_1-a" origId="COMMENT-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_7_2" desc="Sections of code should not be &quot;commented out&quot;" id="AUTOSAR-A2_7_2-a" origId="MISRA2004-2_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="33;" authUrg="0;" cat="AUTOSAR-A2_7_3" desc="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" id="AUTOSAR-A2_7_3-a" origId="COMMENT-14" sev="2" total="33"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="32;" authUrg="0;" cat="AUTOSAR-A2_7_3" desc="Function parameters and return type should be documented in a comment that precedes the function declaration" id="AUTOSAR-A2_7_3-b" origId="COMMENT-14_b" sev="2" total="32"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_8_1" desc="An include file for a class should have a file name of the form &lt;class name> + extension" id="AUTOSAR-A2_8_1-a" origId="NAMING-32" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_1" desc="A header file shall not contain definitions of functions or objects that are non-inline and have external linkage" id="AUTOSAR-A3_1_1-a" origId="PFO-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_2" desc="Header files should have a file extension of: &quot;.h&quot;, &quot;.hpp&quot; or &quot;.hxx&quot;" id="AUTOSAR-A3_1_2-a" origId="NAMING-53" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_3" desc="Implementation files in C++ will always have a file name extension of &quot;.cpp&quot;" id="AUTOSAR-A3_1_3-a" origId="NAMING-49" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_4" desc="When an array with external linkage is declared, its size should be explicitly specified" id="AUTOSAR-A3_1_4-a" origId="MISRA2004-8_12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_5" desc="A function definition should not be placed in a class specification unless the function is intended to be inlined" id="AUTOSAR-A3_1_5-a" origId="CODSTA-CPP-32" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_6" desc="Trivial accessor and mutator functions should be inlined" id="AUTOSAR-A3_1_6-a" origId="OPT-23" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="AUTOSAR-A3_3_1" desc="Objects or functions with external linkage shall be declared in a header file" id="AUTOSAR-A3_3_1-a" origId="MISRA-023" sev="2" total="16"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_3_1" desc="A header file shall not contain definitions of functions or objects that are non-inline and have external linkage" id="AUTOSAR-A3_3_1-b" origId="PFO-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A3_3_2" desc="Static and thread-local objects shall be constant-initialized" id="AUTOSAR-A3_3_2-a" origId="CODSTA-MCPP-32" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="Do not use resources that have been freed" id="AUTOSAR-A3_8_1-a" origId="BD-RES-FREE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="The address of an object with automatic storage shall not be returned from a function" id="AUTOSAR-A3_8_1-b" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="AUTOSAR-A3_8_1-c" origId="MISRA2004-17_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="Do not point to a wrapped object that has been freed" id="AUTOSAR-A3_8_1-d" origId="BD-PB-WRAPESC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="19;" authUrg="0;" cat="AUTOSAR-A3_9_1" desc="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" id="AUTOSAR-A3_9_1-b" origId="CODSTA-223" sev="2" total="19"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_10_1" desc="The 'NULL' identifier should not be used" id="AUTOSAR-A4_10_1-a" origId="CODSTA-CPP-111" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="AUTOSAR-A4_10_1" desc="Prefer 'nullptr' over 'NULL' or '0'(zero)" id="AUTOSAR-A4_10_1-b" origId="CODSTA-MCPP-04" sev="2" total="17"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_5_1" desc="Expressions with type enum shall not be used as operands to built-in operators other than  [ ],  =, ==, !=, &lt;, &lt;=, >, >=, and the unary &amp; operator" id="AUTOSAR-A4_5_1-a" origId="CODSTA-70" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid implicit conversions from signed to unsigned type" id="AUTOSAR-A4_7_1-a" origId="PB-56" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="AUTOSAR-A4_7_1-b" origId="MISRA-043_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid conversions of constant values to a narrower type" id="AUTOSAR-A4_7_1-c" origId="PORT-28" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="AUTOSAR-A4_7_1-d" origId="MISRA-043" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid implicit conversions from wider to narrower floating type" id="AUTOSAR-A4_7_1-e" origId="MISRA2004-10_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid implicit conversions from floating to integral type" id="AUTOSAR-A4_7_1-f" origId="MISRA2004-10_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="AUTOSAR-A4_7_1-g" origId="MISRA-043_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid wraparounds when performing arithmetic integer operations" id="AUTOSAR-A4_7_1-h" origId="BD-PB-INTWRAP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of function calls" id="AUTOSAR-A5_0_1-a" origId="MISRA2004-12_2_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Do not use more than one volatile between two adjacent sequence points" id="AUTOSAR-A5_0_1-b" origId="MISRA2004-12_2_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="AUTOSAR-A5_0_1-c" origId="MISRA2004-12_2_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="AUTOSAR-A5_0_1-d" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="AUTOSAR-A5_0_1-e" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of function arguments" id="AUTOSAR-A5_0_1-f" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="AUTOSAR-A5_0_1-g" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_2" desc="The condition of an if-statement and the condition of an iteration-statement shall have type bool" id="AUTOSAR-A5_0_2-a" origId="CODSTA-CPP-64" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_3" desc="The declaration of objects should contain no more than 2 levels of pointer indirection" id="AUTOSAR-A5_0_3-a" origId="MISRA2004-17_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_4" desc="Don't treat arrays polymorphically" id="AUTOSAR-A5_0_4-a" origId="PB-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_4" desc="A pointer to an array of derived class objects should not be converted to a base class pointer" id="AUTOSAR-A5_0_4-b" origId="PB-57" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_4" desc="Do not treat arrays polymorphically" id="AUTOSAR-A5_0_4-c" origId="BD-PB-POLARR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_10_1" desc="A potentially virtual pointer to member function shall only be compared with nullptr" id="AUTOSAR-A5_10_1-a" origId="CODSTA-MCPP-26" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_16_1" desc="The conditional operator should not be used as a sub-expression" id="AUTOSAR-A5_16_1-a" origId="CODSTA-224" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="1;" cat="AUTOSAR-A5_1_1" desc="Avoid magic numbers" id="AUTOSAR-A5_1_1-a" origId="CODSTA-26" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_2" desc="Avoid default capture modes" id="AUTOSAR-A5_1_2-a" origId="CODSTA-MCPP-15_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_3" desc="Include a parameter list in every lambda expression" id="AUTOSAR-A5_1_3-a" origId="CODSTA-MCPP-46" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_4" desc="Never return lambdas that capture local objects by reference" id="AUTOSAR-A5_1_4-a" origId="CODSTA-MCPP-17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_4" desc="Never capture local objects from an outer lambda by reference" id="AUTOSAR-A5_1_4-b" origId="CODSTA-MCPP-17_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_4" desc="The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime" id="AUTOSAR-A5_1_4-c" origId="CODSTA-MCPP-17_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_6" desc="Return type of a non-void return type lambda expression should be explicitly specified" id="AUTOSAR-A5_1_6-a" origId="CODSTA-MCPP-45" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_7" desc="A lambda shall not be an operand to typeid" id="AUTOSAR-A5_1_7-a" origId="CODSTA-MCPP-28" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_8" desc="Lambda expressions should not be defined inside another lambda expression" id="AUTOSAR-A5_1_8-a" origId="CODSTA-MCPP-44" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_1" desc="Avoid dynamic_casts" id="AUTOSAR-A5_2_1-a" origId="CODSTA-CPP-35" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="2;" cat="AUTOSAR-A5_2_2" desc="C-style casts should not be used" id="AUTOSAR-A5_2_2-a" origId="CODSTA-CPP-11" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_3" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="AUTOSAR-A5_2_3-a" origId="MISRA2004-11_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_4" desc="Avoid using reinterpret_cast" id="AUTOSAR-A5_2_4-a" origId="CODSTA-CPP-09" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="Avoid accessing arrays out of bounds" id="AUTOSAR-A5_2_5-a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="Avoid accessing arrays and pointers out of bounds" id="AUTOSAR-A5_2_5-b" origId="BD-PB-OVERFARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="AUTOSAR-A5_2_5-c" origId="BD-PB-PTRARR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="Avoid tainted data in array indexes" id="AUTOSAR-A5_2_5-d" origId="BD-SECURITY-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_6" desc="The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators" id="AUTOSAR-A5_2_6-a" origId="CODSTA-104" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_3_1" desc="The operand of the 'typeid' operator shall not contain any expression that has side effects" id="AUTOSAR-A5_3_1-a" origId="CODSTA-CPP-104" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_3_1" desc="The operand of the 'typeid' operator shall not contain a function call that causes side effects" id="AUTOSAR-A5_3_1-b" origId="CODSTA-CPP-104_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-A5_3_2" desc="Avoid null pointer dereferencing" id="AUTOSAR-A5_3_2-a" origId="BD-PB-NP" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_3_3" desc="Do not delete objects with incomplete class at the point of deletion" id="AUTOSAR-A5_3_3-a" origId="PB-55" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_5_1" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="AUTOSAR-A5_5_1-a" origId="CODSTA-62" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-A5_6_1" desc="Avoid division by zero" id="AUTOSAR-A5_6_1-a" origId="BD-PB-ZERO" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_2_1" desc="Copy assignment operators should not have side effects that could affect copying the object" id="AUTOSAR-A6_2_1-a" origId="MRM-56" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_2_1" desc="Move assignment operators should not have side effects that could affect moving the object" id="AUTOSAR-A6_2_1-b" origId="MRM-57" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_2_2" desc="Expression statements shall not be explicit calls to constructors of temporary objects only" id="AUTOSAR-A6_2_2-a" origId="PB-77" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_4_1" desc="Every switch statement will have at least two cases and a potential default" id="AUTOSAR-A6_4_1-a" origId="CODSTA-54" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_1" desc="A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" id="AUTOSAR-A6_5_1-a" origId="CODSTA-MCPP-50" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_2" desc="A for loop shall contain a single loop-counter which shall not have floating type" id="AUTOSAR-A6_5_2-a" origId="CODSTA-CPP-69" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_3" desc="'Do' statements should not be used except in a function-like macro" id="AUTOSAR-A6_5_3-a" origId="CODSTA-18_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_4" desc="The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter" id="AUTOSAR-A6_5_4-a" origId="CODSTA-52" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_4" desc="The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop" id="AUTOSAR-A6_5_4-b" origId="CODSTA-53" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_6_1" desc="The goto statement shall not be used" id="AUTOSAR-A6_6_1-a" origId="MISRA2004-14_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A7_1_1" desc="Declare local variable as const whenever possible" id="AUTOSAR-A7_1_1-a" origId="CODSTA-CPP-53" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_2" desc="Use constexpr to declare const variables whenever possible" id="AUTOSAR-A7_1_2-a" origId="CODSTA-MCPP-11_a_cpp11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A7_1_2" desc="Use constexpr to declare functions whenever possible" id="AUTOSAR-A7_1_2-b" origId="CODSTA-MCPP-11_b_cpp11" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_3" desc="CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name" id="AUTOSAR-A7_1_3-a" origId="FORMAT-47_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_4" desc="The 'register' storage class specifier shall not be used" id="AUTOSAR-A7_1_4-a" origId="MISRA-028" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_5" desc="Do not overuse 'auto' specifier" id="AUTOSAR-A7_1_5-a" origId="CODSTA-MCPP-40" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_6" desc="Prefer alias declarations to typedefs" id="AUTOSAR-A7_1_6-a" origId="CODSTA-MCPP-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_7" desc="Only one statement shall be allowed per line" id="AUTOSAR-A7_1_7-a" origId="FORMAT-06" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="AUTOSAR-A7_1_7" desc="Multiple variable declarations shall not be allowed on the same line" id="AUTOSAR-A7_1_7-b" origId="FORMAT-29" sev="2" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="AUTOSAR-A7_1_7" desc="Each variable should be declared in a separate declaration statement" id="AUTOSAR-A7_1_7-c" origId="FORMAT-33" sev="2" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_8" desc="Do not place type specifiers before non-type specifiers in a declaration" id="AUTOSAR-A7_1_8-a" origId="HICPP-7_1_3-a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_9" desc="A class, structure, or enumeration will not be declared in the definition of its type" id="AUTOSAR-A7_1_9-a" origId="CODSTA-CPP-56" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_1" desc="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="AUTOSAR-A7_2_1-a" origId="PB-70" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_2" desc="Use an explicit enumeration base and ensure that it is large enough to store all enumerators" id="AUTOSAR-A7_2_2-a" origId="HICPP-7_2_1-a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_3" desc="Prefer Scoped Enums to Unscoped Enums" id="AUTOSAR-A7_2_3-a" origId="CODSTA-MCPP-03" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_4" desc="In an enumerator list, the &quot;=&quot; construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised" id="AUTOSAR-A7_2_4-a" origId="MISRA2004-9_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_5" desc="Enumeration types shall be used instead of integer types (and constants) as case labels" id="AUTOSAR-A7_2_5-a" origId="CODSTA-55" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_3_1" desc="Member functions declared in derived class should not hide functions declared in base classes" id="AUTOSAR-A7_3_1-a" origId="OOP-53" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_4_1" desc="The 'asm' declaration should not be used" id="AUTOSAR-A7_4_1-a" origId="CODSTA-234" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_5_1" desc="A function shall not return a pointer or a reference to a parameter that is passed by const reference" id="AUTOSAR-A7_5_1-a" origId="PB-39_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_5_2" desc="Do not use recursion" id="AUTOSAR-A7_5_2-a" origId="BD-PB-RECFUN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_6_1" desc="Never return from functions that should not return" id="AUTOSAR-A7_6_1-a" origId="BD-PB-NORETURN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_2_1" desc="Use a trailing return type syntax if the return type is preceded by the 'typename' keyword" id="AUTOSAR-A8_2_1-a" origId="TEMPL-17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_1" desc="Do not use functions with variable numbers of arguments" id="AUTOSAR-A8_4_1-a" origId="MISRA-069" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="2;" authUrg="0;" cat="AUTOSAR-A8_4_10" desc="A parameter shall be passed by reference if it can't be NULL" id="AUTOSAR-A8_4_10-a" origId="BD-PB-REFPARAM" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_11" desc="A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="AUTOSAR-A8_4_11-a" origId="CODSTA-MCPP-34" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="Do not pass std::unique_ptr by const reference" id="AUTOSAR-A8_4_12-a" origId="HICPP-8_2_4-a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="AUTOSAR-A8_4_12-b" origId="CODSTA-MCPP-34" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object" id="AUTOSAR-A8_4_12-c" origId="CODSTA-MCPP-35" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr'" id="AUTOSAR-A8_4_12-d" origId="CODSTA-MCPP-36" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_13" desc="A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="AUTOSAR-A8_4_13-a" origId="CODSTA-MCPP-34" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_13" desc="A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object" id="AUTOSAR-A8_4_13-b" origId="CODSTA-MCPP-35" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_13" desc="Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr'" id="AUTOSAR-A8_4_13-c" origId="CODSTA-MCPP-36" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_2" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="AUTOSAR-A8_4_2-a" origId="MISRA2004-16_8_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_3" desc="A parameter of a type that is not 'cheap to copy' should be passed by reference" id="AUTOSAR-A8_4_3-a" origId="CODSTA-CPP-109" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_3" desc="Declare reference parameters as const references whenever possible" id="AUTOSAR-A8_4_3-b" origId="CODSTA-CPP-43" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_4" desc="Multiple output values from a function should be returned as a struct or tuple" id="AUTOSAR-A8_4_4-a" origId="CODSTA-MCPP-48" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_5" desc="Use std::move() on rvalue references and std::forward() on forwarding references" id="AUTOSAR-A8_4_5-a" origId="CODSTA-MCPP-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_6" desc="Use std::move() on rvalue references and std::forward() on forwarding references" id="AUTOSAR-A8_4_6-a" origId="CODSTA-MCPP-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A8_4_7" desc="A parameter of const reference to a 'cheap to copy' type should be passed by value" id="AUTOSAR-A8_4_7-a" origId="CODSTA-CPP-108" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_8" desc="Output parameters shall not be used" id="AUTOSAR-A8_4_8-a" origId="CODSTA-CPP-103" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_9" desc="Declare reference parameters as const references whenever possible" id="AUTOSAR-A8_4_9-a" origId="CODSTA-CPP-43" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_0" desc="Avoid use before initialization" id="AUTOSAR-A8_5_0-a" origId="BD-PB-NOTINIT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_1" desc="List members in an initialization list in the order in which they are declared" id="AUTOSAR-A8_5_1-a" origId="INIT-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="AUTOSAR-A8_5_2" desc="Braced-initialization {}, without equals sign, shall be used for variable initialization" id="AUTOSAR-A8_5_2-a" origId="CODSTA-MCPP-38" sev="2" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_3" desc="A variable of type auto shall not be initialized using '{}' or '={}' braced-initialization" id="AUTOSAR-A8_5_3-a" origId="CODSTA-MCPP-39" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_4" desc="Avoid overloading constructors with std::initializer_list" id="AUTOSAR-A8_5_4-a" origId="CODSTA-MCPP-47" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A9_3_1" desc="Public member functions shall not return non-const handles to private/protected class-data" id="AUTOSAR-A9_3_1-a" origId="OOP-36" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_3_1" desc="Protected member function shall not return non-const handles to private class-data" id="AUTOSAR-A9_3_1-b" origId="OOP-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_5_1" desc="Unions shall not be used" id="AUTOSAR-A9_5_1-a" origId="MISRA2004-18_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_6_1" desc="Types of bit-fields should have defined sizes" id="AUTOSAR-A9_6_1-a" origId="CODSTA-233" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_6_2" desc="Do not declare member variables as bit-fields" id="AUTOSAR-A9_6_2-a" origId="CODSTA-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="AUTOSAR-M0_1_1-a" origId="MISRA2004-14_1_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute" id="AUTOSAR-M0_1_1-b" origId="MISRA2004-14_1_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in &quot;else&quot; block" id="AUTOSAR-M0_1_1-c" origId="MISRA2004-14_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="AUTOSAR-M0_1_1-d" origId="MISRA2004-14_1_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="AUTOSAR-M0_1_1-e" origId="MISRA2004-14_1_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in 'for' loop" id="AUTOSAR-M0_1_1-f" origId="MISRA2004-14_1_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in switch statement" id="AUTOSAR-M0_1_1-g" origId="MISRA2004-14_1_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="5;" authUrg="0;" cat="AUTOSAR-M0_1_10" desc="Every defined function with external linkage shall be used at least once" id="AUTOSAR-M0_1_10-a" origId="GLOBAL-UNUSEDFUNC" sev="4" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_10" desc="Every defined function with internal linkage shall be used at least once" id="AUTOSAR-M0_1_10-b" origId="OPT-30" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-a" origId="MISRA2004-13_7_ab" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-aa" origId="MISRA2004-13_7_aj" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-ab" origId="MISRA2004-13_7_k" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Avoid conditions that always evaluate to the same value" id="AUTOSAR-M0_1_2-ac" origId="BD-PB-CC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-b" origId="MISRA2004-13_7_v" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-c" origId="MISRA2004-13_7_z" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-d" origId="MISRA2004-13_7_n" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-e" origId="MISRA2004-13_7_s" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-f" origId="MISRA2004-13_7_t" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-g" origId="MISRA2004-13_7_u" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-h" origId="MISRA2004-13_7_j" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-i" origId="MISRA2004-13_7_l" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-j" origId="MISRA2004-13_7_m" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-k" origId="MISRA2004-13_7_w" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-l" origId="MISRA2004-13_7_x" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-m" origId="MISRA2004-13_7_y" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-n" origId="MISRA2004-13_7_ac" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-o" origId="MISRA2004-13_7_ad" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-p" origId="MISRA2004-13_7_ae" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-q" origId="MISRA2004-13_7_af" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-r" origId="MISRA2004-13_7_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-s" origId="MISRA2004-13_7_aa" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-t" origId="MISRA2004-13_7_ak" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-u" origId="MISRA2004-13_7_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-v" origId="MISRA2004-13_7_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-w" origId="MISRA2004-13_7_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-x" origId="MISRA2004-13_7_ag" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-y" origId="MISRA2004-13_7_ah" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-z" origId="MISRA2004-13_7_ai" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_3" desc="Avoid unused local variables" id="AUTOSAR-M0_1_3-a" origId="OPT-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M0_1_3" desc="Avoid unused private member variables" id="AUTOSAR-M0_1_3-c" origId="OPT-05" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="9;" authUrg="0;" cat="AUTOSAR-M0_1_4" desc="A project shall not contain non-volatile POD variables having only one use" id="AUTOSAR-M0_1_4-a" origId="GLOBAL-ONEUSEVAR" sev="2" total="9"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_8" desc="All non-empty functions with void return type shall have external side effect(s)" id="AUTOSAR-M0_1_8-a" origId="OPT-32" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M0_1_8" desc="Functions with void return type shall not be empty" id="AUTOSAR-M0_1_8-b" origId="OPT-32_b" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_9" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="AUTOSAR-M0_1_9-a" origId="MISRA2004-14_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_2_1" desc="An object shall not be assigned to an overlapping object" id="AUTOSAR-M0_2_1-a" origId="MISRA2004-18_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_2_1" desc="An object shall not be assigned to an overlapping object" id="AUTOSAR-M0_2_1-b" origId="PB-42" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Do not subtract two pointers that do not address elements of the same array" id="AUTOSAR-M0_3_1-a" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid overflow when writing to a buffer" id="AUTOSAR-M0_3_1-b" origId="BD-PB-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Do not compare two unrelated pointers" id="AUTOSAR-M0_3_1-c" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid accessing arrays out of bounds" id="AUTOSAR-M0_3_1-d" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid division by zero" id="AUTOSAR-M0_3_1-e" origId="BD-PB-ZERO" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid null pointer dereferencing" id="AUTOSAR-M0_3_1-f" origId="BD-PB-NP" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid overflow due to reading a not zero terminated string" id="AUTOSAR-M0_3_1-g" origId="BD-PB-OVERFNZT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid buffer overflow due to defining incorrect format limits" id="AUTOSAR-M0_3_1-h" origId="BD-PB-OVERFFMT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid overflow when reading from a buffer" id="AUTOSAR-M0_3_1-i" origId="BD-PB-OVERFRD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M0_3_2" desc="If a function returns error information, then that error information shall be tested" id="AUTOSAR-M0_3_2-a" origId="MISRA2004-16_10" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-M0_4_2" desc="Use of floating-point arithmetic shall be documented" id="AUTOSAR-M0_4_2-a" origId="COMMENT-10" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_1_1" desc="Classes should not be derived from virtual bases" id="AUTOSAR-M10_1_1-a" origId="OOP-47" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_1_2" desc="A base class shall only be declared virtual if it is used in a diamond hierarchy" id="AUTOSAR-M10_1_2-a" origId="GLOBAL-VIRTBASECLASS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_1_3" desc="A base class shall not be both virtual and non-virtual in the same hierarchy" id="AUTOSAR-M10_1_3-a" origId="OOP-41" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_2_1" desc="All accessible entity names within a multiple inheritance hierarchy should be unique" id="AUTOSAR-M10_2_1-a" origId="CODSTA-CPP-92" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_3_3" desc="A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" id="AUTOSAR-M10_3_3-a" origId="OOP-43" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M11_0_1" desc="Member data in non-POD types shall be private" id="AUTOSAR-M11_0_1-a" origId="OOP-48" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M12_1_1" desc="Do not use dynamic type of an object under construction" id="AUTOSAR-M12_1_1-a" origId="BD-PB-VCTOR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M14_5_3" desc="A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" id="AUTOSAR-M14_5_3-a" origId="TEMPL-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M14_6_1" desc="In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" id="AUTOSAR-M14_6_1-a" origId="TEMPL-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_0_3" desc="Control shall not be transferred into a try or catch block using a goto or a switch statement" id="AUTOSAR-M15_0_3-a" origId="EXCEPT-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_1_1" desc="The assignment-expression of a throw statement shall not itself cause an exception to be thrown" id="AUTOSAR-M15_1_1-a" origId="EXCEPT-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_1_2" desc="NULL shall not be thrown explicitly" id="AUTOSAR-M15_1_2-a" origId="EXCEPT-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_1_3" desc="An empty throw shall only be used in the compound-statement of a catch handler" id="AUTOSAR-M15_1_3-a" origId="EXCEPT-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M15_3_1" desc="Exceptions shall be raised only after start-up and before termination of the program" id="AUTOSAR-M15_3_1-a" origId="EXCEPT-08" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_3" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="AUTOSAR-M15_3_3-a" origId="EXCEPT-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_4" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="AUTOSAR-M15_3_4-a" origId="EXCEPT-18" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_4" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-M15_3_4-b" origId="EXCEPT-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_6" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="AUTOSAR-M15_3_6-a" origId="EXCEPT-17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_7" desc="Where multiple handlers are provided in a single 'try-catch' statement or 'function-try-block', any ellipsis (catch-all) handler shall occur last" id="AUTOSAR-M15_3_7-a" origId="EXCEPT-24" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_1" desc="#include statements in a file should only be preceded by other preprocessor directives or comments" id="AUTOSAR-M16_0_1-a" origId="MISRA2004-19_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_2" desc="Macros shall not be #define'd or #undef'd within a block" id="AUTOSAR-M16_0_2-a" origId="MISRA2004-19_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_5" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="AUTOSAR-M16_0_5-a" origId="MISRA2004-19_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="AUTOSAR-M16_0_6" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="AUTOSAR-M16_0_6-a" origId="MISRA2004-19_10" sev="2" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_7" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="AUTOSAR-M16_0_7-a" origId="MISRA2004-19_11_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_8" desc="Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" id="AUTOSAR-M16_0_8-a" origId="MISRA2004-19_16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_1_1" desc="The defined preprocessor operator shall only be used in one of the two standard forms" id="AUTOSAR-M16_1_1-a" origId="MISRA2004-19_14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_1_2" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="AUTOSAR-M16_1_2-a" origId="MISRA2004-19_17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_2_3" desc="Use multiple include guards" id="AUTOSAR-M16_2_3-a" origId="PFO-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_3_1" desc="There shall be at most one occurrence of the # or ## preprocessor operators in a single macro definition" id="AUTOSAR-M16_3_1-a" origId="MISRA2004-19_12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_3_2" desc="The # and ## preprocessor operators should not be used" id="AUTOSAR-M16_3_2-a" origId="MISRA2004-19_13" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M17_0_2" desc="The names of standard library macros and objects shall not be reused" id="AUTOSAR-M17_0_2-a" origId="CODSTA-92" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M17_0_3" desc="The names of standard library functions shall not be overridden" id="AUTOSAR-M17_0_3-a" origId="CODSTA-93" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M17_0_5" desc="The facilities provided by &lt;setjmp.h> should not be used" id="AUTOSAR-M17_0_5-a" origId="MISRA2004-20_7" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-M18_0_3-a" origId="PB-75" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-M18_0_3-b" origId="PB-75_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used" id="AUTOSAR-M18_0_3-c" origId="SECURITY-48_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-M18_0_3-d" origId="SECURITY-52" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_4" desc="The standard header files &lt;time.h> or &lt;ctime> shall not be used" id="AUTOSAR-M18_0_4-a" origId="MISRA2004-20_12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_5" desc="The unbounded functions of library &lt;cstring> shall not be used" id="AUTOSAR-M18_0_5-a" origId="PB-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_2_1" desc="The macro offsetof, in library stddef.h, shall not be used" id="AUTOSAR-M18_2_1-a" origId="MISRA2004-20_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_7_1" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="AUTOSAR-M18_7_1-a" origId="MISRA2004-20_8_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_7_1" desc="The standard header files &lt;signal.h> or &lt;csignal> shall not be used" id="AUTOSAR-M18_7_1-b" origId="MISRA2004-20_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M19_3_1" desc="The error indicator 'errno' shall not be used" id="AUTOSAR-M19_3_1-a" origId="MISRA2004-20_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M27_0_1" desc="The input/output library stdio.h shall not be used" id="AUTOSAR-M27_0_1-a" origId="MISRA2004-20_9" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="0;" cat="AUTOSAR-M2_10_1" desc="Different identifiers shall be typographically unambiguous" id="AUTOSAR-M2_10_1-a" origId="NAMING-47" sev="2" total="13"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_13_2" desc="Octal constants (other than zero) shall not be used" id="AUTOSAR-M2_13_2-a" origId="MISRA2004-7_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_13_2" desc="Octal escape sequences shall not be used" id="AUTOSAR-M2_13_2-b" origId="MISRA2004-7_1_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-M2_13_3" desc="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" id="AUTOSAR-M2_13_3-a" origId="CODSTA-68" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_13_4" desc="Literal suffixes shall use uppercase rather than lowercase letters" id="AUTOSAR-M2_13_4-a" origId="CODSTA-51" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_7_1" desc="The character sequence /* shall not be used within a C-style comment" id="AUTOSAR-M2_7_1-a" origId="MISRA2004-2_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_1_2" desc="Always declare functions at file scope" id="AUTOSAR-M3_1_2-a" origId="MISRA2004-8_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_1" desc="All declarations of an object or function shall have compatible types" id="AUTOSAR-M3_2_1-a" origId="GLOBAL-COMPATDECLS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_2" desc="The One Definition Rule shall not be violated" id="AUTOSAR-M3_2_2-a" origId="GLOBAL-ONEDEFRULE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_3" desc="A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="AUTOSAR-M3_2_3-a" origId="GLOBAL-ONEFILEDECL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_4" desc="An identifier with external linkage shall have no more then one external definition" id="AUTOSAR-M3_2_4-a" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_3_2" desc="If a function has internal linkage then all re-declarations shall include the 'static' storage class specifier" id="AUTOSAR-M3_3_2-a" origId="CODSTA-81" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_4_1" desc="Declare variables as locally as possible" id="AUTOSAR-M3_4_1-a" origId="OPT-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_4_1" desc="Non-const objects with internal linkage should be defined at function scope if they are only accessed from within a single function" id="AUTOSAR-M3_4_1-b" origId="OPT-45" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_9_1" desc="The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" id="AUTOSAR-M3_9_1-a" origId="CODSTA-67" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_9_3" desc="The underlying bit representations of floating-point values shall not be used" id="AUTOSAR-M3_9_3-a" origId="MISRA2004-12_12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M4_10_1" desc="The 'NULL' identifier should not be used as an integer value" id="AUTOSAR-M4_10_1-a" origId="CODSTA-CPP-62" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M4_10_2" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="AUTOSAR-M4_10_2-a" origId="CODSTA-CPP-63" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M4_5_1" desc="Expressions that are effectively Boolean should not be used as operands to operators other than (&amp;&amp;, ||, !, =, ==, !=, ?:)" id="AUTOSAR-M4_5_1-a" origId="MISRA2004-12_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M4_5_3" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary &amp; operator" id="AUTOSAR-M4_5_3-a" origId="CODSTA-69" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_10" desc="If the bitwise operators ~ and &lt;&lt; are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" id="AUTOSAR-M5_0_10-a" origId="MISRA2004-10_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_11" desc="The plain char type shall be used only for the storage and use of character values" id="AUTOSAR-M5_0_11-a" origId="MISRA2004-6_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_12" desc="signed and unsigned char type shall be used only for the storage and use of numeric values" id="AUTOSAR-M5_0_12-a" origId="MISRA2004-6_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_14" desc="The first operand of a conditional-operator shall have type bool" id="AUTOSAR-M5_0_14-a" origId="CODSTA-CPP-65" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M5_0_15" desc="Array indexing shall be the only allowed form of pointer arithmetic" id="AUTOSAR-M5_0_15-a" origId="MISRA2004-17_4" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_16" desc="Avoid accessing arrays out of bounds" id="AUTOSAR-M5_0_16-a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_16" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="AUTOSAR-M5_0_16-b" origId="BD-PB-PTRARR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_17" desc="Do not subtract two pointers that do not address elements of the same array" id="AUTOSAR-M5_0_17-a" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_18" desc="Do not compare two unrelated pointers" id="AUTOSAR-M5_0_18-a" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Use parenthesis for the right-hand operand of an assignment operator when it contains an assignment expression" id="AUTOSAR-M5_0_2-a" origId="MISRA2004-12_1_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="AUTOSAR-M5_0_2-b" origId="MISRA2004-12_1_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="No parentheses are required for the operand of a unary operator" id="AUTOSAR-M5_0_2-c" origId="MISRA2004-12_1_c" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="AUTOSAR-M5_0_2-d" origId="MISRA2004-12_1_d" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Use parentheses unless all operators in the expression are the same" id="AUTOSAR-M5_0_2-e" origId="MISRA2004-12_1_e" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="AUTOSAR-M5_0_2-f" origId="MISRA2004-12_1_f" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_20" desc="Non-constant operands to a binary bitwise operator shall have the same underlying type" id="AUTOSAR-M5_0_20-a" origId="CODSTA-66" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_21" desc="Bitwise operators shall only be applied to operands of unsigned underlying type (with exceptions)" id="AUTOSAR-M5_0_21-a" origId="CODSTA-63" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_3" desc="Avoid implicit conversions of complex expressions" id="AUTOSAR-M5_0_3-a" origId="MISRA2004-10_1_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_3" desc="Avoid implicit conversions of complex expressions" id="AUTOSAR-M5_0_3-b" origId="MISRA2004-10_1_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_3" desc="Avoid implicit conversions of complex expressions" id="AUTOSAR-M5_0_3-c" origId="MISRA2004-10_1_i" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="20;" authUrg="0;" cat="AUTOSAR-M5_0_4" desc="Avoid implicit conversions between signed and unsigned integer types" id="AUTOSAR-M5_0_4-a" origId="MISRA2004-10_1_a" sev="2" total="20"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-M5_0_5" desc="There shall be no implicit conversions from integral to floating type" id="AUTOSAR-M5_0_5-a" origId="MISRA2004-10_1_b" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_5" desc="Avoid implicit conversions from floating to integral type" id="AUTOSAR-M5_0_5-b" origId="MISRA2004-10_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_6" desc="Avoid implicit integral conversions from a wider to a narrower type" id="AUTOSAR-M5_0_6-a" origId="CODSTA-222" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_6" desc="Avoid implicit conversions from wider to narrower floating type" id="AUTOSAR-M5_0_6-b" origId="MISRA2004-10_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_6" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="AUTOSAR-M5_0_6-c" origId="MISRA2004-10_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_7" desc="The value of a complex expression of floating type should not be cast to an integer type" id="AUTOSAR-M5_0_7-a" origId="CODSTA-198_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_7" desc="The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" id="AUTOSAR-M5_0_7-b" origId="MISRA2004-10_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_8" desc="The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" id="AUTOSAR-M5_0_8-a" origId="MISRA2004-10_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_8" desc="The value of a complex expression of floating type should not be cast to a wider floating type" id="AUTOSAR-M5_0_8-b" origId="CODSTA-198" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_9" desc="The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" id="AUTOSAR-M5_0_9-a" origId="MISRA2004-10_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_14_1" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="AUTOSAR-M5_14_1-a" origId="MISRA2004-12_4_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_17_1" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="AUTOSAR-M5_17_1-a" origId="CODSTA-CPP-91" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_18_1" desc="The comma operator shall not be used" id="AUTOSAR-M5_18_1-a" origId="MISRA2004-12_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_19_1" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="AUTOSAR-M5_19_1-a" origId="PB-66_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_19_1" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="AUTOSAR-M5_19_1-b" origId="PB-66_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_10" desc="The increment (++) and decrement (--) operators should not be mixed with arithmetic operators in an expression" id="AUTOSAR-M5_2_10-a" origId="CODSTA-232" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_11" desc="Avoid overloading comma operator &quot;,&quot;" id="AUTOSAR-M5_2_11-a" origId="CODSTA-CPP-80" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_11" desc="Avoid overloading logical operators AND, OR (&amp;&amp;, ||)" id="AUTOSAR-M5_2_11-b" origId="CODSTA-CPP-08" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_12" desc="An object of array type with a specified size should not decay to a pointer when it is passed as a function argument" id="AUTOSAR-M5_2_12-a" origId="PB-41" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_2" desc="A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" id="AUTOSAR-M5_2_2-a" origId="OOP-50" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_3" desc="Casts from a base class to a derived class should not be performed on polymorphic types" id="AUTOSAR-M5_2_3-a" origId="OOP-49" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_6" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="AUTOSAR-M5_2_6-a" origId="CODSTA-62" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_8" desc="An object with integer type or pointer to void type shall not be converted to an object with pointer type" id="AUTOSAR-M5_2_8-a" origId="CODSTA-65" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_9" desc="A cast should not convert a pointer type to an integral type" id="AUTOSAR-M5_2_9-a" origId="MISRA2004-11_3_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-M5_3_1" desc="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" id="AUTOSAR-M5_3_1-a" origId="CODSTA-CPP-67" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_2" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="AUTOSAR-M5_3_2-a" origId="MISRA2004-12_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_3" desc="The unary &amp; operator shall not be overloaded" id="AUTOSAR-M5_3_3-a" origId="CODSTA-CPP-68" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_4" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="AUTOSAR-M5_3_4-a" origId="MISRA2004-12_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_4" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="AUTOSAR-M5_3_4-b" origId="MISRA2004-12_3_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_4" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="AUTOSAR-M5_3_4-c" origId="MISRA2004-12_3_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_8_1" desc="Avoid incorrect shift operations" id="AUTOSAR-M5_8_1-a" origId="BD-PB-BADSHIFT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_2_1" desc="Assignment operators shall not be used in expressions that yield a Boolean value" id="AUTOSAR-M6_2_1-a" origId="MISRA2004-13_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_2_2" desc="Floating-point expressions shall not be tested for equality or inequality" id="AUTOSAR-M6_2_2-a" origId="MISRA2004-13_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_2_3" desc="A null statement shall occur on a line by itself or be followed by a comment" id="AUTOSAR-M6_2_3-a" origId="MISRA2004-14_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_3_1" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="AUTOSAR-M6_3_1-a" origId="MISRA2004-14_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_1" desc="'if' and 'else' should be followed by a compound statement" id="AUTOSAR-M6_4_1-a" origId="MISRA2004-14_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_2" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="AUTOSAR-M6_4_2-a" origId="MISRA2004-14_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="AUTOSAR-M6_4_3-a" origId="CODSTA-64" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="The final clause of a switch statement shall be the default-clause unless all enumeration values are tested" id="AUTOSAR-M6_4_3-b" origId="CODSTA-61" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="AUTOSAR-M6_4_3-c" origId="MISRA2004-15_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="Every switch statement shall have at least one case clause" id="AUTOSAR-M6_4_3-d" origId="MISRA2004-15_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="A switch expression shall not represent a value that is effectively Boolean" id="AUTOSAR-M6_4_3-e" origId="MISRA2004-15_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_4" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="AUTOSAR-M6_4_4-a" origId="MISRA2004-15_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_5" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="AUTOSAR-M6_4_5-a" origId="CODSTA-64" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_6" desc="The final clause of a switch statement shall be the default-clause unless all enumeration values are tested" id="AUTOSAR-M6_4_6-a" origId="CODSTA-61" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_7" desc="A switch expression shall not represent a value that is effectively Boolean" id="AUTOSAR-M6_4_7-a" origId="MISRA2004-15_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_2" desc="If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" id="AUTOSAR-M6_5_2-a" origId="CODSTA-CPP-70" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_3" desc="Do not modify for loop counter within a body of the loop" id="AUTOSAR-M6_5_3-a" origId="MISRA2004-13_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_4" desc="The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop" id="AUTOSAR-M6_5_4-a" origId="CODSTA-CPP-71" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_5" desc="A loop-control-variable other than the loop-counter shall not be modified within condition or expression" id="AUTOSAR-M6_5_5-a" origId="CODSTA-CPP-72" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_6" desc="A loop-control-variable other than the loop-counter which is modified in statement shall have type bool" id="AUTOSAR-M6_5_6-a" origId="CODSTA-CPP-73" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_6_1" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="AUTOSAR-M6_6_1-a" origId="CODSTA-78" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_6_2" desc="The goto statement shall jump to a label declared later in the same function body" id="AUTOSAR-M6_6_2-a" origId="CODSTA-77" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_6_3" desc="The continue statement shall only be used within a well formed for loop" id="AUTOSAR-M6_6_3-a" origId="CODSTA-80" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_1_2" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="AUTOSAR-M7_1_2-a" origId="MISRA2004-16_7_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-M7_1_2" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="AUTOSAR-M7_1_2-b" origId="MISRA2004-16_7" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_1_2" desc="Declare reference parameters as const references whenever possible" id="AUTOSAR-M7_1_2-c" origId="CODSTA-CPP-43" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="AUTOSAR-M7_3_1" desc="The global namespace shall only contain main() and namespace declarations" id="AUTOSAR-M7_3_1-a" origId="CODSTA-CPP-36" sev="2" total="17"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_3_2" desc="The identifier main shall not be used for a function other than the global function main" id="AUTOSAR-M7_3_2-a" origId="CODSTA-76" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_3_3" desc="There shall be no unnamed namespaces in header files" id="AUTOSAR-M7_3_3-a" origId="CODSTA-CPP-74" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_3_4" desc="using-directives shall not be used" id="AUTOSAR-M7_3_4-a" origId="CODSTA-CPP-75" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_3_6" desc="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" id="AUTOSAR-M7_3_6-a" origId="CODSTA-CPP-90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_4_1" desc="All usage of assembler shall be documented" id="AUTOSAR-M7_4_1-a" origId="COMMENT-09" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_4_2" desc="Assembler instructions shall only be introduced using the asm declaration" id="AUTOSAR-M7_4_2-a" origId="CODSTA-73" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_4_3" desc="Assembly language shall be encapsulated and isolated in C/C++ functions" id="AUTOSAR-M7_4_3-a" origId="CODSTA-114" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_5_1" desc="The address of an object with automatic storage shall not be returned from a function" id="AUTOSAR-M7_5_1-a" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_5_2" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="AUTOSAR-M7_5_2-a" origId="MISRA2004-17_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="AUTOSAR-M8_0_1" desc="Each variable should be declared in a separate declaration statement" id="AUTOSAR-M8_0_1-a" origId="FORMAT-33" sev="2" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_3_1" desc="Do not redefine an inherited virtual function with a different default parameter value" id="AUTOSAR-M8_3_1-a" origId="OOP-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_4_2" desc="The identifiers used in the declaration and definition of a function shall be identical" id="AUTOSAR-M8_4_2-a" origId="MISRA2004-16_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="AUTOSAR-M8_4_4" desc="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" id="AUTOSAR-M8_4_4-a" origId="MISRA2004-16_9" sev="2" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_5_2" desc="The initializer for an aggregate or union shall be enclosed in braces" id="AUTOSAR-M8_5_2-a" origId="INIT-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_5_2" desc="Arrays shall not be partially initialized" id="AUTOSAR-M8_5_2-b" origId="MISRA2004-9_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_5_2" desc="The non-zero initialization of structures requires an explicit initializer for each element" id="AUTOSAR-M8_5_2-c" origId="MISRA2004-9_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M9_3_1" desc="Const member functions shall not return non-const pointers or references to class-data" id="AUTOSAR-M9_3_1-a" origId="CODSTA-CPP-77" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M9_3_3" desc="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="AUTOSAR-M9_3_3-a" origId="CODSTA-CPP-78" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M9_6_4" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="AUTOSAR-M9_6_4-a" origId="CODSTA-71" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not pass incorrect values to library functions" id="BD-API-BADPARAM" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not pass negative values to functions expecting non-negative arguments" id="BD-API-NEGPARAM" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not pass incorrect values to ctype.h library functions" id="BD-API-CTYPE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not check for a non-negative value after passing as a non-negative argument" id="BD-API-REVNEGPARAM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="The size_t argument passed to any function in string.h shall have an appropriate value" id="BD-API-STRSIZE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Validate values passed to library functions" id="BD-API-VALPARAM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not access iterator out of range" id="BD-CO-ITOUT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Use valid references, pointers, and iterators to reference elements of a basic_string" id="BD-CO-STRMOD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not pass empty container iterators to std algorithms as destinations" id="BD-CO-EMPCON" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not compare iterators from different containers" id="BD-CO-ITINVCOMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not modify container while iterating over it" id="BD-CO-ITMOD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-MISC" desc="Always close transactions" id="BD-MISC-TRANS" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-MISC" desc="Prevent calling unsafe functions (custom rule)" id="BD-MISC-DC" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Always catch exceptions" id="BD-PB-EXCEPT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not modify string literals" id="BD-PB-MODSTR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid use before initialization" id="BD-PB-NOTINIT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-PB" desc="Avoid null pointer dereferencing" id="BD-PB-NP" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid buffer overflow due to defining incorrect format limits" id="BD-PB-OVERFFMT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow due to reading a not zero terminated string" id="BD-PB-OVERFNZT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow when reading from a buffer" id="BD-PB-OVERFRD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow when writing to a buffer" id="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not point to a wrapped object that has been freed" id="BD-PB-WRAPESC" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-PB" desc="Avoid division by zero" id="BD-PB-ZERO" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid accessing arrays out of bounds" id="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" id="BD-PB-ARRPTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid incorrect shift operations" id="BD-PB-BADSHIFT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Use the correct byte ordering when transferring data between systems" id="BD-PB-BYTEORD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid conditions that always evaluate to the same value" id="BD-PB-CC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Consistently check the returned value of non-void functions" id="BD-PB-CHECKRET" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Always check the returned value of non-void function" id="BD-PB-CHECKRETGEN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not modify the alignment of objects by calling realloc()" id="BD-PB-DNMPTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="The macro EOF should be compared with the unmodified return value from the Standard Library function" id="BD-PB-EOFCOMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly use errno value" id="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define exit handlers" id="BD-PB-EXITHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Reset strings on fgets() or fgetws() failure" id="BD-PB-FGETS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Only use values for fsetpos() that are returned from fgetpos()" id="BD-PB-FSETPOS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid infinite recursion" id="BD-PB-INFREC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not rely on an environment pointer following an operation that may invalidate it" id="BD-PB-INVENV" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="BD-PB-INVRET" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="The Standard Library function memcmp shall not be used to compare null terminated strings" id="BD-PB-MCCSTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid calls to memory-setting functions that can be optimized out by the compiler" id="BD-PB-MEMOPT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define new handlers" id="BD-PB-NEWHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid throwing exceptions from functions that are declared not to throw" id="BD-PB-NOEXCEPT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Declare non-returning functions with the attribute that specifies that they do not return" id="BD-PB-NORETDECL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Never return from functions that should not return" id="BD-PB-NORETURN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid accessing arrays and pointers out of bounds" id="BD-PB-OVERFARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="An object shall not be assigned or copied to an overlapping object" id="BD-PB-OVERLAP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not treat arrays polymorphically" id="BD-PB-POLARR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="BD-PB-PTRARR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not compare two unrelated pointers" id="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not subtract two pointers that do not address elements of the same array" id="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not store an already-owned pointer value in an unrelated smart pointer" id="BD-PB-PTRVALUE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not call putenv() with a pointer to an automatic variable as the argument" id="BD-PB-PUTENV" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define signal handlers" id="BD-PB-SIGHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not return from a computational exception signal handler" id="BD-PB-SIGRETURN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="BD-PB-STREAMINOUT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not subsequently use the argument to std::forward" id="BD-PB-SUBSEQFRWD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not rely on the value of a moved-from object" id="BD-PB-SUBSEQMOVE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid switch with unreachable branches" id="BD-PB-SWITCH" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define terminate handlers" id="BD-PB-TERMHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define unexpected handlers" id="BD-PB-UNEXPHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not use dynamic type of an object under construction" id="BD-PB-VCTOR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not use dynamic type of an object under destruction" id="BD-PB-VDTOR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Ensure the size of the variable length array is in valid range" id="BD-PB-VLASIZE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="The same file shall not be opened for read and write access at the same time on different streams" id="BD-PB-WRRDSTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid writing to a stream which has been opened as read only" id="BD-PB-WRROS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Ensure strings are zero terminated" id="BD-PB-NZTS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Ensure the output buffer is large enough when using path manipulation functions" id="BD-PB-PATHBUF" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="2;" authUrg="0;" cat="BD-PB" desc="A parameter shall be passed by reference if it can't be NULL" id="BD-PB-REFPARAM" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Always throw the created std::exception object" id="BD-PB-STDEXC" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Suspicious setting of stream flags" id="BD-PB-STREAMFLAGS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Restore stream format" id="BD-PB-STREAMFMT" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Use macros for variable arguments correctly" id="BD-PB-VARARGS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="8;" authUrg="0;" cat="BD-PB" desc="Avoid unused values" id="BD-PB-VOVR" sev="3" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid unreachable methods" id="BD-PB-UCMETH" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Guarantee that container indices are within the valid range" id="BD-PB-VALRANGE" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not use recursion" id="BD-PB-RECFUN" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Properly deallocate dynamically allocated resources" id="BD-RES-BADDEALLOC" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Ensure deallocation functions guarantee resource freeing" id="BD-RES-BADFREEF" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not use resources that have been freed" id="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Allocate sufficient memory to hold an object of a given type" id="BD-RES-INSUFMEM" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not free resources using invalid pointers" id="BD-RES-INVFREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-RES" desc="Ensure resources are freed" id="BD-RES-LEAKS" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Avoid cyclic shared_ptr references" id="BD-RES-CSP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not create variables on the stack above the defined limits" id="BD-RES-STACKLIM" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid tainted data in array indexes" id="BD-SECURITY-ARRAY" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Prevent buffer overflows from tainted data" id="BD-SECURITY-BUFWRITE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid unsafe use of a value obtained from arithmetic operations on tainted value" id="BD-SECURITY-INTOVERF" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="BD-SECURITY-OVERFFMT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid buffer read overflow from tainted data" id="BD-SECURITY-OVERFRD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid buffer write overflow from tainted data" id="BD-SECURITY-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against command injection" id="BD-SECURITY-TDCMD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid printing tainted data on the output console" id="BD-SECURITY-TDCONSOLE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against environment injection" id="BD-SECURITY-TDENV" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against file name injection" id="BD-SECURITY-TDFNAMES" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Exclude unsanitized user input from format strings" id="BD-SECURITY-TDINPUT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-SECURITY" desc="Validate potentially tainted data before it is used in the controlling expression of a loop" id="BD-SECURITY-TDLOOP" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against SQL injection" id="BD-SECURITY-TDSQL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid passing unvalidated binary data to log methods" id="BD-SECURITY-LOG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Properly seed pseudorandom number generators" id="BD-SECURITY-RAND" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Sensitive data should be cleared before being deallocated" id="BD-SECURITY-SENSFREE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid passing sensitive data to functions that write to log files" id="BD-SECURITY-SENSLOG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-SECURITY" desc="Validate potentially tainted data before it is used to determine the size of memory allocation" id="BD-SECURITY-TDALLOC" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="BD-SECURITY-XXEXRC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid double locking" id="BD-TRS-DLOCK" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions when using fork and file descriptors" id="BD-TRS-FORKFILE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-TRS" desc="Do not abandon unreleased locks" id="BD-TRS-LOCK" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not use global variable with different locks set" id="BD-TRS-MLOCK" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not acquire locks in different order" id="BD-TRS-ORDER" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions while checking for the existence of a symbolic link" id="BD-TRS-SYMLINK" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not use blocking functions while holding a lock" id="BD-TRS-TSHL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Declare objects shared between POSIX threads with appropriate storage durations" id="BD-TRS-ARG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Make const member functions thread-safe" id="BD-TRS-CMF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="6;" authUrg="0;" cat="BD-TRS" desc="Variable should be used in context of single critical section" id="BD-TRS-DIFCS" sev="2" total="6"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions while accessing files" id="BD-TRS-FRC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not join or detach a thread that was previously joined or detached" id="BD-TRS-JOINDETACH" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Use locks to prevent race conditions when modifying bit fields" id="BD-TRS-BITLOCK" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not destroy another thread's mutex" id="BD-TRS-DSTRLOCK" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not release a lock that has not been acquired" id="BD-TRS-REVLOCK" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="2;" authUrg="2;" cat="CDD" desc="Avoid function duplication" id="CDD-DUPM" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="6;" authUrg="6;" cat="CDD" desc="Avoid code duplication" id="CDD-DUPC" sev="3" total="6"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="0;" authUrg="0;" cat="CDD" desc="Avoid duplication of #include directives" id="CDD-DUPI" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="1;" authUrg="1;" cat="CDD" desc="Avoid string literal duplication" id="CDD-DUPS" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="9;" authUrg="0;" cat="CERT_C-API00" desc="The validity of parameters must be checked inside each function" id="CERT_C-API00-a" origId="CODSTA-86" sev="3" total="9"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-API01" desc="Avoid overflow when writing to a buffer" id="CERT_C-API01-a" origId="BD-PB-OVERFWR" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-API01" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-API01-b" origId="SECURITY-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-API02" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-API02-a" origId="SECURITY-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-API02" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="CERT_C-API02-b" origId="SECURITY-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR01" desc="Do not call 'sizeof' on a pointer type" id="CERT_C-ARR01-a" origId="PB-32" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR02" desc="Explicitly specify array bounds in array declarations with initializers" id="CERT_C-ARR02-a" origId="CODSTA-200" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR30" desc="Avoid accessing arrays out of bounds" id="CERT_C-ARR30-a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR32" desc="Ensure the size of the variable length array is in valid range" id="CERT_C-ARR32-a" origId="BD-PB-VLASIZE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR36" desc="Do not subtract two pointers that do not address elements of the same array" id="CERT_C-ARR36-a" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR36" desc="Do not compare two unrelated pointers" id="CERT_C-ARR36-b" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR37" desc="Pointer arithmetic shall not be applied to pointers that address variables of non-array type" id="CERT_C-ARR37-a" origId="PB-51" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid overflow when reading from a buffer" id="CERT_C-ARR38-a" origId="BD-PB-OVERFRD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid overflow when writing to a buffer" id="CERT_C-ARR38-b" origId="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid buffer overflow due to defining incorrect format limits" id="CERT_C-ARR38-c" origId="BD-PB-OVERFFMT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_C-ARR38-d" origId="BD-PB-OVERFNZT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR39" desc="Avoid accessing arrays out of bounds" id="CERT_C-ARR39-a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR39" desc="Pointer arithmetic should not be used" id="CERT_C-ARR39-b" origId="MISRA-101" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR39" desc="Do not add or subtract a scaled integer to a pointer" id="CERT_C-ARR39-c" origId="CODSTA-189" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-CON01" desc="Do not abandon unreleased locks" id="CERT_C-CON01-a" origId="BD-TRS-LOCK" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON02" desc="Do not use the volatile keyword" id="CERT_C-CON02-a" origId="MISRA-046_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON05" desc="Do not use blocking functions while holding a lock" id="CERT_C-CON05-a" origId="BD-TRS-TSHL" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-CON30" desc="Ensure resources are freed" id="CERT_C-CON30-a" origId="BD-RES-LEAKS" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON31" desc="Do not destroy another thread's mutex" id="CERT_C-CON31-a" origId="BD-TRS-DSTRLOCK" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON31" desc="Do not use resources that have been freed" id="CERT_C-CON31-b" origId="BD-RES-FREE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON31" desc="Do not free resources using invalid pointers" id="CERT_C-CON31-c" origId="BD-RES-INVFREE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON32" desc="Use locks to prevent race conditions when modifying bit fields" id="CERT_C-CON32-a" origId="BD-TRS-BITLOCK" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON33" desc="Avoid using thread-unsafe functions" id="CERT_C-CON33-a" origId="SECURITY-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON34" desc="Declare objects shared between POSIX threads with appropriate storage durations" id="CERT_C-CON34-a" origId="BD-TRS-ARG" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON35" desc="Do not acquire locks in different order" id="CERT_C-CON35-a" origId="BD-TRS-ORDER" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON36" desc="Wrap functions that can spuriously wake up in a loop" id="CERT_C-CON36-a" origId="CODSTA-191" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON37" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-CON37-a" origId="MISRA2004-20_8_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON38" desc="Use the 'cnd_signal()' function with a unique condition variable" id="CERT_C-CON38-a" origId="SECURITY-49" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON39" desc="Do not join or detach a thread that was previously joined or detached" id="CERT_C-CON39-a" origId="BD-TRS-JOINDETACH" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON40" desc="Do not refer to an atomic variable twice in an expression" id="CERT_C-CON40-a" origId="CODSTA-195" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON41" desc="Wrap functions that can fail spuriously in a loop" id="CERT_C-CON41-a" origId="CODSTA-194" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON43" desc="Do not use global variable with different locks set" id="CERT_C-CON43-a" origId="BD-TRS-MLOCK" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-DCL00" desc="Declare local variable as const whenever possible" id="CERT_C-DCL00-a" origId="CODSTA-CPP-53" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL01" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="CERT_C-DCL01-a" origId="MISRA2004-5_2_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL01" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="CERT_C-DCL01-b" origId="MISRA2004-5_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL02" desc="Use visually distinct identifiers" id="CERT_C-DCL02-a" origId="NAMING-54" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="CERT_C-DCL04" desc="Each variable should be declared in a separate declaration statement" id="CERT_C-DCL04-a" origId="FORMAT-33" sev="3" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL05" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="CERT_C-DCL05-a" origId="MISRA2004-16_7_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL06" desc="Use meaningful symbolic constants to represent literal values" id="CERT_C-DCL06-a" origId="CODSTA-29" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL10" desc="The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" id="CERT_C-DCL10-a" origId="PB-50" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function" id="CERT_C-DCL11-a" origId="PB-45" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-DCL11-b" origId="PB-46" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function" id="CERT_C-DCL11-c" origId="PB-47" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-DCL11-d" origId="PB-48" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-DCL11-e" origId="PB-49" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" id="CERT_C-DCL11-f" origId="PB-50" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL12" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="CERT_C-DCL12-a" origId="CODSTA-115" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CERT_C-DCL13" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="CERT_C-DCL13-a" origId="MISRA2004-16_7" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="CERT_C-DCL15" desc="Objects or functions with external linkage shall be declared in a header file" id="CERT_C-DCL15-a" origId="MISRA-023" sev="3" total="16"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL16" desc="The lowercase form of 'L' shall not be used as the first character in a literal suffix" id="CERT_C-DCL16-a" origId="PORT-01_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL18" desc="Octal and hexadecimal escape sequences shall be terminated" id="CERT_C-DCL18-a" origId="CODSTA-117" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL18" desc="Octal constants (other than zero) shall not be used" id="CERT_C-DCL18-b" origId="MISRA2004-7_1_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL19" desc="Declare variables as locally as possible" id="CERT_C-DCL19-a" origId="OPT-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL20" desc="The number of arguments passed to a function shall match the number of parameters" id="CERT_C-DCL20-a" origId="MISRA2004-16_6" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="8;" authUrg="0;" cat="CERT_C-DCL22" desc="Avoid unused values" id="CERT_C-DCL22-a" origId="BD-PB-VOVR" sev="3" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL30" desc="The address of an object with automatic storage shall not be returned from a function" id="CERT_C-DCL30-a" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL30" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="CERT_C-DCL30-b" origId="MISRA2004-17_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL31" desc="All functions shall be declared before use" id="CERT_C-DCL31-a" origId="MISRA-020" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL36" desc="Identifiers shall not simultaneously have both internal and external linkage in the same translation unit" id="CERT_C-DCL36-a" origId="MISRA-024" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL37" desc="Do not #define or #undef identifiers with names which start with underscore" id="CERT_C-DCL37-a" origId="MISRA2004-20_1_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL38" desc="The final member of a structure should not be an array of size '0' or '1'" id="CERT_C-DCL38-a" origId="CODSTA-192" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL39" desc="A pointer to a structure should not be passed to a function that can copy data to the user space" id="CERT_C-DCL39-a" origId="SECURITY-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="CERT_C-DCL40" desc="All declarations of an object or function shall have compatible types" id="CERT_C-DCL40-a" origId="GLOBAL-COMPATDECLS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL40" desc="If objects or functions are declared more than once their types shall be compatible" id="CERT_C-DCL40-b" origId="MISRA2004-8_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL41" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="CERT_C-DCL41-a" origId="MISRA2004-15_0_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV01" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="CERT_C-ENV01-a" origId="SECURITY-07" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV01" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-ENV01-b" origId="SECURITY-12" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ENV01" desc="Avoid overflow when writing to a buffer" id="CERT_C-ENV01-c" origId="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV02" desc="Usage of system properties (environment variables) should be restricted" id="CERT_C-ENV02-a" origId="SECURITY-03" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV30" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="CERT_C-ENV30-a" origId="CODSTA-185_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ENV31" desc="Do not rely on an environment pointer following an operation that may invalidate it" id="CERT_C-ENV31-a" origId="BD-PB-INVENV" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ENV32" desc="Properly define exit handlers" id="CERT_C-ENV32-a" origId="BD-PB-EXITHAN" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV33" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used with an argument other than '0' (null pointer)" id="CERT_C-ENV33-a" origId="SECURITY-48" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ENV34" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="CERT_C-ENV34-a" origId="BD-PB-INVRET" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR01" desc="The error indicator 'errno' shall not be used" id="CERT_C-ERR01-a" origId="MISRA2004-20_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-ERR02" desc="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" id="CERT_C-ERR02-a" origId="CODSTA-110" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR04" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR04-a" origId="PB-75" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR04" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR04-b" origId="PB-75_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR04" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR04-c" origId="PB-75_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR05" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR05-a" origId="PB-75" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR05" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR05-b" origId="PB-75_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR05" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR05-c" origId="PB-75_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR06" desc="Do not use assertions" id="CERT_C-ERR06-a" origId="CODSTA-199" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-ERR07" desc="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" id="CERT_C-ERR07-a" origId="MISRA2004-20_10" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR07" desc="The library functions 'rewind', 'setbuf' and 'ctime' should not be used" id="CERT_C-ERR07-b" origId="CODSTA-235" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ERR30" desc="Properly use errno value" id="CERT_C-ERR30-a" origId="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR30" desc="Provide error handling for file opening errors right next to the call to fopen" id="CERT_C-ERR30-b" origId="MRM-39" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ERR32" desc="Properly use errno value" id="CERT_C-ERR32-a" origId="BD-PB-ERRNO" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-ERR33" desc="The value returned by a standard library function that may return an error should be used" id="CERT_C-ERR33-a" origId="CODSTA-226_a" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-ERR33" desc="Always check the returned value of non-void function" id="CERT_C-ERR33-d" origId="BD-PB-CHECKRETGEN" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-ERR34" desc="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" id="CERT_C-ERR34-a" origId="MISRA2004-20_10" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP00" desc="Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used" id="CERT_C-EXP00-a" origId="CODSTA-97" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP02" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="CERT_C-EXP02-a" origId="MISRA2004-12_4_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP05" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="CERT_C-EXP05-a" origId="MISRA2004-11_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP08" desc="Pointer arithmetic should not be used" id="CERT_C-EXP08-a" origId="MISRA-101" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP08" desc="Avoid accessing arrays out of bounds" id="CERT_C-EXP08-b" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP10" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="CERT_C-EXP10-a" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP10" desc="Don't write code that depends on the order of evaluation of function arguments" id="CERT_C-EXP10-b" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP10" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="CERT_C-EXP10-c" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP10" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="CERT_C-EXP10-d" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-EXP12" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-EXP12-a" origId="CODSTA-122_a" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP12" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-EXP12-b" origId="CODSTA-122_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP14" desc="Avoid mixing arithmetic of different precisions in the same expression" id="CERT_C-EXP14-a" origId="MISRA-043_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP15" desc="Suspicious use of semicolon" id="CERT_C-EXP15-a" origId="CODSTA-57" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP16" desc="Function address should not be compared to zero" id="CERT_C-EXP16-a" origId="PB-63" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP19" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="CERT_C-EXP19-a" origId="MISRA2004-14_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP20" desc="Avoid comparing values with the 'TRUE' identifier using equality operators (&quot;==&quot;, &quot;!=&quot;)" id="CERT_C-EXP20-a" origId="CODSTA-60" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="CERT_C-EXP30-a" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="Don't write code that depends on the order of evaluation of function arguments" id="CERT_C-EXP30-b" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="CERT_C-EXP30-c" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="CERT_C-EXP30-d" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP32" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="CERT_C-EXP32-a" origId="MISRA2004-11_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP33" desc="Avoid use before initialization" id="CERT_C-EXP33-a" origId="BD-PB-NOTINIT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-EXP34" desc="Avoid null pointer dereferencing" id="CERT_C-EXP34-a" origId="BD-PB-NP" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP35" desc="Do not modify objects with temporary lifetime" id="CERT_C-EXP35-a" origId="CODSTA-196" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP36" desc="Do not cast pointers into more strictly aligned pointer types" id="CERT_C-EXP36-a" origId="CODSTA-230" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP37" desc="Conversions shall not be performed between non compatible pointer to a function types" id="CERT_C-EXP37-a" origId="CODSTA-124_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP37" desc="Specify the access permission bits if a file is created using the 'open' or 'openat' system call" id="CERT_C-EXP37-b" origId="SECURITY-42" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP37" desc="Functions shall always have visible prototype at the function call" id="CERT_C-EXP37-d" origId="MISRA-071_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CERT_C-EXP39" desc="There shall be no implicit conversions from integral to floating type" id="CERT_C-EXP39-a" origId="MISRA2004-10_1_b" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="A cast should not be performed between a pointer to object type and a different pointer to object type" id="CERT_C-EXP39-b" origId="MISRA2004-11_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid accessing arrays and pointers out of bounds" id="CERT_C-EXP39-c" origId="BD-PB-OVERFARRAY" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="CERT_C-EXP39-d" origId="BD-SECURITY-OVERFFMT" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid buffer read overflow from tainted data" id="CERT_C-EXP39-e" origId="BD-SECURITY-OVERFRD" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid buffer write overflow from tainted data" id="CERT_C-EXP39-f" origId="BD-SECURITY-OVERFWR" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP40" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="CERT_C-EXP40-a" origId="MISRA2004-11_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP42" desc="Don't memcpy or memcmp non-PODs" id="CERT_C-EXP42-a" origId="MRM-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP43" desc="The restrict type qualifier shall not be used" id="CERT_C-EXP43-a" origId="CODSTA-121" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP44" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="CERT_C-EXP44-a" origId="MISRA2004-12_3_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP44" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="CERT_C-EXP44-b" origId="MISRA2004-12_3_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP45" desc="Assignment operators shall not be used in conditions without brackets" id="CERT_C-EXP45-b" origId="PB-35" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP45" desc="Assignment operators shall not be used in expressions that yield a Boolean value" id="CERT_C-EXP45-d" origId="MISRA2004-13_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP46" desc="Expressions that are effectively Boolean should not be used as operands to operators other than (&amp;&amp;, ||, !, =, ==, !=, ?:)" id="CERT_C-EXP46-b" origId="MISRA2004-12_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP47" desc="Do not call va_arg with an argument of the incorrect type" id="CERT_C-EXP47-a" origId="PB-72" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO01" desc="Don't use chmod(), chown(), chgrp()" id="CERT_C-FIO01-a" origId="SECURITY-27" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO01" desc="Usage of functions prone to race is not allowed" id="CERT_C-FIO01-b" origId="SECURITY-19" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO21" desc="Usage of functions prone to race is not allowed" id="CERT_C-FIO21-a" origId="SECURITY-19" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-FIO22" desc="Ensure resources are freed" id="CERT_C-FIO22-a" origId="BD-RES-LEAKS" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO24" desc="Avoid race conditions while accessing files" id="CERT_C-FIO24-a" origId="BD-TRS-FRC" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO30" desc="Avoid calling functions printf/wprintf with only one argument other than string constant" id="CERT_C-FIO30-a" origId="SECURITY-05" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO30" desc="Avoid using functions fprintf/fwprintf with only two parameters, when second parameter is a variable" id="CERT_C-FIO30-b" origId="SECURITY-08" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO30" desc="Never use unfiltered data from an untrusted user as the format parameter" id="CERT_C-FIO30-c" origId="SECURITY-36" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO32" desc="Protect against file name injection" id="CERT_C-FIO32-a" origId="BD-SECURITY-TDFNAMES" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO34" desc="The macro EOF should be compared with the unmodified return value from the Standard Library function" id="CERT_C-FIO34-a" origId="BD-PB-EOFCOMP" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO37" desc="Avoid accessing arrays out of bounds" id="CERT_C-FIO37-a" origId="BD-PB-ARRAY" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO38" desc="A pointer to a FILE object shall not be dereferenced" id="CERT_C-FIO38-a" origId="CODSTA-166_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO39" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="CERT_C-FIO39-a" origId="BD-PB-STREAMINOUT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO40" desc="Reset strings on fgets() or fgetws() failure" id="CERT_C-FIO40-a" origId="BD-PB-FGETS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO41" desc="Do not call 'getc()', 'putc()', 'getwc()', or 'putwc()' with a stream argument containing assignments, increment or decrement operators" id="CERT_C-FIO41-a" origId="CODSTA-228_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO41" desc="Do not call 'getc()', 'putc()', 'getwc()', or 'putwc()' with a stream argument containing function calls or function-like macro calls" id="CERT_C-FIO41-b" origId="CODSTA-228_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-FIO42" desc="Ensure resources are freed" id="CERT_C-FIO42-a" origId="BD-RES-LEAKS" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO44" desc="Only use values for fsetpos() that are returned from fgetpos()" id="CERT_C-FIO44-a" origId="BD-PB-FSETPOS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO45" desc="Avoid race conditions while accessing files" id="CERT_C-FIO45-a" origId="BD-TRS-FRC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO46" desc="Do not use resources that have been freed" id="CERT_C-FIO46-a" origId="BD-RES-FREE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function" id="CERT_C-FIO47-a" origId="PB-45" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-FIO47-b" origId="PB-46" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function" id="CERT_C-FIO47-c" origId="PB-47" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-FIO47-d" origId="PB-48" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-FIO47-e" origId="PB-49" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" id="CERT_C-FIO47-f" origId="PB-50" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP00" desc="Floating-point expressions shall not be tested for equality or inequality" id="CERT_C-FLP00-a" origId="MISRA2004-13_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP02" desc="Floating-point expressions shall not be tested for equality or inequality" id="CERT_C-FLP02-a" origId="MISRA2004-13_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-FLP03" desc="Avoid division by zero" id="CERT_C-FLP03-a" origId="BD-PB-ZERO" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP03" desc="Avoid implicit conversions from wider to narrower floating type" id="CERT_C-FLP03-b" origId="MISRA2004-10_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP03" desc="Avoid implicit conversions from narrower to wider floating type" id="CERT_C-FLP03-c" origId="MISRA2004-10_2_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP03" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="CERT_C-FLP03-d" origId="MISRA2004-10_2_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP06" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="CERT_C-FLP06-a" origId="MISRA-043_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP06" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="CERT_C-FLP06-b" origId="MISRA-043_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP30" desc="Do not use floating point variables as loop counters" id="CERT_C-FLP30-a" origId="MISRA-065" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FLP32" desc="Validate values passed to library functions" id="CERT_C-FLP32-a" origId="BD-API-VALPARAM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP34" desc="Avoid implicit conversions from wider to narrower floating type" id="CERT_C-FLP34-a" origId="MISRA2004-10_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP34" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="CERT_C-FLP34-b" origId="MISRA2004-10_2_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP36" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="CERT_C-FLP36-a" origId="MISRA-043_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP36" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="CERT_C-FLP36-b" origId="MISRA-043_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP37" desc="Do not use object representations to compare floating-point values" id="CERT_C-FLP37-c" origId="CODSTA-190" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT02" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="CERT_C-INT02-a" origId="MISRA-043" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT02" desc="Avoid mixing arithmetic of different precisions in the same expression" id="CERT_C-INT02-b" origId="MISRA-043_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-INT04" desc="Avoid potential integer overflow/underflow on tainted data" id="CERT_C-INT04-a" origId="BD-SECURITY-TDINTOVERF" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT04" desc="Avoid buffer read overflow from tainted data" id="CERT_C-INT04-b" origId="BD-SECURITY-OVERFRD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT04" desc="Avoid buffer write overflow from tainted data" id="CERT_C-INT04-c" origId="BD-SECURITY-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-INT05" desc="Avoid using unsafe string functions that do not check bounds" id="CERT_C-INT05-a" origId="SECURITY-13" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT07" desc="The plain char type shall be used only for the storage and use of character values" id="CERT_C-INT07-a" origId="MISRA2004-6_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT07" desc="signed and unsigned char type shall be used only for the storage and use of numeric values" id="CERT_C-INT07-b" origId="MISRA2004-6_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT08" desc="Avoid data loss when converting between integer types" id="CERT_C-INT08-a" origId="BD-PB-INTDL" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT09" desc="In an enumerator list, the &quot;=&quot; construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised" id="CERT_C-INT09-a" origId="MISRA2004-9_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT10" desc="The operands of the remainder operator '%' should be of unsigned integer types" id="CERT_C-INT10-a" origId="CODSTA-229" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT12" desc="Bit fields shall only be defined to be of type unsigned int or signed int" id="CERT_C-INT12-a" origId="MISRA2004-6_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT13" desc="Operands of bitwise and complement operators shall have an unsigned type" id="CERT_C-INT13-a" origId="CODSTA-307" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT15" desc="Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types" id="CERT_C-INT15-a" origId="PB-78" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT16" desc="Bitwise operators shall only be applied to operands of unsigned underlying type (with exceptions)" id="CERT_C-INT16-a" origId="CODSTA-63" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT18" desc="Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" id="CERT_C-INT18-a" origId="PB-65" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT18" desc="Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type" id="CERT_C-INT18-b" origId="PB-65_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT18" desc="Avoid possible integer overflow in expressions in which the result is cast to a wider integer type" id="CERT_C-INT18-c" origId="MISRA-048_a" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT30" desc="Avoid wraparounds when performing arithmetic integer operations" id="CERT_C-INT30-a" origId="BD-PB-INTWRAP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT30" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="CERT_C-INT30-b" origId="PB-66_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT30" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="CERT_C-INT30-c" origId="PB-66_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="CERT_C-INT31-a" origId="CODSTA-161_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="CERT_C-INT31-b" origId="CODSTA-161_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="CERT_C-INT31-c" origId="CODSTA-161_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="CERT_C-INT31-d" origId="CODSTA-161_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="CERT_C-INT31-e" origId="CODSTA-161_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" id="CERT_C-INT31-f" origId="CODSTA-161_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="CERT_C-INT31-g" origId="CODSTA-161_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="CERT_C-INT31-h" origId="CODSTA-163_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="CERT_C-INT31-i" origId="CODSTA-163_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="CERT_C-INT31-j" origId="CODSTA-164_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="The second and third operands of the ternary operator shall have the same essential type category" id="CERT_C-INT31-k" origId="CODSTA-164_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="CERT_C-INT31-l" origId="CODSTA-157" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="CERT_C-INT31-m" origId="CODSTA-156_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="CERT_C-INT31-n" origId="CODSTA-156_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="Avoid data loss when converting between integer types" id="CERT_C-INT31-o" origId="BD-PB-INTDL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT32" desc="Avoid signed integer overflows" id="CERT_C-INT32-a" origId="BD-PB-INTUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT32" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="CERT_C-INT32-b" origId="PB-66_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT32" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="CERT_C-INT32-c" origId="PB-66_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-INT33" desc="Avoid division by zero" id="CERT_C-INT33-a" origId="BD-PB-ZERO" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT34" desc="Avoid incorrect shift operations" id="CERT_C-INT34-a" origId="BD-PB-BADSHIFT" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT35" desc="Use correct integer precisions when checking the right hand operand of the shift operator" id="CERT_C-INT35-a" origId="SECURITY-47" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT36" desc="A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t'" id="CERT_C-INT36-b" origId="CODSTA-127_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-MEM00" desc="Do not allocate memory and expect that someone else will deallocate it later" id="CERT_C-MEM00-a" origId="MRM-18" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM00" desc="Do not allocate memory and expect that someone else will deallocate it later" id="CERT_C-MEM00-b" origId="MRM-19" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM00" desc="Do not allocate memory and expect that someone else will deallocate it later" id="CERT_C-MEM00-c" origId="MRM-20" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM00" desc="Do not use resources that have been freed" id="CERT_C-MEM00-d" origId="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-MEM00" desc="Ensure resources are freed" id="CERT_C-MEM00-e" origId="BD-RES-LEAKS" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM01" desc="Do not use resources that have been freed" id="CERT_C-MEM01-a" origId="BD-RES-FREE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM01" desc="Always assign a new value to an expression that points to deallocated memory" id="CERT_C-MEM01-b" origId="MRM-09" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM01" desc="Always assign a new value to global or member variable that points to deallocated memory" id="CERT_C-MEM01-c" origId="MRM-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM01" desc="Always assign a new value to parameter or local variable that points to deallocated memory" id="CERT_C-MEM01-d" origId="MRM-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM02" desc="The result of the memory allocation function should be cast immediately" id="CERT_C-MEM02-a" origId="MRM-58_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM02" desc="The result of the memory allocation function should be cast immediately into a pointer to the allocated type" id="CERT_C-MEM02-b" origId="MRM-58_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM03" desc="Sensitive data should be cleared before being deallocated" id="CERT_C-MEM03-a" origId="BD-SECURITY-SENSFREE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM04" desc="The validity of values passed to library functions shall be checked" id="CERT_C-MEM04-a" origId="MISRA2004-20_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM05" desc="Do not use recursion" id="CERT_C-MEM05-a" origId="BD-PB-RECFUN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM05" desc="Ensure the size of the variable length array is in valid range" id="CERT_C-MEM05-b" origId="BD-PB-VLASIZE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM07" desc="The validity of values passed to library functions shall be checked" id="CERT_C-MEM07-a" origId="MISRA2004-20_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-MEM12" desc="Ensure resources are freed" id="CERT_C-MEM12-a" origId="BD-RES-LEAKS" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM30" desc="Do not use resources that have been freed" id="CERT_C-MEM30-a" origId="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-MEM31" desc="Ensure resources are freed" id="CERT_C-MEM31-a" origId="BD-RES-LEAKS" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM33" desc="Allocate structures containing a flexible array member dynamically" id="CERT_C-MEM33-a" origId="CODSTA-193" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM33" desc="Do not copy instances of structures containing a flexible array member" id="CERT_C-MEM33-b" origId="PB-71" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM34" desc="Do not free resources using invalid pointers" id="CERT_C-MEM34-a" origId="BD-RES-INVFREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM35" desc="Do not use sizeof operator on pointer type to specify the size of the memory to be allocated via 'malloc', 'calloc' or 'realloc' function" id="CERT_C-MEM35-a" origId="MRM-45" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM36" desc="Do not modify the alignment of objects by calling realloc()" id="CERT_C-MEM36-a" origId="BD-PB-DNMPTR" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC01" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="CERT_C-MSC01-a" origId="MISRA2004-14_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC01" desc="The final clause of a switch statement shall be the default clause" id="CERT_C-MSC01-b" origId="MISRA2004-15_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC04" desc="The character sequence /* shall not be used within a C-style comment" id="CERT_C-MSC04-a" origId="MISRA2004-2_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC04" desc="The character sequence // shall not be used within a C-style comment" id="CERT_C-MSC04-b" origId="COMMENT-11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC04" desc="The character sequence /* shall not be used within a C++-style comment" id="CERT_C-MSC04-c" origId="COMMENT-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC04" desc="Line-splicing shall not be used in // comments" id="CERT_C-MSC04-d" origId="COMMENT-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code in &quot;else&quot; block" id="CERT_C-MSC07-a" origId="MISRA2004-14_1_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute" id="CERT_C-MSC07-b" origId="MISRA2004-14_1_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="CERT_C-MSC07-c" origId="MISRA2004-14_1_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code in switch statement" id="CERT_C-MSC07-d" origId="MISRA2004-14_1_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code in 'for' loop" id="CERT_C-MSC07-e" origId="MISRA2004-14_1_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="CERT_C-MSC07-f" origId="MISRA2004-14_1_f" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="CERT_C-MSC07-g" origId="MISRA2004-14_1_g" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="Avoid switch with unreachable branches" id="CERT_C-MSC07-h" origId="BD-PB-SWITCH" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC09" desc="Only use characters defined in the ISO C standard" id="CERT_C-MSC09-a" origId="MISRA-005" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC11" desc="Assert liberally to document internal assumptions and invariants" id="CERT_C-MSC11-a" origId="CODSTA-11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code in &quot;else&quot; block" id="CERT_C-MSC12-a" origId="MISRA2004-14_1_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute" id="CERT_C-MSC12-b" origId="MISRA2004-14_1_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="CERT_C-MSC12-c" origId="MISRA2004-14_1_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code in switch statement" id="CERT_C-MSC12-d" origId="MISRA2004-14_1_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code in 'for' loop" id="CERT_C-MSC12-e" origId="MISRA2004-14_1_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="CERT_C-MSC12-f" origId="MISRA2004-14_1_f" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="CERT_C-MSC12-g" origId="MISRA2004-14_1_g" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="Avoid switch with unreachable branches" id="CERT_C-MSC12-h" origId="BD-PB-SWITCH" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CERT_C-MSC13" desc="Avoid unnecessary local variables" id="CERT_C-MSC13-a" origId="OPT-06" sev="3" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC14" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="CERT_C-MSC14-a" origId="PB-73" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC15" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="CERT_C-MSC15-a" origId="PB-73" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC17" desc="Missing break statement between cases in a switch statement" id="CERT_C-MSC17-a" origId="CODSTA-149" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC19" desc="Avoid accessing arrays out of bounds" id="CERT_C-MSC19-a" origId="BD-PB-ARRAY" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-MSC19" desc="Avoid null pointer dereferencing" id="CERT_C-MSC19-b" origId="BD-PB-NP" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC22" desc="The facilities provided by &lt;setjmp.h> should not be used" id="CERT_C-MSC22-a" origId="MISRA2004-20_7" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-MSC24" desc="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" id="CERT_C-MSC24-a" origId="MISRA2004-20_10" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC24" desc="The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-MSC24-b" origId="SECURITY-52" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC24" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-MSC24-c" origId="SECURITY-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC24" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="CERT_C-MSC24-d" origId="SECURITY-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC30" desc="Do not use the rand() function for generating pseudorandom numbers" id="CERT_C-MSC30-a" origId="SECURITY-02_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC32" desc="Properly seed pseudorandom number generators" id="CERT_C-MSC32-d" origId="BD-SECURITY-RAND" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC33" desc="The 'asctime()' and 'asctime_r()' functions should not be used" id="CERT_C-MSC33-a" origId="SECURITY-01" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC37" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="CERT_C-MSC37-a" origId="MISRA2004-16_8_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC38" desc="A function-like macro shall not be invoked without all of its arguments" id="CERT_C-MSC38-a" origId="MISRA2004-19_8" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC39" desc="Use macros for variable arguments correctly" id="CERT_C-MSC39-a" origId="BD-PB-VARARGS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC40" desc="An inline definition of a function with external linkage shall not contain definitions and uses of static objects" id="CERT_C-MSC40-a" origId="CODSTA-202" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CERT_C-MSC41" desc="Do not hard code string literals" id="CERT_C-MSC41-a" origId="CODSTA-203" sev="1" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS30" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_C-POS30-a" origId="BD-PB-OVERFNZT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS30" desc="The values returned by functions 'read' and 'readlink' shall be used" id="CERT_C-POS30-b" origId="CODSTA-144" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS30" desc="Use of possibly not null-terminated string with functions expecting null-terminated string" id="CERT_C-POS30-c" origId="CODSTA-145" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS33" desc="Avoid using the 'vfork()' function" id="CERT_C-POS33-a" origId="SECURITY-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS34" desc="Usage of system properties (environment variables) should be restricted" id="CERT_C-POS34-a" origId="SECURITY-03" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS34" desc="Do not call putenv() with a pointer to an automatic variable as the argument" id="CERT_C-POS34-b" origId="BD-PB-PUTENV" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS35" desc="Avoid race conditions while checking for the existence of a symbolic link" id="CERT_C-POS35-b" origId="BD-TRS-SYMLINK" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS36" desc="Observe correct revocation order while relinquishing privileges" id="CERT_C-POS36-a" origId="SECURITY-44" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS37" desc="Ensure that privilege relinquishment is successful" id="CERT_C-POS37-a" origId="SECURITY-45" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS38" desc="Avoid race conditions when using fork and file descriptors" id="CERT_C-POS38-a" origId="BD-TRS-FORKFILE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS39" desc="Use the correct byte ordering when transferring data between systems" id="CERT_C-POS39-a" origId="BD-PB-BYTEORD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS44" desc="The 'pthread_kill', 'pthread_sigqueue' and 'tgkill' functions should not be used to send signals to threads" id="CERT_C-POS44-a" origId="SECURITY-53" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS47" desc="The function 'pthread_setcanceltype()' should not be called with 'PTHREAD_CANCEL_ASYNCHRONOUS' argument" id="CERT_C-POS47-a" origId="SECURITY-43" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS48" desc="Do not destroy another thread's mutex" id="CERT_C-POS48-a" origId="BD-TRS-DSTRLOCK" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS48" desc="Do not release a lock that has not been acquired" id="CERT_C-POS48-b" origId="BD-TRS-REVLOCK" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS49" desc="Use locks to prevent race conditions when modifying bit fields" id="CERT_C-POS49-a" origId="BD-TRS-BITLOCK" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS50" desc="Declare objects shared between POSIX threads with appropriate storage durations" id="CERT_C-POS50-a" origId="BD-TRS-ARG" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS51" desc="Do not acquire locks in different order" id="CERT_C-POS51-a" origId="BD-TRS-ORDER" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS52" desc="Do not use blocking functions while holding a lock" id="CERT_C-POS52-a" origId="BD-TRS-TSHL" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="CERT_C-POS53" desc="Do not use more than one mutex for concurrent waiting operations on a condition variable" id="CERT_C-POS53-a" origId="GLOBAL-CONDMUTEXVAR" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-POS54" desc="The value returned by a POSIX library function that may return an error should be used" id="CERT_C-POS54-a" origId="CODSTA-227" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CERT_C-PRE00" desc="A function should be used in preference to a function-like macro" id="CERT_C-PRE00-a" origId="MISRA2004-19_7" sev="3" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CERT_C-PRE01" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="CERT_C-PRE01-a" origId="MISRA2004-19_10" sev="1" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CERT_C-PRE02" desc="Enclose in parentheses whole definition of a function-like macro" id="CERT_C-PRE02-a" origId="MISRA-096" sev="1" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE06" desc="Use multiple include guards" id="CERT_C-PRE06-a" origId="PFO-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE07" desc="Trigraphs shall not be used" id="CERT_C-PRE07-a" origId="MISRA2004-4_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE30" desc="Avoid token concatenation that may produce universal character names" id="CERT_C-PRE30-a" origId="PREPROC-21" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE31" desc="Assertions should not contain assignments, increment, or decrement operators" id="CERT_C-PRE31-b" origId="CODSTA-150" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE31" desc="Assertions should not contain function calls nor function-like macro calls" id="CERT_C-PRE31-c" origId="CODSTA-150_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE31" desc="Avoid side effects in arguments to unsafe macros" id="CERT_C-PRE31-d" origId="CODSTA-150_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE32" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="CERT_C-PRE32-a" origId="MISRA2004-19_9" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-SIG00" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-SIG00-a" origId="MISRA2004-20_8_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-SIG01" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-SIG01-a" origId="MISRA2004-20_8_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-SIG02" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-SIG02-a" origId="MISRA2004-20_8_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG30" desc="Properly define signal handlers" id="CERT_C-SIG30-a" origId="BD-PB-SIGHAN" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG31" desc="Properly define signal handlers" id="CERT_C-SIG31-a" origId="BD-PB-SIGHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG34" desc="Properly define signal handlers" id="CERT_C-SIG34-a" origId="BD-PB-SIGHAN" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG35" desc="Do not return from a computational exception signal handler" id="CERT_C-SIG35-a" origId="BD-PB-SIGRETURN" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR00" desc="The plain char type shall be used only for the storage and use of character values" id="CERT_C-STR00-a" origId="MISRA2004-6_1" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR02" desc="Protect against command injection" id="CERT_C-STR02-a" origId="BD-SECURITY-TDCMD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR02" desc="Protect against file name injection" id="CERT_C-STR02-b" origId="BD-SECURITY-TDFNAMES" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR02" desc="Protect against SQL injection" id="CERT_C-STR02-c" origId="BD-SECURITY-TDSQL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR03" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_C-STR03-a" origId="BD-PB-OVERFNZT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR04" desc="The plain char type shall be used only for the storage and use of character values" id="CERT_C-STR04-a" origId="MISRA2004-6_1" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR05" desc="A string literal shall not be modified" id="CERT_C-STR05-a" origId="PB-27" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-STR07" desc="Avoid using unsafe string functions that do not check bounds" id="CERT_C-STR07-a" origId="SECURITY-13" sev="1" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR09" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary &amp; operator" id="CERT_C-STR09-a" origId="CODSTA-69" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR10" desc="Narrow and wide string literals shall not be concatenated" id="CERT_C-STR10-a" origId="PB-38" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR11" desc="Do not specify the bound of a character array initialized with a string literal" id="CERT_C-STR11-a" origId="CODSTA-197" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR30" desc="A string literal shall not be modified" id="CERT_C-STR30-a" origId="PB-27" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR30" desc="Do not modify string literals" id="CERT_C-STR30-b" origId="BD-PB-MODSTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Avoid accessing arrays out of bounds" id="CERT_C-STR31-a" origId="BD-PB-ARRAY" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Avoid overflow when writing to a buffer" id="CERT_C-STR31-b" origId="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Prevent buffer overflows from tainted data" id="CERT_C-STR31-c" origId="BD-SECURITY-BUFWRITE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Avoid buffer write overflow from tainted data" id="CERT_C-STR31-d" origId="BD-SECURITY-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-STR31-e" origId="SECURITY-12" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR32" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_C-STR32-a" origId="BD-PB-OVERFNZT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR34" desc="Cast characters to unsigned char before assignment to larger integer sizes" id="CERT_C-STR34-b" origId="CODSTA-187_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR34" desc="An expressions of the 'signed char' type should not be used as an array index" id="CERT_C-STR34-c" origId="CODSTA-187_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR34" desc="Cast characters to unsigned char before converting to larger integer sizes" id="CERT_C-STR34-d" origId="CODSTA-187_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR37" desc="Do not pass incorrect values to ctype.h library functions" id="CERT_C-STR37-a" origId="BD-API-CTYPE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR38" desc="Do not confuse narrow and wide character strings and functions" id="CERT_C-STR38-a" origId="CODSTA-188" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-WIN00" desc="Use care to ensure that LoadLibrary() will load the correct library" id="CERT_C-WIN00-a" origId="SECURITY-04" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-WIN30" desc="Ensure resources are freed" id="CERT_C-WIN30-a" origId="BD-RES-LEAKS" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CON50" desc="Do not destroy another thread's mutex" id="CERT_CPP-CON50-a" origId="BD-TRS-DSTRLOCK" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CON51" desc="Do not call lock() directly on a mutex" id="CERT_CPP-CON51-a" origId="CODSTA-MCPP-21" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CON52" desc="Use locks to prevent race conditions when modifying bit fields" id="CERT_CPP-CON52-a" origId="BD-TRS-BITLOCK" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CON53" desc="Do not acquire locks in different order" id="CERT_CPP-CON53-a" origId="BD-TRS-ORDER" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CON54" desc="Wrap functions that can spuriously wake up in a loop" id="CERT_CPP-CON54-a" origId="CODSTA-191" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CON55" desc="Do not use the 'notify_one()' function when multiple threads are waiting on the same condition variable" id="CERT_CPP-CON55-a" origId="SECURITY-50" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CON56" desc="Avoid double locking" id="CERT_CPP-CON56-a" origId="BD-TRS-DLOCK" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR50" desc="Guarantee that container indices are within the valid range" id="CERT_CPP-CTR50-a" origId="BD-PB-VALRANGE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR51" desc="Do not modify container while iterating over it" id="CERT_CPP-CTR51-a" origId="BD-CO-ITMOD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR52" desc="Do not pass empty container iterators to std algorithms as destinations" id="CERT_CPP-CTR52-a" origId="BD-CO-EMPCON" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR53" desc="Do not use an iterator range that isn't really a range" id="CERT_CPP-CTR53-a" origId="STL-36" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR53" desc="Do not compare iterators from different containers" id="CERT_CPP-CTR53-b" origId="BD-CO-ITINVCOMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR54" desc="Do not compare iterators from different containers" id="CERT_CPP-CTR54-a" origId="BD-CO-ITINVCOMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR54" desc="Do not compare two unrelated pointers" id="CERT_CPP-CTR54-b" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR54" desc="Do not subtract two pointers that do not address elements of the same array" id="CERT_CPP-CTR54-c" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR55" desc="Do not add or subtract a constant with a value greater than one from an iterator" id="CERT_CPP-CTR55-a" origId="PB-74" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR56" desc="Don't treat arrays polymorphically" id="CERT_CPP-CTR56-a" origId="PB-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR56" desc="A pointer to an array of derived class objects should not be converted to a base class pointer" id="CERT_CPP-CTR56-b" origId="PB-57" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR56" desc="Do not treat arrays polymorphically" id="CERT_CPP-CTR56-c" origId="BD-PB-POLARR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR57" desc="For associative containers never use comparison function returning true for equal values" id="CERT_CPP-CTR57-a" origId="STL-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR58" desc="Make predicates const pure functions" id="CERT_CPP-CTR58-a" origId="STL-29" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL50" desc="Functions shall not be defined with a variable number of arguments" id="CERT_CPP-DCL50-a" origId="MISRA2004-16_1" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="Do not #define or #undef identifiers with names which start with underscore" id="CERT_CPP-DCL51-a" origId="MISRA2004-20_1_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="Do not redefine reserved words" id="CERT_CPP-DCL51-b" origId="MISRA2004-20_1_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="Do not #define nor #undef identifier 'defined'" id="CERT_CPP-DCL51-c" origId="MISRA2004-20_1_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="The names of standard library macros, objects and functions shall not be reused" id="CERT_CPP-DCL51-d" origId="MISRA2004-20_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="The names of standard library macros, objects and functions shall not be reused (C90)" id="CERT_CPP-DCL51-e" origId="MISRA2004-20_2_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="The names of standard library macros, objects and functions shall not be reused (C99)" id="CERT_CPP-DCL51-f" origId="MISRA2004-20_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL52" desc="Never qualify a reference type with 'const' or 'volatile'" id="CERT_CPP-DCL52-a" origId="CODSTA-CPP-97" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL53" desc="Parameter names in function declarations should not be enclosed in parentheses" id="CERT_CPP-DCL53-a" origId="FORMAT-48" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL53" desc="Local variable names in variable declarations should not be enclosed in parentheses" id="CERT_CPP-DCL53-b" origId="FORMAT-49" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL53" desc="Avoid function declarations that are syntactically ambiguous" id="CERT_CPP-DCL53-c" origId="PB-79" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL54" desc="Always provide new and delete together" id="CERT_CPP-DCL54-a" origId="MRM-28" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL55" desc="A pointer to a structure should not be passed to a function that can copy data to the user space" id="CERT_CPP-DCL55-a" origId="SECURITY-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL56" desc="Avoid initialization order problems across translation units by replacing non-local static objects with local static objects" id="CERT_CPP-DCL56-a" origId="INIT-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL57" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="CERT_CPP-DCL57-a" origId="EXCEPT-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL57" desc="Always catch exceptions" id="CERT_CPP-DCL57-b" origId="BD-PB-EXCEPT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL58" desc="Do not modify the standard namespaces 'std' and 'posix'" id="CERT_CPP-DCL58-a" origId="CODSTA-CPP-95" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL59" desc="There shall be no unnamed namespaces in header files" id="CERT_CPP-DCL59-a" origId="CODSTA-CPP-74" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL60" desc="The One Definition Rule shall not be violated" id="CERT_CPP-DCL60-a" origId="GLOBAL-ONEDEFRULE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="CERT_CPP-ERR50-a" origId="PB-44" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="CERT_CPP-ERR50-b" origId="EXCEPT-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Do not throw from within destructor" id="CERT_CPP-ERR50-c" origId="EXCEPT-03" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_CPP-ERR50" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="CERT_CPP-ERR50-d" origId="EXCEPT-06" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="An empty throw shall only be used in the compound-statement of a catch handler" id="CERT_CPP-ERR50-e" origId="EXCEPT-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Exceptions shall be raised only after start-up and before termination of the program" id="CERT_CPP-ERR50-f" origId="EXCEPT-08" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="CERT_CPP-ERR50-g" origId="EXCEPT-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="CERT_CPP-ERR50-h" origId="EXCEPT-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="CERT_CPP-ERR50-i" origId="EXCEPT-18" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Always catch exceptions" id="CERT_CPP-ERR50-j" origId="BD-PB-EXCEPT" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Properly define exit handlers" id="CERT_CPP-ERR50-k" origId="BD-PB-EXITHAN" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_CPP-ERR50-l" origId="PB-75" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Avoid throwing exceptions from functions that are declared not to throw" id="CERT_CPP-ERR50-m" origId="BD-PB-NOEXCEPT" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_CPP-ERR50-n" origId="PB-75_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR51" desc="Always catch exceptions" id="CERT_CPP-ERR51-a" origId="BD-PB-EXCEPT" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR51" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="CERT_CPP-ERR51-b" origId="EXCEPT-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR52" desc="The facilities provided by &lt;setjmp.h> should not be used" id="CERT_CPP-ERR52-a" origId="MISRA2004-20_7" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR52" desc="The standard header files &lt;setjmp.h> or &lt;csetjmp> shall not be used" id="CERT_CPP-ERR52-b" origId="MISRA2004-20_7_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR53" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="CERT_CPP-ERR53-a" origId="EXCEPT-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR54" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="CERT_CPP-ERR54-a" origId="EXCEPT-17" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR55" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="CERT_CPP-ERR55-a" origId="EXCEPT-14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR56" desc="Always catch exceptions" id="CERT_CPP-ERR56-a" origId="BD-PB-EXCEPT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR56" desc="Empty 'catch' blocks should not be used" id="CERT_CPP-ERR56-b" origId="EXCEPT-25" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_CPP-ERR57" desc="Ensure resources are freed" id="CERT_CPP-ERR57-a" origId="BD-RES-LEAKS" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_CPP-ERR58" desc="Exceptions shall be raised only after start-up and before termination of the program" id="CERT_CPP-ERR58-a" origId="EXCEPT-08" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR59" desc="Do not throw an exception across execution boundaries" id="CERT_CPP-ERR59-a" origId="PORT-30" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR60" desc="Exception objects must be nothrow copy constructible" id="CERT_CPP-ERR60-a" origId="EXCEPT-19" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR60" desc="An explicitly declared copy constructor for a class that inherits from 'std::exception' should have a non-throwing exception specification" id="CERT_CPP-ERR60-b" origId="EXCEPT-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR61" desc="A class type exception shall always be caught by reference" id="CERT_CPP-ERR61-a" origId="EXCEPT-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR61" desc="Throw by value, catch by reference" id="CERT_CPP-ERR61-b" origId="EXCEPT-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_CPP-ERR62" desc="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" id="CERT_CPP-ERR62-a" origId="MISRA2004-20_10" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="CERT_CPP-EXP50-a" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Don't write code that depends on the order of evaluation of function arguments" id="CERT_CPP-EXP50-b" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="CERT_CPP-EXP50-c" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="CERT_CPP-EXP50-d" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="CERT_CPP-EXP50-e" origId="MISRA2004-12_2_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Don't write code that depends on the order of evaluation of function calls" id="CERT_CPP-EXP50-f" origId="MISRA2004-12_2_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP51" desc="Do not treat arrays polymorphically" id="CERT_CPP-EXP51-a" origId="BD-PB-POLARR" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="CERT_CPP-EXP52-a" origId="MISRA2004-12_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="CERT_CPP-EXP52-b" origId="MISRA2004-12_3_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="CERT_CPP-EXP52-c" origId="MISRA2004-12_3_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="The operand of the 'typeid' operator shall not contain any expression that has side effects" id="CERT_CPP-EXP52-d" origId="CODSTA-CPP-104" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="The operand of the 'typeid' operator shall not contain a function call that causes side effects" id="CERT_CPP-EXP52-e" origId="CODSTA-CPP-104_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP53" desc="Avoid use before initialization" id="CERT_CPP-EXP53-a" origId="BD-PB-NOTINIT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP54" desc="Do not use resources that have been freed" id="CERT_CPP-EXP54-a" origId="BD-RES-FREE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP54" desc="The address of an object with automatic storage shall not be returned from a function" id="CERT_CPP-EXP54-b" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP54" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="CERT_CPP-EXP54-c" origId="MISRA2004-17_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP55" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="CERT_CPP-EXP55-a" origId="MISRA2004-11_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="5;" cat="CERT_CPP-EXP56" desc="Do not call a function with a mismatched language linkage" id="CERT_CPP-EXP56-a" origId="CODSTA-CPP-96" sev="3" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP57" desc="Do not delete objects with incomplete class at the point of deletion" id="CERT_CPP-EXP57-a" origId="PB-55" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP57" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="CERT_CPP-EXP57-b" origId="CODSTA-125" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP58" desc="Use macros for variable arguments correctly" id="CERT_CPP-EXP58-a" origId="BD-PB-VARARGS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP59" desc="Use offsetof() on valid types and members" id="CERT_CPP-EXP59-a" origId="CODSTA-CPP-99" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP60" desc="Do not pass a nonstandard-layout type object across execution boundaries" id="CERT_CPP-EXP60-a" origId="PORT-31" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP61" desc="Never return lambdas that capture local objects by reference" id="CERT_CPP-EXP61-a" origId="CODSTA-MCPP-17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP61" desc="Never capture local objects from an outer lambda by reference" id="CERT_CPP-EXP61-b" origId="CODSTA-MCPP-17_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP61" desc="The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime" id="CERT_CPP-EXP61-c" origId="CODSTA-MCPP-17_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP62" desc="Do not compare objects of a class that may contain padding bits with C standard library functions" id="CERT_CPP-EXP62-a" origId="CODSTA-CPP-100" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP63" desc="Do not rely on the value of a moved-from object" id="CERT_CPP-EXP63-a" origId="BD-PB-SUBSEQMOVE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-FIO50" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="CERT_CPP-FIO50-a" origId="BD-PB-STREAMINOUT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_CPP-FIO51" desc="Ensure resources are freed" id="CERT_CPP-FIO51-a" origId="BD-RES-LEAKS" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-INT50" desc="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="CERT_CPP-INT50-a" origId="PB-70" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM50" desc="Do not use resources that have been freed" id="CERT_CPP-MEM50-a" origId="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM51" desc="Use the same form in corresponding calls to new/malloc and delete/free" id="CERT_CPP-MEM51-a" origId="MRM-06" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM51" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="CERT_CPP-MEM51-b" origId="MRM-36" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM51" desc="Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor" id="CERT_CPP-MEM51-c" origId="MRM-40_d" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM51" desc="Properly deallocate dynamically allocated resources" id="CERT_CPP-MEM51-d" origId="BD-RES-BADDEALLOC" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_CPP-MEM52" desc="Check the return value of new" id="CERT_CPP-MEM52-a" origId="MRM-34" sev="1" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM52" desc="Do not allocate resources in function argument list because the order of evaluation of a function's parameters is undefined" id="CERT_CPP-MEM52-b" origId="MRM-01" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM53" desc="Do not invoke malloc/realloc for objects having constructors" id="CERT_CPP-MEM53-a" origId="MRM-08" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM54" desc="Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new'" id="CERT_CPP-MEM54-a" origId="MRM-55" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM54" desc="An overhead should be used when an array of objects is passed to the placement 'new' allocation function" id="CERT_CPP-MEM54-b" origId="MRM-55_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM55" desc="The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails" id="CERT_CPP-MEM55-a" origId="MRM-53" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM56" desc="Do not store an already-owned pointer value in an unrelated smart pointer" id="CERT_CPP-MEM56-a" origId="BD-PB-PTRVALUE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM57" desc="Avoid using the default operator 'new' for over-aligned types" id="CERT_CPP-MEM57-a" origId="MRM-54" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC50" desc="Do not use the rand() function for generating pseudorandom numbers" id="CERT_CPP-MSC50-a" origId="SECURITY-02_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC51" desc="Properly seed pseudorandom number generators" id="CERT_CPP-MSC51-a" origId="BD-SECURITY-RAND" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC52" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="CERT_CPP-MSC52-a" origId="MISRA2004-16_8_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC53" desc="Never return from functions that should not return" id="CERT_CPP-MSC53-a" origId="BD-PB-NORETURN" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC54" desc="Properly define signal handlers" id="CERT_CPP-MSC54-a" origId="BD-PB-SIGHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP50" desc="Avoid calling virtual functions from constructors" id="CERT_CPP-OOP50-a" origId="OOP-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP50" desc="Avoid calling virtual functions from destructors" id="CERT_CPP-OOP50-b" origId="OOP-16_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP50" desc="Do not use dynamic type of an object under construction" id="CERT_CPP-OOP50-c" origId="BD-PB-VCTOR" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP50" desc="Do not use dynamic type of an object under destruction" id="CERT_CPP-OOP50-d" origId="BD-PB-VDTOR" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP51" desc="Do not slice derived objects" id="CERT_CPP-OOP51-a" origId="PB-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_CPP-OOP52" desc="Define a virtual destructor in classes used as base classes which have virtual functions" id="CERT_CPP-OOP52-a" origId="OOP-22" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP53" desc="List members in an initialization list in the order in which they are declared" id="CERT_CPP-OOP53-a" origId="INIT-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP54" desc="User-provided copy assignment operators shall handle self-assignment" id="CERT_CPP-OOP54-a" origId="OOP-34" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP55" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="CERT_CPP-OOP55-a" origId="CODSTA-62" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP56" desc="Properly define terminate handlers" id="CERT_CPP-OOP56-a" origId="BD-PB-TERMHAN" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP56" desc="Properly define unexpected handlers" id="CERT_CPP-OOP56-b" origId="BD-PB-UNEXPHAN" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP56" desc="Properly define new handlers" id="CERT_CPP-OOP56-c" origId="BD-PB-NEWHAN" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP57" desc="Do not initialize objects with a non-trivial class type using C standard library functions" id="CERT_CPP-OOP57-a" origId="CODSTA-CPP-93" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP57" desc="Do not compare objects of nonstandard-layout class type with C standard library functions" id="CERT_CPP-OOP57-b" origId="CODSTA-CPP-94" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP58" desc="Copy operations must not mutate the source object" id="CERT_CPP-OOP58-a" origId="CODSTA-CPP-98" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_CPP-STR50-b" origId="BD-PB-OVERFNZT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Avoid overflow when writing to a buffer" id="CERT_CPP-STR50-c" origId="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Prevent buffer overflows from tainted data" id="CERT_CPP-STR50-e" origId="BD-SECURITY-BUFWRITE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Avoid buffer write overflow from tainted data" id="CERT_CPP-STR50-f" origId="BD-SECURITY-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Do not use the 'char' buffer to store input from 'std::cin'" id="CERT_CPP-STR50-g" origId="SECURITY-51" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_CPP-STR51" desc="Avoid null pointer dereferencing" id="CERT_CPP-STR51-a" origId="BD-PB-NP" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR52" desc="Use valid references, pointers, and iterators to reference elements of a basic_string" id="CERT_CPP-STR52-a" origId="BD-CO-STRMOD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR53" desc="Guarantee that container indices are within the valid range" id="CERT_CPP-STR53-a" origId="BD-PB-VALRANGE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Local variable or parameter names and class member variable or parent class/struct member variable names shall differ by more than a single character" id="CODSTA-22" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid internal or external name conflict with a C++ reserved word" id="CODSTA-39" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Local variables should not use the same names as member variables" id="CODSTA-44" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Parameters should not use the same names as member variables" id="CODSTA-45" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use break in for loops" id="CODSTA-08" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA" desc="Global functions shall not declare parameters with array type" id="CODSTA-142" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not declare the size of an array when the array is passed into a function as a parameter" id="CODSTA-15" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not declare the size of an array when the array is initialized" id="CODSTA-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The declaration of an array parameter shall not contain the 'static' keyword between the [ ]" id="CODSTA-160" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A pointer to a FILE object shall not be dereferenced" id="CODSTA-166_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A pointer to a FILE object shall not be dereferenced by a library function" id="CODSTA-166_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The 'sizeof' operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" id="CODSTA-182" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="CODSTA-185_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not specify the bound of a character array initialized with a string literal" id="CODSTA-197" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="EOS should be used to terminate a string rather than NULL" id="CODSTA-20" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An inline definition of a function with external linkage shall not contain definitions and uses of static objects" id="CODSTA-202" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Literal suffixes shall use uppercase rather than lowercase letters" id="CODSTA-51" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Enumeration types shall be used instead of integer types (and constants) as case labels" id="CODSTA-55" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Array elements shall be accessed by the array operator [ ]" id="CODSTA-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="Do not define constants via #define" id="CODSTA-03" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Local variables shall not have static storage duration" id="CODSTA-04" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Pointers to pointers should be avoided whenever possible" id="CODSTA-05" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid using the '?:' operator" id="CODSTA-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a function has no parameters, use ( ) instead of ( void )" id="CODSTA-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not cast pointers to functions to pointers to primitive types" id="CODSTA-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Storage type modifiers shall be associated with the type, not the variable or the function" id="CODSTA-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Signed and unsigned values shall not be mixed in arithmetic operations" id="CODSTA-100" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Signed and unsigned values shall not be mixed in second and third operand of conditional operator" id="CODSTA-101" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A single operation with side-effect shall only be used in the proper context" id="CODSTA-102" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A call of function with side-effect shall only be used in the proper context" id="CODSTA-103" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators" id="CODSTA-104" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" id="CODSTA-107" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The standard header file &lt;tgmath.h> shall not be used" id="CODSTA-108" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The facilities that are specified as being provided by &lt;tgmath.h> should not be used" id="CODSTA-108_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The features provided by &lt;fenv.h> should not be used" id="CODSTA-109" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" id="CODSTA-110" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The union keyword should not be used" id="CODSTA-111" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Variable-length arrays should not be used" id="CODSTA-112" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Flexible array members shall not be declared" id="CODSTA-113" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assembly language shall be encapsulated and isolated in C/C++ functions" id="CODSTA-114" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="CODSTA-116" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Octal and hexadecimal escape sequences shall be terminated" id="CODSTA-117" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A declaration shall be visible when an object or function with external linkage is defined" id="CODSTA-118" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="CODSTA-119" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid using shift operations instead of arithmetic operations" id="CODSTA-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An inline function shall be declared with the static storage class" id="CODSTA-120" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The restrict type qualifier shall not be used" id="CODSTA-121" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA" desc="The value returned by a function having non-void return type shall be used" id="CODSTA-122_a" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value returned by a function having non-void return type shall be used" id="CODSTA-122_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Conversions shall not be performed between a pointer to a function and any other type than pointer to function" id="CODSTA-124_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Conversions shall not be performed between non compatible pointer to a function types" id="CODSTA-124_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="CODSTA-125" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A cast shall not be performed between a pointer to object type and a pointer to a different object type" id="CODSTA-126" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A cast shall not be performed between pointer to void and an arithmetic type" id="CODSTA-129_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An implicit conversion shall not be performed between pointer to void and an arithmetic type" id="CODSTA-129_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc=">, >=, &lt;, &lt;= shall not be applied to pointer types except where they point to the same array" id="CODSTA-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="CODSTA-130" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="25;" authUrg="0;" cat="CODSTA" desc="Use NULL instead of literal zero (0) as the null-pointer-constant" id="CODSTA-131" sev="3" total="25"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A macro shall not be defined with the same name as a keyword in C90" id="CODSTA-133_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A macro shall not be defined with the same name as a keyword in C99" id="CODSTA-133_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Type casting from any type to or from pointers shall not be used" id="CODSTA-135" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The identifiers va_list, va_arg, va_start, va_end, va_copy should not be used" id="CODSTA-136_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The identifiers va_list, va_arg, va_start, va_end should not be used" id="CODSTA-136_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The function call shall not be the operand of the sizeof operator" id="CODSTA-137" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The result of a built-in assignment operator should not be used" id="CODSTA-138" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Pointer subtraction shall only be applied to pointers that address elements of the same array" id="CODSTA-13_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A cast should not remove any 'const' qualification from the type of a pointer or reference" id="CODSTA-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Initializer lists shall not contain persistent side effects" id="CODSTA-141_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Functions which are called with array argument shall not be declared with pointer parameter" id="CODSTA-142_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Suspicious use of 'strcpy' without checking size of source buffer" id="CODSTA-143" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The values returned by functions 'read' and 'readlink' shall be used" id="CODSTA-144" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use of possibly not null-terminated string with functions expecting null-terminated string" id="CODSTA-145" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A value returned from a stdio character-oriented I/O function should not be implicitly converted to a type smaller than 'int'" id="CODSTA-146" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Pointer should not be compared with NULL using relational operators &lt;, >, >=, &lt;=" id="CODSTA-147" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use string literals as operands of equality or relational operators" id="CODSTA-148" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Missing break statement between cases in a switch statement" id="CODSTA-149" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assertions should not contain assignments, increment, or decrement operators" id="CODSTA-150" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid side effects in arguments to unsafe macros" id="CODSTA-150_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of a composite expression shall not be cast to a different essential type category or a wider essential type" id="CODSTA-152" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An external object or function shall not have more than one non-defining declaration in translation unit" id="CODSTA-154" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use typedefs from stdint.h instead of declaring your own in C99 code" id="CODSTA-155" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="CODSTA-156_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="CODSTA-156_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="CODSTA-157" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Function types shall have named parameters" id="CODSTA-158" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Function types shall be in prototype form" id="CODSTA-159" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="CODSTA-161_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="CODSTA-161_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="CODSTA-161_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="CODSTA-161_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="CODSTA-161_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" id="CODSTA-161_f" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="CODSTA-161_g" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" id="CODSTA-162" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="CODSTA-163_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="CODSTA-163_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="CODSTA-164_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The second and third operands of the ternary operator shall have the same essential type category" id="CODSTA-164_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not cast from or to essentially Boolean type" id="CODSTA-165_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A loop counter in a 'for' loop shall not have essentially floating type" id="CODSTA-167_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A loop counter in 'while' and 'do-while' loops shall not have essentially floating type" id="CODSTA-167_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" id="CODSTA-168" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The first clause of a 'for' loop shall be well-formed" id="CODSTA-169_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The second clause of a 'for' loop shall be well-formed" id="CODSTA-169_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The third clause of a 'for' statement shall be well-formed" id="CODSTA-169_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use NULL identifier; use 0 instead" id="CODSTA-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c90)" id="CODSTA-170_c90" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c99)" id="CODSTA-170_c99" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The name of a macro should be distinct from the names of its parameters(c90)" id="CODSTA-171_c90" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The name of a macro should be distinct from the names of its parameters(c99)" id="CODSTA-171_c99" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c90)" id="CODSTA-172_c90" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c99)" id="CODSTA-172_c99" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="CODSTA-174_a_c90" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="CODSTA-174_a_c99" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="CODSTA-174_b_c90" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="CODSTA-174_b_c99" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="External identifiers shall be distinct" id="CODSTA-178" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c90)" id="CODSTA-179_a_c90" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c99)" id="CODSTA-179_a_c99" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers declared in the same block scope and name space shall be distinct (c90)" id="CODSTA-179_b_c90" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers declared in the same block scope and name space shall be distinct (c99)" id="CODSTA-179_b_c99" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types" id="CODSTA-183" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" id="CODSTA-184" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Strings pointed by members of the structure 'lconv' should not be modified" id="CODSTA-185_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" id="CODSTA-186" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Cast characters to unsigned char before assignment to larger integer sizes" id="CODSTA-187_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An expressions of the 'signed char' type should not be used as an array index" id="CODSTA-187_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Cast characters to unsigned char before converting to larger integer sizes" id="CODSTA-187_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not confuse narrow and wide character strings and functions" id="CODSTA-188" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not add or subtract a scaled integer to a pointer" id="CODSTA-189" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use the ctype.h facilities for character test" id="CODSTA-19" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use object representations to compare floating-point values" id="CODSTA-190" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Wrap functions that can spuriously wake up in a loop" id="CODSTA-191" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The final member of a structure should not be an array of size '0' or '1'" id="CODSTA-192" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Allocate structures containing a flexible array member dynamically" id="CODSTA-193" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Wrap functions that can fail spuriously in a loop" id="CODSTA-194" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not refer to an atomic variable twice in an expression" id="CODSTA-195" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not modify objects with temporary lifetime" id="CODSTA-196" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of a complex expression of floating type should not be cast to a wider floating type" id="CODSTA-198" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of a complex expression of floating type should not be cast to an integer type" id="CODSTA-198_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use assertions" id="CODSTA-199" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Explicitly specify array bounds in array declarations with initializers" id="CODSTA-200" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not process structured text data natively" id="CODSTA-201" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Functions declared as 'noreturn' shall have the 'void' return type" id="CODSTA-204" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not cast an array to the pointer to a structure of a larger size than the size of the array" id="CODSTA-205" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Noreturn' function specifier should not be used" id="CODSTA-206" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The &lt;stdnoreturn.h> header file should not be used" id="CODSTA-207" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The &lt;stdalign.h> header file shall not be used" id="CODSTA-208" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The facilities that are specified as being provided by &lt;stdatomic.h> should not be used" id="CODSTA-209" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Thread_local' storage class specifier should not be used" id="CODSTA-210" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The facilities that are specified as being provided by &lt;threads.h> should not be used" id="CODSTA-211" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The 'rsize_t' type should not be used" id="CODSTA-212" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Alignas' alignment specifier and the '_Alignof' operator should not be used" id="CODSTA-213" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Atomic' type specifier and the '_Atomic' type qualifier should not be used" id="CODSTA-214" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0'" id="CODSTA-215" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Generic' operator should not be used" id="CODSTA-216" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The 'errno_t' type should not be used" id="CODSTA-217" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S" id="CODSTA-218" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use the functions defined in Annex K of ISO/IEC 9899:2011 standard" id="CODSTA-219" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Arguments of integer-constant macros should be decimal, octal, or hexadecimal constants with appropriate values" id="CODSTA-220" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not include any type qualifiers in the specification of a function type" id="CODSTA-221" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid implicit integral conversions from a wider to a narrower type" id="CODSTA-222" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="19;" authUrg="0;" cat="CODSTA" desc="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" id="CODSTA-223" sev="3" total="19"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The conditional operator should not be used as a sub-expression" id="CODSTA-224" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA" desc="All 'if' statements should have an 'else' clause" id="CODSTA-23" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="1;" cat="CODSTA" desc="Avoid magic numbers" id="CODSTA-26" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="Avoid functions that modify global variables" id="CODSTA-27" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use meaningful symbolic constants to represent literal values" id="CODSTA-29" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid returning handles to function parameters" id="CODSTA-30" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="Avoid explicit type conversions (casts)" id="CODSTA-31" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not write logical expressions of the type if(test) or if(!test)  when test is a pointer" id="CODSTA-32" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use operator ++ or -- in the conditional expression of if, while, or switch" id="CODSTA-33" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use a typedef to simplify program syntax when declaring function pointers" id="CODSTA-34" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Always provide a default branch for switch statements" id="CODSTA-35" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Pass built-in-types by value unless you are modifying them" id="CODSTA-36" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="Prefer const objects or enums to #defines for simple constants" id="CODSTA-37" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use a #define that prevents the compiler from checking types" id="CODSTA-38" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="'void' should be used when a function is passed or returns no values" id="CODSTA-40" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="All structures should be typedef'd" id="CODSTA-47" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use the following digraphs: &lt;%, %>, &lt;:, :>, %:, %:%:" id="CODSTA-48" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Null initialize or increment expressions in for loops will not be used; a while loop will be used instead" id="CODSTA-49" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Hexadecimal constants will be represented using all uppercase letters" id="CODSTA-50" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter" id="CODSTA-52" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop" id="CODSTA-53" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Every switch statement will have at least two cases and a potential default" id="CODSTA-54" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="All 'case' and 'default' labels of 'switch' statement should have an explicit 'break' or a 'return' statement, or 'fall through' comment" id="CODSTA-56" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid comparing values with the 'TRUE' identifier using equality operators (&quot;==&quot;, &quot;!=&quot;)" id="CODSTA-60" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The final clause of a switch statement shall be the default-clause unless all enumeration values are tested" id="CODSTA-61" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="CODSTA-62" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Bitwise operators shall only be applied to operands of unsigned underlying type (with exceptions)" id="CODSTA-63" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="CODSTA-64" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An object with integer type or pointer to void type shall not be converted to an object with pointer type" id="CODSTA-65" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Non-constant operands to a binary bitwise operator shall have the same underlying type" id="CODSTA-66" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" id="CODSTA-67" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" id="CODSTA-68" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary &amp; operator" id="CODSTA-69" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Expressions with type enum shall not be used as operands to built-in operators other than  [ ],  =, ==, !=, &lt;, &lt;=, >, >=, and the unary &amp; operator" id="CODSTA-70" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="CODSTA-71" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assembler instructions shall only be introduced using the asm declaration" id="CODSTA-73" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Bit-fields shall not have enum type" id="CODSTA-74" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Bit-fields shall be either bool type or an explicitly unsigned or signed integral type" id="CODSTA-75" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The identifier main shall not be used for a function other than the global function main" id="CODSTA-76" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The goto statement shall jump to a label declared later in the same function body" id="CODSTA-77" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="CODSTA-78" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="CODSTA-79" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The continue statement shall only be used within a well formed for loop" id="CODSTA-80" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a function has internal linkage then all re-declarations shall include the 'static' storage class specifier" id="CODSTA-81" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid infinite loops" id="CODSTA-82" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use empty infinite loops" id="CODSTA-82_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="CODSTA" desc="All loops must have a fixed upper or lower bound" id="CODSTA-83" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid exit points within infinite loops" id="CODSTA-85" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="9;" authUrg="0;" cat="CODSTA" desc="The validity of parameters must be checked inside each function" id="CODSTA-86" sev="3" total="9"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use no more than one level of dereferencing" id="CODSTA-87" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Function pointers are not permitted" id="CODSTA-88" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="The declaration should not contain more than one level of pointer indirection" id="CODSTA-89" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Each operand of a logical '&amp;&amp;' or '||' shall be a postfix-expression" id="CODSTA-90" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A function shall have at most one exit point" id="CODSTA-91" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The names of standard library macros and objects shall not be reused" id="CODSTA-92" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="CODSTA-92_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)" id="CODSTA-92_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="25;" authUrg="0;" cat="CODSTA" desc="Do not declare pointer or array type" id="CODSTA-94" sev="3" total="25"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="25;" authUrg="0;" cat="CODSTA" desc="Do not declare pointer type" id="CODSTA-95" sev="3" total="25"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Bit-fields shall have explicitly unsigned integral or enumeration types only" id="CODSTA-96" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used" id="CODSTA-97" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="All 'if...else if' constructs will contain either a final else clause or a comment indicating why a final else clause is not necessary" id="CODSTA-98" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Signed and unsigned values shall not be mixed in comparison operations" id="CODSTA-99" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The second or third operand of a ternary operator '?:' shall not contain side effects" id="CODSTA-105" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="CODSTA-115" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects" id="CODSTA-123" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A conversion should not be performed between a pointer to object and an integer type" id="CODSTA-127" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t'" id="CODSTA-127_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A conversion should not be performed from pointer to void into pointer to object" id="CODSTA-128" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A function parameter should not be modified" id="CODSTA-132" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" id="CODSTA-134" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use enumerations in boolean condition" id="CODSTA-151" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The cast operation to essentially enumeration type is not allowed" id="CODSTA-165_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use casts between essentially character types and essentially floating types" id="CODSTA-165_c" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A function should not contain unused type declarations" id="CODSTA-175_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A source file should not contain unused type declarations" id="CODSTA-175_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A function should not contain unused local tag declarations" id="CODSTA-176_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A source file should not contain unused tag declarations" id="CODSTA-176_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A source file should not contain unused macro definitions" id="CODSTA-177" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The +, -, += and -= operators should not be applied to an expression of pointer type" id="CODSTA-181" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid switch statements with only one case" id="CODSTA-41" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Suspicious use of semicolon" id="CODSTA-57" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Cast to void is not allowed" id="CODSTA-58" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Hardcoded array declarations and 'malloc' calls should not be used" id="CODSTA-59" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not declare member variables as bit-fields" id="CODSTA-02" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assert liberally to document internal assumptions and invariants" id="CODSTA-11" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assertions should not contain function calls nor function-like macro calls" id="CODSTA-150_b" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Prefer 'while' statements over 'do' statements" id="CODSTA-18" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA" desc="Do not hard code string literals" id="CODSTA-203" sev="5" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="When using enum, the values of each member should be explicitly declared" id="CODSTA-21" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The macro FALSE should be defined as 0 (zero)" id="CODSTA-24" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The enumeration constant named 'FALSE' should be explicitly initialized by 0 value" id="CODSTA-25" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Define fields for union declarations" id="CODSTA-28" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The macro TRUE should be defined as 1" id="CODSTA-42" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The enumeration constant named 'TRUE' should be explicitly initialized by 1 value" id="CODSTA-43" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA" desc="Use positive logic rather than negative logic whenever practical" id="CODSTA-46" sev="5" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The names of standard library functions shall not be overridden" id="CODSTA-93" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Constructors allowing for conversion should be made explicit" id="CODSTA-CPP-04" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use user-defined conversion functions" id="CODSTA-CPP-05" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The first operand of a conditional-operator shall have type bool" id="CODSTA-CPP-65" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Declare at least one constructor to prevent the compiler from doing so" id="CODSTA-CPP-19" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Arrays shall not be used in interfaces" id="CODSTA-CPP-55" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Private and protected methods shall not declare parameters with array type" id="CODSTA-CPP-55_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Copy operations must not mutate the source object" id="CODSTA-CPP-98" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type" id="CODSTA-CPP-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Bitwise operators, comparison operators, logical operators, comma operator should be const" id="CODSTA-CPP-03" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid returning handles to class data from member functions" id="CODSTA-CPP-06" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Postfix increment and decrement should be implemented in terms of their prefix counterparts" id="CODSTA-CPP-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid overloading logical operators AND, OR (&amp;&amp;, ||)" id="CODSTA-CPP-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid using reinterpret_cast" id="CODSTA-CPP-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not define structs that contain member functions" id="CODSTA-CPP-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not compare objects of a class that may contain padding bits with C standard library functions" id="CODSTA-CPP-100" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A relational operator shall return a boolean value" id="CODSTA-CPP-101" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A binary arithmetic operator and a bitwise operator shall return a 'prvalue'" id="CODSTA-CPP-102" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Output parameters shall not be used" id="CODSTA-CPP-103" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The operand of the 'typeid' operator shall not contain any expression that has side effects" id="CODSTA-CPP-104" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The operand of the 'typeid' operator shall not contain a function call that causes side effects" id="CODSTA-CPP-104_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Define special members as =default when the behavior is equivalent to the compiler's behavior" id="CODSTA-CPP-105" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Use delegating constructors to reduce code duplication" id="CODSTA-CPP-106" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Comparison operators shall be non-member functions" id="CODSTA-CPP-107" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Comparison operators shall be non-member functions with identical parameter types and noexcept" id="CODSTA-CPP-107_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="2;" cat="CODSTA-CPP" desc="C-style casts should not be used" id="CODSTA-CPP-11" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Put classes that are used as base classes and classes that are used as member variables into separate include files" id="CODSTA-CPP-12" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Put classes that are used as function return type into separate include files" id="CODSTA-CPP-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Put classes that are used as argument types in function prototypes into separate include files" id="CODSTA-CPP-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Put functions that are used in the body of inline member function into separate include file" id="CODSTA-CPP-15" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="When two operators are opposites (such as == and !=), it is appropriate to define both" id="CODSTA-CPP-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use the 'struct' keyword to declare a variable in C++" id="CODSTA-CPP-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If you'd like to support mixed-mode operations make operators a non-member functions" id="CODSTA-CPP-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid making any assignment operator virtual. Do not return const T&amp; from assignment operator" id="CODSTA-CPP-24" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA-CPP" desc="Consider making virtual functions nonpublic, and public functions nonvirtual" id="CODSTA-CPP-25" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Keep types and functions in separate namespaces unless they're specifically intended to work together" id="CODSTA-CPP-26" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Keep a type and its nonmember function interface in the same namespace" id="CODSTA-CPP-27" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="When binary arithmetic operators are defined  ( + , - , * , / , ^ , % , | , &amp; ), assignment versions should be provided too" id="CODSTA-CPP-28" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer the canonical forms of arithmetic and assignment operators" id="CODSTA-CPP-29" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer non-member operators than member ones to support mixed-mode arithmetic" id="CODSTA-CPP-30" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A function definition should not be placed in a class specification unless the function is intended to be inlined" id="CODSTA-CPP-32" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Member functions shall not be defined within the template class definition" id="CODSTA-CPP-33" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid using static_cast on pointers" id="CODSTA-CPP-34" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid dynamic_casts" id="CODSTA-CPP-35" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="CODSTA-CPP" desc="The global namespace shall only contain main() and namespace declarations" id="CODSTA-CPP-36" sev="3" total="17"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not define class/struct/union inside function implementation" id="CODSTA-CPP-37" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Conversion operator, operator->, operator(), operator[] should be const" id="CODSTA-CPP-38" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Don't write namespace usings in a header file or before an #include" id="CODSTA-CPP-39" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use the 'enum' keyword to declare a variable in C++" id="CODSTA-CPP-41" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not declare member variables with the 'mutable' keyword" id="CODSTA-CPP-42" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Declare reference parameters as const references whenever possible" id="CODSTA-CPP-43" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Have the non-const version call the const version of member function instead of duplicating the const version definition" id="CODSTA-CPP-44" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="In the private section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others" id="CODSTA-CPP-45" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="CODSTA-CPP" desc="Order of scopes in class: public before all others" id="CODSTA-CPP-46" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Order of scopes in classes: protected before private" id="CODSTA-CPP-47" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="In the protected section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others" id="CODSTA-CPP-48" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="In the public section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others" id="CODSTA-CPP-49" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use static keyword except inside functions and classes" id="CODSTA-CPP-50" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not define inline functions in source files" id="CODSTA-CPP-51" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Consider using the natural relationship between the assignment version of an operator and the stand-alone version" id="CODSTA-CPP-52" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Declare local variable as const whenever possible" id="CODSTA-CPP-53" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Member functions shall be declared const whenever possible" id="CODSTA-CPP-54" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A class, structure, or enumeration will not be declared in the definition of its type" id="CODSTA-CPP-56" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Namespaces will not be nested more than two levels deep" id="CODSTA-CPP-57" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="CODSTA-CPP-58" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-CPP" desc="The C library shall not be used" id="CODSTA-CPP-59" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used" id="CODSTA-CPP-60" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used" id="CODSTA-CPP-60_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The 'NULL' identifier should not be used as an integer value" id="CODSTA-CPP-62" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="CODSTA-CPP-63" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The condition of an if-statement and the condition of an iteration-statement shall have type bool" id="CODSTA-CPP-64" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="2;" cat="CODSTA-CPP" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="CODSTA-CPP-66" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA-CPP" desc="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" id="CODSTA-CPP-67" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The unary &amp; operator shall not be overloaded" id="CODSTA-CPP-68" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A for loop shall contain a single loop-counter which shall not have floating type" id="CODSTA-CPP-69" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" id="CODSTA-CPP-70" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop" id="CODSTA-CPP-71" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A loop-control-variable other than the loop-counter shall not be modified within condition or expression" id="CODSTA-CPP-72" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A loop-control-variable other than the loop-counter which is modified in statement shall have type bool" id="CODSTA-CPP-73" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="There shall be no unnamed namespaces in header files" id="CODSTA-CPP-74" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="using-directives shall not be used" id="CODSTA-CPP-75" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier" id="CODSTA-CPP-76" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Const member functions shall not return non-const pointers or references to class-data" id="CODSTA-CPP-77" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="CODSTA-CPP-78" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Neither operand of an equality operator (== or !=) shall be a pointer to a virtual member function" id="CODSTA-CPP-79" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid overloading comma operator &quot;,&quot;" id="CODSTA-CPP-80" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="CODSTA-CPP" desc="Global variables and static data members should not be used" id="CODSTA-CPP-82" sev="3" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Identifiers declared in a local scope should not hide identifiers declared in a class scope" id="CODSTA-CPP-83" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope" id="CODSTA-CPP-84" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope" id="CODSTA-CPP-85" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If two opposite equality operators ('==', '!=') are defined in a class, one shall be defined in terms of the other" id="CODSTA-CPP-86" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="CODSTA-CPP-87_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="CODSTA-CPP-87_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="CODSTA-CPP-87_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The name of typedef should not be the same as the name of its basic type" id="CODSTA-CPP-88" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" id="CODSTA-CPP-90" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="CODSTA-CPP-91" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="All accessible entity names within a multiple inheritance hierarchy should be unique" id="CODSTA-CPP-92" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not initialize objects with a non-trivial class type using C standard library functions" id="CODSTA-CPP-93" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not compare objects of nonstandard-layout class type with C standard library functions" id="CODSTA-CPP-94" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not modify the standard namespaces 'std' and 'posix'" id="CODSTA-CPP-95" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="4;" cat="CODSTA-CPP" desc="Do not call a function with a mismatched language linkage" id="CODSTA-CPP-96" sev="3" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Never qualify a reference type with 'const' or 'volatile'" id="CODSTA-CPP-97" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Use offsetof() on valid types and members" id="CODSTA-CPP-99" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer non-member non-friend functions to member functions" id="CODSTA-CPP-22" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Classes which have only getters/setters (accessors/mutators) are not allowed" id="CODSTA-CPP-81" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not assign enumerations to bool" id="CODSTA-CPP-89" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer iostream.h to stdio.h" id="CODSTA-CPP-01" sev="5" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="CODSTA-CPP" desc="Encapsulate global variables and constants, enumerated types, and typedefs in a class" id="CODSTA-CPP-18" sev="5" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Assignment operator must return const reference" id="CODSTA-CPP-21" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="CODSTA-CPP" desc="Whenever a global function  is  referenced, use the :: operator" id="CODSTA-CPP-23" sev="5" total="17"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use the keyword 'explicit' for a constructor" id="CODSTA-CPP-31" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Limiting the number of objects of a class" id="CODSTA-CPP-40" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer lambdas over std::bind, std::bind1st and std::bind2nd" id="CODSTA-MCPP-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer 'auto' to explicit type names in variable declarations" id="CODSTA-MCPP-08_a" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="2;" cat="CODSTA-MCPP" desc="Prefer 'auto' to explicit type names for function return types" id="CODSTA-MCPP-08_b" sev="2" total="6"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A potentially virtual pointer to member function shall only be compared with nullptr" id="CODSTA-MCPP-26" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="All std::hash specializations for user-defined types shall have a noexcept function call operator" id="CODSTA-MCPP-27" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="User-conversion cast operators should be made explicit" id="CODSTA-MCPP-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer alias declarations to typedefs" id="CODSTA-MCPP-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer Scoped Enums to Unscoped Enums" id="CODSTA-MCPP-03" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-MCPP" desc="Each overriding virtual function shall be declared with the override or final specifier" id="CODSTA-MCPP-05" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Declare copy constructor and copy assignment operators with the 'delete' specifier to prevent copying of class" id="CODSTA-MCPP-06_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Declare copy constructor and copy assignment operators with the 'delete' specifier instead of using a base class with private methods to prevent copying of class" id="CODSTA-MCPP-06_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The 'binder1st' and 'binder2nd' identifiers should not be used" id="CODSTA-MCPP-07_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CODSTA-MCPP" desc="Declare functions 'noexcept' if they will not emit exceptions" id="CODSTA-MCPP-09" sev="3" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer const iterators to iterators" id="CODSTA-MCPP-10_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer to use cbegin(), crbegin, cend(), crend() functions" id="CODSTA-MCPP-10_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use std::move() on rvalue references and std::forward() on forwarding references" id="CODSTA-MCPP-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The 'std::forward' function should be used to forward forwarding references" id="CODSTA-MCPP-13_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid Overloading on Forwarding References" id="CODSTA-MCPP-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid default capture modes" id="CODSTA-MCPP-15_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use the 'this' pointer explicitly in lambdas with a default by-reference capture" id="CODSTA-MCPP-15_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer 'std::make_shared' to the direct use of new" id="CODSTA-MCPP-16_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer to use std::unique_ptr instead of std::auto_ptr" id="CODSTA-MCPP-16_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="'std::make_unique' shall be used to construct objects owned by 'std::unique_ptr'" id="CODSTA-MCPP-16_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Never return lambdas that capture local objects by reference" id="CODSTA-MCPP-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Never capture local objects from an outer lambda by reference" id="CODSTA-MCPP-17_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime" id="CODSTA-MCPP-17_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid unnecessary default capture modes in lambda expressions" id="CODSTA-MCPP-18_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid unnecessary lambda captures" id="CODSTA-MCPP-18_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Declare assignment operators with the ref-qualifier &amp;" id="CODSTA-MCPP-19" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use explicit ref-qualifiers on auto declarations in range-based 'for' loops" id="CODSTA-MCPP-22" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="CODSTA-MCPP" desc="If a public destructor of a class is non-virtual, then the class should be declared final" id="CODSTA-MCPP-23" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-MCPP" desc="Only one of virtual, override or final should be specified in a member function declaration" id="CODSTA-MCPP-24" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Digit sequences separators ' shall only be used consistently" id="CODSTA-MCPP-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A lambda shall not be an operand to typeid" id="CODSTA-MCPP-28" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use smart pointers when passing a pointer to an object in a thread" id="CODSTA-MCPP-29" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Consider using 'std::unique_ptr' instead of 'std::shared_ptr' for local objects" id="CODSTA-MCPP-30" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Define both sized and unsized versions of operator delete" id="CODSTA-MCPP-31" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-MCPP" desc="Static and thread-local objects shall be constant-initialized" id="CODSTA-MCPP-32" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="User defined literals operators shall only perform conversion of passed parameters" id="CODSTA-MCPP-33" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="CODSTA-MCPP-34" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object" id="CODSTA-MCPP-35" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr'" id="CODSTA-MCPP-36" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors" id="CODSTA-MCPP-37" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="CODSTA-MCPP" desc="Braced-initialization {}, without equals sign, shall be used for variable initialization" id="CODSTA-MCPP-38" sev="3" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A variable of type auto shall not be initialized using '{}' or '={}' braced-initialization" id="CODSTA-MCPP-39" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not overuse 'auto' specifier" id="CODSTA-MCPP-40" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The 'random_shuffle' identifier should not be used" id="CODSTA-MCPP-41" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not use the increment operator (++) on an operand of type 'bool'" id="CODSTA-MCPP-42" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The 'set_unexpected' identifier should not be used" id="CODSTA-MCPP-43" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Lambda expressions should not be defined inside another lambda expression" id="CODSTA-MCPP-44" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Return type of a non-void return type lambda expression should be explicitly specified" id="CODSTA-MCPP-45" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Include a parameter list in every lambda expression" id="CODSTA-MCPP-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid overloading constructors with std::initializer_list" id="CODSTA-MCPP-47" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Multiple output values from a function should be returned as a struct or tuple" id="CODSTA-MCPP-48" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="User-defined copy and move assignment operators should use user-defined no-throw swap function" id="CODSTA-MCPP-49" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" id="CODSTA-MCPP-50" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use const container calls when the result is immediately converted to a const iterator" id="CODSTA-MCPP-51" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not introduce virtual functions in a final class" id="CODSTA-MCPP-52" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not use std::move on objects declared with the const or const &amp; type" id="CODSTA-MCPP-53" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not create an rvalue reference of std::array" id="CODSTA-MCPP-54" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use std::call_once rather than the Double-Checked Locking pattern" id="CODSTA-MCPP-55" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer 'nullptr' over 'NULL' or '0'(zero)" id="CODSTA-MCPP-04" sev="4" total="17"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use constexpr to declare const variables whenever possible" id="CODSTA-MCPP-11_a_cpp11" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-MCPP" desc="Use constexpr to declare functions whenever possible" id="CODSTA-MCPP-11_b_cpp11" sev="4" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer smart pointer members over raw pointer members" id="CODSTA-MCPP-16_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer smart pointers over raw pointers for arrays or STL containers" id="CODSTA-MCPP-16_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer smart pointers over raw local pointers" id="CODSTA-MCPP-20" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not call lock() directly on a mutex" id="CODSTA-MCPP-21" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Line-splicing shall not be used in // comments" id="COMMENT-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="COMMENT" desc="Prefer C++ style comment" id="COMMENT-01" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="COMMENT" desc="Provide copyright information" id="COMMENT-02" sev="3" total="6"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="COMMENT" desc="Every source file will be documented with an introductory comment that provides information on the file" id="COMMENT-03" sev="3" total="6"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="22;" authUrg="3;" cat="COMMENT" desc="Document functions in comments that precede function definitions" id="COMMENT-04" sev="3" total="22"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="COMMENT" desc="Document functions in comments that precede function declarations" id="COMMENT-04_b" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="21;" authUrg="0;" cat="COMMENT" desc="Each variable declaration should be commented" id="COMMENT-05" sev="3" total="21"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Each typedef should be commented" id="COMMENT-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Each enumeration value should be commented" id="COMMENT-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Each structure member variable should be commented" id="COMMENT-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="All usage of assembler shall be documented" id="COMMENT-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="COMMENT" desc="Use of floating-point arithmetic shall be documented" id="COMMENT-10" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="The character sequence // shall not be used within a C-style comment" id="COMMENT-11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="The character sequence /* shall not be used within a C++-style comment" id="COMMENT-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="33;" authUrg="0;" cat="COMMENT" desc="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" id="COMMENT-14" sev="3" total="33"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="32;" authUrg="0;" cat="COMMENT" desc="Function parameters and return type should be documented in a comment that precedes the function declaration" id="COMMENT-14_b" sev="3" total="32"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid buffer overflow due to defining incorrect format limits" id="CWE-119-c" origId="BD-PB-OVERFFMT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid overflow when reading from a buffer" id="CWE-119-d" origId="BD-PB-OVERFRD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid overflow when writing to a buffer" id="CWE-119-e" origId="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid tainted data in array indexes" id="CWE-119-f" origId="BD-SECURITY-ARRAY" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Prevent buffer overflows from tainted data" id="CWE-119-g" origId="BD-SECURITY-BUFWRITE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid buffer read overflow from tainted data" id="CWE-119-h" origId="BD-SECURITY-OVERFRD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid buffer write overflow from tainted data" id="CWE-119-i" origId="BD-SECURITY-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid accessing arrays out of bounds" id="CWE-119-a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid accessing arrays and pointers out of bounds" id="CWE-119-b" origId="BD-PB-OVERFARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-119" desc="Suspicious use of 'strcpy' without checking size of source buffer" id="CWE-119-j" origId="CODSTA-143" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Ensure the output buffer is large enough when using path manipulation functions" id="CWE-119-k" origId="BD-PB-PATHBUF" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-125" desc="Avoid overflow when reading from a buffer" id="CWE-125-c" origId="BD-PB-OVERFRD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-125" desc="Avoid buffer read overflow from tainted data" id="CWE-125-d" origId="BD-SECURITY-OVERFRD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-125" desc="Avoid accessing arrays out of bounds" id="CWE-125-a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-125" desc="Avoid accessing arrays and pointers out of bounds" id="CWE-125-b" origId="BD-PB-OVERFARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-190" desc="Avoid wraparounds when performing arithmetic integer operations" id="CWE-190-a" origId="BD-PB-INTWRAP" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Avoid possible integer overflow in expressions in which the result is cast to a wider integer type" id="CWE-190-b" origId="MISRA-048_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" id="CWE-190-c" origId="PB-65" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type" id="CWE-190-d" origId="PB-65_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="CWE-190-e" origId="PB-66_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="CWE-190-f" origId="PB-66_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="CWE-190-g" origId="PB-73" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Avoid tainted data in array indexes" id="CWE-20-a" origId="BD-SECURITY-ARRAY" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CWE-20" desc="Avoid potential integer overflow/underflow on tainted data" id="CWE-20-b" origId="BD-SECURITY-TDINTOVERF" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against command injection" id="CWE-20-d" origId="BD-SECURITY-TDCMD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Avoid printing tainted data on the output console" id="CWE-20-e" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against environment injection" id="CWE-20-f" origId="BD-SECURITY-TDENV" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Exclude unsanitized user input from format strings" id="CWE-20-g" origId="BD-SECURITY-TDINPUT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against SQL injection" id="CWE-20-h" origId="BD-SECURITY-TDSQL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against file name injection" id="CWE-20-i" origId="BD-SECURITY-TDFNAMES" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Avoid passing unvalidated binary data to log methods" id="CWE-20-c" origId="BD-SECURITY-LOG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CWE-20" desc="Untrusted data is used as a loop boundary" id="CWE-20-j" origId="SECURITY-38" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-200" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="CWE-200-a" origId="SECURITY-15" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-22" desc="Protect against file name injection" id="CWE-22-a" origId="BD-SECURITY-TDFNAMES" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-269" desc="Observe correct revocation order while relinquishing privileges" id="CWE-269-a" origId="SECURITY-44" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-269" desc="Ensure that privilege relinquishment is successful" id="CWE-269-b" origId="SECURITY-45" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-287" desc="Do not use weak encryption functions" id="CWE-287-a" origId="SECURITY-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-326" desc="Do not use weak encryption functions" id="CWE-326-a" origId="SECURITY-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-362" desc="Avoid race conditions when using fork and file descriptors" id="CWE-362-d" origId="BD-TRS-FORKFILE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-362" desc="Do not use global variable with different locks set" id="CWE-362-e" origId="BD-TRS-MLOCK" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-362" desc="Usage of functions prone to race is not allowed" id="CWE-362-a" origId="SECURITY-19" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-362" desc="Avoid race conditions while accessing files" id="CWE-362-b" origId="BD-TRS-FRC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-362" desc="Use locks to prevent race conditions when modifying bit fields" id="CWE-362-c" origId="BD-TRS-BITLOCK" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-400" desc="Do not create variables on the stack above the defined limits" id="CWE-400-a" origId="BD-RES-STACKLIM" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-415" desc="Do not use resources that have been freed" id="CWE-415-a" origId="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-416" desc="Do not use resources that have been freed" id="CWE-416-a" origId="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-416" desc="Do not point to a wrapped object that has been freed" id="CWE-416-b" origId="BD-PB-WRAPESC" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-416" desc="Freed memory shouldn't be accessed under any circumstances" id="CWE-416-c" origId="MRM-31" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-426" desc="Use care to ensure that LoadLibrary() will load the correct library" id="CWE-426-a" origId="SECURITY-04" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CWE-476" desc="Avoid null pointer dereferencing" id="CWE-476-a" origId="BD-PB-NP" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-532" desc="Avoid passing sensitive data to functions that write to log files" id="CWE-532-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-611" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="CWE-611-a" origId="BD-SECURITY-XXEXRC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-617" desc="Do not use assertions" id="CWE-617-a" origId="CODSTA-199" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Conversions shall not be performed between a pointer to a function and any other type than pointer to function" id="CWE-704-a" origId="CODSTA-124_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Conversions shall not be performed between non compatible pointer to a function types" id="CWE-704-b" origId="CODSTA-124_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="CWE-704-c" origId="CODSTA-125" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A cast shall not be performed between a pointer to object type and a pointer to a different object type" id="CWE-704-d" origId="CODSTA-126" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A cast shall not be performed between pointer to void and an arithmetic type" id="CWE-704-g" origId="CODSTA-129_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="An implicit conversion shall not be performed between pointer to void and an arithmetic type" id="CWE-704-h" origId="CODSTA-129_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="CWE-704-i" origId="CODSTA-130" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="CWE-704-j" origId="MISRA-043" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="CWE-704-k" origId="MISRA-043_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="CWE-704-l" origId="MISRA-043_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t'" id="CWE-704-e" origId="CODSTA-127_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A conversion should not be performed from pointer to void into pointer to object" id="CWE-704-f" origId="CODSTA-128" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-732" desc="Specify the access permission bits if a file is created using the 'open' or 'openat' system call" id="CWE-732-b" origId="SECURITY-42" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-732" desc="Call 'umask' before calling 'mkstemp'" id="CWE-732-a" origId="SECURITY-40" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CWE-770" desc="Validate potentially tainted data before it is used to determine the size of memory allocation" id="CWE-770-a" origId="BD-SECURITY-TDALLOC" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CWE-772" desc="Ensure resources are freed" id="CWE-772-a" origId="BD-RES-LEAKS" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CWE-772" desc="Define a virtual destructor in classes used as base classes which have virtual functions" id="CWE-772-b" origId="OOP-22" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-78" desc="Protect against command injection" id="CWE-78-a" origId="BD-SECURITY-TDCMD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid buffer overflow due to defining incorrect format limits" id="CWE-787-c" origId="BD-PB-OVERFFMT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid overflow when writing to a buffer" id="CWE-787-d" origId="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Prevent buffer overflows from tainted data" id="CWE-787-e" origId="BD-SECURITY-BUFWRITE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid buffer write overflow from tainted data" id="CWE-787-f" origId="BD-SECURITY-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid accessing arrays out of bounds" id="CWE-787-a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid accessing arrays and pointers out of bounds" id="CWE-787-b" origId="BD-PB-OVERFARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Ensure the output buffer is large enough when using path manipulation functions" id="CWE-787-g" origId="BD-PB-PATHBUF" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CWE-798" desc="Do not hard code string literals" id="CWE-798-a" origId="CODSTA-203" sev="5" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-835" desc="Avoid infinite loops" id="CWE-835-a" origId="CODSTA-82" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-863" desc="Do not use 'cuserid' function" id="CWE-863-a" origId="SECURITY-31" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-89" desc="Protect against SQL injection" id="CWE-89-a" origId="BD-SECURITY-TDSQL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="EXCEPT-01" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Throw by value, catch by reference" id="EXCEPT-02" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Do not throw from within destructor" id="EXCEPT-03" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="The assignment-expression of a throw statement shall not itself cause an exception to be thrown" id="EXCEPT-11" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="All exceptions should be rethrown or logged with standard logger" id="EXCEPT-04" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="EXCEPT" desc="C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.)" id="EXCEPT-05" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="EXCEPT" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="EXCEPT-06" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="An empty throw shall only be used in the compound-statement of a catch handler" id="EXCEPT-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="EXCEPT" desc="Exceptions shall be raised only after start-up and before termination of the program" id="EXCEPT-08" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="EXCEPT" desc="An exception object should not have pointer type" id="EXCEPT-09" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Control shall not be transferred into a try or catch block using a goto or a switch statement" id="EXCEPT-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="NULL shall not be thrown explicitly" id="EXCEPT-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="EXCEPT-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="EXCEPT-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="A class type exception shall always be caught by reference" id="EXCEPT-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="EXCEPT-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="EXCEPT-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="EXCEPT-18" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Exception objects must be nothrow copy constructible" id="EXCEPT-19" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="An explicitly declared copy constructor for a class that inherits from 'std::exception' should have a non-throwing exception specification" id="EXCEPT-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="All user-provided move constructors and move assignment operators shall not exit with an exception" id="EXCEPT-21" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Checked exceptions that could be thrown from a function shall be specified in the comment directly before the function declaration" id="EXCEPT-22" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Do not use throw exception specifications" id="EXCEPT-23" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Where multiple handlers are provided in a single 'try-catch' statement or 'function-try-block', any ellipsis (catch-all) handler shall occur last" id="EXCEPT-24" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Empty 'catch' blocks should not be used" id="EXCEPT-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Avoid using catch-all exception handlers" id="EXCEPT-26" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="FORMAT" desc="Place an opening brace '{' on its own line" id="FORMAT-02" sev="3" total="15"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="FORMAT" desc="Place a closing brace '}' on its own line" id="FORMAT-03" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="FORMAT" desc="Physical lines should be less than eighty characters" id="FORMAT-04" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="The length of a macro should not exceed 10 lines" id="FORMAT-05" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Only one statement shall be allowed per line" id="FORMAT-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding assignment operators" id="FORMAT-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following assignment operators" id="FORMAT-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding bitwise operators" id="FORMAT-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following bitwise operators" id="FORMAT-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding and following bitwise operator '&amp;'" id="FORMAT-11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character between a conditional statement keyword and its opening parenthesis" id="FORMAT-12" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a maximum of 1 ASCII space character following the opening parenthesis in conditional statements" id="FORMAT-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding ternary conditional operator" id="FORMAT-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following ternary conditional operator" id="FORMAT-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding and following relational and equality operators" id="FORMAT-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no white space following '.' or '->' operator" id="FORMAT-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no white space preceding '.' or '->' operator" id="FORMAT-18" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following all commas" id="FORMAT-19" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following all semicolons" id="FORMAT-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There should be no space between a unary operator &quot;!&quot; or &quot;~&quot; and its operand" id="FORMAT-21" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There should be no space between a increment/decrement operator (++/--) and its operand" id="FORMAT-22" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no white spaces between the 'return' statement or the 'sizeof' operator and the following opening parenthesis" id="FORMAT-23" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no spaces after the opening '(' and before closing ')' parenthesis that enclose the operand of the 'return' statement or the 'sizeof' operator" id="FORMAT-24" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="The operand of the 'sizeof' operator should be enclosed in parentheses" id="FORMAT-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="12;" authUrg="0;" cat="FORMAT" desc="Parenthesis shall be used with the &quot;return&quot; statement" id="FORMAT-25_b" sev="3" total="12"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding and following logical operators" id="FORMAT-26" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Line should be indented by a multiple of four spaces" id="FORMAT-27" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="14;" authUrg="0;" cat="FORMAT" desc="In a function definition, the return type of the function should be written on a separate line directly above the function name" id="FORMAT-28" sev="3" total="14"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="FORMAT" desc="Multiple variable declarations shall not be allowed on the same line" id="FORMAT-29" sev="3" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Place left parenthesis directly after function name" id="FORMAT-30" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Separate logical tests in conditional expressions" id="FORMAT-31" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="FORMAT" desc="Each variable should be declared in a separate declaration statement" id="FORMAT-33" sev="3" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="FORMAT" desc="Braces &quot;{}&quot; which enclose a block should be placed in the same column" id="FORMAT-34" sev="3" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="When declaring functions, the leading parenthesis and the first argument are to be written on the same line as the function name" id="FORMAT-35" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Sibling statement lines should be indented to the same level" id="FORMAT-36" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="First line in control statement body should be indented more than control statement keyword" id="FORMAT-37" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="When declaring functions with more than 2 parameters, the leading parenthesis and the first argument are to be written on the same line as the function name, each additional argument will be written on a separate line" id="FORMAT-38" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="22;" authUrg="0;" cat="FORMAT" desc="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" id="FORMAT-42" sev="3" total="22"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="FORMAT" desc="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" id="FORMAT-43" sev="3" total="15"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Braces (&quot;{}&quot;) which enclose a block will not have an empty line after &quot;{&quot; nor before &quot;}&quot;" id="FORMAT-44" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There should be no space between a unary operator &quot;&amp;&quot;, &quot;*&quot;, &quot;+&quot;, &quot;-&quot; and its operand" id="FORMAT-45" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There should be no space between an increment/decrement operator (++/--) and its operand in macro definition" id="FORMAT-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="FORMAT" desc="Place CV-qualifiers on the right hand side of the type they apply to" id="FORMAT-47_a" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name" id="FORMAT-47_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Parameter names in function declarations should not be enclosed in parentheses" id="FORMAT-48" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Local variable names in variable declarations should not be enclosed in parentheses" id="FORMAT-49" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="FORMAT" desc="The dereference operator '*' and the address-of operator '&amp;' should be directly connected with the type" id="FORMAT-32" sev="4" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Sort #include directives in alphabetical order" id="FORMAT-39" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="160;" authUrg="0;" cat="FORMAT" desc="Tabs that do not use ASCII spaces shall not be used" id="FORMAT-01" sev="5" total="160"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="White spaces after the opening square bracket '[' and before its closing square bracket ']' shall be used in consistent way" id="FORMAT-40" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no space between '[' opening square bracket and preceding token" id="FORMAT-41" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="All declarations of an object or function shall have compatible types" id="GLOBAL-COMPATDECLS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="Do not use more than one mutex for concurrent waiting operations on a condition variable" id="GLOBAL-CONDMUTEXVAR" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" id="GLOBAL-EXCSPECDECL" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="An inline function that is used in multiple translation units shall be defined in one and only one file" id="GLOBAL-ONEDEFINLINE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="The One Definition Rule shall not be violated" id="GLOBAL-ONEDEFRULE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A function template that is used in multiple translation units shall be defined in one and only one file" id="GLOBAL-ONEDEFTEMPL" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A type that is used in multiple translation units shall be defined in one and only one file" id="GLOBAL-ONEDEFTYPE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="An identifier with external linkage shall have no more then one external definition" id="GLOBAL-ONEEXTERNDEF" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="GLOBAL-ONEFILEDECL" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="9;" authUrg="0;" cat="GLOBAL" desc="A project shall not contain non-volatile POD variables having only one use" id="GLOBAL-ONEUSEVAR" sev="3" total="9"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="The identifier name of a non-member object with static storage duration shall not be reused within a namespace" id="GLOBAL-REUSEDQUALGLOBVAR" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="The identifier name of a non-member static function shall not be reused within a namespace" id="GLOBAL-REUSEDQUALSTATFUN" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="All class templates, function templates, class template member functions and class template static members shall be instantiated at least one" id="GLOBAL-TEMPLNOINST" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A class, union or enum name (including qualification, if any) shall be a unique identifier" id="GLOBAL-UNIQUETYPE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A typedef name (including qualification, if any) shall be a unique identifier" id="GLOBAL-UNIQUETYPEDEF" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="5;" authUrg="0;" cat="GLOBAL" desc="Every defined function with external linkage shall be used at least once" id="GLOBAL-UNUSEDFUNC" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="1;" authUrg="0;" cat="GLOBAL" desc="A project shall not contain unused type declarations" id="GLOBAL-UNUSEDTYPE" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="There shall be no unused parameters (named or unnamed) in the set of parameters for a virtual function and all the functions that override it" id="GLOBAL-UNUSEDVIRTPARAM" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A base class shall only be declared virtual if it is used in a diamond hierarchy" id="GLOBAL-VIRTBASECLASS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" id="GLOBAL-AVOIDEXTERN" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-10_1_1" desc="For multiple inheritance use virtual common base class" id="HICPP-10_1_1-a" origId="OOP-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-10_2_1" desc="Each overriding virtual function shall be declared with the override or final specifier" id="HICPP-10_2_1-a" origId="CODSTA-MCPP-05" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-10_3_1" desc="Ensure that a derived class has at most one base class which is not an interface class" id="HICPP-10_3_1-a" origId="OOP-07_c" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-11_1_1" desc="Avoid &quot;public&quot; data members" id="HICPP-11_1_1-a" origId="OOP-18" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-11_1_1" desc="Avoid 'protected' data members" id="HICPP-11_1_1-b" origId="OOP-19" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-11_2_1" desc="Avoid using the friend mechanism" id="HICPP-11_2_1-a" origId="OOP-11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-12_1_1" desc="Constructors allowing for conversion should be made explicit" id="HICPP-12_1_1-a" origId="CODSTA-CPP-04" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_1_1" desc="User-conversion cast operators should be made explicit" id="HICPP-12_1_1-b" origId="CODSTA-MCPP-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_2_1" desc="Make destructors virtual in base classes" id="HICPP-12_2_1-a" origId="OOP-24" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_3_1" desc="Write operator delete if you write operator new" id="HICPP-12_3_1-a" origId="MRM-26" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_3_1" desc="Write operator delete[] if you write operator new[]" id="HICPP-12_3_1-b" origId="MRM-27" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-12_4_1" desc="Do not use dynamic type of an object under construction" id="HICPP-12_4_1-b" origId="BD-PB-VCTOR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-12_4_1" desc="Do not use dynamic type of an object under destruction" id="HICPP-12_4_1-c" origId="BD-PB-VDTOR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_4_2" desc="All member variables should be initialized in constructor" id="HICPP-12_4_2-a" origId="INIT-06" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_4_3" desc="Do not specify both an NSDMI and a member initializer in a constructor for the same non-static member" id="HICPP-12_4_3-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_4_4" desc="List members in an initialization list in the order in which they are declared" id="HICPP-12_4_4-a" origId="INIT-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_4_5" desc="Use delegating constructors to reduce code duplication" id="HICPP-12_4_5-a" origId="CODSTA-CPP-106" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="30;" authUrg="0;" cat="HICPP-12_5_1" desc="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" id="HICPP-12_5_1-a" sev="3" total="30"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_2" desc="Define special members as =default when the behavior is equivalent to the compiler's behavior" id="HICPP-12_5_2-a" origId="CODSTA-CPP-105" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_3" desc="A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member" id="HICPP-12_5_3-a" origId="OOP-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_4" desc="All user-provided move constructors and move assignment operators shall not exit with an exception" id="HICPP-12_5_4-a" origId="EXCEPT-21" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_6" desc="User-defined copy and move assignment operators should use user-defined no-throw swap function" id="HICPP-12_5_6-a" origId="CODSTA-MCPP-49" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_7" desc="Declare assignment operators with the ref-qualifier &amp;" id="HICPP-12_5_7-a" origId="CODSTA-MCPP-19" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_8" desc="The copy assignment operator shall be declared protected or private in an abstract class" id="HICPP-12_5_8-a" origId="OOP-42" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_1_1" desc="Member functions declared in derived class should not hide functions declared in base classes" id="HICPP-13_1_1-a" origId="OOP-53" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_1_2" desc="Avoid Overloading on Forwarding References" id="HICPP-13_1_2-a" origId="CODSTA-MCPP-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_1" desc="Avoid overloading logical operators AND, OR (&amp;&amp;, ||)" id="HICPP-13_2_1-a" origId="CODSTA-CPP-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_1" desc="Avoid overloading comma operator &quot;,&quot;" id="HICPP-13_2_1-b" origId="CODSTA-CPP-80" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_2" desc="A relational operator shall return a boolean value" id="HICPP-13_2_2-a" origId="CODSTA-CPP-101" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_2" desc="A binary arithmetic operator and a bitwise operator shall return a 'prvalue'" id="HICPP-13_2_2-b" origId="CODSTA-CPP-102" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_3" desc="Declare binary arithmetic and bitwise operators as non-members" id="HICPP-13_2_3-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_4" desc="When overloading the subscript operator (operator[]), implement both const and non-const versions" id="HICPP-13_2_4-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_5" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="HICPP-13_2_5-a" origId="CODSTA-CPP-91" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-14_1_1" desc="Do not use functions with variable numbers of arguments" id="HICPP-14_1_1-a" origId="MISRA-069" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-14_2_1" desc="All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template" id="HICPP-14_2_1-a" origId="TEMPL-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-14_2_2" desc="Overloaded function templates shall not be explicitly specialized" id="HICPP-14_2_2-a" origId="TEMPL-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-14_2_3" desc="Declare 'extern' an explicitly instantiated template" id="HICPP-14_2_3-a" origId="TEMPL-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-15_1_1" desc="Only use instances of std::exception for exceptions" id="HICPP-15_1_1-a" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-15_1_1" desc="Always throw the created std::exception object" id="HICPP-15_1_1-b" origId="BD-PB-STDEXC" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-15_2_1" desc="Do not throw from within destructor" id="HICPP-15_2_1-a" origId="EXCEPT-03" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-15_3_1" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="HICPP-15_3_1-a" origId="EXCEPT-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-15_3_2" desc="Always catch exceptions" id="HICPP-15_3_2-a" origId="BD-PB-EXCEPT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-15_3_2" desc="Avoid throwing exceptions from functions that are declared not to throw" id="HICPP-15_3_2-c" origId="BD-PB-NOEXCEPT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-15_3_2" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="HICPP-15_3_2-b" origId="EXCEPT-06" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="HICPP-16_1_1" desc="Avoid using macro definitions" id="HICPP-16_1_1-a" origId="PREPROC-01" sev="3" total="16"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="HICPP-16_1_1-b" origId="PREPROC-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-16_1_1" desc="The #ifdef, #else, #elif preprocessor directives should not be used" id="HICPP-16_1_1-c" origId="PREPROC-11" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="Use multiple include guards" id="HICPP-16_1_1-d" origId="PFO-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-16_1_1" desc="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" id="HICPP-16_1_1-e" origId="PREPROC-10_b" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-16_1_1" desc="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="HICPP-16_1_1-f" origId="PREPROC-10_c" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="#error directive shall not be used" id="HICPP-16_1_1-g" origId="PREPROC-22" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="The #pragma directive shall not be used" id="HICPP-16_1_1-h" origId="PREPROC-23" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="#undef shall not be used" id="HICPP-16_1_1-i" origId="PREPROC-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_2" desc="Do not allow absolute or relative path names in #include statements" id="HICPP-16_1_2-a" origId="PREPROC-06" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_2" desc="The \ character should not occur in a header file name" id="HICPP-16_1_2-b" origId="NAMING-48" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_3" desc="Match the filename in a #include directive to the one on the filesystem" id="HICPP-16_1_3-a" origId="PREPROC-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_4" desc="Use &lt;> brackets for system and standard library headers. Use quotes for all other headers" id="HICPP-16_1_4-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="0;" authUrg="0;" cat="HICPP-16_1_5" desc="Avoid duplication of #include directives" id="HICPP-16_1_5-a" origId="CDD-DUPI" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_1_1" desc="Avoid using vector&lt;bool>" id="HICPP-17_1_1-a" origId="STL-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_2_1" desc="The error indicator 'errno' shall not be used" id="HICPP-17_2_1-b" origId="MISRA2004-20_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-17_2_1" desc="Wrap use of the C Standard Library" id="HICPP-17_2_1-a" sev="4" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_3_1" desc="Do not use std::move on objects declared with the const or const &amp; type" id="HICPP-17_3_1-a" origId="CODSTA-MCPP-53" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_3_2" desc="The 'std::forward' function should be used to forward forwarding references" id="HICPP-17_3_2-a" origId="CODSTA-MCPP-13_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-17_3_3" desc="Do not subsequently use the argument to std::forward" id="HICPP-17_3_3-a" origId="BD-PB-SUBSEQFRWD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_3_4" desc="Do not create smart pointers of array type" id="HICPP-17_3_4-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_3_5" desc="Do not create an rvalue reference of std::array" id="HICPP-17_3_5-a" origId="CODSTA-MCPP-54" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_4_1" desc="Use const container calls when the result is immediately converted to a const iterator" id="HICPP-17_4_1-a" origId="CODSTA-MCPP-51" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_4_2" desc="Prefer 'std::make_shared' to the direct use of new" id="HICPP-17_4_2-a" origId="CODSTA-MCPP-16_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_5_1" desc="Follow remove-like algorithms by erase to remove elements from a container" id="HICPP-17_5_1-a" origId="STL-23" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-18_1_1" desc="Do not use platform-specific multi-threading facilities" id="HICPP-18_1_1-a" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_2_1" desc="Use high_integrity::thread in place of std::thread" id="HICPP-18_2_1-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-18_2_2" desc="Do not use global variable with different locks set" id="HICPP-18_2_2-a" origId="BD-TRS-MLOCK" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-18_2_2" desc="Make const member functions thread-safe" id="HICPP-18_2_2-b" origId="BD-TRS-CMF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_2_3" desc="Do not share volatile data between threads" id="HICPP-18_2_3-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_2_4" desc="Use std::call_once rather than the Double-Checked Locking pattern" id="HICPP-18_2_4-a" origId="CODSTA-MCPP-55" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-18_3_1" desc="Avoid double locking" id="HICPP-18_3_1-a" origId="BD-TRS-DLOCK" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-18_3_2" desc="Do not acquire locks in different order" id="HICPP-18_3_2-a" origId="BD-TRS-ORDER" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_3_3" desc="Do not use std::recursive_mutex" id="HICPP-18_3_3-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_3_4" desc="Only use std::unique lock when std::lock guard cannot be used" id="HICPP-18_3_4-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_3_5" desc="Do not access the members of std::mutex directly" id="HICPP-18_3_5-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_3_6" desc="Do not use relaxed atomics" id="HICPP-18_3_6-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_4_1" desc="Do not use std::condition_variable_any on a std::mutex" id="HICPP-18_4_1-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="Avoid conditions that always evaluate to the same value" id="HICPP-1_2_1-i" origId="BD-PB-CC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="Avoid switch with unreachable branches" id="HICPP-1_2_1-j" origId="BD-PB-SWITCH" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code in &quot;else&quot; block" id="HICPP-1_2_1-a" origId="MISRA2004-14_1_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute" id="HICPP-1_2_1-b" origId="MISRA2004-14_1_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="HICPP-1_2_1-c" origId="MISRA2004-14_1_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code in switch statement" id="HICPP-1_2_1-d" origId="MISRA2004-14_1_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code in 'for' loop" id="HICPP-1_2_1-e" origId="MISRA2004-14_1_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="HICPP-1_2_1-f" origId="MISRA2004-14_1_f" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="HICPP-1_2_1-g" origId="MISRA2004-14_1_g" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="Avoid unreachable methods" id="HICPP-1_2_1-h" origId="BD-PB-UCMETH" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_2" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="HICPP-1_2_2-a" origId="MISRA2004-14_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_3_1" desc="Do not use the increment operator (++) on an operand of type 'bool'" id="HICPP-1_3_1-a" origId="CODSTA-MCPP-42" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_3_2" desc="The 'register' storage class specifier shall not be used" id="HICPP-1_3_2-a" origId="MISRA-028" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-1_3_3" desc="The C library shall not be used" id="HICPP-1_3_3-a" origId="CODSTA-CPP-59" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_3_4" desc="Do not use deprecated STL library features" id="HICPP-1_3_4-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_3_5" desc="Do not use throw exception specifications" id="HICPP-1_3_5-a" origId="EXCEPT-23" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="160;" authUrg="0;" cat="HICPP-2_1_1" desc="Tabs that do not use ASCII spaces shall not be used" id="HICPP-2_1_1-a" origId="FORMAT-01" sev="5" total="160"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_2_1" desc="Do not use the following digraphs: &lt;%, %>, &lt;:, :>, %:, %:%:" id="HICPP-2_2_1-a" origId="CODSTA-48" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_2_1" desc="Trigraphs shall not be used" id="HICPP-2_2_1-b" origId="MISRA2004-4_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-2_3_1" desc="Prefer C++ style comment" id="HICPP-2_3_1-a" origId="COMMENT-01" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_3_2" desc="Do not use comments to remove sections of code" id="HICPP-2_3_2-a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="0;" cat="HICPP-2_4_1" desc="Different identifiers shall be typographically unambiguous" id="HICPP-2_4_1-a" origId="NAMING-47" sev="3" total="13"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_5_1" desc="String literals with different encoding prefixes shall not be concatenated" id="HICPP-2_5_1-a" origId="PB-38_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_5_2" desc="Octal constants (other than zero) shall not be used" id="HICPP-2_5_2-a" origId="MISRA2004-7_1_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="HICPP-2_5_3" desc="Prefer 'nullptr' over 'NULL' or '0'(zero)" id="HICPP-2_5_3-a" origId="CODSTA-MCPP-04" sev="4" total="17"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="HICPP-3_1_1-a" origId="MISRA2004-5_2_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="HICPP-3_1_1-b" origId="MISRA2004-5_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifiers declared in a local scope should not hide identifiers declared in a class scope" id="HICPP-3_1_1-c" origId="CODSTA-CPP-83" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope" id="HICPP-3_1_1-d" origId="CODSTA-CPP-84" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope" id="HICPP-3_1_1-e" origId="CODSTA-CPP-85" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_2_1" desc="Always declare functions at file scope" id="HICPP-3_2_1-a" origId="MISRA2004-8_6" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="HICPP-3_3_1" desc="Do not use variables with static storage duration" id="HICPP-3_3_1-a" sev="3" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_1" desc="The address of an object with automatic storage shall not be returned from a function" id="HICPP-3_4_1-a" origId="MISRA2004-17_6_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_2" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="HICPP-3_4_2-a" origId="MISRA2004-17_6_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_3" desc="Prefer smart pointers over raw local pointers" id="HICPP-3_4_3-a" origId="CODSTA-MCPP-20" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_3" desc="Do not call lock() directly on a mutex" id="HICPP-3_4_3-b" origId="CODSTA-MCPP-21" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_3" desc="Use RAII to prevent resource leaks" id="HICPP-3_4_3-c" origId="MRM-52" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-3_5_1" desc="Do not subtract two pointers that do not address elements of the same array" id="HICPP-3_5_1-c" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-3_5_1" desc="Do not compare two unrelated pointers" id="HICPP-3_5_1-d" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_5_1" desc="Unions shall not be used" id="HICPP-3_5_1-a" origId="MISRA2004-18_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="25;" authUrg="0;" cat="HICPP-3_5_1" desc="typedefs should be used in place of the basic types" id="HICPP-3_5_1-b" origId="MISRA2004-6_3_b" sev="3" total="25"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_1_1" desc="An object of array type with a specified size should not decay to a pointer when it is passed as a function argument" id="HICPP-4_1_1-a" origId="PB-41" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="20;" authUrg="0;" cat="HICPP-4_2_1" desc="Apply the U suffix to literals used in a context that requires an unsigned integral expression" id="HICPP-4_2_1-a" sev="3" total="20"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="Avoid incorrect shift operations" id="HICPP-4_2_2-f" origId="BD-PB-BADSHIFT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="HICPP-4_2_2-a" origId="MISRA2004-12_8" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-4_2_2" desc="Avoid explicit type conversions (casts)" id="HICPP-4_2_2-b" origId="CODSTA-31" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="HICPP-4_2_2-c" origId="PB-66_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="Avoid wraparounds when performing arithmetic integer operations" id="HICPP-4_2_2-e" origId="BD-PB-INTWRAP" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="HICPP-4_2_2-d" origId="PB-66_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_3_1" desc="Avoid implicit conversions from wider to narrower floating type" id="HICPP-4_3_1-a" origId="MISRA2004-10_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_3_1" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="HICPP-4_3_1-b" origId="MISRA2004-10_2_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_4_1" desc="Avoid implicit conversions from floating to integral type" id="HICPP-4_4_1-a" origId="MISRA2004-10_2_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="1;" cat="HICPP-5_1_1" desc="Avoid magic numbers" id="HICPP-5_1_1-a" origId="CODSTA-26" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Don't write code that depends on the order of evaluation of function arguments" id="HICPP-5_1_2-b" origId="MISRA2004-12_2_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="HICPP-5_1_2-a" origId="MISRA2004-12_2_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="HICPP-5_1_2-c" origId="MISRA2004-12_2_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="HICPP-5_1_2-d" origId="MISRA2004-12_2_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="HICPP-5_1_2-e" origId="MISRA2004-12_2_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Do not use more than one volatile between two adjacent sequence points" id="HICPP-5_1_2-f" origId="MISRA2004-12_2_f" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Don't write code that depends on the order of evaluation of function calls" id="HICPP-5_1_2-g" origId="MISRA2004-12_2_g" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" id="HICPP-5_1_2-h" origId="MISRA2004-12_13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="The comma operator shall not be used" id="HICPP-5_1_2-i" origId="MISRA2004-12_10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="The result of a built-in assignment operator should not be used" id="HICPP-5_1_2-j" origId="CODSTA-138" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_3" desc="Use parentheses unless all operators in the expression are the same" id="HICPP-5_1_3-a" origId="MISRA2004-12_1_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_3" desc="The operands of a logical &amp;&amp; or || shall be primary-expressions" id="HICPP-5_1_3-b" origId="MISRA2004-12_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_4" desc="Do not capture variables implicitly in a lambda" id="HICPP-5_1_4-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_5" desc="Include a parameter list in every lambda expression" id="HICPP-5_1_5-a" origId="CODSTA-MCPP-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="HICPP-5_1_6-a" origId="MISRA2004-12_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="HICPP-5_1_6-b" origId="MISRA2004-12_3_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="HICPP-5_1_6-c" origId="MISRA2004-12_3_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="HICPP-5_1_6-d" origId="MISRA2004-12_4_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The operand of the 'typeid' operator shall not contain any expression that has side effects" id="HICPP-5_1_6-e" origId="CODSTA-CPP-104" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The operand of the 'typeid' operator shall not contain a function call that causes side effects" id="HICPP-5_1_6-f" origId="CODSTA-CPP-104_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="HICPP-5_2_1" desc="Avoid null pointer dereferencing" id="HICPP-5_2_1-c" origId="BD-PB-NP" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-5_2_1" desc="Avoid accessing arrays out of bounds" id="HICPP-5_2_1-a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-5_2_1" desc="Avoid accessing arrays and pointers out of bounds" id="HICPP-5_2_1-b" origId="BD-PB-OVERFARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_2_2" desc="Functions shall not call themselves, either directly or indirectly" id="HICPP-5_2_2-a" origId="MISRA2004-16_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-5_2_2" desc="Do not use recursion" id="HICPP-5_2_2-b" origId="BD-PB-RECFUN" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_3_1" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="HICPP-5_3_1-a" origId="MISRA2004-12_9" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_3_2" desc="Do not use calloc, malloc, realloc and free functions" id="HICPP-5_3_2-a" origId="MRM-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-5_3_3" desc="Properly deallocate dynamically allocated resources" id="HICPP-5_3_3-c" origId="BD-RES-BADDEALLOC" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_3_3" desc="Never provide brackets ([]) for delete when deallocating non-arrays" id="HICPP-5_3_3-a" origId="MRM-35" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_3_3" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="HICPP-5_3_3-b" origId="MRM-36" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="2;" cat="HICPP-5_4_1" desc="C-style casts should not be used" id="HICPP-5_4_1-a" origId="CODSTA-CPP-11" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_4_1" desc="Avoid using reinterpret_cast" id="HICPP-5_4_1-b" origId="CODSTA-CPP-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_4_1" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="HICPP-5_4_1-c" origId="MISRA2004-11_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_4_2" desc="Do not cast an expression to an enumeration type" id="HICPP-5_4_2-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_4_3" desc="Down casting (casting from base to derived class) shall not be allowed" id="HICPP-5_4_3-a" origId="OOP-35" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="HICPP-5_5_1" desc="Avoid division by zero" id="HICPP-5_5_1-a" origId="BD-PB-ZERO" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_6_1" desc="Bitwise operators shall only be applied to operands of unsigned underlying type (with exceptions)" id="HICPP-5_6_1-a" origId="CODSTA-63" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_7_1" desc="Floating-point expressions shall not be tested for equality or inequality" id="HICPP-5_7_1-a" origId="MISRA2004-13_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_7_2" desc="A potentially virtual pointer to member function shall only be compared with nullptr" id="HICPP-5_7_2-a" origId="CODSTA-MCPP-26" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_8_1" desc="The conditional operator should not be used as a sub-expression" id="HICPP-5_8_1-a" origId="CODSTA-224" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_1" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="HICPP-6_1_1-a" origId="MISRA2004-14_8" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_1" desc="'if' and 'else' should be followed by a compound statement" id="HICPP-6_1_1-b" origId="MISRA2004-14_9" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_2" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="HICPP-6_1_2-a" origId="MISRA2004-14_10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_2" desc="The final clause of a switch statement shall be the default clause" id="HICPP-6_1_2-b" origId="MISRA2004-15_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_3" desc="Every switch branch should be unconditionally terminated" id="HICPP-6_1_3-a" origId="CODSTA-64_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_4" desc="Every switch statement will have at least two cases and a potential default" id="HICPP-6_1_4-a" origId="CODSTA-54" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_4" desc="A switch expression shall not represent a value that is effectively Boolean" id="HICPP-6_1_4-b" origId="MISRA2004-15_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_2_1" desc="A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" id="HICPP-6_2_1-a" origId="CODSTA-MCPP-50" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_2_2" desc="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" id="HICPP-6_2_2-a" origId="CODSTA-168" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_2_3" desc="Do not modify for loop counter within a body of the loop" id="HICPP-6_2_3-a" origId="MISRA2004-13_6" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_2_4" desc="The third clause of a 'for' statement shall be well-formed" id="HICPP-6_2_4-a" origId="CODSTA-169_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_3_1" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="HICPP-6_3_1-a" origId="MISRA2004-15_1" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_3_1" desc="The goto statement shall jump to a label declared later in the same function body" id="HICPP-6_3_1-b" origId="CODSTA-77" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_3_1" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="HICPP-6_3_1-c" origId="CODSTA-78" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_3_2" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="HICPP-6_3_2-a" origId="MISRA2004-16_8_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_4_1" desc="Declare variables as locally as possible" id="HICPP-6_4_1-a" origId="OPT-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_4_1" desc="Postpone variable definitions as long as possible" id="HICPP-6_4_1-b" origId="OPT-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="HICPP-7_1_1" desc="Multiple variable declarations shall not be allowed on the same line" id="HICPP-7_1_1-a" origId="FORMAT-29" sev="3" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="HICPP-7_1_1" desc="Each variable should be declared in a separate declaration statement" id="HICPP-7_1_1-b" origId="FORMAT-33" sev="3" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_10" desc="Use static_assert for assertions involving compile time constants" id="HICPP-7_1_10-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-7_1_2" desc="Declare local variable as const whenever possible" id="HICPP-7_1_2-a" origId="CODSTA-CPP-53" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_3" desc="Do not place type specifiers before non-type specifiers in a declaration" id="HICPP-7_1_3-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="HICPP-7_1_4" desc="Place CV-qualifiers on the right hand side of the type they apply to" id="HICPP-7_1_4-a" origId="FORMAT-47_a" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_5" desc="Do not inline large functions" id="HICPP-7_1_5-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_6" desc="The plain char type shall be used only for the storage and use of character values" id="HICPP-7_1_6-a" origId="MISRA2004-6_1" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="19;" authUrg="0;" cat="HICPP-7_1_6" desc="The names of the standard signed integer types and standard unsigned integer types should not be used" id="HICPP-7_1_6-b" origId="CODSTA-223_c" sev="3" total="19"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_6" desc="A variable initialized by a constant expression of a standard integer type should not be defined with the 'auto' specifier" id="HICPP-7_1_6-c" origId="CODSTA-MCPP-62" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_7" desc="Use a trailing return type syntax if the return type is preceded by the 'typename' keyword" id="HICPP-7_1_7-a" origId="TEMPL-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-7_1_8" desc="Use auto id = expr when declaring a variable that is the same type as the initializer function call" id="HICPP-7_1_8-a" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_9" desc="Do not explicitly specify the return type of a lambda" id="HICPP-7_1_9-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_2_1" desc="Use an explicit enumeration base and ensure that it is large enough to store all enumerators" id="HICPP-7_2_1-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_2_2" desc="Initialize all, only the first, or none of the enumerators in an enumeration" id="HICPP-7_2_2-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_3_1" desc="using-directives shall not be used" id="HICPP-7_3_1-a" origId="CODSTA-CPP-75" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-7_4_1" desc="Do not use static keyword except inside functions and classes" id="HICPP-7_4_1-a" origId="CODSTA-CPP-50" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="HICPP-7_4_2" desc="An inline function that is used in multiple translation units shall be defined in one and only one file" id="HICPP-7_4_2-a" origId="GLOBAL-ONEDEFINLINE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="HICPP-7_4_2" desc="A function template that is used in multiple translation units shall be defined in one and only one file" id="HICPP-7_4_2-b" origId="GLOBAL-ONEDEFTEMPL" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="HICPP-7_4_2" desc="A type that is used in multiple translation units shall be defined in one and only one file" id="HICPP-7_4_2-c" origId="GLOBAL-ONEDEFTYPE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="HICPP-7_4_3" desc="A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="HICPP-7_4_3-a" origId="GLOBAL-ONEFILEDECL" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_5_1" desc="The 'asm' declaration should not be used" id="HICPP-7_5_1-a" origId="CODSTA-234" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-8_1_1" desc="The declaration should not contain more than one level of pointer indirection" id="HICPP-8_1_1-a" origId="CODSTA-89" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_2_1" desc="The identifiers used in the declaration and definition of a function shall be identical" id="HICPP-8_2_1-a" origId="MISRA2004-16_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_2_2" desc="Avoid functions with more than 5 parameters" id="HICPP-8_2_2-a" origId="METRICS-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-8_2_3" desc="Pass small objects with a trivial copy constructor by value" id="HICPP-8_2_3-a" origId="CODSTA-CPP-108_b" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_2_4" desc="Do not pass std::unique_ptr by const reference" id="HICPP-8_2_4-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_3_1" desc="Follow the Cyclomatic Complexity limit of 10" id="HICPP-8_3_1-a" origId="METRICS-18" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_3_3" desc="Do not use default arguments" id="HICPP-8_3_3-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_3_4" desc="Define =delete functions with parameters of type rvalue reference to const" id="HICPP-8_3_4-a" origId="CODSTA-MCPP-61" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-8_4_1" desc="Avoid use before initialization" id="HICPP-8_4_1-a" origId="BD-PB-NOTINIT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-8_4_1" desc="Do not use resources that have been freed" id="HICPP-8_4_1-b" origId="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_4_1" desc="All automatic variables shall have been assigned a value before being used" id="HICPP-8_4_1-c" origId="MISRA-030" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_4_2" desc="The initializer for an aggregate or union shall be enclosed in braces" id="HICPP-8_4_2-a" origId="INIT-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-9_1_1" desc="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="HICPP-9_1_1-a" origId="CODSTA-CPP-78" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_1_2" desc="Do not redefine an inherited virtual function with a different default parameter value" id="HICPP-9_1_2-a" origId="OOP-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_1_3" desc="Const member functions shall not return non-const pointers or references to class-data" id="HICPP-9_1_3-a" origId="CODSTA-CPP-77" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-9_1_4" desc="Public member functions shall not return non-const handles to private/protected class-data" id="HICPP-9_1_4-a" origId="OOP-36" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_1_5" desc="Do not introduce virtual functions in a final class" id="HICPP-9_1_5-a" origId="CODSTA-MCPP-52" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_2_1" desc="Bit-fields shall have explicitly unsigned integral or enumeration types only" id="HICPP-9_2_1-a" origId="CODSTA-96" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not initialize a reference to an object whose address can be changed" id="INIT-05" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="All member variables should be initialized in constructor" id="INIT-06" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Initialize static class members" id="INIT-09" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not use uninitialized nonstatic member variables in base class constructors" id="INIT-13_a" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not use uninitialized nonstatic member variables of nonvirtual base classes in virtual base class constructors" id="INIT-13_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="9;" authUrg="0;" cat="INIT" desc="Initialize all pointer variables" id="INIT-04" sev="2" total="9"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="An assignment operator shall assign all data members" id="INIT-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Objects with external linkage should not be initialized in a header file" id="INIT-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not initialize unsigned integer variables with signed constants" id="INIT-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="INIT" desc="Initialize all variables" id="INIT-03" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Make class members' initialization explicit by providing user-defined constructor" id="INIT-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="User-defined constructor must be provided to ensure the proper initialization of dynamically allocated class objects" id="INIT-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="List members in an initialization list in the order in which they are declared" id="INIT-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Avoid initialization order problems across translation units by replacing non-local static objects with local static objects" id="INIT-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not assume that members are initialized in any special order in constructors" id="INIT-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not use possibly uninitialized nonstatic member variables of base classes in base class constructors" id="INIT-13_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="The initializer for an aggregate or union shall be enclosed in braces" id="INIT-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="The data members initialized with the same constant values across all constructors should be initialized using NSDMI" id="INIT-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Consider adding constructor to initialize 'struct' member variables" id="INIT-15" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Prefer initialization to assignment in constructors" id="INIT-14" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All functions shall have a cyclomatic complexity number of 20 or less" id="JSF-003" origId="METRICS-28" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Follow the Essential Complexity limit of 1" id="JSF-003_b" origId="METRICS-42" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Capital 'L' shall be used instead of lowercase 'l' to indicate long" id="JSF-014" origId="PORT-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Ensure that array indices are within the bounds of the array" id="JSF-015" origId="MISRA-004_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The error indicator 'errno' shall not be used" id="JSF-017" origId="MISRA2004-20_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The macro 'offsetof', in library &lt;stddef.h>, shall not be used" id="JSF-018" origId="MISRA2004-20_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="'setlocale' function shall not be used" id="JSF-019" origId="MISRA-121_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="&lt;locale.h> shall not be used" id="JSF-019_b" origId="MISRA-121_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The 'setjmp' macro and the 'longjmp' function shall not be used" id="JSF-020" origId="MISRA2004-20_7" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The standard header file &lt;setjmp.h> shall not be used" id="JSF-020_b" origId="MISRA2004-20_7_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The standard header file &lt;signal.h> shall not be used" id="JSF-021" origId="MISRA2004-20_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="JSF-021_b" origId="MISRA2004-20_8_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="The input/output library &lt;stdio.h> shall not be used" id="JSF-022" origId="PREPROC-18" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="The library functions atof, atoi and atol from library &lt;stdlib.h> shall not be used" id="JSF-023" origId="MISRA2004-20_10" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The library function 'abort' of &lt;stdlib.h> shall not be used" id="JSF-024" origId="PB-75" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The library function 'exit' of &lt;stdlib.h> shall not be used" id="JSF-024_b" origId="PB-75_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The library function 'getenv' of &lt;stdlib.h> shall not be used" id="JSF-024_c" origId="SECURITY-52" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The library function 'system' of &lt;stdlib.h> shall not be used" id="JSF-024_d" origId="SECURITY-48_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The time handling functions of library &lt;time.h> shall not be used" id="JSF-025" origId="MISRA2004-20_12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="The #ifdef, #else, #elif preprocessor directives should not be used" id="JSF-026" origId="PREPROC-11" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="The #if preprocessor directive should not be used" id="JSF-026_b" origId="PREPROC-11_b" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="#error directive shall not be used" id="JSF-026_c" origId="PREPROC-22" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The #pragma directive shall not be used" id="JSF-026_d" origId="PREPROC-23" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="#undef shall not be used" id="JSF-026_e" origId="PREPROC-25" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="JSF" desc="The #define pre-processor directive shall not be used to create inline macros" id="JSF-029" origId="MISRA2004-19_7" sev="2" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="The #define pre-processor directive shall not be used to define constant values" id="JSF-030" origId="CODSTA-03" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="JSF" desc="The #include directive shall use the &lt;filename.h> notation to include header files" id="JSF-033" origId="PREPROC-09" sev="2" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="User-specified C++ external identifiers should differ in the first 64 characters" id="JSF-046_a" origId="PORT-34_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="User-specified C++ internal identifiers should differ from external identifiers in the first 64 characters" id="JSF-046_b" origId="PORT-34_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="User-specified C++ internal identifiers declared in the same scope should differ in the first 64 characters" id="JSF-046_c" origId="PORT-34_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers for constant and enumerator values shall be lowercase" id="JSF-052" origId="NAMING-42" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The following character sequences shall not appear in header file names: ', \, /*, //, or &quot; " id="JSF-053.1" origId="PB-28" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The statements forming the body of a 'while', 'do...while', 'switch' or 'for' statement shall always be enclosed in braces" id="JSF-059_a" origId="MISRA2004-14_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The statements forming the body of an 'if', 'else if' or 'else' statement shall always be enclosed in braces" id="JSF-059_b" origId="MISRA2004-14_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Declare both private copy constructor and copy assignment operator at the same time" id="JSF-068" origId="MRM-50" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Freed memory shall not be accessed under any circumstances" id="JSF-070.1" origId="MRM-31" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Destructor shall not be called manually" id="JSF-070.1_b" origId="MRM-31_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Public and protected methods shall not be invoked by class constructor" id="JSF-071" origId="PB-26" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A class's virtual functions shall not be invoked from any of its constructors" id="JSF-071.1" origId="OOP-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A class's virtual functions shall not be invoked from its destructor" id="JSF-071.1_b" origId="OOP-16_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All member variables shall be initialized in constructor" id="JSF-071_b" origId="INIT-06" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A class's virtual functions shall not be invoked from any of its constructors" id="JSF-071_c" origId="OOP-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Uninitialized nonstatic member variables shall not be used in base class constructors" id="JSF-071_d" origId="INIT-13_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Uninitialized nonstatic member variables of nonvirtual base classes shall not be used in virtual base class constructors" id="JSF-071_e" origId="INIT-13_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Possibly uninitialized nonstatic member variables of base classes shall not be used in base class constructors" id="JSF-071_f" origId="INIT-13_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Members of the initialization list shall be listed in the order in which they are declared in the class" id="JSF-075" origId="INIT-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A copy constructor and a copy assignment operator shall be declared for classes that contain pointers to data items or nontrivial destructors" id="JSF-076" origId="MRM-49" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A copy constructor shall copy all data members and bases" id="JSF-077" origId="MRM-41" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The definition of a constructor shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor" id="JSF-077.1" origId="PB-24" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="All base classes with a virtual function shall define a virtual destructor" id="JSF-078" origId="OOP-22" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Call fclose() on pointer member in destructor if the pointer was used to open a file" id="JSF-079" origId="MRM-42" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Call delete on pointer members in destructors" id="JSF-079_b" origId="MRM-33" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The assignment operator shall handle self-assignment correctly" id="JSF-081" origId="OOP-34" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An assignment operator shall return a reference to *this" id="JSF-082" origId="CODSTA-CPP-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An assignment operator shall assign all data members" id="JSF-083_a" origId="INIT-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An assignment operator shall assign all data bases" id="JSF-083_b" origId="MRM-43" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Multiple inheritance shall be limited to at most 1 protected implementation" id="JSF-088" origId="OOP-07_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A stateful virtual base shall be explicitly declared in each derived class that accesses it" id="JSF-088.1" origId="OOP-39_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Multiple inheritance shall not use any public implementations" id="JSF-088_b" origId="OOP-07_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A base class shall not be both virtual and non-virtual in the same hierarchy" id="JSF-089" origId="OOP-41" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An inherited nonvirtual function shall not be redefined in a derived class" id="JSF-094" origId="OOP-32" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Member functions declared in derived class shall not hide functions declared in base classes" id="JSF-094_b" origId="OOP-53" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An inherited default parameter shall never be redefined" id="JSF-095" origId="OOP-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arrays shall not be treated polymorphically" id="JSF-096" origId="PB-57" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arrays shall not be used in interfaces" id="JSF-097" origId="CODSTA-CPP-55" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Neither operand of an equality operator (== or !=) shall be a pointer to a virtual member function" id="JSF-097.1" origId="CODSTA-CPP-79" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arrays shall not be used in private or protected methods" id="JSF-097_b" origId="CODSTA-CPP-55_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="Arrays shall not be used in global functions" id="JSF-097_c" origId="CODSTA-142" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arrays shall not be passed to functions as array/pointer parameters" id="JSF-097_d" origId="PB-41_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions which are called with array argument shall not be declared with pointer parameter" id="JSF-097_e" origId="CODSTA-142_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions shall always be declared at file scope" id="JSF-107" origId="MISRA2004-8_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions with variable numbers of arguments shall not be used" id="JSF-108" origId="MISRA-069" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A function shall not return a pointer or reference to a non-static local object" id="JSF-111" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A function shall not return a pointer or a reference to a parameter that is passed by const reference" id="JSF-111_a" origId="PB-39_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All exit points of value-returning functions shall be through return statements" id="JSF-114" origId="MISRA2004-16_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions shall not call themselves, either directly or indirectly" id="JSF-119" origId="MISRA2004-16_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="Only valid C++ style comments (//) shall be used" id="JSF-126" origId="COMMENT-01" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Code that is not used (commented out) shall be deleted" id="JSF-127" origId="MISRA2004-2_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="JSF-135_a" origId="MISRA2004-5_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers declared in an inner local scope shall not hide identifiers declared in an outer local scope" id="JSF-135_b" origId="MISRA2004-5_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers declared in a local scope shall not hide identifiers declared in a class scope" id="JSF-135_c" origId="CODSTA-CPP-83" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers declared in a class scope shall not hide identifiers declared in a global or namespace scope" id="JSF-135_d" origId="CODSTA-CPP-84" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers declared in an inner class scope shall not hide identifiers declared in outer class scope" id="JSF-135_e" origId="CODSTA-CPP-85" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers shall not simultaneously have both internal and external linkage in the same translation unit" id="JSF-138_a" origId="MISRA-024" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" id="JSF-138_b" origId="MISRA2004-8_11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The register storage class specifier shall not be used" id="JSF-140" origId="MISRA-028" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All automatic variables shall have been assigned a value before being used" id="JSF-142_a" origId="MISRA-030" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="All variables shall be initialized before use" id="JSF-142_b" origId="INIT-03" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" id="JSF-144" origId="INIT-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="In an enumerator list, the '=' construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized" id="JSF-145" origId="MISRA2004-9_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The underlying bit representations of floating point numbers shall not be used in any way by the programmer" id="JSF-147" origId="MISRA-016" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Enumeration types shall be used instead of integer types (and constants) to select from a limited series of choices" id="JSF-148" origId="CODSTA-55" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Octal constants (other than zero) shall not be used" id="JSF-149" origId="MISRA2004-7_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A string literal shall not be modified" id="JSF-151.1" origId="PB-27" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="JSF" desc="Multiple variable declarations shall not be allowed on the same line" id="JSF-152" origId="FORMAT-29" sev="2" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Unions shall not be used" id="JSF-153" origId="MISRA2004-18_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Bit-fields shall have explicitly unsigned integral or enumeration types only" id="JSF-154" origId="CODSTA-96" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All the members of a structure (or class) shall be named" id="JSF-156" origId="MISRA-113" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The right hand operand of a &amp;&amp; or || operator shall not contain side effects" id="JSF-157" origId="MISRA2004-12_4_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators" id="JSF-158" origId="CODSTA-104" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Operators ||, &amp;&amp; shall not be overloaded" id="JSF-159" origId="CODSTA-CPP-08" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Operator unary &amp; shall not be overloaded" id="JSF-159_b" origId="CODSTA-CPP-68" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An assignment expression shall be used only as the expression in an expression statement" id="JSF-160" origId="MISRA2004-13_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Signed and unsigned values shall not be mixed in comparison operations" id="JSF-162_a" origId="CODSTA-99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Signed and unsigned values shall not be mixed in second and third operand of conditional operator" id="JSF-162_b" origId="CODSTA-101" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Signed and unsigned values shall not be mixed in arithmetic operations" id="JSF-162_c" origId="CODSTA-100" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Unsigned arithmetic shall not be used" id="JSF-163" origId="PB-25" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="JSF" desc="The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the left-hand operand" id="JSF-164" origId="BD-PB-BADSHIFT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The left-hand operand of a right-shift operator shall not have a negative value" id="JSF-164.1" origId="PB-29" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The unary minus operator shall not be applied to an unsigned expression" id="JSF-165" origId="MISRA2004-12_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't assign the dividend of two integers to a floating-point type" id="JSF-167_a" origId="PB-15" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The comma operator shall not be used" id="JSF-168_b" origId="MISRA2004-12_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="More than 2 levels of pointer indirection shall not be used" id="JSF-170" origId="MISRA-102" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="JSF" desc="Relational operators shall not be applied to pointer types except where they point to the same array" id="JSF-171" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The address of an object with automatic storage shall not be assigned to an object which persists after the object has ceased to exist" id="JSF-173" origId="MISRA2004-17_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The null pointer shall not be de-referenced" id="JSF-174_a" origId="MISRA-107_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The null pointer shall not be de-referenced" id="JSF-174_b" origId="MISRA-107_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="NULL identifier shall not be used; use plain 0 instead" id="JSF-175" origId="CODSTA-17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Down casting (casting from base to derived class) shall not be allowed" id="JSF-178" origId="OOP-35" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A pointer to a virtual base class shall not be converted to a pointer to a derived class" id="JSF-179" origId="OOP-50" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="JSF-180_a" origId="MISRA-043" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid implicit conversions from floating to integral type" id="JSF-180_b" origId="MISRA2004-10_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid implicit conversions from wider to narrower floating type" id="JSF-180_c" origId="MISRA2004-10_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid conversions of constant values to a narrower type" id="JSF-180_d" origId="PORT-28" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid implicit conversions from signed to unsigned type" id="JSF-180_e" origId="PB-56" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="JSF-180_f" origId="MISRA-043_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="JSF-180_g" origId="MISRA-043_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Type casting from any type to or from pointers shall not be used" id="JSF-182" origId="CODSTA-135" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Floating point numbers shall not implicitly be converted to integers" id="JSF-184_a" origId="MISRA2004-10_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="2;" cat="JSF" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="JSF-185" origId="CODSTA-CPP-66" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code in 'else' block" id="JSF-186_a" origId="MISRA2004-14_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="JSF-186_b" origId="MISRA2004-14_1_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code in 'if', 'else', 'while' and 'for' block" id="JSF-186_c" origId="MISRA2004-14_1_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code in 'switch' statement" id="JSF-186_d" origId="MISRA2004-14_1_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code in 'for' loop" id="JSF-186_e" origId="MISRA2004-14_1_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="JSF-186_f" origId="MISRA2004-14_1_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code after 'if' or 'switch' statement inside 'while', 'for' or 'do...while' loop" id="JSF-186_g" origId="MISRA2004-14_1_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Every defined function with internal linkage shall be used" id="JSF-186_h" origId="OPT-30" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All non-null statements shall potentially have a side-effect" id="JSF-187" origId="MISRA2004-14_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The goto statement shall not be used" id="JSF-189" origId="MISRA2004-14_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The continue statement shall not be used" id="JSF-190" origId="MISRA2004-14_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The break statement shall not be used (except to terminate the cases of a switch statement)" id="JSF-191" origId="MISRA-058" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="JSF-191_a" origId="CODSTA-79" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Every non-empty case clause in a switch statement shall be terminated with a break statement" id="JSF-193" origId="MISRA2004-15_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All switch statements that do not intend to test for every enumeration value shall contain a final default clause" id="JSF-194" origId="CODSTA-61" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Floating point variables shall not be used as loop counters" id="JSF-197" origId="MISRA-065" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Numeric variables being used within a for loop for iteration counting shall not be modified in the body of the loop" id="JSF-201" origId="MISRA2004-13_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Floating point variables shall not be tested for exact equality or inequality" id="JSF-202" origId="MISRA2004-13_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Evaluation of expressions shall not lead to overflow/underflow" id="JSF-203" origId="PB-73" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="JSF-204.1_a" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write code that depends on the order of evaluation of function arguments" id="JSF-204.1_b" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="JSF-204.1_c" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="JSF-204.1_d" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="JSF-204.1_e" origId="MISRA2004-12_2_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Do not use more than one volatile in one expression" id="JSF-204.1_f" origId="MISRA2004-12_2_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write code that depends on the order of evaluation of function calls" id="JSF-204.1_g" origId="MISRA2004-12_2_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A single operation with side-effect shall only be used in the proper context" id="JSF-204_a" origId="CODSTA-102" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A call of function with side-effect shall only be used in the proper context" id="JSF-204_b" origId="CODSTA-103" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The second or third operand of a ternary operator '?:' shall not contain side effects" id="JSF-204_d" origId="CODSTA-105" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The volatile keyword shall not be used" id="JSF-205" origId="MISRA-046_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="Dynamic heap memory allocation shall not be used" id="JSF-206" origId="MISRA2004-20_4" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="C++ exceptions shall not be used" id="JSF-208" origId="EXCEPT-05" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Typedefs that indicate size and signedness shall be used in place of the basic types" id="JSF-209" origId="MISRA2004-6_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="25;" authUrg="0;" cat="JSF" desc="Typedefs that indicate size and signedness shall be used in place of the basic types" id="JSF-209_b" origId="MISRA2004-6_3_b" sev="2" total="25"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier" id="JSF-210.1" origId="PORT-26" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Algorithms shall not assume particular memory alignment" id="JSF-211" origId="MISRA2004-11_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used" id="JSF-213_e" origId="CODSTA-97" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Assuming that non-local static objects, in separate translation units, are initialized in a special order shall not be done" id="JSF-214" origId="INIT-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs)" id="JSF-001" origId="METRICS-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Only those characters specified in the C++ basic source character set will be used" id="JSF-009" origId="MISRA-005" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Values of character types will be restricted to a defined and documented subset of ISO 10646-1" id="JSF-010" origId="MISRA-006" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Trigraphs will not be used" id="JSF-011" origId="MISRA2004-4_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The following digraphs will not be used &lt;%, %>, &lt;:, :>, %:, %:%:" id="JSF-012" origId="CODSTA-48" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Wide string literals (for example L&quot;abc&quot;) will not be used" id="JSF-013" origId="MISRA-008" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="#ifndef, #define and #endif will be used to prevent multiple inclusions of the same header file" id="JSF-027" origId="PFO-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="JSF-028" origId="PREPROC-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" id="JSF-028_b" origId="PREPROC-10_b" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="JSF" desc="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" id="JSF-031" origId="PREPROC-01" sev="3" total="16"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="JSF" desc="The #include pre-processor directive will only be used to include header (*.h) files" id="JSF-032" origId="PREPROC-08" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A header file will contain a mechanism that prevents multiple inclusions of itself" id="JSF-035" origId="PFO-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Header files (*.h) will not contain non-const variable definitions or function definitions" id="JSF-039_a" origId="PFO-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="Source lines will be kept to a length of 120 characters or less" id="JSF-041" origId="METRICS-26" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Each expression-statement will be on a separate line" id="JSF-042" origId="FORMAT-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All indentations will be consistent" id="JSF-044" origId="FORMAT-36" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="JSF" desc="Identifiers will not begin with the underscore character &quot;_&quot;" id="JSF-047" origId="NAMING-33" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="24;" authUrg="0;" cat="JSF" desc="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" id="JSF-048" origId="NAMING-45" sev="3" total="24"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Begin class, struct, union, enum, and typedef names with an uppercase letter" id="JSF-050" origId="NAMING-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="19;" authUrg="0;" cat="JSF" desc="All letters contained in function and variable names will be composed entirely of lowercase letters" id="JSF-051" origId="NAMING-44" sev="3" total="19"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="Header files will always have a file name extension of &quot;.h&quot;" id="JSF-053" origId="NAMING-41" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Implementation files will always have a file name extension of &quot;.cpp&quot;" id="JSF-054" origId="NAMING-49" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="JSF" desc="The public section of a class will be declared before the protected section and before the private section" id="JSF-057_a" origId="CODSTA-CPP-46" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="The protected section of a class will be declared before the private section" id="JSF-057_b" origId="CODSTA-CPP-47" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="When declaring functions with more than 2 parameters, the leading parenthesis and the first argument are to be written on the same line as the function name, each additional argument will be written on a separate line" id="JSF-058" origId="FORMAT-38" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="22;" authUrg="0;" cat="JSF" desc="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" id="JSF-060_a" origId="FORMAT-42" sev="3" total="22"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="JSF" desc="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" id="JSF-060_b" origId="FORMAT-43" sev="3" total="15"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Braces (&quot;{}&quot;) which enclose a block will not have an empty line after &quot;{&quot; nor before &quot;}&quot;" id="JSF-060_c" origId="FORMAT-44" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="22;" authUrg="0;" cat="JSF" desc="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" id="JSF-061" origId="FORMAT-42" sev="3" total="22"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="JSF" desc="The dereference operator '*' and the address-of operator '&amp;' will be directly connected with the type-specifier" id="JSF-062" origId="FORMAT-32" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no white space following '.' or '->' operator" id="JSF-063_a" origId="FORMAT-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no white space preceding '.' or '->' operator" id="JSF-063_b" origId="FORMAT-18" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no space between a unary operator '!' or '~' and its operand" id="JSF-063_c" origId="FORMAT-21" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no space between a increment/decrement operator (++/--) and its operand" id="JSF-063_d" origId="FORMAT-22" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no space between a unary operator '&amp;', '*', '+', '-' and its operand" id="JSF-063_e" origId="FORMAT-45" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There should be no space between an increment/decrement operator (++/--) and its operand in macro definition" id="JSF-063_f" origId="FORMAT-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="A member function that does not affect the state of an object will be declared const" id="JSF-069" origId="CODSTA-CPP-54" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Initialization of nonstatic class members will be performed through the member initialization list rather than through assignment in the body of a constructor" id="JSF-074" origId="INIT-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="When two operators are opposites (such as == and !=), both will be defined" id="JSF-085" origId="CODSTA-CPP-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="When one of opposite operators (== and !=) is defined, the other should be defined too and one will be defined in terms of the other" id="JSF-085_a" origId="CODSTA-CPP-86" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Namespaces will not be nested more than two levels deep" id="JSF-099" origId="CODSTA-CPP-57" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All partial and explicit specializations for a template should be declared in the same file as the declaration of their primary template" id="JSF-104" origId="TEMPL-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions with more than 7 arguments will not be used" id="JSF-110" origId="METRICS-27" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions will have a single exit point" id="JSF-113" origId="MISRA2004-14_7" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="If a function returns error information, then that error information will be tested" id="JSF-115" origId="MISRA2004-16_10" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="21;" authUrg="0;" cat="JSF" desc="Each variable declaration will be commented" id="JSF-132_a" origId="COMMENT-05" sev="3" total="21"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Each typedef will be commented" id="JSF-132_b" origId="COMMENT-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Each enumeration value will be commented" id="JSF-132_c" origId="COMMENT-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Each structure member variable will be commented" id="JSF-132_d" origId="COMMENT-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="JSF" desc="Every source file will be documented with an introductory comment that provides information on the file" id="JSF-133_a" origId="COMMENT-03" sev="3" total="6"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="JSF" desc="Every source file will contain copyright information" id="JSF-133_b" origId="COMMENT-02" sev="3" total="6"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="External objects will not be declared in more than one file" id="JSF-139" origId="MISRA-027" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="External objects will not be declared in implementation files" id="JSF-139_b" origId="MISRA-027_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A class, structure, or enumeration will not be declared in the definition of its type" id="JSF-141" origId="CODSTA-CPP-56" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Variables will not be introduced until they can be initialized with meaningful values" id="JSF-143" origId="OPT-26" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid unused local variables" id="JSF-143_a" origId="OPT-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Hexadecimal constants will be represented using all uppercase letters" id="JSF-150" origId="CODSTA-50" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="1;" cat="JSF" desc="Numeric values in code will not be used; symbolic values will be used instead" id="JSF-151" origId="CODSTA-26" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The sizeof operator will not be used on expressions that contain side effects" id="JSF-166" origId="MISRA2004-12_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The sizeof operator will not be used on expressions that contain side effects" id="JSF-166_b" origId="MISRA2004-12_3_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The sizeof operator will not be used on expressions that contain side effects" id="JSF-166_c" origId="MISRA2004-12_3_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The implementation of integer division shall be documented" id="JSF-167" origId="MISRA-041" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A typedef will be used to simplify program syntax when declaring function pointers" id="JSF-176" origId="CODSTA-34" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Redundant explicit casts will not be used" id="JSF-181_a" origId="OPT-29" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid explicit cast from derived to a base class" id="JSF-181_b" origId="OOP-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Labels will not be used, except in switch statements" id="JSF-188" origId="MISRA-055" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All 'if...else if' constructs will contain either a final else clause or a comment indicating why a final else clause is not necessary" id="JSF-192" origId="CODSTA-98" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A switch expression will not represent a Boolean value" id="JSF-195" origId="MISRA2004-15_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Every switch statement will have at least two cases and a potential default" id="JSF-196" origId="CODSTA-54" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter" id="JSF-198" origId="CODSTA-52" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop" id="JSF-199" origId="CODSTA-53" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Null initialize or increment expressions in for loops will not be used; a while loop will be used instead" id="JSF-200" origId="CODSTA-49" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="JSF" desc="Unencapsulated global data will be avoided" id="JSF-207" origId="CODSTA-CPP-82" sev="3" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A file should directly include only headers containing declarations and definitions needed to a compilation" id="JSF-037" origId="OPT-41" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="160;" authUrg="0;" cat="JSF" desc="Tabs should be avoided" id="JSF-043" origId="FORMAT-01" sev="4" total="160"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Public data should only be used in structs, not in classes" id="JSF-067_a" origId="OOP-18" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Protected data should only be used in structs, not in classes" id="JSF-067_b" origId="OOP-19" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid using the friend mechanism" id="JSF-070" origId="OOP-11" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Hierarchies should be based on abstract classes" id="JSF-087" origId="OOP-40" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="JSF" desc="Every nonlocal name, except main(), should be placed in some namespace" id="JSF-098" origId="CODSTA-CPP-36" sev="4" total="17"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write namespace usings in a header file or before an #include" id="JSF-100" origId="CODSTA-CPP-39" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="In a class template with a dependent base, any name that may be found in that dependent base should be referred to using a qualifier" id="JSF-105" origId="TEMPL-12" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A function definition should not be placed in a class specification" id="JSF-109" origId="CODSTA-CPP-32" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Dereferenced local pointer initialized by new in function scope should not be returned" id="JSF-112" origId="MRM-23" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="JSF-115_a" origId="CODSTA-CPP-58" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Built-in-types should be passed by value unless you are modifying them" id="JSF-116" origId="CODSTA-36" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="JSF" desc="Arguments should be passed by reference" id="JSF-117" origId="OPT-14" sev="4" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An object should be passed as const reference if the function should not change the value of the object" id="JSF-117.1" origId="CODSTA-CPP-43" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor" id="JSF-117_b" origId="PB-23" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="JSF" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="JSF-118" origId="MISRA2004-16_7" sev="4" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="JSF-118_b" origId="MISRA2004-16_7_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Only functions with 1 or 2 statements should be considered candidates for inline functions" id="JSF-121" origId="OPT-25" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Trivial accessor and mutator functions should be inlined" id="JSF-122" origId="OPT-23" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Classes which have only getters/setters (accessors/mutators) are not allowed" id="JSF-123" origId="CODSTA-CPP-81" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Trivial forwarding functions should be inlined" id="JSF-124" origId="OPT-24" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="JSF" desc="Pass and return by reference when possible" id="JSF-125_a" origId="OPT-14" sev="4" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="22;" authUrg="2;" cat="JSF" desc="Document functions in comments that precede function definitions" id="JSF-134" origId="COMMENT-04" sev="4" total="22"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="Document functions in comments that precede function declarations" id="JSF-134_b" origId="COMMENT-04_b" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Objects should be defined at block scope if they are only accessed from within a single function" id="JSF-136_a" origId="MISRA2004-8_7" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Declarations of local variables should be at the smallest feasible scope" id="JSF-136_b" origId="OPT-01" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="JSF" desc="All declarations at file scope should be static where possible" id="JSF-137" origId="MISRA-023" sev="4" total="16"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Pointers to pointers should be avoided" id="JSF-169" origId="CODSTA-05" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="User-defined conversion functions should be avoided" id="JSF-177" origId="CODSTA-CPP-05" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="Constructors allowing for conversion should be made explicit" id="JSF-177_b" origId="CODSTA-CPP-04" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="Every possible measure should be taken to avoid type casting" id="JSF-183" origId="CODSTA-31" sev="4" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid using static_cast on pointers" id="JSF-183_a" origId="CODSTA-CPP-34" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid using reinterpret_cast" id="JSF-183_b" origId="CODSTA-CPP-09" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Pointer arithmetic will not be used" id="JSF-215" origId="MISRA-101" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Consider using op= instead of stand-alone op" id="JSF-125_b" origId="OPT-19" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.metrics" authTot="1;" authUrg="0;" cat="METRIC" desc="Physical Lines in Files" id="METRIC.NOPLIF" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of blocks of code in a function" id="METRICS-03" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of function calls within function" id="METRICS-04" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Class inheritance level" id="METRICS-05" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of data member(s) per class should not exceed 15" id="METRICS-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of methods per class" id="METRICS-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of parameter(s) per method should not exceed 10" id="METRICS-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of private data member(s) per class" id="METRICS-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of private methods per class" id="METRICS-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of protected data member(s) per class" id="METRICS-11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of protected methods per class" id="METRICS-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of public data member(s) per class" id="METRICS-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of public methods per class" id="METRICS-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid functions with more than 5 parameters" id="METRICS-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Macros should not use more than 5 parameters" id="METRICS-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Cyclomatic Complexity limit of 10" id="METRICS-18" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="19;" authUrg="0;" cat="METRICS" desc="The percentage of comment lines versus the total number of module lines should be between 20 and 60" id="METRICS-19" sev="3" total="19"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid too long functions (declarations and statements)" id="METRICS-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid too long functions (blocks)" id="METRICS-21" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid functions with over 75 lines of code" id="METRICS-22" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Nested block depth should not be higher than 5" id="METRICS-23" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs)" id="METRICS-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="METRICS" desc="Source lines will be kept to a length of 120 characters or less" id="METRICS-26" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Functions with more than 7 parameters will not be used" id="METRICS-27" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Cyclomatic Complexity limit of 20" id="METRICS-28" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="No function should be longer than 60 lines of code" id="METRICS-30" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="METRICS" desc="The assertion density of the code should average to a minimum of two assertions per function" id="METRICS-31" sev="3" total="6"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="All functions with more than 20 lines should contain at least 2 assertions" id="METRICS-32" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="A global function should not be called from more than 5 different functions" id="METRICS-36" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="A function should not call more than 7 different functions" id="METRICS-37" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="The number of statements within function should be in range 1 - 50" id="METRICS-38" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="The value of VOCF metric for a function should not be higher than 4" id="METRICS-39" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Statements within function should not be nested deeper than 4 levels" id="METRICS-40" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="The number of blocks of comments before and inside function to the number of statements in function should be > 0.2" id="METRICS-41" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Report the value of Halstead's delivered bugs (B) for a function" id="METRICS-43" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid functions with over 50 lines" id="METRICS-01" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid switch statements with many cases" id="METRICS-02" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid structs, unions, or classes with more than 20 fields" id="METRICS-17" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid source files that are longer than 500 lines" id="METRICS-24" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="22;" authUrg="0;" cat="METRICS" desc="Report Cyclomatic Complexity" id="METRICS-29" sev="5" total="22"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="22;" authUrg="0;" cat="METRICS" desc="Report Essential Complexity" id="METRICS-33" sev="5" total="22"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Essential Complexity limit of 4" id="METRICS-34" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Essential Complexity limit of 10" id="METRICS-35" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Essential Complexity limit of 1" id="METRICS-42" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Only use characters defined in the ISO C standard" id="MISRA-005" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Values of character types shall be restricted to a defined and documented subset of ISO 10646-1" id="MISRA-006" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use wide string literals" id="MISRA-008" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="28;" authUrg="0;" cat="MISRA" desc="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" id="MISRA-013" sev="3" total="28"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Explicitly declare 'char' type as signed or unsigned" id="MISRA-014" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The underlying bit representations of floating point numbers shall not be used" id="MISRA-016" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All functions shall be declared before use" id="MISRA-020" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Identifiers shall not simultaneously have both internal and external linkage in the same translation unit" id="MISRA-024" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="External object should not be declared in more than one file" id="MISRA-027" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="External objects should not be declared in implementation files" id="MISRA-027_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The use of a tag shall agree with its declaration" id="MISRA-029" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All automatic variables shall have been assigned a value before being used" id="MISRA-030" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="MISRA-038" origId="MISRA2004-12_8" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The comma operator shall not be used, except in the control expression of a for loop" id="MISRA-042" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="MISRA-043" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid mixing arithmetic of different precisions in the same expression" id="MISRA-043_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="MISRA-043_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="MISRA-043_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Redundant explicit cast to the same type is not allowed" id="MISRA-044" origId="OPT-29" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use the volatile keyword" id="MISRA-046_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Assignment statements should not be nested within other assignment statements" id="MISRA-046_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid possible integer overflow in expressions in which the result is cast to a wider integer type" id="MISRA-048_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Don't cast the dividend of two integers to a floating-point type" id="MISRA-048_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" id="MISRA-048_c" origId="PB-65" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid unintentionally discarding the remainder of integer division" id="MISRA-048_d" origId="PB-15_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="A null statement shall only occur on a line by itself" id="MISRA-054" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use the break statement" id="MISRA-058" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use floating point variables as loop counters" id="MISRA-065" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use functions with variable numbers of arguments" id="MISRA-069" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" id="MISRA-071_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Functions shall always have visible prototype at the function call" id="MISRA-071_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Provide none or all identifiers for function arguments" id="MISRA-073" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Provide expression for return statement of non-void functions" id="MISRA-083" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid expressions in return statements of void functions" id="MISRA-084" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRA-089" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA" desc="Enclose in parentheses whole definition of a function-like macro" id="MISRA-096" sev="3" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use only non-ambiguous forms of defined pre-processor operator" id="MISRA-100" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Pointer arithmetic should not be used" id="MISRA-101" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use non-constant pointers to functions" id="MISRA-104" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All the functions pointed to by a single pointer to function shall be identical in the number and type of parameters and the return type" id="MISRA-105" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The NULL pointer shall not be dereferenced" id="MISRA-107_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The NULL pointer shall not be dereferenced" id="MISRA-107_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All members of structure or union should be fully specified" id="MISRA-108" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Unions shall not be used to access the sub-parts of larger data structure" id="MISRA-110" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All the members of a structure (or class/union) shall be named" id="MISRA-113" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Standard library function names shall not be reused" id="MISRA-115" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The 'setlocale' function should not be used" id="MISRA-121_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not include &lt;locale.h> header" id="MISRA-121_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="MISRA" desc="Objects or functions with external linkage shall be declared in a header file" id="MISRA-023" sev="4" total="16"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Provisions should be made for appropriate run-time checking" id="MISRA-004_a" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Provisions should be made for appropriate run-time checking" id="MISRA-004_b" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use type suffix for numeric constants" id="MISRA-018_a" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use type suffix for numeric constants" id="MISRA-018_b" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use type suffix for numeric constants" id="MISRA-018_c" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use type suffix for numeric constants" id="MISRA-018_d" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="MISRA" desc="Declare objects at function scope" id="MISRA-022" sev="5" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The 'register' storage class specifier shall not be used" id="MISRA-028" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Document integer division" id="MISRA-041" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="MISRA-051" origId="PB-73" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use labels" id="MISRA-055" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRA2004-12_2_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="20;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions between signed and unsigned integer types" id="MISRA2004-10_1_a" sev="3" total="20"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2004" desc="There shall be no implicit conversions from integral to floating type" id="MISRA2004-10_1_b" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of complex expressions" id="MISRA2004-10_1_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions from wider to narrower types" id="MISRA2004-10_1_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of function return expressions" id="MISRA2004-10_1_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of complex expressions" id="MISRA2004-10_1_f" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of function arguments" id="MISRA2004-10_1_g" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of complex expressions" id="MISRA2004-10_1_i" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions from floating to integral type" id="MISRA2004-10_2_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions from wider to narrower floating type" id="MISRA2004-10_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions from narrower to wider floating type" id="MISRA2004-10_2_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="MISRA2004-10_2_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" id="MISRA2004-10_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The value of a complex expression of floating type should not be cast to a wider floating type" id="MISRA2004-10_4" origId="CODSTA-198" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The value of a complex expression of floating type should not be cast to an integer type" id="MISRA2004-10_4_b" origId="CODSTA-198_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="If the bitwise operators ~ and &lt;&lt; are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" id="MISRA2004-10_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Conversions shall not be performed between a pointer to a function and any type other than an integral type" id="MISRA2004-11_1" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void" id="MISRA2004-11_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void" id="MISRA2004-11_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void" id="MISRA2004-11_2_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A cast should not convert a pointer type to an integral type" id="MISRA2004-11_3_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A cast should not convert an integral type to a pointer type" id="MISRA2004-11_3_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A cast should not be performed between a pointer to object type and a different pointer to object type" id="MISRA2004-11_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="MISRA2004-11_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The comma operator shall not be used" id="MISRA2004-12_10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The underlying bit representations of floating-point values shall not be used" id="MISRA2004-12_12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" id="MISRA2004-12_13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Use parenthesis for the right-hand operand of an assignment operator when it contains an assignment expression" id="MISRA2004-12_1_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="MISRA2004-12_1_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Use parentheses unless all operators in the expression are the same" id="MISRA2004-12_1_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2004-12_2_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRA2004-12_2_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRA2004-12_2_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRA2004-12_2_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not use more than one volatile between two adjacent sequence points" id="MISRA2004-12_2_f" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRA2004-12_2_g" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="MISRA2004-12_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="MISRA2004-12_3_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="MISRA2004-12_3_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="MISRA2004-12_4_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The operands of a logical &amp;&amp; or || shall be primary-expressions" id="MISRA2004-12_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2004" desc="The operands of logical operators (&amp;&amp;, || and !) should be effectively Boolean" id="MISRA2004-12_6_a" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Expressions that are effectively Boolean should not be used as operands to operators other than (&amp;&amp;, ||, !, =, ==, !=, ?:)" id="MISRA2004-12_6_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Bitwise operators shall not be applied to operands whose underlying type is signed" id="MISRA2004-12_7" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="MISRA2004-12_8" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="MISRA2004-12_9" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Assignment operators shall not be used in expressions that yield a Boolean value" id="MISRA2004-13_1" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" id="MISRA2004-13_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Floating-point expressions shall not be tested for equality or inequality" id="MISRA2004-13_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The controlling expression of a for statement shall not contain any objects of floating type" id="MISRA2004-13_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The three expressions of a for statement shall be concerned only with loop control" id="MISRA2004-13_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not modify for loop counter within a body of the loop" id="MISRA2004-13_6" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_aa" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ab" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ac" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ad" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ae" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_af" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ag" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ah" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ai" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_aj" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ak" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_j" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_k" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_l" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_m" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_n" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_s" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_t" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_u" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_v" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_w" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_x" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_y" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_z" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="MISRA2004-14_10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code in &quot;else&quot; block" id="MISRA2004-14_1_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute" id="MISRA2004-14_1_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="MISRA2004-14_1_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code in switch statement" id="MISRA2004-14_1_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code in 'for' loop" id="MISRA2004-14_1_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="MISRA2004-14_1_f" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="MISRA2004-14_1_g" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRA2004-14_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A null statement shall occur on a line by itself or be followed by a comment" id="MISRA2004-14_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The goto statement shall not be used" id="MISRA2004-14_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The continue statement shall not be used" id="MISRA2004-14_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="For any iteration statement there shall be at most one break statement used for loop termination" id="MISRA2004-14_6" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A function shall have a single point of exit at the end of the function" id="MISRA2004-14_7" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="MISRA2004-14_8" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="'if' and 'else' should be followed by a compound statement" id="MISRA2004-14_9" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A break statement should be placed only at the end of switch clause" id="MISRA2004-15_0_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="MISRA2004-15_0_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRA2004-15_1" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRA2004-15_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRA2004-15_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The final clause of a switch statement shall be the default clause" id="MISRA2004-15_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRA2004-15_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRA2004-15_4_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Every switch statement shall have at least one case clause" id="MISRA2004-15_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Functions shall not be defined with a variable number of arguments" id="MISRA2004-16_1" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2004" desc="If a function returns error information, then that error information shall be tested" id="MISRA2004-16_10" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Functions shall not call themselves, either directly or indirectly" id="MISRA2004-16_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Identifiers shall be given for all of the parameters in a function prototype declaration" id="MISRA2004-16_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The identifiers used in the declaration and definition of a function shall be identical" id="MISRA2004-16_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Functions with no parameters shall be declared with parameter type void" id="MISRA2004-16_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The number of arguments passed to a function shall match the number of parameters" id="MISRA2004-16_6" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2004" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="MISRA2004-16_7" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRA2004-16_7_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRA2004-16_8" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="MISRA2004-16_8_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2004" desc="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" id="MISRA2004-16_9" sev="3" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not apply arithmetic to pointers that don't address an array or array element" id="MISRA2004-17_1" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Pointer subtraction shall only be applied to pointers that address elements of the same array" id="MISRA2004-17_2" origId="CODSTA-13_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc=">, >=, &lt;, &lt;= shall not be applied to pointer types except where they point to the same array" id="MISRA2004-17_3" origId="CODSTA-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2004" desc="Array indexing shall be the only allowed form of pointer arithmetic" id="MISRA2004-17_4" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The declaration of objects should contain no more than 2 levels of pointer indirection" id="MISRA2004-17_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRA2004-17_6_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2004-17_6_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All structure and union types shall be complete at the end of a translation unit" id="MISRA2004-18_1" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="An object shall not be assigned to an overlapping object" id="MISRA2004-18_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="An object shall not be assigned to an overlapping object" id="MISRA2004-18_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Unions shall not be used" id="MISRA2004-18_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="#include statements in a file should only be preceded by other preprocessor directives or comments" id="MISRA2004-19_1" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2004" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="MISRA2004-19_10" sev="3" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="MISRA2004-19_11_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be at most one occurrence of the # or ## preprocessor operators in a single macro definition" id="MISRA2004-19_12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The # and ## preprocessor operators should not be used" id="MISRA2004-19_13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The defined preprocessor operator shall only be used in one of the two standard forms" id="MISRA2004-19_14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Precautions shall be taken in order to prevent the contents of a header file being included twice" id="MISRA2004-19_15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" id="MISRA2004-19_16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="MISRA2004-19_17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Non-standard characters should not occur in header file names in #include directives" id="MISRA2004-19_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRA2004-19_3" origId="MISRA-089" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid keywords and basic types in macros" id="MISRA2004-19_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Macros shall not be #define'd or #undef'd within a block" id="MISRA2004-19_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="#undef shall not be used" id="MISRA2004-19_6" origId="PREPROC-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2004" desc="A function should be used in preference to a function-like macro" id="MISRA2004-19_7" sev="3" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A function-like macro shall not be invoked without all of its arguments" id="MISRA2004-19_8" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="MISRA2004-19_9" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2004" desc="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" id="MISRA2004-20_10" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRA2004-20_11" origId="PB-75" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRA2004-20_11_b" origId="PB-75_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRA2004-20_11_c" origId="SECURITY-52" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used" id="MISRA2004-20_11_d" origId="SECURITY-48_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The standard header files &lt;time.h> or &lt;ctime> shall not be used" id="MISRA2004-20_12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not #define or #undef identifiers with names which start with underscore" id="MISRA2004-20_1_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not redefine reserved words" id="MISRA2004-20_1_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="MISRA2004-20_1_c" origId="CODSTA-92_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not #define nor #undef identifier 'defined'" id="MISRA2004-20_1_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The names of standard library macros, objects and functions shall not be reused" id="MISRA2004-20_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The names of standard library macros, objects and functions shall not be reused (C90)" id="MISRA2004-20_2_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The names of standard library macros, objects and functions shall not be reused (C99)" id="MISRA2004-20_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The validity of values passed to library functions shall be checked" id="MISRA2004-20_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2004" desc="Dynamic heap memory allocation shall not be used" id="MISRA2004-20_4" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The error indicator 'errno' shall not be used" id="MISRA2004-20_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The macro offsetof, in library stddef.h, shall not be used" id="MISRA2004-20_6" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The facilities provided by &lt;setjmp.h> should not be used" id="MISRA2004-20_7" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The standard header files &lt;setjmp.h> or &lt;csetjmp> shall not be used" id="MISRA2004-20_7_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The standard header files &lt;signal.h> or &lt;csignal> shall not be used" id="MISRA2004-20_8" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="MISRA2004-20_8_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2004" desc="The input/output library stdio.h shall not be used" id="MISRA2004-20_9" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Assembly language shall be encapsulated and isolated" id="MISRA2004-2_1" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Source code shall only use /* ... */ style comments" id="MISRA2004-2_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The character sequence /* shall not be used within a C-style comment" id="MISRA2004-2_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All uses of the #pragma directive shall be documented and explained" id="MISRA2004-3_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not mix bit-fields and other data within the same structure" id="MISRA2004-3_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Only those escape sequences that are defined in the ISO C standard shall be used" id="MISRA2004-4_1" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Trigraphs shall not be used" id="MISRA2004-4_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="User-specified C external identifiers should differ in the first 31 characters" id="MISRA2004-5_1_a" origId="PORT-35_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="User-specified C internal identifiers should differ from external identifiers in the first 31 characters" id="MISRA2004-5_1_b" origId="PORT-35_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="User-specified C internal identifiers declared in the same scope should differ in the first 31 characters" id="MISRA2004-5_1_c" origId="PORT-35_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="MISRA2004-5_2_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="MISRA2004-5_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not reuse typedef names" id="MISRA2004-5_3_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not reuse typedef names as a typedef name" id="MISRA2004-5_3_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A tag name shall not be reused for other purpose within the program" id="MISRA2004-5_4_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A tag name shall not be reused to define a different tag" id="MISRA2004-5_4_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The name of typedef should not be the same as the name of type that is typedef'd" id="MISRA2004-5_4_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The plain char type shall be used only for the storage and use of character values" id="MISRA2004-6_1" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="signed and unsigned char type shall be used only for the storage and use of numeric values" id="MISRA2004-6_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="typedefs to basic types should contain some digits in their name" id="MISRA2004-6_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="25;" authUrg="0;" cat="MISRA2004" desc="typedefs should be used in place of the basic types" id="MISRA2004-6_3_b" sev="3" total="25"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Bit fields shall only be defined to be of type unsigned int or signed int" id="MISRA2004-6_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="MISRA2004-6_5" origId="CODSTA-71" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Unnamed bit-fields with signed integer type shall have a length of more than one bit" id="MISRA2004-6_5_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Octal constants (other than zero) shall not be used" id="MISRA2004-7_1_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Octal escape sequences shall not be used" id="MISRA2004-7_1_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" id="MISRA2004-8_11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="When an array with external linkage is declared, its size should be explicitly specified" id="MISRA2004-8_12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" id="MISRA2004-8_1_a" origId="MISRA-071_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Functions shall always have visible prototype at the function call" id="MISRA2004-8_1_b" origId="MISRA-071_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Whenever a function is declared or defined, its type shall be explicitly stated" id="MISRA2004-8_2_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Whenever an object is declared or defined, its type shall be explicitly stated" id="MISRA2004-8_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Use identical types in declaration and definition" id="MISRA2004-8_3_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Use identical types in declaration and definition" id="MISRA2004-8_3_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRA2004-8_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no definitions of objects or functions in a header file" id="MISRA2004-8_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Always declare functions at file scope" id="MISRA2004-8_6" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Objects shall be defined at block scope if they are only accessed from within a single function" id="MISRA2004-8_7" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All automatic variables shall have been assigned a value before being used" id="MISRA2004-9_1" origId="MISRA-030" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The initializer for an aggregate or union shall be enclosed in braces" id="MISRA2004-9_2" origId="INIT-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Arrays shall not be partially initialized" id="MISRA2004-9_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The non-zero initialization of structures requires an explicit initializer for each element" id="MISRA2004-9_2_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="In an enumerator list, the &quot;=&quot; construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised" id="MISRA2004-9_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Sections of code should not be &quot;commented out&quot;" id="MISRA2004-2_4" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No object or function identifier with static storage duration should be reused" id="MISRA2004-5_5_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No object or function identifier with static storage duration should be reused" id="MISRA2004-5_5_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No identifier in one name space should have the same spelling as an identifier in another name space, with the exception of structure and union member names" id="MISRA2004-5_6" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No identifier name should be reused" id="MISRA2004-5_7" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="MISRA2004" desc="Objects or functions with external linkage shall be declared in a header file" id="MISRA2004-8_10" origId="MISRA-023" sev="4" total="16"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A 'U' suffix shall be applied to all constants of unsigned type" id="MISRA2004-10_6" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="MISRA2004-12_1_b" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No parentheses are required for the operand of a unary operator" id="MISRA2004-12_1_c" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="MISRA2004-12_1_f" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Every defined function with internal linkage shall be used" id="MISRA2008-0_1_10" origId="OPT-30" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="5;" authUrg="0;" cat="MISRA2008" desc="Every defined function with external linkage shall be used" id="MISRA2008-0_1_10_b" origId="GLOBAL-UNUSEDFUNC" sev="2" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="There shall be no unused parameters (named or unnamed) in nonvirtual functions" id="MISRA2008-0_1_11" origId="OPT-31" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no unused parameters (named or unnamed) in the set of parameters for a virtual function and all the functions that override it" id="MISRA2008-0_1_12" origId="GLOBAL-UNUSEDVIRTPARAM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in 'else' block" id="MISRA2008-0_1_1_a" origId="MISRA2004-14_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="MISRA2008-0_1_1_b" origId="MISRA2004-14_1_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in 'if/else/while/for' block" id="MISRA2008-0_1_1_c" origId="MISRA2004-14_1_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in switch statement" id="MISRA2008-0_1_1_d" origId="MISRA2004-14_1_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in 'for' loop" id="MISRA2008-0_1_1_e" origId="MISRA2004-14_1_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code after 'if' or 'switch' statement outside 'for/while/catch' block" id="MISRA2008-0_1_1_f" origId="MISRA2004-14_1_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code after 'if' or 'switch' statement inside 'while/for/catch' block" id="MISRA2008-0_1_1_g" origId="MISRA2004-14_1_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_a" origId="MISRA2004-13_7_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_aa" origId="BD-PB-CC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_b" origId="MISRA2004-13_7_aa" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_c" origId="MISRA2004-13_7_ab" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_d" origId="MISRA2004-13_7_ac" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_e" origId="MISRA2004-13_7_ad" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_f" origId="MISRA2004-13_7_ae" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_g" origId="MISRA2004-13_7_af" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_h" origId="MISRA2004-13_7_ag" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_i" origId="MISRA2004-13_7_ah" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_j" origId="MISRA2004-13_7_ai" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_k" origId="MISRA2004-13_7_aj" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_l" origId="MISRA2004-13_7_ak" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_m" origId="MISRA2004-13_7_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_n" origId="MISRA2004-13_7_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_o" origId="MISRA2004-13_7_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_p" origId="MISRA2004-13_7_j" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_q" origId="MISRA2004-13_7_k" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_r" origId="MISRA2004-13_7_l" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_rz" origId="MISRA2004-13_7_z" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_s" origId="MISRA2004-13_7_m" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_sz" origId="MISRA2004-13_7_v" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_t" origId="MISRA2004-13_7_n" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_u" origId="MISRA2004-13_7_s" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_v" origId="MISRA2004-13_7_t" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_w" origId="MISRA2004-13_7_u" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_x" origId="MISRA2004-13_7_w" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_y" origId="MISRA2004-13_7_x" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_z" origId="MISRA2004-13_7_y" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unused variables" id="MISRA2008-0_1_3_a" origId="OPT-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Eliminate unused private member variables" id="MISRA2008-0_1_3_c" origId="OPT-05" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="9;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain non-volatile POD variables having only one use" id="MISRA2008-0_1_4" origId="GLOBAL-ONEUSEVAR" sev="2" total="9"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="1;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unused type declarations" id="MISRA2008-0_1_5" origId="GLOBAL-UNUSEDTYPE" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="8;" authUrg="0;" cat="MISRA2008" desc="Avoid unused values" id="MISRA2008-0_1_6" origId="BD-PB-VOVR" sev="2" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="MISRA2008-0_1_7" origId="CODSTA-CPP-58" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All functions with void return type shall have external side effect(s)" id="MISRA2008-0_1_8" origId="OPT-32" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="All functions with void return type shall have external side effect(s)" id="MISRA2008-0_1_8_b" origId="OPT-32_b" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRA2008-0_1_9" origId="MISRA2004-14_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object shall not be assigned to an overlapping object" id="MISRA2008-0_2_1_a" origId="MISRA2004-18_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object shall not be assigned to an overlapping object" id="MISRA2008-0_2_1_b" origId="PB-42" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="If a function generates error information, then that error information shall be tested" id="MISRA2008-0_3_2" origId="MISRA2004-16_10" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A base class shall only be declared virtual if it is used in a diamond hierarchy" id="MISRA2008-10_1_2" origId="GLOBAL-VIRTBASECLASS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An accessible base class shall not be both virtual and non-virtual in the same hierarchy" id="MISRA2008-10_1_3" origId="OOP-41" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy" id="MISRA2008-10_3_1" origId="OOP-44" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="Each overriding virtual function shall be declared with the virtual keyword" id="MISRA2008-10_3_2" origId="OOP-21" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" id="MISRA2008-10_3_3" origId="OOP-43" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Member data in non-POD class types shall be private" id="MISRA2008-11_0_1" origId="OOP-48" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not use dynamic type of an object under construction" id="MISRA2008-12_1_1" origId="BD-PB-VCTOR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All constructors that are callable with a single argument of fundamental type shall be declared explicit" id="MISRA2008-12_1_3" origId="OOP-45" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A copy constructor shall only initialize its base classes and the nonstatic members of the class of which it is a member" id="MISRA2008-12_8_1" origId="OOP-46" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The copy assignment operator shall be declared protected or private in an abstract class" id="MISRA2008-12_8_2" origId="OOP-42" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not declare non-member generic functions in associated namespaces" id="MISRA2008-14_5_1" origId="TEMPL-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter" id="MISRA2008-14_5_2" origId="TEMPL-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" id="MISRA2008-14_5_3" origId="TEMPL-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" id="MISRA2008-14_6_1" origId="TEMPL-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The function shall resolve to a function declared previously in the translation unit" id="MISRA2008-14_6_2" origId="TEMPL-14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All class templates, function templates, class template member functions and class template static members shall be instantiated at least one." id="MISRA2008-14_7_1" origId="GLOBAL-TEMPLNOINST" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template" id="MISRA2008-14_7_3" origId="TEMPL-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Overloaded function templates shall not be explicitly specialized" id="MISRA2008-14_8_1" origId="TEMPL-09" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Control shall not be transferred into a try or catch block using a goto or a switch statement" id="MISRA2008-15_0_3" origId="EXCEPT-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The assignment-expression of a throw statement shall not itself cause an exception to be thrown" id="MISRA2008-15_1_1" origId="EXCEPT-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="NULL shall not be thrown explicitly" id="MISRA2008-15_1_2" origId="EXCEPT-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An empty throw (throw;) shall only be used in the compound statement of a catch handler" id="MISRA2008-15_1_3" origId="EXCEPT-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Exceptions shall be raised only after start-up and before termination of the program" id="MISRA2008-15_3_1" origId="EXCEPT-08" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases" id="MISRA2008-15_3_3" origId="EXCEPT-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="MISRA2008-15_3_4_a" origId="EXCEPT-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="MISRA2008-15_3_4_b" origId="EXCEPT-18" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A class type exception shall always be caught by reference" id="MISRA2008-15_3_5" origId="EXCEPT-15" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="MISRA2008-15_3_6" origId="EXCEPT-17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last" id="MISRA2008-15_3_7" origId="EXCEPT-24" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" id="MISRA2008-15_4_1" origId="GLOBAL-EXCSPECDECL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A class destructor shall not exit with an exception" id="MISRA2008-15_5_1" origId="EXCEPT-03" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="MISRA2008-15_5_2" origId="EXCEPT-14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid throwing exceptions from functions that are declared not to throw" id="MISRA2008-15_5_2_b" origId="BD-PB-NOEXCEPT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="MISRA2008-15_5_3" origId="PB-44" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="MISRA2008-15_5_3_b" origId="EXCEPT-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not throw from within destructor" id="MISRA2008-15_5_3_c" origId="EXCEPT-03" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="MISRA2008-15_5_3_d" origId="EXCEPT-06" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An empty throw (throw;) shall only be used in the compound-statement of a catch handler" id="MISRA2008-15_5_3_e" origId="EXCEPT-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Exceptions shall be raised only after start-up and before termination of the program" id="MISRA2008-15_5_3_f" origId="EXCEPT-08" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="MISRA2008-15_5_3_g" origId="EXCEPT-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="MISRA2008-15_5_3_h" origId="EXCEPT-14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="MISRA2008-15_5_3_i" origId="EXCEPT-18" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Always catch exceptions" id="MISRA2008-15_5_3_j" origId="BD-PB-EXCEPT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Properly define exit handlers" id="MISRA2008-15_5_3_k" origId="BD-PB-EXITHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid throwing exceptions from functions that are declared not to throw" id="MISRA2008-15_5_3_l" origId="BD-PB-NOEXCEPT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#include directives in a file shall only be preceded by other preprocessor directives or comments" id="MISRA2008-16_0_1" origId="MISRA2004-19_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Macros shall only be #define'd or #undef'd in the global namespace" id="MISRA2008-16_0_2" origId="MISRA2004-19_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#undef shall not be used" id="MISRA2008-16_0_3" origId="PREPROC-25" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2008" desc="Function-like macros shall not be defined" id="MISRA2008-16_0_4" origId="MISRA2004-19_7" sev="2" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="MISRA2008-16_0_5" origId="MISRA2004-19_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2008" desc="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" id="MISRA2008-16_0_6" origId="MISRA2004-19_10" sev="2" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="MISRA2008-16_0_7_b" origId="MISRA2004-19_11_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If the # token appears as the first token on a line, then it shall be immediately followed by a preprocessing token" id="MISRA2008-16_0_8" origId="MISRA2004-19_16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The defined preprocessor operator shall only be used in one of the two standard forms" id="MISRA2008-16_1_1" origId="MISRA2004-19_14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="MISRA2008-16_1_2" origId="MISRA2004-19_17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="MISRA2008" desc="Avoid using macro definitions" id="MISRA2008-16_2_1_a" origId="PREPROC-01" sev="2" total="16"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="MISRA2008-16_2_1_b" origId="PREPROC-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="The #ifdef, #else, #elif preprocessor directives should not be used" id="MISRA2008-16_2_1_c" origId="PREPROC-11" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" id="MISRA2008-16_2_1_d" origId="PREPROC-10_b" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="MISRA2008-16_2_1_e" origId="PREPROC-10_c" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#error directive shall not be used" id="MISRA2008-16_2_1_f" origId="PREPROC-22" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The #pragma directive shall not be used" id="MISRA2008-16_2_1_g" origId="PREPROC-23" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#undef shall not be used" id="MISRA2008-16_2_1_h" origId="PREPROC-25" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="MISRA2008" desc="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" id="MISRA2008-16_2_2" origId="PREPROC-12" sev="2" total="16"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Include guards shall be provided" id="MISRA2008-16_2_3" origId="PFO-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The ', &quot;, /* or // characters shall not occur in a header file name" id="MISRA2008-16_2_4" origId="NAMING-46" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRA2008-16_2_6" origId="MISRA-089" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be at most one occurrence of the # or ## operators in a single macro definition" id="MISRA2008-16_3_1" origId="MISRA2004-19_12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_a" origId="MISRA2004-20_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_b" origId="MISRA2004-20_1_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_c" origId="CODSTA-92_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_d" origId="CODSTA-92_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_e" origId="MISRA2004-20_1_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The names of standard library macros and objects shall not be reused" id="MISRA2008-17_0_2" origId="CODSTA-92" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The names of standard library functions shall not be overridden" id="MISRA2008-17_0_3" origId="CODSTA-93" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The setjmp macro and the longjmp function shall not be used" id="MISRA2008-17_0_5" origId="MISRA2004-20_7" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The standard header file &lt;setjmp.h> shall not be used" id="MISRA2008-17_0_5_b" origId="MISRA2004-20_7_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="The C library shall not be used" id="MISRA2008-18_0_1" origId="CODSTA-CPP-59" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="The library functions atof, atoi and atol from library &lt;cstdlib> shall not be used" id="MISRA2008-18_0_2" origId="MISRA2004-20_10" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'abort' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3" origId="PB-75" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'exit' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3_b" origId="PB-75_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'getenv' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3_c" origId="SECURITY-52" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'system' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3_d" origId="SECURITY-48_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The standard header file &lt;ctime> shall not be used" id="MISRA2008-18_0_4" origId="MISRA2004-20_12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The unbounded functions of library &lt;cstring> shall not be used" id="MISRA2008-18_0_5" origId="PB-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The macro offsetof shall not be used" id="MISRA2008-18_2_1" origId="MISRA2004-20_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="Dynamic heap memory allocation shall not be used" id="MISRA2008-18_4_1" origId="MISRA2004-20_4" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The standard header file &lt;csignal> shall not be used" id="MISRA2008-18_7_1" origId="MISRA2004-20_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The signal handling facilities of &lt;csignal> shall not be used" id="MISRA2008-18_7_1_b" origId="MISRA2004-20_8_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The error indicator errno shall not be used" id="MISRA2008-19_3_1" origId="MISRA2004-20_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="The stream input/output library &lt;cstdio> shall not be used" id="MISRA2008-27_0_1" origId="MISRA2004-20_9" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="0;" cat="MISRA2008" desc="Different identifiers shall be typographically unambiguous" id="MISRA2008-2_10_1" origId="NAMING-47" sev="2" total="13"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2008-2_10_2_a" origId="MISRA2004-5_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2008-2_10_2_b" origId="MISRA2004-5_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A typedef name (including qualification, if any) shall be a unique identifier" id="MISRA2008-2_10_3" origId="GLOBAL-UNIQUETYPEDEF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A class, union or enum name (including qualification, if any) shall be a unique identifier" id="MISRA2008-2_10_4" origId="GLOBAL-UNIQUETYPE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="MISRA2008-2_10_6_a" origId="CODSTA-CPP-87_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="MISRA2008-2_10_6_b" origId="CODSTA-CPP-87_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="MISRA2008-2_10_6_c" origId="CODSTA-CPP-87_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used" id="MISRA2008-2_13_1" origId="CODSTA-CPP-60" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Octal constants (other than zero) shall not be used" id="MISRA2008-2_13_2_a" origId="MISRA2004-7_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Octal escape sequences (other than &quot;\0&quot;) shall not be used" id="MISRA2008-2_13_2_b" origId="MISRA2004-7_1_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" id="MISRA2008-2_13_3" origId="CODSTA-68" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Literal suffixes shall be upper case" id="MISRA2008-2_13_4" origId="CODSTA-51" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Narrow and wide string literals shall not be concatenated" id="MISRA2008-2_13_5" origId="PB-38" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Trigraphs shall not be used" id="MISRA2008-2_3_1" origId="MISRA2004-4_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The character sequence /* shall not be used within a C-style comment" id="MISRA2008-2_7_1" origId="MISRA2004-2_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Sections of code shall not be &quot;commented out&quot; using C-style comments" id="MISRA2008-2_7_2" origId="MISRA2004-2_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="It shall be possible to include any header file in multiple translation units without violating the One Definition Rule" id="MISRA2008-3_1_1" origId="PFO-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Functions shall not be declared at block scope" id="MISRA2008-3_1_2" origId="MISRA2004-8_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="When an array is declared, its size shall either be stated explicitly or defined implicitly by initialization" id="MISRA2008-3_1_3" origId="MISRA2004-8_12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All declarations of an object or function shall have compatible types" id="MISRA2008-3_2_1" origId="GLOBAL-COMPATDECLS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The One Definition Rule shall not be violated" id="MISRA2008-3_2_2" origId="GLOBAL-ONEDEFRULE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="MISRA2008-3_2_3" origId="GLOBAL-ONEFILEDECL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier with external linkage shall have exactly one external definition" id="MISRA2008-3_2_4" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="MISRA2008" desc="Objects or functions with external linkage shall be declared in a header file" id="MISRA2008-3_3_1" origId="MISRA-023" sev="2" total="16"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If a function has internal linkage then all re-declarations shall include the static storage class specifier" id="MISRA2008-3_3_2" origId="CODSTA-81" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" id="MISRA2008-3_4_1_a" origId="OPT-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" id="MISRA2008-3_4_1_b" origId="OPT-45" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" id="MISRA2008-3_9_1" origId="CODSTA-67" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The underlying bit representations of floating-point values shall not be used" id="MISRA2008-3_9_3" origId="MISRA2004-12_12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="NULL shall not be used as an integer value" id="MISRA2008-4_10_1" origId="CODSTA-CPP-62" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="MISRA2008-4_10_2" origId="CODSTA-CPP-63" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &amp;&amp;, ||, !, the equality operators == and !=, the unary &amp; operator, and the conditional operator" id="MISRA2008-4_5_1" origId="MISRA2004-12_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Expressions with type enum shall not be used as operands to built-in operators other than [ ], =, ==, !=, &lt;, &lt;=, >, >=, and the unary &amp; operator" id="MISRA2008-4_5_2" origId="CODSTA-70" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary &amp; operator" id="MISRA2008-4_5_3" origId="CODSTA-69" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If the bitwise operators ~ and &lt;&lt; are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" id="MISRA2008-5_0_10" origId="MISRA2004-10_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The plain char type shall only be used for the storage and use of character values" id="MISRA2008-5_0_11" origId="MISRA2004-6_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="signed char and unsigned char type shall only be used for the storage and use of numeric values" id="MISRA2008-5_0_12" origId="MISRA2004-6_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The condition of an if-statement and the condition of an iteration-statement shall have type bool" id="MISRA2008-5_0_13" origId="CODSTA-CPP-64" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The first operand of a conditional-operator shall have type bool" id="MISRA2008-5_0_14" origId="CODSTA-CPP-65" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Array indexing shall be the only form of pointer arithmetic" id="MISRA2008-5_0_15" origId="MISRA2004-17_4" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid accessing arrays out of bounds" id="MISRA2008-5_0_16_a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="MISRA2008-5_0_16_b" origId="BD-PB-PTRARR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Subtraction between pointers shall only be applied to pointers that address elements of the same array" id="MISRA2008-5_0_17" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc=">, >=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array" id="MISRA2008-5_0_18" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The declaration of objects shall contain no more than two levels of pointer indirection" id="MISRA2008-5_0_19" origId="MISRA2004-17_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_a" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_b" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_c" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_d" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_e" origId="MISRA2004-12_2_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_f" origId="MISRA2004-12_2_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_g" origId="MISRA2004-12_2_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Non-constant operands to a binary bitwise operator shall have the same underlying type" id="MISRA2008-5_0_20" origId="CODSTA-66" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="MISRA2008-5_0_21" origId="CODSTA-63" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cvalue expression shall not be implicitly converted to a different underlying type" id="MISRA2008-5_0_3_a" origId="MISRA2004-10_1_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cvalue expression shall not be implicitly converted to a different underlying type" id="MISRA2008-5_0_3_b" origId="MISRA2004-10_1_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cvalue expression shall not be implicitly converted to a different underlying type" id="MISRA2008-5_0_3_c" origId="MISRA2004-10_1_i" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="20;" authUrg="0;" cat="MISRA2008" desc="An implicit integral conversion shall not change the signedness of the underlying type" id="MISRA2008-5_0_4_a" origId="MISRA2004-10_1_a" sev="2" total="20"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no implicit floating-integral conversions" id="MISRA2008-5_0_5_a" origId="MISRA2004-10_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2008" desc="There shall be no implicit floating-integral conversions" id="MISRA2008-5_0_5_b" origId="MISRA2004-10_1_b" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="MISRA2008-5_0_6_a" origId="CODSTA-222" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="MISRA2008-5_0_6_b" origId="MISRA2004-10_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="MISRA2008-5_0_6_c" origId="MISRA2004-10_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no explicit floating-integral conversions of a cvalue expression" id="MISRA2008-5_0_7_a" origId="MISRA2004-10_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no explicit floating-integral conversions of a cvalue expression" id="MISRA2008-5_0_7_b" origId="CODSTA-198_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" id="MISRA2008-5_0_8" origId="MISRA2004-10_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" id="MISRA2008-5_0_8_b" origId="CODSTA-198" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression" id="MISRA2008-5_0_9" origId="MISRA2004-10_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The right hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="MISRA2008-5_14_1" origId="MISRA2004-12_4_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="MISRA2008-5_17_1" origId="CODSTA-CPP-91" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The comma operator shall not be used" id="MISRA2008-5_18_1" origId="MISRA2004-12_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each operand of a logical &amp;&amp; or || shall be a postfix-expression" id="MISRA2008-5_2_1" origId="CODSTA-90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The &amp;&amp; operator and the || operator shall not be overloaded" id="MISRA2008-5_2_11" origId="CODSTA-CPP-08" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The comma &quot;,&quot; operator shall not be overloaded" id="MISRA2008-5_2_11_b" origId="CODSTA-CPP-80" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier with array type passed as a function argument shall not decay to a pointer" id="MISRA2008-5_2_12" origId="PB-41" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" id="MISRA2008-5_2_2" origId="OOP-50" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="2;" cat="MISRA2008" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="MISRA2008-5_2_4" origId="CODSTA-CPP-66" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cast shall not remove any const or volatile qualification from the type of a pointer or reference" id="MISRA2008-5_2_5" origId="MISRA2004-11_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="MISRA2008-5_2_6" origId="CODSTA-62" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object with pointer type shall not be converted to an unrelated pointer type, either directly or indirectly" id="MISRA2008-5_2_7" origId="MISRA2004-11_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object with integer type or pointer to void type shall not be converted to an object with pointer type" id="MISRA2008-5_2_8" origId="CODSTA-65" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2008" desc="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" id="MISRA2008-5_3_1" origId="CODSTA-CPP-67" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="MISRA2008-5_3_2" origId="MISRA2004-12_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The unary &amp; operator shall not be overloaded" id="MISRA2008-5_3_3" origId="CODSTA-CPP-68" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Evaluation of the operand to the sizeof operator shall not contain side effects" id="MISRA2008-5_3_4" origId="MISRA2004-12_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Evaluation of the operand to the sizeof operator shall not contain side effects" id="MISRA2008-5_3_4_b" origId="MISRA2004-12_3_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Evaluation of the operand to the sizeof operator shall not contain side effects" id="MISRA2008-5_3_4_c" origId="MISRA2004-12_3_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand" id="MISRA2008-5_8_1" origId="BD-PB-BADSHIFT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Assignment operators shall not be used in sub-expressions" id="MISRA2008-6_2_1" origId="MISRA2004-13_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Floating-point expressions shall not be directly or indirectly tested for equality or inequality" id="MISRA2008-6_2_2" origId="MISRA2004-13_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character" id="MISRA2008-6_2_3" origId="MISRA2004-14_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The statement forming the body of a switch, while, do while or for statement shall be a compound statement" id="MISRA2008-6_3_1" origId="MISRA2004-14_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement" id="MISRA2008-6_4_1" origId="MISRA2004-14_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All if ... else if constructs shall be terminated with an else clause" id="MISRA2008-6_4_2" origId="MISRA2004-14_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_a" origId="MISRA2004-15_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_b" origId="CODSTA-64" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_c" origId="CODSTA-61" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_d" origId="MISRA2004-15_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_e" origId="MISRA2004-15_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRA2008-6_4_4" origId="MISRA2004-15_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="MISRA2008-6_4_5" origId="CODSTA-64" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The final clause of a switch statement shall be the default-clause" id="MISRA2008-6_4_6" origId="CODSTA-61" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The condition of a switch statement shall not have bool type" id="MISRA2008-6_4_7" origId="MISRA2004-15_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Every switch statement shall have at least one case-clause" id="MISRA2008-6_4_8" origId="MISRA2004-15_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A for loop shall contain a single loop-counter which shall not have floating type" id="MISRA2008-6_5_1" origId="CODSTA-CPP-69" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" id="MISRA2008-6_5_2" origId="CODSTA-CPP-70" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The loop-counter shall not be modified within condition or statement" id="MISRA2008-6_5_3" origId="MISRA2004-13_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop" id="MISRA2008-6_5_4" origId="CODSTA-CPP-71" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A loop-control-variable other than the loop-counter shall not be modified within condition or expression" id="MISRA2008-6_5_5" origId="CODSTA-CPP-72" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A loop-control-variable other than the loop-counter which is modified in statement within a body of the loop shall have type bool" id="MISRA2008-6_5_6" origId="CODSTA-CPP-73" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="MISRA2008-6_6_1" origId="CODSTA-78" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The goto statement shall jump to a label declared later in the same function body" id="MISRA2008-6_6_2" origId="CODSTA-77" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The continue statement shall only be used within a well-formed for loop" id="MISRA2008-6_6_3" origId="CODSTA-80" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="MISRA2008-6_6_4" origId="CODSTA-79" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A function shall have a single point of exit at the end of the function" id="MISRA2008-6_6_5" origId="MISRA2004-14_7" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Declare local variable as const whenever possible" id="MISRA2008-7_1_1" origId="CODSTA-CPP-53" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2008" desc="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" id="MISRA2008-7_1_2_a" origId="MISRA2004-16_7" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A reference parameter in a function shall be declared as reference to const if the corresponding object is not modified" id="MISRA2008-7_1_2_b" origId="CODSTA-CPP-43" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRA2008-7_1_2_c" origId="MISRA2004-16_7_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="MISRA2008-7_2_1" origId="PB-70" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="MISRA2008" desc="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" id="MISRA2008-7_3_1" origId="CODSTA-CPP-36" sev="2" total="17"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifier main shall not be used for a function other than the global function main" id="MISRA2008-7_3_2" origId="CODSTA-76" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no unnamed namespaces in header files" id="MISRA2008-7_3_3" origId="CODSTA-CPP-74" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="using-directives shall not be used" id="MISRA2008-7_3_4" origId="CODSTA-CPP-75" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier" id="MISRA2008-7_3_5" origId="CODSTA-CPP-76" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" id="MISRA2008-7_3_6" origId="CODSTA-CPP-90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Assembler instructions shall only be introduced using the asm declaration" id="MISRA2008-7_4_2" origId="CODSTA-73" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Assembly language shall be encapsulated and isolated" id="MISRA2008-7_4_3" origId="CODSTA-114" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function" id="MISRA2008-7_5_1" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2008-7_5_2_a" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2008-7_5_2_b" origId="MISRA2004-17_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference" id="MISRA2008-7_5_3" origId="PB-39" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="MISRA2008" desc="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" id="MISRA2008-8_0_1" origId="FORMAT-33" sev="2" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments" id="MISRA2008-8_3_1" origId="OOP-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Functions shall not be defined using the ellipsis notation" id="MISRA2008-8_4_1" origId="MISRA-069" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration" id="MISRA2008-8_4_2" origId="MISRA2004-16_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRA2008-8_4_3" origId="MISRA2004-16_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2008" desc="A function identifier shall either be used to call the function or it shall be preceded by '&amp;'" id="MISRA2008-8_4_4" origId="MISRA2004-16_9" sev="2" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All variables shall have a defined value before they are used" id="MISRA2008-8_5_1" origId="MISRA-030" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" id="MISRA2008-8_5_2" origId="INIT-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Arrays shall not be partially initialized" id="MISRA2008-8_5_2_b" origId="MISRA2004-9_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Structures shall not be partially initialized" id="MISRA2008-8_5_2_c" origId="MISRA2004-9_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="In an enumerator list, the = construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized" id="MISRA2008-8_5_3" origId="MISRA2004-9_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="const member functions shall not return non-const pointers or references to class-data" id="MISRA2008-9_3_1" origId="CODSTA-CPP-77" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Protected member functions shall not return non-const handles to class-data" id="MISRA2008-9_3_2_a" origId="OOP-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Public member functions shall not return non-const handles to class-data" id="MISRA2008-9_3_2_b" origId="OOP-36" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="MISRA2008-9_3_3" origId="CODSTA-CPP-78" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Unions shall not be used" id="MISRA2008-9_5_1" origId="MISRA2004-18_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Bit-fields shall be either bool type or an explicitly unsigned or signed integral type" id="MISRA2008-9_6_2" origId="CODSTA-75" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Bit-fields shall not have enum type" id="MISRA2008-9_6_3" origId="CODSTA-74" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="MISRA2008-9_6_4" origId="CODSTA-71" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Classes should not be derived from virtual bases" id="MISRA2008-10_1_1" origId="OOP-47" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All accessible entity names within a multiple inheritance hierarchy should be unique" id="MISRA2008-10_2_1" origId="CODSTA-CPP-92" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" id="MISRA2008-12_1_2" origId="PB-43" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The viable function set for a function call should either contain no function specializations, or only contain function specializations" id="MISRA2008-14_8_2" origId="TEMPL-08" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="An exception object should not have pointer type" id="MISRA2008-15_0_2" origId="EXCEPT-09" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="MISRA2008-15_3_2" origId="EXCEPT-06" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The \ character should not occur in a header file name" id="MISRA2008-16_2_5" origId="NAMING-48" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The # and ## operators should not be used" id="MISRA2008-16_3_2" origId="MISRA2004-19_13" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifier name of a non-member object or function with static storage duration should not be reused" id="MISRA2008-2_10_5_a" origId="GLOBAL-REUSEDEXTVAR" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifier name of a non-member object or function with static storage duration should not be reused" id="MISRA2008-2_10_5_b" origId="GLOBAL-REUSEDEXTFUN" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Digraphs should not be used" id="MISRA2008-2_5_1" origId="CODSTA-48" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Sections of code should not be &quot;commented out&quot; using C++ comments" id="MISRA2008-2_7_3" origId="MISRA2004-2_4" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="28;" authUrg="0;" cat="MISRA2008" desc="typedefs that indicate size and signedness should be used in place of the basic numerical types" id="MISRA2008-3_9_2" origId="MISRA-013" sev="4" total="28"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_a" origId="MISRA2004-12_1_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_b" origId="MISRA2004-12_1_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_c" origId="MISRA2004-12_1_c" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_d" origId="MISRA2004-12_1_d" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_e" origId="MISRA2004-12_1_e" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_f" origId="MISRA2004-12_1_f" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="MISRA2008-5_19_1_a" origId="PB-66_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="MISRA2008-5_19_1_b" origId="PB-66_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The increment (++) and decrement (--) operators should not be mixed with arithmetic operators in an expression" id="MISRA2008-5_2_10" origId="CODSTA-232" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Casts from a base class to a derived class should not be performed on polymorphic types" id="MISRA2008-5_2_3" origId="OOP-49" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cast should not convert a pointer type to an integral type" id="MISRA2008-5_2_9" origId="MISRA2004-11_3_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Functions should not call themselves, either directly or indirectly" id="MISRA2008-7_5_4" origId="BD-PB-RECFUN" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid accessing arrays out of bounds" id="MISRA2008-0_3_1_a" origId="BD-PB-ARRAY" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Avoid null pointer dereferencing" id="MISRA2008-0_3_1_b" origId="BD-PB-NP" sev="5" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Avoid division by zero" id="MISRA2008-0_3_1_c" origId="BD-PB-ZERO" sev="5" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid buffer overflow due to defining incorrect format limits" id="MISRA2008-0_3_1_d" origId="BD-PB-OVERFFMT" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid overflow due to reading a not zero terminated string" id="MISRA2008-0_3_1_e" origId="BD-PB-OVERFNZT" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid overflow when reading from a buffer" id="MISRA2008-0_3_1_g" origId="BD-PB-OVERFRD" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid overflow when writing to a buffer" id="MISRA2008-0_3_1_h" origId="BD-PB-OVERFWR" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRA2008-0_3_1_i" origId="BD-PB-PTRSUB" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not compare two unrelated pointers" id="MISRA2008-0_3_1_j" origId="BD-PB-PTRCMP" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2008" desc="Use of floating-point arithmetic shall be documented" id="MISRA2008-0_4_2" origId="COMMENT-10" sev="5" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All uses of the #pragma directive shall be documented" id="MISRA2008-16_6_1" origId="MISRA2004-3_4" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All usage of assembler shall be documented" id="MISRA2008-7_4_1" origId="COMMENT-09" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Precautions shall be taken in order to prevent the contents of a header file being included more than once" id="MISRA2012-DIR-4_10" origId="PFO-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Validate values passed to library functions" id="MISRA2012-DIR-4_11" origId="BD-API-VALPARAM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2012-DIR" desc="Dynamic memory allocation shall not be used" id="MISRA2012-DIR-4_12" origId="MISRA2004-20_4" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid tainted data in array indexes" id="MISRA2012-DIR-4_14_a" origId="BD-SECURITY-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against integer overflow/underflow from tainted data" id="MISRA2012-DIR-4_14_b" origId="BD-SECURITY-TDINTOVERF" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid buffer read overflow from tainted data" id="MISRA2012-DIR-4_14_c" origId="BD-SECURITY-OVERFRD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid buffer write overflow from tainted data" id="MISRA2012-DIR-4_14_d" origId="BD-SECURITY-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against command injection" id="MISRA2012-DIR-4_14_e" origId="BD-SECURITY-TDCMD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against file name injection" id="MISRA2012-DIR-4_14_f" origId="BD-SECURITY-TDFNAMES" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against SQL injection" id="MISRA2012-DIR-4_14_g" origId="BD-SECURITY-TDSQL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Prevent buffer overflows from tainted data" id="MISRA2012-DIR-4_14_h" origId="BD-SECURITY-BUFWRITE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="MISRA2012-DIR-4_14_i" origId="BD-SECURITY-OVERFFMT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against environment injection" id="MISRA2012-DIR-4_14_j" origId="BD-SECURITY-TDENV" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid printing tainted data on the output console" id="MISRA2012-DIR-4_14_k" origId="BD-SECURITY-TDCONSOLE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Exclude unsanitized user input from format strings" id="MISRA2012-DIR-4_14_l" origId="BD-SECURITY-TDINPUT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid accessing arrays out of bounds" id="MISRA2012-DIR-4_1_a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid null pointer dereferencing" id="MISRA2012-DIR-4_1_b" origId="BD-PB-NP" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid division by zero" id="MISRA2012-DIR-4_1_c" origId="BD-PB-ZERO" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid buffer overflow due to defining incorrect format limits" id="MISRA2012-DIR-4_1_d" origId="BD-PB-OVERFFMT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid overflow due to reading a not zero terminated string" id="MISRA2012-DIR-4_1_e" origId="BD-PB-OVERFNZT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid overflow when reading from a buffer" id="MISRA2012-DIR-4_1_g" origId="BD-PB-OVERFRD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid overflow when writing to a buffer" id="MISRA2012-DIR-4_1_h" origId="BD-PB-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRA2012-DIR-4_1_i" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not compare two unrelated pointers" id="MISRA2012-DIR-4_1_j" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid wraparounds when performing arithmetic integer operations" id="MISRA2012-DIR-4_1_k" origId="BD-PB-INTWRAP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Assembly language shall be encapsulated and isolated" id="MISRA2012-DIR-4_3" origId="MISRA2004-2_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Consistently check the returned value of non-void functions" id="MISRA2012-DIR-4_7_a" origId="BD-PB-CHECKRET" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Always check the returned value of non-void function" id="MISRA2012-DIR-4_7_b" origId="BD-PB-CHECKRETGEN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-DIR" desc="All resources obtained dynamically by means of Standard Library functions shall be explicitly released" id="MISRA2012-DIR-4_13_a" origId="BD-RES-LEAKS" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not use resources that have been freed" id="MISRA2012-DIR-4_13_b" origId="BD-RES-FREE" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not free resources using invalid pointers" id="MISRA2012-DIR-4_13_c" origId="BD-RES-INVFREE" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not abandon unreleased locks" id="MISRA2012-DIR-4_13_d" origId="BD-TRS-LOCK" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid double locking" id="MISRA2012-DIR-4_13_e" origId="BD-TRS-DLOCK" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not release a lock that has not been acquired" id="MISRA2012-DIR-4_13_f" origId="BD-TRS-REVLOCK" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="All usage of assembly language should be documented" id="MISRA2012-DIR-4_2" origId="COMMENT-09" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Sections of code should not be &quot;commented out&quot;" id="MISRA2012-DIR-4_4" origId="MISRA2004-2_4" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Identifiers in the same name space with overlapping visibility should be typographically unambiguous" id="MISRA2012-DIR-4_5" origId="NAMING-50" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="typedefs to basic types should contain some digits in their name" id="MISRA2012-DIR-4_6_a" origId="MISRA2004-6_3" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="25;" authUrg="0;" cat="MISRA2012-DIR" desc="typedefs should be used in place of the basic types" id="MISRA2012-DIR-4_6_b" origId="MISRA2004-6_3_b" sev="4" total="25"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Use typedefs from stdint.h instead of declaring your own in C99 code" id="MISRA2012-DIR-4_6_c" origId="CODSTA-155" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="MISRA2012-DIR-4_8" origId="CODSTA-115" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2012-DIR" desc="A function should be used in preference to a function-like macro where they are interchangeable" id="MISRA2012-DIR-4_9" origId="MISRA2004-19_7" sev="4" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The 'sizeof' operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" id="MISRA2012-RULE-12_5" origId="CODSTA-182" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function shall not be declared implicitly" id="MISRA2012-RULE-17_3" origId="MISRA-071_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRA2012-RULE-17_4" origId="MISRA2004-16_8" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="MISRA2012-RULE-17_4_b" origId="MISRA2004-16_8_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The declaration of an array parameter shall not contain the 'static' keyword between the [ ]" id="MISRA2012-RULE-17_6" origId="CODSTA-160" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An object shall not be assigned or copied to an overlapping object" id="MISRA2012-RULE-19_1_a" origId="MISRA2004-18_2" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An object shall not be assigned or copied to an overlapping object" id="MISRA2012-RULE-19_1_b" origId="MISRA2004-18_2_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An object shall not be assigned or copied to an overlapping object" id="MISRA2012-RULE-19_1_c" origId="BD-PB-OVERLAP" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Any value passed to a function in &lt;ctype.h> shall be representable as an 'unsigned char' or be the value 'EOF'" id="MISRA2012-RULE-21_13" origId="BD-API-CTYPE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid overflow due to reading a not zero terminated string" id="MISRA2012-RULE-21_17_a" origId="BD-PB-OVERFNZT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid overflow when writing to a buffer" id="MISRA2012-RULE-21_17_b" origId="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The 'size_t' argument passed to any function in &lt;string.h> shall have an appropriate value" id="MISRA2012-RULE-21_18" origId="BD-API-STRSIZE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="MISRA2012-RULE-21_19_a" origId="CODSTA-185_a" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Strings pointed by members of the structure 'lconv' should not be modified" id="MISRA2012-RULE-21_19_b" origId="CODSTA-185_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="MISRA2012-RULE-21_20" origId="BD-PB-INVRET" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use resources that have been freed" id="MISRA2012-RULE-22_2_a" origId="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not free resources using invalid pointers" id="MISRA2012-RULE-22_2_b" origId="BD-RES-INVFREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid writing to a stream which has been opened as read only" id="MISRA2012-RULE-22_4" origId="BD-PB-WRROS" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A pointer to a FILE object shall not be dereferenced" id="MISRA2012-RULE-22_5_a" origId="CODSTA-166_a" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A pointer to a FILE object shall not be dereferenced by a library function" id="MISRA2012-RULE-22_5_b" origId="CODSTA-166_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of a pointer to a FILE shall not be used after the associated stream has been closed" id="MISRA2012-RULE-22_6" origId="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid use before initialization" id="MISRA2012-RULE-9_1" origId="BD-PB-NOTINIT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="MISRA2012-RULE-10_1_a" origId="CODSTA-161_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="MISRA2012-RULE-10_1_b" origId="CODSTA-161_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="MISRA2012-RULE-10_1_c" origId="CODSTA-161_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="MISRA2012-RULE-10_1_d" origId="CODSTA-161_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="MISRA2012-RULE-10_1_e" origId="CODSTA-161_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially signed or enum type should not be used as right hand side operand to the bitwise shifting operator" id="MISRA2012-RULE-10_1_f" origId="CODSTA-161_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="MISRA2012-RULE-10_1_g" origId="CODSTA-161_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" id="MISRA2012-RULE-10_2" origId="CODSTA-162" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="MISRA2012-RULE-10_3_a" origId="CODSTA-163_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="MISRA2012-RULE-10_3_b" origId="CODSTA-163_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="MISRA2012-RULE-10_4_a" origId="CODSTA-164_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The second and third operands of the ternary operator shall have the same essential type category" id="MISRA2012-RULE-10_4_b" origId="CODSTA-164_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="MISRA2012-RULE-10_6" origId="CODSTA-157" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="MISRA2012-RULE-10_7_a" origId="CODSTA-156_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="MISRA2012-RULE-10_7_b" origId="CODSTA-156_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of a composite expression shall not be cast to a different essential type category or a wider essential type" id="MISRA2012-RULE-10_8" origId="CODSTA-152" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Conversions shall not be performed between a pointer to a function and any other type" id="MISRA2012-RULE-11_1_a" origId="CODSTA-124_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Conversions shall not be performed between a pointer to a function and any other type" id="MISRA2012-RULE-11_1_b" origId="CODSTA-124_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="MISRA2012-RULE-11_2" origId="CODSTA-125" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A cast shall not be performed between a pointer to object type and a pointer to a different object type" id="MISRA2012-RULE-11_3" origId="CODSTA-126" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A cast shall not be performed between pointer to void and an arithmetic type" id="MISRA2012-RULE-11_6" origId="CODSTA-129_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="MISRA2012-RULE-11_7" origId="CODSTA-130" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A conversion shall not remove any 'const', 'volatile' or '_Atomic' qualification from the type accessed via a pointer or by reference" id="MISRA2012-RULE-11_8" origId="CODSTA-301" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="The macro NULL shall be the only permitted form of integer null pointer constant" id="MISRA2012-RULE-11_9_a" origId="CODSTA-CPP-63" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="25;" authUrg="0;" cat="MISRA2012-RULE" desc="The macro NULL shall be the only permitted form of integer null pointer constant" id="MISRA2012-RULE-11_9_b" origId="CODSTA-131" sev="2" total="25"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid incorrect shift operations" id="MISRA2012-RULE-12_2" origId="BD-PB-BADSHIFT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Initializer lists shall not contain persistent side effects" id="MISRA2012-RULE-13_1_a" origId="CODSTA-141_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2012-RULE-13_2_a" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRA2012-RULE-13_2_b" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRA2012-RULE-13_2_c" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRA2012-RULE-13_2_d" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRA2012-RULE-13_2_e" origId="MISRA2004-12_2_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use more than one volatile in one expression" id="MISRA2012-RULE-13_2_f" origId="MISRA2004-12_2_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRA2012-RULE-13_2_g" origId="MISRA2004-12_2_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The right hand operand of a logical &amp;&amp; or || operator shall not contain persistent side effects" id="MISRA2012-RULE-13_5" origId="MISRA2004-12_4_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The operand of the sizeof operator shall not contain any expression which has potential side effects" id="MISRA2012-RULE-13_6_a" origId="MISRA2004-12_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The operand of the sizeof operator shall not contain any expression which has potential side effects" id="MISRA2012-RULE-13_6_b" origId="MISRA2004-12_3_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The operand of the sizeof operator shall not contain any expression which has potential side effects" id="MISRA2012-RULE-13_6_c" origId="CODSTA-137" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A loop counter in a 'for' loop shall not have essentially floating type" id="MISRA2012-RULE-14_1_a" origId="CODSTA-167_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A loop counter in 'while' and 'do-while' loops shall not have essentially floating type" id="MISRA2012-RULE-14_1_b" origId="CODSTA-167_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" id="MISRA2012-RULE-14_2_a" origId="CODSTA-168" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The first clause of a 'for' loop shall be well-formed" id="MISRA2012-RULE-14_2_b" origId="CODSTA-169_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The second clause of a 'for' loop shall be well-formed" id="MISRA2012-RULE-14_2_c" origId="CODSTA-169_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The third clause of a 'for' statement shall be well-formed" id="MISRA2012-RULE-14_2_d" origId="CODSTA-169_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Controlling expressions shall not be invariant" id="MISRA2012-RULE-14_3_zc" origId="BD-PB-CC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type" id="MISRA2012-RULE-14_4" origId="MISRA2004-13_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The goto statement shall jump to a label declared later in the same function" id="MISRA2012-RULE-15_2" origId="CODSTA-77" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement" id="MISRA2012-RULE-15_3" origId="CODSTA-78" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The body of an iteration-statement or a selection-statement shall be a compound-statement" id="MISRA2012-RULE-15_6_a" origId="MISRA2004-14_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The body of an iteration-statement or a selection-statement shall be a compound-statement" id="MISRA2012-RULE-15_6_b" origId="MISRA2004-14_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All 'if ... else if' constructs shall be terminated with an 'else' statement" id="MISRA2012-RULE-15_7" origId="MISRA2004-14_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="MISRA2012-RULE-16_1_a" origId="MISRA2004-15_0_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRA2012-RULE-16_1_b" origId="MISRA2004-15_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRA2012-RULE-16_1_c" origId="MISRA2004-15_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRA2012-RULE-16_1_d" origId="MISRA2004-15_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Always provide a default branch for switch statements" id="MISRA2012-RULE-16_1_e" origId="CODSTA-35" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRA2012-RULE-16_1_f" origId="CODSTA-119" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="MISRA2012-RULE-16_1_g" origId="CODSTA-116" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Every switch statement shall have at least two switch-clauses" id="MISRA2012-RULE-16_1_h" origId="OPT-39" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRA2012-RULE-16_2" origId="MISRA2004-15_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An unconditional break statement shall terminate every switch-clause" id="MISRA2012-RULE-16_3_a" origId="MISRA2004-15_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An unconditional break statement shall terminate every switch-clause" id="MISRA2012-RULE-16_3_b" origId="MISRA2004-15_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Every 'switch' statement shall have a 'default' label" id="MISRA2012-RULE-16_4_a" origId="CODSTA-35" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRA2012-RULE-16_4_b" origId="CODSTA-119" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A default label shall appear as either the first or the last switch label of a switch statement" id="MISRA2012-RULE-16_5" origId="CODSTA-116" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Every switch statement shall have at least two switch-clauses" id="MISRA2012-RULE-16_6" origId="OPT-39" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch-expression shall not have essentially Boolean type" id="MISRA2012-RULE-16_7_a" origId="MISRA2004-15_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch-expression shall not have essentially Boolean type" id="MISRA2012-RULE-16_7_b" origId="MISRA2004-15_4_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The features of &lt;stdarg.h> shall not be used" id="MISRA2012-RULE-17_1_a" origId="CODSTA-136_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The features of &lt;stdarg.h> shall not be used" id="MISRA2012-RULE-17_1_b" origId="CODSTA-136_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Functions shall not call themselves, either directly or indirectly" id="MISRA2012-RULE-17_2" origId="MISRA2004-16_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" id="MISRA2012-RULE-17_5" origId="CODSTA-134" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="The value returned by a function having non-void return type shall be used" id="MISRA2012-RULE-17_7_a" origId="CODSTA-122_a" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value returned by a function having non-void return type shall be used" id="MISRA2012-RULE-17_7_b" origId="CODSTA-122_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid accessing arrays out of bounds" id="MISRA2012-RULE-18_1_a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid accessing arrays and pointers out of bounds" id="MISRA2012-RULE-18_1_b" origId="BD-PB-OVERFARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="MISRA2012-RULE-18_1_c" origId="BD-PB-PTRARR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Subtraction between pointers shall only be applied to pointers that address elements of the same array" id="MISRA2012-RULE-18_2" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc=">, >=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array" id="MISRA2012-RULE-18_3" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRA2012-RULE-18_6_a" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2012-RULE-18_6_b" origId="MISRA2004-17_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Flexible array members shall not be declared" id="MISRA2012-RULE-18_7" origId="CODSTA-113" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Variable-length arrays should not be used" id="MISRA2012-RULE-18_8" origId="CODSTA-112" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRA2012-RULE-1_1_a_c90" origId="CODSTA-174_a_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRA2012-RULE-1_1_a_c99" origId="CODSTA-174_a_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRA2012-RULE-1_1_b_c90" origId="CODSTA-174_b_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRA2012-RULE-1_1_b_c99" origId="CODSTA-174_b_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid division by zero" id="MISRA2012-RULE-1_3_a" origId="BD-PB-ZERO" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid use before initialization" id="MISRA2012-RULE-1_3_b" origId="BD-PB-NOTINIT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use resources that have been freed" id="MISRA2012-RULE-1_3_c" origId="BD-RES-FREE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid overflow when reading from a buffer" id="MISRA2012-RULE-1_3_d" origId="BD-PB-OVERFRD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid overflow when writing to a buffer" id="MISRA2012-RULE-1_3_e" origId="BD-PB-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2012-RULE-1_3_f" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRA2012-RULE-1_3_g" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRA2012-RULE-1_3_h" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRA2012-RULE-1_3_i" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRA2012-RULE-1_3_j" origId="MISRA2004-12_2_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use more than one volatile in one expression" id="MISRA2012-RULE-1_3_k" origId="MISRA2004-12_2_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRA2012-RULE-1_3_l" origId="MISRA2004-12_2_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function shall not return a pointer or reference to a non-static local object" id="MISRA2012-RULE-1_3_m" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The address of an object with automatic storage shall not be assigned to an object which persists after the object has ceased to exist" id="MISRA2012-RULE-1_3_n" origId="MISRA2004-17_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The left-hand operand of a right-shift operator shall not have a negative value" id="MISRA2012-RULE-1_3_o" origId="PB-29" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0'" id="MISRA2012-RULE-1_4_j" origId="CODSTA-215" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The 'rsize_t' type should not be used" id="MISRA2012-RULE-1_4_k" origId="CODSTA-212" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The 'errno_t' type should not be used" id="MISRA2012-RULE-1_4_l" origId="CODSTA-217" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S" id="MISRA2012-RULE-1_4_m" origId="CODSTA-218" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use the functions defined in Annex K of ISO/IEC 9899:2011 standard" id="MISRA2012-RULE-1_4_n" origId="CODSTA-219" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" id="MISRA2012-RULE-20_11" origId="PREPROC-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" id="MISRA2012-RULE-20_12" origId="PREPROC-17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A line whose first token is # shall be a valid preprocessing directive" id="MISRA2012-RULE-20_13" origId="MISRA2004-19_16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related" id="MISRA2012-RULE-20_14" origId="MISRA2004-19_17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The ', &amp; or \ characters and the /* or // character sequences shall not occur in a header file name" id="MISRA2012-RULE-20_2_a" origId="NAMING-46" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The ', &amp; or \ characters and the /* or // character sequences shall not occur in a header file name" id="MISRA2012-RULE-20_2_b" origId="NAMING-48" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRA2012-RULE-20_3" origId="MISRA-089" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A macro shall not be defined with the same name as a keyword" id="MISRA2012-RULE-20_4_a" origId="CODSTA-133_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A macro shall not be defined with the same name as a keyword" id="MISRA2012-RULE-20_4_b" origId="CODSTA-133_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Tokens that look like a preprocessing directive shall not occur within a macro argument" id="MISRA2012-RULE-20_6" origId="MISRA2004-19_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2012-RULE" desc="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" id="MISRA2012-RULE-20_7" origId="MISRA2004-19_10" sev="2" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" id="MISRA2012-RULE-20_8" origId="PREPROC-19" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation" id="MISRA2012-RULE-20_9_b" origId="MISRA2004-19_11_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;time.h> shall not be used" id="MISRA2012-RULE-21_10" origId="MISRA2004-20_12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;tgmath.h> shall not be used" id="MISRA2012-RULE-21_11" origId="CODSTA-108" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The features provided by &lt;fenv.h> should not be used" id="MISRA2012-RULE-21_12" origId="CODSTA-109" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The Standard Library function 'memcmp' shall not be used to compare null-terminated strings" id="MISRA2012-RULE-21_14" origId="BD-PB-MCCSTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types" id="MISRA2012-RULE-21_15" origId="CODSTA-183" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" id="MISRA2012-RULE-21_16" origId="CODSTA-184" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not #define or #undef identifiers with names which start with underscore" id="MISRA2012-RULE-21_1_a" origId="MISRA2004-20_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#define and #undef shall not be used on a reserved identifier or reserved macro name (for C90 code)" id="MISRA2012-RULE-21_1_b" origId="CODSTA-92_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#define and #undef shall not be used on a reserved identifier or reserved macro name (for C99 code)" id="MISRA2012-RULE-21_1_c" origId="CODSTA-92_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not #define nor #undef identifier 'defined'" id="MISRA2012-RULE-21_1_d" origId="MISRA2004-20_1_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library function 'system' of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_21" origId="SECURITY-48_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An identifier with name which starts with underscore shall not be declared" id="MISRA2012-RULE-21_2_a" origId="MISRA2004-20_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A reserved identifier or macro name shall not be declared (for C90 code)" id="MISRA2012-RULE-21_2_b" origId="MISRA2004-20_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A reserved identifier or macro name shall not be declared (for C99 code)" id="MISRA2012-RULE-21_2_c" origId="MISRA2004-20_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2012-RULE" desc="The memory allocation and deallocation functions of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_3" origId="MISRA2004-20_4" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;setjmp.h> shall not be used" id="MISRA2012-RULE-21_4_a" origId="MISRA2004-20_7" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;setjmp.h> shall not be used" id="MISRA2012-RULE-21_4_b" origId="MISRA2004-20_7_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;signal.h> shall not be used" id="MISRA2012-RULE-21_5_a" origId="MISRA2004-20_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;signal.h> shall not be used" id="MISRA2012-RULE-21_5_b" origId="MISRA2004-20_8_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2012-RULE" desc="The Standard Library input/output functions shall not be used" id="MISRA2012-RULE-21_6" origId="CODSTA-110" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2012-RULE" desc="The atof, atoi, atol and atoll functions of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_7" origId="MISRA2004-20_10" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library function 'abort' of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_8" origId="PB-75" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library function 'exit' of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_8_b" origId="PB-75_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library functions 'quick_exit' and '_Exit' of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_8_c" origId="PB-75_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_9" origId="CODSTA-107" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="All resources obtained dynamically by means of Standard Library functions shall be explicitly released" id="MISRA2012-RULE-22_1" origId="BD-RES-LEAKS" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of 'errno' shall only be tested when the last function to be called was an errno-setting-function" id="MISRA2012-RULE-22_10" origId="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The same file shall not be opened for read and write access at the same time on different stream" id="MISRA2012-RULE-22_3" origId="BD-PB-WRRDSTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The macro 'EOF' should be compared with the unmodified return value from the Standard Library function" id="MISRA2012-RULE-22_7" origId="BD-PB-EOFCOMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of 'errno' shall be set to zero prior to a call to an errno-setting-function" id="MISRA2012-RULE-22_8" origId="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of 'errno' shall be tested against zero after calling an errno-setting-function" id="MISRA2012-RULE-22_9" origId="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code in 'else' block" id="MISRA2012-RULE-2_1_a" origId="MISRA2004-14_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="MISRA2012-RULE-2_1_b" origId="MISRA2004-14_1_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code in 'if', 'else', 'while', 'for' block" id="MISRA2012-RULE-2_1_c" origId="MISRA2004-14_1_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code in 'switch' statement" id="MISRA2012-RULE-2_1_d" origId="MISRA2004-14_1_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code in 'for' loop" id="MISRA2012-RULE-2_1_e" origId="MISRA2004-14_1_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="MISRA2012-RULE-2_1_f" origId="MISRA2004-14_1_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code after 'if' or 'switch' statement inside 'while'/'for'/'do...while' loop" id="MISRA2012-RULE-2_1_g" origId="MISRA2004-14_1_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRA2012-RULE-2_2_a" origId="MISRA2004-14_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="8;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid unused values" id="MISRA2012-RULE-2_2_b" origId="BD-PB-VOVR" sev="2" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The character sequence /* shall not be used within a C-style comment" id="MISRA2012-RULE-3_1_a" origId="MISRA2004-2_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The character sequence // shall not be used within a C-style comment" id="MISRA2012-RULE-3_1_b" origId="COMMENT-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The character sequence /* shall not be used within a C++-style comment" id="MISRA2012-RULE-3_1_c" origId="COMMENT-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Line-splicing shall not be used in // comments" id="MISRA2012-RULE-3_2" origId="COMMENT-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Octal and hexadecimal escape sequences shall be terminated" id="MISRA2012-RULE-4_1" origId="CODSTA-117" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="External identifiers shall be distinct" id="MISRA2012-RULE-5_1" origId="CODSTA-178" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c90)" id="MISRA2012-RULE-5_2_a_c90" origId="CODSTA-179_a_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c99)" id="MISRA2012-RULE-5_2_a_c99" origId="CODSTA-179_a_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers declared in the same block scope and name space shall be distinct (c90)" id="MISRA2012-RULE-5_2_b_c90" origId="CODSTA-179_b_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers declared in the same block scope and name space shall be distinct (c99)" id="MISRA2012-RULE-5_2_b_c99" origId="CODSTA-179_b_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2012-RULE-5_3_a" origId="MISRA2004-5_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2012-RULE-5_3_b" origId="MISRA2004-5_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The name of a macro should be distinct from the names of its parameters(c90)" id="MISRA2012-RULE-5_4_a_c90" origId="CODSTA-171_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The name of a macro should be distinct from the names of its parameters(c99)" id="MISRA2012-RULE-5_4_a_c99" origId="CODSTA-171_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c90)" id="MISRA2012-RULE-5_4_b_c90" origId="CODSTA-172_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c99)" id="MISRA2012-RULE-5_4_b_c99" origId="CODSTA-172_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers shall be distinct from macro names (c90)" id="MISRA2012-RULE-5_5_c90" origId="CODSTA-170_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers shall be distinct from macro names (c99)" id="MISRA2012-RULE-5_5_c99" origId="CODSTA-170_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A typedef name shall be a unique identifier" id="MISRA2012-RULE-5_6_a" origId="GLOBAL-UNIQUETYPEDEFC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="8;" authUrg="0;" cat="MISRA2012-RULE" desc="A tag name shall be a unique identifier" id="MISRA2012-RULE-5_7_a" origId="GLOBAL-UNIQUETYPEC" sev="2" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers that define objects with external linkage shall be unique" id="MISRA2012-RULE-5_8" origId="GLOBAL-REUSEDEXTVAR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Bit-fields shall only be declared with an appropriate type" id="MISRA2012-RULE-6_1" origId="MISRA2004-6_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Single-bit named bit fields shall not be of a signed type" id="MISRA2012-RULE-6_2" origId="CODSTA-71" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Octal constants shall not be used" id="MISRA2012-RULE-7_1" origId="MISRA2004-7_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A 'u' or 'U' suffix shall be applied to all integer constants that are represented in an unsigned type" id="MISRA2012-RULE-7_2" origId="MISRA2004-10_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The lowercase character 'l' shall not be used in a literal suffix" id="MISRA2012-RULE-7_3" origId="PORT-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" id="MISRA2012-RULE-7_4" origId="PB-27" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An inline function shall be declared with the static storage class" id="MISRA2012-RULE-8_10" origId="CODSTA-120" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" id="MISRA2012-RULE-8_12" origId="PB-58" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The restrict type qualifier shall not be used" id="MISRA2012-RULE-8_14" origId="CODSTA-121" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Whenever a function is declared or defined, its type shall be explicitly stated" id="MISRA2012-RULE-8_1_a" origId="MISRA2004-8_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Whenever an object is declared or defined, its type shall be explicitly stated" id="MISRA2012-RULE-8_1_b" origId="MISRA2004-8_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers shall be given for all of the parameters in a function prototype declaration" id="MISRA2012-RULE-8_2_a" origId="MISRA2004-16_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Function types shall have named parameters" id="MISRA2012-RULE-8_2_b" origId="CODSTA-158" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Function types shall be in prototype form" id="MISRA2012-RULE-8_2_c" origId="CODSTA-159" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRA2012-RULE-8_3_a" origId="MISRA2004-8_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The identifiers used in the declaration and definition of a function shall be identical" id="MISRA2012-RULE-8_3_b" origId="MISRA2004-16_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All declarations of an object or function shall have compatible types" id="MISRA2012-RULE-8_3_c" origId="GLOBAL-COMPATDECLS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A compatible declaration shall be visible when an object or function with external linkage is defined" id="MISRA2012-RULE-8_4_a" origId="CODSTA-118" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A compatible declaration shall be visible when an object or function with external linkage is defined" id="MISRA2012-RULE-8_4_b" origId="MISRA2004-8_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An external object or function shall not have more than one non-defining declaration in translation unit" id="MISRA2012-RULE-8_5" origId="CODSTA-154" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An identifier with external linkage shall have exactly one external definition" id="MISRA2012-RULE-8_6" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage" id="MISRA2012-RULE-8_8" origId="MISRA2004-8_11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The initializer for an aggregate or union shall be enclosed in braces" id="MISRA2012-RULE-9_2" origId="INIT-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Arrays shall not be partially initialized" id="MISRA2012-RULE-9_3" origId="MISRA2004-9_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An element of an object shall not be initialized more than once" id="MISRA2012-RULE-9_4" origId="PB-69" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" id="MISRA2012-RULE-9_5" origId="CODSTA-186" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The cast operation to essentially enumeration type is not allowed" id="MISRA2012-RULE-10_5_a" origId="CODSTA-165_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not cast from or to essentially Boolean type" id="MISRA2012-RULE-10_5_b" origId="CODSTA-165_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use casts between essentially character types and essentially floating types" id="MISRA2012-RULE-10_5_c" origId="CODSTA-165_c" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A conversion should not be performed between a pointer to object and an integer type" id="MISRA2012-RULE-11_4" origId="CODSTA-127" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A conversion should not be performed from pointer to void into pointer to object" id="MISRA2012-RULE-11_5" origId="CODSTA-128" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Use parentheses to indicate the precedence of operators in expressions" id="MISRA2012-RULE-12_1_a" origId="FORMAT-50" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Parenthesis shall be used with 'sizeof' statement" id="MISRA2012-RULE-12_1_c" origId="FORMAT-25" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The comma operator should not be used" id="MISRA2012-RULE-12_3" origId="MISRA2004-12_10" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="MISRA2012-RULE-12_4_a" origId="PB-66_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="MISRA2012-RULE-12_4_b" origId="PB-66_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator" id="MISRA2012-RULE-13_3" origId="CODSTA-123" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The result of an assignment operator should not be used" id="MISRA2012-RULE-13_4" origId="CODSTA-138" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The goto statement should not be used" id="MISRA2012-RULE-15_1" origId="MISRA2004-14_4" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There should be no more than one break or goto statement used to terminate any iteration statement" id="MISRA2012-RULE-15_4" origId="CODSTA-79" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function should have a single point of exit at the end" id="MISRA2012-RULE-15_5" origId="MISRA2004-14_7" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function parameter should not be modified" id="MISRA2012-RULE-17_8" origId="CODSTA-132" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The +, -, += and -= operators should not be applied to an expression of pointer type" id="MISRA2012-RULE-18_4" origId="CODSTA-181" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Declarations should contain no more than two levels of pointer nesting" id="MISRA2012-RULE-18_5" origId="MISRA2004-17_5" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The union keyword should not be used" id="MISRA2012-RULE-19_2" origId="CODSTA-111" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#include directives should only be preceded by preprocessor directives or comments" id="MISRA2012-RULE-20_1" origId="MISRA2004-19_1" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The # and ## preprocessor operators should not be used" id="MISRA2012-RULE-20_10" origId="MISRA2004-19_13" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#undef should not be used" id="MISRA2012-RULE-20_5" origId="PREPROC-25" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function should not contain unused type declarations" id="MISRA2012-RULE-2_3_a" origId="CODSTA-175_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A source file should not contain unused type declarations" id="MISRA2012-RULE-2_3_b" origId="CODSTA-175_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function should not contain unused local tag declarations" id="MISRA2012-RULE-2_4_a" origId="CODSTA-176_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A source file should not contain unused tag declarations" id="MISRA2012-RULE-2_4_b" origId="CODSTA-176_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A source file should not contain unused macro definitions" id="MISRA2012-RULE-2_5" origId="CODSTA-177" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function should not contain unused label declarations" id="MISRA2012-RULE-2_6" origId="OPT-37" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There should be no unused parameters in functions" id="MISRA2012-RULE-2_7" origId="OPT-38" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Trigraphs should not be used" id="MISRA2012-RULE-4_2" origId="MISRA2004-4_2" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers that define objects with internal linkage should be unique" id="MISRA2012-RULE-5_9_a" origId="GLOBAL-REUSEDSTATVAR" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers that define functions with internal linkage should be unique" id="MISRA2012-RULE-5_9_b" origId="GLOBAL-REUSEDSTATFUN" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="When an array with external linkage is declared, its size should be explicitly specified" id="MISRA2012-RULE-8_11" origId="MISRA2004-8_12" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2012-RULE" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="MISRA2012-RULE-8_13_a" origId="MISRA2004-16_7" sev="4" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRA2012-RULE-8_13_b" origId="MISRA2004-16_7_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" id="MISRA2012-RULE-8_7" origId="GLOBAL-AVOIDEXTERN" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An object should be defined at block scope if its identifier only appears in a single function" id="MISRA2012-RULE-8_9" origId="MISRA2004-8_7" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid accessing arrays out of bounds" id="MISRAC2012-DIR_4_1-a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid null pointer dereferencing" id="MISRAC2012-DIR_4_1-b" origId="BD-PB-NP" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid division by zero" id="MISRAC2012-DIR_4_1-c" origId="BD-PB-ZERO" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid buffer overflow due to defining incorrect format limits" id="MISRAC2012-DIR_4_1-d" origId="BD-PB-OVERFFMT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid overflow due to reading a not zero terminated string" id="MISRAC2012-DIR_4_1-e" origId="BD-PB-OVERFNZT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid overflow when reading from a buffer" id="MISRAC2012-DIR_4_1-g" origId="BD-PB-OVERFRD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid overflow when writing to a buffer" id="MISRAC2012-DIR_4_1-h" origId="BD-PB-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRAC2012-DIR_4_1-i" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Do not compare two unrelated pointers" id="MISRAC2012-DIR_4_1-j" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid wraparounds when performing arithmetic integer operations" id="MISRAC2012-DIR_4_1-k" origId="BD-PB-INTWRAP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_10" desc="Use multiple include guards" id="MISRAC2012-DIR_4_10-a" origId="PFO-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_11" desc="Validate values passed to library functions" id="MISRAC2012-DIR_4_11-a" origId="BD-API-VALPARAM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-DIR_4_12" desc="Dynamic heap memory allocation shall not be used" id="MISRAC2012-DIR_4_12-a" origId="MISRA2004-20_4" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Ensure resources are freed" id="MISRAC2012-DIR_4_13-a" origId="BD-RES-LEAKS" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not use resources that have been freed" id="MISRAC2012-DIR_4_13-b" origId="BD-RES-FREE" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not free resources using invalid pointers" id="MISRAC2012-DIR_4_13-c" origId="BD-RES-INVFREE" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not abandon unreleased locks" id="MISRAC2012-DIR_4_13-d" origId="BD-TRS-LOCK" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Avoid double locking" id="MISRAC2012-DIR_4_13-e" origId="BD-TRS-DLOCK" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not release a lock that has not been acquired" id="MISRAC2012-DIR_4_13-f" origId="BD-TRS-REVLOCK" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid tainted data in array indexes" id="MISRAC2012-DIR_4_14-a" origId="BD-SECURITY-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid potential integer overflow/underflow on tainted data" id="MISRAC2012-DIR_4_14-b" origId="BD-SECURITY-TDINTOVERF" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid buffer read overflow from tainted data" id="MISRAC2012-DIR_4_14-c" origId="BD-SECURITY-OVERFRD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid buffer write overflow from tainted data" id="MISRAC2012-DIR_4_14-d" origId="BD-SECURITY-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against command injection" id="MISRAC2012-DIR_4_14-e" origId="BD-SECURITY-TDCMD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against file name injection" id="MISRAC2012-DIR_4_14-f" origId="BD-SECURITY-TDFNAMES" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against SQL injection" id="MISRAC2012-DIR_4_14-g" origId="BD-SECURITY-TDSQL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Prevent buffer overflows from tainted data" id="MISRAC2012-DIR_4_14-h" origId="BD-SECURITY-BUFWRITE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="MISRAC2012-DIR_4_14-i" origId="BD-SECURITY-OVERFFMT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against environment injection" id="MISRAC2012-DIR_4_14-j" origId="BD-SECURITY-TDENV" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid printing tainted data on the output console" id="MISRAC2012-DIR_4_14-k" origId="BD-SECURITY-TDCONSOLE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Exclude unsanitized user input from format strings" id="MISRAC2012-DIR_4_14-l" origId="BD-SECURITY-TDINPUT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_2" desc="All usage of assembler shall be documented" id="MISRAC2012-DIR_4_2-a" origId="COMMENT-09" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_3" desc="Assembly language shall be encapsulated and isolated" id="MISRAC2012-DIR_4_3-a" origId="MISRA2004-2_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_4" desc="Sections of code should not be &quot;commented out&quot;" id="MISRAC2012-DIR_4_4-a" origId="MISRA2004-2_4" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_5" desc="Identifiers in the same name space with overlapping visibility should be typographically unambiguous" id="MISRAC2012-DIR_4_5-a" origId="NAMING-50" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_6" desc="typedefs to basic types should contain some digits in their name" id="MISRAC2012-DIR_4_6-a" origId="MISRA2004-6_3" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="25;" authUrg="0;" cat="MISRAC2012-DIR_4_6" desc="typedefs should be used in place of the basic types" id="MISRAC2012-DIR_4_6-b" origId="MISRA2004-6_3_b" sev="4" total="25"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_6" desc="Use typedefs from stdint.h instead of declaring your own in C99 code" id="MISRAC2012-DIR_4_6-c" origId="CODSTA-155" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_7" desc="Consistently check the returned value of non-void functions" id="MISRAC2012-DIR_4_7-a" origId="BD-PB-CHECKRET" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_7" desc="Always check the returned value of non-void function" id="MISRAC2012-DIR_4_7-b" origId="BD-PB-CHECKRETGEN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_8" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="MISRAC2012-DIR_4_8-a" origId="CODSTA-115" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRAC2012-DIR_4_9" desc="A function should be used in preference to a function-like macro" id="MISRAC2012-DIR_4_9-a" origId="MISRA2004-19_7" sev="4" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="MISRAC2012-RULE_10_1-a" origId="CODSTA-161_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="MISRAC2012-RULE_10_1-b" origId="CODSTA-161_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="MISRAC2012-RULE_10_1-c" origId="CODSTA-161_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="MISRAC2012-RULE_10_1-d" origId="CODSTA-161_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="MISRAC2012-RULE_10_1-e" origId="CODSTA-161_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" id="MISRAC2012-RULE_10_1-f" origId="CODSTA-161_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="MISRAC2012-RULE_10_1-g" origId="CODSTA-161_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_2" desc="Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" id="MISRAC2012-RULE_10_2-a" origId="CODSTA-162" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_3" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="MISRAC2012-RULE_10_3-a" origId="CODSTA-163_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_3" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="MISRAC2012-RULE_10_3-b" origId="CODSTA-163_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_4" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="MISRAC2012-RULE_10_4-a" origId="CODSTA-164_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_4" desc="The second and third operands of the ternary operator shall have the same essential type category" id="MISRAC2012-RULE_10_4-b" origId="CODSTA-164_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_5" desc="The cast operation to essentially enumeration type is not allowed" id="MISRAC2012-RULE_10_5-a" origId="CODSTA-165_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_5" desc="Do not cast from or to essentially Boolean type" id="MISRAC2012-RULE_10_5-b" origId="CODSTA-165_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_5" desc="Do not use casts between essentially character types and essentially floating types" id="MISRAC2012-RULE_10_5-c" origId="CODSTA-165_c" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_6" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="MISRAC2012-RULE_10_6-a" origId="CODSTA-157" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_7" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="MISRAC2012-RULE_10_7-a" origId="CODSTA-156_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_7" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="MISRAC2012-RULE_10_7-b" origId="CODSTA-156_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_8" desc="The value of a composite expression shall not be cast to a different essential type category or a wider essential type" id="MISRAC2012-RULE_10_8-a" origId="CODSTA-152" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_1" desc="Conversions shall not be performed between a pointer to a function and any other type than pointer to function" id="MISRAC2012-RULE_11_1-a" origId="CODSTA-124_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_1" desc="Conversions shall not be performed between non compatible pointer to a function types" id="MISRAC2012-RULE_11_1-b" origId="CODSTA-124_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_2" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="MISRAC2012-RULE_11_2-a" origId="CODSTA-125" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_3" desc="A cast shall not be performed between a pointer to object type and a pointer to a different object type" id="MISRAC2012-RULE_11_3-a" origId="CODSTA-126" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_4" desc="A conversion should not be performed between a pointer to object and an integer type" id="MISRAC2012-RULE_11_4-a" origId="CODSTA-127" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_5" desc="A conversion should not be performed from pointer to void into pointer to object" id="MISRAC2012-RULE_11_5-a" origId="CODSTA-128" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_6" desc="A cast shall not be performed between pointer to void and an arithmetic type" id="MISRAC2012-RULE_11_6-a" origId="CODSTA-129_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_7" desc="A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="MISRAC2012-RULE_11_7-a" origId="CODSTA-130" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_8" desc="A conversion shall not remove any 'const', 'volatile' or '_Atomic' qualification from the type accessed via a pointer or by reference" id="MISRAC2012-RULE_11_8-a" origId="CODSTA-301" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_11_9" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="MISRAC2012-RULE_11_9-a" origId="CODSTA-CPP-63" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="25;" authUrg="0;" cat="MISRAC2012-RULE_11_9" desc="Use NULL instead of literal zero (0) as the null-pointer-constant" id="MISRAC2012-RULE_11_9-b" origId="CODSTA-131" sev="2" total="25"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_1" desc="Use parentheses to indicate the precedence of operators in expressions" id="MISRAC2012-RULE_12_1-a" origId="FORMAT-50" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_1" desc="The operand of the 'sizeof' operator should be enclosed in parentheses" id="MISRAC2012-RULE_12_1-c" origId="FORMAT-25" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_2" desc="Avoid incorrect shift operations" id="MISRAC2012-RULE_12_2-a" origId="BD-PB-BADSHIFT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_3" desc="The comma operator shall not be used" id="MISRAC2012-RULE_12_3-a" origId="MISRA2004-12_10" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_4" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="MISRAC2012-RULE_12_4-a" origId="PB-66_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_4" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="MISRAC2012-RULE_12_4-b" origId="PB-66_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_5" desc="The 'sizeof' operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" id="MISRAC2012-RULE_12_5-a" origId="CODSTA-182" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_1" desc="Initializer lists shall not contain persistent side effects" id="MISRAC2012-RULE_13_1-a" origId="CODSTA-141_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRAC2012-RULE_13_2-a" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRAC2012-RULE_13_2-b" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRAC2012-RULE_13_2-c" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRAC2012-RULE_13_2-d" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRAC2012-RULE_13_2-e" origId="MISRA2004-12_2_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Do not use more than one volatile between two adjacent sequence points" id="MISRAC2012-RULE_13_2-f" origId="MISRA2004-12_2_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRAC2012-RULE_13_2-g" origId="MISRA2004-12_2_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_3" desc="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects" id="MISRAC2012-RULE_13_3-a" origId="CODSTA-123" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_4" desc="The result of a built-in assignment operator should not be used" id="MISRAC2012-RULE_13_4-a" origId="CODSTA-138" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_5" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="MISRAC2012-RULE_13_5-a" origId="MISRA2004-12_4_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_6" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="MISRAC2012-RULE_13_6-a" origId="MISRA2004-12_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_6" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="MISRAC2012-RULE_13_6-b" origId="MISRA2004-12_3_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_6" desc="The function call shall not be the operand of the sizeof operator" id="MISRAC2012-RULE_13_6-c" origId="CODSTA-137" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_1" desc="A loop counter in a 'for' loop shall not have essentially floating type" id="MISRAC2012-RULE_14_1-a" origId="CODSTA-167_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_1" desc="A loop counter in 'while' and 'do-while' loops shall not have essentially floating type" id="MISRAC2012-RULE_14_1-b" origId="CODSTA-167_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" id="MISRAC2012-RULE_14_2-a" origId="CODSTA-168" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="The first clause of a 'for' loop shall be well-formed" id="MISRAC2012-RULE_14_2-b" origId="CODSTA-169_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="The second clause of a 'for' loop shall be well-formed" id="MISRAC2012-RULE_14_2-c" origId="CODSTA-169_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="The third clause of a 'for' statement shall be well-formed" id="MISRAC2012-RULE_14_2-d" origId="CODSTA-169_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_3" desc="Avoid conditions that always evaluate to the same value" id="MISRAC2012-RULE_14_3-ac" origId="BD-PB-CC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_4" desc="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" id="MISRAC2012-RULE_14_4-a" origId="MISRA2004-13_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_1" desc="The goto statement shall not be used" id="MISRAC2012-RULE_15_1-a" origId="MISRA2004-14_4" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_2" desc="The goto statement shall jump to a label declared later in the same function body" id="MISRAC2012-RULE_15_2-a" origId="CODSTA-77" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_3" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="MISRAC2012-RULE_15_3-a" origId="CODSTA-78" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_4" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="MISRAC2012-RULE_15_4-a" origId="CODSTA-79" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_5" desc="A function shall have a single point of exit at the end of the function" id="MISRAC2012-RULE_15_5-a" origId="MISRA2004-14_7" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_6" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="MISRAC2012-RULE_15_6-a" origId="MISRA2004-14_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_6" desc="'if' and 'else' should be followed by a compound statement" id="MISRAC2012-RULE_15_6-b" origId="MISRA2004-14_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_7" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="MISRAC2012-RULE_15_7-a" origId="MISRA2004-14_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="MISRAC2012-RULE_16_1-a" origId="MISRA2004-15_0_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRAC2012-RULE_16_1-b" origId="MISRA2004-15_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRAC2012-RULE_16_1-c" origId="MISRA2004-15_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRAC2012-RULE_16_1-d" origId="MISRA2004-15_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="Always provide a default branch for switch statements" id="MISRAC2012-RULE_16_1-e" origId="CODSTA-35" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRAC2012-RULE_16_1-f" origId="CODSTA-119" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="MISRAC2012-RULE_16_1-g" origId="CODSTA-116" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="Every switch statement shall have at least two switch-clauses" id="MISRAC2012-RULE_16_1-h" origId="OPT-39" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_2" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRAC2012-RULE_16_2-a" origId="MISRA2004-15_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_3" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRAC2012-RULE_16_3-a" origId="MISRA2004-15_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_3" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRAC2012-RULE_16_3-b" origId="MISRA2004-15_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_4" desc="Always provide a default branch for switch statements" id="MISRAC2012-RULE_16_4-a" origId="CODSTA-35" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_4" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRAC2012-RULE_16_4-b" origId="CODSTA-119" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_5" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="MISRAC2012-RULE_16_5-a" origId="CODSTA-116" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_6" desc="Every switch statement shall have at least two switch-clauses" id="MISRAC2012-RULE_16_6-a" origId="OPT-39" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_7" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRAC2012-RULE_16_7-a" origId="MISRA2004-15_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_7" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRAC2012-RULE_16_7-b" origId="MISRA2004-15_4_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_1" desc="The identifiers va_list, va_arg, va_start, va_end, va_copy should not be used" id="MISRAC2012-RULE_17_1-a" origId="CODSTA-136_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_1" desc="The identifiers va_list, va_arg, va_start, va_end should not be used" id="MISRAC2012-RULE_17_1-b" origId="CODSTA-136_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_2" desc="Functions shall not call themselves, either directly or indirectly" id="MISRAC2012-RULE_17_2-a" origId="MISRA2004-16_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_3" desc="Functions shall always have visible prototype at the function call" id="MISRAC2012-RULE_17_3-a" origId="MISRA-071_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_4" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRAC2012-RULE_17_4-a" origId="MISRA2004-16_8" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_4" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="MISRAC2012-RULE_17_4-b" origId="MISRA2004-16_8_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_5" desc="The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" id="MISRAC2012-RULE_17_5-a" origId="CODSTA-134" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_6" desc="The declaration of an array parameter shall not contain the 'static' keyword between the [ ]" id="MISRAC2012-RULE_17_6-a" origId="CODSTA-160" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_17_7" desc="The value returned by a function having non-void return type shall be used" id="MISRAC2012-RULE_17_7-a" origId="CODSTA-122_a" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_7" desc="The value returned by a function having non-void return type shall be used" id="MISRAC2012-RULE_17_7-b" origId="CODSTA-122_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_8" desc="A function parameter should not be modified" id="MISRAC2012-RULE_17_8-a" origId="CODSTA-132" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_1" desc="Avoid accessing arrays out of bounds" id="MISRAC2012-RULE_18_1-a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_1" desc="Avoid accessing arrays and pointers out of bounds" id="MISRAC2012-RULE_18_1-b" origId="BD-PB-OVERFARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_1" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="MISRAC2012-RULE_18_1-c" origId="BD-PB-PTRARR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_2" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRAC2012-RULE_18_2-a" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_3" desc="Do not compare two unrelated pointers" id="MISRAC2012-RULE_18_3-a" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_4" desc="The +, -, += and -= operators should not be applied to an expression of pointer type" id="MISRAC2012-RULE_18_4-a" origId="CODSTA-181" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_5" desc="The declaration of objects should contain no more than 2 levels of pointer indirection" id="MISRAC2012-RULE_18_5-a" origId="MISRA2004-17_5" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_6" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRAC2012-RULE_18_6-a" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_6" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRAC2012-RULE_18_6-b" origId="MISRA2004-17_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_7" desc="Flexible array members shall not be declared" id="MISRAC2012-RULE_18_7-a" origId="CODSTA-113" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_8" desc="Variable-length arrays should not be used" id="MISRAC2012-RULE_18_8-a" origId="CODSTA-112" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_1" desc="An object shall not be assigned to an overlapping object" id="MISRAC2012-RULE_19_1-a" origId="MISRA2004-18_2" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_1" desc="An object shall not be assigned to an overlapping object" id="MISRAC2012-RULE_19_1-b" origId="MISRA2004-18_2_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_1" desc="An object shall not be assigned or copied to an overlapping object" id="MISRAC2012-RULE_19_1-c" origId="BD-PB-OVERLAP" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_2" desc="The union keyword should not be used" id="MISRAC2012-RULE_19_2-a" origId="CODSTA-111" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRAC2012-RULE_1_1-a" origId="CODSTA-174_a_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRAC2012-RULE_1_1-b" origId="CODSTA-174_a_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRAC2012-RULE_1_1-c" origId="CODSTA-174_b_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRAC2012-RULE_1_1-d" origId="CODSTA-174_b_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid division by zero" id="MISRAC2012-RULE_1_3-a" origId="BD-PB-ZERO" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid use before initialization" id="MISRAC2012-RULE_1_3-b" origId="BD-PB-NOTINIT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Do not use resources that have been freed" id="MISRAC2012-RULE_1_3-c" origId="BD-RES-FREE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid overflow when reading from a buffer" id="MISRAC2012-RULE_1_3-d" origId="BD-PB-OVERFRD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid overflow when writing to a buffer" id="MISRAC2012-RULE_1_3-e" origId="BD-PB-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRAC2012-RULE_1_3-f" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRAC2012-RULE_1_3-g" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRAC2012-RULE_1_3-h" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRAC2012-RULE_1_3-i" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRAC2012-RULE_1_3-j" origId="MISRA2004-12_2_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Do not use more than one volatile between two adjacent sequence points" id="MISRAC2012-RULE_1_3-k" origId="MISRA2004-12_2_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRAC2012-RULE_1_3-l" origId="MISRA2004-12_2_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRAC2012-RULE_1_3-m" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRAC2012-RULE_1_3-n" origId="MISRA2004-17_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The left-hand operand of a right-shift operator shall not have a negative value" id="MISRAC2012-RULE_1_3-o" origId="PB-29" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0'" id="MISRAC2012-RULE_1_4-j" origId="CODSTA-215" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The 'rsize_t' type should not be used" id="MISRAC2012-RULE_1_4-k" origId="CODSTA-212" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The 'errno_t' type should not be used" id="MISRAC2012-RULE_1_4-l" origId="CODSTA-217" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S" id="MISRAC2012-RULE_1_4-m" origId="CODSTA-218" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="Do not use the functions defined in Annex K of ISO/IEC 9899:2011 standard" id="MISRAC2012-RULE_1_4-n" origId="CODSTA-219" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_1" desc="#include statements in a file should only be preceded by other preprocessor directives or comments" id="MISRAC2012-RULE_20_1-a" origId="MISRA2004-19_1" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_10" desc="The # and ## preprocessor operators should not be used" id="MISRAC2012-RULE_20_10-a" origId="MISRA2004-19_13" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_11" desc="A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" id="MISRAC2012-RULE_20_11-a" origId="PREPROC-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_12" desc="A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" id="MISRAC2012-RULE_20_12-a" origId="PREPROC-17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_13" desc="Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" id="MISRAC2012-RULE_20_13-a" origId="MISRA2004-19_16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_14" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="MISRAC2012-RULE_20_14-a" origId="MISRA2004-19_17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_2" desc="The ', &quot;, /* or // characters shall not occur in a header file name" id="MISRAC2012-RULE_20_2-a" origId="NAMING-46" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_2" desc="The \ character should not occur in a header file name" id="MISRAC2012-RULE_20_2-b" origId="NAMING-48" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_3" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRAC2012-RULE_20_3-a" origId="MISRA-089" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_4" desc="A macro shall not be defined with the same name as a keyword in C90" id="MISRAC2012-RULE_20_4-a" origId="CODSTA-133_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_4" desc="A macro shall not be defined with the same name as a keyword in C99" id="MISRAC2012-RULE_20_4-b" origId="CODSTA-133_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_5" desc="#undef shall not be used" id="MISRAC2012-RULE_20_5-a" origId="PREPROC-25" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_6" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="MISRAC2012-RULE_20_6-a" origId="MISRA2004-19_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRAC2012-RULE_20_7" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="MISRAC2012-RULE_20_7-a" origId="MISRA2004-19_10" sev="2" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_8" desc="The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" id="MISRAC2012-RULE_20_8-a" origId="PREPROC-19" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_9" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="MISRAC2012-RULE_20_9-b" origId="MISRA2004-19_11_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Do not #define or #undef identifiers with names which start with underscore" id="MISRAC2012-RULE_21_1-a" origId="MISRA2004-20_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="MISRAC2012-RULE_21_1-b" origId="CODSTA-92_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)" id="MISRAC2012-RULE_21_1-c" origId="CODSTA-92_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Do not #define nor #undef identifier 'defined'" id="MISRAC2012-RULE_21_1-d" origId="MISRA2004-20_1_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_10" desc="The standard header files &lt;time.h> or &lt;ctime> shall not be used" id="MISRAC2012-RULE_21_10-a" origId="MISRA2004-20_12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_11" desc="The standard header file &lt;tgmath.h> shall not be used" id="MISRAC2012-RULE_21_11-a" origId="CODSTA-108" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_12" desc="The features provided by &lt;fenv.h> should not be used" id="MISRAC2012-RULE_21_12-a" origId="CODSTA-109" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_13" desc="Do not pass incorrect values to ctype.h library functions" id="MISRAC2012-RULE_21_13-a" origId="BD-API-CTYPE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_14" desc="The Standard Library function memcmp shall not be used to compare null terminated strings" id="MISRAC2012-RULE_21_14-a" origId="BD-PB-MCCSTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_15" desc="The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types" id="MISRAC2012-RULE_21_15-a" origId="CODSTA-183" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_16" desc="The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" id="MISRAC2012-RULE_21_16-a" origId="CODSTA-184" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_17" desc="Avoid overflow due to reading a not zero terminated string" id="MISRAC2012-RULE_21_17-a" origId="BD-PB-OVERFNZT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_17" desc="Avoid overflow when writing to a buffer" id="MISRAC2012-RULE_21_17-b" origId="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_18" desc="The size_t argument passed to any function in string.h shall have an appropriate value" id="MISRAC2012-RULE_21_18-a" origId="BD-API-STRSIZE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_19" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="MISRAC2012-RULE_21_19-a" origId="CODSTA-185_a" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_19" desc="Strings pointed by members of the structure 'lconv' should not be modified" id="MISRAC2012-RULE_21_19-b" origId="CODSTA-185_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_2" desc="The names of standard library macros, objects and functions shall not be reused" id="MISRAC2012-RULE_21_2-a" origId="MISRA2004-20_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_2" desc="The names of standard library macros, objects and functions shall not be reused (C90)" id="MISRAC2012-RULE_21_2-b" origId="MISRA2004-20_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_2" desc="The names of standard library macros, objects and functions shall not be reused (C99)" id="MISRAC2012-RULE_21_2-c" origId="MISRA2004-20_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_20" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="MISRAC2012-RULE_21_20-a" origId="BD-PB-INVRET" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_21" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used" id="MISRAC2012-RULE_21_21-a" origId="SECURITY-48_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-RULE_21_3" desc="Dynamic heap memory allocation shall not be used" id="MISRAC2012-RULE_21_3-a" origId="MISRA2004-20_4" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_4" desc="The facilities provided by &lt;setjmp.h> should not be used" id="MISRAC2012-RULE_21_4-a" origId="MISRA2004-20_7" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_4" desc="The standard header files &lt;setjmp.h> or &lt;csetjmp> shall not be used" id="MISRAC2012-RULE_21_4-b" origId="MISRA2004-20_7_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_5" desc="The standard header files &lt;signal.h> or &lt;csignal> shall not be used" id="MISRAC2012-RULE_21_5-a" origId="MISRA2004-20_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_5" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="MISRAC2012-RULE_21_5-b" origId="MISRA2004-20_8_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-RULE_21_6" desc="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" id="MISRAC2012-RULE_21_6-a" origId="CODSTA-110" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-RULE_21_7" desc="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" id="MISRAC2012-RULE_21_7-a" origId="MISRA2004-20_10" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_8" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_8-a" origId="PB-75" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_8" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_8-b" origId="PB-75_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_8" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_8-c" origId="PB-75_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_9" desc="The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" id="MISRAC2012-RULE_21_9-a" origId="CODSTA-107" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_22_1" desc="Ensure resources are freed" id="MISRAC2012-RULE_22_1-a" origId="BD-RES-LEAKS" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_10" desc="Properly use errno value" id="MISRAC2012-RULE_22_10-a" origId="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_2" desc="Do not use resources that have been freed" id="MISRAC2012-RULE_22_2-a" origId="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_2" desc="Do not free resources using invalid pointers" id="MISRAC2012-RULE_22_2-b" origId="BD-RES-INVFREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_3" desc="The same file shall not be opened for read and write access at the same time on different streams" id="MISRAC2012-RULE_22_3-a" origId="BD-PB-WRRDSTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_4" desc="Avoid writing to a stream which has been opened as read only" id="MISRAC2012-RULE_22_4-a" origId="BD-PB-WRROS" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_5" desc="A pointer to a FILE object shall not be dereferenced" id="MISRAC2012-RULE_22_5-a" origId="CODSTA-166_a" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_5" desc="A pointer to a FILE object shall not be dereferenced by a library function" id="MISRAC2012-RULE_22_5-b" origId="CODSTA-166_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_6" desc="Do not use resources that have been freed" id="MISRAC2012-RULE_22_6-a" origId="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_7" desc="The macro EOF should be compared with the unmodified return value from the Standard Library function" id="MISRAC2012-RULE_22_7-a" origId="BD-PB-EOFCOMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_8" desc="Properly use errno value" id="MISRAC2012-RULE_22_8-a" origId="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_9" desc="Properly use errno value" id="MISRAC2012-RULE_22_9-a" origId="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in &quot;else&quot; block" id="MISRAC2012-RULE_2_1-a" origId="MISRA2004-14_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute" id="MISRAC2012-RULE_2_1-b" origId="MISRA2004-14_1_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="MISRAC2012-RULE_2_1-c" origId="MISRA2004-14_1_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in switch statement" id="MISRAC2012-RULE_2_1-d" origId="MISRA2004-14_1_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in 'for' loop" id="MISRAC2012-RULE_2_1-e" origId="MISRA2004-14_1_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="MISRAC2012-RULE_2_1-f" origId="MISRA2004-14_1_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="MISRAC2012-RULE_2_1-g" origId="MISRA2004-14_1_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_2" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRAC2012-RULE_2_2-a" origId="MISRA2004-14_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="8;" authUrg="0;" cat="MISRAC2012-RULE_2_2" desc="Avoid unused values" id="MISRAC2012-RULE_2_2-b" origId="BD-PB-VOVR" sev="2" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_3" desc="A function should not contain unused type declarations" id="MISRAC2012-RULE_2_3-a" origId="CODSTA-175_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_3" desc="A source file should not contain unused type declarations" id="MISRAC2012-RULE_2_3-b" origId="CODSTA-175_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_4" desc="A function should not contain unused local tag declarations" id="MISRAC2012-RULE_2_4-a" origId="CODSTA-176_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_4" desc="A source file should not contain unused tag declarations" id="MISRAC2012-RULE_2_4-b" origId="CODSTA-176_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_5" desc="A source file should not contain unused macro definitions" id="MISRAC2012-RULE_2_5-a" origId="CODSTA-177" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_6" desc="A function should not contain unused label declarations" id="MISRAC2012-RULE_2_6-a" origId="OPT-37" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_7" desc="There should be no unused parameters in functions" id="MISRAC2012-RULE_2_7-a" origId="OPT-38" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_1" desc="The character sequence /* shall not be used within a C-style comment" id="MISRAC2012-RULE_3_1-a" origId="MISRA2004-2_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_1" desc="The character sequence // shall not be used within a C-style comment" id="MISRAC2012-RULE_3_1-b" origId="COMMENT-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_1" desc="The character sequence /* shall not be used within a C++-style comment" id="MISRAC2012-RULE_3_1-c" origId="COMMENT-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_2" desc="Line-splicing shall not be used in // comments" id="MISRAC2012-RULE_3_2-a" origId="COMMENT-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_4_1" desc="Octal and hexadecimal escape sequences shall be terminated" id="MISRAC2012-RULE_4_1-a" origId="CODSTA-117" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_4_2" desc="Trigraphs shall not be used" id="MISRAC2012-RULE_4_2-a" origId="MISRA2004-4_2" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_1" desc="External identifiers shall be distinct" id="MISRAC2012-RULE_5_1-a" origId="CODSTA-178" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c90)" id="MISRAC2012-RULE_5_2-a" origId="CODSTA-179_a_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c99)" id="MISRAC2012-RULE_5_2-b" origId="CODSTA-179_a_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the same block scope and name space shall be distinct (c90)" id="MISRAC2012-RULE_5_2-c" origId="CODSTA-179_b_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the same block scope and name space shall be distinct (c99)" id="MISRAC2012-RULE_5_2-d" origId="CODSTA-179_b_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_3" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="MISRAC2012-RULE_5_3-a" origId="MISRA2004-5_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_3" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="MISRAC2012-RULE_5_3-b" origId="MISRA2004-5_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of its parameters(c90)" id="MISRAC2012-RULE_5_4-a" origId="CODSTA-171_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of its parameters(c99)" id="MISRAC2012-RULE_5_4-b" origId="CODSTA-171_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c90)" id="MISRAC2012-RULE_5_4-c" origId="CODSTA-172_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c99)" id="MISRAC2012-RULE_5_4-d" origId="CODSTA-172_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_5" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c90)" id="MISRAC2012-RULE_5_5-a" origId="CODSTA-170_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_5" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c99)" id="MISRAC2012-RULE_5_5-b" origId="CODSTA-170_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_6" desc="A typedef name shall be a unique identifier" id="MISRAC2012-RULE_5_6-a" origId="GLOBAL-UNIQUETYPEDEFC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="8;" authUrg="0;" cat="MISRAC2012-RULE_5_7" desc="A tag name shall be a unique identifier" id="MISRAC2012-RULE_5_7-a" origId="GLOBAL-UNIQUETYPEC" sev="2" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_8" desc="Identifiers that define objects with external linkage shall be unique" id="MISRAC2012-RULE_5_8-a" origId="GLOBAL-REUSEDEXTVAR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_9" desc="Identifiers that define objects with internal linkage shall be unique" id="MISRAC2012-RULE_5_9-a" origId="GLOBAL-REUSEDSTATVAR" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_9" desc="Identifiers that define functions with internal linkage shall be unique" id="MISRAC2012-RULE_5_9-b" origId="GLOBAL-REUSEDSTATFUN" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_6_1" desc="Bit fields shall only be defined to be of type unsigned int or signed int" id="MISRAC2012-RULE_6_1-a" origId="MISRA2004-6_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_6_2" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="MISRAC2012-RULE_6_2-a" origId="CODSTA-71" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_1" desc="Octal constants (other than zero) shall not be used" id="MISRAC2012-RULE_7_1-a" origId="MISRA2004-7_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_2" desc="A 'U' suffix shall be applied to all constants of unsigned type" id="MISRAC2012-RULE_7_2-a" origId="MISRA2004-10_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_3" desc="Use capital 'L' instead of lowercase 'l' to indicate long" id="MISRAC2012-RULE_7_3-a" origId="PORT-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_4" desc="A string literal shall not be modified" id="MISRAC2012-RULE_7_4-a" origId="PB-27" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_1" desc="Whenever a function is declared or defined, its type shall be explicitly stated" id="MISRAC2012-RULE_8_1-a" origId="MISRA2004-8_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_1" desc="Whenever an object is declared or defined, its type shall be explicitly stated" id="MISRAC2012-RULE_8_1-b" origId="MISRA2004-8_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_10" desc="An inline function shall be declared with the static storage class" id="MISRAC2012-RULE_8_10-a" origId="CODSTA-120" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_11" desc="When an array with external linkage is declared, its size should be explicitly specified" id="MISRAC2012-RULE_8_11-a" origId="MISRA2004-8_12" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_12" desc="Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" id="MISRAC2012-RULE_8_12-a" origId="PB-58" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRAC2012-RULE_8_13" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="MISRAC2012-RULE_8_13-a" origId="MISRA2004-16_7" sev="4" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_13" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRAC2012-RULE_8_13-b" origId="MISRA2004-16_7_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_14" desc="The restrict type qualifier shall not be used" id="MISRAC2012-RULE_8_14-a" origId="CODSTA-121" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_2" desc="Identifiers shall be given for all of the parameters in a function prototype declaration" id="MISRAC2012-RULE_8_2-a" origId="MISRA2004-16_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_2" desc="Function types shall have named parameters" id="MISRAC2012-RULE_8_2-b" origId="CODSTA-158" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_2" desc="Function types shall be in prototype form" id="MISRAC2012-RULE_8_2-c" origId="CODSTA-159" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_3" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRAC2012-RULE_8_3-a" origId="MISRA2004-8_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_3" desc="The identifiers used in the declaration and definition of a function shall be identical" id="MISRAC2012-RULE_8_3-b" origId="MISRA2004-16_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_3" desc="All declarations of an object or function shall have compatible types" id="MISRAC2012-RULE_8_3-c" origId="GLOBAL-COMPATDECLS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_4" desc="A declaration shall be visible when an object or function with external linkage is defined" id="MISRAC2012-RULE_8_4-a" origId="CODSTA-118" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_4" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRAC2012-RULE_8_4-b" origId="MISRA2004-8_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_5" desc="An external object or function shall not have more than one non-defining declaration in translation unit" id="MISRAC2012-RULE_8_5-a" origId="CODSTA-154" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_6" desc="An identifier with external linkage shall have no more then one external definition" id="MISRAC2012-RULE_8_6-a" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_7" desc="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" id="MISRAC2012-RULE_8_7-a" origId="GLOBAL-AVOIDEXTERN" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_8" desc="The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" id="MISRAC2012-RULE_8_8-a" origId="MISRA2004-8_11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_9" desc="Objects shall be defined at block scope if they are only accessed from within a single function" id="MISRAC2012-RULE_8_9-a" origId="MISRA2004-8_7" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_1" desc="Avoid use before initialization" id="MISRAC2012-RULE_9_1-a" origId="BD-PB-NOTINIT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_2" desc="The initializer for an aggregate or union shall be enclosed in braces" id="MISRAC2012-RULE_9_2-a" origId="INIT-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_3" desc="Arrays shall not be partially initialized" id="MISRAC2012-RULE_9_3-a" origId="MISRA2004-9_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_4" desc="An element of an object shall not be initialized more than once" id="MISRAC2012-RULE_9_4-a" origId="PB-69" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_5" desc="Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" id="MISRAC2012-RULE_9_5-a" origId="CODSTA-186" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate resources in function argument list because the order of evaluation of a function's parameters is undefined" id="MRM-01" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use the same form in corresponding calls to new/malloc and delete/free" id="MRM-06" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not invoke malloc/realloc for objects having constructors" id="MRM-08" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Avoid hiding the global new" id="MRM-32" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Declare a copy assignment operator for classes with dynamically allocated memory" id="MRM-37" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Declare a copy constructor for classes with dynamically allocated memory" id="MRM-38" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Never return a dereferenced local pointer initialized by new in this function scope" id="MRM-23" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Call delete on pointer members in destructors" id="MRM-33" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Provide error handling for file opening errors right next to the call to fopen" id="MRM-39" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="A copy constructor shall copy all data members and bases" id="MRM-41" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Call fclose() on pointer member in destructor if the pointer was used to open a file" id="MRM-42" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="An assignment operator shall assign all data bases" id="MRM-43" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new'" id="MRM-55" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate more than one resource in a single statement" id="MRM-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="MRM" desc="All classes should contain the assignment operator or appropriate comment" id="MRM-04" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="MRM" desc="All classes should contain the copy constructor or appropriate comment" id="MRM-05" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Don't memcpy or memcmp non-PODs" id="MRM-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always assign a new value to an expression that points to deallocated memory" id="MRM-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always assign a new value to global or member variable that points to deallocated memory" id="MRM-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always assign a new value to parameter or local variable that points to deallocated memory" id="MRM-11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Adhere to convention when writing new and delete" id="MRM-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Adhere to convention when writing new" id="MRM-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator new, it should provide overloads of all three of plain, in-place, and non-throwing operator new" id="MRM-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator new[], it should provide overloads of all three of plain, in-place, and non-throwing operator new[]" id="MRM-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator delete, it should provide overloads of all three of plain, in-place, and non-throwing operator delete" id="MRM-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator delete[], it should provide overloads of all three of plain, in-place, and non-throwing operator delete[]" id="MRM-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MRM" desc="Do not allocate memory and expect that someone else will deallocate it later" id="MRM-18" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate memory and expect that someone else will deallocate it later" id="MRM-19" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate memory and expect that someone else will deallocate it later" id="MRM-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use objects to manage resources" id="MRM-21" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use objects to manage resources" id="MRM-22" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Store newed objects in smart pointers in standalone statements" id="MRM-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Write operator delete if you write operator new" id="MRM-26" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Write operator delete[] if you write operator new[]" id="MRM-27" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always provide new and delete together" id="MRM-28" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always provide new[] and delete[] together" id="MRM-29" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use allocation by declaration rather than by new or malloc" id="MRM-30" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Freed memory shouldn't be accessed under any circumstances" id="MRM-31" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Destructor should not be called manually" id="MRM-31_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MRM" desc="Check the return value of new" id="MRM-34" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Never provide brackets ([]) for delete when deallocating non-arrays" id="MRM-35" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="MRM-36" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Copy and destroy consistently" id="MRM-40" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="A copy assignment operator should be declared when a copy constructor is declared (and vice versa)" id="MRM-40_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Both the copy constructor and copy assignment operator should have the same public/protected/private permission" id="MRM-40_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If you have a non-trivial copy constructor or copy assignment operator, you should also declare a destructor" id="MRM-40_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor" id="MRM-40_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not use sizeof operator on pointer type to specify the size of the memory to be allocated via 'malloc', 'calloc' or 'realloc' function" id="MRM-45" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not use calloc, malloc, realloc and free functions" id="MRM-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="MRM" desc="Classes containing at least one non-static member variable should declare the assignment operator or contain appropriate comment" id="MRM-47" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="MRM" desc="Classes containing at least one non-static member variable should declare the copy constructor or contain appropriate comment" id="MRM-48" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="A copy constructor and a copy assignment operator shall be declared for classes that contain pointers to data items or nontrivial destructors" id="MRM-49" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not use 'delete' on pointers to a void type" id="MRM-51" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails" id="MRM-53" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Avoid using the default operator 'new' for over-aligned types" id="MRM-54" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="An overhead should be used when an array of objects is passed to the placement 'new' allocation function" id="MRM-55_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Copy assignment operators should not have side effects that could affect copying the object" id="MRM-56" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Move assignment operators should not have side effects that could affect moving the object" id="MRM-57" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Declare both private copy constructor and copy assignment operator at the same time" id="MRM-50" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use RAII to prevent resource leaks" id="MRM-52" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Identifiers for constant and enumerator values shall be lowercase" id="NAMING-42" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="All &quot;#define&quot; constants shall be in uppercase" id="NAMING-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="In an enumerated list, list members (elements) shall be in uppercase and names or tags for the list shall be in lowercase" id="NAMING-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="NAMING" desc="Use lowercase for file names" id="NAMING-03" sev="3" total="6"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Global prefixes should only be used for global variables" id="NAMING-04" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin local variable names with a lowercase letters" id="NAMING-05" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin global variable names with a lowercase letters" id="NAMING-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="NAMING" desc="Begin member variable names with a lowercase letters" id="NAMING-07" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all boolean type variables with 'b'" id="NAMING-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin class, struct, union, enum, and typedef names with an uppercase letter" id="NAMING-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The names of abstract data types, structures, typedefs, and enumerated types are to begin with an uppercase letter" id="NAMING-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The name of enumeration type shall begin with an uppercase letter and contain a suffix '_t' at the end" id="NAMING-11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The names of structures shall begin with an uppercase letter and contain a suffix '_t' at the end" id="NAMING-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin constant variables with 'c'" id="NAMING-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="NAMING" desc="Begin class data member names with 'its'" id="NAMING-14" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING" desc="Begin all double type variable with 'd'" id="NAMING-15" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all float type variables with 'f'" id="NAMING-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="14;" authUrg="0;" cat="NAMING" desc="Begin all function names with uppercase letter" id="NAMING-17" sev="3" total="14"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="NAMING" desc="Begin global variable names with 'the'" id="NAMING-18" sev="3" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="NAMING" desc="Begin all integer type variable with 'i'" id="NAMING-19" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Functions that begin with 'is' should return boolean values" id="NAMING-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all long integer variables with 'li'" id="NAMING-21" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING" desc="Prefix a variable type 'pointer' with a 'p' character" id="NAMING-22" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all short integer variables with 'si'" id="NAMING-23" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all signed character variables with 'c'" id="NAMING-24" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all terminated characters string variables with 'sz'" id="NAMING-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all unsigned character type variables with 'uc'" id="NAMING-26" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all unsigned integer type variables with 'ui'" id="NAMING-27" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Use lowercase letters for structure and union member names" id="NAMING-28" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Append names of non-scalar typedefs with &quot;_t&quot;" id="NAMING-29" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Implementation files in C always have the file name extension &quot;.c&quot;" id="NAMING-30" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Do not use typenames that differ only by the use of uppercase and lowercase letters" id="NAMING-31" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="An include file for a class should have a file name of the form &lt;class name> + extension" id="NAMING-32" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="NAMING" desc="Do not use identifiers which begin with one or two underscores (`_' or `__')" id="NAMING-33" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="NAMING" desc="Global function names should start with lowercase" id="NAMING-34" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Member function names should start with lowercase" id="NAMING-35" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Names of parameters in declaration and definition should be identical" id="NAMING-36" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING" desc="Include files in C++ always have the file name extension '.hh'" id="NAMING-37" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="NAMING" desc="Implementation files in C++ always have the file name extension &quot;.cc&quot;" id="NAMING-38" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING" desc="Inline definition files always have the file name extension &quot;.icc&quot;" id="NAMING-39" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING" desc="Only the first word of the name of a class, structure, namespace, enumeration, or typedef will begin with an uppercase letter" id="NAMING-40" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING" desc="Header files will always have a file name extension of '.h'" id="NAMING-41" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING" desc="File name extension, if present, should be &quot;*.cpp&quot; or &quot;*.h&quot;" id="NAMING-43" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="19;" authUrg="0;" cat="NAMING" desc="All letters contained in function and variable names will be composed entirely of lowercase letters" id="NAMING-44" sev="3" total="19"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="24;" authUrg="0;" cat="NAMING" desc="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" id="NAMING-45" sev="3" total="24"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The ', &quot;, /* or // characters shall not occur in a header file name" id="NAMING-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="0;" cat="NAMING" desc="Different identifiers shall be typographically unambiguous" id="NAMING-47" sev="3" total="13"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The \ character should not occur in a header file name" id="NAMING-48" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" id="NAMING-51" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Universal character names shall be used only inside character or string literals" id="NAMING-52" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Header files should have a file extension of: &quot;.h&quot;, &quot;.hpp&quot; or &quot;.hxx&quot;" id="NAMING-53" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Use visually distinct identifiers" id="NAMING-54" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Implementation files in C++ will always have a file name extension of &quot;.cpp&quot;" id="NAMING-49" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Identifiers in the same name space with overlapping visibility should be typographically unambiguous" id="NAMING-50" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for array variables and parameters" id="NAMING-HN-01" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for bool types" id="NAMING-HN-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for bool pointer, array, or reference types" id="NAMING-HN-03" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for byte types" id="NAMING-HN-04" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for byte pointer, array, or reference types" id="NAMING-HN-05" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for char types" id="NAMING-HN-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for array of char types" id="NAMING-HN-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for pointer, array, or reference to array of char types" id="NAMING-HN-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for char pointer, array, or reference types" id="NAMING-HN-09" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for char pointer or reference types" id="NAMING-HN-10" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for constant parameters" id="NAMING-HN-11" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for double-precision floating point types" id="NAMING-HN-12" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for double-precision floating point pointer, array, or reference types" id="NAMING-HN-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for dword types" id="NAMING-HN-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for dword pointer, array, or reference types" id="NAMING-HN-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for dynamically allocated array" id="NAMING-HN-16" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for floating point types" id="NAMING-HN-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for floating point pointer, array, or reference types" id="NAMING-HN-18" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for class declaration" id="NAMING-HN-19" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for structs declaration" id="NAMING-HN-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for ifstream type variables and parameters" id="NAMING-HN-21" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for int types" id="NAMING-HN-22" sev="3" total="6"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for int pointer, array, or reference types" id="NAMING-HN-23" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for istream type parameters and variables" id="NAMING-HN-24" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for long int types" id="NAMING-HN-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for long double-precision floating point types" id="NAMING-HN-26" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for long double-precision floating point pointer, array, or reference types" id="NAMING-HN-27" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for long int pointer, array, or reference types" id="NAMING-HN-28" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for member variables" id="NAMING-HN-29" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for int types" id="NAMING-HN-30" sev="3" total="6"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for int pointer, array, or reference types" id="NAMING-HN-31" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for ofstream type parameters and variables" id="NAMING-HN-32" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for ostream type parameters and variables" id="NAMING-HN-33" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for pointer" id="NAMING-HN-34" sev="3" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for reference parameters" id="NAMING-HN-35" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for short int types" id="NAMING-HN-36" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for short int pointer, array, or reference types" id="NAMING-HN-37" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for static variables" id="NAMING-HN-38" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for string types" id="NAMING-HN-39" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for string pointer, array, or reference types" id="NAMING-HN-40" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for unsigned types" id="NAMING-HN-41" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for void pointer types" id="NAMING-HN-42" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for word types" id="NAMING-HN-43" sev="3" total="6"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for word pointer, array, or reference types" id="NAMING-HN-44" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Class cannot inherit other class more than once unless it is virtual inheritance" id="OOP-03" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Be wary about using multiple inheritance of classes that are not abstract interfaces" id="OOP-07" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not directly access global data from a constructor" id="OOP-08" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid calling virtual functions from constructors" id="OOP-16" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid calling virtual functions from destructors" id="OOP-16_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="OOP" desc="Define a virtual destructor in classes used as base classes which have virtual functions" id="OOP-22" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Make destructors virtual in base classes" id="OOP-24" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A pointer to an abstract class shall not be converted to a pointer of a class that inherits from that abstract class" id="OOP-29" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Make base class destructors public and virtual, or protected and nonvirtual" id="OOP-31" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="If a class destructor is called and the class has virtual functions it shall have a virtual destructor" id="OOP-38" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Casts from a base class to a derived class should not be performed on polymorphic types" id="OOP-49" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not use multiple inheritance" id="OOP-05" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Multiple inheritance shall be limited to at most 1 protected implementation" id="OOP-07_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Multiple inheritance shall not use any public implementations" id="OOP-07_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid using global data in member functions" id="OOP-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid &quot;public&quot; data members" id="OOP-18" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid 'protected' data members" id="OOP-19" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="OOP" desc="If a class has virtual functions it shall have a virtual destructor" id="OOP-23" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid casts down the inheritance hierarchy" id="OOP-28" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Down casting (casting from base to derived class) shall not be allowed" id="OOP-35" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A stateful virtual base shall be explicitly declared in each derived class that accesses it" id="OOP-39_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A base class shall not be both virtual and non-virtual in the same hierarchy" id="OOP-41" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid public copy constructors and assignment operators in base classes" id="OOP-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid slicing. Consider Clone instead of copying in base classes" id="OOP-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not derive functions with the same name from more than one base class" id="OOP-04" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="For multiple inheritance use virtual common base class" id="OOP-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid the use of global objects in destructors" id="OOP-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid using the friend mechanism" id="OOP-11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Friend declarations shall not be used except declarations of comparison operators" id="OOP-11_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Protected member function shall not return non-const handles to private class-data" id="OOP-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not redefine an inherited virtual function with a different default parameter value" id="OOP-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid explicit cast from derived to a base class" id="OOP-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="OOP" desc="Use the virtual keyword if a subclass implements a virtual function" id="OOP-21" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="OOP" desc="Avoid declaring virtual functions inline" id="OOP-25" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Never convert pointers to objects of a derived class to pointers to objects of a virtual base class" id="OOP-26" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Declare copy assignment operator for class with reference or const members" id="OOP-27" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Declare the copy constructor and copy assignment operator private not in class itself, but in a specifically designed base class" id="OOP-30" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Never redefine an inherited nonvirtual function" id="OOP-32" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not redefine an inherited nonvirtual function with template parameter" id="OOP-33" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="OOP" desc="Public member functions shall not return non-const handles to private/protected class-data" id="OOP-36" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="The copy assignment operator shall be declared protected or private in an abstract class" id="OOP-42" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy" id="OOP-44" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="All constructors that are callable with a single argument of fundamental type shall be declared explicit" id="OOP-45" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member" id="OOP-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Classes should not be derived from virtual bases" id="OOP-47" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Member data in non-POD types shall be private" id="OOP-48" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" id="OOP-50" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Member functions declared in derived class should not hide functions declared in base classes" id="OOP-53" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not increase the accessibility of overridden or hidden methods" id="OOP-54" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A user-defined assignment operator shall not be virtual" id="OOP-56" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Structs should only contain public data members and should not be a base or inherit" id="OOP-57" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Write a using declaration to redeclare overloaded functions" id="OOP-17" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="User-provided copy assignment operators shall handle self-assignment" id="OOP-34" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A virtual base shall be explicitly declared in each derived class" id="OOP-39" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Hierarchies should be based on abstract classes" id="OOP-40" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" id="OOP-43" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A pointer to a class may not be converted to a pointer of a second class unless the one inherits from the other" id="OOP-52" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A non-POD type should be defined as class" id="OOP-55" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Consider use composition instead of private inheritance" id="OOP-14" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Prefer composition when don't need inheritance" id="OOP-37" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Use namespace instead of class or structure containing only static functions" id="OOP-51" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="OPT" desc="Eliminate unused parameters" id="OPT-03" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Variables will not be introduced until they can be initialized with meaningful values" id="OPT-26" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Declare variables as locally as possible" id="OPT-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="OPT" desc="Prefer canonical form of ++ and --. Prefer calling the prefix forms" id="OPT-04" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="OPT" desc="Avoid unused private member variables" id="OPT-05" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Prefer &quot;a @= b&quot; than &quot;a = a @ b&quot;, where &quot;@&quot; is +, -, *, /, %" id="OPT-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Prefer &quot;a @= b&quot; than &quot;a = a @ b&quot;, where &quot;@&quot; is &amp;, |, ^, &lt;&lt;, >>" id="OPT-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="OPT" desc="Do not declare variables in &quot;if&quot;, &quot;for&quot;, &quot;while&quot;, and &quot;do while&quot; statement" id="OPT-10" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="If a file-level static variable is used/referenced in one function only then include that variable in the function itself" id="OPT-11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="If a file-level static variable is used/referenced in one class only then include that variable in the class itself" id="OPT-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Declare member variables in the descending size order" id="OPT-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="OPT" desc="Pass objects by reference instead of by value" id="OPT-14" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Consider overloading to avoid implicit type conversions" id="OPT-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Global function containing recursion, loops or virtual function call should not be inlined" id="OPT-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="OPT" desc="Avoid inline constructors and destructors" id="OPT-17" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Member function containing recursion or loops should not be inlined" id="OPT-18" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Consider using op= instead of stand-alone op" id="OPT-19" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Postpone variable definitions as long as possible" id="OPT-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Every switch statement shall have at least one non-empty case clause" id="OPT-21" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Useless 'case' and 'default' clauses should not be used" id="OPT-22" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="'strlen' function should not be used to check string against NULL/non-NULL" id="OPT-28" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Every defined function with internal linkage shall be used at least once" id="OPT-30" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="OPT" desc="There shall be no unused parameters (named or unnamed) in non-virtual functions" id="OPT-31" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="All non-empty functions with void return type shall have external side effect(s)" id="OPT-32" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Do not assign a variable to itself" id="OPT-35" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Do not use a variable inside its own initializer" id="OPT-36" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Every switch statement shall have at least two switch-clauses" id="OPT-39" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="There shall be no unused named parameters in virtual functions" id="OPT-42" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Avoid unused local variables" id="OPT-02" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="OPT" desc="Avoid unnecessary local variables" id="OPT-06" sev="4" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Trivial accessor and mutator functions should be inlined" id="OPT-23" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Trivial forwarding functions should be inlined" id="OPT-24" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Only functions with 1 or 2 statements should be considered candidates for inline functions" id="OPT-25" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="OPT" desc="The number of accessor and mutator functions should be minimized" id="OPT-27" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Redundant explicit cast to the same type is not allowed" id="OPT-29" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="OPT" desc="Functions with void return type shall not be empty" id="OPT-32_b" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="A function should not contain unused label declarations" id="OPT-37" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="There should be no unused parameters in functions" id="OPT-38" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="The same code (after preprocessing) in two branches of if-else-if chain" id="OPT-40_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="The same code (after preprocessing) in different clauses of switch statement" id="OPT-40_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="A file should directly include only the headers that contain declarations and definitions required to compile that file" id="OPT-41" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Remove unnecessary '== true'" id="OPT-09" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Consider returning object by reference instead of by value" id="OPT-33" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Protect against command injection" id="OWASP2017-A1-b" origId="BD-SECURITY-TDCMD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Avoid printing tainted data on the output console" id="OWASP2017-A1-c" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Protect against environment injection" id="OWASP2017-A1-d" origId="BD-SECURITY-TDENV" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Exclude unsanitized user input from format strings" id="OWASP2017-A1-e" origId="BD-SECURITY-TDINPUT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Protect against SQL injection" id="OWASP2017-A1-f" origId="BD-SECURITY-TDSQL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Avoid passing unvalidated binary data to log methods" id="OWASP2017-A1-a" origId="BD-SECURITY-LOG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A10" desc="All exceptions should be rethrown or logged with standard logger" id="OWASP2017-A10-a" origId="EXCEPT-04" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A2" desc="Do not use weak encryption functions" id="OWASP2017-A2-a" origId="SECURITY-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A3" desc="Properly seed pseudorandom number generators" id="OWASP2017-A3-a" origId="BD-SECURITY-RAND" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A4" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="OWASP2017-A4-a" origId="BD-SECURITY-XXEXRC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A5" desc="Protect against file name injection" id="OWASP2017-A5-a" origId="BD-SECURITY-TDFNAMES" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A5" desc="Observe correct revocation order while relinquishing privileges" id="OWASP2017-A5-b" origId="SECURITY-44" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A5" desc="Ensure that privilege relinquishment is successful" id="OWASP2017-A5-c" origId="SECURITY-45" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A6" desc="Properly use errno value" id="OWASP2017-A6-c" origId="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A6" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="OWASP2017-A6-a" origId="EXCEPT-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A6" desc="Empty 'catch' blocks should not be used" id="OWASP2017-A6-b" origId="EXCEPT-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API10" desc="All exceptions should be rethrown or logged with standard logger" id="OWASP2019-API10-a" origId="EXCEPT-04" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API10" desc="Do not use 'syslog' function for logging purposes" id="OWASP2019-API10-b" origId="SECURITY-21" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API2" desc="Do not use weak encryption functions" id="OWASP2019-API2-a" origId="SECURITY-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid buffer overflow due to defining incorrect format limits" id="OWASP2019-API3-d" origId="BD-PB-OVERFFMT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid overflow due to reading a not zero terminated string" id="OWASP2019-API3-e" origId="BD-PB-OVERFNZT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid overflow when reading from a buffer" id="OWASP2019-API3-f" origId="BD-PB-OVERFRD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid overflow when writing to a buffer" id="OWASP2019-API3-g" origId="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="OWASP2019-API3-h" origId="BD-SECURITY-OVERFFMT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid buffer read overflow from tainted data" id="OWASP2019-API3-i" origId="BD-SECURITY-OVERFRD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid buffer write overflow from tainted data" id="OWASP2019-API3-j" origId="BD-SECURITY-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid race conditions while checking for the existence of a symbolic link" id="OWASP2019-API3-m" origId="BD-TRS-SYMLINK" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Do not pass empty container iterators to std algorithms as destinations" id="OWASP2019-API3-a" origId="BD-CO-EMPCON" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid accessing arrays out of bounds" id="OWASP2019-API3-b" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid accessing arrays and pointers out of bounds" id="OWASP2019-API3-c" origId="BD-PB-OVERFARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Properly seed pseudorandom number generators" id="OWASP2019-API3-k" origId="BD-SECURITY-RAND" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid passing sensitive data to functions that write to log files" id="OWASP2019-API3-l" origId="BD-SECURITY-SENSLOG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="OWASP2019-API3-p" origId="SECURITY-15" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid functions which use time from MFC library" id="OWASP2019-API3-o" origId="SECURITY-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="A pointer to a structure should not be passed to a function that can copy data to the user space" id="OWASP2019-API3-q" origId="SECURITY-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Usage of system properties (environment variables) should be restricted" id="OWASP2019-API3-n" origId="SECURITY-03" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="OWASP2019-API4" desc="Ensure resources are freed" id="OWASP2019-API4-b" origId="BD-RES-LEAKS" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="OWASP2019-API4" desc="Validate potentially tainted data before it is used to determine the size of memory allocation" id="OWASP2019-API4-a" origId="BD-SECURITY-TDALLOC" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API7" desc="Properly use errno value" id="OWASP2019-API7-a" origId="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API7" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="OWASP2019-API7-b" origId="EXCEPT-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API7" desc="Empty 'catch' blocks should not be used" id="OWASP2019-API7-c" origId="EXCEPT-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Protect against command injection" id="OWASP2019-API8-a" origId="BD-SECURITY-TDCMD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Avoid printing tainted data on the output console" id="OWASP2019-API8-b" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Protect against environment injection" id="OWASP2019-API8-c" origId="BD-SECURITY-TDENV" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Protect against file name injection" id="OWASP2019-API8-d" origId="BD-SECURITY-TDFNAMES" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Exclude unsanitized user input from format strings" id="OWASP2019-API8-e" origId="BD-SECURITY-TDINPUT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Protect against SQL injection" id="OWASP2019-API8-f" origId="BD-SECURITY-TDSQL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="OWASP2019-API8-g" origId="BD-SECURITY-XXEXRC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Use care to ensure that LoadLibrary() will load the correct library" id="OWASP2019-API8-h" origId="SECURITY-04" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Avoid passing dynamically created strings into exec" id="OWASP2019-API8-i" origId="SECURITY-18" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Avoid passing user input into methods as parameters" id="OWASP2019-API8-j" origId="SECURITY-20" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="All usage of assembler shall be documented" id="OWASP2019-API9-c" origId="COMMENT-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="OWASP2019-API9" desc="Use of floating-point arithmetic shall be documented" id="OWASP2019-API9-d" origId="COMMENT-10" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="All uses of the #pragma directive shall be documented and explained" id="OWASP2019-API9-g" origId="MISRA2004-3_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="OWASP2019-API9" desc="Objects or functions with external linkage shall be declared in a header file" id="OWASP2019-API9-e" origId="MISRA-023" sev="4" total="16"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="Assert liberally to document internal assumptions and invariants" id="OWASP2019-API9-a" origId="CODSTA-11" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="When using enum, the values of each member should be explicitly declared" id="OWASP2019-API9-b" origId="CODSTA-21" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="Document integer division" id="OWASP2019-API9-f" origId="MISRA-041" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A1" desc="Protect against file name injection" id="OWASP2021-A1-a" origId="BD-SECURITY-TDFNAMES" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A1" desc="Observe correct revocation order while relinquishing privileges" id="OWASP2021-A1-b" origId="SECURITY-44" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A1" desc="Ensure that privilege relinquishment is successful" id="OWASP2021-A1-c" origId="SECURITY-45" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A2" desc="Properly seed pseudorandom number generators" id="OWASP2021-A2-a" origId="BD-SECURITY-RAND" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Protect against command injection" id="OWASP2021-A3-b" origId="BD-SECURITY-TDCMD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Avoid printing tainted data on the output console" id="OWASP2021-A3-c" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Protect against environment injection" id="OWASP2021-A3-d" origId="BD-SECURITY-TDENV" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Exclude unsanitized user input from format strings" id="OWASP2021-A3-e" origId="BD-SECURITY-TDINPUT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Protect against SQL injection" id="OWASP2021-A3-f" origId="BD-SECURITY-TDSQL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Avoid passing unvalidated binary data to log methods" id="OWASP2021-A3-a" origId="BD-SECURITY-LOG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A4" desc="Avoid passing sensitive data to functions that write to log files" id="OWASP2021-A4-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A5" desc="Properly use errno value" id="OWASP2021-A5-c" origId="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A5" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="OWASP2021-A5-d" origId="BD-SECURITY-XXEXRC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A5" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="OWASP2021-A5-a" origId="EXCEPT-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A5" desc="Empty 'catch' blocks should not be used" id="OWASP2021-A5-b" origId="EXCEPT-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A7" desc="Do not use weak encryption functions" id="OWASP2021-A7-a" origId="SECURITY-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A8" desc="Use care to ensure that LoadLibrary() will load the correct library" id="OWASP2021-A8-a" origId="SECURITY-04" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A9" desc="All exceptions should be rethrown or logged with standard logger" id="OWASP2021-A9-a" origId="EXCEPT-04" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="8;" cat="PARSER" desc="Parser warning" id="PARSER-WARNING" sev="4" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="PARSER" desc="Parser remark" id="PARSER-REMARK" sev="5" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not call delete on non-pointers" id="PB-13" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Properly terminate character strings" id="PB-21" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor" id="PB-23" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Operators should not return value by reference" id="PB-09" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The definition of a constructor shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor" id="PB-24" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Unsigned arithmetic shall not be used" id="PB-25" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Public and protected methods should not be invoked by class constructor" id="PB-26" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="A string literal shall not be modified" id="PB-27" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The following character sequences shall not appear in header file names: ', \, /*, //, or &quot;" id="PB-28" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The left-hand operand of a right-shift operator shall not have a negative value" id="PB-29" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not cast from or to incomplete class at the point of casting" id="PB-54" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not delete objects with incomplete class at the point of deletion" id="PB-55" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" id="PB-58" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Boolean condition always evaluates to the same value due to enumeration with only zero or only non-zero constants" id="PB-68" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PB" desc="Do not dereference pointer type expressions" id="PB-01" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not use assignments inside a(b), a[b], and cast" id="PB-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Using mixed types in ternary operator is not allowed" id="PB-03" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="PB" desc="Return value of a function must match declared return type" id="PB-05" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Assignment operator should have operands of compatible types" id="PB-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not assign function return value to a variable of incompatible type" id="PB-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not assign signed constants to unsigned integer variables" id="PB-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Don't treat arrays polymorphically" id="PB-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="27;" authUrg="0;" cat="PB" desc="Declared types of formal and actual parameters to functions must match" id="PB-11" sev="3" total="27"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not cast a signed char to an unsigned int" id="PB-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Incorrect End-Of-String (EOS) definition" id="PB-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Don't assign the dividend of two integers to a floating-point type" id="PB-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid unintentionally discarding the remainder of integer division" id="PB-15_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid assigning out-of-range value to char type" id="PB-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid assigning out-of-range value to unsigned char type" id="PB-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid overloading class methods on a pointer and a numerical type" id="PB-18" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not create inline non-member functions that contain local static data" id="PB-19" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not slice derived objects" id="PB-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not use increment and decrement expressions inside a(b), a[b], and cast" id="PB-22" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="More than one 'enum' type shall not be used as a switch condition or a label in a case statement" id="PB-30" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not call 'sizeof' on constants" id="PB-31" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not call 'sizeof' on a pointer type" id="PB-32" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid implicit type conversions in assignments involving enum types" id="PB-33" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid implicit type conversions in comparisons involving enum types" id="PB-33_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Third parameter to 'memcpy'/'strncpy'/'memmove' should not depend on second" id="PB-34" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Assignment operators shall not be used in conditions without brackets" id="PB-35" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The unbounded functions of library &lt;cstring> shall not be used" id="PB-37" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Narrow and wide string literals shall not be concatenated" id="PB-38" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="String literals with different encoding prefixes shall not be concatenated" id="PB-38_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference" id="PB-39" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="A function shall not return a pointer or a reference to a parameter that is passed by const reference" id="PB-39_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="An object of array type with a specified size should not decay to a pointer when it is passed as a function argument" id="PB-41" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="An object of array type should not decay to a pointer when it is passed as a function argument" id="PB-41_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="An object shall not be assigned to an overlapping object" id="PB-42" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" id="PB-43" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="PB-44" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function" id="PB-45" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="PB-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function" id="PB-47" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="PB-48" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="PB-49" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" id="PB-50" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Pointer arithmetic shall not be applied to pointers that address variables of non-array type" id="PB-51" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid overloading global functions on a pointer and a numerical type" id="PB-52" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid overloading namespace functions on a pointer and a numerical type" id="PB-53" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid implicit conversions from signed to unsigned type" id="PB-56" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="A pointer to an array of derived class objects should not be converted to a base class pointer" id="PB-57" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Missing comma in a string array initialization" id="PB-59" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Suspicious argument to malloc" id="PB-60" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Pointer arithmetic performed on freshly allocated memory" id="PB-61" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid function calls with incorrect argument order" id="PB-62" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Function address should not be compared to zero" id="PB-63" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The values returned by string comparison functions should be compared only to zero" id="PB-64" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" id="PB-65" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type" id="PB-65_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="PB-66_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The same code (after preprocessing) in both branches of if-else statement" id="PB-67" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="An element of an object shall not be initialized more than once" id="PB-69" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="PB-70" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not copy instances of structures containing a flexible array member" id="PB-71" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not call va_arg with an argument of the incorrect type" id="PB-72" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="PB-75" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="PB-75_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="PB-75_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="PB" desc="C-style strings shall not be used" id="PB-76" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Expression statements shall not be explicit calls to constructors of temporary objects only" id="PB-77" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types" id="PB-78" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid function declarations that are syntactically ambiguous" id="PB-79" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="PB-66_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not add or subtract a constant with a value greater than one from an iterator" id="PB-74" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="PB-73" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="A header file shall not contain definitions of functions or objects that are non-inline and have external linkage" id="PFO-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Use multiple include guards" id="PFO-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PFO" desc="An include file should not contain more than one class definition" id="PFO-03" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="File with extension '.c' may not include other files with extension '.c'" id="PFO-05" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Never include other files in a file with extension '.icc'" id="PFO-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="PFO" desc="Use multiple include guards with pattern based on the header file name" id="PFO-07" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Use mechanism that prevents multiple inclusion of the file i.e. include guards or &quot;#pragma once&quot; preprocessor directive" id="PFO-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="&quot;#pragma once&quot; preprocessor directive should not be used in source files" id="PFO-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PFO" desc="Do not define more than on class in a header file" id="PFO-10" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="PFO" desc="Every implementation file should declare a local constant string that describes the file" id="PFO-04" sev="5" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Don't use hard coded value of offset in structures" id="PORT-03" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Don't use hex constant '0xffffffff' as an error marker" id="PORT-04" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="A pointer to a long should not be casted to an int pointer" id="PORT-05" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not cast an int pointer to a long pointer" id="PORT-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier" id="PORT-26" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Assigning result of ints operation to long without casting at least one of the ints is not allowed" id="PORT-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not assign a long int to an int" id="PORT-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not pass long casted to an int in function call" id="PORT-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Constant assignment to long should not involve int literals" id="PORT-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not initialize a long int with int literals" id="PORT-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not assign the value from 32 bit multiplication to long type" id="PORT-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="14;" authUrg="0;" cat="PORT" desc="The type int shall always be declared as unsigned int or signed int" id="PORT-13" sev="3" total="14"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Avoid conversions from &quot;shorter&quot; type to &quot;longer&quot; type in assignment" id="PORT-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not cast from &quot;shorter&quot; type to &quot;longer&quot; type" id="PORT-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PORT" desc="Avoid conversions from a &quot;shorter&quot; type to a &quot;longer&quot; type in function calls" id="PORT-16" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Don't use 'i64' or 'L' suffixes directly" id="PORT-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Instead of casting a long type operand of an expression to int cast the result of the expression" id="PORT-19" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not declare variables of long type directly" id="PORT-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not assign a long value to a double" id="PORT-21" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="The names of identifiers should not be longer than 64 characters" id="PORT-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Avoid implicit conversions to a type of narrower size" id="PORT-27" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Avoid conversions of constant values to a narrower type" id="PORT-28" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="A pointer to a structure should not be passed to a function that writes data to a file" id="PORT-29" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Type long double shall not be used" id="PORT-32" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Type wchar_t shall not be used" id="PORT-33" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C++ external identifiers should differ in the first 64 characters" id="PORT-34_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C++ internal identifiers should differ from external identifiers in the first 64 characters" id="PORT-34_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C++ internal identifiers declared in the same scope should differ in the first 64 characters" id="PORT-34_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C external identifiers should differ in the first 31 characters" id="PORT-35_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C internal identifiers should differ from external identifiers in the first 31 characters" id="PORT-35_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C internal identifiers declared in the same scope should differ in the first 31 characters" id="PORT-35_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="The names of identifiers should not be longer than 31 characters" id="PORT-36_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="The names of macro identifiers should not be longer than 31 characters" id="PORT-36_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not throw an exception across execution boundaries" id="PORT-30" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not pass a nonstandard-layout type object across execution boundaries" id="PORT-31" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Use capital 'L' instead of lowercase 'l' to indicate long" id="PORT-01" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Use arrays of int types instead of large arrays of longs" id="PORT-22" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Use arrays of int types instead of dynamic allocated large arrays of longs" id="PORT-23" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Don't use large arrays of pointers to bool, char, short, int and float types" id="PORT-24" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Don't use macros in include statement" id="PREPROC-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="In a macro function, use parentheses before and after multiplication or division" id="PREPROC-05" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Do not allow absolute or relative path names in #include statements" id="PREPROC-06" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="PREPROC" desc="The #include directive shall use the &lt;filename.h> notation to include header files" id="PREPROC-09" sev="2" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="PREPROC" desc="Avoid using macro definitions" id="PREPROC-01" sev="3" total="16"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="PREPROC" desc="The #include pre-processor directive will only be used to include header (*.h) files" id="PREPROC-08" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="PREPROC-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="PREPROC" desc="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" id="PREPROC-10_b" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="PREPROC" desc="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="PREPROC-10_c" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="PREPROC" desc="The #ifdef, #else, #elif preprocessor directives should not be used" id="PREPROC-11" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="PREPROC" desc="The #if preprocessor directive should not be used" id="PREPROC-11_b" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="PREPROC" desc="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" id="PREPROC-12" sev="3" total="16"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Macro should not contain token pasting, variable argument list nor recursive macro calls" id="PREPROC-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="14;" authUrg="0;" cat="PREPROC" desc="All macros must expand into complete syntactic units" id="PREPROC-14" sev="3" total="14"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Pointer dereference operations may not be hidden in macro definitions" id="PREPROC-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" id="PREPROC-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PREPROC" desc="The input/output library stdio.h shall not be included" id="PREPROC-18" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" id="PREPROC-19" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Match the filename in a #include directive to the one on the filesystem" id="PREPROC-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="#error directive shall not be used" id="PREPROC-22" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="The #pragma directive shall not be used" id="PREPROC-23" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="All macro identifiers in preprocessor directives shall be defined before use, except in #ifdef and #ifndef preprocessor directives and the defined() operator" id="PREPROC-24" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="#undef shall not be used" id="PREPROC-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="PREPROC" desc="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" id="PREPROC-26" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Don't redefine primitive types" id="PREPROC-03" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PREPROC" desc="Don't define part of statement" id="PREPROC-04" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" id="PREPROC-17" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Incorrect 'NULL' definition" id="PREPROC-07" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Avoid token concatenation that may produce universal character names" id="PREPROC-21" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="The methods inside the SIGNAL and SLOT macros have to exist" id="QT-04" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not force thread termination by calling QThread::terminate()" id="QT-07" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not call new on QMutexLocker" id="QT-09" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not directly set specific Widget attributes that are set by Qt kernel" id="QT-12" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Every QObject subclass should contain a Q_OBJECT macro" id="QT-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="QObject must not be inherited more than one time" id="QT-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="It's only possible to connect a signal to a slot or a signal to another signal" id="QT-03" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Mark signal emissions with the keyword &quot;emit&quot; to distinguish a signal emission from a normal method call" id="QT-05" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not set Idle or Critical priority to QThreads. Use High/Low/Med only" id="QT-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="If using lock on a mutex in a function, release the lock in the same function" id="QT-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Declare a copy constructor and operator= for any Qt - inherited objects that have pointers" id="QT-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Never mix const and non-const iterators in assignment" id="QT-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="If you use Q_DECLARE_FLAGS, you must also use Q_DECLARE_OPERATORS_FOR_FLAGS" id="QT-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Q_DECLARE_OPERATORS_FOR_FLAGS must be in the global namespace, Q_DECLARE_FLAGS inside the enum's namespace" id="QT-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="The getters and setters of a Q_PROPERTY must exist and the types must match" id="QT-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Properties of enum types must use Q_ENUMS" id="QT-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Non-const function should not be called on the Qt object" id="QT-18" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not use setWindowFlags function on a Widget" id="QT-11" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Never use gets()" id="SECURITY-16" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Use care to ensure that LoadLibrary() will load the correct library" id="SECURITY-04" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid calling functions printf/wprintf with only one argument other than string constant" id="SECURITY-05" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using functions fprintf/fwprintf with only two parameters, when second parameter is a variable" id="SECURITY-08" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using the 'data()' function from the 'string' class of the standard library" id="SECURITY-09" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using the 'vfork()' function" id="SECURITY-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using unsecured shell functions that may be affected by shell metacharacters" id="SECURITY-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using unsafe string functions which may cause buffer overflows" id="SECURITY-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="SECURITY" desc="Avoid using unsafe string functions that do not check bounds" id="SECURITY-13" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="SECURITY" desc="Do not use scanf and fscanf functions without specifying variable size in format string" id="SECURITY-14" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="SECURITY-15" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid passing non-const parameters or variables into exec" id="SECURITY-17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid passing dynamically created strings into exec" id="SECURITY-18" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Usage of functions prone to race is not allowed" id="SECURITY-19" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid passing user input into methods as parameters" id="SECURITY-20" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use 'syslog' function for logging purposes" id="SECURITY-21" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use mbstowcs() function" id="SECURITY-22" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Beware of functions which may return the current directory or the windows directory" id="SECURITY-23" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using InitializeCriticalSection" id="SECURITY-24" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using thread-unsafe functions" id="SECURITY-25" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use 'setuid' in source code" id="SECURITY-26" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Don't use chmod(), chown(), chgrp()" id="SECURITY-27" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Standard random number generators should not be used to generate randomness for security reasons" id="SECURITY-28" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use obsolete C routine ulimit()" id="SECURITY-29" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using 'getpw' function in program code" id="SECURITY-30" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use 'cuserid' function" id="SECURITY-31" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using obsolete C routine 'usleep'" id="SECURITY-32" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Usage of functions which do not properly handle non-NULL terminated strings is not allowed" id="SECURITY-33" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using environment variables" id="SECURITY-34" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="SECURITY" desc="Don't trust any value of command line if attacker can set them" id="SECURITY-35" sev="2" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Never use unfiltered data from an untrusted user as the format parameter" id="SECURITY-36" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use weak encryption functions" id="SECURITY-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="SECURITY" desc="Untrusted data is used as a loop boundary" id="SECURITY-38" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="The 'asctime()' and 'asctime_r()' functions should not be used" id="SECURITY-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="The random number generator functions 'rand()' and 'srand()' should not be used" id="SECURITY-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use the rand() function for generating pseudorandom numbers" id="SECURITY-02_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid functions which use time from MFC library" id="SECURITY-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="SECURITY-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Use secure temporary file name functions" id="SECURITY-39" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Specify the access permission bits if a file is created using the 'open' or 'openat' system call" id="SECURITY-42" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="The function 'pthread_setcanceltype()' should not be called with 'PTHREAD_CANCEL_ASYNCHRONOUS' argument" id="SECURITY-43" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Observe correct revocation order while relinquishing privileges" id="SECURITY-44" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Ensure that privilege relinquishment is successful" id="SECURITY-45" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="A pointer to a structure should not be passed to a function that can copy data to the user space" id="SECURITY-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Use correct integer precisions when checking the right hand operand of the shift operator" id="SECURITY-47" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used with an argument other than '0' (null pointer)" id="SECURITY-48" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used" id="SECURITY-48_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use the 'char' buffer to store input from 'std::cin'" id="SECURITY-51" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="SECURITY-52" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Usage of system properties (environment variables) should be restricted" id="SECURITY-03" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Call 'umask' before calling 'mkstemp'" id="SECURITY-40" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Call 'chdir' if you call 'chroot'" id="SECURITY-41" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Use the 'cnd_signal()' function with a unique condition variable" id="SECURITY-49" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use the 'notify_one()' function when multiple threads are waiting on the same condition variable" id="SECURITY-50" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="To make copying efficient, correct, and immune to the slicing problem create containers of pointers instead of containers of objects" id="STL-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Call empty instead of checking size() against zero" id="STL-03" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Avoid using iterative calls to insert in an explicit loop" id="STL-04" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Almost all uses of copy where the destination range is specified using an insert iterator should be replaced with calls to range member functions" id="STL-05" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Instead of anonymous istream_iterator objects use istream_iterator names when used as function parameters" id="STL-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="When using containers of newed pointers, remember to delete the pointers before the container is destroyed" id="STL-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Never create containers of auto_ptrs" id="STL-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Avoid using remove algorithm with list and standard associative containers" id="STL-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="STL" desc="Prefer vector and string to dynamically allocated arrays" id="STL-10" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Use reserve to avoid unnecessary reallocations" id="STL-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Each vector and string should be checked if it is not empty before it is passed to C function" id="STL-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Avoid using vector&lt;bool>" id="STL-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Specify comparison types for associative containers of pointers" id="STL-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="For associative containers never use comparison function returning true for equal values" id="STL-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="For associative containers never use comparison function returning true for equal values" id="STL-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Prefer iterator to const iterator, reverse_iterator, and const_reverse_iterator" id="STL-18" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Use distance and advance to convert a container's const_iterators to iterators" id="STL-19" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Make sure destination ranges are big enough" id="STL-22" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Follow remove-like algorithms by erase to remove elements from a container" id="STL-23" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Avoid using remove and similar algorithms (i.e., remove_if and unique) on containers of dynamically allocated pointers" id="STL-24" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Proper implementation of copy_if should not be based on returning the remove_copy_if with a not1 in front of the predicate" id="STL-26" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="If accumulate() is used on a container of floating point values, use floating point value as initial one" id="STL-27" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Design functor classes for pass-by-value" id="STL-28" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Make predicates const pure functions" id="STL-29" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Each functor class should has only one operator() function, and it's parameter and return types should be passed to unary_function or binary_function" id="STL-30" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="You must employ ptr_fun, mem_fun, or mem_fun_ref whenever you pass a function to an STL component" id="STL-31" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Make sure less&lt;T> means operator&lt;" id="STL-32" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Prefer algorithm calls to hand-written loops" id="STL-33" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Prefer member functions to algorithms with the same names" id="STL-34" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Do not rely on the conversion of count()'s nonzero values to true and zero to false" id="STL-35" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Do not use an iterator range that isn't really a range" id="STL-36" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="STL" desc="C-style arrays shall not be used" id="STL-37" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Use != instead of &lt; to compare iterators" id="STL-38" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Use traits classes in conjunction with overloading" id="STL-39" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="When calling swap, employ a using declaration for std::swap, then call swap without namespace qualification" id="STL-40" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Do not declare the non-member to be an overloading of std::swap" id="STL-41" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Member version of swap should never throw exceptions" id="STL-42" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Consider using vector&lt;char> instead of string" id="STL-11" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="It is necessary to be careful when using reverse_iterator's base iterator for erasure purposes" id="STL-20" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Consider istreambuf_iterators for character-by-character input" id="STL-21" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="If you pass a sorted range to an algorithm that also takes a comparison function, be sure that the comparison function you pass behaves the same as the one you used to sort the range" id="STL-25" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Instead of trying to write the container-independent code use class encapsulation" id="STL-01" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Factor parameter-independent code out of templates" id="TEMPL-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Define non-member functions inside templates when type conversions are desired" id="TEMPL-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Do not overload functions within a template class" id="TEMPL-03" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="In template global functions use 'typename' to identify nested dependent type names" id="TEMPL-04" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="In template classes use 'typename' to identify nested dependent type names" id="TEMPL-05" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Don't change default arguments of virtual functions in template classes" id="TEMPL-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter" id="TEMPL-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="The viable function set for a function call should either contain no function specializations, or only contain function specializations" id="TEMPL-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Overloaded function templates shall not be explicitly specialized" id="TEMPL-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template" id="TEMPL-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" id="TEMPL-11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" id="TEMPL-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Do not declare non-member generic functions in associated namespaces" id="TEMPL-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="The function shall resolve to a function declared previously in the translation unit" id="TEMPL-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Declare 'extern' an explicitly instantiated template" id="TEMPL-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Template specialization shall be declared in the same file as the primary template or a user-defined type, for which the specialization is declared" id="TEMPL-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Use a trailing return type syntax if the return type is preceded by the 'typename' keyword" id="TEMPL-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations" id="TEMPL-18" sev="3" total="0"/>
         </RulesList>
         <SeverityList>
            <Severity authTot="53;" authUrg="0;" id="1" total="53"/>
            <Severity authTot="777;" authUrg="11;" id="2" total="777"/>
            <Severity authTot="1432;" authUrg="28;" id="3" total="1432"/>
            <Severity authTot="460;" authUrg="10;" id="4" total="460"/>
            <Severity authTot="414;" authUrg="1;" id="5" total="414"/>
         </SeverityList>
      </Rules>
      
  <Supps/>

      
  <StdViols>
    <StdViol msg="The assertion density is lower than two assertions per function" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="1" sev="3" auth="lyao" locRef="1" rule="METRICS-31" lnHash="329732047" rule.header="The assertion density of the code should average to a minimum of two assertions per function" tool="c++test" lineHash="329732047" unbViolId="33f1ebf2-775d-311f-9385-d243c198f4b4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a615d509-a2e3-3b3b-81a1-705ad5ed9c8f" locEndPos="1" locType="sr" hash="972801700" locEndLn="1" goals="0,"/>
    <StdViol msg="The filename 'DeadLock.cpp' should be in lowercase" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="1" sev="3" auth="lyao" locRef="1" rule="NAMING-03" lnHash="329732047" rule.header="Use lowercase for file names" tool="c++test" lineHash="329732047" unbViolId="04ea27a5-a9a9-31b5-baac-987ca0ccfc6d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7fd4c2d5-bdfd-305a-9890-d7042b158939" locEndPos="1" locType="sr" hash="972801700" locEndLn="1" goals="0,"/>
    <StdViol msg="Implementation file 'DeadLock.cpp' should have the file name extension &quot;.cc&quot;" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="1" sev="3" auth="lyao" locRef="1" rule="NAMING-38" lnHash="329732047" rule.header="Implementation files in C++ always have the file name extension &quot;.cc&quot;" tool="c++test" lineHash="329732047" unbViolId="d35aa8b0-dced-3d68-99a2-bb84c1d1a49a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac58e8bd-a070-31cf-8bcc-48029ab2686a" locEndPos="1" locType="sr" hash="972801700" locEndLn="1" goals="0,"/>
    <StdViol msg="Implementation file 'DeadLock.cpp' should declare a local constant string that begins from characters &quot;@(#)&quot; " ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="1" sev="5" auth="lyao" locRef="1" rule="PFO-04" lnHash="329732047" rule.header="Every implementation file should declare a local constant string that describes the file" tool="c++test" lineHash="329732047" unbViolId="da68e7d8-a2f8-3d9e-a1f1-f8f2cae8f8ce" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0b4b21f-3cd7-3e79-885b-1fbc70346ce1" locEndPos="1" locType="sr" hash="972801700" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the copyright information at the begin of file 'DeadLock.cpp'" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="1" sev="3" auth="lyao" locRef="1" rule="COMMENT-02" lnHash="329732047" rule.header="Provide copyright information" tool="c++test" lineHash="329732047" unbViolId="a6fbe724-d6cd-37fd-acc3-f295b4cec103" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="269c8935-97ee-3559-a42b-5362a6bc6c45" locEndPos="1" locType="sr" hash="972801700" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the copyright information at the begin of file 'DeadLock.cpp'" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="1" sev="3" auth="lyao" locRef="1" rule="JSF-133_b" lnHash="329732047" rule.header="Every source file will contain copyright information" tool="c++test" lineHash="329732047" unbViolId="38f19537-df9d-3ce0-a466-a6b582b2f6b6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd2a50ee-4be0-39af-b69f-b46aa8fae31e" locEndPos="1" locType="sr" hash="972801700" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the information on the file at the begin of file 'DeadLock.cpp'" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="1" sev="3" auth="lyao" locRef="1" rule="COMMENT-03" lnHash="329732047" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="329732047" unbViolId="86e54956-a32c-390a-b28f-c13983e37f0e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac7153b1-5b09-3e94-b925-168820eb79d0" locEndPos="1" locType="sr" hash="972801700" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the information on the file at the begin of file 'DeadLock.cpp'" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="1" sev="3" auth="lyao" locRef="1" rule="JSF-133_a" lnHash="329732047" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="329732047" unbViolId="1fbfc739-bf35-3ee5-93e2-88d04a08c0f0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0387ac70-6516-3775-8435-9a793c6fc490" locEndPos="1" locType="sr" hash="972801700" locEndLn="1" goals="0,"/>
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Shapes.hpp&quot;" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="1" sev="3" auth="lyao" locRef="1" rule="JSF-032" lnHash="329732047" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="329732047" unbViolId="7da45ef4-e322-39f2-a8e2-7ae248d1a285" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2c7a736-a2ad-3914-becf-4cebe5b7ce18" locEndPos="1" locType="sr" hash="972801700" locEndLn="1" goals="0,"/>
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Shapes.hpp&quot;" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="1" sev="3" auth="lyao" locRef="1" rule="PREPROC-08" lnHash="329732047" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="329732047" unbViolId="5cdf43b5-4602-3b0c-b039-ccda4f168440" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf9a2bd2-15a3-38ef-ab32-c73589fa7b87" locEndPos="1" locType="sr" hash="972801700" locEndLn="1" goals="0,"/>
    <StdViol msg="Disallowed #include notation is being used: &quot;Shapes.hpp&quot;" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="1" sev="2" auth="lyao" locRef="1" rule="PREPROC-09" lnHash="329732047" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="329732047" unbViolId="972a4948-a314-3514-b572-7bf1e73640d1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce22dec7-388f-3799-b2ed-5cb457a5a1d4" locEndPos="1" locType="sr" hash="972801700" locEndLn="1" goals="0,"/>
    <StdViol msg="Disallowed #include notation is being used: &quot;Shapes.hpp&quot;" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="1" sev="2" auth="lyao" locRef="1" rule="JSF-033" lnHash="329732047" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="329732047" unbViolId="95094b71-613f-361d-9aee-c6c655768308" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f728694-51bf-3b77-b712-3f4bb7ee2609" locEndPos="1" locType="sr" hash="972801700" locEndLn="1" goals="0,"/>
    <MetViol msg="Value 152 is out of acceptable range: 'lower than 50'" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="1" sev="3" auth="lyao" locRef="1" rule="METRIC.NOPLIF" lnHash="329732047" rule.header="Physical Lines in Files" tool="c++test" lineHash="329732047" unbViolId="6c729835-8887-3bcf-9038-ec5d2425e5af" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.metrics" lang="cpp" violId="1e0929cd-f72e-3c7e-8811-102e5a9c2866" locType="sr" locEndPos="0" hash="972801700" locEndLn="2" goals="0,"/>
    <StdViol msg="#if pre-processor directive should not be used" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="3" sev="3" auth="lyao" locRef="1" rule="PREPROC-10_c" lnHash="-1674050737" rule.header="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1674050737" unbViolId="e1b44214-b2ae-31d6-be10-bf91f4b44222" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db0a2aae-1c8f-3382-a200-94e1328ba904" locEndPos="1" locType="sr" hash="972801700" locEndLn="3" goals="0,"/>
    <StdViol msg="#if pre-processor directive should not be used" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="3" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_1_e" lnHash="-1674050737" rule.header="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1674050737" unbViolId="5dab284a-5c0b-304f-9e85-551e1ed9bebd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cfb60653-beb8-33e4-9ba3-83bb5a325515" locEndPos="1" locType="sr" hash="972801700" locEndLn="3" goals="0,"/>
    <StdViol msg="#if pre-processor directive should not be used" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="3" sev="3" auth="lyao" locRef="1" rule="HICPP-16_1_1-f" lnHash="-1674050737" rule.header="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1674050737" unbViolId="087249fb-723e-375a-883c-f4352934bfc7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e50dd9a6-1784-3257-ac6b-162394a46ba8" locEndPos="1" locType="sr" hash="972801700" locEndLn="3" goals="0,"/>
    <StdViol msg="The #if preprocessor directive is used" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="3" sev="3" auth="lyao" locRef="1" rule="PREPROC-11_b" lnHash="-1674050737" rule.header="The #if preprocessor directive should not be used" tool="c++test" lineHash="-1674050737" unbViolId="8d290295-64f8-312d-8dd4-0c80359e53a3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="563596de-82e6-367a-98ed-e288a3aed37f" locEndPos="1" locType="sr" hash="972801700" locEndLn="3" goals="0,"/>
    <StdViol msg="The #if preprocessor directive is used" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="3" sev="2" auth="lyao" locRef="1" rule="JSF-026_b" lnHash="-1674050737" rule.header="The #if preprocessor directive should not be used" tool="c++test" lineHash="-1674050737" unbViolId="6215a757-1433-3283-91db-5f32812d35bf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="457f0031-85e2-34c8-bd1b-9e85ee608924" locEndPos="1" locType="sr" hash="972801700" locEndLn="3" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="7" sev="3" auth="lyao" locRef="1" rule="JSF-031" lnHash="-1431583748" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1431583748" unbViolId="74246df9-f3b9-3021-a127-f6e9369b3150" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b54b1371-6676-3347-ad2d-b8a9615028b1" locEndPos="1" locType="sr" hash="972801700" locEndLn="7" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="7" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_1_a" lnHash="-1431583748" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1431583748" unbViolId="e7832fb3-2a7f-3f38-af6a-a31ecc6db95d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="afacd667-8ffc-33b1-96ff-dc353b821605" locEndPos="1" locType="sr" hash="972801700" locEndLn="7" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="7" sev="3" auth="lyao" locRef="1" rule="HICPP-16_1_1-a" lnHash="-1431583748" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1431583748" unbViolId="e1611039-65f9-3bdb-9e6c-69cb18bf4811" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24f639b9-5204-3a6a-aeb9-18948b47bd1e" locEndPos="1" locType="sr" hash="972801700" locEndLn="7" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="7" sev="3" auth="lyao" locRef="1" rule="PREPROC-01" lnHash="-1431583748" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1431583748" unbViolId="ee876b4c-436b-3fff-8a3d-c06c6a22c28b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="200d97d8-9fb5-332e-863e-e71d7c85301e" locEndPos="1" locType="sr" hash="972801700" locEndLn="7" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="7" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A16_0_1-d" lnHash="-1431583748" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1431583748" unbViolId="fd333a57-ae51-313b-a7ef-8ebc3a930f9c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad70c8c4-3a8c-31ef-810a-184347d7c4c7" locEndPos="1" locType="sr" hash="972801700" locEndLn="7" goals="0,"/>
    <StdViol msg="Do not use #define to define constant: 'THREAD'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="7" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_2" lnHash="-1431583748" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1431583748" unbViolId="0c98ae0e-0546-397d-a58a-08fa74e1e7f6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8150eef7-f3da-36a4-bb11-004e30efc919" locEndPos="1" locType="sr" hash="972801700" locEndLn="7" goals="0,"/>
    <StdViol msg="Do not use #define to define constant: 'THREAD'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="7" sev="3" auth="lyao" locRef="1" rule="PREPROC-12" lnHash="-1431583748" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1431583748" unbViolId="4e0bbe6f-1b0b-3372-9ade-27d1aee2360c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0b3429c-737e-3eef-83c4-8df11f71910c" locEndPos="1" locType="sr" hash="972801700" locEndLn="7" goals="0,"/>
    <StdViol msg="Not all body of macro 'THREAD' is enclosed in braces" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="7" sev="3" auth="lyao" locRef="1" rule="PREPROC-14" lnHash="-1431583748" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-1431583748" unbViolId="730bc43d-5de0-37da-883c-ca3e2f97a077" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5e86687-5531-3b27-bc99-891999d0ed79" locEndPos="1" locType="sr" hash="972801700" locEndLn="7" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="8" sev="3" auth="lyao" locRef="1" rule="JSF-031" lnHash="-823604806" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-823604806" unbViolId="6f2d83ff-88e4-32ed-a204-8c1af417f808" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="309e1364-00c4-3628-9516-10a5f3970817" locEndPos="1" locType="sr" hash="972801700" locEndLn="8" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="8" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_1_a" lnHash="-823604806" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-823604806" unbViolId="1f7e3655-3cdd-3e14-bcf1-dd243fee9892" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e406bb2f-a2ad-30cd-9ab5-427fce16ada9" locEndPos="1" locType="sr" hash="972801700" locEndLn="8" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="8" sev="3" auth="lyao" locRef="1" rule="HICPP-16_1_1-a" lnHash="-823604806" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-823604806" unbViolId="4e888d60-9db9-3445-bae9-5afbe529cd4b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="790aa3c9-965a-3fc3-88f4-8214da3c2d16" locEndPos="1" locType="sr" hash="972801700" locEndLn="8" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="8" sev="3" auth="lyao" locRef="1" rule="PREPROC-01" lnHash="-823604806" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-823604806" unbViolId="f6aa1a6d-8332-3cc4-a530-5d6e78c97a77" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ecc784d-4446-3280-9151-defafa9742f4" locEndPos="1" locType="sr" hash="972801700" locEndLn="8" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="8" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A16_0_1-d" lnHash="-823604806" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-823604806" unbViolId="89ca3cf4-22f0-33a9-bb1a-446cf0f5fe1a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="744e583a-4277-3e37-9c0d-86252c122496" locEndPos="1" locType="sr" hash="972801700" locEndLn="8" goals="0,"/>
    <StdViol msg="Do not use #define to define constant: 'THREAD_RETURN_TYPE'" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="8" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_2" lnHash="-823604806" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-823604806" unbViolId="395369ab-3fe9-357d-9a52-dbd816853fc1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f40f9c8b-1907-3b82-8625-d7111020f801" locEndPos="1" locType="sr" hash="972801700" locEndLn="8" goals="0,"/>
    <StdViol msg="Do not use #define to define constant: 'THREAD_RETURN_TYPE'" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="8" sev="3" auth="lyao" locRef="1" rule="PREPROC-12" lnHash="-823604806" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-823604806" unbViolId="e99e14a2-f87a-3bb8-b2ac-442125ff8309" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3198e78-05e6-3963-9638-3296984ec5f8" locEndPos="1" locType="sr" hash="972801700" locEndLn="8" goals="0,"/>
    <StdViol msg="Not all body of macro 'THREAD_RETURN_TYPE' is enclosed in braces" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="8" sev="3" auth="lyao" locRef="1" rule="PREPROC-14" lnHash="-823604806" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-823604806" unbViolId="a98653fa-003f-3945-8e99-8a19e840b7f4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5cef23ef-9749-3ca6-9a72-21b31e376fee" locEndPos="1" locType="sr" hash="972801700" locEndLn="8" goals="0,"/>
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_0_4" lnHash="371252460" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="371252460" unbViolId="59a17ef8-5fc7-3012-a1d8-300e81ad3b79" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eff51602-1c14-35f1-9e42-30dee4bb58d4" locEndPos="1" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="4" auth="lyao" locRef="1" rule="MISRAC2012-DIR_4_9-a" lnHash="371252460" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="371252460" unbViolId="2e63a4a9-8fc2-36ee-8bab-e709f01313a0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d618f35e-914f-3996-9d23-456a4e2eb61b" locEndPos="1" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="3" auth="lyao" locRef="1" rule="MISRA2004-19_7" lnHash="371252460" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="371252460" unbViolId="3a86577f-6dcb-33e3-9d31-6b1e8a1164cb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04558615-ed92-3e28-be86-896b65f125bc" locEndPos="1" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="2" auth="lyao" locRef="1" rule="JSF-029" lnHash="371252460" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="371252460" unbViolId="46e43b5a-16e4-3873-8b0c-d6d67a58721d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e99576fe-dfcf-32b0-b4d1-b9b0c12681ed" locEndPos="1" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="4" auth="lyao" locRef="1" rule="MISRA2012-DIR-4_9" lnHash="371252460" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="371252460" unbViolId="660c4f42-837a-37af-9524-fc862b1c94af" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="edcc23d2-4098-3661-a738-7624f7d4b0a5" locEndPos="1" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="3" auth="lyao" locRef="1" rule="CERT_C-PRE00-a" lnHash="371252460" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="371252460" unbViolId="fbff5d29-338f-3d6b-a637-45f53e98837e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee6bfca9-3e61-332c-9f4c-d69742539644" locEndPos="1" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Body of macro 'THREAD_CREATE' is defined without parentheses" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="3" auth="lyao" locRef="1" rule="MISRA-096" lnHash="371252460" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="371252460" unbViolId="2483711b-0ff3-3c8c-b2cc-8b8fab331368" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0876f543-7482-3f43-9276-922742abe989" locEndPos="1" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Body of macro 'THREAD_CREATE' is defined without parentheses" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="1" auth="lyao" locRef="1" rule="CERT_C-PRE02-a" lnHash="371252460" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="371252460" unbViolId="732a7721-2f70-3569-a58b-9f1f481dd133" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90db4788-fd5e-3b16-8504-5f728a62fbaa" locEndPos="1" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="3" auth="lyao" locRef="1" rule="JSF-031" lnHash="371252460" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="371252460" unbViolId="8d685c6e-1c9f-30cf-86b8-c53ddc069ce0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab6f041e-039f-30e6-b2fd-ff5f2275a356" locEndPos="1" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_1_a" lnHash="371252460" rule.header="Avoid using macro definitions" tool="c++test" lineHash="371252460" unbViolId="0adae35d-97d2-3e8a-b3b0-f2783ce48c16" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="44ef583f-f67d-378b-adc4-cfa1082bc73e" locEndPos="1" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="3" auth="lyao" locRef="1" rule="HICPP-16_1_1-a" lnHash="371252460" rule.header="Avoid using macro definitions" tool="c++test" lineHash="371252460" unbViolId="1a4330d2-1a61-3208-8f5d-0226fe9a1006" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8d7c1b1-a1da-34e7-9915-35050b141715" locEndPos="1" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="3" auth="lyao" locRef="1" rule="PREPROC-01" lnHash="371252460" rule.header="Avoid using macro definitions" tool="c++test" lineHash="371252460" unbViolId="f96a9ff6-e558-33b9-962d-cc89ae54b19c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="263f19d2-898f-3b2e-ac42-f4850047c546" locEndPos="1" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A16_0_1-d" lnHash="371252460" rule.header="Avoid using macro definitions" tool="c++test" lineHash="371252460" unbViolId="03469507-cac4-3c4b-b7f6-41b1c2a0ae47" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9b7738b8-4a7f-3d9c-bf60-7ca126545294" locEndPos="1" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_2" lnHash="371252460" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="371252460" unbViolId="a7bb41de-8867-37db-8e81-a3126091aec1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="603d0bfb-bcdc-3f09-8889-7c618bcb23bc" locEndPos="1" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="3" auth="lyao" locRef="1" rule="PREPROC-12" lnHash="371252460" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="371252460" unbViolId="72e89a6f-c3d5-3655-a8de-a234c0fb7906" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d9ff2e3-ffa4-3d0b-849a-c1d3868a3057" locEndPos="1" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Not all body of macro 'THREAD_CREATE' is enclosed in braces" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="3" auth="lyao" locRef="1" rule="PREPROC-14" lnHash="371252460" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="371252460" unbViolId="26ebef9b-8145-3fbf-a5c7-5fa6ac841407" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1766c7e-4ca9-3664-9fee-5d0ab6957bc0" locEndPos="1" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="3" auth="lyao" locRef="1" rule="MISRA2004-19_10" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="c0f60c14-d295-3c52-9689-baf87959aece" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0b3ebe2-9129-3a29-9e8c-f0d4fdf06f5f" locEndPos="37" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_0_6" lnHash="371252460" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="42a858ab-e3b4-343a-b44e-0ecd2728bad0" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42a8c41a-bf92-3592-8875-73cc9dd201d7" locEndPos="37" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-20_7" lnHash="371252460" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="371252460" unbViolId="501c5c7a-c3b1-3ff1-a2e8-43d0593bf553" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2d1a773-c418-35ff-8f1c-11dcf7699e55" locEndPos="37" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M16_0_6-a" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="1322287d-f05f-36f1-b7c7-0cb69204860e" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="379b6094-5ead-3dc2-b0cb-3f124fec33c7" locEndPos="37" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="1" auth="lyao" locRef="1" rule="CERT_C-PRE01-a" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="1275abff-99b0-333b-b46a-7a1b40cbdb7d" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="024e4235-bafa-3c40-a59d-c7a20005c33e" locEndPos="37" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_20_7-a" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="7faf7607-a751-3e0c-a56a-a85db76b23f5" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2b1ced3-c170-3c6a-b297-791740bfbf86" locEndPos="37" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="3" auth="lyao" locRef="1" rule="MISRA2004-19_10" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="bea368ef-6976-3b0d-9127-1ba9454ca8e6" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a7f2c18-4ea0-3498-89dc-1f40515878ba" locEndPos="65" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_0_6" lnHash="371252460" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="cd46ceec-c88a-3c3f-9c34-126535440ad1" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6c2d552-fd62-3b4b-9368-761b03258b2f" locEndPos="65" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-20_7" lnHash="371252460" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="371252460" unbViolId="40bcc6cb-9da3-3583-bcab-e1290b78e1e8" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96ac972a-614d-3d91-a020-95d635d9bd04" locEndPos="65" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M16_0_6-a" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="cb022d61-cc4c-340b-a752-912ba5d22a33" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3fa82d64-bc43-3613-9a5d-f6d4032b8bbb" locEndPos="65" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="1" auth="lyao" locRef="1" rule="CERT_C-PRE01-a" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="a4920501-4059-3a4b-8cc8-446cb2017103" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="652323ec-224e-3b12-9fe2-c90c5cf6489d" locEndPos="65" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="9" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_20_7-a" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="4e6d0f58-0538-3bf9-ba50-9f11710973b0" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c5dd536-1e00-3143-84f3-f69f36816207" locEndPos="65" locType="sr" hash="972801700" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="11" sev="3" auth="lyao" locRef="1" rule="JSF-031" lnHash="1036666232" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1036666232" unbViolId="b8a3f175-cb2e-36a6-b63d-6017463ffb34" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="46ae99f1-c007-32db-883d-179f4f333610" locEndPos="1" locType="sr" hash="972801700" locEndLn="11" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="11" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_1_a" lnHash="1036666232" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1036666232" unbViolId="1b46f266-52bf-3545-8c81-6c0b3f06af07" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a47a3f0-4a98-3e5c-8181-130993c48427" locEndPos="1" locType="sr" hash="972801700" locEndLn="11" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="11" sev="3" auth="lyao" locRef="1" rule="HICPP-16_1_1-a" lnHash="1036666232" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1036666232" unbViolId="a8428bbf-452e-39cf-a5b6-60a48f041ac6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dfd68977-d974-3554-87b2-c12c8146ff52" locEndPos="1" locType="sr" hash="972801700" locEndLn="11" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="11" sev="3" auth="lyao" locRef="1" rule="PREPROC-01" lnHash="1036666232" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1036666232" unbViolId="5125daa0-394f-3592-98a5-144f1aa1f935" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68436888-34e8-3bb5-9ac1-a8ae665f4527" locEndPos="1" locType="sr" hash="972801700" locEndLn="11" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="11" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A16_0_1-d" lnHash="1036666232" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1036666232" unbViolId="5e0e9cf5-2dd9-3d3c-8a47-730c36efa557" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5996055-47db-323a-aad6-317224bd6242" locEndPos="1" locType="sr" hash="972801700" locEndLn="11" goals="0,"/>
    <StdViol msg="Do not use #define to define constant: 'LOCK'" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="11" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_2" lnHash="1036666232" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="1036666232" unbViolId="ae80a66f-0e00-365e-9f2c-e91acc7dba37" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd6b998e-4595-346d-86d4-519247ad0e11" locEndPos="1" locType="sr" hash="972801700" locEndLn="11" goals="0,"/>
    <StdViol msg="Do not use #define to define constant: 'LOCK'" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="11" sev="3" auth="lyao" locRef="1" rule="PREPROC-12" lnHash="1036666232" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="1036666232" unbViolId="65866dda-4345-3c44-8dd5-f7fd8e8bb237" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bfc494ff-15c2-3451-8119-dafc3d51452f" locEndPos="1" locType="sr" hash="972801700" locEndLn="11" goals="0,"/>
    <StdViol msg="Not all body of macro 'LOCK' is enclosed in braces" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="11" sev="3" auth="lyao" locRef="1" rule="PREPROC-14" lnHash="1036666232" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="1036666232" unbViolId="aca53fd6-7ddc-339f-9f25-9bfaadab3cbe" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c08ff69-6c2f-3d1c-af22-20345bfca5d8" locEndPos="1" locType="sr" hash="972801700" locEndLn="11" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="12" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_0_4" lnHash="-632529940" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="-632529940" unbViolId="6937e53e-9ae3-3638-a4d5-eb7caf21c8d4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="356384dc-857f-320a-b95e-141011b955ba" locEndPos="1" locType="sr" hash="972801700" locEndLn="12" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="12" sev="4" auth="lyao" locRef="1" rule="MISRAC2012-DIR_4_9-a" lnHash="-632529940" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-632529940" unbViolId="e7f4f32d-1d61-3ee9-b69f-e222ada798d3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e482d1d3-d49c-37d0-ba7c-88ad00b7b70d" locEndPos="1" locType="sr" hash="972801700" locEndLn="12" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="12" sev="3" auth="lyao" locRef="1" rule="MISRA2004-19_7" lnHash="-632529940" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-632529940" unbViolId="53234989-a838-3d6d-b936-02f4f0b649e0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8591703c-15db-3ec6-94c5-38d9478381fc" locEndPos="1" locType="sr" hash="972801700" locEndLn="12" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="12" sev="2" auth="lyao" locRef="1" rule="JSF-029" lnHash="-632529940" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="-632529940" unbViolId="4cfcc1ed-1df1-3e86-8325-9dac604ffd01" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b44b5cd3-d844-3623-856f-a2f7b2bb59f5" locEndPos="1" locType="sr" hash="972801700" locEndLn="12" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="12" sev="4" auth="lyao" locRef="1" rule="MISRA2012-DIR-4_9" lnHash="-632529940" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="-632529940" unbViolId="841a0bcd-2ec0-36f9-af54-74bd2948c878" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c15c96cb-6c16-3aa1-a481-4b782f94b94a" locEndPos="1" locType="sr" hash="972801700" locEndLn="12" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="12" sev="3" auth="lyao" locRef="1" rule="CERT_C-PRE00-a" lnHash="-632529940" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-632529940" unbViolId="f31d25ff-0019-3530-b2a9-7e4b42e19e3e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="580c1b67-6c68-31a5-83e0-9f1b2575fa5d" locEndPos="1" locType="sr" hash="972801700" locEndLn="12" goals="0,"/>
    <StdViol msg="Body of macro 'LOCK_ACQUIRE' is defined without parentheses" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="12" sev="3" auth="lyao" locRef="1" rule="MISRA-096" lnHash="-632529940" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-632529940" unbViolId="19f691ef-9df9-37a4-b419-3686c685ccc6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5eabc6e3-a554-3aa0-a274-cd939db42147" locEndPos="1" locType="sr" hash="972801700" locEndLn="12" goals="0,"/>
    <StdViol msg="Body of macro 'LOCK_ACQUIRE' is defined without parentheses" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="12" sev="1" auth="lyao" locRef="1" rule="CERT_C-PRE02-a" lnHash="-632529940" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-632529940" unbViolId="f3e3d8bc-6e68-3bd0-b309-81f09ae8ff1e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24ed8f79-28ac-3f38-9541-fded87982789" locEndPos="1" locType="sr" hash="972801700" locEndLn="12" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="12" sev="3" auth="lyao" locRef="1" rule="JSF-031" lnHash="-632529940" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-632529940" unbViolId="4c1f5649-8c27-3747-a0f1-dc4c7d76fba2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b14e429-f14d-38e0-b754-3fd6390c6b5f" locEndPos="1" locType="sr" hash="972801700" locEndLn="12" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="12" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_1_a" lnHash="-632529940" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-632529940" unbViolId="22dc6a03-0029-3307-a5a5-21a6c2f1bdcf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9ff2ad9-552e-33f0-97bd-e31e81473aa4" locEndPos="1" locType="sr" hash="972801700" locEndLn="12" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="12" sev="3" auth="lyao" locRef="1" rule="HICPP-16_1_1-a" lnHash="-632529940" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-632529940" unbViolId="97ae8e0f-3fe5-3453-8504-902a310ff7cd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="29e64a89-edf9-30fe-b276-62f856badbbe" locEndPos="1" locType="sr" hash="972801700" locEndLn="12" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="12" sev="3" auth="lyao" locRef="1" rule="PREPROC-01" lnHash="-632529940" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-632529940" unbViolId="cea2fea9-c6fb-31eb-aebd-d7f9e95b0644" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9bf4db07-f821-34d1-a811-7762e855fc40" locEndPos="1" locType="sr" hash="972801700" locEndLn="12" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="12" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A16_0_1-d" lnHash="-632529940" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-632529940" unbViolId="ec209cce-ff92-3b55-9d99-4f161351ef56" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f2b0faea-02b3-3ceb-96be-8ed28e5ec3c6" locEndPos="1" locType="sr" hash="972801700" locEndLn="12" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="12" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_2" lnHash="-632529940" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-632529940" unbViolId="f60689c7-e801-302b-97b0-8041cdb8379f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f85dcfd0-0da8-365b-97f1-7c166268aa42" locEndPos="1" locType="sr" hash="972801700" locEndLn="12" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="12" sev="3" auth="lyao" locRef="1" rule="PREPROC-12" lnHash="-632529940" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-632529940" unbViolId="a2a09ff4-fbb4-3371-988c-d6f6e7abaa50" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3926f9a2-3562-3ce5-88be-97d8e115dadf" locEndPos="1" locType="sr" hash="972801700" locEndLn="12" goals="0,"/>
    <StdViol msg="Not all body of macro 'LOCK_ACQUIRE' is enclosed in braces" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="12" sev="3" auth="lyao" locRef="1" rule="PREPROC-14" lnHash="-632529940" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-632529940" unbViolId="9296cd85-937f-3544-9e00-93ed7ed1ce02" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee07b999-239b-37eb-a765-696e4287ddaf" locEndPos="1" locType="sr" hash="972801700" locEndLn="12" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="12" sev="3" auth="lyao" locRef="1" rule="MISRA2004-19_10" lnHash="-632529940" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-632529940" unbViolId="43e21789-342e-3891-82ba-9709cdf1a505" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd823544-a2f0-355c-a9a1-28d7091cc760" locEndPos="50" locType="sr" hash="972801700" locEndLn="12" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="12" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_0_6" lnHash="-632529940" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="-632529940" unbViolId="de315f0d-3c28-3e50-9cf4-a418bbc534c0" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c517e04-99a0-3483-8913-fe1d166cabd2" locEndPos="50" locType="sr" hash="972801700" locEndLn="12" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="12" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-20_7" lnHash="-632529940" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="-632529940" unbViolId="68660238-49f7-330f-961b-44cd29ae3d46" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9743dd47-3e48-33d3-bef4-17e65672f040" locEndPos="50" locType="sr" hash="972801700" locEndLn="12" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="12" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M16_0_6-a" lnHash="-632529940" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-632529940" unbViolId="66d4d9f6-a30d-30ef-a1fc-5e370dd115b3" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3bc4022e-239c-3bda-95a5-f2732246446a" locEndPos="50" locType="sr" hash="972801700" locEndLn="12" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="12" sev="1" auth="lyao" locRef="1" rule="CERT_C-PRE01-a" lnHash="-632529940" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-632529940" unbViolId="9bbaad03-900e-3669-ac99-d3f515fd2a54" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26177634-5619-3a0c-8737-7223d8a7921f" locEndPos="50" locType="sr" hash="972801700" locEndLn="12" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="12" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_20_7-a" lnHash="-632529940" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-632529940" unbViolId="7fd9586a-f8d2-3e87-8799-09c267065657" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4bac4df-45eb-3ffe-aea4-87e1e0a5bda0" locEndPos="50" locType="sr" hash="972801700" locEndLn="12" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="13" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_0_4" lnHash="1552981372" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="1552981372" unbViolId="420397f9-a6d7-32fb-a2bf-4d42a24ab2a3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61d0f481-22fa-30ad-93d0-4ada2455278b" locEndPos="1" locType="sr" hash="972801700" locEndLn="13" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="13" sev="4" auth="lyao" locRef="1" rule="MISRAC2012-DIR_4_9-a" lnHash="1552981372" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="1552981372" unbViolId="51d2e17f-1804-368b-be63-b8c5df410457" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9b97a704-19b9-3cd4-969b-695e003a6ec3" locEndPos="1" locType="sr" hash="972801700" locEndLn="13" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="13" sev="3" auth="lyao" locRef="1" rule="MISRA2004-19_7" lnHash="1552981372" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="1552981372" unbViolId="4fae7683-b00a-3e67-b444-4cfd43a80673" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83aab398-f6ad-3446-987a-90ec13b872fb" locEndPos="1" locType="sr" hash="972801700" locEndLn="13" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="13" sev="2" auth="lyao" locRef="1" rule="JSF-029" lnHash="1552981372" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="1552981372" unbViolId="6716f10c-6d19-3894-8215-8cf72cb47705" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f0ac354-1449-346e-ac3d-b27d81352eed" locEndPos="1" locType="sr" hash="972801700" locEndLn="13" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="13" sev="4" auth="lyao" locRef="1" rule="MISRA2012-DIR-4_9" lnHash="1552981372" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="1552981372" unbViolId="a632b895-45cf-318b-b33d-e0ca2f04d495" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9766265c-61ab-3abf-a2dd-bcaf7d916984" locEndPos="1" locType="sr" hash="972801700" locEndLn="13" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="13" sev="3" auth="lyao" locRef="1" rule="CERT_C-PRE00-a" lnHash="1552981372" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="1552981372" unbViolId="b86e2639-a88d-31a5-9fc4-68db890d575b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="799930d9-fb85-3749-a2dc-78481c04dfb9" locEndPos="1" locType="sr" hash="972801700" locEndLn="13" goals="0,"/>
    <StdViol msg="Body of macro 'LOCK_RELEASE' is defined without parentheses" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="13" sev="3" auth="lyao" locRef="1" rule="MISRA-096" lnHash="1552981372" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="1552981372" unbViolId="38b3a7b8-6670-36f2-9776-6fedec5a7949" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c61fb4b0-1694-3ef9-93f8-24709ad63f61" locEndPos="1" locType="sr" hash="972801700" locEndLn="13" goals="0,"/>
    <StdViol msg="Body of macro 'LOCK_RELEASE' is defined without parentheses" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="13" sev="1" auth="lyao" locRef="1" rule="CERT_C-PRE02-a" lnHash="1552981372" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="1552981372" unbViolId="2b760c9d-c2a7-30dc-9c2a-400cb9762d12" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a42eb83-a2c6-396c-aff4-3c7e8fe0ecee" locEndPos="1" locType="sr" hash="972801700" locEndLn="13" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="13" sev="3" auth="lyao" locRef="1" rule="JSF-031" lnHash="1552981372" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1552981372" unbViolId="9790fc50-49a4-3809-b979-c5ce3bef6536" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff93ff99-4998-357e-9a3c-4e6de2035e80" locEndPos="1" locType="sr" hash="972801700" locEndLn="13" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="13" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_1_a" lnHash="1552981372" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1552981372" unbViolId="a3c49fe5-3d98-348b-9874-2d87aa78c28b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e2a85c5-6de0-31fc-bce1-5185ecbf7dd5" locEndPos="1" locType="sr" hash="972801700" locEndLn="13" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="13" sev="3" auth="lyao" locRef="1" rule="HICPP-16_1_1-a" lnHash="1552981372" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1552981372" unbViolId="5a130220-baf5-34cc-bee7-8073e7685022" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ed4e067-9e56-3d2d-8d06-33dd33960efd" locEndPos="1" locType="sr" hash="972801700" locEndLn="13" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="13" sev="3" auth="lyao" locRef="1" rule="PREPROC-01" lnHash="1552981372" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1552981372" unbViolId="7c09cb48-aa43-3053-9eeb-9bfed5555add" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c98e762-4c9a-30b9-84ce-75cb638826cc" locEndPos="1" locType="sr" hash="972801700" locEndLn="13" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="13" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A16_0_1-d" lnHash="1552981372" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1552981372" unbViolId="4b497ade-e692-3431-86ea-abd901ddff75" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="073619a0-39e6-3fd8-b443-11833dca48d3" locEndPos="1" locType="sr" hash="972801700" locEndLn="13" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="13" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_2" lnHash="1552981372" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="1552981372" unbViolId="656287d8-d429-3a57-a42f-fcec850d7d54" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="20e304b6-99b6-3848-b7ca-4374af06b19d" locEndPos="1" locType="sr" hash="972801700" locEndLn="13" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="13" sev="3" auth="lyao" locRef="1" rule="PREPROC-12" lnHash="1552981372" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="1552981372" unbViolId="cac9840a-3f53-3fd2-96fc-5dda7b32fe09" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef919e37-75cc-394d-a5b8-5ad219f50f97" locEndPos="1" locType="sr" hash="972801700" locEndLn="13" goals="0,"/>
    <StdViol msg="Not all body of macro 'LOCK_RELEASE' is enclosed in braces" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="13" sev="3" auth="lyao" locRef="1" rule="PREPROC-14" lnHash="1552981372" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="1552981372" unbViolId="503c262a-84c9-34f3-b7c0-533c0b0f4cbd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e202562-9b8f-3f53-a41d-8a65b47efbea" locEndPos="1" locType="sr" hash="972801700" locEndLn="13" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="13" sev="3" auth="lyao" locRef="1" rule="MISRA2004-19_10" lnHash="1552981372" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="1552981372" unbViolId="967c202d-faa4-3446-a07e-9bf22fecd3e9" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9be2802b-2673-3d4f-88c6-a82112912188" locEndPos="50" locType="sr" hash="972801700" locEndLn="13" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="13" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_0_6" lnHash="1552981372" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="1552981372" unbViolId="1d9c4252-97a3-3c44-b386-eb3e30b4edf2" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c953e2bc-e119-3a7b-9d77-f93f1b7f9268" locEndPos="50" locType="sr" hash="972801700" locEndLn="13" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="13" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-20_7" lnHash="1552981372" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="1552981372" unbViolId="2c9b1766-e7b9-3379-96e4-b334619ae1b3" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c1478ce0-8d28-37f7-9403-022c1c9e11f3" locEndPos="50" locType="sr" hash="972801700" locEndLn="13" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="13" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M16_0_6-a" lnHash="1552981372" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="1552981372" unbViolId="a7ef1df4-46b1-36fa-9748-a184525775e7" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="32c527eb-fbad-33f0-92ae-fb3ef26cd696" locEndPos="50" locType="sr" hash="972801700" locEndLn="13" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="13" sev="1" auth="lyao" locRef="1" rule="CERT_C-PRE01-a" lnHash="1552981372" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="1552981372" unbViolId="2b5f4e30-5f36-3a1a-9c60-db9764485417" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ceeff28-67ad-3c9e-948e-d6bde05046a3" locEndPos="50" locType="sr" hash="972801700" locEndLn="13" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="13" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_20_7-a" lnHash="1552981372" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="1552981372" unbViolId="eef0bec9-8579-3597-b23d-aed2407a9a65" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09db73f0-2f42-3226-b072-c6494cd4a1a8" locEndPos="50" locType="sr" hash="972801700" locEndLn="13" goals="0,"/>
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="15" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_0_4" lnHash="-477159842" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="-477159842" unbViolId="b7b7ee66-91db-3b5b-86a7-42eafa54df3d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8e6f0be-a74e-38c5-a582-dbf91b2fdc30" locEndPos="1" locType="sr" hash="972801700" locEndLn="15" goals="0,"/>
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="15" sev="4" auth="lyao" locRef="1" rule="MISRAC2012-DIR_4_9-a" lnHash="-477159842" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-477159842" unbViolId="01848b2d-196f-3e1f-b178-f8a251d79fb0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c38d2cdb-1f12-3475-809b-76630a33f1e0" locEndPos="1" locType="sr" hash="972801700" locEndLn="15" goals="0,"/>
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="15" sev="3" auth="lyao" locRef="1" rule="MISRA2004-19_7" lnHash="-477159842" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-477159842" unbViolId="49a256be-3659-302d-bdea-6e097389eca6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06ff2cd3-0a2d-3444-b3d2-1d766179c8e0" locEndPos="1" locType="sr" hash="972801700" locEndLn="15" goals="0,"/>
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="15" sev="2" auth="lyao" locRef="1" rule="JSF-029" lnHash="-477159842" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="-477159842" unbViolId="bf44f27f-0705-3ec4-9024-b1d0a259c33e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="892430a2-0b39-3974-b6c5-b5e0f19b03ee" locEndPos="1" locType="sr" hash="972801700" locEndLn="15" goals="0,"/>
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="15" sev="4" auth="lyao" locRef="1" rule="MISRA2012-DIR-4_9" lnHash="-477159842" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="-477159842" unbViolId="22343358-85f7-3079-8ef1-ced88b138238" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e88c9d4-96fc-3dbb-a8a7-731e695e7550" locEndPos="1" locType="sr" hash="972801700" locEndLn="15" goals="0,"/>
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="15" sev="3" auth="lyao" locRef="1" rule="CERT_C-PRE00-a" lnHash="-477159842" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-477159842" unbViolId="4262c40d-4c89-3015-813d-2428d95d8206" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e804d87-1160-3b27-be9d-5da12c88d6a0" locEndPos="1" locType="sr" hash="972801700" locEndLn="15" goals="0,"/>
    <StdViol msg="Body of macro 'SLEEP' is defined without parentheses" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="15" sev="3" auth="lyao" locRef="1" rule="MISRA-096" lnHash="-477159842" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-477159842" unbViolId="97f38fb9-7429-31fd-8060-537b49948f64" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd2c2244-9188-387b-bb35-b49472ca73cd" locEndPos="1" locType="sr" hash="972801700" locEndLn="15" goals="0,"/>
    <StdViol msg="Body of macro 'SLEEP' is defined without parentheses" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="15" sev="1" auth="lyao" locRef="1" rule="CERT_C-PRE02-a" lnHash="-477159842" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-477159842" unbViolId="09b29942-0c67-3c52-a94d-786565314f7e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="618ae516-1836-35af-85d0-32ce852d274a" locEndPos="1" locType="sr" hash="972801700" locEndLn="15" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="15" sev="3" auth="lyao" locRef="1" rule="JSF-031" lnHash="-477159842" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-477159842" unbViolId="19d0c04d-b61e-37e6-a999-66f01c80f1d2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c34d151d-6d2b-332d-8aeb-8100461dad43" locEndPos="1" locType="sr" hash="972801700" locEndLn="15" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="15" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_1_a" lnHash="-477159842" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-477159842" unbViolId="4e6c2b0f-c548-3884-8200-48508bbb1c8f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8e1439c6-7573-3278-8ba3-e5a5a54373c3" locEndPos="1" locType="sr" hash="972801700" locEndLn="15" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="15" sev="3" auth="lyao" locRef="1" rule="HICPP-16_1_1-a" lnHash="-477159842" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-477159842" unbViolId="615834bb-4860-388b-a27e-b7545547a87f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd3fac43-7d85-3e1d-9b15-f59b03c13cab" locEndPos="1" locType="sr" hash="972801700" locEndLn="15" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="15" sev="3" auth="lyao" locRef="1" rule="PREPROC-01" lnHash="-477159842" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-477159842" unbViolId="9385aff8-9ffa-34e3-ae2a-2fdf6d36f695" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5fcb741d-6a9c-317f-938c-e735840101ae" locEndPos="1" locType="sr" hash="972801700" locEndLn="15" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="15" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A16_0_1-d" lnHash="-477159842" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-477159842" unbViolId="9b59b88a-dfd3-35d2-9244-dc96bf3f518a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ccf066b-916a-3b17-b498-36ec0db934d9" locEndPos="1" locType="sr" hash="972801700" locEndLn="15" goals="0,"/>
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="15" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_2" lnHash="-477159842" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-477159842" unbViolId="ccbc4222-cf0e-38cf-8ac3-a61a8f4affb7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="72998c96-2a4d-37da-8cdf-75af62a208a4" locEndPos="1" locType="sr" hash="972801700" locEndLn="15" goals="0,"/>
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="15" sev="3" auth="lyao" locRef="1" rule="PREPROC-12" lnHash="-477159842" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-477159842" unbViolId="a953cfaf-4864-317e-addf-7bf26dfc191c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="792e6254-8d68-31ed-8db1-6ed937bc6751" locEndPos="1" locType="sr" hash="972801700" locEndLn="15" goals="0,"/>
    <StdViol msg="Not all body of macro 'SLEEP' is enclosed in braces" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="15" sev="3" auth="lyao" locRef="1" rule="PREPROC-14" lnHash="-477159842" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-477159842" unbViolId="6769d21a-6c20-355c-b917-cceacf08f407" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a292f541-5631-3f4f-9eef-1f2a47db1024" locEndPos="1" locType="sr" hash="972801700" locEndLn="15" goals="0,"/>
    <StdViol msg="The #else preprocessor directive is used" ln="17" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="17" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_1_c" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="f2eff2b7-3c71-3728-a683-0adb474e1753" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bfcec775-3db4-3b2e-b9d8-3b9b4c6ad170" locEndPos="1" locType="sr" hash="972801700" locEndLn="17" goals="0,"/>
    <StdViol msg="The #else preprocessor directive is used" ln="17" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="17" sev="3" auth="lyao" locRef="1" rule="HICPP-16_1_1-c" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="6b167245-597f-362f-a5db-45242c6a5780" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="925d00ae-599c-3881-87d5-64a782f62749" locEndPos="1" locType="sr" hash="972801700" locEndLn="17" goals="0,"/>
    <StdViol msg="The #else preprocessor directive is used" ln="17" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="17" sev="2" auth="lyao" locRef="1" rule="JSF-026" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="66a0d50f-5d48-3a73-8509-dde317c1226d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77064a8f-aa85-39e5-90c6-7a5e9ea9f47b" locEndPos="1" locType="sr" hash="972801700" locEndLn="17" goals="0,"/>
    <StdViol msg="The #else preprocessor directive is used" ln="17" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="17" sev="3" auth="lyao" locRef="1" rule="PREPROC-11" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="5eabb86c-5558-3cb8-972f-54c1507d7e53" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c816e3a1-d595-32bd-8404-f2845b056ae7" locEndPos="1" locType="sr" hash="972801700" locEndLn="17" goals="0,"/>
    <StdViol msg="#if pre-processor directive should not be used" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="19" sev="3" auth="lyao" locRef="1" rule="PREPROC-10_c" lnHash="-343784077" rule.header="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-343784077" unbViolId="ba6c1495-bb52-3049-9c0e-57bfef956bf5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e7f678f-3c46-36ca-b125-82a85f7c9500" locEndPos="1" locType="sr" hash="972801700" locEndLn="19" goals="0,"/>
    <StdViol msg="#if pre-processor directive should not be used" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="19" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_1_e" lnHash="-343784077" rule.header="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-343784077" unbViolId="b5d56ea9-7e87-32b6-b7ac-fed313ea4a0c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ec043e17-2aaf-3c9f-8c2f-a6487fc7eac8" locEndPos="1" locType="sr" hash="972801700" locEndLn="19" goals="0,"/>
    <StdViol msg="#if pre-processor directive should not be used" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="19" sev="3" auth="lyao" locRef="1" rule="HICPP-16_1_1-f" lnHash="-343784077" rule.header="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-343784077" unbViolId="662b683a-723e-32f5-bd36-120157e93188" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a39d868e-03a9-3cfd-ab41-6daf8317f61d" locEndPos="1" locType="sr" hash="972801700" locEndLn="19" goals="0,"/>
    <StdViol msg="The #if preprocessor directive is used" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="19" sev="3" auth="lyao" locRef="1" rule="PREPROC-11_b" lnHash="-343784077" rule.header="The #if preprocessor directive should not be used" tool="c++test" lineHash="-343784077" unbViolId="865015ba-ea5e-3f6c-b411-8b03a4878620" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="33604bd5-9510-334e-bd21-47f021ac1380" locEndPos="1" locType="sr" hash="972801700" locEndLn="19" goals="0,"/>
    <StdViol msg="The #if preprocessor directive is used" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="19" sev="2" auth="lyao" locRef="1" rule="JSF-026_b" lnHash="-343784077" rule.header="The #if preprocessor directive should not be used" tool="c++test" lineHash="-343784077" unbViolId="266c03ff-be1d-3036-823f-08d234a4fddc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1619018e-c5b0-3550-a173-12cccf6b1f22" locEndPos="1" locType="sr" hash="972801700" locEndLn="19" goals="0,"/>
    <StdViol msg="Line has over 79 characters" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="19" sev="3" auth="lyao" locRef="1" rule="FORMAT-04" lnHash="-343784077" rule.header="Physical lines should be less than eighty characters" tool="c++test" lineHash="-343784077" unbViolId="9031df6f-647c-3405-b859-a971003b817c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a2498400-2699-382c-9476-eec2fc762da6" locEndPos="1" locType="sr" hash="972801700" locEndLn="19" goals="0,"/>
    <StdViol msg="Line contains more than 120 characters: 302" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="19" sev="3" auth="lyao" locRef="1" rule="JSF-041" lnHash="-343784077" rule.header="Source lines will be kept to a length of 120 characters or less" tool="c++test" lineHash="-343784077" unbViolId="f72c08cc-4627-373e-b99b-57829fe69663" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a391482e-d5e8-3d78-a142-6756f591615f" locEndPos="1" locType="sr" hash="972801700" locEndLn="19" goals="0,"/>
    <StdViol msg="Line contains more than 120 characters: 302" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="19" sev="3" auth="lyao" locRef="1" rule="METRICS-26" lnHash="-343784077" rule.header="Source lines will be kept to a length of 120 characters or less" tool="c++test" lineHash="-343784077" unbViolId="d52d1e90-edaa-399a-a017-ce6bac666e4e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb6d1639-a678-3d3a-a828-1e5cdbe93963" locEndPos="1" locType="sr" hash="972801700" locEndLn="19" goals="0,"/>
    <StdViol msg="Do not use platform-specific multi-threading facilities: &lt;pthread.h>" ln="21" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="21" sev="3" auth="lyao" locRef="1" rule="HICPP-18_1_1-a" lnHash="-1671860853" rule.header="Do not use platform-specific multi-threading facilities" tool="c++test" lineHash="-1671860853" unbViolId="df9bd03d-3d0e-3e6d-8290-b54fb9fc492e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="adce826f-f370-3b51-b775-517af19e9885" locEndPos="1" locType="sr" hash="972801700" locEndLn="21" goals="0,"/>
    <StdViol msg="The #else preprocessor directive is used" ln="24" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="24" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_1_c" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="6bcc90fe-5b88-3bae-b418-563072107cef" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87030eff-041b-3c62-912b-1fc111700028" locEndPos="1" locType="sr" hash="972801700" locEndLn="24" goals="0,"/>
    <StdViol msg="The #else preprocessor directive is used" ln="24" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="24" sev="3" auth="lyao" locRef="1" rule="HICPP-16_1_1-c" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="6de79526-1256-31bd-9cd4-0d4679d0d8b2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1b317593-c0b0-38b9-8dc1-b711cce3c5cd" locEndPos="1" locType="sr" hash="972801700" locEndLn="24" goals="0,"/>
    <StdViol msg="The #else preprocessor directive is used" ln="24" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="24" sev="2" auth="lyao" locRef="1" rule="JSF-026" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="c95bedf3-ecdd-39c8-a256-0b184d0a2377" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6164595c-052e-3b58-afdb-7e9587ffeaa5" locEndPos="1" locType="sr" hash="972801700" locEndLn="24" goals="0,"/>
    <StdViol msg="The #else preprocessor directive is used" ln="24" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="24" sev="3" auth="lyao" locRef="1" rule="PREPROC-11" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="1dae89de-da2f-3b23-ac27-b3dc28013833" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d7f127f-3845-36c2-b8cc-0d7d1a23d8b7" locEndPos="1" locType="sr" hash="972801700" locEndLn="24" goals="0,"/>
    <StdViol msg="#else pre-processor directive should not be used" ln="24" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="24" sev="3" auth="lyao" locRef="1" rule="PREPROC-26" lnHash="35439580" rule.header="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" tool="c++test" lineHash="35439580" unbViolId="bf89afbe-8901-3e21-bd54-a960ba9f1244" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="212c487e-092f-3ece-8214-cd9de8d95020" locEndPos="1" locType="sr" hash="972801700" locEndLn="24" goals="0,"/>
    <StdViol msg="#else pre-processor directive should not be used" ln="24" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="24" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A16_0_1-a" lnHash="35439580" rule.header="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" tool="c++test" lineHash="35439580" unbViolId="4e1e3ea0-ab84-37d2-8808-f486142342a0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3141029f-3032-397f-8643-da9d43cb02e9" locEndPos="1" locType="sr" hash="972801700" locEndLn="24" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="30" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="30" sev="3" auth="lyao" locRef="1" rule="CODSTA-223" lnHash="-770959773" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-770959773" unbViolId="37f4967e-8e85-3cda-9ccb-388f5b2d7677" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5509f577-3c71-31d4-8a00-872a973f6474" locEndPos="1" locType="sr" hash="972801700" locEndLn="30" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="30" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="30" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A3_9_1-b" lnHash="-770959773" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-770959773" unbViolId="f11c1110-4b75-3b4c-bcd1-9a2a60d7720b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d062411-5e91-337a-afc0-d4a6e0e5d9b2" locEndPos="1" locType="sr" hash="972801700" locEndLn="30" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="30" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="30" sev="3" auth="lyao" locRef="1" rule="HICPP-7_1_6-b" lnHash="-770959773" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="-770959773" unbViolId="82c8fbe2-9fa2-32fd-9d8c-82cfbbedda60" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4db98226-007f-3df1-b7fa-d3b6d06b7ff6" locEndPos="1" locType="sr" hash="972801700" locEndLn="30" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="30" sev="4" auth="lyao" locRef="1" rule="MISRAC2012-DIR_4_6-b" lnHash="-770959773" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-770959773" unbViolId="7c7c6e46-806b-35bc-987e-59b1ac26bed0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9984d5ce-22f0-3f11-8f19-0d13ce04c5cc" locEndPos="1" locType="sr" hash="972801700" locEndLn="30" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="30" sev="2" auth="lyao" locRef="1" rule="JSF-209_b" lnHash="-770959773" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-770959773" unbViolId="4ecf8877-10d5-31bd-bb91-6c30b1df2aa6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb8ad572-6d79-3d21-8454-b505087d5e29" locEndPos="1" locType="sr" hash="972801700" locEndLn="30" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="30" sev="3" auth="lyao" locRef="1" rule="MISRA2004-6_3_b" lnHash="-770959773" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-770959773" unbViolId="8278591e-670d-3bbc-aee9-59497878c944" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e345a12-0c8f-37db-b40e-408c008550dc" locEndPos="1" locType="sr" hash="972801700" locEndLn="30" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="30" sev="4" auth="lyao" locRef="1" rule="MISRA2012-DIR-4_6_b" lnHash="-770959773" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-770959773" unbViolId="a6cdc1ad-3bde-3073-b552-709aa7ace49e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="805371e5-4783-36d0-92cf-05f4573960e5" locEndPos="1" locType="sr" hash="972801700" locEndLn="30" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="30" sev="3" auth="lyao" locRef="1" rule="HICPP-3_5_1-b" lnHash="-770959773" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-770959773" unbViolId="3059d206-273a-3505-ae41-562f480e3922" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ea04cef3-f38e-3ebf-b07d-191c48e63c08" locEndPos="1" locType="sr" hash="972801700" locEndLn="30" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="30" sev="4" auth="lyao" locRef="1" rule="MISRA2008-3_9_2" lnHash="-770959773" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-770959773" unbViolId="952a1286-03a0-36c8-af2b-7f6c5fa9da9b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4d98420-461a-3db9-b042-c1999e3fb32d" locEndPos="1" locType="sr" hash="972801700" locEndLn="30" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="30" sev="3" auth="lyao" locRef="1" rule="MISRA-013" lnHash="-770959773" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-770959773" unbViolId="9aec1c6f-00ad-37ea-bd51-8b299baec9d6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="354b8956-cbab-3703-aad5-f3aa66afc930" locEndPos="1" locType="sr" hash="972801700" locEndLn="30" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="35" sev="4" auth="lyao" locRef="1" rule="MISRA2008-3_9_2" lnHash="-1338521823" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1338521823" unbViolId="62a5eb7d-27bc-307a-9da4-a7c9d26872fc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da3b10a7-e793-3cff-a1d9-3e93b345396f" locEndPos="1" locType="sr" hash="972801700" locEndLn="35" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="35" sev="3" auth="lyao" locRef="1" rule="MISRA-013" lnHash="-1338521823" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1338521823" unbViolId="5fde7b4e-a87d-3374-858e-4c9abac3a018" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c074e521-516c-3280-aa83-dd9f31c94b5b" locEndPos="1" locType="sr" hash="972801700" locEndLn="35" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="35" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="35" sev="3" auth="lyao" locRef="1" rule="CODSTA-223" lnHash="-1338521823" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1338521823" unbViolId="8bde00af-4dc3-39d4-90ca-ee56a6b312d6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f906b5b-4b13-3c67-9a59-a4082b9df45b" locEndPos="1" locType="sr" hash="972801700" locEndLn="35" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="35" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="35" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A3_9_1-b" lnHash="-1338521823" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1338521823" unbViolId="e6ec13ce-aaf9-37f2-aa31-e1d6c35e09fe" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7dd6b942-4d4f-3c0c-ae4a-8cdb81e7ce44" locEndPos="1" locType="sr" hash="972801700" locEndLn="35" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="35" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="35" sev="3" auth="lyao" locRef="1" rule="HICPP-7_1_6-b" lnHash="-1338521823" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="-1338521823" unbViolId="da3fdc41-ae6b-395d-8d0d-6440ee640062" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97d3b085-80a3-3da7-a6cc-b94f3f89f93b" locEndPos="1" locType="sr" hash="972801700" locEndLn="35" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="35" sev="4" auth="lyao" locRef="1" rule="MISRAC2012-DIR_4_6-b" lnHash="-1338521823" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1338521823" unbViolId="1d94075a-cbdb-3d0d-a316-5373e6242f31" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67669622-906c-34a3-9097-a603891d5910" locEndPos="1" locType="sr" hash="972801700" locEndLn="35" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="35" sev="2" auth="lyao" locRef="1" rule="JSF-209_b" lnHash="-1338521823" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-1338521823" unbViolId="86cb4aa0-9a35-37fb-b140-ccd869159d0d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d553599-117b-3d04-a383-f8d3f77e0131" locEndPos="1" locType="sr" hash="972801700" locEndLn="35" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="35" sev="3" auth="lyao" locRef="1" rule="MISRA2004-6_3_b" lnHash="-1338521823" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1338521823" unbViolId="a0327b98-b36e-3160-bf70-10ca4f52a006" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8d08457-5bfc-32e4-b70b-3f7e6a43afe4" locEndPos="1" locType="sr" hash="972801700" locEndLn="35" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="35" sev="4" auth="lyao" locRef="1" rule="MISRA2012-DIR-4_6_b" lnHash="-1338521823" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1338521823" unbViolId="7714382b-21b8-3394-8688-3301021fc1a4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a1c9062-6e4b-3381-acdc-340c122b2c58" locEndPos="1" locType="sr" hash="972801700" locEndLn="35" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="35" sev="3" auth="lyao" locRef="1" rule="HICPP-3_5_1-b" lnHash="-1338521823" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1338521823" unbViolId="08c070d7-f19c-3d6e-8b91-5da432b6faf0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e6cca5cb-2419-386c-b25f-ff5d4f1334fc" locEndPos="1" locType="sr" hash="972801700" locEndLn="35" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="37" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="37" sev="3" auth="lyao" locRef="1" rule="CODSTA-223" lnHash="-529470406" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-529470406" unbViolId="b98839eb-fc2d-312b-8e38-8a083cd5b28f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88e78f1d-f9a1-3dd9-9062-7acc11219a9b" locEndPos="1" locType="sr" hash="972801700" locEndLn="37" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="37" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="37" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A3_9_1-b" lnHash="-529470406" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-529470406" unbViolId="88cd1b5e-caab-364c-b77f-c4ab079f8135" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc389029-f5b1-35c4-ba0f-354324ce4b86" locEndPos="1" locType="sr" hash="972801700" locEndLn="37" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="37" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="37" sev="3" auth="lyao" locRef="1" rule="HICPP-7_1_6-b" lnHash="-529470406" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="-529470406" unbViolId="7e38a6a6-0e68-3e9b-90ee-8bd0745c3411" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ab2a236-cd78-35f7-8780-bef6ac81a704" locEndPos="1" locType="sr" hash="972801700" locEndLn="37" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="37" sev="4" auth="lyao" locRef="1" rule="MISRAC2012-DIR_4_6-b" lnHash="-529470406" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-529470406" unbViolId="b185b50c-9d9b-3a35-bc83-de7c291f51ce" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa132079-b260-3565-aa44-bff388af8128" locEndPos="1" locType="sr" hash="972801700" locEndLn="37" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="37" sev="2" auth="lyao" locRef="1" rule="JSF-209_b" lnHash="-529470406" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-529470406" unbViolId="44f3e1bc-5a21-3596-b2a6-184f251abfa0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="942364de-f26f-3a8a-aced-af0ad067e773" locEndPos="1" locType="sr" hash="972801700" locEndLn="37" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="37" sev="3" auth="lyao" locRef="1" rule="MISRA2004-6_3_b" lnHash="-529470406" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-529470406" unbViolId="a71589b1-c221-39d5-be71-e15bfaca2d28" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c88de7da-b410-355a-9eaa-05c3f26165bb" locEndPos="1" locType="sr" hash="972801700" locEndLn="37" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="37" sev="4" auth="lyao" locRef="1" rule="MISRA2012-DIR-4_6_b" lnHash="-529470406" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-529470406" unbViolId="5f3103d3-153b-3b57-8ae5-9974e4664503" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06fbc90d-a16c-3c6d-9a0a-5729257fe181" locEndPos="1" locType="sr" hash="972801700" locEndLn="37" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="37" sev="3" auth="lyao" locRef="1" rule="HICPP-3_5_1-b" lnHash="-529470406" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-529470406" unbViolId="faa213ff-b9d5-39a6-998b-0a35ad0dbee4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7fe277ec-a7f8-3b64-90f0-9d2904374a4b" locEndPos="1" locType="sr" hash="972801700" locEndLn="37" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="37" sev="4" auth="lyao" locRef="1" rule="MISRA2008-3_9_2" lnHash="-529470406" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-529470406" unbViolId="bc05a675-ad87-3188-ab92-59d922fc6b3e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1633825c-d517-3861-813e-1d7c3c0d12c8" locEndPos="1" locType="sr" hash="972801700" locEndLn="37" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="37" sev="3" auth="lyao" locRef="1" rule="MISRA-013" lnHash="-529470406" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-529470406" unbViolId="4214bef1-97dc-3db7-a25c-a56ccb16a513" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb7e7a93-7bc4-321e-a333-5e39ae0f12e7" locEndPos="1" locType="sr" hash="972801700" locEndLn="37" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="39" sev="4" auth="lyao" locRef="1" rule="MISRA2008-3_9_2" lnHash="-962720826" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-962720826" unbViolId="8fd874b4-88de-3803-88b1-758078a397df" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c1a852bb-377a-3792-8f05-32e739b5e14a" locEndPos="12" locType="sr" hash="972801700" locEndLn="39" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="39" sev="3" auth="lyao" locRef="1" rule="MISRA-013" lnHash="-962720826" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-962720826" unbViolId="c9ab4d5f-6028-3833-b868-35c6fce62b74" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="595276eb-ffae-3f70-9fe4-784c5264a672" locEndPos="12" locType="sr" hash="972801700" locEndLn="39" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="39" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="39" sev="3" auth="lyao" locRef="1" rule="CODSTA-223" lnHash="-962720826" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-962720826" unbViolId="fa5f02e5-c3f3-35c4-9a73-253f25e3eb85" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88dd363d-1316-3df9-a9c7-0aa821a74167" locEndPos="12" locType="sr" hash="972801700" locEndLn="39" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="39" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="39" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A3_9_1-b" lnHash="-962720826" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-962720826" unbViolId="5f9a9d47-933a-3e6b-b97c-c5b82ad80b21" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="57071ff7-2b26-3d15-a8bf-98799f2f76cd" locEndPos="12" locType="sr" hash="972801700" locEndLn="39" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="39" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="39" sev="3" auth="lyao" locRef="1" rule="HICPP-7_1_6-b" lnHash="-962720826" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="-962720826" unbViolId="959e0339-167a-375a-9744-9431d4675fa9" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62e31394-b1f8-3a39-b9d8-d9ba5fb592da" locEndPos="12" locType="sr" hash="972801700" locEndLn="39" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="39" sev="4" auth="lyao" locRef="1" rule="MISRAC2012-DIR_4_6-b" lnHash="-962720826" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-962720826" unbViolId="bf0466bf-5e88-35b2-a719-354237b4cce5" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="20c405cd-e154-3dd9-85fc-ba4df1da3d8b" locEndPos="12" locType="sr" hash="972801700" locEndLn="39" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="39" sev="2" auth="lyao" locRef="1" rule="JSF-209_b" lnHash="-962720826" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-962720826" unbViolId="319d5379-1cbb-3509-8a97-59b6cd1ddc0f" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="536b53b6-2540-3e1e-a2e2-f5b6a6fb5d7f" locEndPos="12" locType="sr" hash="972801700" locEndLn="39" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="39" sev="3" auth="lyao" locRef="1" rule="MISRA2004-6_3_b" lnHash="-962720826" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-962720826" unbViolId="b9e96081-55fb-39db-a7d4-ad750c443e93" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b772b72f-29c7-341a-9c1e-0e40ac884566" locEndPos="12" locType="sr" hash="972801700" locEndLn="39" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="39" sev="4" auth="lyao" locRef="1" rule="MISRA2012-DIR-4_6_b" lnHash="-962720826" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-962720826" unbViolId="7a2f71cc-f6b4-32c0-812c-568cc2d3176b" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6853dc31-7d62-30da-b75e-dbaf01d2fcf8" locEndPos="12" locType="sr" hash="972801700" locEndLn="39" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="39" sev="3" auth="lyao" locRef="1" rule="HICPP-3_5_1-b" lnHash="-962720826" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-962720826" unbViolId="f9479d11-71dd-3f09-a631-fa2e5c2208ba" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c517571-f221-3b02-a18d-11f4bfcf6c04" locEndPos="12" locType="sr" hash="972801700" locEndLn="39" goals="0,"/>
    <StdViol msg="#endif pre-processor directive should not be used" ln="41" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="41" sev="3" auth="lyao" locRef="1" rule="PREPROC-10_b" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="d7118e83-ac4b-3aa0-a952-bca91fc759c9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7854a7e3-b28e-34ab-9e44-37923c0dbec1" locEndPos="1" locType="sr" hash="972801700" locEndLn="41" goals="0,"/>
    <StdViol msg="#endif pre-processor directive should not be used" ln="41" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="41" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_1_d" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="84fa10ef-8348-3d3c-8979-c6c6bd13ed7e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba63ae28-99a1-3bcd-a556-86a61872a00d" locEndPos="1" locType="sr" hash="972801700" locEndLn="41" goals="0,"/>
    <StdViol msg="#endif pre-processor directive should not be used" ln="41" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="41" sev="3" auth="lyao" locRef="1" rule="JSF-028_b" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="6f2978e6-ece8-31ce-90ef-37a0c665a949" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2fdcc04-5a10-34db-b8a3-6dd88a8ef85b" locEndPos="1" locType="sr" hash="972801700" locEndLn="41" goals="0,"/>
    <StdViol msg="#endif pre-processor directive should not be used" ln="41" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="41" sev="3" auth="lyao" locRef="1" rule="HICPP-16_1_1-e" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="8abc9ecb-6e07-3084-9139-cf0cd83d48a5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc166862-c92d-3af7-b8bc-cbb4d4ec483a" locEndPos="1" locType="sr" hash="972801700" locEndLn="41" goals="0,"/>
    <StdViol msg="#endif pre-processor directive should not be used" ln="41" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="41" sev="3" auth="lyao" locRef="1" rule="PREPROC-26" lnHash="1098672373" rule.header="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" tool="c++test" lineHash="1098672373" unbViolId="bdad8a10-fe84-3472-a04f-b834cd0628c2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c02656ab-84d5-3cc6-9e7b-0afc812e45f2" locEndPos="1" locType="sr" hash="972801700" locEndLn="41" goals="0,"/>
    <StdViol msg="#endif pre-processor directive should not be used" ln="41" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="41" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A16_0_1-a" lnHash="1098672373" rule.header="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" tool="c++test" lineHash="1098672373" unbViolId="509727e4-0057-3a14-ac77-9d95e8ea204c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70601243-489f-3884-a3af-d617ed8a0a88" locEndPos="1" locType="sr" hash="972801700" locEndLn="41" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="43" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="43" sev="3" auth="lyao" locRef="1" rule="JSF-031" lnHash="-1234653797" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1234653797" unbViolId="1aee2bba-6f73-39e5-bcdf-bc67e3827c62" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03ea71cb-0910-3c03-8355-f470c9efab3f" locEndPos="1" locType="sr" hash="972801700" locEndLn="43" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="43" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="43" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_1_a" lnHash="-1234653797" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1234653797" unbViolId="1ebb4c5a-a4a1-3b5b-8867-75c7a9ac138c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eafb9c26-3d50-368a-855b-ed6dfd0fd0a5" locEndPos="1" locType="sr" hash="972801700" locEndLn="43" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="43" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="43" sev="3" auth="lyao" locRef="1" rule="HICPP-16_1_1-a" lnHash="-1234653797" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1234653797" unbViolId="0d2fab66-bbaf-383e-84ee-cb2bd4e6ad21" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2255cf08-301d-32d0-81cc-38c76655bbed" locEndPos="1" locType="sr" hash="972801700" locEndLn="43" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="43" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="43" sev="3" auth="lyao" locRef="1" rule="PREPROC-01" lnHash="-1234653797" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1234653797" unbViolId="8349e043-2431-3100-935f-776170edff1f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7983946-118a-3461-87c9-109a72ee4791" locEndPos="1" locType="sr" hash="972801700" locEndLn="43" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="43" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="43" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A16_0_1-d" lnHash="-1234653797" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1234653797" unbViolId="b1c056d1-1eab-3332-8453-46d6718c449e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb35dd5f-33c4-35c9-a1a3-b2597f289fb7" locEndPos="1" locType="sr" hash="972801700" locEndLn="43" goals="0,"/>
    <StdViol msg="Do not use #define to define constant: 'THREAD'" ln="43" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="43" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_2" lnHash="-1234653797" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1234653797" unbViolId="9e3c1c96-1157-3a18-97c4-4bd9707e78a2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="648a5330-cff9-3a45-aed4-6c413272b90e" locEndPos="1" locType="sr" hash="972801700" locEndLn="43" goals="0,"/>
    <StdViol msg="Do not use #define to define constant: 'THREAD'" ln="43" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="43" sev="3" auth="lyao" locRef="1" rule="PREPROC-12" lnHash="-1234653797" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1234653797" unbViolId="ccabe87c-c96f-3572-b7a4-a47df4ef84db" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21d749ab-729f-3985-8388-6f69f7711751" locEndPos="1" locType="sr" hash="972801700" locEndLn="43" goals="0,"/>
    <StdViol msg="Not all body of macro 'THREAD' is enclosed in braces" ln="43" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="43" sev="3" auth="lyao" locRef="1" rule="PREPROC-14" lnHash="-1234653797" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-1234653797" unbViolId="4c2282b6-956a-3065-a7e3-55cb20af6786" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5eba8097-55a4-3f33-bdc3-21baf1c46ed7" locEndPos="1" locType="sr" hash="972801700" locEndLn="43" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="44" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="44" sev="3" auth="lyao" locRef="1" rule="JSF-031" lnHash="1590150764" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1590150764" unbViolId="20bc94a0-f823-3bed-a723-485ac1e3750b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f12c07e2-ae5f-30ed-9614-e8e4288a5bfe" locEndPos="1" locType="sr" hash="972801700" locEndLn="44" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="44" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="44" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_1_a" lnHash="1590150764" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1590150764" unbViolId="904edd19-e3eb-3b08-9f66-619f6ed367c6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a2672266-a739-3075-985c-cb19230eaa44" locEndPos="1" locType="sr" hash="972801700" locEndLn="44" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="44" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="44" sev="3" auth="lyao" locRef="1" rule="HICPP-16_1_1-a" lnHash="1590150764" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1590150764" unbViolId="de275bd3-f2c8-31ae-9427-e5051d9a00e5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e39070a8-590f-3c44-8f0f-7a90daebe0e4" locEndPos="1" locType="sr" hash="972801700" locEndLn="44" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="44" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="44" sev="3" auth="lyao" locRef="1" rule="PREPROC-01" lnHash="1590150764" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1590150764" unbViolId="685f4a38-3a28-3636-9ab9-ad6b5e5355a9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="207dff18-df25-33d0-a8f1-9aae12411b5d" locEndPos="1" locType="sr" hash="972801700" locEndLn="44" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="44" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="44" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A16_0_1-d" lnHash="1590150764" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1590150764" unbViolId="b7f610e4-bd5a-3668-9953-2f6a52fa1cf0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07379849-18b7-323e-b27c-b0337b4f3aef" locEndPos="1" locType="sr" hash="972801700" locEndLn="44" goals="0,"/>
    <StdViol msg="'THREAD_RETURN_TYPE' part of statement" ln="44" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="44" sev="4" auth="lyao" locRef="1" rule="PREPROC-04" lnHash="1590150764" rule.header="Don't define part of statement" tool="c++test" lineHash="1590150764" unbViolId="ab6256c2-ec7f-3707-8e6e-de09b2e8c19c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="559aaa99-82cb-3001-9ff3-593dbb8b955b" locEndPos="1" locType="sr" hash="972801700" locEndLn="44" goals="0,"/>
    <StdViol msg="Do not use #define to define constant: 'THREAD_RETURN_TYPE'" ln="44" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="44" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_2" lnHash="1590150764" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="1590150764" unbViolId="d9bf3876-2bb0-3d90-9b62-e01d24aa97f0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a33c3f5-da88-3b51-8266-fde3982e19b6" locEndPos="1" locType="sr" hash="972801700" locEndLn="44" goals="0,"/>
    <StdViol msg="Do not use #define to define constant: 'THREAD_RETURN_TYPE'" ln="44" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="44" sev="3" auth="lyao" locRef="1" rule="PREPROC-12" lnHash="1590150764" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="1590150764" unbViolId="b4d01953-e8a5-3055-9fb4-7edd2fd02040" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bdf9a629-54ea-3a61-8f00-16e932b8e1d1" locEndPos="1" locType="sr" hash="972801700" locEndLn="44" goals="0,"/>
    <StdViol msg="Not all body of macro 'THREAD_RETURN_TYPE' is enclosed in braces" ln="44" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="44" sev="3" auth="lyao" locRef="1" rule="PREPROC-14" lnHash="1590150764" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="1590150764" unbViolId="b898e534-39da-30da-b18c-b3421d9d5ce9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="438e8431-6b54-3962-b1a0-293f448fa262" locEndPos="1" locType="sr" hash="972801700" locEndLn="44" goals="0,"/>
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_0_4" lnHash="-1763822430" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="-1763822430" unbViolId="63583890-0a52-3db8-860a-82f77c2b1c66" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3fcfec41-ed72-38a7-94d7-abe0573d92be" locEndPos="1" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="4" auth="lyao" locRef="1" rule="MISRAC2012-DIR_4_9-a" lnHash="-1763822430" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-1763822430" unbViolId="523ffbaa-0546-3375-8ceb-a09e2f3fc668" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="398753e9-9858-30f4-848e-9382caff9f96" locEndPos="1" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="3" auth="lyao" locRef="1" rule="MISRA2004-19_7" lnHash="-1763822430" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-1763822430" unbViolId="00395bfb-e8c4-3b05-a7ee-f4848ae96dc0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b81cb5b-d674-3c8d-bacf-855832562153" locEndPos="1" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="2" auth="lyao" locRef="1" rule="JSF-029" lnHash="-1763822430" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="-1763822430" unbViolId="c481ffe5-8a92-3acc-9f87-b89e4a86eafc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9499c988-0e88-3fb9-812c-94ee2b49a32f" locEndPos="1" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="4" auth="lyao" locRef="1" rule="MISRA2012-DIR-4_9" lnHash="-1763822430" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="-1763822430" unbViolId="47ae079a-df8a-3dbb-838e-c3d443e80a32" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9dcd8081-e5a3-3b09-ab7b-003aa31a430c" locEndPos="1" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="3" auth="lyao" locRef="1" rule="CERT_C-PRE00-a" lnHash="-1763822430" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-1763822430" unbViolId="a9631846-61be-3527-8751-650a1e0ee6d5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c841e9eb-39fc-34e0-9e11-1a9a1dc63305" locEndPos="1" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Body of macro 'THREAD_CREATE' is defined without parentheses" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="3" auth="lyao" locRef="1" rule="MISRA-096" lnHash="-1763822430" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-1763822430" unbViolId="450fc5f9-3658-333d-b7bf-55f07015867b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f578d26-307d-3c54-af36-b2d00ef93f74" locEndPos="1" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Body of macro 'THREAD_CREATE' is defined without parentheses" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="1" auth="lyao" locRef="1" rule="CERT_C-PRE02-a" lnHash="-1763822430" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-1763822430" unbViolId="73e4d88b-51dd-393b-949c-2760b3081561" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4201940b-29b1-39d2-b277-b8a9f7e650ae" locEndPos="1" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="3" auth="lyao" locRef="1" rule="JSF-031" lnHash="-1763822430" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1763822430" unbViolId="98adea9b-06eb-3dfb-bb3b-7e6536b46fe8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="212da2d4-7620-3215-b7fb-deaadab8344d" locEndPos="1" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_1_a" lnHash="-1763822430" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1763822430" unbViolId="dc8d6edd-cf9f-3a46-bf4e-226458dd7011" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="255aa0ac-3972-3bd7-97a4-3d61e81a0578" locEndPos="1" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="3" auth="lyao" locRef="1" rule="HICPP-16_1_1-a" lnHash="-1763822430" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1763822430" unbViolId="63ca51e4-2ba7-3dcc-a1e8-a9696960aede" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6cfab8f4-eeb6-367e-ad86-4040197974ed" locEndPos="1" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="3" auth="lyao" locRef="1" rule="PREPROC-01" lnHash="-1763822430" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1763822430" unbViolId="608ee5d4-0c57-33f2-b50d-7eaf508070fb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae6edfce-5492-3b19-bb38-8b385f6528a7" locEndPos="1" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A16_0_1-d" lnHash="-1763822430" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1763822430" unbViolId="18f45d16-faa5-36b3-b0d6-5d1dbffcb64e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f82661ea-2a69-3ea9-b2d8-03bf0f02c66a" locEndPos="1" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_2" lnHash="-1763822430" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1763822430" unbViolId="26ac64c2-5a86-3836-91db-80f764154a0c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74013e4a-1366-375c-aaf0-426c4067808b" locEndPos="1" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="3" auth="lyao" locRef="1" rule="PREPROC-12" lnHash="-1763822430" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1763822430" unbViolId="3256d17c-8d4f-3b02-9247-1908cf516dd2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03526f00-6b4d-3b18-863d-5896167677c2" locEndPos="1" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Not all body of macro 'THREAD_CREATE' is enclosed in braces" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="3" auth="lyao" locRef="1" rule="PREPROC-14" lnHash="-1763822430" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-1763822430" unbViolId="a8f2b84c-1ea7-343d-8bfd-9a4747946a75" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91298601-312d-37c4-9a15-a09d3f9e4f62" locEndPos="1" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="3" auth="lyao" locRef="1" rule="MISRA2004-19_10" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="05388c70-ae8f-3476-b836-dc757eb90085" locStartPos="52" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="72d3abbb-11bb-31a6-900d-77f75b9183d7" locEndPos="53" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_0_6" lnHash="-1763822430" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="a6fce23e-1c66-39ef-a847-e751ef7240b5" locStartPos="52" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05965110-edb5-36ee-9bf0-623acaba0fff" locEndPos="53" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-20_7" lnHash="-1763822430" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="-1763822430" unbViolId="c6e38e36-72f5-3f3a-8926-9c0cfc94fc0b" locStartPos="52" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="835d668c-6cc4-3349-92be-1c49b30017cd" locEndPos="53" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M16_0_6-a" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="5d3c8a03-240d-33b5-82f4-43e6d1811d4e" locStartPos="52" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37b9b56e-76fe-391d-b898-7867eceb43c5" locEndPos="53" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="1" auth="lyao" locRef="1" rule="CERT_C-PRE01-a" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="48e1433d-9f39-3c2a-80d0-3bb6af32ce86" locStartPos="52" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d299abd-8307-3a35-b148-9fd2e3d5a314" locEndPos="53" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_20_7-a" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="052acd50-a4e6-313c-a7a3-f4113adf2bd8" locStartPos="52" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="873639bc-6e13-3ec9-80d3-432387738207" locEndPos="53" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="3" auth="lyao" locRef="1" rule="MISRA2004-19_10" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="bd500d0c-9609-3652-8992-51708305c070" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="20ffd021-c1c8-3a33-8f21-f4109af51f80" locEndPos="65" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_0_6" lnHash="-1763822430" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="8e3b7357-87a4-36ee-abb6-37817444f67d" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="393b7acd-5573-33d5-a3f0-ab729ac2d41b" locEndPos="65" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-20_7" lnHash="-1763822430" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="-1763822430" unbViolId="dcb94348-b815-37a1-a74e-c9cb8848d548" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3a8d491-3bb0-321f-9b39-cb0f043507c4" locEndPos="65" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M16_0_6-a" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="cd552e6d-1dd3-345e-bd2d-af556970514b" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68ee12c3-65c2-37a4-a752-89da08210c51" locEndPos="65" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="1" auth="lyao" locRef="1" rule="CERT_C-PRE01-a" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="4058a8b6-75fd-380d-b16f-1120be73c687" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc8ee11d-ecb0-31db-a54b-f11d61b81cc8" locEndPos="65" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="45" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="45" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_20_7-a" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="812d6c5b-c96d-3a00-ad25-a7c613dadc8b" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a369f57-608d-3bcf-8aa3-0219047bba5b" locEndPos="65" locType="sr" hash="972801700" locEndLn="45" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="47" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="47" sev="3" auth="lyao" locRef="1" rule="JSF-031" lnHash="810266428" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="810266428" unbViolId="ab108dd5-6414-3ca8-b90d-635b8f8f71c6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2b8c6e9-be70-32eb-90c0-c029d20fc98e" locEndPos="1" locType="sr" hash="972801700" locEndLn="47" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="47" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="47" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_1_a" lnHash="810266428" rule.header="Avoid using macro definitions" tool="c++test" lineHash="810266428" unbViolId="c72c18f1-d314-3994-9976-c03d62fec973" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d12fd4c-65b7-3858-88ac-b4ccd43c40c2" locEndPos="1" locType="sr" hash="972801700" locEndLn="47" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="47" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="47" sev="3" auth="lyao" locRef="1" rule="HICPP-16_1_1-a" lnHash="810266428" rule.header="Avoid using macro definitions" tool="c++test" lineHash="810266428" unbViolId="6659e759-733a-3d4e-99ce-761a46f8a1de" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae2d8803-a859-3723-b9e5-9bed34959822" locEndPos="1" locType="sr" hash="972801700" locEndLn="47" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="47" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="47" sev="3" auth="lyao" locRef="1" rule="PREPROC-01" lnHash="810266428" rule.header="Avoid using macro definitions" tool="c++test" lineHash="810266428" unbViolId="bdd00b43-0f60-3563-bf6a-42c06e4c4841" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a192888-1187-3545-8dc2-3e259f8a3561" locEndPos="1" locType="sr" hash="972801700" locEndLn="47" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="47" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="47" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A16_0_1-d" lnHash="810266428" rule.header="Avoid using macro definitions" tool="c++test" lineHash="810266428" unbViolId="40e6cca5-2dc8-3680-815d-8186a92b3e91" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b757b3d2-861c-38db-b8a5-ae2ee1b3c1fb" locEndPos="1" locType="sr" hash="972801700" locEndLn="47" goals="0,"/>
    <StdViol msg="Do not use #define to define constant: 'LOCK'" ln="47" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="47" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_2" lnHash="810266428" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="810266428" unbViolId="b1805a73-6874-3205-b4cb-e73031a53379" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74261e37-7b45-35fa-bca6-8c836e76b587" locEndPos="1" locType="sr" hash="972801700" locEndLn="47" goals="0,"/>
    <StdViol msg="Do not use #define to define constant: 'LOCK'" ln="47" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="47" sev="3" auth="lyao" locRef="1" rule="PREPROC-12" lnHash="810266428" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="810266428" unbViolId="6dfe7695-3169-38f5-a521-9bde14fef635" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c16f61c4-fca8-3019-8f96-739d8e60bccd" locEndPos="1" locType="sr" hash="972801700" locEndLn="47" goals="0,"/>
    <StdViol msg="Not all body of macro 'LOCK' is enclosed in braces" ln="47" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="47" sev="3" auth="lyao" locRef="1" rule="PREPROC-14" lnHash="810266428" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="810266428" unbViolId="84ec684a-5ea6-30bf-bf98-b289cd7a7713" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b69d07b-17ab-316e-91f2-85db694bb66d" locEndPos="1" locType="sr" hash="972801700" locEndLn="47" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="48" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_0_4" lnHash="865954250" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="865954250" unbViolId="7b1e3edb-0159-316c-bac1-833b251855d8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce76bbe2-74ab-3813-b16e-b3af58e8233e" locEndPos="1" locType="sr" hash="972801700" locEndLn="48" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="48" sev="4" auth="lyao" locRef="1" rule="MISRAC2012-DIR_4_9-a" lnHash="865954250" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="865954250" unbViolId="d59c6ca8-8d24-37be-82ab-ac344a128fc4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="388fbacd-0d13-3509-8de0-368e25845ef1" locEndPos="1" locType="sr" hash="972801700" locEndLn="48" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="48" sev="3" auth="lyao" locRef="1" rule="MISRA2004-19_7" lnHash="865954250" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="865954250" unbViolId="3e79ad0c-af73-3dc8-b0d2-c055a37e15de" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="060c4145-1d2d-3e66-962f-0020facc42bc" locEndPos="1" locType="sr" hash="972801700" locEndLn="48" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="48" sev="2" auth="lyao" locRef="1" rule="JSF-029" lnHash="865954250" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="865954250" unbViolId="9335c8c8-c6bb-378e-baaf-e9fff30a9ed9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6597258-fbb7-3e85-82a1-4d1cbd0c7c7c" locEndPos="1" locType="sr" hash="972801700" locEndLn="48" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="48" sev="4" auth="lyao" locRef="1" rule="MISRA2012-DIR-4_9" lnHash="865954250" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="865954250" unbViolId="cae15b7f-0c3f-3867-8220-6c8f5d7d4d4f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9467a7a4-d05d-3dde-8636-0163c9dc21ac" locEndPos="1" locType="sr" hash="972801700" locEndLn="48" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="48" sev="3" auth="lyao" locRef="1" rule="CERT_C-PRE00-a" lnHash="865954250" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="865954250" unbViolId="a2a59dcc-0b45-3d37-aa06-67529830bc80" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="efc248f7-c598-30fd-8872-656e6fbaa444" locEndPos="1" locType="sr" hash="972801700" locEndLn="48" goals="0,"/>
    <StdViol msg="Body of macro 'LOCK_ACQUIRE' is defined without parentheses" ln="48" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="48" sev="3" auth="lyao" locRef="1" rule="MISRA-096" lnHash="865954250" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="865954250" unbViolId="9df6709a-91a3-3487-a52d-c44fb0782492" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9736d60-3721-3776-a320-003b8e75c44d" locEndPos="1" locType="sr" hash="972801700" locEndLn="48" goals="0,"/>
    <StdViol msg="Body of macro 'LOCK_ACQUIRE' is defined without parentheses" ln="48" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="48" sev="1" auth="lyao" locRef="1" rule="CERT_C-PRE02-a" lnHash="865954250" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="865954250" unbViolId="5dc77046-9b2c-3f1c-9a46-6e3ff65dbce2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd155f44-75c6-3fa8-866a-599726b62039" locEndPos="1" locType="sr" hash="972801700" locEndLn="48" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="48" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="48" sev="3" auth="lyao" locRef="1" rule="JSF-031" lnHash="865954250" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="865954250" unbViolId="00bd93d4-e37d-3f7b-a2fc-57980a3a7b6a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2bad6911-bb27-39ff-adfa-681895d181e9" locEndPos="1" locType="sr" hash="972801700" locEndLn="48" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="48" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="48" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_1_a" lnHash="865954250" rule.header="Avoid using macro definitions" tool="c++test" lineHash="865954250" unbViolId="e5b3d403-5b74-38ae-b611-f1cf0fcf9659" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ccb1262-585f-3850-ade1-2cb4f4778af0" locEndPos="1" locType="sr" hash="972801700" locEndLn="48" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="48" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="48" sev="3" auth="lyao" locRef="1" rule="HICPP-16_1_1-a" lnHash="865954250" rule.header="Avoid using macro definitions" tool="c++test" lineHash="865954250" unbViolId="4a8c8220-bee4-3431-b5c3-22cf1829aca9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d777437-0b3b-32c2-9f16-2951ec778d2f" locEndPos="1" locType="sr" hash="972801700" locEndLn="48" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="48" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="48" sev="3" auth="lyao" locRef="1" rule="PREPROC-01" lnHash="865954250" rule.header="Avoid using macro definitions" tool="c++test" lineHash="865954250" unbViolId="2d953774-f325-3f1b-a543-a6d4e0663158" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ac022eb-64e3-3f74-b125-0009de0fbdcc" locEndPos="1" locType="sr" hash="972801700" locEndLn="48" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="48" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="48" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A16_0_1-d" lnHash="865954250" rule.header="Avoid using macro definitions" tool="c++test" lineHash="865954250" unbViolId="2f5e937c-dbca-3c95-b4a0-4a7025e7eff9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ddb0a21e-44c6-3315-bba9-554da1bbf874" locEndPos="1" locType="sr" hash="972801700" locEndLn="48" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="48" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_2" lnHash="865954250" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="865954250" unbViolId="f9106735-cd12-35ee-99bc-49ffd612a97b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba475b82-73ec-3417-80f5-0cf905f9e7b6" locEndPos="1" locType="sr" hash="972801700" locEndLn="48" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="48" sev="3" auth="lyao" locRef="1" rule="PREPROC-12" lnHash="865954250" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="865954250" unbViolId="fe2037c6-686c-368a-85aa-736f225a13fb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d033034b-6862-3910-97d4-c996a63a1060" locEndPos="1" locType="sr" hash="972801700" locEndLn="48" goals="0,"/>
    <StdViol msg="Not all body of macro 'LOCK_ACQUIRE' is enclosed in braces" ln="48" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="48" sev="3" auth="lyao" locRef="1" rule="PREPROC-14" lnHash="865954250" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="865954250" unbViolId="f7a003fc-d185-3f87-b172-cf30e4695f36" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79342c8a-ef67-36ab-b8fe-34440f941116" locEndPos="1" locType="sr" hash="972801700" locEndLn="48" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="48" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="48" sev="3" auth="lyao" locRef="1" rule="MISRA2004-19_10" lnHash="865954250" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="865954250" unbViolId="4ecbec94-9f82-31a4-9fac-320138f68dd1" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4f3c5d2-d2d5-353f-aff0-a6e36e7bf7ee" locEndPos="48" locType="sr" hash="972801700" locEndLn="48" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="48" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="48" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_0_6" lnHash="865954250" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="865954250" unbViolId="9ec09bdd-d020-390c-948b-e5969607fa45" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be3c0d87-475d-30d9-a988-0bb2a3e133b7" locEndPos="48" locType="sr" hash="972801700" locEndLn="48" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="48" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="48" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-20_7" lnHash="865954250" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="865954250" unbViolId="8503f11c-26fe-33ce-af8e-2ff87c79bd45" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f5d3a75-7ab5-3358-b595-878e129230cc" locEndPos="48" locType="sr" hash="972801700" locEndLn="48" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="48" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="48" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M16_0_6-a" lnHash="865954250" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="865954250" unbViolId="d930a0b8-02af-3d7c-8bd7-25c2fd8e35f6" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a56b6d3-5f06-3837-bb9c-440e2a2dcbea" locEndPos="48" locType="sr" hash="972801700" locEndLn="48" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="48" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="48" sev="1" auth="lyao" locRef="1" rule="CERT_C-PRE01-a" lnHash="865954250" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="865954250" unbViolId="29699669-6512-3fea-9df0-3a1d7fba845a" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7452c327-3461-3a49-95f1-be44c656c381" locEndPos="48" locType="sr" hash="972801700" locEndLn="48" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="48" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="48" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_20_7-a" lnHash="865954250" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="865954250" unbViolId="9bebdd95-0393-3222-8e32-10531ee12b97" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="feaa137d-d94a-36c1-90a9-be5a4f294d65" locEndPos="48" locType="sr" hash="972801700" locEndLn="48" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="49" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_0_4" lnHash="-1510788286" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="-1510788286" unbViolId="a4fc44c9-1ce3-3c7b-a871-ba710a590344" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48ce045f-1245-3506-bb01-cfb5f0edb457" locEndPos="1" locType="sr" hash="972801700" locEndLn="49" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="49" sev="4" auth="lyao" locRef="1" rule="MISRAC2012-DIR_4_9-a" lnHash="-1510788286" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-1510788286" unbViolId="6563e8f4-4426-3b06-8098-ad8376946210" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d9c2b88-5cfe-341e-aac7-be8bc8b14d7c" locEndPos="1" locType="sr" hash="972801700" locEndLn="49" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="49" sev="3" auth="lyao" locRef="1" rule="MISRA2004-19_7" lnHash="-1510788286" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-1510788286" unbViolId="07d65f1f-70fc-3be9-b1e8-221dcb2bd9c6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06b099be-c28f-309d-ad01-eb7997b4a247" locEndPos="1" locType="sr" hash="972801700" locEndLn="49" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="49" sev="2" auth="lyao" locRef="1" rule="JSF-029" lnHash="-1510788286" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="-1510788286" unbViolId="7cb82109-111a-3f53-a8d3-ef48ce5c2d02" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8187101-f56d-324a-bb5e-b3a218bad7f4" locEndPos="1" locType="sr" hash="972801700" locEndLn="49" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="49" sev="4" auth="lyao" locRef="1" rule="MISRA2012-DIR-4_9" lnHash="-1510788286" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="-1510788286" unbViolId="c7b0874f-bd32-30d7-b2ca-b911573479c9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f91e0bc9-e08d-3bb1-82a2-341af81a3534" locEndPos="1" locType="sr" hash="972801700" locEndLn="49" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="49" sev="3" auth="lyao" locRef="1" rule="CERT_C-PRE00-a" lnHash="-1510788286" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-1510788286" unbViolId="6dfef6d8-dcfa-366a-8634-ed1e043b6949" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da36e113-45ce-3efe-a9d1-508084a3968d" locEndPos="1" locType="sr" hash="972801700" locEndLn="49" goals="0,"/>
    <StdViol msg="Body of macro 'LOCK_RELEASE' is defined without parentheses" ln="49" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="49" sev="3" auth="lyao" locRef="1" rule="MISRA-096" lnHash="-1510788286" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-1510788286" unbViolId="ca3ffe80-37df-3d46-8bb4-205b620c2c79" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36eecc59-a630-3cdb-bb27-9712cc259623" locEndPos="1" locType="sr" hash="972801700" locEndLn="49" goals="0,"/>
    <StdViol msg="Body of macro 'LOCK_RELEASE' is defined without parentheses" ln="49" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="49" sev="1" auth="lyao" locRef="1" rule="CERT_C-PRE02-a" lnHash="-1510788286" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-1510788286" unbViolId="18203bde-08a2-343f-b007-7a37fdd512ab" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b077c94-aaf5-3bb3-a69e-eea94335d8f8" locEndPos="1" locType="sr" hash="972801700" locEndLn="49" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="49" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="49" sev="3" auth="lyao" locRef="1" rule="JSF-031" lnHash="-1510788286" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1510788286" unbViolId="3fe0ad2e-66fe-31a3-8e63-1d5dca8b4892" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb876eed-86c6-3367-a4ca-0e2243b2974d" locEndPos="1" locType="sr" hash="972801700" locEndLn="49" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="49" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="49" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_1_a" lnHash="-1510788286" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1510788286" unbViolId="1f9fe037-883c-3e87-96c7-f5ae2db488b0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75cbb1e3-67c1-3b52-8a59-450334ea8af3" locEndPos="1" locType="sr" hash="972801700" locEndLn="49" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="49" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="49" sev="3" auth="lyao" locRef="1" rule="HICPP-16_1_1-a" lnHash="-1510788286" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1510788286" unbViolId="911c525d-0891-344f-9e7a-9fd6724f29cd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd3e2516-d9ab-3ab9-b5e8-16a52c04dca9" locEndPos="1" locType="sr" hash="972801700" locEndLn="49" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="49" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="49" sev="3" auth="lyao" locRef="1" rule="PREPROC-01" lnHash="-1510788286" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1510788286" unbViolId="f9cbe9c5-d67b-3fc1-a286-f45c5ca0e3c4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="907f690f-5ad4-359e-9ba2-f249ab98aba0" locEndPos="1" locType="sr" hash="972801700" locEndLn="49" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="49" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="49" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A16_0_1-d" lnHash="-1510788286" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1510788286" unbViolId="035fa2bb-172c-3b54-a950-84234685993c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92164389-23d0-3d84-9e3e-6d3351482b9d" locEndPos="1" locType="sr" hash="972801700" locEndLn="49" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="49" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_2" lnHash="-1510788286" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1510788286" unbViolId="f2df6ab8-c665-30d9-a243-31efb3fa7d1f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d468a67d-fc79-3bd2-8e06-e28b9e2822ab" locEndPos="1" locType="sr" hash="972801700" locEndLn="49" goals="0,"/>
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="49" sev="3" auth="lyao" locRef="1" rule="PREPROC-12" lnHash="-1510788286" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1510788286" unbViolId="220cff91-959d-3b2f-9250-d6b77c4937d5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="810441e1-a786-314c-b23a-8793339225b3" locEndPos="1" locType="sr" hash="972801700" locEndLn="49" goals="0,"/>
    <StdViol msg="Not all body of macro 'LOCK_RELEASE' is enclosed in braces" ln="49" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="49" sev="3" auth="lyao" locRef="1" rule="PREPROC-14" lnHash="-1510788286" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-1510788286" unbViolId="4b341986-7894-303f-b80a-d2b1f1997cfe" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a72e392b-497b-3ca1-88ee-b28a72fc33a4" locEndPos="1" locType="sr" hash="972801700" locEndLn="49" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="49" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="49" sev="3" auth="lyao" locRef="1" rule="MISRA2004-19_10" lnHash="-1510788286" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1510788286" unbViolId="4a9b9af5-31a0-3ba9-8968-a99a91f8265d" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="50506b99-ee1b-3585-9a84-5505d18b5435" locEndPos="50" locType="sr" hash="972801700" locEndLn="49" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="49" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="49" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_0_6" lnHash="-1510788286" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="-1510788286" unbViolId="af34f548-c3be-37ba-ae4a-fb78724ba759" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ae119c8-f357-32f6-acb0-514baf99be4c" locEndPos="50" locType="sr" hash="972801700" locEndLn="49" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="49" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="49" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-20_7" lnHash="-1510788286" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="-1510788286" unbViolId="ebd1248a-ae74-3e86-bbe8-4aae22e8aa71" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70961196-fa8a-3ba4-9c46-f4c35b0000b0" locEndPos="50" locType="sr" hash="972801700" locEndLn="49" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="49" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="49" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M16_0_6-a" lnHash="-1510788286" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1510788286" unbViolId="53ab7b26-c80b-3cf4-a644-d6d67949a914" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e321bccd-094d-34f5-a926-3536e6720c2b" locEndPos="50" locType="sr" hash="972801700" locEndLn="49" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="49" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="49" sev="1" auth="lyao" locRef="1" rule="CERT_C-PRE01-a" lnHash="-1510788286" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1510788286" unbViolId="4de7f4b4-7900-3ad6-9a2b-73f66b0948a7" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="487ba16a-fb73-3c12-8cdf-cbf805244f04" locEndPos="50" locType="sr" hash="972801700" locEndLn="49" goals="0,"/>
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="49" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="49" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_20_7-a" lnHash="-1510788286" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1510788286" unbViolId="61ede0f7-b440-3945-ac2a-ea930031afb4" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f50e9ac-7219-356e-b2ba-bcf9fc032f82" locEndPos="50" locType="sr" hash="972801700" locEndLn="49" goals="0,"/>
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="51" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_0_4" lnHash="-541803970" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="-541803970" unbViolId="75000a90-a267-351b-a513-409118597ffa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7dc80b82-c56b-324e-86b8-934129f9b835" locEndPos="1" locType="sr" hash="972801700" locEndLn="51" goals="0,"/>
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="51" sev="4" auth="lyao" locRef="1" rule="MISRAC2012-DIR_4_9-a" lnHash="-541803970" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-541803970" unbViolId="39c9e219-bd5f-3eb0-997c-9bae016f3fdd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4e540ab-2abe-3de1-9420-288eb44de500" locEndPos="1" locType="sr" hash="972801700" locEndLn="51" goals="0,"/>
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="51" sev="3" auth="lyao" locRef="1" rule="MISRA2004-19_7" lnHash="-541803970" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-541803970" unbViolId="582e711f-5929-3ee1-8c39-8097b2283bc2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa1bc1f2-6782-3a09-a81c-7930401c058a" locEndPos="1" locType="sr" hash="972801700" locEndLn="51" goals="0,"/>
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="51" sev="2" auth="lyao" locRef="1" rule="JSF-029" lnHash="-541803970" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="-541803970" unbViolId="86bcb480-b2b9-33c4-a962-c688cdc88098" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4692c852-325a-3976-a51b-0047d9414331" locEndPos="1" locType="sr" hash="972801700" locEndLn="51" goals="0,"/>
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="51" sev="4" auth="lyao" locRef="1" rule="MISRA2012-DIR-4_9" lnHash="-541803970" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="-541803970" unbViolId="ecdb5497-6537-387c-be0b-7b640c26d6cd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6d98d6ae-d65f-33f2-88ce-561e8d282e04" locEndPos="1" locType="sr" hash="972801700" locEndLn="51" goals="0,"/>
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="51" sev="3" auth="lyao" locRef="1" rule="CERT_C-PRE00-a" lnHash="-541803970" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-541803970" unbViolId="1e21e075-c48a-382c-9c3d-870952fa0021" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4282e25e-b495-3d37-b068-55b8b09bae18" locEndPos="1" locType="sr" hash="972801700" locEndLn="51" goals="0,"/>
    <StdViol msg="Body of macro 'SLEEP' is defined without parentheses" ln="51" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="51" sev="3" auth="lyao" locRef="1" rule="MISRA-096" lnHash="-541803970" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-541803970" unbViolId="b49e54e8-0663-3606-84f5-9596fc436790" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3b043bb-657b-3974-9b1e-0cd1060b8953" locEndPos="1" locType="sr" hash="972801700" locEndLn="51" goals="0,"/>
    <StdViol msg="Body of macro 'SLEEP' is defined without parentheses" ln="51" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="51" sev="1" auth="lyao" locRef="1" rule="CERT_C-PRE02-a" lnHash="-541803970" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-541803970" unbViolId="2f47e9c2-c5c2-36e7-96c4-b669209652df" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ed2c60d-621b-37d5-8fd3-3962263ca172" locEndPos="1" locType="sr" hash="972801700" locEndLn="51" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="51" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="51" sev="3" auth="lyao" locRef="1" rule="JSF-031" lnHash="-541803970" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-541803970" unbViolId="1404a7a6-d562-3966-8589-ec976fc2e61e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe23c605-5445-372f-ad69-b05ae8ad7d11" locEndPos="1" locType="sr" hash="972801700" locEndLn="51" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="51" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="51" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_1_a" lnHash="-541803970" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-541803970" unbViolId="03dedb3a-2df9-322f-8e02-213d9565214f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="718f9c44-8e15-3387-b2d8-ff60dacf2b70" locEndPos="1" locType="sr" hash="972801700" locEndLn="51" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="51" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="51" sev="3" auth="lyao" locRef="1" rule="HICPP-16_1_1-a" lnHash="-541803970" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-541803970" unbViolId="87110de7-cf58-3b1a-bf89-28a8c7846008" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="865454e0-a6c5-30ab-9b97-79d6ed9edce6" locEndPos="1" locType="sr" hash="972801700" locEndLn="51" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="51" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="51" sev="3" auth="lyao" locRef="1" rule="PREPROC-01" lnHash="-541803970" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-541803970" unbViolId="aed8a745-e6fe-378c-8629-da34a6d10cc6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f6e21725-08fd-337e-8363-f2928189f97a" locEndPos="1" locType="sr" hash="972801700" locEndLn="51" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="51" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="51" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A16_0_1-d" lnHash="-541803970" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-541803970" unbViolId="281c3ccf-47c5-36ce-9d6f-337ec9590b4c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6dc3a63f-283e-31bc-aa5a-36e6db94526c" locEndPos="1" locType="sr" hash="972801700" locEndLn="51" goals="0,"/>
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="51" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_2" lnHash="-541803970" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-541803970" unbViolId="2133a2c6-188b-3a53-84a2-23d26d849f20" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5768263c-fd18-36eb-99d6-54092d1c4885" locEndPos="1" locType="sr" hash="972801700" locEndLn="51" goals="0,"/>
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="51" sev="3" auth="lyao" locRef="1" rule="PREPROC-12" lnHash="-541803970" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-541803970" unbViolId="7e75bf70-87d5-32cf-8aaf-fecde4d7dee4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f7597606-b8f1-36d6-ba00-e00d9c8a44cd" locEndPos="1" locType="sr" hash="972801700" locEndLn="51" goals="0,"/>
    <StdViol msg="Not all body of macro 'SLEEP' is enclosed in braces" ln="51" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="51" sev="3" auth="lyao" locRef="1" rule="PREPROC-14" lnHash="-541803970" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-541803970" unbViolId="f5302603-f126-3bd3-ba4d-1a066db3236a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="988ae005-fe57-35e9-b7c6-69eabebe87dd" locEndPos="1" locType="sr" hash="972801700" locEndLn="51" goals="0,"/>
    <StdViol msg="#endif pre-processor directive should not be used" ln="53" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="53" sev="3" auth="lyao" locRef="1" rule="PREPROC-10_b" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="abbc4a2a-949f-3afd-9821-1f14af7bbeb8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68e50cb1-973d-3832-ae6a-c47d7366946b" locEndPos="1" locType="sr" hash="972801700" locEndLn="53" goals="0,"/>
    <StdViol msg="#endif pre-processor directive should not be used" ln="53" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="53" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_1_d" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="b3e11f53-1ff8-385f-bd73-c985e04f9fde" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0727038-c59a-32f4-9eb7-3cde94f55abd" locEndPos="1" locType="sr" hash="972801700" locEndLn="53" goals="0,"/>
    <StdViol msg="#endif pre-processor directive should not be used" ln="53" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="53" sev="3" auth="lyao" locRef="1" rule="JSF-028_b" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="fb7cee9b-3e8d-3f84-a257-421a4d8076e6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0b692f6-8a02-328d-af0e-46f2d5de0568" locEndPos="1" locType="sr" hash="972801700" locEndLn="53" goals="0,"/>
    <StdViol msg="#endif pre-processor directive should not be used" ln="53" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="53" sev="3" auth="lyao" locRef="1" rule="HICPP-16_1_1-e" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="cc157e05-8b13-36a4-94b6-16bfb940fefc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1749bd6d-b133-365c-ae24-d4ed616cd77d" locEndPos="1" locType="sr" hash="972801700" locEndLn="53" goals="0,"/>
    <StdViol msg="Replace the 'MAX_OBJECTS' macro with a constant variable" ln="55" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="55" sev="3" auth="lyao" locRef="1" rule="CODSTA-37" lnHash="941979080" rule.header="Prefer const objects or enums to #defines for simple constants" tool="c++test" lineHash="941979080" unbViolId="cd72786f-5281-3e3c-8c3a-85e2e0857bac" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a76cbcfa-0c01-3381-bc07-958e5947847f" locEndPos="1" locType="sr" hash="972801700" locEndLn="55" goals="0,"/>
    <StdViol msg="Define constant 'MAX_OBJECTS' using 'const' or 'enum' instead of '#define'" ln="55" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="55" sev="2" auth="lyao" locRef="1" rule="JSF-030" lnHash="941979080" rule.header="The #define pre-processor directive shall not be used to define constant values" tool="c++test" lineHash="941979080" unbViolId="7444641f-a792-3c73-8169-3e7acfab3bbb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="28856a9e-9ec6-3cfd-bb57-6007fdbb8ff6" locEndPos="1" locType="sr" hash="972801700" locEndLn="55" goals="0,"/>
    <StdViol msg="Define constant 'MAX_OBJECTS' using 'const' or 'enum' instead of '#define'" ln="55" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="55" sev="3" auth="lyao" locRef="1" rule="CODSTA-03" lnHash="941979080" rule.header="Do not define constants via #define" tool="c++test" lineHash="941979080" unbViolId="f5a3fdeb-f141-3e56-9cf3-e8b307dfc41d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9588681-d5b7-38ad-b813-a776d7238cf1" locEndPos="1" locType="sr" hash="972801700" locEndLn="55" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'MAX_OBJECTS'" ln="55" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="55" sev="3" auth="lyao" locRef="1" rule="JSF-031" lnHash="941979080" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="941979080" unbViolId="626329cc-c563-3963-8f56-58f2e2c9f111" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa54736d-5c4b-34ee-a063-04526c3d6f88" locEndPos="1" locType="sr" hash="972801700" locEndLn="55" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'MAX_OBJECTS'" ln="55" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="55" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_1_a" lnHash="941979080" rule.header="Avoid using macro definitions" tool="c++test" lineHash="941979080" unbViolId="891c5870-507b-3571-8fc0-f6a03702fe2b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48ae359a-5b0b-3167-bc4c-84a56200640a" locEndPos="1" locType="sr" hash="972801700" locEndLn="55" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'MAX_OBJECTS'" ln="55" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="55" sev="3" auth="lyao" locRef="1" rule="HICPP-16_1_1-a" lnHash="941979080" rule.header="Avoid using macro definitions" tool="c++test" lineHash="941979080" unbViolId="055400d1-82ff-3422-b683-54b056e6dce7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ea6d7dbe-26dd-38d0-aea5-71b01864387c" locEndPos="1" locType="sr" hash="972801700" locEndLn="55" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'MAX_OBJECTS'" ln="55" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="55" sev="3" auth="lyao" locRef="1" rule="PREPROC-01" lnHash="941979080" rule.header="Avoid using macro definitions" tool="c++test" lineHash="941979080" unbViolId="b25c4925-3108-35b7-a9c1-92ffd10d0c86" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b0b894d-96b8-3190-842c-500abd4a124e" locEndPos="1" locType="sr" hash="972801700" locEndLn="55" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'MAX_OBJECTS'" ln="55" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="55" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A16_0_1-d" lnHash="941979080" rule.header="Avoid using macro definitions" tool="c++test" lineHash="941979080" unbViolId="a893b577-6369-31ee-a518-fe238c1740ba" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5129995-5caf-301f-8dc8-93f21b2033c0" locEndPos="1" locType="sr" hash="972801700" locEndLn="55" goals="0,"/>
    <StdViol msg="Do not use #define to define constant: 'MAX_OBJECTS'" ln="55" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="55" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_2" lnHash="941979080" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="941979080" unbViolId="9af32f72-8856-3ea2-9b98-760fbc7f7051" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1bfde3dd-777d-3a4f-8e11-91533d6b5240" locEndPos="1" locType="sr" hash="972801700" locEndLn="55" goals="0,"/>
    <StdViol msg="Do not use #define to define constant: 'MAX_OBJECTS'" ln="55" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="55" sev="3" auth="lyao" locRef="1" rule="PREPROC-12" lnHash="941979080" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="941979080" unbViolId="1ee754a9-7d2d-3d32-bf7c-c4c837466281" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="690589e0-d54e-3a58-bde4-c83f63c4c859" locEndPos="1" locType="sr" hash="972801700" locEndLn="55" goals="0,"/>
    <StdViol msg="Define constant 'STEP' using 'const' or 'enum' instead of '#define'" ln="56" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="56" sev="2" auth="lyao" locRef="1" rule="JSF-030" lnHash="-326464112" rule.header="The #define pre-processor directive shall not be used to define constant values" tool="c++test" lineHash="-326464112" unbViolId="366d2feb-365e-38eb-9463-0c19496bb7a2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12bc8ef6-ea3a-3702-bdd0-04251405a75f" locEndPos="1" locType="sr" hash="972801700" locEndLn="56" goals="0,"/>
    <StdViol msg="Define constant 'STEP' using 'const' or 'enum' instead of '#define'" ln="56" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="56" sev="3" auth="lyao" locRef="1" rule="CODSTA-03" lnHash="-326464112" rule.header="Do not define constants via #define" tool="c++test" lineHash="-326464112" unbViolId="96d89b65-17eb-3788-8f52-25bcbf791086" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c158f853-f189-3203-b5a2-107ff2083e1d" locEndPos="1" locType="sr" hash="972801700" locEndLn="56" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'STEP'" ln="56" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="56" sev="3" auth="lyao" locRef="1" rule="JSF-031" lnHash="-326464112" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-326464112" unbViolId="a978adc0-90b9-368c-97f4-b9cfba0af833" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9da1ddcc-3b51-3b9f-b573-29b776698c5e" locEndPos="1" locType="sr" hash="972801700" locEndLn="56" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'STEP'" ln="56" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="56" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_1_a" lnHash="-326464112" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-326464112" unbViolId="e735a599-322d-3fc4-a413-248ba74d4d9b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed84d3b0-c2c9-377d-8f3a-72a6d95b2716" locEndPos="1" locType="sr" hash="972801700" locEndLn="56" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'STEP'" ln="56" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="56" sev="3" auth="lyao" locRef="1" rule="HICPP-16_1_1-a" lnHash="-326464112" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-326464112" unbViolId="4387d7e3-a64b-3f8d-bb4b-e217a8fac4b4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87618592-8c81-396f-a511-1d19387b38f6" locEndPos="1" locType="sr" hash="972801700" locEndLn="56" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'STEP'" ln="56" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="56" sev="3" auth="lyao" locRef="1" rule="PREPROC-01" lnHash="-326464112" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-326464112" unbViolId="fe06b885-94d7-30f7-a4f8-1d2aee4138ee" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="56bf8eb9-d620-3850-acdb-380af2476398" locEndPos="1" locType="sr" hash="972801700" locEndLn="56" goals="0,"/>
    <StdViol msg="Do not use the macro definition 'STEP'" ln="56" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="56" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A16_0_1-d" lnHash="-326464112" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-326464112" unbViolId="6a610aff-02f0-3981-8100-7a8f03071daf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc263483-54b0-38c4-a277-0f66352e9731" locEndPos="1" locType="sr" hash="972801700" locEndLn="56" goals="0,"/>
    <StdViol msg="Do not use #define to define constant: 'STEP'" ln="56" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="56" sev="2" auth="lyao" locRef="1" rule="MISRA2008-16_2_2" lnHash="-326464112" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-326464112" unbViolId="255ded93-fe00-3e4b-ac5d-919576c9a13b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5766fe3-2fc1-39f5-9ffe-f3b40c707a79" locEndPos="1" locType="sr" hash="972801700" locEndLn="56" goals="0,"/>
    <StdViol msg="Do not use #define to define constant: 'STEP'" ln="56" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="56" sev="3" auth="lyao" locRef="1" rule="PREPROC-12" lnHash="-326464112" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-326464112" unbViolId="6488122e-82b8-3bc5-9cea-353c39a2dd77" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3eeb2450-f62d-3eaa-a45a-4cff5fd1d2f1" locEndPos="1" locType="sr" hash="972801700" locEndLn="56" goals="0,"/>
    <StdViol msg="Replace the 'STEP' macro with a constant variable" ln="56" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="56" sev="3" auth="lyao" locRef="1" rule="CODSTA-37" lnHash="-326464112" rule.header="Prefer const objects or enums to #defines for simple constants" tool="c++test" lineHash="-326464112" unbViolId="38ee21fe-3c3e-3d38-bf80-1e7b466e8bfb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4f5fe1e-b896-3cea-add4-eabd43752fef" locEndPos="1" locType="sr" hash="972801700" locEndLn="56" goals="0,"/>
    <StdViol msg="The definition of the 'assertion' function is not preceded by a comment" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="COMMENT-04" lnHash="1429237719" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="1429237719" unbViolId="c28679f0-6852-3885-b9bb-9237c60ce9a8" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ba37d21-6f14-372e-ba2d-ac93ec561381" locEndPos="6" locType="sr" urgent="true" hash="972801700" locEndLn="58" goals="1,"/>
    <StdViol msg="The definition of the 'assertion' function is not preceded by a comment" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="4" auth="lyao" locRef="1" rule="JSF-134" lnHash="1429237719" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="1429237719" unbViolId="5bef2fa7-b9e8-3856-90ee-76154e8e400f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="19ae34ff-b8ed-3f32-98f3-27ce07190d8b" locEndPos="6" locType="sr" urgent="true" hash="972801700" locEndLn="58" goals="1,"/>
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="4" auth="lyao" locRef="1" rule="OWASP2019-API9-e" lnHash="1429237719" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1429237719" unbViolId="91817c97-82d7-3834-8242-9bfb61e3c20a" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="60085e47-5fe2-3d3f-a37c-d3c9dbde12a7" locEndPos="6" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A3_3_1-a" lnHash="1429237719" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1429237719" unbViolId="1766ad49-f315-398d-89ae-2f5a74d6e7ed" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18e61d39-a22d-35f4-8558-af5ab0fe89a7" locEndPos="6" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="4" auth="lyao" locRef="1" rule="JSF-137" lnHash="1429237719" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="1429237719" unbViolId="ffdc1782-6a15-3647-8fb3-7c18e81330fd" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c9e1ed1-f9c7-38e9-b088-caffe903ed91" locEndPos="6" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="4" auth="lyao" locRef="1" rule="MISRA-023" lnHash="1429237719" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1429237719" unbViolId="6d58e34e-124b-319f-a5eb-713561e23b4d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ebcebf74-af11-312e-9c58-24a85b5e2e4d" locEndPos="6" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="2" auth="lyao" locRef="1" rule="MISRA2008-3_3_1" lnHash="1429237719" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1429237719" unbViolId="b511b035-6831-30e7-ae71-2b663ab6841d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5aec16d5-9c12-37a5-862b-8aa7ac90c47b" locEndPos="6" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL15-a" lnHash="1429237719" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1429237719" unbViolId="3aeb41c1-10c4-36cd-82e2-9d3c7aebd2d3" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a96448b-fec5-3306-b15e-61c60deeac79" locEndPos="6" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="4" auth="lyao" locRef="1" rule="MISRA2004-8_10" lnHash="1429237719" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1429237719" unbViolId="480ebd18-ecba-3377-8c76-63973d184679" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55b1f142-449b-3f2e-b6da-d3dfea4eefe7" locEndPos="6" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="Do not declare the 'assertion' function in the global namespace" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="4" auth="lyao" locRef="1" rule="JSF-098" lnHash="1429237719" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="1429237719" unbViolId="46932a58-6cff-33b8-a098-04ce1d20d39a" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2dd55f27-5ef7-32a9-9de6-eb8bc140399e" locEndPos="6" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="Do not declare the 'assertion' function in the global namespace" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M7_3_1-a" lnHash="1429237719" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="1429237719" unbViolId="378f5525-d147-3a55-8eed-75da7aee59f6" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="abed50c7-87a3-398b-9e36-0f91cd1e3729" locEndPos="6" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="Do not declare the 'assertion' function in the global namespace" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-36" lnHash="1429237719" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="1429237719" unbViolId="d2b37352-1117-3e19-9e5b-d1d8bc907485" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="166f7a61-90f4-3e44-bf4a-fe8ff91b9aa2" locEndPos="6" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="Do not declare the 'assertion' function in the global namespace" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="2" auth="lyao" locRef="1" rule="MISRA2008-7_3_1" lnHash="1429237719" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="1429237719" unbViolId="fc7112f6-da36-3817-8b3a-65c5c82879d0" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ea82d3e1-416e-3d68-a504-97da75647fbe" locEndPos="6" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="The 'assertion' function should be preceded by a comment that contains the '@brief' tag" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="COMMENT-14" lnHash="1429237719" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1429237719" unbViolId="b155801b-5597-363b-9b97-b369d24c03f0" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6e147c4-1d9e-30ee-9abb-1b84abfa1f5a" locEndPos="6" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="The 'assertion' function should be preceded by a comment that contains the '@brief' tag" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A2_7_3-a" lnHash="1429237719" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1429237719" unbViolId="6c323bcd-a94a-339e-ae5e-1e6b628b0559" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ef738f2-a7f0-3713-bfe7-e802dce579db" locEndPos="6" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="The 'condition' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A2_7_3-b" lnHash="1429237719" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1429237719" unbViolId="3bfa43fd-d330-3df5-add9-e3ffce35f5b2" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10e8ec23-1bbd-3353-a388-322f3059c769" locEndPos="6" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="The 'condition' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="COMMENT-14_b" lnHash="1429237719" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1429237719" unbViolId="b60b966d-d570-3020-b475-00898cd805c4" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12e68ec7-5eff-3841-8f38-205a86935605" locEndPos="6" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="The 'message' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A2_7_3-b" lnHash="1429237719" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1429237719" unbViolId="f49461f7-cf82-3c30-8e8e-6f3667db443b" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d4ffd6c-0b46-3ada-97de-370d9bb76396" locEndPos="6" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="The 'message' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="COMMENT-14_b" lnHash="1429237719" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1429237719" unbViolId="61272bae-06f1-3d47-b7c4-04b62601d7ed" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="632a2a4b-1e07-3f1a-839a-2292fe5f919f" locEndPos="6" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="Return type is not placed in line before function 'assertion'" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="FORMAT-28" lnHash="1429237719" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="1429237719" unbViolId="a74646b0-0d53-3093-a254-63c681b2e1ca" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c427e869-e767-360d-aee7-90bd1ed3bc56" locEndPos="6" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="Function 'assertion' has Cyclomatic Complexity value: 2" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="5" auth="lyao" locRef="1" rule="METRICS-29" lnHash="1429237719" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="1429237719" unbViolId="3c7928ea-26ec-3262-a015-8504523f431c" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba7ad8de-c2ba-3dac-aa22-68f72d9c5f65" locEndPos="6" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="Function 'assertion' has Essential Complexity value: 1" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="5" auth="lyao" locRef="1" rule="METRICS-33" lnHash="1429237719" rule.header="Report Essential Complexity" tool="c++test" lineHash="1429237719" unbViolId="35c053a4-7ac8-3d86-a4f1-a5ff3edf467c" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a83566a-6981-3806-99f9-4a2388fa1cf3" locEndPos="6" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="Naming convention not followed: assertion" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="NAMING-17" lnHash="1429237719" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="1429237719" unbViolId="4a73985c-2975-3ed1-afac-00f3e15e3970" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88c78dd9-2a53-3e77-9d54-ad90d3066273" locEndPos="6" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="4" auth="lyao" locRef="1" rule="MISRA2008-3_9_2" lnHash="1429237719" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1429237719" unbViolId="c5426621-8359-3810-861b-9e4f9bc8f3ed" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ef9bf06-1c3c-3c04-ab9d-f168de88772f" locEndPos="16" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="MISRA-013" lnHash="1429237719" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1429237719" unbViolId="2b8d3196-d534-3203-88a1-a0306ed2234b" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1da95344-60b8-3ef6-aef6-52fa96a50995" locEndPos="16" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="CODSTA-223" lnHash="1429237719" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1429237719" unbViolId="f3cc8efe-4d6f-37b6-9429-3b16178ea6cb" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4bfa3ce5-7584-3607-b9c7-1d73b8c2b1f6" locEndPos="16" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A3_9_1-b" lnHash="1429237719" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1429237719" unbViolId="08a72c55-1da4-3324-8efd-dc0a71a1e7ce" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e30ef264-f56b-39a8-be40-8c7bd29cab55" locEndPos="16" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="HICPP-7_1_6-b" lnHash="1429237719" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="1429237719" unbViolId="2ae5ec15-b534-30b8-8e2f-a02b2da7754e" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae71ee93-fb79-3808-a616-a09c60aae53d" locEndPos="16" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="4" auth="lyao" locRef="1" rule="MISRAC2012-DIR_4_6-b" lnHash="1429237719" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1429237719" unbViolId="99982eac-9a57-3297-a503-deec314a3678" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b1e7c2fc-2392-35f8-838c-d0ec169e758e" locEndPos="16" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="2" auth="lyao" locRef="1" rule="JSF-209_b" lnHash="1429237719" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1429237719" unbViolId="93ed7e1e-87d6-3449-8306-d257e3852282" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="191f5e3e-f98b-30f9-9554-5447bc6c222b" locEndPos="16" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="MISRA2004-6_3_b" lnHash="1429237719" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1429237719" unbViolId="89e173a5-6d35-385e-90c8-1ba05342ea04" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1cf0422d-d284-3100-829a-72c4ec7c99d9" locEndPos="16" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="4" auth="lyao" locRef="1" rule="MISRA2012-DIR-4_6_b" lnHash="1429237719" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1429237719" unbViolId="ba2b815b-cd54-367d-a9ed-9f6365a3c06e" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af582b89-e70f-3a1e-b4c7-9728bd76cd3e" locEndPos="16" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="HICPP-3_5_1-b" lnHash="1429237719" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1429237719" unbViolId="227a8361-5db8-3fb7-8b6d-ad96a2c56990" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3372c5e2-6fae-30bd-bd81-48fafa844c32" locEndPos="16" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="'condition' shall be declared as unsigned int or signed int" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="PORT-13" lnHash="1429237719" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="1429237719" unbViolId="a70fab82-8a37-33fd-bba6-8d6511ea9212" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d82b66f-4014-3a2a-964b-4268e22825bb" locEndPos="20" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="The 'condition' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="NAMING-HN-22" lnHash="1429237719" rule.header="Hungarian notation for int types" tool="c++test" lineHash="1429237719" unbViolId="404901c7-b3d4-39f8-927b-528061fc5b77" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a05b38e8-fd53-37d0-b745-147ec8a6b18c" locEndPos="20" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="The 'condition' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="NAMING-HN-30" lnHash="1429237719" rule.header="Hungarian notation for int types" tool="c++test" lineHash="1429237719" unbViolId="0384b2f4-1ff1-323f-8b89-a1ac10546f72" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c039689-b946-3d93-bdaa-d58fcd4133c5" locEndPos="20" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="The 'condition' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="NAMING-HN-43" lnHash="1429237719" rule.header="Hungarian notation for word types" tool="c++test" lineHash="1429237719" unbViolId="1e0bf590-6304-338b-b3cc-9ae5bbb2914c" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c717122-9af7-3a81-a3e2-ecd463eda76f" locEndPos="20" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="The 'const' qualifier should be placed on the right hand side of the type" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="FORMAT-47_a" lnHash="1429237719" rule.header="Place CV-qualifiers on the right hand side of the type they apply to" tool="c++test" lineHash="1429237719" unbViolId="ec62263e-0bfa-3f23-9165-6490447abdea" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="53e85e95-e950-315d-95c7-94d856a44300" locEndPos="31" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="The 'const' qualifier should be placed on the right hand side of the type" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="HICPP-7_1_4-a" lnHash="1429237719" rule.header="Place CV-qualifiers on the right hand side of the type they apply to" tool="c++test" lineHash="1429237719" unbViolId="3c921409-4d07-33dc-99e6-499d45e8cbbd" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2fbb140-1cbf-389b-bb48-be8aa52a2129" locEndPos="31" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="The basic numerical type 'char' should not be used" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="4" auth="lyao" locRef="1" rule="MISRA2008-3_9_2" lnHash="1429237719" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1429237719" unbViolId="4dab25eb-de2e-35f0-9433-aba8b2bcdaa0" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98574dff-87ba-359b-8a01-42e6e9dd3c70" locEndPos="37" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="The basic numerical type 'char' should not be used" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="MISRA-013" lnHash="1429237719" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1429237719" unbViolId="dc21574e-7059-3ad1-9958-1ee01fac8863" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4fbef35a-4b0c-3a6c-8e9c-b4650f62e19e" locEndPos="37" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="The parameter of pointer or array type is declared: message" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="CODSTA-94" lnHash="1429237719" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="1429237719" unbViolId="47ee5345-6a9e-32f0-bd96-7ff3538fac20" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6653e121-56ab-3e4a-8e57-1eb341c5604f" locEndPos="43" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="The parameter of pointer type is declared: message" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="CODSTA-95" lnHash="1429237719" rule.header="Do not declare pointer type" tool="c++test" lineHash="1429237719" unbViolId="77c50ddb-ac66-3a38-89e3-2d3bceafbdb6" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1b2b4583-c060-313b-b28f-b88e49adeafa" locEndPos="43" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="Parameter 'message' is not validated before use" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="CERT_C-API00-a" lnHash="1429237719" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="1429237719" unbViolId="fab6ffef-5a0a-3c37-8ee2-819e440bcbc3" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c53be21a-9cac-371c-8f72-4b3d1a5b9711" locEndPos="43" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="Parameter 'message' is not validated before use" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="CODSTA-86" lnHash="1429237719" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="1429237719" unbViolId="b924f115-91a7-356f-bcd3-8e50dd0f7cae" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="331f2dc5-cd68-3a0a-931e-31fc99f80256" locEndPos="43" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="The 'message' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="NAMING-HN-05" lnHash="1429237719" rule.header="Hungarian notation for byte pointer, array, or reference types" tool="c++test" lineHash="1429237719" unbViolId="e5fb1955-5037-3a82-8c99-dd5d05236c33" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e205be4-3a0a-3cb3-b51e-fabafc1dbf6a" locEndPos="43" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="The 'message' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="NAMING-HN-09" lnHash="1429237719" rule.header="Hungarian notation for char pointer, array, or reference types" tool="c++test" lineHash="1429237719" unbViolId="ed15cea7-c63b-376a-866b-7d1570dc46c9" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="20ce3d91-d079-3782-b3e7-8208fb15c98b" locEndPos="43" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="The 'message' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="NAMING-HN-10" lnHash="1429237719" rule.header="Hungarian notation for char pointer or reference types" tool="c++test" lineHash="1429237719" unbViolId="f1259e86-8fe6-38eb-9bed-53b037cbc0ee" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f1967a7-5ff9-301b-8c78-69196593f4b5" locEndPos="43" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="The 'message' identifier should have the 'p' prefix" ln="58" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="58" sev="3" auth="lyao" locRef="1" rule="NAMING-HN-34" lnHash="1429237719" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="1429237719" unbViolId="85260181-e952-33c9-bdfd-49dbdc63f6a0" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8de884c-69cd-3136-b17c-416cad90655f" locEndPos="43" locType="sr" hash="972801700" locEndLn="58" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="59" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="59" sev="3" auth="lyao" locRef="1" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="844fa429-8476-3947-a9e8-4159e1657d7e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f1223411-ceb3-3c19-8a3d-7312e7023011" locEndPos="1" locType="sr" hash="972801700" locEndLn="59" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="60" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="60" sev="3" auth="lyao" locRef="1" rule="JSF-061" lnHash="-600547524" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-600547524" unbViolId="5f55b8ec-70d3-320c-b959-e920f483c4e3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf714a29-99e4-3887-ad51-4a24d3f7e292" locEndPos="1" locType="sr" hash="972801700" locEndLn="60" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="60" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="60" sev="3" auth="lyao" locRef="1" rule="FORMAT-42" lnHash="-600547524" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-600547524" unbViolId="e33c5fcf-f7d1-3f42-9980-b718c4725e1b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9611e5e5-c16f-3b79-8741-07995642b361" locEndPos="1" locType="sr" hash="972801700" locEndLn="60" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="60" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="60" sev="3" auth="lyao" locRef="1" rule="JSF-060_a" lnHash="-600547524" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-600547524" unbViolId="06bd9b78-e5ce-3eb8-9468-e036650dcf34" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="723e1288-4a93-35d8-a54b-ee1a39dfc476" locEndPos="1" locType="sr" hash="972801700" locEndLn="60" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="60" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="60" sev="3" auth="lyao" locRef="1" rule="FORMAT-43" lnHash="-600547524" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-600547524" unbViolId="e0a159a4-5518-3f25-8512-3d61409ba2f8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3edc3246-3a70-32b1-973e-77007d0cd864" locEndPos="1" locType="sr" hash="972801700" locEndLn="60" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="60" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="60" sev="3" auth="lyao" locRef="1" rule="JSF-060_b" lnHash="-600547524" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-600547524" unbViolId="2c516c54-20cf-3337-a44b-4c49e6a0dc7e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1bc6dbd4-6107-3f65-8e5e-7a014d8b9f01" locEndPos="1" locType="sr" hash="972801700" locEndLn="60" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="60" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="60" sev="3" auth="lyao" locRef="1" rule="FORMAT-02" lnHash="-600547524" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-600547524" unbViolId="3d2cb6ce-7ddc-38f2-981c-c1c9f94a47ab" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59030ff5-b8f2-36a9-ae8e-2344c30a6fef" locEndPos="1" locType="sr" hash="972801700" locEndLn="60" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="60" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="60" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-600547524" rule.header="Tabs should be avoided" tool="c++test" lineHash="-600547524" unbViolId="762b30aa-6598-303e-8197-276d2ccad0cf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="80eadfc7-7e88-3846-951f-96f56c40deb1" locEndPos="1" locType="sr" hash="972801700" locEndLn="60" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="60" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="60" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-600547524" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-600547524" unbViolId="e4902a83-f64c-375e-b894-2e43977d162f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76b34e25-446c-3cf0-92cf-2d62130d1588" locEndPos="1" locType="sr" hash="972801700" locEndLn="60" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="60" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="60" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-600547524" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-600547524" unbViolId="7d8107e9-74e5-3867-9d64-6e62f14fd359" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3ac067e-f239-3be1-bb7d-c27fff8f4a42" locEndPos="1" locType="sr" hash="972801700" locEndLn="60" goals="0,"/>
    <StdViol msg="The 'if' statement doesn't have an 'else' clause" ln="60" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="60" sev="3" auth="lyao" locRef="1" rule="CODSTA-23" lnHash="-600547524" rule.header="All 'if' statements should have an 'else' clause" tool="c++test" lineHash="-600547524" unbViolId="ddce8fcb-7951-3d36-bc23-1c361384c1d3" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a74f671-52f5-3e2d-95d5-d6dabcc3dfac" locEndPos="2" locType="sr" hash="972801700" locEndLn="60" goals="0,"/>
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="60" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="60" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M5_3_1-a" lnHash="-600547524" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-600547524" unbViolId="b90815ef-8d64-33c3-8260-e71d3eb10713" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="367a7447-81ca-3fad-9258-c9fe1c6f69b8" locEndPos="6" locType="sr" hash="972801700" locEndLn="60" goals="0,"/>
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="60" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="60" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-67" lnHash="-600547524" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-600547524" unbViolId="5047db38-f4b2-3ddd-8089-1e9b8538c0f1" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dbbf86d0-049a-309e-8997-2bd701a51807" locEndPos="6" locType="sr" hash="972801700" locEndLn="60" goals="0,"/>
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="60" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="60" sev="2" auth="lyao" locRef="1" rule="MISRA2008-5_3_1" lnHash="-600547524" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-600547524" unbViolId="24a1e5f0-ff2d-33b6-b71c-b504b67a63d2" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ec48f31-78a9-3105-97ff-038932f939d6" locEndPos="6" locType="sr" hash="972801700" locEndLn="60" goals="0,"/>
    <StdViol msg="In 'assertion' function use positive logic rather than negative logic whenever possible" ln="60" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="60" sev="5" auth="lyao" locRef="1" rule="CODSTA-46" lnHash="-600547524" rule.header="Use positive logic rather than negative logic whenever practical" tool="c++test" lineHash="-600547524" unbViolId="66ea4e64-e6c7-3525-b610-4d09fe780789" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="219fdcf0-95ee-308c-af99-18cde731d6a9" locEndPos="6" locType="sr" hash="972801700" locEndLn="60" goals="0,"/>
    <StdViol msg="The operand of logical operator '!' is not 'effectively Boolean'" ln="60" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="60" sev="3" auth="lyao" locRef="1" rule="MISRA2004-12_6_a" lnHash="-600547524" rule.header="The operands of logical operators (&amp;&amp;, || and !) should be effectively Boolean" tool="c++test" lineHash="-600547524" unbViolId="fc4f6295-15bb-3326-ae77-6e9b159fb6a2" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8e27a16-7c25-3ebb-9ced-93736f5f12c3" locEndPos="6" locType="sr" hash="972801700" locEndLn="60" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="61" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="61" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="1274881582" rule.header="Tabs should be avoided" tool="c++test" lineHash="1274881582" unbViolId="014592b1-4069-3d9d-bbd2-31eeb9bbdb29" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="478f5eb0-66d0-36f9-86fb-8531fe40bd4e" locEndPos="1" locType="sr" hash="972801700" locEndLn="61" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="61" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="61" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="1274881582" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1274881582" unbViolId="669e0fe8-da91-34e3-b95e-c517695c4174" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3fa064e1-13ce-39ef-8e9a-278cd5873c15" locEndPos="1" locType="sr" hash="972801700" locEndLn="61" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="61" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="61" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="1274881582" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1274881582" unbViolId="72fae4dd-f0f2-3fb8-bfbe-b22b15e7ce9d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b733e50-37b8-3101-bb23-be20577feca7" locEndPos="1" locType="sr" hash="972801700" locEndLn="61" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="61" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="61" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="1274881582" rule.header="Tabs should be avoided" tool="c++test" lineHash="1274881582" unbViolId="867edef8-1118-31fe-aad4-fbf6e97e7a67" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51376952-f168-350c-ad8d-541abe2e671b" locEndPos="2" locType="sr" hash="972801700" locEndLn="61" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="61" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="61" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="1274881582" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1274881582" unbViolId="938e8d74-079b-387b-94e9-7c55bf9c63f1" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13487085-00bb-3100-9a85-46eef7d5e853" locEndPos="2" locType="sr" hash="972801700" locEndLn="61" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="61" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="61" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="1274881582" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1274881582" unbViolId="f7019647-7eb9-300a-8902-038bd355917f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1669b1bc-a3d0-38bf-8ac8-605e3a5636fe" locEndPos="2" locType="sr" hash="972801700" locEndLn="61" goals="0,"/>
    <StdViol msg="Throw only instances of std::exception" ln="61" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="61" sev="4" auth="lyao" locRef="1" rule="AUTOSAR-A15_1_1-a" lnHash="1274881582" rule.header="Only use instances of std::exception for exceptions" tool="c++test" lineHash="1274881582" unbViolId="fab9d9b8-ec84-309e-85fd-a14d35fa5876" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="375d455d-771e-3b78-9742-6437213cc6a1" locEndPos="3" locType="sr" hash="972801700" locEndLn="61" goals="0,"/>
    <StdViol msg="Throw only instances of std::exception" ln="61" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="61" sev="3" auth="lyao" locRef="1" rule="HICPP-15_1_1-a" lnHash="1274881582" rule.header="Only use instances of std::exception for exceptions" tool="c++test" lineHash="1274881582" unbViolId="7b626527-de60-384b-b2a7-cefdf830dba2" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52b08b41-6c0d-36fe-9050-a9fd3f9c3427" locEndPos="3" locType="sr" hash="972801700" locEndLn="61" goals="0,"/>
    <StdViol msg="c++ exception handling structure is used in function 'assertion'" ln="61" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="61" sev="2" auth="lyao" locRef="1" rule="JSF-208" lnHash="1274881582" rule.header="C++ exceptions shall not be used" tool="c++test" lineHash="1274881582" unbViolId="7cb1fead-3000-3b3a-8738-3beef2d0ac6a" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8ed32cb-0f5c-3435-9997-8ffb46b494a8" locEndPos="3" locType="sr" hash="972801700" locEndLn="61" goals="0,"/>
    <StdViol msg="c++ exception handling structure is used in function 'assertion'" ln="61" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="61" sev="2" auth="lyao" locRef="1" rule="EXCEPT-05" lnHash="1274881582" rule.header="C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.)" tool="c++test" lineHash="1274881582" unbViolId="8edfa242-94fa-3df1-8715-013f17e0b321" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="088572d2-daa4-3db3-b56c-20b433b4fe59" locEndPos="3" locType="sr" hash="972801700" locEndLn="61" goals="0,"/>
    <StdViol msg="Exception of type 'const char *' is thrown by pointer; throw by value instead" ln="61" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="61" sev="4" auth="lyao" locRef="1" rule="MISRA2008-15_0_2" lnHash="1274881582" rule.header="An exception object should not have pointer type" tool="c++test" lineHash="1274881582" unbViolId="22404e98-712b-385f-b80e-4a3974d30733" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="01fd5307-0df6-3e5e-abeb-080fe2b11648" locEndPos="3" locType="sr" hash="972801700" locEndLn="61" goals="0,"/>
    <StdViol msg="Exception of type 'const char *' is thrown by pointer; throw by value instead" ln="61" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="61" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A15_1_2-a" lnHash="1274881582" rule.header="An exception object should not have pointer type" tool="c++test" lineHash="1274881582" unbViolId="cbe2fa92-d311-3953-8c93-b7f74bc9233d" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c0cbfac-a42d-3a60-87a7-8b3e70a244a1" locEndPos="3" locType="sr" hash="972801700" locEndLn="61" goals="0,"/>
    <StdViol msg="Exception of type 'const char *' is thrown by pointer; throw by value instead" ln="61" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="61" sev="3" auth="lyao" locRef="1" rule="EXCEPT-09" lnHash="1274881582" rule.header="An exception object should not have pointer type" tool="c++test" lineHash="1274881582" unbViolId="55b5c6a1-84f5-39a3-a15d-3240e2475655" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00ba5a73-0056-3387-b29a-c6b92a9eae40" locEndPos="3" locType="sr" hash="972801700" locEndLn="61" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="62" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="62" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="404" rule.header="Tabs should be avoided" tool="c++test" lineHash="404" unbViolId="4df005a4-b224-3105-8974-4ef5fef67d9d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9041112-cc68-34e8-b1a0-1fb81993c06d" locEndPos="1" locType="sr" hash="972801700" locEndLn="62" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="62" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="62" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="2402ea00-4558-3764-8ee9-8d6c83a9b726" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1c08585-cf3a-3eed-a171-f1e58489ae91" locEndPos="1" locType="sr" hash="972801700" locEndLn="62" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="62" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="62" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="161310c0-0c20-3d91-b5aa-141805bca36e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5690db10-65a5-39d8-956c-66fa12df17aa" locEndPos="1" locType="sr" hash="972801700" locEndLn="62" goals="0,"/>
    <StdViol msg="The name 'changePositionMutex' should be composed only of lowercase letters" ln="65" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="65" sev="3" auth="lyao" locRef="1" rule="JSF-051" lnHash="136478104" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="136478104" unbViolId="834f7d68-80ce-3716-bea8-01bee8e23197" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5b45955-b20a-366c-a3e5-ab8640810ba3" locEndPos="25" locType="sr" hash="972801700" locEndLn="65" goals="0,"/>
    <StdViol msg="The name 'changePositionMutex' should be composed only of lowercase letters" ln="65" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="65" sev="3" auth="lyao" locRef="1" rule="NAMING-44" lnHash="136478104" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="136478104" unbViolId="aac78ce1-effd-30d3-90d3-00807f26f497" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99f9e212-20bc-3040-9c6d-fd74bdeb6ee1" locEndPos="25" locType="sr" hash="972801700" locEndLn="65" goals="0,"/>
    <StdViol msg="Do not declare the 'changePositionMutex' variable in the global namespace" ln="65" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="65" sev="4" auth="lyao" locRef="1" rule="JSF-098" lnHash="136478104" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="136478104" unbViolId="f935a5ef-c617-3702-b374-637865091340" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="881dc0d3-1845-39b6-ac05-6a55107091c5" locEndPos="25" locType="sr" hash="972801700" locEndLn="65" goals="0,"/>
    <StdViol msg="Do not declare the 'changePositionMutex' variable in the global namespace" ln="65" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="65" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M7_3_1-a" lnHash="136478104" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="136478104" unbViolId="0f670069-e2ff-3dfa-a9a5-3ec351ae4e05" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2abd5f8-7be2-3540-8f6f-3c899a83f138" locEndPos="25" locType="sr" hash="972801700" locEndLn="65" goals="0,"/>
    <StdViol msg="Do not declare the 'changePositionMutex' variable in the global namespace" ln="65" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="65" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-36" lnHash="136478104" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="136478104" unbViolId="2f44913d-069a-33fc-a528-4ecf972e2c46" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9dcbeabe-9fd9-31c0-bd3a-e54b7365710f" locEndPos="25" locType="sr" hash="972801700" locEndLn="65" goals="0,"/>
    <StdViol msg="Do not declare the 'changePositionMutex' variable in the global namespace" ln="65" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="65" sev="2" auth="lyao" locRef="1" rule="MISRA2008-7_3_1" lnHash="136478104" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="136478104" unbViolId="8624c459-b945-32be-9b9b-cb804da340c4" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bed43df2-a6bd-3c02-bcf5-a7e952eeb062" locEndPos="25" locType="sr" hash="972801700" locEndLn="65" goals="0,"/>
    <StdViol msg="'changePositionMutex' should be encapsulated in a class" ln="65" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="65" sev="5" auth="lyao" locRef="1" rule="CODSTA-CPP-18" lnHash="136478104" rule.header="Encapsulate global variables and constants, enumerated types, and typedefs in a class" tool="c++test" lineHash="136478104" unbViolId="39b4bfe6-d6a3-3c1e-bc67-2d7e4c035d51" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd9a37f9-0e77-3412-b35a-81d4725fed52" locEndPos="25" locType="sr" hash="972801700" locEndLn="65" goals="0,"/>
    <StdViol msg="The 'static' keyword is used in 'changePositionMutex' variable declaration" ln="65" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="65" sev="3" auth="lyao" locRef="1" rule="HICPP-7_4_1-a" lnHash="136478104" rule.header="Do not use static keyword except inside functions and classes" tool="c++test" lineHash="136478104" unbViolId="1131cc64-ac7d-3f90-a72b-d085daec35b5" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="843ecf7b-b0d4-340e-becf-cb7747a5f89a" locEndPos="25" locType="sr" hash="972801700" locEndLn="65" goals="0,"/>
    <StdViol msg="The 'static' keyword is used in 'changePositionMutex' variable declaration" ln="65" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="65" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-50" lnHash="136478104" rule.header="Do not use static keyword except inside functions and classes" tool="c++test" lineHash="136478104" unbViolId="483f75eb-ccba-36f8-ba09-390e59efb968" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ecd4efce-4115-34a8-98e7-e438b8d48e2a" locEndPos="25" locType="sr" hash="972801700" locEndLn="65" goals="0,"/>
    <StdViol msg="Do not define the 'changePositionMutex' global variable" ln="65" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="65" sev="3" auth="lyao" locRef="1" rule="JSF-207" lnHash="136478104" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="136478104" unbViolId="53cdddac-a41a-3249-b447-e4ce17640a65" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0fd9ac67-f4f6-328f-bb1c-b0d1e5dce293" locEndPos="25" locType="sr" hash="972801700" locEndLn="65" goals="0,"/>
    <StdViol msg="Do not define the 'changePositionMutex' global variable" ln="65" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="65" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-82" lnHash="136478104" rule.header="Global variables and static data members should not be used" tool="c++test" lineHash="136478104" unbViolId="072e71ab-3616-3b99-ad99-fc1cdf74a124" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16cac51b-c12d-3e7f-a884-99d1f265a4a6" locEndPos="25" locType="sr" hash="972801700" locEndLn="65" goals="0,"/>
    <StdViol msg="The 'changePositionMutex' variable should be commented" ln="65" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="65" sev="3" auth="lyao" locRef="1" rule="JSF-132_a" lnHash="136478104" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="136478104" unbViolId="15bc4246-2e7e-3b1f-bb57-00568bc09686" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3f1e40e-1f09-37e2-8bcd-4f091719de61" locEndPos="25" locType="sr" hash="972801700" locEndLn="65" goals="0,"/>
    <StdViol msg="The 'changePositionMutex' variable should be commented" ln="65" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="65" sev="3" auth="lyao" locRef="1" rule="COMMENT-05" lnHash="136478104" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="136478104" unbViolId="e1885115-3ad3-376a-875b-aa6b2cb4b253" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09ed48a2-0b2b-38c1-a59f-76b962fa03c0" locEndPos="25" locType="sr" hash="972801700" locEndLn="65" goals="0,"/>
    <StdViol msg="Use of variable &quot;changePositionMutex&quot; with static storage duration is not allowed" ln="65" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="65" sev="3" auth="lyao" locRef="1" rule="HICPP-3_3_1-a" lnHash="136478104" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="136478104" unbViolId="fe9db76d-0fce-3a3f-9fc3-8da3024f254b" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23b1924a-b092-3b9d-ac17-4b0bd0ff56ef" locEndPos="25" locType="sr" hash="972801700" locEndLn="65" goals="0,"/>
    <StdViol msg="Global variable 'changePositionMutex' is declared" ln="65" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="65" sev="5" auth="lyao" locRef="1" rule="MISRA-022" lnHash="136478104" rule.header="Declare objects at function scope" tool="c++test" lineHash="136478104" unbViolId="f8abfe26-ed51-3c0a-af88-aef193d7ece5" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a56781c-9afc-3e77-8af1-eef2499cadff" locEndPos="25" locType="sr" hash="972801700" locEndLn="65" goals="0,"/>
    <StdViol msg="Naming convention not followed: changePositionMutex" ln="65" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="65" sev="3" auth="lyao" locRef="1" rule="NAMING-18" lnHash="136478104" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="136478104" unbViolId="06d8629f-585b-377b-bbe7-87795dfef84e" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13f2509b-1fbd-3d8d-90c4-646cc5bc8005" locEndPos="25" locType="sr" hash="972801700" locEndLn="65" goals="0,"/>
    <StdViol msg="The 'changePositionMutex' identifier should have the 's' prefix" ln="65" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="65" sev="3" auth="lyao" locRef="1" rule="NAMING-HN-38" lnHash="136478104" rule.header="Hungarian notation for static variables" tool="c++test" lineHash="136478104" unbViolId="639a4b0a-a608-3662-8b9d-1a3226e1eb04" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36ffc47a-82b0-3455-9471-835d98eeed83" locEndPos="25" locType="sr" hash="972801700" locEndLn="65" goals="0,"/>
    <StdViol msg="The declaration of variable 'ring' contains a non-constant initializer" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A3_3_2-a" lnHash="893639642" rule.header="Static and thread-local objects shall be constant-initialized" tool="c++test" lineHash="893639642" unbViolId="8ae10b78-2bcb-3843-a486-f55b6913caa2" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75108efd-5011-3f93-8000-64aca7ddc6c0" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="The declaration of variable 'ring' contains a non-constant initializer" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="3" auth="lyao" locRef="1" rule="CODSTA-MCPP-32" lnHash="893639642" rule.header="Static and thread-local objects shall be constant-initialized" tool="c++test" lineHash="893639642" unbViolId="bbf2a7da-fea6-3cd4-9d1a-365fe3df9f22" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36968170-3644-3fd2-b609-a1dcabd09fb4" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="The definition of the 'ring' variable should contain a braced initializer" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A8_5_2-a" lnHash="893639642" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="893639642" unbViolId="c04375e1-ac93-3e41-ab89-bd702e845eac" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="25cf0f3e-1202-3f28-9d14-a8b759adfc36" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="The definition of the 'ring' variable should contain a braced initializer" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="3" auth="lyao" locRef="1" rule="CODSTA-MCPP-38" lnHash="893639642" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="893639642" unbViolId="b45dd437-e75a-3f49-95eb-29ba29110669" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="34797d6e-0584-381d-ac9d-d9b31f82d4d4" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="4" auth="lyao" locRef="1" rule="OWASP2019-API9-e" lnHash="893639642" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="893639642" unbViolId="6dcce7d7-a422-3d8f-8912-8b4c70682d84" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="854bbec0-166e-377b-8379-dc5a23558d5b" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A3_3_1-a" lnHash="893639642" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="893639642" unbViolId="47394a19-868d-3f85-9b0d-c5d05a2098a3" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="01e26848-88b3-3ce0-8da8-93fc14d73253" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="4" auth="lyao" locRef="1" rule="JSF-137" lnHash="893639642" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="893639642" unbViolId="0350cd62-49f7-3eac-b356-21bc29eb1154" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0002fcea-4dae-36ab-a99d-963a4657fd14" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="4" auth="lyao" locRef="1" rule="MISRA-023" lnHash="893639642" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="893639642" unbViolId="24e19ab0-f861-3dff-9379-3ee4c0d595b7" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04a186e9-90aa-3692-bcf9-50b2988af52a" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="2" auth="lyao" locRef="1" rule="MISRA2008-3_3_1" lnHash="893639642" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="893639642" unbViolId="919a26d0-ce29-32ac-8715-4653f496e62b" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa3de3aa-6d4a-3b8d-8d10-c31797798d1f" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL15-a" lnHash="893639642" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="893639642" unbViolId="e259f070-e7ab-3640-8469-364ae10dbf52" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8e8619c-cfc5-3052-b633-e861b3b1c9fe" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="4" auth="lyao" locRef="1" rule="MISRA2004-8_10" lnHash="893639642" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="893639642" unbViolId="af94f057-90a4-3024-8be7-bfa92ef614fa" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43c77844-141f-3206-b93c-254d133e23f8" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="Do not declare the 'ring' variable in the global namespace" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="4" auth="lyao" locRef="1" rule="JSF-098" lnHash="893639642" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="893639642" unbViolId="e596df9b-3e0f-3909-bedf-76fec95b194e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db135f17-fb19-329d-ab04-b6fb2bbd5d59" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="Do not declare the 'ring' variable in the global namespace" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M7_3_1-a" lnHash="893639642" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="893639642" unbViolId="0a1aa7ff-30d6-3192-9065-01c59a3222ca" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5481fe80-ded0-3005-aea2-ea8d64017a82" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="Do not declare the 'ring' variable in the global namespace" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-36" lnHash="893639642" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="893639642" unbViolId="951673c0-4400-3184-8a5e-b1aa6bbad0bf" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1783802c-1e71-39fd-b3af-55610de7d97b" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="Do not declare the 'ring' variable in the global namespace" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="2" auth="lyao" locRef="1" rule="MISRA2008-7_3_1" lnHash="893639642" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="893639642" unbViolId="444a1cd4-0130-3386-8b83-5d3023333faa" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ddc7559d-6565-32ea-b6f5-ebe5f128d3da" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="'ring' should be encapsulated in a class" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="5" auth="lyao" locRef="1" rule="CODSTA-CPP-18" lnHash="893639642" rule.header="Encapsulate global variables and constants, enumerated types, and typedefs in a class" tool="c++test" lineHash="893639642" unbViolId="2539005d-3fc3-3e3c-b4dd-b34218a0234a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03a8fa1b-80ea-34af-8e73-924236840921" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="Do not define the 'ring' global variable" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="3" auth="lyao" locRef="1" rule="JSF-207" lnHash="893639642" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="893639642" unbViolId="3ac84630-5935-3b11-9929-4534f9e8ceaa" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a2150d3e-3850-37d3-b7d6-bba40029b48f" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="Do not define the 'ring' global variable" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-82" lnHash="893639642" rule.header="Global variables and static data members should not be used" tool="c++test" lineHash="893639642" unbViolId="d48a9394-badc-36e8-a3d1-fceba202c7a4" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95f158bc-cbf5-3a62-a273-163d86ca04f9" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="The 'ring' variable should be commented" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="3" auth="lyao" locRef="1" rule="JSF-132_a" lnHash="893639642" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="893639642" unbViolId="518834e6-d389-32a4-9414-381ec5dc9d4c" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="333beaa6-f4f4-3c70-aed9-2462183f4ed7" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="The 'ring' variable should be commented" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="3" auth="lyao" locRef="1" rule="COMMENT-05" lnHash="893639642" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="893639642" unbViolId="997ff6d4-12af-3a93-887f-2aeacdb74290" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64815384-3056-3cf4-a20d-6f747b478c55" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M15_3_1-a" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="40ee00c4-0d52-3e76-b87a-d8f6b77794fe" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c592312-aade-3513-a3a5-74c8644ed775" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="2" auth="lyao" locRef="1" rule="CERT_CPP-ERR58-a" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="d80017a8-03a3-3810-b6ef-7e175d580931" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="771a0530-3fe5-3cae-b85e-e832171bad73" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="2" auth="lyao" locRef="1" rule="MISRA2008-15_3_1" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="c2477be6-4009-3fd8-9400-39841594cad6" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c745089-00b8-3cff-93c6-9e2422f15c1e" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A15_5_3-f" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="c64b8563-0d81-3c35-9f74-517ee21f031a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2376554-daf8-3d9a-bb58-fbcf4f0e28f7" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="3" auth="lyao" locRef="1" rule="CERT_CPP-ERR50-f" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="82350a8f-2156-3db3-9e21-0c62c9197f39" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="53f03cac-5d96-33a7-9919-b53d3136de46" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="3" auth="lyao" locRef="1" rule="EXCEPT-08" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="6700818c-113a-3b68-9a48-9291eb4cb6b6" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5cb6d509-368d-30b9-9161-491956ffc576" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="2" auth="lyao" locRef="1" rule="MISRA2008-15_5_3_f" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="1b062d00-aec4-3dfa-8a9a-fba0797ea743" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8c0d30d-3e66-3ec0-b01b-3df17f1f3cd6" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="Use of variable &quot;ring&quot; with static storage duration is not allowed" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="3" auth="lyao" locRef="1" rule="HICPP-3_3_1-a" lnHash="893639642" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="893639642" unbViolId="7a0bcdac-dd2c-3c68-982d-e3361c3a449e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1bd8e74e-becb-3617-a7cf-303683f7b8ac" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="Variable 'ring' should be declared using 'auto' specifier" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="3" auth="lyao" locRef="1" rule="HICPP-7_1_8-a" lnHash="893639642" rule.header="Use auto id = expr when declaring a variable that is the same type as the initializer function call" tool="c++test" lineHash="893639642" unbViolId="a7eef6aa-d9c4-3727-83a1-a2d7c3d1924a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4714cd4a-e129-3917-bcc5-1933d5199839" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="Global variable 'ring' is declared" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="5" auth="lyao" locRef="1" rule="MISRA-022" lnHash="893639642" rule.header="Declare objects at function scope" tool="c++test" lineHash="893639642" unbViolId="7999699d-a99f-3466-a013-d9041788df67" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83b997a1-f02c-36ec-9535-e45fc933bc59" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="Naming convention not followed: ring" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="3" auth="lyao" locRef="1" rule="NAMING-18" lnHash="893639642" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="893639642" unbViolId="3cab53b3-c7d2-382f-bbae-09729e83aceb" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12e079c8-7d98-38d5-9d1b-28cc3f985a6a" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="The type 'int' of function argument number '2' does not match declared type 'double'" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="3" auth="lyao" locRef="1" rule="PB-11" lnHash="893639642" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="893639642" unbViolId="949412f3-aa23-30d7-9f72-5c8bbf7d1ca9" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b29998dd-fd92-3a16-9135-d62666149bb8" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="Argument type conversion from &quot;shorter&quot; type to &quot;longer&quot; type" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="3" auth="lyao" locRef="1" rule="PORT-16" lnHash="893639642" rule.header="Avoid conversions from a &quot;shorter&quot; type to a &quot;longer&quot; type in function calls" tool="c++test" lineHash="893639642" unbViolId="49bc5d39-24e6-3c8c-81b3-3affb6dbbef6" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ffe8de7-105d-3bed-8c33-3b65e4530314" locEndPos="8" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="Implicit conversion from integral to floating type in function's argument" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="2" auth="lyao" locRef="1" rule="MISRA2008-5_0_5_b" lnHash="893639642" rule.header="There shall be no implicit floating-integral conversions" tool="c++test" lineHash="893639642" unbViolId="89af02ca-f642-3a04-9705-d564e9fc25a1" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be4dbb84-e143-3015-9079-97da7be06feb" locEndPos="25" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="Implicit conversion from integral to floating type in function's argument" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="3" auth="lyao" locRef="1" rule="CERT_C-EXP39-a" lnHash="893639642" rule.header="There shall be no implicit conversions from integral to floating type" tool="c++test" lineHash="893639642" unbViolId="87d219c9-1d5b-3c58-b8e8-3be8ffafb22f" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5645452-3b36-33c7-812a-b8769223ea8b" locEndPos="25" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="Implicit conversion from integral to floating type in function's argument" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M5_0_5-a" lnHash="893639642" rule.header="There shall be no implicit conversions from integral to floating type" tool="c++test" lineHash="893639642" unbViolId="e0f88dc8-4153-3b13-b815-7b400dd9dcc4" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d6e6429-9629-3ec7-8d17-5383b8d52fc3" locEndPos="25" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="Implicit conversion from integral to floating type in function's argument" ln="67" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="67" sev="3" auth="lyao" locRef="1" rule="MISRA2004-10_1_b" lnHash="893639642" rule.header="There shall be no implicit conversions from integral to floating type" tool="c++test" lineHash="893639642" unbViolId="2f814ea0-53cb-3c44-9a2f-0959b73c1beb" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b291f488-f507-31fd-b17a-128e0192c170" locEndPos="25" locType="sr" hash="972801700" locEndLn="67" goals="0,"/>
    <StdViol msg="The operator '*', used for 'participants' declaration, should be directly connected with the type" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="3" auth="lyao" locRef="1" rule="JSF-062" lnHash="-1054095129" rule.header="The dereference operator '*' and the address-of operator '&amp;' will be directly connected with the type-specifier" tool="c++test" lineHash="-1054095129" unbViolId="d893f5c7-e0f9-36fe-8de6-107d1fa77c1e" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64dcca82-7044-375f-a7b0-a99c4478437d" locEndPos="7" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="The operator '*', used for 'participants' declaration, should be directly connected with the type" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="4" auth="lyao" locRef="1" rule="FORMAT-32" lnHash="-1054095129" rule.header="The dereference operator '*' and the address-of operator '&amp;' should be directly connected with the type" tool="c++test" lineHash="-1054095129" unbViolId="e94f2449-7fb1-39ae-ac45-647105d60198" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e14f8761-3388-32f4-9c95-fba01f16a764" locEndPos="7" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="4" auth="lyao" locRef="1" rule="OWASP2019-API9-e" lnHash="-1054095129" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1054095129" unbViolId="d3c487ed-d763-3555-aee0-af03bc28d5a1" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af2e93a6-8ec3-339b-ab61-ad0e76f2291c" locEndPos="8" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A3_3_1-a" lnHash="-1054095129" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1054095129" unbViolId="67de601b-180e-3efa-a908-c26ba7688f99" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2fe47a4-9457-331d-8174-7a78e8062eff" locEndPos="8" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="4" auth="lyao" locRef="1" rule="JSF-137" lnHash="-1054095129" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-1054095129" unbViolId="a654e057-03bb-3b0d-bd7c-4d5878a733cb" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62a1f007-f008-37ec-9cf8-ad116308a107" locEndPos="8" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="4" auth="lyao" locRef="1" rule="MISRA-023" lnHash="-1054095129" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1054095129" unbViolId="f230b368-6999-3093-a94f-adb3fb2f17d2" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ee6b212-27ae-3fbf-a763-b9ae30b8453c" locEndPos="8" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="2" auth="lyao" locRef="1" rule="MISRA2008-3_3_1" lnHash="-1054095129" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1054095129" unbViolId="b66000b3-e817-33ff-b930-294a620c10a4" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9302b856-f20c-30be-9a09-949a62cd4066" locEndPos="8" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL15-a" lnHash="-1054095129" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1054095129" unbViolId="e54180bd-032d-3eb9-9588-d39df394ad8e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cc8296df-4c5d-3a38-b426-07065c4bb65a" locEndPos="8" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="4" auth="lyao" locRef="1" rule="MISRA2004-8_10" lnHash="-1054095129" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1054095129" unbViolId="16023040-2b90-384c-8b99-dc08cacfa107" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cda2d319-eb96-3a30-9286-cc7026d2846f" locEndPos="8" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="The 'participants' array should not be used" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="3" auth="lyao" locRef="1" rule="STL-37" lnHash="-1054095129" rule.header="C-style arrays shall not be used" tool="c++test" lineHash="-1054095129" unbViolId="f7c58ee5-1c7a-3bef-93af-653f6aa796d4" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="edc8a97a-ef15-3d4a-b32f-33032c863dc6" locEndPos="8" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="The 'participants' array should not be used" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A18_1_1-a" lnHash="-1054095129" rule.header="C-style arrays shall not be used" tool="c++test" lineHash="-1054095129" unbViolId="ff355fb3-976d-347b-8603-627a7d3293d2" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb41c07d-bb89-3a6f-ab7a-735bf4cdc7e1" locEndPos="8" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="Do not declare the 'participants' variable in the global namespace" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="4" auth="lyao" locRef="1" rule="JSF-098" lnHash="-1054095129" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-1054095129" unbViolId="bf01ffb3-e173-3735-9f5b-6a8fb4ec226d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5731dfe3-4617-3196-81ab-7c46044413f2" locEndPos="8" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="Do not declare the 'participants' variable in the global namespace" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M7_3_1-a" lnHash="-1054095129" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1054095129" unbViolId="fe5fa3b3-e56c-3387-938f-6283ee6ba328" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71880619-3033-3068-b9b2-a910171be26e" locEndPos="8" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="Do not declare the 'participants' variable in the global namespace" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-36" lnHash="-1054095129" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1054095129" unbViolId="7ec446aa-6313-3398-87c0-e188d928597b" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6e3e2e1-17e0-351d-9b6a-916b62e02162" locEndPos="8" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="Do not declare the 'participants' variable in the global namespace" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="2" auth="lyao" locRef="1" rule="MISRA2008-7_3_1" lnHash="-1054095129" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-1054095129" unbViolId="294cef87-fac5-37ea-8e45-3eb5b8add886" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0c710210-3cd4-38b3-842a-652699d423d5" locEndPos="8" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="Declaration of variable 'participants' contains more than one level of pointer indirection" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="3" auth="lyao" locRef="1" rule="HICPP-8_1_1-a" lnHash="-1054095129" rule.header="The declaration should not contain more than one level of pointer indirection" tool="c++test" lineHash="-1054095129" unbViolId="a71efeed-4c27-38b9-a75d-c54a3ef46f39" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65042e34-98c3-3b01-add9-4c0e7a91f86d" locEndPos="8" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="Declaration of variable 'participants' contains more than one level of pointer indirection" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="3" auth="lyao" locRef="1" rule="CODSTA-89" lnHash="-1054095129" rule.header="The declaration should not contain more than one level of pointer indirection" tool="c++test" lineHash="-1054095129" unbViolId="1fc41d42-db17-36ad-aa05-c75dd40e5801" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="759bde0d-f87d-3a95-85c6-943c0b52438e" locEndPos="8" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="The variable of pointer or array type is declared: participants" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="3" auth="lyao" locRef="1" rule="CODSTA-94" lnHash="-1054095129" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1054095129" unbViolId="d7583088-57ac-3342-8124-88da12c66c59" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a96cda40-0975-324d-ab8f-2019fe05eba0" locEndPos="8" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="The variable of pointer type is declared: participants" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="3" auth="lyao" locRef="1" rule="CODSTA-95" lnHash="-1054095129" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1054095129" unbViolId="6eae8e94-c267-3bdf-84cc-ce8439543921" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5cff9df4-a736-31c8-b860-dec3485fc6a7" locEndPos="8" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="'participants' should be encapsulated in a class" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="5" auth="lyao" locRef="1" rule="CODSTA-CPP-18" lnHash="-1054095129" rule.header="Encapsulate global variables and constants, enumerated types, and typedefs in a class" tool="c++test" lineHash="-1054095129" unbViolId="59fe111a-6241-3edb-8da4-0d8389f473c6" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c056701f-ed56-37f4-a956-41a332bb1194" locEndPos="8" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="Do not define the 'participants' global variable" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="3" auth="lyao" locRef="1" rule="JSF-207" lnHash="-1054095129" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="-1054095129" unbViolId="257fdb11-a207-324f-86d3-8306c184b1d9" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98c7f996-9e8a-3ea2-9ae3-0fb7b1785f5d" locEndPos="8" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="Do not define the 'participants' global variable" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-82" lnHash="-1054095129" rule.header="Global variables and static data members should not be used" tool="c++test" lineHash="-1054095129" unbViolId="f203b9cd-d910-35fe-8e45-e7185acdc22b" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47a53fed-9733-340f-840a-724558645656" locEndPos="8" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="The 'participants' variable should be commented" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="3" auth="lyao" locRef="1" rule="JSF-132_a" lnHash="-1054095129" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1054095129" unbViolId="2eedcc4c-80c7-3a4a-9880-0f83c0b732c2" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="63d89bc7-b8d5-3d89-ad61-cbc3a4e10bc8" locEndPos="8" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="The 'participants' variable should be commented" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="3" auth="lyao" locRef="1" rule="COMMENT-05" lnHash="-1054095129" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1054095129" unbViolId="8191fd32-dbe4-3242-80c4-b25286209a1d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="616e3349-97e9-395c-8bb4-532d2f1e7a0d" locEndPos="8" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="Use of variable &quot;participants&quot; with static storage duration is not allowed" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="3" auth="lyao" locRef="1" rule="HICPP-3_3_1-a" lnHash="-1054095129" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="-1054095129" unbViolId="d3f5f1a6-d81d-3b13-8d68-6126e91a9968" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94d53bb8-8379-3bdf-a1a6-9418ca0f4be3" locEndPos="8" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="Global variable 'participants' is declared" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="5" auth="lyao" locRef="1" rule="MISRA-022" lnHash="-1054095129" rule.header="Declare objects at function scope" tool="c++test" lineHash="-1054095129" unbViolId="16bc6f8f-27d3-3666-9c4b-e66585924c06" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d6c373b-61f2-34d3-8372-b47750b7b3c3" locEndPos="8" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="Naming convention not followed: participants" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="3" auth="lyao" locRef="1" rule="NAMING-18" lnHash="-1054095129" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="-1054095129" unbViolId="06eb3ec3-2112-3fb6-9ff9-34911278f837" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ab7b104-2d80-3505-abfe-2946c4c32536" locEndPos="8" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="The 'participants' identifier should have the 'rg' prefix" ln="68" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="68" sev="3" auth="lyao" locRef="1" rule="NAMING-HN-01" lnHash="-1054095129" rule.header="Hungarian notation for array variables and parameters" tool="c++test" lineHash="-1054095129" unbViolId="2137b3b0-dd6d-3d1e-b12e-acccdc3cfe5d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="575e943c-e0e9-3650-84c2-6f8f4de25a54" locEndPos="8" locType="sr" hash="972801700" locEndLn="68" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="4" auth="lyao" locRef="1" rule="MISRA2008-3_9_2" lnHash="-1146363747" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1146363747" unbViolId="b8ed7fb8-f590-3917-9367-c8cdbe3055ce" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7d2977e-7a54-3638-a885-fa447797eb20" locEndPos="1" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="3" auth="lyao" locRef="1" rule="MISRA-013" lnHash="-1146363747" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1146363747" unbViolId="08bb1a63-ab8d-3287-a8c2-95589fd726cb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="422ee883-c357-3390-af80-807bf415ca8b" locEndPos="1" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="3" auth="lyao" locRef="1" rule="CODSTA-223" lnHash="-1146363747" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1146363747" unbViolId="06eb5bf5-014c-31f5-9cf7-944969f4a7d2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c7049be-dee8-3d3e-9543-328e67714f0d" locEndPos="1" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A3_9_1-b" lnHash="-1146363747" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1146363747" unbViolId="bd59a2cf-a14e-3694-bacd-ecb4d4030f2c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47a56797-7866-3f12-9d75-2ea197c38ad5" locEndPos="1" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="3" auth="lyao" locRef="1" rule="HICPP-7_1_6-b" lnHash="-1146363747" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="-1146363747" unbViolId="56a7d0e7-15ad-33c0-b6a0-dcee4e0a0a72" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b16dc63-1e71-3458-aa51-fda0904224f5" locEndPos="1" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="4" auth="lyao" locRef="1" rule="MISRAC2012-DIR_4_6-b" lnHash="-1146363747" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1146363747" unbViolId="b16ff987-0de6-34a4-8932-d15d873a801d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4d05a22-fa5e-3ca6-ad44-ab46c2cc2343" locEndPos="1" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="2" auth="lyao" locRef="1" rule="JSF-209_b" lnHash="-1146363747" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-1146363747" unbViolId="a2653509-b9ea-36be-b855-aa8c821e30ea" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52a99a7a-fc5e-3f81-ab4f-49327175b9f4" locEndPos="1" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="3" auth="lyao" locRef="1" rule="MISRA2004-6_3_b" lnHash="-1146363747" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1146363747" unbViolId="b80e51b8-3fc9-3121-9e42-2c104b0579ee" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2cc1bbb7-548c-356f-8b42-aaa549c9adbb" locEndPos="1" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="4" auth="lyao" locRef="1" rule="MISRA2012-DIR-4_6_b" lnHash="-1146363747" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1146363747" unbViolId="5bc2f396-92e8-3aec-bb34-afd3258dad7b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="812f6504-9df9-3f08-9ef6-4f9745cd911d" locEndPos="1" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="3" auth="lyao" locRef="1" rule="HICPP-3_5_1-b" lnHash="-1146363747" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1146363747" unbViolId="5660914a-e655-3bee-9eb1-c1f2632a6fc4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb21b2b2-b6f8-375a-84f9-6c1417d193f9" locEndPos="1" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="The variable &quot;participantsCount&quot; was not initialized when declared" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="2" auth="lyao" locRef="1" rule="JSF-142_b" lnHash="-1146363747" rule.header="All variables shall be initialized before use" tool="c++test" lineHash="-1146363747" unbViolId="cfbf336e-4ba4-3d2e-b1d9-a9c20c6edee6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb1207d9-2209-3d15-8796-092191cb370a" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="The variable &quot;participantsCount&quot; was not initialized when declared" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="3" auth="lyao" locRef="1" rule="INIT-03" lnHash="-1146363747" rule.header="Initialize all variables" tool="c++test" lineHash="-1146363747" unbViolId="82363d42-9402-3457-83d3-de9c256d0399" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c737dde3-e9f8-32df-9868-6b406ba4e93e" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="4" auth="lyao" locRef="1" rule="OWASP2019-API9-e" lnHash="-1146363747" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1146363747" unbViolId="21dd9f55-fd1c-302e-91d0-e7a00facea86" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="28ceeae8-a41f-3204-be09-7e822e00f7c1" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A3_3_1-a" lnHash="-1146363747" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1146363747" unbViolId="85e5d7a9-f2d4-362e-8471-31f8cb532a47" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f673f896-03d9-3743-82ef-7718171253ee" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="4" auth="lyao" locRef="1" rule="JSF-137" lnHash="-1146363747" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-1146363747" unbViolId="f78dfae0-aa42-380a-a035-b914aa65d9d8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d80d541e-f8bd-3a57-99eb-d06524c5bbe2" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="4" auth="lyao" locRef="1" rule="MISRA-023" lnHash="-1146363747" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1146363747" unbViolId="b4509ee7-797d-3404-b8e0-a4e3d834c460" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98f9382c-8a4f-375f-9f15-abc3917720f6" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="2" auth="lyao" locRef="1" rule="MISRA2008-3_3_1" lnHash="-1146363747" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1146363747" unbViolId="2d6e3a33-0cbf-3a6f-b4cc-cd9729222259" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="456f52f9-07a9-3ed9-95c0-b64285d4c217" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL15-a" lnHash="-1146363747" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1146363747" unbViolId="0412730d-e728-3189-a20d-3df0d2905156" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e43b086-a678-33d2-8a38-3db1ca02da76" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="4" auth="lyao" locRef="1" rule="MISRA2004-8_10" lnHash="-1146363747" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1146363747" unbViolId="59e8a08e-6452-338c-8d49-32dd27941150" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8f8b385-3bd1-3b97-8774-989f7fe7ed5c" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="The name 'participantsCount' should be composed only of lowercase letters" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="3" auth="lyao" locRef="1" rule="JSF-051" lnHash="-1146363747" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1146363747" unbViolId="fce638e8-850a-37d7-95b4-a3d4c36b1147" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06238b5c-7e00-3a10-ba47-cbe4c5855856" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="The name 'participantsCount' should be composed only of lowercase letters" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="3" auth="lyao" locRef="1" rule="NAMING-44" lnHash="-1146363747" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1146363747" unbViolId="565b1db8-83fd-36cf-9404-bd757a9d3862" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0414ea0-cee0-385f-99ed-9a951549c479" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="Do not declare the 'participantsCount' variable in the global namespace" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="4" auth="lyao" locRef="1" rule="JSF-098" lnHash="-1146363747" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-1146363747" unbViolId="f07bc500-23a7-34be-993c-e7c33781e9df" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7f410cd-414a-3646-a4c6-8306806741ad" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="Do not declare the 'participantsCount' variable in the global namespace" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M7_3_1-a" lnHash="-1146363747" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1146363747" unbViolId="89e7bd20-0ce4-3d54-8d2a-a30a3d68d081" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0841020d-a2c4-398f-84fc-b5eef0c4df99" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="Do not declare the 'participantsCount' variable in the global namespace" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-36" lnHash="-1146363747" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1146363747" unbViolId="9bcb2e2a-e46c-3b17-b971-b34391ab79fa" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="487eefd2-3dea-32cc-8322-92e70939f11b" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="Do not declare the 'participantsCount' variable in the global namespace" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="2" auth="lyao" locRef="1" rule="MISRA2008-7_3_1" lnHash="-1146363747" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-1146363747" unbViolId="9e1b2754-4a9e-3ed5-8c17-c4820ecad1e4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="886139dc-4803-3f3c-912b-c3e6ec9cb35c" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="'participantsCount' shall be declared as unsigned int or signed int" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="3" auth="lyao" locRef="1" rule="PORT-13" lnHash="-1146363747" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-1146363747" unbViolId="623d9d1d-95d3-3d88-bd36-d9513e31c7f0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05ba39c4-091d-327c-8add-581dfc6a6f46" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="'participantsCount' should be encapsulated in a class" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="5" auth="lyao" locRef="1" rule="CODSTA-CPP-18" lnHash="-1146363747" rule.header="Encapsulate global variables and constants, enumerated types, and typedefs in a class" tool="c++test" lineHash="-1146363747" unbViolId="811b4ee5-41a4-30f6-9d25-3857044768fb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40757b92-1bd3-3aa6-9404-a7902c508eb4" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="Do not define the 'participantsCount' global variable" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="3" auth="lyao" locRef="1" rule="JSF-207" lnHash="-1146363747" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="-1146363747" unbViolId="8c287753-41d5-307a-be9f-2f413b2d2402" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="39906496-3dd6-308d-be33-a3ecc58b9da5" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="Do not define the 'participantsCount' global variable" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-82" lnHash="-1146363747" rule.header="Global variables and static data members should not be used" tool="c++test" lineHash="-1146363747" unbViolId="d5ccc550-e9a5-30ae-925d-6adfb6a0fff0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7cbe3522-dfa0-3084-8d0e-8e870fa8c6ed" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="The 'participantsCount' variable should be commented" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="3" auth="lyao" locRef="1" rule="JSF-132_a" lnHash="-1146363747" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1146363747" unbViolId="9eaa1027-d358-354b-9d96-7294206b748f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5b84b2f-b296-3d11-8ceb-8973b289ac0f" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="The 'participantsCount' variable should be commented" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="3" auth="lyao" locRef="1" rule="COMMENT-05" lnHash="-1146363747" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1146363747" unbViolId="c86a7650-3d8e-3c01-8c55-73f7571fa1ac" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dfe5262b-017c-3508-ac41-84bbfeca0997" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="Use of variable &quot;participantsCount&quot; with static storage duration is not allowed" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="3" auth="lyao" locRef="1" rule="HICPP-3_3_1-a" lnHash="-1146363747" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="-1146363747" unbViolId="068cb23e-6936-3093-b680-6a3c83cd0bed" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ab87f3b-b89e-3520-9731-9e61715ec67c" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="Global variable 'participantsCount' is declared" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="5" auth="lyao" locRef="1" rule="MISRA-022" lnHash="-1146363747" rule.header="Declare objects at function scope" tool="c++test" lineHash="-1146363747" unbViolId="3cf701b2-d298-3263-96b7-4a60f4b34f8a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6fa839de-5e22-3288-80c5-bd4efc686e75" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="Naming convention not followed: participantsCount" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="3" auth="lyao" locRef="1" rule="NAMING-18" lnHash="-1146363747" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="-1146363747" unbViolId="9e2dbcca-763f-3dfc-913c-4db913d33d1d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6253c3bd-eb31-35e0-9fcf-0c0c1c680939" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="Naming convention not followed: participantsCount" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="3" auth="lyao" locRef="1" rule="NAMING-19" lnHash="-1146363747" rule.header="Begin all integer type variable with 'i'" tool="c++test" lineHash="-1146363747" unbViolId="090341ac-dd59-3f9d-a8de-aff8816ced99" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4452d5bb-1e98-320e-a82c-8e7fe2d3f34d" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="The 'participantsCount' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="3" auth="lyao" locRef="1" rule="NAMING-HN-22" lnHash="-1146363747" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-1146363747" unbViolId="3c893b53-62a1-360d-81ac-f80ea708f866" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="282fc276-cfb6-3f9e-afd5-66097584be52" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="The 'participantsCount' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="3" auth="lyao" locRef="1" rule="NAMING-HN-30" lnHash="-1146363747" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-1146363747" unbViolId="7b3e7c7b-bd53-3d46-90b5-db4fafbcf3f7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e8b8c35-ebc3-351f-b10e-960efe3007ec" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="The 'participantsCount' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="69" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="69" sev="3" auth="lyao" locRef="1" rule="NAMING-HN-43" lnHash="-1146363747" rule.header="Hungarian notation for word types" tool="c++test" lineHash="-1146363747" unbViolId="3f04a384-9d90-3d59-b3bc-86bd69077ab0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a0bb32b-651e-3b62-b31b-6b032c9fee93" locEndPos="5" locType="sr" hash="972801700" locEndLn="69" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="4" auth="lyao" locRef="1" rule="MISRA2008-3_9_2" lnHash="-807048934" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-807048934" unbViolId="31cb24af-dc97-3352-8bc0-0dade06bed9e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e86fd8d9-c15d-35a6-ad6c-9ba07a5e7f9d" locEndPos="1" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="3" auth="lyao" locRef="1" rule="MISRA-013" lnHash="-807048934" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-807048934" unbViolId="71f6792e-6755-38a2-8d5f-e99e97de35c6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f44318f3-db28-3310-b6d3-7326ab1b493f" locEndPos="1" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="3" auth="lyao" locRef="1" rule="CODSTA-223" lnHash="-807048934" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-807048934" unbViolId="bd785467-43f6-3509-a282-e8f970708e56" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ae293a7-04a1-3d42-a476-d2d33d350aa1" locEndPos="1" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A3_9_1-b" lnHash="-807048934" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-807048934" unbViolId="ad361e15-10c8-391c-a7a2-1f39ae936672" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f7382d3-bc00-3962-983d-aea2f2aaabb4" locEndPos="1" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="3" auth="lyao" locRef="1" rule="HICPP-7_1_6-b" lnHash="-807048934" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="-807048934" unbViolId="aee4d05d-95f1-3b80-967e-74b3b8d246ad" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b07e20b5-d333-382f-982a-9717563ed5f8" locEndPos="1" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="4" auth="lyao" locRef="1" rule="MISRAC2012-DIR_4_6-b" lnHash="-807048934" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-807048934" unbViolId="96961439-7680-38e3-af27-5ecd001441f3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="109279cc-8bb2-313e-afeb-81858ad59cc8" locEndPos="1" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="2" auth="lyao" locRef="1" rule="JSF-209_b" lnHash="-807048934" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-807048934" unbViolId="1c88674a-3ab7-3781-bd7a-47870ca29fd9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="328afaa1-e0d5-37d7-8708-8e59d85fdfa9" locEndPos="1" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="3" auth="lyao" locRef="1" rule="MISRA2004-6_3_b" lnHash="-807048934" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-807048934" unbViolId="5a3f28f1-b002-37f7-ba19-29ae44018f21" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2be5b943-5e3c-37b8-8889-27419248fc60" locEndPos="1" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="4" auth="lyao" locRef="1" rule="MISRA2012-DIR-4_6_b" lnHash="-807048934" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-807048934" unbViolId="dcd3b031-50c2-3e1b-8ec6-956d2df566d8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04c11483-ff7a-357f-8391-54f20860cd5e" locEndPos="1" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="3" auth="lyao" locRef="1" rule="HICPP-3_5_1-b" lnHash="-807048934" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-807048934" unbViolId="b38fd5bb-8836-3e9a-b929-25cf24674b71" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="239a6a23-5604-397a-ae12-62ebfd8aa6be" locEndPos="1" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="The variable &quot;exitGame&quot; was not initialized when declared" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="2" auth="lyao" locRef="1" rule="JSF-142_b" lnHash="-807048934" rule.header="All variables shall be initialized before use" tool="c++test" lineHash="-807048934" unbViolId="cf7c6a67-5007-3be5-9c99-0e13cea4cde8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f6cbc171-e939-39a5-8b79-4342127cfb0f" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="The variable &quot;exitGame&quot; was not initialized when declared" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="3" auth="lyao" locRef="1" rule="INIT-03" lnHash="-807048934" rule.header="Initialize all variables" tool="c++test" lineHash="-807048934" unbViolId="d678a743-b697-3cb1-8566-1257b4fa25c4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a763bd13-996c-3c60-8d7d-419eba3414a3" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="4" auth="lyao" locRef="1" rule="OWASP2019-API9-e" lnHash="-807048934" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-807048934" unbViolId="353cd46f-8c4d-3897-8cf9-76dbc2c1b772" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b044c51e-181a-3315-974d-2d778b34206a" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A3_3_1-a" lnHash="-807048934" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-807048934" unbViolId="ba0b7741-69d9-399d-8bb3-f91d32fe62df" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26dfe453-0a0a-374a-94ba-5e9d11e1f5ae" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="4" auth="lyao" locRef="1" rule="JSF-137" lnHash="-807048934" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-807048934" unbViolId="65a4a5fd-f744-364e-9f78-fb76a7ea79e9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bad44ca2-1c3a-3e9f-bc69-aa3c82d68bf1" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="4" auth="lyao" locRef="1" rule="MISRA-023" lnHash="-807048934" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-807048934" unbViolId="7b8ddbd6-df60-3ac8-9dc9-0e6d8bb87b57" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff0ed271-0f5d-317f-85b7-8d2987018eff" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="2" auth="lyao" locRef="1" rule="MISRA2008-3_3_1" lnHash="-807048934" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-807048934" unbViolId="57a9a85c-74f6-36b1-a20d-aa3b6f8a3659" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa90d307-97c2-3300-9565-70505173eac7" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL15-a" lnHash="-807048934" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-807048934" unbViolId="34751415-4a08-3192-9bcf-1e9f7b807800" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3e7eaa3-22a0-3610-9d16-2f92019f8b94" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="4" auth="lyao" locRef="1" rule="MISRA2004-8_10" lnHash="-807048934" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-807048934" unbViolId="472869a9-b6bf-3296-91d0-1cbf34a6bd83" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47d0c64c-9c3d-3bcc-8102-5aa01bacbe96" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="The name 'exitGame' should be composed only of lowercase letters" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="3" auth="lyao" locRef="1" rule="JSF-051" lnHash="-807048934" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-807048934" unbViolId="69f1ca9a-4f6f-3ef7-9287-66b7a08d68e1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5dfbd834-54e1-3f63-9894-8463a13e5b62" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="The name 'exitGame' should be composed only of lowercase letters" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="3" auth="lyao" locRef="1" rule="NAMING-44" lnHash="-807048934" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-807048934" unbViolId="4757c415-8712-32c8-b8af-fa19a0d4d5b0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f0976a0-79da-32d2-b47c-97d6f6e31a1a" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="Do not declare the 'exitGame' variable in the global namespace" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="4" auth="lyao" locRef="1" rule="JSF-098" lnHash="-807048934" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-807048934" unbViolId="c5bd1972-9112-3897-938c-ede7dbf09ae4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc3bb5d2-ec29-32af-a5a1-ccac6320c704" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="Do not declare the 'exitGame' variable in the global namespace" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M7_3_1-a" lnHash="-807048934" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-807048934" unbViolId="80821fbd-cfa5-3636-a9a7-b2ebd0281e0c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1508f3bd-5012-33ad-837a-92eb1093a731" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="Do not declare the 'exitGame' variable in the global namespace" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-36" lnHash="-807048934" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-807048934" unbViolId="e47c8bc2-9b69-3580-8148-18fdcb89a9d7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc7c44c5-18f5-3f8a-b8ad-6ece9afadc24" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="Do not declare the 'exitGame' variable in the global namespace" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="2" auth="lyao" locRef="1" rule="MISRA2008-7_3_1" lnHash="-807048934" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-807048934" unbViolId="04cc10a5-ccba-3fe9-894e-fc720dd97fbb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="86d7ad75-41a1-3d29-94a9-e57ccc34e230" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="'exitGame' shall be declared as unsigned int or signed int" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="3" auth="lyao" locRef="1" rule="PORT-13" lnHash="-807048934" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-807048934" unbViolId="b60d3cb9-ff44-3966-9e1c-7187b3fffee3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55e67f2d-6e2b-3136-84c7-d45ce2792609" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="'exitGame' should be encapsulated in a class" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="5" auth="lyao" locRef="1" rule="CODSTA-CPP-18" lnHash="-807048934" rule.header="Encapsulate global variables and constants, enumerated types, and typedefs in a class" tool="c++test" lineHash="-807048934" unbViolId="6f819d37-b011-3ba6-b944-b8ec13fa8c2e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68a13511-2a0d-36ee-a5b8-53f6dee59a75" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="Do not define the 'exitGame' global variable" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="3" auth="lyao" locRef="1" rule="JSF-207" lnHash="-807048934" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="-807048934" unbViolId="97e876ba-11c3-32b5-8455-d7bd71e8e22d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ec5da04-ba12-322a-b079-e28a06cc08e2" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="Do not define the 'exitGame' global variable" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-82" lnHash="-807048934" rule.header="Global variables and static data members should not be used" tool="c++test" lineHash="-807048934" unbViolId="c0b419c4-b04c-37e3-9436-3f6fdb094371" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ace2c608-f53a-3afe-9428-8a7ac18a7018" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="The 'exitGame' variable should be commented" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="3" auth="lyao" locRef="1" rule="JSF-132_a" lnHash="-807048934" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-807048934" unbViolId="3cf256db-a4ce-39d9-8aaa-a5b6dc7dad31" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5c9b25a-b915-359b-a93f-7a3669f57299" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="The 'exitGame' variable should be commented" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="3" auth="lyao" locRef="1" rule="COMMENT-05" lnHash="-807048934" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-807048934" unbViolId="8b29d0f0-893d-3337-b951-21b2812be077" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="752b5005-5a73-3b9d-92ab-95774cb897b9" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="Use of variable &quot;exitGame&quot; with static storage duration is not allowed" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="3" auth="lyao" locRef="1" rule="HICPP-3_3_1-a" lnHash="-807048934" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="-807048934" unbViolId="09c7f556-890a-3761-8726-2c2be141dd8b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="015a8163-37ca-3730-9868-dd23b8c44931" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="Global variable 'exitGame' is declared" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="5" auth="lyao" locRef="1" rule="MISRA-022" lnHash="-807048934" rule.header="Declare objects at function scope" tool="c++test" lineHash="-807048934" unbViolId="43c59143-6967-3322-aebc-fc6952d6e052" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3eec3247-8055-37d3-90df-ce578294dca3" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="Naming convention not followed: exitGame" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="3" auth="lyao" locRef="1" rule="NAMING-18" lnHash="-807048934" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="-807048934" unbViolId="b6def690-9af2-3521-a0a2-d8b51fca1c26" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="309bd9fd-300f-3d4d-a614-cf48a6552491" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="Naming convention not followed: exitGame" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="3" auth="lyao" locRef="1" rule="NAMING-19" lnHash="-807048934" rule.header="Begin all integer type variable with 'i'" tool="c++test" lineHash="-807048934" unbViolId="2ad2f161-aa27-3f90-945a-4f2799f58662" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="658cee8e-4394-3755-a71b-302e5a6be03e" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="The 'exitGame' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="3" auth="lyao" locRef="1" rule="NAMING-HN-22" lnHash="-807048934" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-807048934" unbViolId="d40ae2ce-7773-3560-8329-64fb5e2389ce" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f2a451fa-6fa1-37e7-b20c-593eafb3a03a" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="The 'exitGame' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="3" auth="lyao" locRef="1" rule="NAMING-HN-30" lnHash="-807048934" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-807048934" unbViolId="4c1bd9ae-d950-3af1-9278-df3d2049a470" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="124a0651-bba9-3fe2-96e3-386421dd15de" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="The 'exitGame' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="70" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="70" sev="3" auth="lyao" locRef="1" rule="NAMING-HN-43" lnHash="-807048934" rule.header="Hungarian notation for word types" tool="c++test" lineHash="-807048934" unbViolId="b94ea473-fd88-3dff-bf46-c18d03ef6b36" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3641187c-8f3a-318b-a280-7058759e6e41" locEndPos="5" locType="sr" hash="972801700" locEndLn="70" goals="0,"/>
    <StdViol msg="The return type of the 'GameLogic_Thread' function should be declared as 'auto'" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="2" auth="lyao" locRef="1" rule="CODSTA-MCPP-08_b" lnHash="-105532398" rule.header="Prefer 'auto' to explicit type names for function return types" tool="c++test" lineHash="-105532398" unbViolId="ff3b3097-9e57-34fb-969c-ad129ce8828b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e2ecafc-3d43-31f4-a117-3bbc934ec5fa" locEndPos="7" locType="sr" hash="972801700" locEndLn="72" goals="0,"/>
    <StdViol msg="The definition of the 'GameLogic_Thread' function is not preceded by a comment" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="3" auth="lyao" locRef="1" rule="COMMENT-04" lnHash="-105532398" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-105532398" unbViolId="bc9a4918-3a59-35f2-ada7-e751c12fbd65" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c021f101-6a70-3ed0-abfc-46fb9a9b0389" locEndPos="7" locType="sr" urgent="true" hash="972801700" locEndLn="72" goals="1,"/>
    <StdViol msg="The definition of the 'GameLogic_Thread' function is not preceded by a comment" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="4" auth="lyao" locRef="1" rule="JSF-134" lnHash="-105532398" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-105532398" unbViolId="ff61a113-afa5-344d-a203-a9497efef235" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8bc94458-07b4-310e-b5d4-fa2fce69d547" locEndPos="7" locType="sr" urgent="true" hash="972801700" locEndLn="72" goals="1,"/>
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="4" auth="lyao" locRef="1" rule="OWASP2019-API9-e" lnHash="-105532398" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-105532398" unbViolId="201cfe4e-6f03-3cb8-ba42-b59aa14787ac" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb2f3a73-5bd5-3c6b-81be-0253996d49bf" locEndPos="7" locType="sr" hash="972801700" locEndLn="72" goals="0,"/>
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A3_3_1-a" lnHash="-105532398" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-105532398" unbViolId="b9bcc53d-8444-3f71-a281-1f18b3eaf96e" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5fc9d9e6-545b-3bfd-9a02-0fd45ce2d95c" locEndPos="7" locType="sr" hash="972801700" locEndLn="72" goals="0,"/>
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="4" auth="lyao" locRef="1" rule="JSF-137" lnHash="-105532398" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-105532398" unbViolId="55b89649-17a3-3db9-b7f8-7a209adcc9d1" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de3268cd-5614-3046-a376-4a95a3c2b4ab" locEndPos="7" locType="sr" hash="972801700" locEndLn="72" goals="0,"/>
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="4" auth="lyao" locRef="1" rule="MISRA-023" lnHash="-105532398" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-105532398" unbViolId="54f92d53-a504-3258-91eb-909b44298194" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1cbae67-d107-352d-98da-5876e2e27d52" locEndPos="7" locType="sr" hash="972801700" locEndLn="72" goals="0,"/>
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="2" auth="lyao" locRef="1" rule="MISRA2008-3_3_1" lnHash="-105532398" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-105532398" unbViolId="d51cb3a9-f50e-3e08-8ce9-5fc945224dae" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="56ff067e-07b1-32ab-b5b5-37d68bc60876" locEndPos="7" locType="sr" hash="972801700" locEndLn="72" goals="0,"/>
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL15-a" lnHash="-105532398" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-105532398" unbViolId="6594ce6d-d267-375e-986e-a67a77846a9d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="323b9b32-3ca3-3a2a-9841-87f72e0bcbb6" locEndPos="7" locType="sr" hash="972801700" locEndLn="72" goals="0,"/>
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="4" auth="lyao" locRef="1" rule="MISRA2004-8_10" lnHash="-105532398" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-105532398" unbViolId="367e9446-1141-3981-adc2-2876d5ba1a94" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa5ab91b-fc36-30ec-9df8-02874f95f617" locEndPos="7" locType="sr" hash="972801700" locEndLn="72" goals="0,"/>
    <StdViol msg="The name 'GameLogic_Thread' should be composed only of lowercase letters" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="3" auth="lyao" locRef="1" rule="JSF-051" lnHash="-105532398" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-105532398" unbViolId="112e1d23-e58a-31fd-86ba-42b88c0f1de9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24082241-98aa-3c61-840d-3d5ece2ba685" locEndPos="7" locType="sr" hash="972801700" locEndLn="72" goals="0,"/>
    <StdViol msg="The name 'GameLogic_Thread' should be composed only of lowercase letters" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="3" auth="lyao" locRef="1" rule="NAMING-44" lnHash="-105532398" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-105532398" unbViolId="ace1af1b-0a56-3a0c-a19e-d4fdab19ad27" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16d35051-da30-37cf-8318-6b3d5429a99b" locEndPos="7" locType="sr" hash="972801700" locEndLn="72" goals="0,"/>
    <StdViol msg="Do not declare the 'GameLogic_Thread' function in the global namespace" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="4" auth="lyao" locRef="1" rule="JSF-098" lnHash="-105532398" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-105532398" unbViolId="8c610e0f-5ef7-3c97-9136-ff9afe04ec37" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce35ce8d-ec80-3a0e-963b-d260328d955b" locEndPos="7" locType="sr" hash="972801700" locEndLn="72" goals="0,"/>
    <StdViol msg="Do not declare the 'GameLogic_Thread' function in the global namespace" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M7_3_1-a" lnHash="-105532398" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-105532398" unbViolId="3796e344-9c79-3987-9317-b7990a1e9159" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e3a3d45-80f7-3476-b895-ece215fdb03f" locEndPos="7" locType="sr" hash="972801700" locEndLn="72" goals="0,"/>
    <StdViol msg="Do not declare the 'GameLogic_Thread' function in the global namespace" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-36" lnHash="-105532398" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-105532398" unbViolId="bf7d70c3-5eea-30b8-950f-278fdeb450e7" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a78d1c7-5772-3bbf-88fe-52c21332ff64" locEndPos="7" locType="sr" hash="972801700" locEndLn="72" goals="0,"/>
    <StdViol msg="Do not declare the 'GameLogic_Thread' function in the global namespace" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="2" auth="lyao" locRef="1" rule="MISRA2008-7_3_1" lnHash="-105532398" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-105532398" unbViolId="ca0d7b87-452d-36f7-9dbf-0c91848430d0" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca902bdd-ade6-3f4b-a7c7-a472e2bf526e" locEndPos="7" locType="sr" hash="972801700" locEndLn="72" goals="0,"/>
    <StdViol msg="Consider using 'constexpr' for the 'GameLogic_Thread' function" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A7_1_2-b" lnHash="-105532398" rule.header="Use constexpr to declare functions whenever possible" tool="c++test" lineHash="-105532398" unbViolId="30b69f12-0667-362c-8d7a-4adc381cb890" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0550ee68-d5ea-3e43-abee-cf5832308b98" locEndPos="7" locType="sr" hash="972801700" locEndLn="72" goals="0,"/>
    <StdViol msg="Consider using 'constexpr' for the 'GameLogic_Thread' function" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="4" auth="lyao" locRef="1" rule="CODSTA-MCPP-11_b_cpp11" lnHash="-105532398" rule.header="Use constexpr to declare functions whenever possible" tool="c++test" lineHash="-105532398" unbViolId="f2200c8b-58ab-38dd-861d-7b9ddf08eccc" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c909bb7b-9a4b-32dc-b8ca-12f7620685d5" locEndPos="7" locType="sr" hash="972801700" locEndLn="72" goals="0,"/>
    <StdViol msg="The 'GameLogic_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="3" auth="lyao" locRef="1" rule="COMMENT-14" lnHash="-105532398" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-105532398" unbViolId="896641af-1dab-3d69-b4bd-6d51e5cd9f30" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="571ec6ed-fc84-326d-83f4-281f774c3d02" locEndPos="7" locType="sr" hash="972801700" locEndLn="72" goals="0,"/>
    <StdViol msg="The 'GameLogic_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A2_7_3-a" lnHash="-105532398" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-105532398" unbViolId="83231e7f-d0f6-3141-880e-fff859c5eaf9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="19e2a92c-db66-3b53-95e0-161680786c3a" locEndPos="7" locType="sr" hash="972801700" locEndLn="72" goals="0,"/>
    <StdViol msg="The 'GameLogic_Thread' function should be preceded by a comment that contains the '@return' tag" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A2_7_3-b" lnHash="-105532398" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-105532398" unbViolId="ca356d3e-d6fb-372f-b404-8421b6de9b3b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75c2ee91-f6ea-39f2-9c0a-2b1695a65654" locEndPos="7" locType="sr" hash="972801700" locEndLn="72" goals="0,"/>
    <StdViol msg="The 'GameLogic_Thread' function should be preceded by a comment that contains the '@return' tag" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="3" auth="lyao" locRef="1" rule="COMMENT-14_b" lnHash="-105532398" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-105532398" unbViolId="01854ec3-d86b-31d5-90b6-434dac5c11de" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1dd5f911-aa50-394b-9a4e-5a82cc708994" locEndPos="7" locType="sr" hash="972801700" locEndLn="72" goals="0,"/>
    <StdViol msg="The 'GameLogic_Thread' function should be declared 'noexcept'" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A15_4_4-a" lnHash="-105532398" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-105532398" unbViolId="8b9c1553-c07e-3032-a3bc-8a166484c34a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="819ff287-74c2-3236-b339-2877936c39d3" locEndPos="7" locType="sr" hash="972801700" locEndLn="72" goals="0,"/>
    <StdViol msg="The 'GameLogic_Thread' function should be declared 'noexcept'" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="3" auth="lyao" locRef="1" rule="CODSTA-MCPP-09" lnHash="-105532398" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-105532398" unbViolId="1042aa63-b67c-3a6e-a696-e211d93df8f9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67e19425-c264-337b-98ba-81e4090eb9b4" locEndPos="7" locType="sr" hash="972801700" locEndLn="72" goals="0,"/>
    <StdViol msg="Function 'GameLogic_Thread' has Cyclomatic Complexity value: 1" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="5" auth="lyao" locRef="1" rule="METRICS-29" lnHash="-105532398" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-105532398" unbViolId="b6b9bf8f-ab8f-361d-b561-08051cdc2ade" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="489d7b9a-faff-3f0f-b11a-ca7aaaad928e" locEndPos="7" locType="sr" hash="972801700" locEndLn="72" goals="0,"/>
    <StdViol msg="Function 'GameLogic_Thread' has Essential Complexity value: 1" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="5" auth="lyao" locRef="1" rule="METRICS-33" lnHash="-105532398" rule.header="Report Essential Complexity" tool="c++test" lineHash="-105532398" unbViolId="a49f0af4-ab4c-3bab-9736-5aa6b0429b0b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0adbdf1d-4cbc-392c-bdd5-048844ae6d4c" locEndPos="7" locType="sr" hash="972801700" locEndLn="72" goals="0,"/>
    <StdViol msg="The incorrect global function name GameLogic_Thread was found" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="3" auth="lyao" locRef="1" rule="NAMING-34" lnHash="-105532398" rule.header="Global function names should start with lowercase" tool="c++test" lineHash="-105532398" unbViolId="24fa8bb4-9b83-3494-949c-02b0d1e3714f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5c3ac0f-41eb-3ab9-81c3-dff781e02a0e" locEndPos="7" locType="sr" hash="972801700" locEndLn="72" goals="0,"/>
    <StdViol msg="The parameter of pointer or array type is declared" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="3" auth="lyao" locRef="1" rule="CODSTA-94" lnHash="-105532398" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-105532398" unbViolId="d5d28d03-6ef0-374a-b478-b96ac5497012" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1aee9e9-1497-3e3f-8784-b6ec48adc015" locEndPos="24" locType="sr" hash="972801700" locEndLn="72" goals="0,"/>
    <StdViol msg="The parameter of pointer type is declared" ln="72" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="72" sev="3" auth="lyao" locRef="1" rule="CODSTA-95" lnHash="-105532398" rule.header="Do not declare pointer type" tool="c++test" lineHash="-105532398" unbViolId="c5215c1e-8188-3956-877d-f33f64ccabb8" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="424da2e5-5f11-322d-b911-d4e5f9b7614a" locEndPos="24" locType="sr" hash="972801700" locEndLn="72" goals="0,"/>
    <DupViol msg="Duplicated function: 'THREAD_RETURN_TYPE GameLogic_Thread ( void * ) { return (...'" ln="73" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="73" sev="2" auth="lyao" locRef="1" rule="CDD-DUPM" lnHash="123" rule.header="Avoid function duplication" tool="c++test" lineHash="123" unbViolId="a0587950-0ed2-356e-85ec-5f0b827ad5d3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="fcd59f46-6a23-3f4b-b13d-4fdf67979329" locType="sr" locEndPos="1" urgent="true" hash="972801700" locEndLn="76" goals="1,">
      <ElDescList>
        <ElDesc lineHash="123" ln="73" srcRngStartPos="0" srcRngEndPos="1" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="73" srcRngEndLn="76" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="[Line 73] Duplicated function in file 'DeadLock.cpp'" rngLn="73"/>
        <ElDesc lineHash="123" ln="79" srcRngStartPos="0" srcRngEndPos="1" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="79" srcRngEndLn="82" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="[Line 79] Duplicated function in file 'DeadLock.cpp'" rngLn="79"/>
      </ElDescList>
    </DupViol>
    <StdViol msg="Non-ascii tab found" ln="74" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="74" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="937420148" rule.header="Tabs should be avoided" tool="c++test" lineHash="937420148" unbViolId="86f86d9f-77f8-3eb6-beb4-a7bf47afc43f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="969ea76c-53e5-37b7-8007-b6685683c48b" locEndPos="1" locType="sr" hash="972801700" locEndLn="74" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="74" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="74" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="937420148" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="937420148" unbViolId="619be2f3-6dfe-36cd-971c-f67e68dd517a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cbfa838a-bf34-39ba-aaff-752dc7de644e" locEndPos="1" locType="sr" hash="972801700" locEndLn="74" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="74" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="74" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="937420148" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="937420148" unbViolId="a37a75c3-2b3f-32f2-be36-57583df018c6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f46067b-03c2-350e-86bd-2e015386b2bc" locEndPos="1" locType="sr" hash="972801700" locEndLn="74" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="75" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="75" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="466607007" rule.header="Tabs should be avoided" tool="c++test" lineHash="466607007" unbViolId="cd771953-d000-3d5f-bc0e-91b36843f0e3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ea6e845-526f-3667-b2f3-f7c398c491e2" locEndPos="1" locType="sr" hash="972801700" locEndLn="75" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="75" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="75" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="466607007" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="466607007" unbViolId="d9841a0e-9704-3c87-9c95-ad64ec709f31" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f6387ef2-5fce-3581-af14-443e3a3255fc" locEndPos="1" locType="sr" hash="972801700" locEndLn="75" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="75" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="75" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="466607007" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="466607007" unbViolId="50bb8dd1-e079-3fbb-8be9-3d6af558a40b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="532fb634-9a62-3bf8-8d23-154715c022d1" locEndPos="1" locType="sr" hash="972801700" locEndLn="75" goals="0,"/>
    <StdViol msg="'return' statement should be used with parenthesis" ln="75" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="75" sev="3" auth="lyao" locRef="1" rule="FORMAT-25_b" lnHash="466607007" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="466607007" unbViolId="15b14f61-e624-3d26-b132-4c97b74fcdfa" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e30b7b5-f756-3d76-bbf4-b0c584f534be" locEndPos="2" locType="sr" hash="972801700" locEndLn="75" goals="0,"/>
    <DupViol msg="Duplicated code: 'return (THREAD_RETURN_TYPE)0;'" ln="75" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="75" sev="3" auth="lyao" locRef="1" rule="CDD-DUPC" lnHash="466607007" rule.header="Avoid code duplication" tool="c++test" lineHash="466607007" unbViolId="8eb8e736-fa1f-38f2-a58e-80c3b3542419" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="5165d6a6-13fb-3965-8a6b-d23a54476295" locType="sr" locEndPos="30" urgent="true" hash="972801700" locEndLn="75" goals="1,">
      <ElDescList>
        <ElDesc lineHash="466607007" ln="75" srcRngStartPos="1" srcRngEndPos="30" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="75" srcRngEndLn="75" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="[Line 75] Duplicated code in file 'DeadLock.cpp'" rngLn="75"/>
        <ElDesc lineHash="466607007" ln="81" srcRngStartPos="1" srcRngEndPos="30" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="81" srcRngEndLn="81" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="[Line 81] Duplicated code in file 'DeadLock.cpp'" rngLn="81"/>
      </ElDescList>
    </DupViol>
    <StdViol msg="Use a C++-style cast instead of a C-style cast to the 'DWORD' type" ln="75" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="75" sev="3" auth="lyao" locRef="1" rule="HICPP-5_4_1-a" lnHash="466607007" rule.header="C-style casts should not be used" tool="c++test" lineHash="466607007" unbViolId="82b1099a-097f-301d-9e6b-fa879582243a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4fcc452-3b43-3a3b-8329-f56a4d60b4ef" locEndPos="9" locType="sr" urgent="true" hash="972801700" locEndLn="75" goals="1,"/>
    <StdViol msg="Use a C++-style cast instead of a C-style cast to the 'DWORD' type" ln="75" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="75" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A5_2_2-a" lnHash="466607007" rule.header="C-style casts should not be used" tool="c++test" lineHash="466607007" unbViolId="8d283df7-e7c5-32b1-824f-6c3e2795b8f4" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e96299cb-43ae-343f-b415-b815df45ff1c" locEndPos="9" locType="sr" urgent="true" hash="972801700" locEndLn="75" goals="1,"/>
    <StdViol msg="Use a C++-style cast instead of a C-style cast to the 'DWORD' type" ln="75" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="75" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-11" lnHash="466607007" rule.header="C-style casts should not be used" tool="c++test" lineHash="466607007" unbViolId="3b0571f4-b30b-30cb-b4e8-317a4e575392" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61b97143-c287-31a3-bb13-e4cd88326b9b" locEndPos="9" locType="sr" urgent="true" hash="972801700" locEndLn="75" goals="1,"/>
    <StdViol msg="Do not use a C-style cast to the 'DWORD' type" ln="75" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="75" sev="2" auth="lyao" locRef="1" rule="JSF-185" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="27aa31b0-53b3-3900-b7de-1ac916681ecb" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="855ed23f-5257-3da4-be6f-c9e23e243fbb" locEndPos="9" locType="sr" urgent="true" hash="972801700" locEndLn="75" goals="1,"/>
    <StdViol msg="Do not use a C-style cast to the 'DWORD' type" ln="75" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="75" sev="2" auth="lyao" locRef="1" rule="MISRA2008-5_2_4" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="1d59d281-03d0-3e04-9604-1b52927598af" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b39012ec-e0e2-34d5-86d5-f0e4eeb8b407" locEndPos="9" locType="sr" urgent="true" hash="972801700" locEndLn="75" goals="1,"/>
    <StdViol msg="Do not use a C-style cast to the 'DWORD' type" ln="75" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="75" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-66" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="13ec71cc-812a-3231-8555-b3c0231f21e2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dbdcdcbd-6631-33df-a631-8f2ead55b87d" locEndPos="9" locType="sr" urgent="true" hash="972801700" locEndLn="75" goals="1,"/>
    <StdViol msg="Cast to primitive type should not be used if possible" ln="75" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="75" sev="3" auth="lyao" locRef="1" rule="HICPP-4_2_2-b" lnHash="466607007" rule.header="Avoid explicit type conversions (casts)" tool="c++test" lineHash="466607007" unbViolId="d232e1e0-af82-3f12-98f9-e2d42a01cc2e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="41de766a-d212-3c1c-af5f-08ed52c503b6" locEndPos="9" locType="sr" hash="972801700" locEndLn="75" goals="0,"/>
    <StdViol msg="Cast to primitive type should not be used if possible" ln="75" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="75" sev="4" auth="lyao" locRef="1" rule="JSF-183" lnHash="466607007" rule.header="Every possible measure should be taken to avoid type casting" tool="c++test" lineHash="466607007" unbViolId="5ed67666-bb74-3390-b7c9-2ac5cc75e565" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88314b77-395d-34c4-bc01-369408c0fa16" locEndPos="9" locType="sr" hash="972801700" locEndLn="75" goals="0,"/>
    <StdViol msg="Cast to primitive type should not be used if possible" ln="75" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="75" sev="3" auth="lyao" locRef="1" rule="CODSTA-31" lnHash="466607007" rule.header="Avoid explicit type conversions (casts)" tool="c++test" lineHash="466607007" unbViolId="b5d9e6af-6602-30fe-9f4b-db0538e27823" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9c7ab55-f13f-3c15-bcaf-93405608b443" locEndPos="9" locType="sr" hash="972801700" locEndLn="75" goals="0,"/>
    <StdViol msg="The return type of the 'Controller_Thread' function should be declared as 'auto'" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="2" auth="lyao" locRef="1" rule="CODSTA-MCPP-08_b" lnHash="-391064646" rule.header="Prefer 'auto' to explicit type names for function return types" tool="c++test" lineHash="-391064646" unbViolId="a5644b71-4df6-3785-b7fd-161c8861f320" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="555f6db1-ca93-313f-b251-14dcc8c2b621" locEndPos="7" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="The definition of the 'Controller_Thread' function is not preceded by a comment" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="3" auth="lyao" locRef="1" rule="COMMENT-04" lnHash="-391064646" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-391064646" unbViolId="8c420db7-e7ec-3b44-9bb3-e12668e8da88" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="541f66e4-06f8-39d7-ad15-8dbafe8bde90" locEndPos="7" locType="sr" urgent="true" hash="972801700" locEndLn="78" goals="1,"/>
    <StdViol msg="The definition of the 'Controller_Thread' function is not preceded by a comment" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="4" auth="lyao" locRef="1" rule="JSF-134" lnHash="-391064646" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-391064646" unbViolId="5ee9486e-1a48-3a0d-921d-5a344fdc15d3" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba0c6531-5e41-351c-95d4-03d941a20c2f" locEndPos="7" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="4" auth="lyao" locRef="1" rule="OWASP2019-API9-e" lnHash="-391064646" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-391064646" unbViolId="abc3b332-569b-3fa8-b1c6-eb9321b10b37" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9969d3ff-a63c-33f4-9c05-2acb01fa6b5a" locEndPos="7" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A3_3_1-a" lnHash="-391064646" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-391064646" unbViolId="70d7a796-063c-3907-a3ee-7aa826b9b6e8" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bec43e82-b8b7-302f-8a2b-db1991412596" locEndPos="7" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="4" auth="lyao" locRef="1" rule="JSF-137" lnHash="-391064646" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-391064646" unbViolId="e618f385-57fb-3386-9381-3938308ad78f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3bd74b42-4dbd-366e-b663-981328ffd81f" locEndPos="7" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="4" auth="lyao" locRef="1" rule="MISRA-023" lnHash="-391064646" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-391064646" unbViolId="6dc13ef6-e3b6-3a68-8e7a-758addc1b6a7" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff64ba06-4df2-3b49-81a7-eca0cd0448a9" locEndPos="7" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="2" auth="lyao" locRef="1" rule="MISRA2008-3_3_1" lnHash="-391064646" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-391064646" unbViolId="80e42904-4b77-30c2-a2e6-baa62d66db66" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0511b408-526d-365a-b972-9ff1753805fb" locEndPos="7" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL15-a" lnHash="-391064646" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-391064646" unbViolId="8b37b77c-a0ac-3a60-934d-4e4fb1d5cfd2" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb78deaf-094b-34d5-9b78-1e0f98bb4465" locEndPos="7" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="4" auth="lyao" locRef="1" rule="MISRA2004-8_10" lnHash="-391064646" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-391064646" unbViolId="7aca112a-667a-3c77-904e-2357433e56d4" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf186dc9-509e-3def-bd6f-5bc66b1f3e64" locEndPos="7" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="The name 'Controller_Thread' should be composed only of lowercase letters" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="3" auth="lyao" locRef="1" rule="JSF-051" lnHash="-391064646" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-391064646" unbViolId="c4083c68-d2e3-347d-aa07-13f53cdf4d51" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc38ce8f-39d2-3b17-9517-269768c5183d" locEndPos="7" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="The name 'Controller_Thread' should be composed only of lowercase letters" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="3" auth="lyao" locRef="1" rule="NAMING-44" lnHash="-391064646" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-391064646" unbViolId="df374ff5-757a-33cf-9f1c-c89f1b60de82" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e273d6fe-6c5d-3098-a440-c278b4a820ac" locEndPos="7" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="Do not declare the 'Controller_Thread' function in the global namespace" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="4" auth="lyao" locRef="1" rule="JSF-098" lnHash="-391064646" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-391064646" unbViolId="e6a17321-debd-30b9-981c-283923ce8347" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="769fdae0-df1a-3cad-a950-8216ae07afee" locEndPos="7" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="Do not declare the 'Controller_Thread' function in the global namespace" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M7_3_1-a" lnHash="-391064646" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-391064646" unbViolId="3a80c3a8-0389-336e-bdc8-cde22a476c49" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="33eb3efa-1a25-39b0-afb7-b8f01ec953bd" locEndPos="7" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="Do not declare the 'Controller_Thread' function in the global namespace" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-36" lnHash="-391064646" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-391064646" unbViolId="68305f85-bce9-32bf-9617-7a4048a7d99a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cc81fb9f-eb69-35ba-852b-238ffbb74b43" locEndPos="7" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="Do not declare the 'Controller_Thread' function in the global namespace" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="2" auth="lyao" locRef="1" rule="MISRA2008-7_3_1" lnHash="-391064646" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-391064646" unbViolId="46417553-0f63-3a9d-8ad7-79e278d6b328" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e675d27-85c7-3292-a838-98926f09ef0d" locEndPos="7" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="Consider using 'constexpr' for the 'Controller_Thread' function" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A7_1_2-b" lnHash="-391064646" rule.header="Use constexpr to declare functions whenever possible" tool="c++test" lineHash="-391064646" unbViolId="646ca90f-6ee4-3ce4-9610-04e9b43160c2" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a529339c-1cd0-3a23-a698-d9749d6c2dbe" locEndPos="7" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="Consider using 'constexpr' for the 'Controller_Thread' function" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="4" auth="lyao" locRef="1" rule="CODSTA-MCPP-11_b_cpp11" lnHash="-391064646" rule.header="Use constexpr to declare functions whenever possible" tool="c++test" lineHash="-391064646" unbViolId="83203eda-f6c9-358a-b77f-85825524f0a5" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="86fc089a-ba7b-3233-ba05-6148152fe55e" locEndPos="7" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="The 'Controller_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="3" auth="lyao" locRef="1" rule="COMMENT-14" lnHash="-391064646" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-391064646" unbViolId="fe632b2d-f1e4-3f14-91f1-ecfe87e3279f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="86471923-9967-3a60-bdb4-2192846db390" locEndPos="7" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="The 'Controller_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A2_7_3-a" lnHash="-391064646" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-391064646" unbViolId="dfb491a0-df22-327d-85a0-47a3c41c5e7e" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8026b488-befc-3928-a9d5-2008e8a1094e" locEndPos="7" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="The 'Controller_Thread' function should be preceded by a comment that contains the '@return' tag" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A2_7_3-b" lnHash="-391064646" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-391064646" unbViolId="aca50141-840a-34d9-9bfb-7b5f2ca70240" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ef4bfa5-079d-367f-b732-59289b748212" locEndPos="7" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="The 'Controller_Thread' function should be preceded by a comment that contains the '@return' tag" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="3" auth="lyao" locRef="1" rule="COMMENT-14_b" lnHash="-391064646" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-391064646" unbViolId="3a71ec8b-f897-3d76-a8cd-e5f46b39231a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1170843-6976-3bbf-a649-4369e77de41f" locEndPos="7" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="The 'Controller_Thread' function should be declared 'noexcept'" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A15_4_4-a" lnHash="-391064646" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-391064646" unbViolId="0ddc89a2-d13b-33cc-8eb3-408fa193bed3" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5dcc50f1-89f2-3153-abc3-b2bbb745218c" locEndPos="7" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="The 'Controller_Thread' function should be declared 'noexcept'" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="3" auth="lyao" locRef="1" rule="CODSTA-MCPP-09" lnHash="-391064646" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-391064646" unbViolId="71429900-785e-3314-8358-d470bf4f4560" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5bbc5127-9ac8-3514-bf78-6a841bec7be2" locEndPos="7" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="Function 'Controller_Thread' has Cyclomatic Complexity value: 1" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="5" auth="lyao" locRef="1" rule="METRICS-29" lnHash="-391064646" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-391064646" unbViolId="bd90b349-8d11-3a5f-ad67-3a1cf25b318f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0dda324-f7cc-33f2-80f7-2460481fdbe1" locEndPos="7" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="Function 'Controller_Thread' has Essential Complexity value: 1" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="5" auth="lyao" locRef="1" rule="METRICS-33" lnHash="-391064646" rule.header="Report Essential Complexity" tool="c++test" lineHash="-391064646" unbViolId="c66d0ceb-b740-32b4-8029-a3152dd2396c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b90e81a-4421-36ba-a341-309ae0bfa3a7" locEndPos="7" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="The incorrect global function name Controller_Thread was found" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="3" auth="lyao" locRef="1" rule="NAMING-34" lnHash="-391064646" rule.header="Global function names should start with lowercase" tool="c++test" lineHash="-391064646" unbViolId="190ecfc5-e191-30d5-8d71-d7ebadef70f7" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7dd47be0-8ff4-3fb5-afa9-67c8e6b22320" locEndPos="7" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="The parameter of pointer or array type is declared" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="3" auth="lyao" locRef="1" rule="CODSTA-94" lnHash="-391064646" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-391064646" unbViolId="d2c14634-8820-3848-9f30-c1b3851c3b3f" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cc1bdf63-89ee-3cc4-9f2f-5b0d3de6a364" locEndPos="25" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="The parameter of pointer type is declared" ln="78" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="78" sev="3" auth="lyao" locRef="1" rule="CODSTA-95" lnHash="-391064646" rule.header="Do not declare pointer type" tool="c++test" lineHash="-391064646" unbViolId="2fadece0-4dff-324e-9bfb-610189413c65" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd9659cd-b5ee-3658-8222-023ebfc92a27" locEndPos="25" locType="sr" hash="972801700" locEndLn="78" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="80" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="80" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="2111304760" rule.header="Tabs should be avoided" tool="c++test" lineHash="2111304760" unbViolId="fb7bb36a-423a-36b2-8e64-ecfcca110e31" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f02d2798-8a82-35d5-8b3e-01629086864e" locEndPos="1" locType="sr" hash="972801700" locEndLn="80" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="80" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="80" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="2111304760" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="2111304760" unbViolId="394f2e9e-fd65-389c-86ea-cb60a3ca82a5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a67074e7-e8f1-38d0-b367-a447d3ee69df" locEndPos="1" locType="sr" hash="972801700" locEndLn="80" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="80" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="80" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="2111304760" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="2111304760" unbViolId="85d2be55-5ccc-3ff7-8483-ca84cb789b75" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2aa4b11e-ac8f-3ff6-8afe-d3b68bdff205" locEndPos="1" locType="sr" hash="972801700" locEndLn="80" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="81" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="81" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="466607007" rule.header="Tabs should be avoided" tool="c++test" lineHash="466607007" unbViolId="9d3639fb-0b0d-3c39-9d97-84e0782da904" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="32b1063b-40c6-33b5-b8d4-2e8a7f90e584" locEndPos="1" locType="sr" hash="972801700" locEndLn="81" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="81" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="81" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="466607007" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="466607007" unbViolId="9c4bdcc2-6c82-372a-a99a-dd378be65b8b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3773ebc9-4a5e-33d5-a835-d903aeba7f60" locEndPos="1" locType="sr" hash="972801700" locEndLn="81" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="81" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="81" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="466607007" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="466607007" unbViolId="3aae23a5-09f9-38af-86c4-c44f921ce7f3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="870f457e-542b-3f22-a4f3-5a2561072fd3" locEndPos="1" locType="sr" hash="972801700" locEndLn="81" goals="0,"/>
    <StdViol msg="'return' statement should be used with parenthesis" ln="81" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="81" sev="3" auth="lyao" locRef="1" rule="FORMAT-25_b" lnHash="466607007" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="466607007" unbViolId="c62d6ae3-9df3-3861-9669-72e0430e7720" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aede426e-cd87-3d6d-9fa8-f68cd461747f" locEndPos="2" locType="sr" hash="972801700" locEndLn="81" goals="0,"/>
    <StdViol msg="Use a C++-style cast instead of a C-style cast to the 'DWORD' type" ln="81" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="81" sev="3" auth="lyao" locRef="1" rule="HICPP-5_4_1-a" lnHash="466607007" rule.header="C-style casts should not be used" tool="c++test" lineHash="466607007" unbViolId="92243d41-afb6-3d13-b052-123ff0d36383" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b75b9dd4-c20b-3131-80ff-61ef382adcac" locEndPos="9" locType="sr" urgent="true" hash="972801700" locEndLn="81" goals="1,"/>
    <StdViol msg="Use a C++-style cast instead of a C-style cast to the 'DWORD' type" ln="81" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="81" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A5_2_2-a" lnHash="466607007" rule.header="C-style casts should not be used" tool="c++test" lineHash="466607007" unbViolId="fa4094c0-42a7-39c5-b8dd-faa27db33c0a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0df18d24-927a-3fec-a0a1-001173d0f022" locEndPos="9" locType="sr" urgent="true" hash="972801700" locEndLn="81" goals="1,"/>
    <StdViol msg="Use a C++-style cast instead of a C-style cast to the 'DWORD' type" ln="81" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="81" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-11" lnHash="466607007" rule.header="C-style casts should not be used" tool="c++test" lineHash="466607007" unbViolId="4107aacc-ee94-3647-bf26-5ec4c1177c0f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98c46448-806f-39db-a31f-c9708ee412e9" locEndPos="9" locType="sr" urgent="true" hash="972801700" locEndLn="81" goals="1,"/>
    <StdViol msg="Do not use a C-style cast to the 'DWORD' type" ln="81" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="81" sev="2" auth="lyao" locRef="1" rule="JSF-185" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="80cd449c-fc15-39b1-aeed-031a15a667d7" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2615a26-73a3-3cba-a432-d8b4657d0785" locEndPos="9" locType="sr" urgent="true" hash="972801700" locEndLn="81" goals="1,"/>
    <StdViol msg="Do not use a C-style cast to the 'DWORD' type" ln="81" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="81" sev="2" auth="lyao" locRef="1" rule="MISRA2008-5_2_4" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="cafa7868-6e2a-3e16-8dd6-43394b947c62" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6419581-41ba-36c4-9a97-665b609093a8" locEndPos="9" locType="sr" urgent="true" hash="972801700" locEndLn="81" goals="1,"/>
    <StdViol msg="Do not use a C-style cast to the 'DWORD' type" ln="81" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="81" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-66" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="a4ef3309-4c2d-32b7-a38d-5ba3c26f1844" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68bc7e85-61cc-33f5-8b78-66e4cb7e31fd" locEndPos="9" locType="sr" urgent="true" hash="972801700" locEndLn="81" goals="1,"/>
    <StdViol msg="Cast to primitive type should not be used if possible" ln="81" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="81" sev="3" auth="lyao" locRef="1" rule="HICPP-4_2_2-b" lnHash="466607007" rule.header="Avoid explicit type conversions (casts)" tool="c++test" lineHash="466607007" unbViolId="cefa0408-670c-387f-a1ab-ce1e9bf858ad" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e6c2bb41-2a1b-3a86-9769-5b168cbdab69" locEndPos="9" locType="sr" hash="972801700" locEndLn="81" goals="0,"/>
    <StdViol msg="Cast to primitive type should not be used if possible" ln="81" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="81" sev="4" auth="lyao" locRef="1" rule="JSF-183" lnHash="466607007" rule.header="Every possible measure should be taken to avoid type casting" tool="c++test" lineHash="466607007" unbViolId="2091af35-c0ec-306a-a853-ed596cad9107" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e95673e9-90d7-367d-9153-c384de6c6b7a" locEndPos="9" locType="sr" hash="972801700" locEndLn="81" goals="0,"/>
    <StdViol msg="Cast to primitive type should not be used if possible" ln="81" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="81" sev="3" auth="lyao" locRef="1" rule="CODSTA-31" lnHash="466607007" rule.header="Avoid explicit type conversions (casts)" tool="c++test" lineHash="466607007" unbViolId="666d2105-4eef-32b9-aa63-4803d6d36aee" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2f833d0-7897-3726-a092-d89ef1fe12dc" locEndPos="9" locType="sr" hash="972801700" locEndLn="81" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="348867655" rule.header="Tabs should be avoided" tool="c++test" lineHash="348867655" unbViolId="f716485d-74f3-3c24-b45b-d402a1e3248c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22b74394-9b6a-3f02-b0e3-a188aa5c63f0" locEndPos="1" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="348867655" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="348867655" unbViolId="19f63563-a04d-3b6b-83ce-7ebfa3d3ed71" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e461b66-89dc-389b-9186-1be82f4e096e" locEndPos="1" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="348867655" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="348867655" unbViolId="407fcbb2-fb1d-323f-9336-fa2609bc5148" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b7844a6-5eaa-3901-bea3-bf734a7af405" locEndPos="1" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="The operator '*', used for 'velocityArray' declaration, should be directly connected with the type" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="3" auth="lyao" locRef="1" rule="JSF-062" lnHash="348867655" rule.header="The dereference operator '*' and the address-of operator '&amp;' will be directly connected with the type-specifier" tool="c++test" lineHash="348867655" unbViolId="7f9fa950-8e34-3e4e-9c06-3388d542940d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43a9ad61-a569-356f-b489-87acfebeab30" locEndPos="8" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="The operator '*', used for 'velocityArray' declaration, should be directly connected with the type" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="4" auth="lyao" locRef="1" rule="FORMAT-32" lnHash="348867655" rule.header="The dereference operator '*' and the address-of operator '&amp;' should be directly connected with the type" tool="c++test" lineHash="348867655" unbViolId="ed42c126-1999-35db-bfdc-e04d8a6ce4a2" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="400987b3-beaf-3403-bab4-8377fb2154d3" locEndPos="8" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="4" auth="lyao" locRef="1" rule="OWASP2019-API9-e" lnHash="348867655" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="348867655" unbViolId="b50397ed-d2dd-372b-87db-d21d2b96ff62" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="259ec20c-494b-3533-aef4-71a3c59545c7" locEndPos="9" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A3_3_1-a" lnHash="348867655" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="348867655" unbViolId="7eef2b69-e698-3014-967b-79046b1dc1bd" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f054a754-567f-3113-803f-eb94045478fd" locEndPos="9" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="4" auth="lyao" locRef="1" rule="JSF-137" lnHash="348867655" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="348867655" unbViolId="de0b2d5e-3ad1-3a5a-a20a-6a827d721bf8" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5ca8eb6-a107-3f77-9a4f-4f635a42286f" locEndPos="9" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="4" auth="lyao" locRef="1" rule="MISRA-023" lnHash="348867655" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="348867655" unbViolId="4b99d763-d02d-36fe-914a-9400c3057cd9" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="173562e8-e148-3b84-aa42-b51d51ca0e21" locEndPos="9" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="2" auth="lyao" locRef="1" rule="MISRA2008-3_3_1" lnHash="348867655" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="348867655" unbViolId="3b78d5c9-e877-3cdb-95ad-3a1eb9bab78f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5faa5be-7b65-3793-b22a-39e7dbdcc8b1" locEndPos="9" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL15-a" lnHash="348867655" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="348867655" unbViolId="9c4d7059-e678-3517-9c88-f82c932d6875" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64583e71-7224-3acc-93c3-e0398789f17a" locEndPos="9" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="4" auth="lyao" locRef="1" rule="MISRA2004-8_10" lnHash="348867655" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="348867655" unbViolId="1bc6d7cd-4add-36ee-8e3b-487044463415" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a0a9e08-cb2d-31e5-85df-a0c7919d92f9" locEndPos="9" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="The name 'velocityArray' should be composed only of lowercase letters" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="3" auth="lyao" locRef="1" rule="JSF-051" lnHash="348867655" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="348867655" unbViolId="c5d499dc-9655-3750-850a-f90aa677a217" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a1bf5c0-95f3-33c7-991d-d750b396f69e" locEndPos="9" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="The name 'velocityArray' should be composed only of lowercase letters" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="3" auth="lyao" locRef="1" rule="NAMING-44" lnHash="348867655" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="348867655" unbViolId="0744173c-d540-3548-baf4-4d3fb9487b13" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9cd98ca4-15f0-3584-bf27-0e5455f358a4" locEndPos="9" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="The 'velocityArray' array should not be used" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="3" auth="lyao" locRef="1" rule="STL-37" lnHash="348867655" rule.header="C-style arrays shall not be used" tool="c++test" lineHash="348867655" unbViolId="d32dd0e3-f667-38ec-9a68-484c02a8e8b4" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c99b91e8-7a6f-3945-bba3-968b63194b37" locEndPos="9" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="The 'velocityArray' array should not be used" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A18_1_1-a" lnHash="348867655" rule.header="C-style arrays shall not be used" tool="c++test" lineHash="348867655" unbViolId="a85379dc-e9d6-3e4b-86c8-84685c42d84f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8faaca3a-f664-3f63-a03a-34fda196c136" locEndPos="9" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="Declaration of variable 'velocityArray' contains more than one level of pointer indirection" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="3" auth="lyao" locRef="1" rule="HICPP-8_1_1-a" lnHash="348867655" rule.header="The declaration should not contain more than one level of pointer indirection" tool="c++test" lineHash="348867655" unbViolId="ee66cb01-40f1-3850-9287-aedceb1f7b20" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f5dd85d-d156-3e11-8cea-84c31dbfb47b" locEndPos="9" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="Declaration of variable 'velocityArray' contains more than one level of pointer indirection" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="3" auth="lyao" locRef="1" rule="CODSTA-89" lnHash="348867655" rule.header="The declaration should not contain more than one level of pointer indirection" tool="c++test" lineHash="348867655" unbViolId="af6673cc-a90f-39ae-b585-a70a8a9d5370" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1b0329cf-9bc5-34f4-9333-e69cff17603d" locEndPos="9" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="The variable of pointer or array type is declared: velocityArray" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="3" auth="lyao" locRef="1" rule="CODSTA-94" lnHash="348867655" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="348867655" unbViolId="f428a8a2-b339-3224-8a9e-9c8044d409e2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e325fc5-1380-3fe5-9acb-d8bdb6e6694a" locEndPos="9" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="The variable of pointer type is declared: velocityArray" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="3" auth="lyao" locRef="1" rule="CODSTA-95" lnHash="348867655" rule.header="Do not declare pointer type" tool="c++test" lineHash="348867655" unbViolId="9feb2424-9189-32a0-9802-0c2693e499e2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3af8991-78c5-3816-86c7-aeb4fc50c654" locEndPos="9" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="Do not define the 'velocityArray' global variable" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="3" auth="lyao" locRef="1" rule="JSF-207" lnHash="348867655" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="348867655" unbViolId="b49fc321-5cca-37b2-ada7-3c78a02d326d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96c682b3-0db4-38e6-9789-bbca199bd2a5" locEndPos="9" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="Do not define the 'velocityArray' global variable" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-82" lnHash="348867655" rule.header="Global variables and static data members should not be used" tool="c++test" lineHash="348867655" unbViolId="28aec664-6e28-3b15-a5df-90816644ab5b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a93cb37-4c9b-3b6d-8115-763189fa304e" locEndPos="9" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="The 'velocityArray' variable should be commented" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="3" auth="lyao" locRef="1" rule="JSF-132_a" lnHash="348867655" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="348867655" unbViolId="f443d52b-b5dc-3ee1-9151-fcf5b8f2c84c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4695fca0-fc6b-31cc-b22e-40cb503a29ab" locEndPos="9" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="The 'velocityArray' variable should be commented" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="3" auth="lyao" locRef="1" rule="COMMENT-05" lnHash="348867655" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="348867655" unbViolId="9d413dd3-1eee-38d1-963a-d9a8c1291ee2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="448b857c-e08f-3b73-8e6f-f1c614b30816" locEndPos="9" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="Use of variable &quot;velocityArray&quot; with static storage duration is not allowed" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="3" auth="lyao" locRef="1" rule="HICPP-3_3_1-a" lnHash="348867655" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="348867655" unbViolId="b1d55597-ed38-3327-a450-1c67bd566700" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17ff0f52-bf55-3a62-8ae4-0f37403d721d" locEndPos="9" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="Global variable 'velocityArray' is declared" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="5" auth="lyao" locRef="1" rule="MISRA-022" lnHash="348867655" rule.header="Declare objects at function scope" tool="c++test" lineHash="348867655" unbViolId="8702eed6-6983-3c08-8b6d-054e05423376" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06c318ed-bb41-3b22-a72c-1e6e5f47f521" locEndPos="9" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="Naming convention not followed: velocityArray" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="3" auth="lyao" locRef="1" rule="NAMING-18" lnHash="348867655" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="348867655" unbViolId="a2fa245c-a2d3-3e61-8022-323e07ff470b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07753745-d205-350b-b54d-b6f3864bfba6" locEndPos="9" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="The 'velocityArray' identifier should have the 'rg' prefix" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="3" auth="lyao" locRef="1" rule="NAMING-HN-01" lnHash="348867655" rule.header="Hungarian notation for array variables and parameters" tool="c++test" lineHash="348867655" unbViolId="2006fc03-aeea-3276-b9b7-7d6674ec3a01" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a6cfaff-fabd-3819-8b5e-dfdd7931891a" locEndPos="9" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="The 'velocityArray' variable has only one use" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M0_1_4-a" lnHash="348867655" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="348867655" unbViolId="aebc0a6b-c745-316b-bb2d-efc30cba2dd2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="8bfe822a-058a-3aa1-b267-cedc37682eea" locEndPos="9" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="The 'velocityArray' variable has only one use" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="2" auth="lyao" locRef="1" rule="MISRA2008-0_1_4" lnHash="348867655" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="348867655" unbViolId="62f78f19-4bb8-3e48-b068-339c73d880db" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="31fa948e-0f4e-375c-ae22-4cbac83d07d6" locEndPos="9" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="The 'velocityArray' variable has only one use" ln="86" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="86" sev="3" auth="lyao" locRef="1" rule="GLOBAL-ONEUSEVAR" lnHash="348867655" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="348867655" unbViolId="08feeadf-5362-3d5f-b0b9-c602e604c2f3" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="c7ebadbb-6fdb-3c9d-a6ef-a2083dee0c9f" locEndPos="9" locType="sr" hash="972801700" locEndLn="86" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="88" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="88" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="465702038" rule.header="Tabs should be avoided" tool="c++test" lineHash="465702038" unbViolId="eafcd9c3-3505-3366-a5f6-6a01b909114a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d59dfda-c040-3e32-8d15-fb222250d559" locEndPos="1" locType="sr" hash="972801700" locEndLn="88" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="88" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="88" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="465702038" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="465702038" unbViolId="c8f741b1-58c7-3217-a117-fa68f546b1ec" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40d4c99d-8dcd-35dc-bb50-237cb6768fdd" locEndPos="1" locType="sr" hash="972801700" locEndLn="88" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="88" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="88" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="465702038" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="465702038" unbViolId="0a2469aa-43ac-3fd3-9d93-93f8425f428f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f1f1ee54-0f2e-3e12-b999-70b3d974f30e" locEndPos="1" locType="sr" hash="972801700" locEndLn="88" goals="0,"/>
    <StdViol msg="The definition of the 'Physics_Thread' function is not preceded by a comment" ln="88" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="88" sev="3" auth="lyao" locRef="1" rule="COMMENT-04" lnHash="465702038" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="465702038" unbViolId="a705ff25-894b-334a-bad9-43aab8806409" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b8aeef6-d6e4-3510-b303-fea4b2d2231a" locEndPos="8" locType="sr" hash="972801700" locEndLn="88" goals="0,"/>
    <StdViol msg="The definition of the 'Physics_Thread' function is not preceded by a comment" ln="88" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="88" sev="4" auth="lyao" locRef="1" rule="JSF-134" lnHash="465702038" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="465702038" unbViolId="aa5f0a01-6cc0-3195-80c8-c5f84f5d7e06" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="292a644d-e3e8-3f4f-94b8-99c30143c309" locEndPos="8" locType="sr" hash="972801700" locEndLn="88" goals="0,"/>
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="88" sev="4" auth="lyao" locRef="1" rule="OWASP2019-API9-e" lnHash="465702038" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="465702038" unbViolId="f087df8c-0a43-3680-b126-389489b2732e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd86ed48-e578-3bc7-b3d3-c35c65c4e525" locEndPos="8" locType="sr" hash="972801700" locEndLn="88" goals="0,"/>
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="88" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A3_3_1-a" lnHash="465702038" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="465702038" unbViolId="1fcc23c1-8ba2-3270-864d-4a091b8e6b1e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cca679a9-7a29-3b8a-93a6-d4b44622cdf2" locEndPos="8" locType="sr" hash="972801700" locEndLn="88" goals="0,"/>
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="88" sev="4" auth="lyao" locRef="1" rule="JSF-137" lnHash="465702038" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="465702038" unbViolId="1a1c9027-717b-3a71-bf82-c41d185a07cc" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d2cfc11-b6c7-3533-b155-241c05426c49" locEndPos="8" locType="sr" hash="972801700" locEndLn="88" goals="0,"/>
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="88" sev="4" auth="lyao" locRef="1" rule="MISRA-023" lnHash="465702038" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="465702038" unbViolId="148ffdfa-c8bf-3a2c-863c-f5e5fa7ba4eb" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6242e481-a1ff-3526-81cc-e01f9d0f9a6c" locEndPos="8" locType="sr" hash="972801700" locEndLn="88" goals="0,"/>
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="88" sev="2" auth="lyao" locRef="1" rule="MISRA2008-3_3_1" lnHash="465702038" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="465702038" unbViolId="22f0f888-2dd0-3ed5-818c-c1471b3a96d7" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5526d306-1809-3f39-9483-3062e48ad898" locEndPos="8" locType="sr" hash="972801700" locEndLn="88" goals="0,"/>
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="88" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL15-a" lnHash="465702038" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="465702038" unbViolId="6864d117-f13f-3a69-8ebd-5cbebe927244" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="584e505a-6e48-38a0-9efa-7adf266240e1" locEndPos="8" locType="sr" hash="972801700" locEndLn="88" goals="0,"/>
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="88" sev="4" auth="lyao" locRef="1" rule="MISRA2004-8_10" lnHash="465702038" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="465702038" unbViolId="09d8a453-6d97-3b52-8e5d-05df491cf4b6" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee6dbe55-0796-33da-9a4e-22d9dfbcb64f" locEndPos="8" locType="sr" hash="972801700" locEndLn="88" goals="0,"/>
    <StdViol msg="The name 'Physics_Thread' should be composed only of lowercase letters" ln="88" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="88" sev="3" auth="lyao" locRef="1" rule="JSF-051" lnHash="465702038" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="465702038" unbViolId="283c3630-9752-39c1-9c7e-f4aed23da4ba" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8eb9adc7-eb5f-3391-9433-7f8eb627b3cf" locEndPos="8" locType="sr" hash="972801700" locEndLn="88" goals="0,"/>
    <StdViol msg="The name 'Physics_Thread' should be composed only of lowercase letters" ln="88" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="88" sev="3" auth="lyao" locRef="1" rule="NAMING-44" lnHash="465702038" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="465702038" unbViolId="151a69b1-978c-3111-806c-4bc3e1da0c9a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9b40213-ee15-3a38-be6d-e06546a088d4" locEndPos="8" locType="sr" hash="972801700" locEndLn="88" goals="0,"/>
    <StdViol msg="The 'Physics_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="88" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="88" sev="3" auth="lyao" locRef="1" rule="COMMENT-14" lnHash="465702038" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="465702038" unbViolId="b5ff0b11-bfa6-3113-895b-0edae2e84849" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4af5f8cf-6978-36c8-bf2e-c106c5d09c41" locEndPos="8" locType="sr" hash="972801700" locEndLn="88" goals="0,"/>
    <StdViol msg="The 'Physics_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="88" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="88" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A2_7_3-a" lnHash="465702038" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="465702038" unbViolId="ce809790-18b4-35dd-b2e5-63fb052af88f" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a4c9c7a3-5250-369b-b479-af38b122b0b6" locEndPos="8" locType="sr" hash="972801700" locEndLn="88" goals="0,"/>
    <StdViol msg="The 'Physics_Thread' function should be preceded by a comment that contains the '@return' tag" ln="88" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="88" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A2_7_3-b" lnHash="465702038" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="465702038" unbViolId="f6262c20-de7f-31ad-b441-a51f8636c4d9" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18ed7a32-0a15-3d7f-952a-844f50992e08" locEndPos="8" locType="sr" hash="972801700" locEndLn="88" goals="0,"/>
    <StdViol msg="The 'Physics_Thread' function should be preceded by a comment that contains the '@return' tag" ln="88" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="88" sev="3" auth="lyao" locRef="1" rule="COMMENT-14_b" lnHash="465702038" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="465702038" unbViolId="afcf9a3e-51ab-34e9-80b5-867ced67f0af" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f6889ac2-dfbc-3ffc-887f-40f6980c9be9" locEndPos="8" locType="sr" hash="972801700" locEndLn="88" goals="0,"/>
    <StdViol msg="Function 'Physics_Thread' has Cyclomatic Complexity value: 3" ln="88" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="88" sev="5" auth="lyao" locRef="1" rule="METRICS-29" lnHash="465702038" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="465702038" unbViolId="086bebbc-89a9-3968-97fb-a7c0175e5982" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd588925-645a-36f8-bb01-9115d99abdb4" locEndPos="8" locType="sr" hash="972801700" locEndLn="88" goals="0,"/>
    <StdViol msg="Function 'Physics_Thread' has Essential Complexity value: 1" ln="88" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="88" sev="5" auth="lyao" locRef="1" rule="METRICS-33" lnHash="465702038" rule.header="Report Essential Complexity" tool="c++test" lineHash="465702038" unbViolId="42551f7a-1af9-341c-8999-dd9d96806ebf" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b17d2706-5518-3bc9-acb1-cf16e1f83209" locEndPos="8" locType="sr" hash="972801700" locEndLn="88" goals="0,"/>
    <StdViol msg="The incorrect global function name Physics_Thread was found" ln="88" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="88" sev="3" auth="lyao" locRef="1" rule="NAMING-34" lnHash="465702038" rule.header="Global function names should start with lowercase" tool="c++test" lineHash="465702038" unbViolId="9d453d45-ba29-3354-b442-0f7fcc7021f6" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8861b96e-df15-31db-8c9b-b23baa3cee1c" locEndPos="8" locType="sr" hash="972801700" locEndLn="88" goals="0,"/>
    <StdViol msg="The parameter of pointer or array type is declared" ln="88" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="88" sev="3" auth="lyao" locRef="1" rule="CODSTA-94" lnHash="465702038" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="465702038" unbViolId="dc932462-07b6-3d26-9420-bfd69f202e70" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7dcc94d2-69ec-3278-ab5e-a0ae63acc22c" locEndPos="23" locType="sr" hash="972801700" locEndLn="88" goals="0,"/>
    <StdViol msg="The parameter of pointer type is declared" ln="88" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="88" sev="3" auth="lyao" locRef="1" rule="CODSTA-95" lnHash="465702038" rule.header="Do not declare pointer type" tool="c++test" lineHash="465702038" unbViolId="caf60063-513a-385d-ba71-6f0c1c16d1e9" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51ab4177-c646-3ff2-b22b-e41f95d74613" locEndPos="23" locType="sr" hash="972801700" locEndLn="88" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 13" ln="89" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="89" sev="3" auth="lyao" locRef="1" rule="METRICS-19" lnHash="402" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="402" unbViolId="71c1b92c-adaf-34b0-b3a9-c365a555e3bd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3cd66500-e1ef-30fe-9100-bd6874720ce1" locEndPos="1" locType="sr" hash="972801700" locEndLn="89" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="89" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="89" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="402" rule.header="Tabs should be avoided" tool="c++test" lineHash="402" unbViolId="8c71a8dc-c5ad-3550-b3a0-32727e5bc806" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="913d39b1-e8b7-3200-a38d-eec1a735ed5b" locEndPos="1" locType="sr" hash="972801700" locEndLn="89" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="89" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="89" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="402" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="402" unbViolId="9697e790-8e1f-3164-8518-947048aa83fc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="30c9804b-b7f0-3158-86cd-02e08c691f39" locEndPos="1" locType="sr" hash="972801700" locEndLn="89" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="89" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="89" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="402" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="402" unbViolId="2f2f2bb4-a02a-34cc-9c92-646646c8b133" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="709593c3-9079-3ed9-9e28-17a4a28494ad" locEndPos="1" locType="sr" hash="972801700" locEndLn="89" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="90" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="90" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1229452372" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1229452372" unbViolId="81613b1b-e4d5-3286-9398-5fe88fb0d9d0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="30b2ad19-e784-3cb3-b940-a0065a678bad" locEndPos="1" locType="sr" hash="972801700" locEndLn="90" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="90" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="90" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="be569e4e-8075-3068-b410-632c49b5bcb4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37f00cc4-4b40-3334-bd17-48c7e128e6cc" locEndPos="1" locType="sr" hash="972801700" locEndLn="90" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="90" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="90" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="d7e62f79-6cda-3ef5-80cb-5ab393b46598" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="058891cc-ef0b-3f0c-a804-75a1a0511133" locEndPos="1" locType="sr" hash="972801700" locEndLn="90" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="90" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="90" sev="3" auth="lyao" locRef="1" rule="JSF-061" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1229452372" unbViolId="253ef476-23d8-31aa-b7c3-793665fbd136" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cc09bffc-206b-3b74-bf62-2ab2cf5fe92d" locEndPos="1" locType="sr" hash="972801700" locEndLn="90" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="90" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="90" sev="3" auth="lyao" locRef="1" rule="FORMAT-42" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1229452372" unbViolId="81418245-5f2a-3925-92e9-86c5980bf95e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b420acc8-a988-3bb9-ae11-6c4e490e8d99" locEndPos="1" locType="sr" hash="972801700" locEndLn="90" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="90" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="90" sev="3" auth="lyao" locRef="1" rule="JSF-060_a" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1229452372" unbViolId="15770f4a-0aa1-3bba-9ceb-65376926cd08" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2790f6bd-632a-3c38-88c4-a04fc61d27b7" locEndPos="1" locType="sr" hash="972801700" locEndLn="90" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="90" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="90" sev="3" auth="lyao" locRef="1" rule="FORMAT-43" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1229452372" unbViolId="c24f745c-4795-3118-becb-e951e789fd0f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac7a836d-6128-37ef-b48f-548c4bfd782a" locEndPos="1" locType="sr" hash="972801700" locEndLn="90" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="90" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="90" sev="3" auth="lyao" locRef="1" rule="JSF-060_b" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1229452372" unbViolId="61ab19aa-022d-3261-ac21-dc004893b49e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b68d22bf-d19b-3610-8062-af093b8a8b1a" locEndPos="1" locType="sr" hash="972801700" locEndLn="90" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="90" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="90" sev="3" auth="lyao" locRef="1" rule="FORMAT-02" lnHash="-1229452372" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-1229452372" unbViolId="da224afe-e2a8-3fa0-916e-bd3b2e1cb85d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eaf40da1-9356-385b-889c-6486291ffae0" locEndPos="1" locType="sr" hash="972801700" locEndLn="90" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="90" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="90" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1229452372" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1229452372" unbViolId="2442f0c7-26a4-3f68-bcb9-dcbf85ed90df" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="823cd1b8-5756-3e16-a39f-e79ec632b6aa" locEndPos="2" locType="sr" hash="972801700" locEndLn="90" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="90" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="90" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="0a1c31d5-9275-3ea3-93a7-11efb4920c68" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="551bc12b-d4de-3d91-87c0-786349f8f3d4" locEndPos="2" locType="sr" hash="972801700" locEndLn="90" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="90" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="90" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="8e8a9138-2197-30ea-9625-3f97746d5df8" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="302df713-1600-3fc0-b6e4-7c7ce2b2f18e" locEndPos="2" locType="sr" hash="972801700" locEndLn="90" goals="0,"/>
    <StdViol msg="A loop does not have a fixed upper nor lower bound" ln="90" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="90" sev="3" auth="lyao" locRef="1" rule="CODSTA-83" lnHash="-1229452372" rule.header="All loops must have a fixed upper or lower bound" tool="c++test" lineHash="-1229452372" unbViolId="17e94f92-1954-316c-8126-2a82dfe2d2a1" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="60989990-15d3-3637-8d7c-f2b3e0010320" locEndPos="3" locType="sr" hash="972801700" locEndLn="90" goals="0,"/>
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="90" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="90" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M5_3_1-a" lnHash="-1229452372" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-1229452372" unbViolId="a7717b5a-da6a-3add-8ee7-ba360240798b" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="df0e7517-603b-3f8f-a180-76178328801e" locEndPos="10" locType="sr" hash="972801700" locEndLn="90" goals="0,"/>
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="90" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="90" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-67" lnHash="-1229452372" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-1229452372" unbViolId="56f6fa28-c937-3142-a555-2598bf572039" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5a4b5ce-6771-376c-8972-fe8345a23b3d" locEndPos="10" locType="sr" hash="972801700" locEndLn="90" goals="0,"/>
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="90" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="90" sev="2" auth="lyao" locRef="1" rule="MISRA2008-5_3_1" lnHash="-1229452372" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-1229452372" unbViolId="5799dadf-5681-3f06-b70b-7cfb44a51807" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="28ff0796-2caf-34f1-a994-8a8f6e07a85e" locEndPos="10" locType="sr" hash="972801700" locEndLn="90" goals="0,"/>
    <StdViol msg="In 'Physics_Thread' function use positive logic rather than negative logic whenever possible" ln="90" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="90" sev="5" auth="lyao" locRef="1" rule="CODSTA-46" lnHash="-1229452372" rule.header="Use positive logic rather than negative logic whenever practical" tool="c++test" lineHash="-1229452372" unbViolId="369a336b-45d9-36c8-9a71-5d4ecea1d5d1" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="28b3fce3-2bc1-3ab3-b5dc-9f114e78141a" locEndPos="10" locType="sr" hash="972801700" locEndLn="90" goals="0,"/>
    <StdViol msg="The operand of logical operator '!' is not 'effectively Boolean'" ln="90" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="90" sev="3" auth="lyao" locRef="1" rule="MISRA2004-12_6_a" lnHash="-1229452372" rule.header="The operands of logical operators (&amp;&amp;, || and !) should be effectively Boolean" tool="c++test" lineHash="-1229452372" unbViolId="0dbe6ecc-0459-3a76-8705-30758220492a" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a99821b8-7e85-3e65-b1ea-a5522e3cceee" locEndPos="10" locType="sr" hash="972801700" locEndLn="90" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="3" auth="lyao" locRef="1" rule="JSF-061" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1544355218" unbViolId="a03dfb07-affa-31d5-bf03-14f2e3a723e9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca7a6736-9277-3138-9475-4e744e7f590b" locEndPos="1" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="3" auth="lyao" locRef="1" rule="FORMAT-42" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1544355218" unbViolId="c86d4558-2fbd-38e6-93d9-008fff83f94a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7768d95a-8fad-3238-84c6-2f76f4c3e315" locEndPos="1" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="3" auth="lyao" locRef="1" rule="JSF-060_a" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1544355218" unbViolId="c9f321ec-df26-37e4-96b1-6228eed71fc4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="186a83c9-0b5d-3aab-b46b-13187fef68f8" locEndPos="1" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="3" auth="lyao" locRef="1" rule="FORMAT-43" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="1544355218" unbViolId="8beafa9e-bae1-3709-9be7-a9419f53b16b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9638219d-30cf-35c0-9fd0-98749e77d8e5" locEndPos="1" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="3" auth="lyao" locRef="1" rule="JSF-060_b" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="1544355218" unbViolId="551f1ebf-81ec-3325-b807-957d76a3a619" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e0324f4-6559-39a3-b076-ba3ff680dc5f" locEndPos="1" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="1544355218" rule.header="Tabs should be avoided" tool="c++test" lineHash="1544355218" unbViolId="06893f7e-a500-3a3d-bf14-a09b6fc36ea8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="29b49f96-f5bf-3db9-a9bf-9c00825b3cdd" locEndPos="1" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="9dcec5ad-f7a5-3a19-9791-861e53aa7caa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac962657-e218-3b8f-8d38-7a70d1362a47" locEndPos="1" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="60222f17-252d-3a61-ba77-dae1372daf6e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6fd7e24d-3782-30c5-b1c9-0812b0917f9c" locEndPos="1" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="3" auth="lyao" locRef="1" rule="FORMAT-02" lnHash="1544355218" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="1544355218" unbViolId="07a06a7c-a05e-37a4-a5e4-b858cf430e9d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f74f8693-4ece-36ea-9f02-2771ddbbf79a" locEndPos="1" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="1544355218" rule.header="Tabs should be avoided" tool="c++test" lineHash="1544355218" unbViolId="f0ac2346-3591-3da3-bbca-f5d928209bbc" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31673b24-1869-352a-9889-78b3636b2206" locEndPos="2" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="939cb970-cfcc-3d91-988e-f24b4dbdb73f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a4983ef-904e-3925-83c0-de529f9995a7" locEndPos="2" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="41841a79-a48f-32f4-ac63-f16e636c725d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="262eb080-b946-34b3-aa9d-d1313807ff64" locEndPos="2" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="1544355218" rule.header="Tabs should be avoided" tool="c++test" lineHash="1544355218" unbViolId="439ad1b3-863e-3c16-b347-0cf225b0a344" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d37839e-03fd-39c4-8ebf-26f63984451b" locEndPos="3" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="256081d6-6270-349f-a5d8-9fd7af1c33af" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e5fbd78-4b0d-3b36-aac2-e1d505d1ca5c" locEndPos="3" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="3c35b0f3-8fb6-3376-8a10-fd4a71558367" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aeccbf50-3ec0-3e42-a9a9-7d8ef79b95ae" locEndPos="3" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="Between conditional statement 'for' and its opening parenthesis '(' should be exactly one space" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="3" auth="lyao" locRef="1" rule="FORMAT-12" lnHash="1544355218" rule.header="There shall be a single ASCII space character between a conditional statement keyword and its opening parenthesis" tool="c++test" lineHash="1544355218" unbViolId="3f456468-84c1-3383-8fcd-e9098022c835" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a837421-9c98-3c0e-9985-f4a5e89de480" locEndPos="4" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <DupViol msg="Duplicated code: 'for(int i = 0;'" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="3" auth="lyao" locRef="1" rule="CDD-DUPC" lnHash="1544355218" rule.header="Avoid code duplication" tool="c++test" lineHash="1544355218" unbViolId="e0870911-a1b7-3e03-b0ee-aad7b0aa80fc" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="21899e1d-be22-3a15-8298-440ad338155a" locType="sr" locEndPos="17" urgent="true" hash="972801700" locEndLn="91" goals="1,">
      <ElDescList>
        <ElDesc lineHash="1544355218" ln="91" srcRngStartPos="3" srcRngEndPos="17" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="91" srcRngEndLn="91" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="[Line 91] Duplicated code in file 'DeadLock.cpp'" rngLn="91"/>
        <ElDesc lineHash="1544355218" ln="122" srcRngStartPos="3" srcRngEndPos="17" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="122" srcRngEndLn="122" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="[Line 122] Duplicated code in file 'DeadLock.cpp'" rngLn="122"/>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="1" srcRngEndPos="16" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="[Line 9] Duplicated code in file 'MemoryLeak.cpp'" rngLn="9"/>
      </ElDescList>
    </DupViol>
    <StdViol msg="A loop does not have a fixed upper nor lower bound" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="3" auth="lyao" locRef="1" rule="CODSTA-83" lnHash="1544355218" rule.header="All loops must have a fixed upper or lower bound" tool="c++test" lineHash="1544355218" unbViolId="8f7218de-91fd-3f0b-8b63-f164b2db419e" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="865de4c5-5ea3-37b6-b8b4-94736a7bb540" locEndPos="4" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="4" auth="lyao" locRef="1" rule="MISRA2008-3_9_2" lnHash="1544355218" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1544355218" unbViolId="b3feb7f9-060f-3fe0-b6a1-35e6851cc959" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd802a7d-e7e2-3148-9442-1ea4088a4288" locEndPos="8" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="3" auth="lyao" locRef="1" rule="MISRA-013" lnHash="1544355218" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1544355218" unbViolId="3e5f0edf-a857-3748-a439-5bfd443e658f" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85ee0da1-9b7f-35a0-a601-3bf790e58177" locEndPos="8" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="3" auth="lyao" locRef="1" rule="CODSTA-223" lnHash="1544355218" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1544355218" unbViolId="f6d884a8-8704-329a-abc4-4c2b29110b93" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5911cf7-474c-36cc-9fb0-b3ce0c6ab15a" locEndPos="8" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A3_9_1-b" lnHash="1544355218" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1544355218" unbViolId="96f0f3f4-d564-30ea-a331-d9febaff2806" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dcd2ac1d-5537-3332-9a64-c00eb4cf6dd8" locEndPos="8" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="3" auth="lyao" locRef="1" rule="HICPP-7_1_6-b" lnHash="1544355218" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="1544355218" unbViolId="f004e31c-34d7-30b0-8f22-cd73111abcb2" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab52e9ce-f513-37d0-a8e8-3ef3da7d6a69" locEndPos="8" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="4" auth="lyao" locRef="1" rule="MISRAC2012-DIR_4_6-b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="8f188d20-2dcd-3784-acb4-c9cc20a2f8b4" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2af80b3b-4ebb-3620-87fe-a9ccd36ef63e" locEndPos="8" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="2" auth="lyao" locRef="1" rule="JSF-209_b" lnHash="1544355218" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="494824ee-0fc8-303d-b0cd-6617624dfd5a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18d93ff1-3c24-36f8-899f-4a61b8b29947" locEndPos="8" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="3" auth="lyao" locRef="1" rule="MISRA2004-6_3_b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="b19eed28-e45d-39df-af1a-587468e20715" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70e871d7-01c6-30a6-8bb2-82f505b1d7ab" locEndPos="8" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="4" auth="lyao" locRef="1" rule="MISRA2012-DIR-4_6_b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="1bc4eec8-d046-3693-91b8-c4344f624823" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="34ee92b2-54f8-3ae5-9f85-d7e065acf4c6" locEndPos="8" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="3" auth="lyao" locRef="1" rule="HICPP-3_5_1-b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="411a92ec-c4bc-3731-b68d-a3f2e01349f6" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0efc8fec-1575-3cfa-ab4f-4f7e134f7141" locEndPos="8" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A8_5_2-a" lnHash="1544355218" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1544355218" unbViolId="e408da32-2482-3d6b-9ebe-1f68c0787ded" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c460206a-0019-399f-8189-958a4ec5a878" locEndPos="12" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="3" auth="lyao" locRef="1" rule="CODSTA-MCPP-38" lnHash="1544355218" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1544355218" unbViolId="1583c845-e796-356b-b3e5-c213b5542ba7" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87681f48-2285-3a04-8b77-b75d47fe1e63" locEndPos="12" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="'i' shall be declared as unsigned int or signed int" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="3" auth="lyao" locRef="1" rule="PORT-13" lnHash="1544355218" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="1544355218" unbViolId="4485193a-5179-3da3-85fb-02a3cd3db2e2" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4dc2c084-36a8-32a5-9079-6b09d7b8868c" locEndPos="12" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="Variable &quot;i&quot; declaration was found in control statement" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="3" auth="lyao" locRef="1" rule="OPT-10" lnHash="1544355218" rule.header="Do not declare variables in &quot;if&quot;, &quot;for&quot;, &quot;while&quot;, and &quot;do while&quot; statement" tool="c++test" lineHash="1544355218" unbViolId="d61db1b7-9afe-3f41-b4ac-ef0424cdb16b" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="feafd265-9ff7-3818-beb3-e91f4945f2e7" locEndPos="12" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="The 'i' variable should be commented" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="3" auth="lyao" locRef="1" rule="JSF-132_a" lnHash="1544355218" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="1544355218" unbViolId="13d20fd0-6c9a-3dd9-8f76-6bf98d57d48d" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1517ef58-53f9-3025-b354-093c2e1867e7" locEndPos="12" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="The 'i' variable should be commented" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="3" auth="lyao" locRef="1" rule="COMMENT-05" lnHash="1544355218" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="1544355218" unbViolId="59f940c2-a907-3586-8ed4-48afd4dc26c7" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f02289b-30d9-37c3-a165-e43d15d8b0b8" locEndPos="12" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="Postfix operator applied to variable 'i'; prefer prefix type" ln="91" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="91" sev="3" auth="lyao" locRef="1" rule="OPT-04" lnHash="1544355218" rule.header="Prefer canonical form of ++ and --. Prefer calling the prefix forms" tool="c++test" lineHash="1544355218" unbViolId="a3e63bd6-ab29-358b-9112-d2c6ce548c33" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e452f56a-9732-3f74-a609-032a6bf31ddf" locEndPos="42" locType="sr" hash="972801700" locEndLn="91" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="92" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="e395b40e-e7a1-3d99-a852-ac615697c171" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f1b8e728-c907-3684-abea-51a84448dbd8" locEndPos="1" locType="sr" hash="972801700" locEndLn="92" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="92" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="7779d3c8-f1e1-3038-8c21-773c71f33cad" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98e35654-eec6-384d-87ef-c54070c66880" locEndPos="1" locType="sr" hash="972801700" locEndLn="92" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="92" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="c22a2888-e88e-31ae-a036-445b52deeeee" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="addee529-c01f-3a1f-b843-fff4d17f6f43" locEndPos="1" locType="sr" hash="972801700" locEndLn="92" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="92" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="70ee020f-61f3-3fa6-835e-9ce1aab79eee" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc7007e1-27e2-3e92-8d9a-8d1cbb3ca505" locEndPos="2" locType="sr" hash="972801700" locEndLn="92" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="92" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="1134cb33-73d8-3cf6-a932-a26febee612f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8451a07-4e33-313b-a61a-935618affb45" locEndPos="2" locType="sr" hash="972801700" locEndLn="92" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="92" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="3e2669e3-6da2-3fd3-a90c-d23a54112017" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a34b027-0154-3794-a11a-beee9ca9b7f5" locEndPos="2" locType="sr" hash="972801700" locEndLn="92" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="92" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="8cc07b42-5283-3939-88c1-2bd797fffb0a" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="caa804a3-8440-326f-8f89-cb01aac1d7a6" locEndPos="3" locType="sr" hash="972801700" locEndLn="92" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="92" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="7cdad0c3-0d61-37d8-9c5a-3b0924cacc67" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75712927-b7fc-307d-a7ee-93eb36765b26" locEndPos="3" locType="sr" hash="972801700" locEndLn="92" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="92" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="70b7cc09-d8e1-387d-90ec-41e353f939bd" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f6f57c97-488a-3d8d-aaeb-c6822b51f377" locEndPos="3" locType="sr" hash="972801700" locEndLn="92" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="92" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="90a5db70-5a2a-37f0-908c-9237d036d344" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ade4e8e6-456c-37dd-a6be-097b96e900b4" locEndPos="4" locType="sr" hash="972801700" locEndLn="92" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="92" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="1fe20a9d-df04-3e6a-be6c-1201d9deb7f7" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d6581e54-000f-3b0e-a101-8e1583cc61e3" locEndPos="4" locType="sr" hash="972801700" locEndLn="92" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="92" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="d7093046-be3a-32dc-a265-6c86d7c1cd77" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6912646b-8a9e-3441-9abb-47157a325e2b" locEndPos="4" locType="sr" hash="972801700" locEndLn="92" goals="0,"/>
    <DupViol msg="Duplicated code: 'LOCK_ACQUIRE(changePositionMutex);'" ln="92" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="92" sev="3" auth="lyao" locRef="1" rule="CDD-DUPC" lnHash="-251104526" rule.header="Avoid code duplication" tool="c++test" lineHash="-251104526" unbViolId="09acbe23-cdd4-3eb9-a218-095f3dda7e71" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="c54f2be2-d3ae-319c-a3ea-da16da2f059c" locType="sr" locEndPos="38" urgent="true" hash="972801700" locEndLn="92" goals="1,">
      <ElDescList>
        <ElDesc lineHash="-251104526" ln="92" srcRngStartPos="4" srcRngEndPos="38" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="92" srcRngEndLn="92" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="[Line 92] Duplicated code in file 'DeadLock.cpp'" rngLn="92"/>
        <ElDesc lineHash="-2061438629" ln="118" srcRngStartPos="3" srcRngEndPos="37" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="118" srcRngEndLn="118" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="[Line 118] Duplicated code in file 'DeadLock.cpp'" rngLn="118"/>
      </ElDescList>
    </DupViol>
    <StdViol msg="The global function 'EnterCriticalSection' is called without scope resolution operator '::'" ln="92" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="92" sev="5" auth="lyao" locRef="1" rule="CODSTA-CPP-23" lnHash="-251104526" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-251104526" unbViolId="15705ca2-425f-3753-a00b-1f8127f62fe3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3951433e-16de-33cf-89c8-8a39093bdbb9" locEndPos="5" locType="sr" hash="972801700" locEndLn="92" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="93" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1511312469" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1511312469" unbViolId="2b1e8067-ebc0-3a4a-b20b-a3d1729a4ab8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d717bccb-bacb-3fdd-b750-18ab3e295ce1" locEndPos="1" locType="sr" hash="972801700" locEndLn="93" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="93" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="edd6af89-16cf-302d-bd07-aabe8e2bf79e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43d35beb-f65d-3c76-951f-38ecd736e6c6" locEndPos="1" locType="sr" hash="972801700" locEndLn="93" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="93" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="2d1a5b3b-d6a8-30e5-9c6c-b2ca3394fbd3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a49a422d-6643-3005-8892-464c7bf7d1f4" locEndPos="1" locType="sr" hash="972801700" locEndLn="93" goals="0,"/>
    <FlowViol msg="&quot;participants&quot; is used in two critical sections in context of single method, using one critical section will improve atomicity of operation" ln="93" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" ruleSAFMsg="Usage of &quot;participants&quot; in second critical section" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="94" rule="BD-TRS-DIFCS" FirstElSrcRngStartPos="0" lnHash="-1511312469" ruleSCSCMsg="Usage of &quot;participants&quot; in first critical section" pkg="Physics" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" rule.header="Variable should be used in context of single critical section" FirstElSrcRngStartln="93" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1204301482" lang="cpp" violId="1d514f0d-75af-32d9-a5ef-ebc13150b58b" locEndPos="0" locEndLn="94" goals="0," locStartln="93" sev="2" locRef="1" tool="c++test" lineHash="-1511312469" unbViolId="921247d8-c6c2-3403-bb20-443ebb4ba8c6" locType="sr" hash="972801700" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Variable used in critical section"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1229452372" ln="90" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="90" srcRngEndLn="91" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" ln="91" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="91" srcRngEndLn="92" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" ln="92" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="92" srcRngEndLn="93" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="92">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" ln="93" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="93" srcRngEndLn="94" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="Point&amp; position = participants[i]->getPosition();" ElType=".C" rngLn="93">
          <ElDescList>
            <ElDesc lineHash="-1486716559" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="Point&amp; getPosition() { return _position; }" ElType="." rngLn="10"/>
          </ElDescList>
          <Anns>
            <Ann msg="Usage of &quot;participants&quot; in first critical section" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="929435952" ln="94" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="94" srcRngEndLn="95" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94">
          <ElDescList>
            <ElDesc lineHash="931387847" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_x += vector._x;" ElType="." rngLn="15"/>
            <ElDesc lineHash="-1856027609" ln="16" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="16" srcRngEndLn="17" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_y += vector._y;" ElType="." rngLn="16"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1599411881" ln="95" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="95" srcRngEndLn="96" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="ring.contains(...)" ElType="." rngLn="95">
          <ElDescList>
            <ElDesc lineHash="538754804" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="getPosition()" ElType="." rngLn="29">
              <ElDescList>
                <ElDesc lineHash="-1486716559" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="Point&amp; getPosition() { return _position; }" ElType="." rngLn="10"/>
              </ElDescList>
            </ElDesc>
            <ElDesc lineHash="538754804" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="point.squareDistanceTo(...)" ElType="." rngLn="29">
              <ElDescList>
                <ElDesc lineHash="150478121" ln="21" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="21" srcRngEndLn="22" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="return ((_x - point._x) * (_x - point._x)) + ((_y - point._y) * (_y - point._y));" ElType="." rngLn="21"/>
              </ElDescList>
            </ElDesc>
            <ElDesc lineHash="538754804" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="return point.squareDistanceTo(getPosition()) &lt;= (_radius * _radius);" ElType="." rngLn="29"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1599411881" ln="95" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="95" srcRngEndLn="96" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="." rngLn="95">
          <ElDescList>
            <ElDesc lineHash="-600547524" ln="60" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="60" srcRngEndLn="61" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming false)" kind="condEval"/>
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="793595747" ln="98" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="98" srcRngEndLn="99" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="98">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" ln="91" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="91" srcRngEndLn="92" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" ln="92" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="92" srcRngEndLn="93" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="92">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" ln="93" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="93" srcRngEndLn="94" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="Point&amp; position = participants[i]->getPosition();" ElType=".P" rngLn="93">
          <Anns>
            <Ann msg="Usage of &quot;participants&quot; in second critical section" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="93" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1511312469" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1511312469" unbViolId="46d87775-4914-323e-b2bd-dc9380e10bc5" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5630c391-f521-34da-b789-7d2c1d22ec42" locEndPos="2" locType="sr" hash="972801700" locEndLn="93" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="93" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="a03f4590-de10-3a95-9eb7-9c79176d5c35" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3eba9cb-6e65-364a-b0be-3fcf1eb189ac" locEndPos="2" locType="sr" hash="972801700" locEndLn="93" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="93" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="c2e940bf-6810-3fdc-9c66-c101e0c56357" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a2e27dae-3b66-361c-86f0-da64bdbbae9b" locEndPos="2" locType="sr" hash="972801700" locEndLn="93" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="93" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1511312469" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1511312469" unbViolId="7ee22bc8-8859-3853-bf3b-26e29035eb07" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74c639ef-1c68-39c5-9236-bc5531d7d426" locEndPos="3" locType="sr" hash="972801700" locEndLn="93" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="93" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="9a385b6f-2a55-3a9e-aa0d-830241e9feff" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a2756541-8fef-3fb4-9129-ca3c43e7b818" locEndPos="3" locType="sr" hash="972801700" locEndLn="93" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="93" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="3aea3af3-1405-35bb-9796-0b016d8e58b6" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9efa10e-ffcf-3539-b303-c555cb10cf8d" locEndPos="3" locType="sr" hash="972801700" locEndLn="93" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="93" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1511312469" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1511312469" unbViolId="136bd706-7d3a-369b-ae9c-913ca1b8beb6" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="39e0fc87-ceab-3df9-86ec-66d5397cf5b5" locEndPos="4" locType="sr" hash="972801700" locEndLn="93" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="93" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="01272adc-3db6-346e-9ada-1937bf3f52f3" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9219038f-bd71-3523-bf62-c3f6aa41d5c4" locEndPos="4" locType="sr" hash="972801700" locEndLn="93" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="93" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="7ced4c82-0474-30ea-9702-5c623ab7a54f" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5fb6832f-e87e-394d-b166-05646d477506" locEndPos="4" locType="sr" hash="972801700" locEndLn="93" goals="0,"/>
    <StdViol msg="The definition of the 'position' variable should contain a braced initializer" ln="93" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="93" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A8_5_2-a" lnHash="-1511312469" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="-1511312469" unbViolId="db80861c-051b-30d4-a87f-af63a8d28784" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48e71aef-b394-3e1f-bc38-62619c3e6749" locEndPos="12" locType="sr" hash="972801700" locEndLn="93" goals="0,"/>
    <StdViol msg="The definition of the 'position' variable should contain a braced initializer" ln="93" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="93" sev="3" auth="lyao" locRef="1" rule="CODSTA-MCPP-38" lnHash="-1511312469" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="-1511312469" unbViolId="8c9aa854-dd48-307a-a3d8-08205446be14" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4bad4e7d-6c1d-3124-b834-0bcd41aa0e43" locEndPos="12" locType="sr" hash="972801700" locEndLn="93" goals="0,"/>
    <StdViol msg="The 'position' variable should be declared with the 'auto&amp;' type specifier" ln="93" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="93" sev="2" auth="lyao" locRef="1" rule="CODSTA-MCPP-08_a" lnHash="-1511312469" rule.header="Prefer 'auto' to explicit type names in variable declarations" tool="c++test" lineHash="-1511312469" unbViolId="8df1fbaf-e63f-3b61-a495-9c195218adc7" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b6f8c4c-18c3-3645-ab58-08a2800c0c07" locEndPos="12" locType="sr" hash="972801700" locEndLn="93" goals="0,"/>
    <StdViol msg="Variable &quot;position&quot; declaration was found in control statement" ln="93" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="93" sev="3" auth="lyao" locRef="1" rule="OPT-10" lnHash="-1511312469" rule.header="Do not declare variables in &quot;if&quot;, &quot;for&quot;, &quot;while&quot;, and &quot;do while&quot; statement" tool="c++test" lineHash="-1511312469" unbViolId="36da3c7c-145e-3561-b822-714f02727c92" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3f0a27f-ae8f-3b80-8245-38fe5cf58780" locEndPos="12" locType="sr" hash="972801700" locEndLn="93" goals="0,"/>
    <StdViol msg="The 'position' variable should be commented" ln="93" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="93" sev="3" auth="lyao" locRef="1" rule="JSF-132_a" lnHash="-1511312469" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1511312469" unbViolId="83e1eee1-617d-3308-bbc3-412ba9ba91fa" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8bdca6e4-6f9b-31c8-b159-f4e0a1fe9464" locEndPos="12" locType="sr" hash="972801700" locEndLn="93" goals="0,"/>
    <StdViol msg="The 'position' variable should be commented" ln="93" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="93" sev="3" auth="lyao" locRef="1" rule="COMMENT-05" lnHash="-1511312469" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1511312469" unbViolId="6cc30b0b-b94a-3917-80ca-a35f4d9a1c60" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9230b617-56dd-3b24-8c70-96033e552a47" locEndPos="12" locType="sr" hash="972801700" locEndLn="93" goals="0,"/>
    <StdViol msg="Variable 'position' should be declared using 'auto' specifier" ln="93" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="93" sev="3" auth="lyao" locRef="1" rule="HICPP-7_1_8-a" lnHash="-1511312469" rule.header="Use auto id = expr when declaring a variable that is the same type as the initializer function call" tool="c++test" lineHash="-1511312469" unbViolId="dbdfb6b9-047a-3e68-97b7-00a353601e4e" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b69f8c4a-599a-3eea-8a03-8d37f7a1b56a" locEndPos="12" locType="sr" hash="972801700" locEndLn="93" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="94" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="929435952" rule.header="Tabs should be avoided" tool="c++test" lineHash="929435952" unbViolId="95ee2a06-d11f-34aa-a3d7-a892157d5005" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ddf11d8-f5df-35a3-8a1f-19b6518bf453" locEndPos="1" locType="sr" hash="972801700" locEndLn="94" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="94" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="c4837f79-e7c6-3696-9795-3907ce5bab8b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a567a3d-123f-354c-9dd1-d8fa3fa08237" locEndPos="1" locType="sr" hash="972801700" locEndLn="94" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="94" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="117e2ad9-6565-3ea5-9a25-84266a8b7ae9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b62d128-8aa9-35b0-be50-a7f184965049" locEndPos="1" locType="sr" hash="972801700" locEndLn="94" goals="0,"/>
    <FlowViol msg="&quot;velocityArray&quot; is used in two critical sections in context of single method, using one critical section will improve atomicity of operation" ln="94" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" ruleSAFMsg="Usage of &quot;velocityArray&quot; in second critical section" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="95" rule="BD-TRS-DIFCS" FirstElSrcRngStartPos="0" lnHash="929435952" ruleSCSCMsg="Usage of &quot;velocityArray&quot; in first critical section" pkg="Physics" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" rule.header="Variable should be used in context of single critical section" FirstElSrcRngStartln="94" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="407642474" lang="cpp" violId="a7c55d19-23d0-30fb-9081-8c5bef17fb34" locEndPos="0" locEndLn="95" goals="0," locStartln="94" sev="2" locRef="1" tool="c++test" lineHash="929435952" unbViolId="ebae6bfc-be46-35f6-90d4-a3cac1079d18" locType="sr" hash="972801700" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Variable used in critical section"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1229452372" ln="90" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="90" srcRngEndLn="91" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" ln="91" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="91" srcRngEndLn="92" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" ln="92" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="92" srcRngEndLn="93" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="92">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" ln="93" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="93" srcRngEndLn="94" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93">
          <ElDescList>
            <ElDesc lineHash="-1486716559" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="Point&amp; getPosition() { return _position; }" ElType="." rngLn="10"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="929435952" ln="94" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="94" srcRngEndLn="95" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="position.translate(*velocityArray[i]);" ElType=".C" rngLn="94">
          <ElDescList>
            <ElDesc lineHash="931387847" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_x += vector._x;" ElType="." rngLn="15"/>
            <ElDesc lineHash="-1856027609" ln="16" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="16" srcRngEndLn="17" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_y += vector._y;" ElType="." rngLn="16"/>
          </ElDescList>
          <Anns>
            <Ann msg="Usage of &quot;velocityArray&quot; in first critical section" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1599411881" ln="95" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="95" srcRngEndLn="96" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="ring.contains(...)" ElType="." rngLn="95">
          <ElDescList>
            <ElDesc lineHash="538754804" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="getPosition()" ElType="." rngLn="29">
              <ElDescList>
                <ElDesc lineHash="-1486716559" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="Point&amp; getPosition() { return _position; }" ElType="." rngLn="10"/>
              </ElDescList>
            </ElDesc>
            <ElDesc lineHash="538754804" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="point.squareDistanceTo(...)" ElType="." rngLn="29">
              <ElDescList>
                <ElDesc lineHash="150478121" ln="21" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="21" srcRngEndLn="22" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="return ((_x - point._x) * (_x - point._x)) + ((_y - point._y) * (_y - point._y));" ElType="." rngLn="21"/>
              </ElDescList>
            </ElDesc>
            <ElDesc lineHash="538754804" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="return point.squareDistanceTo(getPosition()) &lt;= (_radius * _radius);" ElType="." rngLn="29"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1599411881" ln="95" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="95" srcRngEndLn="96" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="." rngLn="95">
          <ElDescList>
            <ElDesc lineHash="-600547524" ln="60" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="60" srcRngEndLn="61" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming false)" kind="condEval"/>
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="793595747" ln="98" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="98" srcRngEndLn="99" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="98">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" ln="91" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="91" srcRngEndLn="92" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" ln="92" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="92" srcRngEndLn="93" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="92">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" ln="93" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="93" srcRngEndLn="94" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93">
          <ElDescList>
            <ElDesc lineHash="-1486716559" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="Point&amp; getPosition() { return _position; }" ElType="." rngLn="10"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="929435952" ln="94" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="94" srcRngEndLn="95" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="position.translate(*velocityArray[i]);" ElType=".P" rngLn="94">
          <Anns>
            <Ann msg="Usage of &quot;velocityArray&quot; in second critical section" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="94" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="929435952" rule.header="Tabs should be avoided" tool="c++test" lineHash="929435952" unbViolId="b301f118-cb3a-36e6-9dee-d3ede5f7fdaa" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6558c581-4948-35cc-a70f-d98992b1b497" locEndPos="2" locType="sr" hash="972801700" locEndLn="94" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="94" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="023d88d3-f9f1-3fe5-a911-922eb42e592e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="882030bf-69b0-39d7-95fe-06eb299e3c76" locEndPos="2" locType="sr" hash="972801700" locEndLn="94" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="94" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="fd630229-ae43-3ac7-885a-4b70ecfdb988" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2946ec3b-ac94-30ca-b1f2-a29f6e0b6f76" locEndPos="2" locType="sr" hash="972801700" locEndLn="94" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="94" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="929435952" rule.header="Tabs should be avoided" tool="c++test" lineHash="929435952" unbViolId="6fd9fd2f-48f7-3249-8f8f-d903883e65f2" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e400e742-2da0-35dc-957c-084741eedd0f" locEndPos="3" locType="sr" hash="972801700" locEndLn="94" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="94" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="725838ba-16b7-34c6-be17-76d6480b0e80" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a862463-0708-3c90-8e88-a5b2cb7ffbe0" locEndPos="3" locType="sr" hash="972801700" locEndLn="94" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="94" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="a9be93ed-2d83-3041-83f2-5051d39cfab0" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dbc58777-71c4-3f7f-8e94-9839c3453052" locEndPos="3" locType="sr" hash="972801700" locEndLn="94" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="94" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="929435952" rule.header="Tabs should be avoided" tool="c++test" lineHash="929435952" unbViolId="179239e6-0e3c-3e7b-a9c7-525aee7d3dab" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cfeefdb7-c9d3-38ee-8312-55eedb7c9145" locEndPos="4" locType="sr" hash="972801700" locEndLn="94" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="94" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="e1e7e00f-c713-3212-85a2-12ccab118c4d" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4f8c78c-5a85-3932-8da6-56f9b1841694" locEndPos="4" locType="sr" hash="972801700" locEndLn="94" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="94" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="0069a522-25ac-3d9e-ab8c-c838b8d11d7f" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="50b15c37-aa39-39fd-98a9-278aebf9efff" locEndPos="4" locType="sr" hash="972801700" locEndLn="94" goals="0,"/>
    <StdViol msg="Dereferenced pointer type expression should not be used" ln="94" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="94" sev="3" auth="lyao" locRef="1" rule="PB-01" lnHash="929435952" rule.header="Do not dereference pointer type expressions" tool="c++test" lineHash="929435952" unbViolId="ea941404-8dcb-3012-a3f0-71b19e47a7f7" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3da3d03d-302a-359e-99c3-5317cdd4a958" locEndPos="25" locType="sr" hash="972801700" locEndLn="94" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="95" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1599411881" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1599411881" unbViolId="7e596f1b-9759-34c0-846e-4de04e10be24" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da634d03-37ba-35a8-937b-b12c6b320f12" locEndPos="1" locType="sr" hash="972801700" locEndLn="95" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="95" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="c9bf7687-6aea-3853-a02d-03c26f723570" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b8ace4e-7c36-3314-84cf-653a24a78298" locEndPos="1" locType="sr" hash="972801700" locEndLn="95" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="95" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="12512c38-73ef-3e84-9c1b-163a48857508" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="df767cb4-1fab-328f-9c88-26e89161c96a" locEndPos="1" locType="sr" hash="972801700" locEndLn="95" goals="0,"/>
    <FlowViol msg="&quot;ring&quot; is used in two critical sections in context of single method, using one critical section will improve atomicity of operation" ln="95" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" ruleSAFMsg="Usage of &quot;ring&quot; in second critical section" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="96" rule="BD-TRS-DIFCS" FirstElSrcRngStartPos="0" lnHash="-1599411881" ruleSCSCMsg="Usage of &quot;ring&quot; in first critical section" pkg="Physics" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" rule.header="Variable should be used in context of single critical section" FirstElSrcRngStartln="95" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-905541933" lang="cpp" violId="e6c05044-f577-39c6-8a27-5f2264a2d8e8" locEndPos="0" locEndLn="96" goals="0," locStartln="95" sev="2" locRef="1" tool="c++test" lineHash="-1599411881" unbViolId="c6ae9bc1-d1f8-3eba-acfe-4b87fc939aae" locType="sr" hash="972801700" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Variable used in critical section"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1229452372" ln="90" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="90" srcRngEndLn="91" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" ln="91" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="91" srcRngEndLn="92" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" ln="92" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="92" srcRngEndLn="93" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="92">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" ln="93" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="93" srcRngEndLn="94" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93">
          <ElDescList>
            <ElDesc lineHash="-1486716559" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="Point&amp; getPosition() { return _position; }" ElType="." rngLn="10"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="929435952" ln="94" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="94" srcRngEndLn="95" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94">
          <ElDescList>
            <ElDesc lineHash="931387847" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_x += vector._x;" ElType="." rngLn="15"/>
            <ElDesc lineHash="-1856027609" ln="16" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="16" srcRngEndLn="17" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_y += vector._y;" ElType="." rngLn="16"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1599411881" ln="95" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="95" srcRngEndLn="96" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="ring.contains(...)" ElType=".C" rngLn="95">
          <ElDescList>
            <ElDesc lineHash="538754804" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="getPosition()" ElType="." rngLn="29">
              <ElDescList>
                <ElDesc lineHash="-1486716559" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="Point&amp; getPosition() { return _position; }" ElType="." rngLn="10"/>
              </ElDescList>
            </ElDesc>
            <ElDesc lineHash="538754804" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="point.squareDistanceTo(...)" ElType="." rngLn="29">
              <ElDescList>
                <ElDesc lineHash="150478121" ln="21" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="21" srcRngEndLn="22" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="return ((_x - point._x) * (_x - point._x)) + ((_y - point._y) * (_y - point._y));" ElType="." rngLn="21"/>
              </ElDescList>
            </ElDesc>
            <ElDesc lineHash="538754804" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="return point.squareDistanceTo(getPosition()) &lt;= (_radius * _radius);" ElType="." rngLn="29"/>
          </ElDescList>
          <Anns>
            <Ann msg="Usage of &quot;ring&quot; in first critical section" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1599411881" ln="95" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="95" srcRngEndLn="96" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="." rngLn="95">
          <ElDescList>
            <ElDesc lineHash="-600547524" ln="60" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="60" srcRngEndLn="61" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming false)" kind="condEval"/>
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="793595747" ln="98" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="98" srcRngEndLn="99" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="98">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" ln="91" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="91" srcRngEndLn="92" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" ln="92" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="92" srcRngEndLn="93" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="92">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" ln="93" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="93" srcRngEndLn="94" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93">
          <ElDescList>
            <ElDesc lineHash="-1486716559" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="Point&amp; getPosition() { return _position; }" ElType="." rngLn="10"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="929435952" ln="94" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="94" srcRngEndLn="95" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94">
          <ElDescList>
            <ElDesc lineHash="931387847" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_x += vector._x;" ElType="." rngLn="15"/>
            <ElDesc lineHash="-1856027609" ln="16" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="16" srcRngEndLn="17" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_y += vector._y;" ElType="." rngLn="16"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1599411881" ln="95" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="95" srcRngEndLn="96" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="ring.contains(...)" ElType=".P" rngLn="95">
          <Anns>
            <Ann msg="Usage of &quot;ring&quot; in second critical section" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="95" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1599411881" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1599411881" unbViolId="80b5e63b-4a60-38e7-8948-6a4bea74abc3" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2cf6fef-4132-3924-9626-90f444c3f2e9" locEndPos="2" locType="sr" hash="972801700" locEndLn="95" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="95" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="a46ffadb-55b0-3e33-af22-9abac40d7eb4" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a7c9c2c-6ffc-3a6e-9c28-43f3fa2d94ee" locEndPos="2" locType="sr" hash="972801700" locEndLn="95" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="95" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="16af10d6-e4b1-3ba6-9eea-8be45e59f568" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b78c62c7-c8b8-3394-8a63-2523a606c858" locEndPos="2" locType="sr" hash="972801700" locEndLn="95" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="95" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1599411881" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1599411881" unbViolId="71e4de5f-9a03-388b-8a60-a11079db1c42" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e771ac3-8279-302f-990a-a3f476697e26" locEndPos="3" locType="sr" hash="972801700" locEndLn="95" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="95" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="da0106d2-eb13-36ff-96a2-37eb89fadc27" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71135896-6837-3c03-afa7-5e8873304e79" locEndPos="3" locType="sr" hash="972801700" locEndLn="95" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="95" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="f7fcab11-ed30-3d71-9738-b10b6102b26c" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ed9bbf8-12a4-3b20-ba10-745fdc176b8c" locEndPos="3" locType="sr" hash="972801700" locEndLn="95" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="95" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1599411881" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1599411881" unbViolId="2029f74e-4d31-30b6-8459-a84c87c9b382" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff431c4b-1c30-3dc9-84f5-4936211ed441" locEndPos="4" locType="sr" hash="972801700" locEndLn="95" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="95" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="0123f252-9659-3a42-88c0-44279c24239c" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6de80a1f-c1ca-3871-bfdb-ce23cda6fd60" locEndPos="4" locType="sr" hash="972801700" locEndLn="95" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="95" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="9488ed13-d4cd-3e39-87ee-061560e9da6c" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69017b1a-6782-36ce-bd86-79841513ca64" locEndPos="4" locType="sr" hash="972801700" locEndLn="95" goals="0,"/>
    <StdViol msg="The global function 'assertion' is called without scope resolution operator '::'" ln="95" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="95" sev="5" auth="lyao" locRef="1" rule="CODSTA-CPP-23" lnHash="-1599411881" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-1599411881" unbViolId="1c6dce99-9f18-3555-8a5f-ba9fa883ac12" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e49a88a0-e4e0-3105-a534-419be68e5f39" locEndPos="5" locType="sr" hash="972801700" locEndLn="95" goals="0,"/>
    <StdViol msg="The string literal is embedded directly in the code: Participant is out of ring" ln="95" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="95" sev="5" auth="lyao" locRef="1" rule="CWE-798-a" lnHash="-1599411881" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1599411881" unbViolId="61b197c0-47b1-3b4b-be8b-99ae7218c22c" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23b06959-9d60-3933-83fb-d3c0e467238d" locEndPos="40" locType="sr" hash="972801700" locEndLn="95" goals="0,"/>
    <StdViol msg="The string literal is embedded directly in the code: Participant is out of ring" ln="95" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="95" sev="5" auth="lyao" locRef="1" rule="CODSTA-203" lnHash="-1599411881" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1599411881" unbViolId="c6c2df7f-3344-340c-9b63-0bee08fd5a45" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="caa31552-b976-32ee-b346-630caf597c7d" locEndPos="40" locType="sr" hash="972801700" locEndLn="95" goals="0,"/>
    <StdViol msg="The string literal is embedded directly in the code: Participant is out of ring" ln="95" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="95" sev="1" auth="lyao" locRef="1" rule="APSC_DV-003110-a" lnHash="-1599411881" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1599411881" unbViolId="0dd6251e-b08a-3bad-82e8-773997f06fe9" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1b94a099-7b87-31b0-ae13-6a373fd4b016" locEndPos="40" locType="sr" hash="972801700" locEndLn="95" goals="0,"/>
    <StdViol msg="The string literal is embedded directly in the code: Participant is out of ring" ln="95" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="95" sev="1" auth="lyao" locRef="1" rule="CERT_C-MSC41-a" lnHash="-1599411881" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1599411881" unbViolId="2bbb1aee-25a1-3cd1-aaa9-1f29f684ffe4" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7fd30058-6fa7-3155-9442-6609596a1a01" locEndPos="40" locType="sr" hash="972801700" locEndLn="95" goals="0,"/>
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'assertion' function call" ln="95" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="95" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A27_0_4-d" lnHash="-1599411881" rule.header="C-style strings shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="d21d9e36-e646-34f7-a2f0-2c3ec79180bf" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4209db0-ab39-394a-992d-a834a89f67a3" locEndPos="40" locType="sr" hash="972801700" locEndLn="95" goals="0,"/>
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'assertion' function call" ln="95" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="95" sev="3" auth="lyao" locRef="1" rule="PB-76" lnHash="-1599411881" rule.header="C-style strings shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="2bbf812c-9c6b-3c47-a320-50600acb53c7" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d6f18e8b-c68d-328a-81c7-9e2f8dda34ce" locEndPos="40" locType="sr" hash="972801700" locEndLn="95" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="77e50e04-3186-3f57-8939-eedc870aba35" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5bb11165-5ad6-37a8-b61e-4c8962d1e523" locEndPos="1" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="0e923748-de3b-3204-a085-076d8b507742" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b66db7e6-500c-3fbf-bdc0-6748e12163b4" locEndPos="1" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="10a63510-c5c3-3fa4-8339-96ddd630a5c1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e0c888d-598b-3460-ae20-e5e6a8f2ff42" locEndPos="1" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="b37609bb-6f11-3d9e-b910-8a664a1a37ab" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8225ab41-89be-3dfe-ab3d-54749294efb7" locEndPos="2" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="848b614f-beb4-3bfd-bcd0-4697b030426e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68f8f7b7-6667-3c14-aceb-903ed0be83b2" locEndPos="2" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="928b2f4b-bb4f-3e1d-ad98-23c137cb0234" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c045884e-00c6-3c87-a53a-38c798a1ba09" locEndPos="2" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="f8720327-f2d1-34a3-8e41-058e14e8a1c1" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2bb1f124-9092-3916-a08b-32d8e7e56ed0" locEndPos="3" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="3e4765c0-7e8a-308a-979c-eea50907b395" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0ee2fcb-d4cc-340b-a713-58bbefd79aaf" locEndPos="3" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="0f1b9c2a-b045-3d0e-be01-09da0715ee68" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ec7077f-efd2-3366-b36d-5fdf6261c9c2" locEndPos="3" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="276843fc-d47a-346f-a9ff-2fcd4a7ccbf3" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="176b31a5-3905-3176-8344-f1dd44ae7718" locEndPos="4" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="42627665-89b8-3b9c-b552-701bbacfaa2a" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af6230ad-590d-3d2d-85a4-a6ff6f290ffe" locEndPos="4" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="76dc96e7-3dd6-3291-ab6f-081ae4235082" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="56adc6f5-b28b-34ab-a3ab-35679c54a9db" locEndPos="4" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="2af545ed-579f-318b-98f1-d7ba29b81fd9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e296e986-a841-3675-8a1f-63a164178584" locEndPos="5" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="4c1ee5b8-cfab-384d-b1b2-0c35f8941813" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69437732-234e-3298-b449-00e7d84534ea" locEndPos="5" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="81bf708a-770b-355b-b18b-08934d7ccb35" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40963e44-913f-37ef-9c15-ab0600a38a09" locEndPos="5" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="f7d629a7-3d99-3a01-af63-7adf58082390" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c98d8c64-a7de-3b93-bf0c-e5f2de7fb6b4" locEndPos="6" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="53149acf-6c41-3bcb-96b9-177a81e59737" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bbdc70bc-6f29-3513-8850-2922ef913191" locEndPos="6" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="4409a8c7-0add-34c3-ad1d-df0a4a291a53" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c12ae121-2e30-3d67-97c3-b12766cf803e" locEndPos="6" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="183bdd6b-834a-35ec-9b8b-e3f2062d5ed7" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3bb351a-7147-3917-9d3d-a671e5760b1f" locEndPos="7" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="efe70474-624e-3f33-8e06-58bcc9b74243" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62ed72b5-ed75-37a4-a656-6625f9e3165f" locEndPos="7" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="16dc43db-ef2e-3eeb-bedc-5c70fe24423e" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e7eaa93-48f8-3192-b702-e6d22050acd2" locEndPos="7" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="92c59efa-af33-306f-a2b8-b9f7f945c611" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6864bcee-69e1-3c15-9d05-b5030afa2f06" locEndPos="8" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="c54aae5c-954d-37d6-aea8-ff2c721a36c9" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="28fb75af-c95d-36bc-a272-b4680f825f74" locEndPos="8" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="d946201f-108a-37c0-9cd9-802ea1d808e5" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bce4964b-050c-30a7-ac9c-8410de1e760f" locEndPos="8" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="86dc1f60-78c0-3ecf-b8a0-261999e1d93b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c66debb6-7518-3fbf-917f-a9c9688d015b" locEndPos="9" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="5b752c46-0db3-342c-b883-6f0c56b16b48" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ee105ed-2d7f-36d6-94d6-43e2c4d0cce1" locEndPos="9" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="723b5695-65d7-3adc-9f90-fd5b0c30a541" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c66f4800-3d16-3c80-98ae-b4154cf7cd16" locEndPos="9" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="3d5c143d-8b5e-3799-9596-24b30219bc76" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83c89ad2-f24b-3ed6-8478-39514016c233" locEndPos="10" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="608a2743-5ecc-3398-b06a-b8bea05c4dcc" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f19babde-893f-3581-815e-b827a9d08252" locEndPos="10" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="4685c483-f2df-3495-bf35-d6d5d3bb481b" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70dfcd22-6bf0-3e85-9976-920a690f2106" locEndPos="10" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="06ec2760-46e6-3acb-b959-e9279d7c92ea" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="382501c0-3b17-3abf-932e-d9336145b183" locEndPos="11" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="8d6e6865-c268-315c-bfab-681e71581d77" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98191b6b-ed13-3fcc-904a-38029fe0288c" locEndPos="11" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="6ef842f0-ee2f-392d-a7a6-2af26b4222ed" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8f00154-741c-3b32-939d-ed39bd6486e7" locEndPos="11" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="09406a34-4fe8-3003-a426-36547f55bdd9" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18eaaab4-dea6-3e77-acf8-4677b6edf3d1" locEndPos="12" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="bb20ac1e-1026-3d32-90e2-b23363b968d3" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="735f3688-b9eb-3635-beca-64f9fd9b977c" locEndPos="12" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="96" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="6c13411a-9f6a-3513-887e-87acf13af440" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a426aa6-1772-3a11-8a97-96ca7e97da48" locEndPos="12" locType="sr" hash="972801700" locEndLn="96" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="a4fcf616-37cb-3e5f-a027-6da310e693c0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d128c103-6b05-3a3a-8234-de4a54d3789f" locEndPos="1" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="687dd6b5-0b2d-3033-a4c1-98c4e375bfb9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7ead670-460b-3eca-ba96-1f0301d41b49" locEndPos="1" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="9e73e060-7fc0-39ab-a6eb-bc70f725d371" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ad9ffe7-c618-31ef-90cd-1cb8f930c090" locEndPos="1" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="2ba12c99-bbfb-3b29-9880-53cc1db2b3fd" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0dde7c1-92e9-3ee4-9857-e33af9fed546" locEndPos="2" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="f0b46740-c04d-3eea-a406-c6a6e0b1436b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f533acc1-e3dc-30e5-8b4d-ca690e057c63" locEndPos="2" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="174982c2-4ae4-3388-9e48-0d7a2531e2bb" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ebefaaa3-9908-3215-b8a2-e39da423c8d9" locEndPos="2" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="39d612c0-9a26-3478-94b7-4c29e0944a67" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a76d2b69-28ae-33bf-a20f-05b9a942f7c1" locEndPos="3" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="e8170f4e-05f1-3f5a-976b-19dcbcd85bcf" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="957634e2-c8b8-3263-87eb-5a51bab807f8" locEndPos="3" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="dfd02b58-6573-3679-9727-76f3fc8dc485" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5ab325a-e35f-3114-8397-9366a3bd61c1" locEndPos="3" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="1c2acdd3-226b-3caa-80c5-9c43d552e148" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12f5b2ea-e1b5-36d2-92c8-464cdfe9a604" locEndPos="4" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="5f243842-4a30-3079-9af8-214a1687abab" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d489e4d-87e4-3cbf-bcad-68a0baa6740b" locEndPos="4" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="5118faca-262f-386e-acf9-a31abc5e0ea1" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77f2d4b8-4937-36b7-bba7-7f8bf789f214" locEndPos="4" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="d2c07539-3a02-346b-9878-e71317fb7734" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce66433f-9810-3421-8b5f-d45b645366a8" locEndPos="5" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="ecd34ce5-d760-3ac6-bce3-1ac54eaf16e7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="11481eac-b03c-3040-a37e-94236ccc04d2" locEndPos="5" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="15a09ebd-73ef-3fae-975f-45b2c7fcba59" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64458766-08a4-3372-b97a-ed6d18f64db3" locEndPos="5" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="f584c1c2-1803-35ed-a885-979a57453c6c" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="053b086f-f980-3614-9aba-cdde52fcee31" locEndPos="6" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="17ab23db-26bd-3352-bf87-493e1fe56937" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5fdbfaf9-e36a-3562-b234-5cf97c33d0b7" locEndPos="6" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="339bb69b-af72-3715-a1a6-1e1a0e06fd46" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb66c26c-2625-38a2-91e4-fa7876b4bbba" locEndPos="6" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="37319a69-9685-3789-8d51-a8fdab55510a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8f5f656-1efa-340a-974b-7cb1cb9bee12" locEndPos="7" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="106752ec-babb-3add-82f0-de00723e4e28" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb9fbb84-5225-354b-8e11-63b264e3cec0" locEndPos="7" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="b825feff-1fcf-398f-b8d3-50cc1a5475e2" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d722712b-20f0-39a4-9801-a81972a59178" locEndPos="7" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="4b879bee-7d9b-3e71-9190-fbc7298cbfd3" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f989466-dfff-3cc8-ad04-17d35374c748" locEndPos="8" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="38c633d1-e3d9-3ac7-bdc7-bbc2074da4e1" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b533f9f6-3b39-3f03-afa9-20ace3748413" locEndPos="8" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="ddc3598c-3451-3ad0-a2a8-bc547f736234" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9b2b6c3-3494-3e8f-b3b1-116784df4a47" locEndPos="8" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="0bcd852e-ee10-3a1d-a5c8-8fb374ad2bd5" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d6483f33-c36a-3f19-9c2f-49023dfe3833" locEndPos="9" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="7437d972-259c-340d-bda0-eac947131221" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="106ff98b-3c7c-3670-9f54-95df9b11600a" locEndPos="9" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="e7062484-3293-32b3-9b35-7935b5af9769" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bba1647f-38de-34ef-90a9-46395b3670d3" locEndPos="9" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="717dfdca-a56a-3df9-9c18-2e8b6574c2b3" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2aa0e00b-deac-3b28-9f8d-7c06e27f4b09" locEndPos="10" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="f9ab0acb-2fee-37b7-8161-354a8abed09b" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a68eda8-1733-32a3-a242-3ca51be16cfd" locEndPos="10" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="2d0eb1eb-1416-3132-99fb-fe48fb43b3e9" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b94bf934-47c9-3638-851d-376e42f9be32" locEndPos="10" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="d294ae7c-8fe7-3b08-bd42-aa42b930cafe" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d58e1044-c8b4-3122-b3ce-ba9012511f9d" locEndPos="11" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="91a68ed3-455c-3e6d-853e-c03d096966b9" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8469165-d1e5-3db5-9bda-ecfac0fed030" locEndPos="11" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="dd39c1e0-23c3-3500-82ae-e926727c5898" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="80cabc39-4268-3e35-836c-cda8dd09c7a5" locEndPos="11" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="2ba2fc0f-e691-3d62-b542-505f9c46ee66" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eabaea83-16a1-3a53-bfe3-7186b5f7232e" locEndPos="12" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="09939e60-6217-3341-87d9-185713799392" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84c8c0ad-5d82-3a2d-a61e-2ba2b4f8072c" locEndPos="12" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="97" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="d92df9c8-f9c6-34a5-ba0a-69ae027e2179" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="138c4d65-0440-3851-bcd3-ff48de0ae194" locEndPos="12" locType="sr" hash="972801700" locEndLn="97" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="98" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="3367cd61-5f33-394c-9d9e-659ecb819fd0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac6884a4-e9d8-3ca4-9e9d-a2319c9d5bb8" locEndPos="1" locType="sr" hash="972801700" locEndLn="98" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="98" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="63c2a017-7e0c-3355-b7a5-b21b72c42da8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74621b9f-6d80-3803-bf06-fbbb94cb7307" locEndPos="1" locType="sr" hash="972801700" locEndLn="98" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="98" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="c68463b4-67dd-3d1a-88ba-b3ef4639c761" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b82f4bd6-fa82-3f36-b499-a299b78451d0" locEndPos="1" locType="sr" hash="972801700" locEndLn="98" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="98" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="fff3af34-5f11-37b8-9e88-e35ede168c26" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6154d09f-b65b-3439-9bdf-e6f7977b9245" locEndPos="2" locType="sr" hash="972801700" locEndLn="98" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="98" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="e7eb4db8-b5ef-32a7-a19c-b2e36e2a77a3" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="acdc459b-2f0c-3d43-851f-f4d9805dfee4" locEndPos="2" locType="sr" hash="972801700" locEndLn="98" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="98" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="a5ad54b0-5d76-361e-b339-da40e3eb7b46" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a731da9-477d-3fe2-a10f-520321c3f1cf" locEndPos="2" locType="sr" hash="972801700" locEndLn="98" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="98" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="5462a076-535c-336e-864a-a0d8017fbad2" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d31e24bb-85b0-3ceb-8b4b-cfec152f0f71" locEndPos="3" locType="sr" hash="972801700" locEndLn="98" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="98" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="7ca905be-a275-3e83-af68-ba0914b34de3" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e5f9d3a-5241-3739-a1f4-82511b8889e1" locEndPos="3" locType="sr" hash="972801700" locEndLn="98" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="98" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="99cb50d2-e597-38ea-95d3-cb01ef4d47e5" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="499e7d2e-7801-35b4-82b3-945fa6581cc8" locEndPos="3" locType="sr" hash="972801700" locEndLn="98" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="98" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="0af875b4-cf5b-3682-bf4a-3a09cd3f1198" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e15d201a-5a18-325a-bf47-fb0be8e425f2" locEndPos="4" locType="sr" hash="972801700" locEndLn="98" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="98" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="4f59af60-a57c-3921-a0f7-6e7c82ea6d84" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a29b07e0-03f0-3542-9ad1-76d42497a817" locEndPos="4" locType="sr" hash="972801700" locEndLn="98" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="98" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="062e6e60-ac17-3bd2-be9a-cde7c4df3c1d" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a8bb283-35f1-372c-a5dd-295c3a149fba" locEndPos="4" locType="sr" hash="972801700" locEndLn="98" goals="0,"/>
    <StdViol msg="The global function 'LeaveCriticalSection' is called without scope resolution operator '::'" ln="98" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="98" sev="5" auth="lyao" locRef="1" rule="CODSTA-CPP-23" lnHash="793595747" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="793595747" unbViolId="eaa9bd6b-1a6e-3496-b480-ff6d6750f2b8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ebe65249-77e5-3f60-af03-0250aaed10ee" locEndPos="5" locType="sr" hash="972801700" locEndLn="98" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="99" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="277172" rule.header="Tabs should be avoided" tool="c++test" lineHash="277172" unbViolId="394cf257-3a7e-35cc-b0cd-26c09205243f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21dd1b09-9c9f-3a6d-b202-983925cc37ae" locEndPos="1" locType="sr" hash="972801700" locEndLn="99" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="99" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="3e252ce6-aa92-3104-9106-45ea69451c6f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e982a960-42a9-386d-a0b2-eb871b483fb6" locEndPos="1" locType="sr" hash="972801700" locEndLn="99" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="99" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="cb8ccbd6-0312-3d25-a2a7-f46308e70fda" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9fe411ea-64f8-365d-b755-92625ed7ca74" locEndPos="1" locType="sr" hash="972801700" locEndLn="99" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="99" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="277172" rule.header="Tabs should be avoided" tool="c++test" lineHash="277172" unbViolId="afa5e577-412f-307c-a295-a484187b9ecf" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3392172-4f5a-38cd-85db-5f14e8542a05" locEndPos="2" locType="sr" hash="972801700" locEndLn="99" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="99" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="cbeff458-2526-3546-ab0c-bd0d332c91a8" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17550714-3619-3517-9cec-997c0e8f0726" locEndPos="2" locType="sr" hash="972801700" locEndLn="99" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="99" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="990f459d-06a2-338e-bf85-791a25abd99c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8835612-2747-38de-9087-329e5ea81748" locEndPos="2" locType="sr" hash="972801700" locEndLn="99" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="99" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="277172" rule.header="Tabs should be avoided" tool="c++test" lineHash="277172" unbViolId="2cef2c2c-cc55-3051-8f86-ad0342a44558" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4463f15-28ff-332d-8abb-518429d207a2" locEndPos="3" locType="sr" hash="972801700" locEndLn="99" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="99" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="48dd9470-4ba1-3002-beed-0e904c0fb8ea" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4d48fef-8b22-3b52-a290-06675c22c84c" locEndPos="3" locType="sr" hash="972801700" locEndLn="99" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="99" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="b8abe1cf-a8a2-301a-8152-bc2128abc9f5" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="892d1d13-c963-38f0-994e-70d3a0692e4e" locEndPos="3" locType="sr" hash="972801700" locEndLn="99" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="100" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="1234365944" rule.header="Tabs should be avoided" tool="c++test" lineHash="1234365944" unbViolId="6c4f5c27-bbb5-308f-baa6-0fd8b9f50a34" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6772180-e243-3d27-ba08-411e27c4cde1" locEndPos="1" locType="sr" hash="972801700" locEndLn="100" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="100" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="28caad2b-a319-3ea6-8fca-a91980fc18d4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd53ae97-7a5e-3b12-8c85-89d49f0fac48" locEndPos="1" locType="sr" hash="972801700" locEndLn="100" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="100" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="1d456624-43b0-30bb-abbd-1ec55b01a738" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce379b5d-08da-372c-a41d-f528c4be766c" locEndPos="1" locType="sr" hash="972801700" locEndLn="100" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="100" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="1234365944" rule.header="Tabs should be avoided" tool="c++test" lineHash="1234365944" unbViolId="72b6a5e2-4aa4-3eda-bcba-4a63034b3279" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0568ffe-88ad-3b8c-8254-07335a880d29" locEndPos="2" locType="sr" hash="972801700" locEndLn="100" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="100" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="9bd981e5-c30a-38d2-acd4-3337ff7f8ae6" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c9a52a3-2caa-302e-ade8-16fb780f2661" locEndPos="2" locType="sr" hash="972801700" locEndLn="100" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="100" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="6bc01e7b-cddd-351a-b413-41ec32f4d410" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b63e93e3-56b7-335f-a2b1-15db4c829c5e" locEndPos="2" locType="sr" hash="972801700" locEndLn="100" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="100" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="1234365944" rule.header="Tabs should be avoided" tool="c++test" lineHash="1234365944" unbViolId="9edb4a70-a878-3d5a-b566-e2c46c4fa0f8" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84551537-225d-3b54-8320-886e92b02191" locEndPos="3" locType="sr" hash="972801700" locEndLn="100" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="100" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="05575457-81cd-3b1b-8ad9-df15ec40ccae" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a27a8b1-6c42-321f-a9d3-86a4dc9dfb45" locEndPos="3" locType="sr" hash="972801700" locEndLn="100" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="100" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="8a0426c7-39fc-3841-ac98-1f41cca2277e" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a9a3f87-2305-36f8-b84e-89be25e4aa85" locEndPos="3" locType="sr" hash="972801700" locEndLn="100" goals="0,"/>
    <DupViol msg="Duplicated code: 'SLEEP(STEP);'" ln="100" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="100" sev="3" auth="lyao" locRef="1" rule="CDD-DUPC" lnHash="1234365944" rule.header="Avoid code duplication" tool="c++test" lineHash="1234365944" unbViolId="ac9a8961-b32e-34b4-a50b-7b26ed8c3b7a" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="575a4c42-19ba-3f78-a6fe-300b694f7ca0" locType="sr" locEndPos="15" urgent="true" hash="972801700" locEndLn="100" goals="1,">
      <ElDescList>
        <ElDesc lineHash="1234365944" ln="100" srcRngStartPos="3" srcRngEndPos="15" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="100" srcRngEndLn="100" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="[Line 100] Duplicated code in file 'DeadLock.cpp'" rngLn="100"/>
        <ElDesc lineHash="1234365944" ln="128" srcRngStartPos="3" srcRngEndPos="15" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="128" srcRngEndLn="128" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="[Line 128] Duplicated code in file 'DeadLock.cpp'" rngLn="128"/>
      </ElDescList>
    </DupViol>
    <StdViol msg="The global function 'Sleep' is called without scope resolution operator '::'" ln="100" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="100" sev="5" auth="lyao" locRef="1" rule="CODSTA-CPP-23" lnHash="1234365944" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="1234365944" unbViolId="abc651ed-48f1-336c-aa76-e543baadc9b5" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c8a4540-efb2-3930-a05e-080bf4bece59" locEndPos="4" locType="sr" hash="972801700" locEndLn="100" goals="0,"/>
    <StdViol msg="The type 'int' of function argument number '1' does not match declared type 'unsigned long'" ln="100" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="100" sev="3" auth="lyao" locRef="1" rule="PB-11" lnHash="1234365944" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="1234365944" unbViolId="59943bfc-ba97-3022-8095-9581f7b0bdac" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68e66ede-e07b-3d4b-8e2b-b14a50049760" locEndPos="4" locType="sr" hash="972801700" locEndLn="100" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used" ln="100" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="100" sev="2" auth="lyao" locRef="1" rule="MISRA2008-5_0_4_a" lnHash="1234365944" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="1234365944" unbViolId="6b2b2c77-273c-32c4-b816-339c8e27c433" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3160e522-4f19-38d6-8e81-15aeef5fa79d" locEndPos="10" locType="sr" hash="972801700" locEndLn="100" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used" ln="100" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="100" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M5_0_4-a" lnHash="1234365944" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="1234365944" unbViolId="241bce0d-095c-3f41-aa24-4b58987ff520" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4a74045-020a-3be5-9645-0038c79097ab" locEndPos="10" locType="sr" hash="972801700" locEndLn="100" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used" ln="100" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="100" sev="3" auth="lyao" locRef="1" rule="MISRA2004-10_1_a" lnHash="1234365944" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="1234365944" unbViolId="00df4b8c-ef6e-3238-8296-0c39e95d2309" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8622eb3e-6f7f-3109-ba3a-9c47c78994bc" locEndPos="10" locType="sr" hash="972801700" locEndLn="100" goals="0,"/>
    <StdViol msg="A 'U' suffix shall be applied to constant: 20" ln="100" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="100" sev="3" auth="lyao" locRef="1" rule="HICPP-4_2_1-a" lnHash="1234365944" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="1234365944" unbViolId="d1015840-9c3b-3cc0-89b3-e1bd0cd7de59" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="41bd9862-bd47-3069-9477-397e1f17ebbd" locEndPos="10" locType="sr" hash="972801700" locEndLn="100" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="101" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="101" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="9053" rule.header="Tabs should be avoided" tool="c++test" lineHash="9053" unbViolId="a71bf336-ea58-39f9-8190-0d33f16684bf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b74c2e3-72af-382f-aed1-7a5e79999fee" locEndPos="1" locType="sr" hash="972801700" locEndLn="101" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="101" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="101" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="84bb2162-e547-3780-b0ed-c539ce33abb4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6757f23c-d5cf-3195-b4df-03cc2345a950" locEndPos="1" locType="sr" hash="972801700" locEndLn="101" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="101" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="101" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="bec47f3f-1774-3ffc-8af5-e4b4ce5f8193" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a08e399-ce37-3b6d-8657-25ffcb3f1b48" locEndPos="1" locType="sr" hash="972801700" locEndLn="101" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="101" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="101" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="9053" rule.header="Tabs should be avoided" tool="c++test" lineHash="9053" unbViolId="77c1e325-a0a0-325b-bf32-865a4fc4181b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="410168cf-ad6f-3d70-818c-4e143e43c457" locEndPos="2" locType="sr" hash="972801700" locEndLn="101" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="101" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="101" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="e26bb64e-ca54-3e1d-9f17-64daf497defc" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70699338-fbd1-3eea-85ba-50ae09401cde" locEndPos="2" locType="sr" hash="972801700" locEndLn="101" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="101" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="101" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="13344668-5545-38cc-89e4-a15fad48c3cb" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fdf18073-2fca-30b3-bcf6-cf76cfac053e" locEndPos="2" locType="sr" hash="972801700" locEndLn="101" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="102" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="102" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1688062501" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1688062501" unbViolId="b8597144-0066-358f-9aa3-7afbf6df57c6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e7a187b8-6d17-3e43-89a5-ed658ef34ade" locEndPos="1" locType="sr" hash="972801700" locEndLn="102" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="102" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="102" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="2fbdc6e2-d489-3b7e-b972-e38d88401efb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="164ae654-bb2e-3f9f-9c56-1417cd91c258" locEndPos="1" locType="sr" hash="972801700" locEndLn="102" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="102" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="102" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="802cc356-1def-31c1-9004-c30fa765d8e9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="28a419fa-be93-3e59-b324-bc4feee76e2f" locEndPos="1" locType="sr" hash="972801700" locEndLn="102" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="102" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="102" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1688062501" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1688062501" unbViolId="1f974ea2-ec58-3c76-b31d-de356c810d83" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3780056-41c5-3d87-8f35-1d24a8acbbf9" locEndPos="2" locType="sr" hash="972801700" locEndLn="102" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="102" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="102" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="e4d2477a-415e-353c-8451-9b9fcaf0400a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c1598d13-842c-3621-bcf0-693f6978cb2f" locEndPos="2" locType="sr" hash="972801700" locEndLn="102" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="102" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="102" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="7dfd011c-b1a3-3a48-8e04-a6a7ffdbb862" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b282da71-a30b-3946-8148-3b662621d456" locEndPos="2" locType="sr" hash="972801700" locEndLn="102" goals="0,"/>
    <StdViol msg="'return' statement should be used with parenthesis" ln="102" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="102" sev="3" auth="lyao" locRef="1" rule="FORMAT-25_b" lnHash="-1688062501" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="-1688062501" unbViolId="9a3b3fb2-1edf-353c-a713-549147134415" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a81472b9-357f-33e3-8468-fe964bc40c41" locEndPos="3" locType="sr" hash="972801700" locEndLn="102" goals="0,"/>
    <DupViol msg="Duplicated code: 'return 0;'" ln="102" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="102" sev="3" auth="lyao" locRef="1" rule="CDD-DUPC" lnHash="-1688062501" rule.header="Avoid code duplication" tool="c++test" lineHash="-1688062501" unbViolId="baa37bae-bea1-384b-b5b5-6a7a3e8a1a7a" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="8e726684-21f2-36ed-b806-3437a6881aee" locType="sr" locEndPos="11" urgent="true" hash="972801700" locEndLn="102" goals="1,">
      <ElDescList>
        <ElDesc lineHash="-1688062501" ln="102" srcRngStartPos="2" srcRngEndPos="11" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="102" srcRngEndLn="102" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="[Line 102] Duplicated code in file 'DeadLock.cpp'" rngLn="102"/>
        <ElDesc lineHash="-1688062501" ln="130" srcRngStartPos="2" srcRngEndPos="11" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="130" srcRngEndLn="130" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="[Line 130] Duplicated code in file 'DeadLock.cpp'" rngLn="130"/>
        <ElDesc lineHash="1599597842" ln="13" srcRngStartPos="1" srcRngEndPos="10" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="13" srcRngEndLn="13" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="[Line 13] Duplicated code in file 'NullPointer.cpp'" rngLn="13"/>
        <ElDesc lineHash="-392957557" ln="19" srcRngStartPos="29" srcRngEndPos="38" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="19" srcRngEndLn="19" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="[Line 19] Duplicated code in file 'Shapes.hpp'" rngLn="19"/>
      </ElDescList>
    </DupViol>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function return statement shall not be used" ln="102" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="102" sev="2" auth="lyao" locRef="1" rule="MISRA2008-5_0_4_a" lnHash="-1688062501" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-1688062501" unbViolId="42ba142a-48ca-3ffb-aad2-cc5f504b9c1b" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26354a63-2968-3676-9c2a-f6d2f6fd2aec" locEndPos="3" locType="sr" hash="972801700" locEndLn="102" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function return statement shall not be used" ln="102" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="102" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M5_0_4-a" lnHash="-1688062501" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1688062501" unbViolId="1feaefcd-887d-319b-aae0-b629871d5b90" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="783ccfb0-27bd-3ba5-88ae-135c1bab61ca" locEndPos="3" locType="sr" hash="972801700" locEndLn="102" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function return statement shall not be used" ln="102" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="102" sev="3" auth="lyao" locRef="1" rule="MISRA2004-10_1_a" lnHash="-1688062501" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1688062501" unbViolId="3463664f-de9a-3048-a547-92cc1b18e7f8" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f637eb6-dd0a-3614-b2e6-40a1307eada5" locEndPos="3" locType="sr" hash="972801700" locEndLn="102" goals="0,"/>
    <StdViol msg="Function 'Physics_Thread' has declared return type 'unsigned long' but returns value of type 'int'" ln="102" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="102" sev="3" auth="lyao" locRef="1" rule="PB-05" lnHash="-1688062501" rule.header="Return value of a function must match declared return type" tool="c++test" lineHash="-1688062501" unbViolId="d661fe98-926b-3bc0-98b1-b16586682c4e" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a15f3f79-583f-3600-b483-cf40013e4575" locEndPos="3" locType="sr" hash="972801700" locEndLn="102" goals="0,"/>
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="102" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="102" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M2_13_3-a" lnHash="-1688062501" rule.header="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" tool="c++test" lineHash="-1688062501" unbViolId="6980d153-1e8d-3a3f-ab4b-17bb181c63ca" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f1b0c0d-afef-3d04-9a6b-37fd6fb597dc" locEndPos="10" locType="sr" hash="972801700" locEndLn="102" goals="0,"/>
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="102" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="102" sev="3" auth="lyao" locRef="1" rule="CODSTA-68" lnHash="-1688062501" rule.header="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" tool="c++test" lineHash="-1688062501" unbViolId="68043cc8-6779-3610-9e5b-d11e6c3bd15a" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="366dd719-a228-3390-9341-9a4da5c9eec5" locEndPos="10" locType="sr" hash="972801700" locEndLn="102" goals="0,"/>
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="102" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="102" sev="2" auth="lyao" locRef="1" rule="MISRA2008-2_13_3" lnHash="-1688062501" rule.header="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" tool="c++test" lineHash="-1688062501" unbViolId="213752f2-009d-3e58-b758-68927acfec10" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b237f7c-0e6d-310f-8e66-a1cfd259015d" locEndPos="10" locType="sr" hash="972801700" locEndLn="102" goals="0,"/>
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="102" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="102" sev="3" auth="lyao" locRef="1" rule="HICPP-4_2_1-a" lnHash="-1688062501" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-1688062501" unbViolId="5e26f5ae-8a21-3fd4-9f1e-9da2b105befc" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8e532daa-1a67-3f24-b434-4ae270e89e49" locEndPos="10" locType="sr" hash="972801700" locEndLn="102" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="103" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="103" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="404" rule.header="Tabs should be avoided" tool="c++test" lineHash="404" unbViolId="3af17150-df64-3989-8353-da816779545c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27c6a141-2b82-3c56-9deb-5b1a22405ccc" locEndPos="1" locType="sr" hash="972801700" locEndLn="103" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="103" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="103" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="32ce4084-9c2f-36af-8efd-5636210e11fe" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79c5042e-1314-336d-8c33-9c5b21b692c8" locEndPos="1" locType="sr" hash="972801700" locEndLn="103" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="103" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="103" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="c34a1fb9-cf79-3b60-b5de-15ed0786c4b1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="140a90c4-55af-3285-a382-b38d968ca534" locEndPos="1" locType="sr" hash="972801700" locEndLn="103" goals="0,"/>
    <FlowViol msg="Unreleased lock: changePositionMutex" ln="103" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" ruleSAFMsg="Point prior to which the lock is to be released" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="93" rule="BD-TRS-LOCK" FirstElSrcRngStartPos="0" lnHash="404" ruleSCSCMsg="Point where the lock is acquired" pkg="Physics" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" rule.header="Do not abandon unreleased locks" FirstElSrcRngStartln="92" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-751414771" lang="cpp" violId="d255a302-20f2-3cdd-a4a7-0edccf21a256" locEndPos="0" locEndLn="104" goals="0," locStartln="103" sev="1" locRef="1" tool="c++test" lineHash="404" unbViolId="de887ad1-310c-35af-b647-415d17d63340" locType="sr" hash="972801700" causeLocRef="1">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="-1229452372" ln="90" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="90" srcRngEndLn="91" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" ln="91" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="91" srcRngEndLn="92" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" ln="92" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="92" srcRngEndLn="93" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType=".C" rngLn="92">
          <Anns>
            <Ann msg="Point where the lock is acquired" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" ln="93" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="93" srcRngEndLn="94" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93">
          <ElDescList>
            <ElDesc lineHash="-1486716559" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="Point&amp; getPosition() { return _position; }" ElType="." rngLn="10"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="929435952" ln="94" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="94" srcRngEndLn="95" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94">
          <ElDescList>
            <ElDesc lineHash="931387847" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_x += vector._x;" ElType="." rngLn="15"/>
            <ElDesc lineHash="-1856027609" ln="16" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="16" srcRngEndLn="17" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_y += vector._y;" ElType="." rngLn="16"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1599411881" ln="95" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="95" srcRngEndLn="96" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="ring.contains(...)" ElType="." rngLn="95">
          <ElDescList>
            <ElDesc lineHash="538754804" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="getPosition()" ElType="." rngLn="29">
              <ElDescList>
                <ElDesc lineHash="-1486716559" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="Point&amp; getPosition() { return _position; }" ElType="." rngLn="10"/>
              </ElDescList>
            </ElDesc>
            <ElDesc lineHash="538754804" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="point.squareDistanceTo(...)" ElType="." rngLn="29">
              <ElDescList>
                <ElDesc lineHash="150478121" ln="21" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="21" srcRngEndLn="22" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="return ((_x - point._x) * (_x - point._x)) + ((_y - point._y) * (_y - point._y));" ElType="." rngLn="21"/>
              </ElDescList>
            </ElDesc>
            <ElDesc lineHash="538754804" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="return point.squareDistanceTo(getPosition()) &lt;= (_radius * _radius);" ElType="." rngLn="29"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1599411881" ln="95" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="95" srcRngEndLn="96" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="!E" rngLn="95" thrownTypes="const char *" throwingMethod="assertion">
          <ElDescList>
            <ElDesc lineHash="-600547524" ln="60" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="60" srcRngEndLn="61" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming true)" kind="condEval"/>
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1274881582" ln="61" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="61" srcRngEndLn="62" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="throw message;" ElType="!E" rngLn="61" thrownTypes="throwStatement" throwingMethod="">
              <Anns>
                <Ann msg="Throws an exception" kind="except"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Anns>
            <Ann msg="assertion() throws const char *" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="404" ln="103" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="103" srcRngEndLn="104" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="}" ElType=".P" rngLn="103">
          <Anns>
            <Ann msg="Point prior to which the lock is to be released" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Unreleased lock: changePositionMutex" ln="103" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" ruleSAFMsg="Point prior to which the lock is to be released" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="93" rule="CERT_C-CON01-a" FirstElSrcRngStartPos="0" lnHash="404" ruleSCSCMsg="Point where the lock is acquired" pkg="Physics" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" rule.header="Do not abandon unreleased locks" FirstElSrcRngStartln="92" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-299367023" lang="cpp" violId="e4b6ce34-e6d0-3e20-a0c9-be797966bdf5" locEndPos="0" locEndLn="104" goals="0," locStartln="103" sev="3" locRef="1" tool="c++test" lineHash="404" unbViolId="ceba493b-9c1f-35eb-a12a-c097256359c5" locType="sr" hash="972801700" causeLocRef="1">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="-1229452372" ln="90" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="90" srcRngEndLn="91" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" ln="91" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="91" srcRngEndLn="92" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" ln="92" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="92" srcRngEndLn="93" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType=".C" rngLn="92">
          <Anns>
            <Ann msg="Point where the lock is acquired" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" ln="93" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="93" srcRngEndLn="94" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93">
          <ElDescList>
            <ElDesc lineHash="-1486716559" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="Point&amp; getPosition() { return _position; }" ElType="." rngLn="10"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="929435952" ln="94" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="94" srcRngEndLn="95" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94">
          <ElDescList>
            <ElDesc lineHash="931387847" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_x += vector._x;" ElType="." rngLn="15"/>
            <ElDesc lineHash="-1856027609" ln="16" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="16" srcRngEndLn="17" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_y += vector._y;" ElType="." rngLn="16"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1599411881" ln="95" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="95" srcRngEndLn="96" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="ring.contains(...)" ElType="." rngLn="95">
          <ElDescList>
            <ElDesc lineHash="538754804" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="getPosition()" ElType="." rngLn="29">
              <ElDescList>
                <ElDesc lineHash="-1486716559" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="Point&amp; getPosition() { return _position; }" ElType="." rngLn="10"/>
              </ElDescList>
            </ElDesc>
            <ElDesc lineHash="538754804" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="point.squareDistanceTo(...)" ElType="." rngLn="29">
              <ElDescList>
                <ElDesc lineHash="150478121" ln="21" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="21" srcRngEndLn="22" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="return ((_x - point._x) * (_x - point._x)) + ((_y - point._y) * (_y - point._y));" ElType="." rngLn="21"/>
              </ElDescList>
            </ElDesc>
            <ElDesc lineHash="538754804" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="return point.squareDistanceTo(getPosition()) &lt;= (_radius * _radius);" ElType="." rngLn="29"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1599411881" ln="95" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="95" srcRngEndLn="96" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="!E" rngLn="95" thrownTypes="const char *" throwingMethod="assertion">
          <ElDescList>
            <ElDesc lineHash="-600547524" ln="60" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="60" srcRngEndLn="61" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming true)" kind="condEval"/>
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1274881582" ln="61" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="61" srcRngEndLn="62" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="throw message;" ElType="!E" rngLn="61" thrownTypes="throwStatement" throwingMethod="">
              <Anns>
                <Ann msg="Throws an exception" kind="except"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Anns>
            <Ann msg="assertion() throws const char *" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="404" ln="103" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="103" srcRngEndLn="104" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="}" ElType=".P" rngLn="103">
          <Anns>
            <Ann msg="Point prior to which the lock is to be released" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Unreleased lock: changePositionMutex" ln="103" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" ruleSAFMsg="Point prior to which the lock is to be released" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="93" rule="MISRA2012-DIR-4_13_d" FirstElSrcRngStartPos="0" lnHash="404" ruleSCSCMsg="Point where the lock is acquired" pkg="Physics" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" rule.header="Do not abandon unreleased locks" FirstElSrcRngStartln="92" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1112525785" lang="cpp" violId="3c9a2c36-79f4-349d-bf22-1a4529a085de" locEndPos="0" locEndLn="104" goals="0," locStartln="103" sev="4" locRef="1" tool="c++test" lineHash="404" unbViolId="49a80ce8-cd5c-3c34-bd92-836f8836a7a2" locType="sr" hash="972801700" causeLocRef="1">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="-1229452372" ln="90" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="90" srcRngEndLn="91" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" ln="91" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="91" srcRngEndLn="92" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" ln="92" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="92" srcRngEndLn="93" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType=".C" rngLn="92">
          <Anns>
            <Ann msg="Point where the lock is acquired" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" ln="93" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="93" srcRngEndLn="94" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93">
          <ElDescList>
            <ElDesc lineHash="-1486716559" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="Point&amp; getPosition() { return _position; }" ElType="." rngLn="10"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="929435952" ln="94" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="94" srcRngEndLn="95" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94">
          <ElDescList>
            <ElDesc lineHash="931387847" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_x += vector._x;" ElType="." rngLn="15"/>
            <ElDesc lineHash="-1856027609" ln="16" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="16" srcRngEndLn="17" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_y += vector._y;" ElType="." rngLn="16"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1599411881" ln="95" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="95" srcRngEndLn="96" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="ring.contains(...)" ElType="." rngLn="95">
          <ElDescList>
            <ElDesc lineHash="538754804" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="getPosition()" ElType="." rngLn="29">
              <ElDescList>
                <ElDesc lineHash="-1486716559" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="Point&amp; getPosition() { return _position; }" ElType="." rngLn="10"/>
              </ElDescList>
            </ElDesc>
            <ElDesc lineHash="538754804" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="point.squareDistanceTo(...)" ElType="." rngLn="29">
              <ElDescList>
                <ElDesc lineHash="150478121" ln="21" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="21" srcRngEndLn="22" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="return ((_x - point._x) * (_x - point._x)) + ((_y - point._y) * (_y - point._y));" ElType="." rngLn="21"/>
              </ElDescList>
            </ElDesc>
            <ElDesc lineHash="538754804" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="return point.squareDistanceTo(getPosition()) &lt;= (_radius * _radius);" ElType="." rngLn="29"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1599411881" ln="95" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="95" srcRngEndLn="96" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="!E" rngLn="95" thrownTypes="const char *" throwingMethod="assertion">
          <ElDescList>
            <ElDesc lineHash="-600547524" ln="60" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="60" srcRngEndLn="61" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming true)" kind="condEval"/>
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1274881582" ln="61" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="61" srcRngEndLn="62" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="throw message;" ElType="!E" rngLn="61" thrownTypes="throwStatement" throwingMethod="">
              <Anns>
                <Ann msg="Throws an exception" kind="except"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Anns>
            <Ann msg="assertion() throws const char *" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="404" ln="103" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="103" srcRngEndLn="104" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="}" ElType=".P" rngLn="103">
          <Anns>
            <Ann msg="Point prior to which the lock is to be released" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Unreleased lock: changePositionMutex" ln="103" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" ruleSAFMsg="Point prior to which the lock is to be released" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="93" rule="MISRAC2012-DIR_4_13-d" FirstElSrcRngStartPos="0" lnHash="404" ruleSCSCMsg="Point where the lock is acquired" pkg="Physics" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" rule.header="Do not abandon unreleased locks" FirstElSrcRngStartln="92" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1775516700" lang="cpp" violId="018530f8-0522-3df6-98a4-f5f88f359e5a" locEndPos="0" locEndLn="104" goals="0," locStartln="103" sev="4" locRef="1" tool="c++test" lineHash="404" unbViolId="a1512a8d-d374-3f50-8489-13a515cadd45" locType="sr" hash="972801700" causeLocRef="1">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="-1229452372" ln="90" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="90" srcRngEndLn="91" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" ln="91" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="91" srcRngEndLn="92" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" ln="92" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="92" srcRngEndLn="93" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType=".C" rngLn="92">
          <Anns>
            <Ann msg="Point where the lock is acquired" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" ln="93" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="93" srcRngEndLn="94" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93">
          <ElDescList>
            <ElDesc lineHash="-1486716559" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="Point&amp; getPosition() { return _position; }" ElType="." rngLn="10"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="929435952" ln="94" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="94" srcRngEndLn="95" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94">
          <ElDescList>
            <ElDesc lineHash="931387847" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_x += vector._x;" ElType="." rngLn="15"/>
            <ElDesc lineHash="-1856027609" ln="16" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="16" srcRngEndLn="17" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_y += vector._y;" ElType="." rngLn="16"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1599411881" ln="95" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="95" srcRngEndLn="96" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="ring.contains(...)" ElType="." rngLn="95">
          <ElDescList>
            <ElDesc lineHash="538754804" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="getPosition()" ElType="." rngLn="29">
              <ElDescList>
                <ElDesc lineHash="-1486716559" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="Point&amp; getPosition() { return _position; }" ElType="." rngLn="10"/>
              </ElDescList>
            </ElDesc>
            <ElDesc lineHash="538754804" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="point.squareDistanceTo(...)" ElType="." rngLn="29">
              <ElDescList>
                <ElDesc lineHash="150478121" ln="21" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="21" srcRngEndLn="22" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="return ((_x - point._x) * (_x - point._x)) + ((_y - point._y) * (_y - point._y));" ElType="." rngLn="21"/>
              </ElDescList>
            </ElDesc>
            <ElDesc lineHash="538754804" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="return point.squareDistanceTo(getPosition()) &lt;= (_radius * _radius);" ElType="." rngLn="29"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1599411881" ln="95" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="95" srcRngEndLn="96" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="!E" rngLn="95" thrownTypes="const char *" throwingMethod="assertion">
          <ElDescList>
            <ElDesc lineHash="-600547524" ln="60" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="60" srcRngEndLn="61" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming true)" kind="condEval"/>
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1274881582" ln="61" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="61" srcRngEndLn="62" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="throw message;" ElType="!E" rngLn="61" thrownTypes="throwStatement" throwingMethod="">
              <Anns>
                <Ann msg="Throws an exception" kind="except"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Anns>
            <Ann msg="assertion() throws const char *" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="404" ln="103" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="103" srcRngEndLn="104" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="}" ElType=".P" rngLn="103">
          <Anns>
            <Ann msg="Point prior to which the lock is to be released" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="108" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="108" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1765880527" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1765880527" unbViolId="1d73d56e-37e3-331a-824d-0611099f6438" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26acb41f-7d2e-3515-9fc8-7a74a74fb06b" locEndPos="1" locType="sr" hash="972801700" locEndLn="108" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="108" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="108" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1765880527" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1765880527" unbViolId="b72ac15c-4bb5-3a74-9935-ba322a7daa07" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0852aa6-70cf-3cff-b334-555d691d39c1" locEndPos="1" locType="sr" hash="972801700" locEndLn="108" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="108" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="108" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1765880527" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1765880527" unbViolId="985c41f0-a267-3889-baa3-8d0c0c08b950" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9546d8c0-4d5d-3b78-abc9-46d93e6b04c7" locEndPos="1" locType="sr" hash="972801700" locEndLn="108" goals="0,"/>
    <StdViol msg="The operator '*', used for 'currentCameraVelocity' declaration, should be directly connected with the type" ln="108" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="108" sev="3" auth="lyao" locRef="1" rule="JSF-062" lnHash="-1765880527" rule.header="The dereference operator '*' and the address-of operator '&amp;' will be directly connected with the type-specifier" tool="c++test" lineHash="-1765880527" unbViolId="fc954b18-c6ea-372d-a97b-53feeb23ed75" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1a66054-4347-3661-9dd6-b9e3a2ba30fb" locEndPos="8" locType="sr" hash="972801700" locEndLn="108" goals="0,"/>
    <StdViol msg="The operator '*', used for 'currentCameraVelocity' declaration, should be directly connected with the type" ln="108" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="108" sev="4" auth="lyao" locRef="1" rule="FORMAT-32" lnHash="-1765880527" rule.header="The dereference operator '*' and the address-of operator '&amp;' should be directly connected with the type" tool="c++test" lineHash="-1765880527" unbViolId="cf183f54-6511-3642-a2a9-d3db577422db" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fba93e1f-16b2-3875-bcd4-c3306b0c73ac" locEndPos="8" locType="sr" hash="972801700" locEndLn="108" goals="0,"/>
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="108" sev="4" auth="lyao" locRef="1" rule="OWASP2019-API9-e" lnHash="-1765880527" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1765880527" unbViolId="a305309c-ca4a-3871-a37f-182c6d2c7332" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="477323c5-ec50-342d-bda7-45d006c02bc2" locEndPos="9" locType="sr" hash="972801700" locEndLn="108" goals="0,"/>
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="108" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A3_3_1-a" lnHash="-1765880527" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1765880527" unbViolId="496bb9ff-e16f-32e6-bcff-34cd282932f6" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b4b017f-653e-3c25-a93b-9361b23edd1d" locEndPos="9" locType="sr" hash="972801700" locEndLn="108" goals="0,"/>
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="108" sev="4" auth="lyao" locRef="1" rule="JSF-137" lnHash="-1765880527" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-1765880527" unbViolId="eb0b55b2-2f71-327f-bb83-65e141ee50c0" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="698dfaa0-3856-334f-8bcd-bb433f14f2d6" locEndPos="9" locType="sr" hash="972801700" locEndLn="108" goals="0,"/>
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="108" sev="4" auth="lyao" locRef="1" rule="MISRA-023" lnHash="-1765880527" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1765880527" unbViolId="ee3e4da0-6721-38b6-b374-953c8b903b09" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8bf82d8-7818-3dd3-920b-64b2adb07708" locEndPos="9" locType="sr" hash="972801700" locEndLn="108" goals="0,"/>
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="108" sev="2" auth="lyao" locRef="1" rule="MISRA2008-3_3_1" lnHash="-1765880527" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1765880527" unbViolId="d6f7de63-d337-321f-9e90-bc6d5267630d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="93ed7f1b-4f7d-371d-9262-186dda61a846" locEndPos="9" locType="sr" hash="972801700" locEndLn="108" goals="0,"/>
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="108" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL15-a" lnHash="-1765880527" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1765880527" unbViolId="6655eccf-d6da-389f-9293-592693d2178a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d42bea64-fb02-3567-a5f3-9435a7ae2737" locEndPos="9" locType="sr" hash="972801700" locEndLn="108" goals="0,"/>
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="108" sev="4" auth="lyao" locRef="1" rule="MISRA2004-8_10" lnHash="-1765880527" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1765880527" unbViolId="f275c000-893e-3ffe-8a8d-25f8bdde09b7" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc5160b4-396a-34d2-a75c-a784860eca03" locEndPos="9" locType="sr" hash="972801700" locEndLn="108" goals="0,"/>
    <StdViol msg="The name 'currentCameraVelocity' should be composed only of lowercase letters" ln="108" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="108" sev="3" auth="lyao" locRef="1" rule="JSF-051" lnHash="-1765880527" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1765880527" unbViolId="73331a0f-0f1d-32fd-86c8-8cc643087635" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d91f45d4-2618-3ad4-999e-d587adafff95" locEndPos="9" locType="sr" hash="972801700" locEndLn="108" goals="0,"/>
    <StdViol msg="The name 'currentCameraVelocity' should be composed only of lowercase letters" ln="108" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="108" sev="3" auth="lyao" locRef="1" rule="NAMING-44" lnHash="-1765880527" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1765880527" unbViolId="f9dcd10c-9369-3bbe-80da-d7ba29400cb3" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f922a03-62a2-3998-8de5-11abe03a2243" locEndPos="9" locType="sr" hash="972801700" locEndLn="108" goals="0,"/>
    <StdViol msg="The variable of pointer or array type is declared: currentCameraVelocity" ln="108" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="108" sev="3" auth="lyao" locRef="1" rule="CODSTA-94" lnHash="-1765880527" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1765880527" unbViolId="c284bec4-e758-39ad-b1a8-1868289954fc" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e319cc8-8c5a-3f2a-afc8-1b0a1ed6e873" locEndPos="9" locType="sr" hash="972801700" locEndLn="108" goals="0,"/>
    <StdViol msg="The variable of pointer type is declared: currentCameraVelocity" ln="108" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="108" sev="3" auth="lyao" locRef="1" rule="CODSTA-95" lnHash="-1765880527" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1765880527" unbViolId="f893a455-33f6-3639-9720-52f2591279f5" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="41b550e3-fded-32f5-a89a-19ce871bb5a5" locEndPos="9" locType="sr" hash="972801700" locEndLn="108" goals="0,"/>
    <StdViol msg="Pointer variable 'currentCameraVelocity' uninitialized when declared" ln="108" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="108" sev="2" auth="lyao" locRef="1" rule="INIT-04" lnHash="-1765880527" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1765880527" unbViolId="f0ebc559-ef4f-37be-9154-7706e9842744" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4811357-ca33-390c-b727-396c51553cad" locEndPos="9" locType="sr" hash="972801700" locEndLn="108" goals="0,"/>
    <StdViol msg="Do not define the 'currentCameraVelocity' global variable" ln="108" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="108" sev="3" auth="lyao" locRef="1" rule="JSF-207" lnHash="-1765880527" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="-1765880527" unbViolId="d0573299-4768-31d0-9441-4b2ccaf35d4f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a11fb191-8be3-3c72-b17a-33ef26f8dd68" locEndPos="9" locType="sr" hash="972801700" locEndLn="108" goals="0,"/>
    <StdViol msg="Do not define the 'currentCameraVelocity' global variable" ln="108" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="108" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-82" lnHash="-1765880527" rule.header="Global variables and static data members should not be used" tool="c++test" lineHash="-1765880527" unbViolId="b7bb310a-3eaa-3324-baaa-f7aac5d689d8" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="051d0337-6403-38fb-9ef0-44be56072cf5" locEndPos="9" locType="sr" hash="972801700" locEndLn="108" goals="0,"/>
    <StdViol msg="The 'currentCameraVelocity' variable should be commented" ln="108" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="108" sev="3" auth="lyao" locRef="1" rule="JSF-132_a" lnHash="-1765880527" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1765880527" unbViolId="4dd04ace-0ab0-3e38-9165-0f80ce476041" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ddb9c92-53e1-301f-a195-db285b568d68" locEndPos="9" locType="sr" hash="972801700" locEndLn="108" goals="0,"/>
    <StdViol msg="The 'currentCameraVelocity' variable should be commented" ln="108" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="108" sev="3" auth="lyao" locRef="1" rule="COMMENT-05" lnHash="-1765880527" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1765880527" unbViolId="71514378-e952-3195-8480-c71081a9d22c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4c60ffa-fbe6-30cd-9b7b-8e2e53ef6d69" locEndPos="9" locType="sr" hash="972801700" locEndLn="108" goals="0,"/>
    <StdViol msg="Use of variable &quot;currentCameraVelocity&quot; with static storage duration is not allowed" ln="108" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="108" sev="3" auth="lyao" locRef="1" rule="HICPP-3_3_1-a" lnHash="-1765880527" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="-1765880527" unbViolId="3f672341-fac6-3b62-8535-e23c7f047536" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43cf6310-35ea-336c-af1e-b79c4d0489ab" locEndPos="9" locType="sr" hash="972801700" locEndLn="108" goals="0,"/>
    <StdViol msg="Global variable 'currentCameraVelocity' is declared" ln="108" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="108" sev="5" auth="lyao" locRef="1" rule="MISRA-022" lnHash="-1765880527" rule.header="Declare objects at function scope" tool="c++test" lineHash="-1765880527" unbViolId="ed1cefa2-e321-3df4-bf47-d905f5a50aa0" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed913674-17cf-37c1-b284-b36a4b44658e" locEndPos="9" locType="sr" hash="972801700" locEndLn="108" goals="0,"/>
    <StdViol msg="Naming convention not followed: currentCameraVelocity" ln="108" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="108" sev="3" auth="lyao" locRef="1" rule="NAMING-18" lnHash="-1765880527" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="-1765880527" unbViolId="e84c8023-7eca-3e27-805b-afcf91cf1130" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="418e9ff1-f68e-3432-bc92-22d0edc93789" locEndPos="9" locType="sr" hash="972801700" locEndLn="108" goals="0,"/>
    <StdViol msg="Naming convention not followed: currentCameraVelocity" ln="108" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="108" sev="3" auth="lyao" locRef="1" rule="NAMING-22" lnHash="-1765880527" rule.header="Prefix a variable type 'pointer' with a 'p' character" tool="c++test" lineHash="-1765880527" unbViolId="b029dae2-bdcd-394a-9bdf-cf4a53f067d2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1288bbe9-b83a-3d52-9e30-ab553e9d8dda" locEndPos="9" locType="sr" hash="972801700" locEndLn="108" goals="0,"/>
    <StdViol msg="The 'currentCameraVelocity' identifier should have the 'p' prefix" ln="108" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="108" sev="3" auth="lyao" locRef="1" rule="NAMING-HN-34" lnHash="-1765880527" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="-1765880527" unbViolId="0319d149-a339-36c4-b753-fcbd008be8da" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="860f963f-4ec3-3206-9f32-20bced6aa733" locEndPos="9" locType="sr" hash="972801700" locEndLn="108" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="2003669405" rule.header="Tabs should be avoided" tool="c++test" lineHash="2003669405" unbViolId="6a4503e0-a668-3d34-a7f0-6512deed405f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e729715-ed81-3144-92d6-42f5a79549af" locEndPos="1" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="2003669405" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="2003669405" unbViolId="4bf4982c-149c-34fa-94df-455c882127de" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2528e2ba-0d91-3e56-9495-345ee98540ed" locEndPos="1" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="2003669405" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="2003669405" unbViolId="ece9cdf4-e810-3e6d-81a4-728430b710da" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e205903a-8fd2-30a9-8890-e109c0d72427" locEndPos="1" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="The definition of the 'draw' function is not preceded by a comment" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="3" auth="lyao" locRef="1" rule="COMMENT-04" lnHash="2003669405" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="2003669405" unbViolId="13b756bc-b869-3462-9b5d-f45b0324c473" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83cf5581-829c-3b45-a904-b9112a8bb72b" locEndPos="7" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="The definition of the 'draw' function is not preceded by a comment" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="4" auth="lyao" locRef="1" rule="JSF-134" lnHash="2003669405" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="2003669405" unbViolId="dfb07d94-79ef-3e9d-801f-26353fecb697" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba3ac66a-4e63-3769-aec0-e60a7656caa0" locEndPos="7" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="4" auth="lyao" locRef="1" rule="OWASP2019-API9-e" lnHash="2003669405" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2003669405" unbViolId="9e2dc2f5-dcc8-3955-bfb4-877493e6fb62" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="46359e9b-067b-36ff-97bf-223edd7decd8" locEndPos="7" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A3_3_1-a" lnHash="2003669405" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2003669405" unbViolId="2fd2a087-cbb3-3b9a-bb76-7eb1377ae9e1" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5becaac-8fbb-3f4c-8a5a-5a669816fdb1" locEndPos="7" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="4" auth="lyao" locRef="1" rule="JSF-137" lnHash="2003669405" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="2003669405" unbViolId="dd401143-025d-3597-b160-83643a4b6262" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aec5fe00-a6c4-39d8-ac6e-1991d7b338e5" locEndPos="7" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="4" auth="lyao" locRef="1" rule="MISRA-023" lnHash="2003669405" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2003669405" unbViolId="51e4df53-6ad1-3505-bd61-3ce3723b6e8c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2fa5cea4-5d72-3fda-8239-fb534b7e4a39" locEndPos="7" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="2" auth="lyao" locRef="1" rule="MISRA2008-3_3_1" lnHash="2003669405" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2003669405" unbViolId="691e0e0f-8e9e-3249-814a-d97720418ed1" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="195beed3-00ad-372f-afd1-0b15edf26016" locEndPos="7" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL15-a" lnHash="2003669405" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2003669405" unbViolId="57d40573-5d82-3f79-b2ef-d49e9067cbec" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e64b29a9-1559-35a2-ab12-a4a25be3b8e5" locEndPos="7" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="4" auth="lyao" locRef="1" rule="MISRA2004-8_10" lnHash="2003669405" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2003669405" unbViolId="b2b403fa-2f06-3f57-bf15-96d4449b5b98" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b258cc29-7576-3f1e-abe7-edbc4966504d" locEndPos="7" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="The 'draw' function should be preceded by a comment that contains the '@brief' tag" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="3" auth="lyao" locRef="1" rule="COMMENT-14" lnHash="2003669405" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="2003669405" unbViolId="83a091de-aff5-3102-82ea-e9325014dd96" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e910ba6-22a4-359f-9a45-6765016acecb" locEndPos="7" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="The 'draw' function should be preceded by a comment that contains the '@brief' tag" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A2_7_3-a" lnHash="2003669405" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="2003669405" unbViolId="d5f1d001-c7f2-3124-86ef-73e6b07a68e4" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce5c4e28-8272-3d78-8738-c6592c7c20b1" locEndPos="7" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="The 'object' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A2_7_3-b" lnHash="2003669405" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="2003669405" unbViolId="21d34fb3-4632-37eb-89b7-4c1bc4466d40" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9bdfc957-7ff2-3064-a3bf-ac2fa8a720bc" locEndPos="7" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="The 'object' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="3" auth="lyao" locRef="1" rule="COMMENT-14_b" lnHash="2003669405" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="2003669405" unbViolId="f4dd3692-2fac-388a-8c48-b53ef702b5ab" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b62ad062-3b60-331b-abae-acff665b9f64" locEndPos="7" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="The 'draw' function should be declared 'noexcept'" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A15_4_4-a" lnHash="2003669405" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="2003669405" unbViolId="0382361e-39c5-3e43-8c0c-57c50e7d3678" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="adaf5fc5-a74e-32a1-be33-6e8756f9304e" locEndPos="7" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="The 'draw' function should be declared 'noexcept'" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="3" auth="lyao" locRef="1" rule="CODSTA-MCPP-09" lnHash="2003669405" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="2003669405" unbViolId="77c014b5-47c6-3110-96a1-d9327beb583b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb60ebd9-97d0-3aab-848d-c3f9b1e51968" locEndPos="7" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="Return type is not placed in line before function 'draw'" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="3" auth="lyao" locRef="1" rule="FORMAT-28" lnHash="2003669405" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="2003669405" unbViolId="0f70538a-d788-351b-b39e-26a368a35206" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1cf4b8d7-e355-368a-99a9-900efdd89bb8" locEndPos="7" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="Function 'draw' has Cyclomatic Complexity value: 1" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="5" auth="lyao" locRef="1" rule="METRICS-29" lnHash="2003669405" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="2003669405" unbViolId="44024601-d988-3a97-b592-864821bf1d68" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7c6baae-30c8-3efe-84bf-19edd66320ff" locEndPos="7" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="Function 'draw' has Essential Complexity value: 1" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="5" auth="lyao" locRef="1" rule="METRICS-33" lnHash="2003669405" rule.header="Report Essential Complexity" tool="c++test" lineHash="2003669405" unbViolId="d55c4396-fa8e-384c-be7f-b158f28e9add" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48056e22-c635-390a-921b-5fbec8861308" locEndPos="7" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="Naming convention not followed: draw" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="3" auth="lyao" locRef="1" rule="NAMING-17" lnHash="2003669405" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="2003669405" unbViolId="4474368a-289d-310a-b31e-ba4e40f2f127" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77e45e42-e160-3b14-8cdb-74fbbaa8fb9b" locEndPos="7" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="Function 'draw' is empty" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="2" auth="lyao" locRef="1" rule="MISRA2008-0_1_8_b" lnHash="2003669405" rule.header="All functions with void return type shall have external side effect(s)" tool="c++test" lineHash="2003669405" unbViolId="d8f69f46-6d7c-3617-b529-5952a4ddecc1" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a36f370-bbf6-3e03-97f6-aeaca9e3fd8a" locEndPos="7" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="Function 'draw' is empty" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="4" auth="lyao" locRef="1" rule="OPT-32_b" lnHash="2003669405" rule.header="Functions with void return type shall not be empty" tool="c++test" lineHash="2003669405" unbViolId="04eefd91-471f-32ed-b6b8-a0f668ee2479" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="efaa0b93-a2ce-3e6c-931b-3365521afe9e" locEndPos="7" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="Function 'draw' is empty" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M0_1_8-b" lnHash="2003669405" rule.header="Functions with void return type shall not be empty" tool="c++test" lineHash="2003669405" unbViolId="16ac47f4-71c6-3024-b906-6c0c720dcc8f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97f67506-4e40-372c-9c56-597e8dc27567" locEndPos="7" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="The 'const' qualifier should be placed on the right hand side of the type" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="3" auth="lyao" locRef="1" rule="FORMAT-47_a" lnHash="2003669405" rule.header="Place CV-qualifiers on the right hand side of the type they apply to" tool="c++test" lineHash="2003669405" unbViolId="6be99ca4-0fa2-3e6a-a923-1c748aabbcd0" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90c3d37e-b7a4-3838-a817-36236587c1bb" locEndPos="12" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="The 'const' qualifier should be placed on the right hand side of the type" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="3" auth="lyao" locRef="1" rule="HICPP-7_1_4-a" lnHash="2003669405" rule.header="Place CV-qualifiers on the right hand side of the type they apply to" tool="c++test" lineHash="2003669405" unbViolId="eddce4b5-7a2f-3408-bad5-42604aabeaef" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6e9af39-977b-31b7-9e6d-1c7fbad30cc7" locEndPos="12" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="The operator '*', used for 'object' declaration, should be directly connected with the type" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="3" auth="lyao" locRef="1" rule="JSF-062" lnHash="2003669405" rule.header="The dereference operator '*' and the address-of operator '&amp;' will be directly connected with the type-specifier" tool="c++test" lineHash="2003669405" unbViolId="d33c0b2c-1ef3-3c3c-ba85-29c24146fe4d" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b34da634-1f0e-320e-98d9-02e9c9838f6b" locEndPos="24" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="The operator '*', used for 'object' declaration, should be directly connected with the type" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="4" auth="lyao" locRef="1" rule="FORMAT-32" lnHash="2003669405" rule.header="The dereference operator '*' and the address-of operator '&amp;' should be directly connected with the type" tool="c++test" lineHash="2003669405" unbViolId="26e662b1-879e-3c82-8866-da64f03c4c75" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c02ca95d-fb69-3975-aa24-5af239cd08f1" locEndPos="24" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="R-828: parameter &quot;object&quot; was never referenced" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="5" auth="lyao" locRef="1" rule="PARSER-REMARK" lnHash="2003669405" rule.header="Parser remark" tool="c++test" lineHash="2003669405" unbViolId="add96e96-2222-383b-b792-06de1694b51e" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e91c73a-872c-363b-a36f-ae2766111dc5" locEndPos="25" locType="sr" urgent="true" hash="972801700" locEndLn="110" goals="1,"/>
    <StdViol msg="Parameter 'object' is not used" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A0_1_4-a" lnHash="2003669405" rule.header="Eliminate unused parameters" tool="c++test" lineHash="2003669405" unbViolId="ff341377-8e64-3bb0-bfd0-31d6c5fee94b" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4b01ab7-d8a6-39d4-a602-ff2925cf007c" locEndPos="25" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="Parameter 'object' is not used" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="2" auth="lyao" locRef="1" rule="OPT-03" lnHash="2003669405" rule.header="Eliminate unused parameters" tool="c++test" lineHash="2003669405" unbViolId="2f08f743-70e6-3de8-9c48-0e4230d19ba0" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="573fe0c7-38d9-3770-830c-ade95421f960" locEndPos="25" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="Parameter 'object' is not used" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="3" auth="lyao" locRef="1" rule="OPT-31" lnHash="2003669405" rule.header="There shall be no unused parameters (named or unnamed) in non-virtual functions" tool="c++test" lineHash="2003669405" unbViolId="ce27380c-bfe0-3fc3-afb3-28d9e69f1cfb" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e13f2da4-a5e7-3a3c-8bc7-bfbb445ad0d5" locEndPos="25" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="Parameter 'object' is not used" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="2" auth="lyao" locRef="1" rule="MISRA2008-0_1_11" lnHash="2003669405" rule.header="There shall be no unused parameters (named or unnamed) in nonvirtual functions" tool="c++test" lineHash="2003669405" unbViolId="8252b9eb-0a73-36f1-9265-430bdbaf3fc6" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="968acc9d-44bb-3b87-baf0-c4ebc9ead996" locEndPos="25" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="The parameter of pointer or array type is declared: object" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="3" auth="lyao" locRef="1" rule="CODSTA-94" lnHash="2003669405" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="2003669405" unbViolId="b1f297a9-13cd-34cf-bcd3-b0fdd113981d" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d315130f-bb13-383d-97d9-458931cc1ba8" locEndPos="25" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="The parameter of pointer type is declared: object" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="3" auth="lyao" locRef="1" rule="CODSTA-95" lnHash="2003669405" rule.header="Do not declare pointer type" tool="c++test" lineHash="2003669405" unbViolId="4a46b4f2-d3c6-3fc8-a0a4-54d2fc2e7af6" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b64b0b5f-89b3-3560-a0f2-cb1f3ec91a79" locEndPos="25" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="The 'object' identifier should have the 'p' prefix" ln="110" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="110" sev="3" auth="lyao" locRef="1" rule="NAMING-HN-34" lnHash="2003669405" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="2003669405" unbViolId="30dc6e26-b756-32bd-94d7-140c38dd63e0" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7cf7037c-2495-398f-92cf-6a7d8afd222b" locEndPos="25" locType="sr" hash="972801700" locEndLn="110" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="111" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="111" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="402" rule.header="Tabs should be avoided" tool="c++test" lineHash="402" unbViolId="b864035c-e755-3c9a-aa04-238dde0a330b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6de25edd-93bf-3b95-8d12-2ee823c64c8f" locEndPos="1" locType="sr" hash="972801700" locEndLn="111" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="111" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="111" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="402" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="402" unbViolId="ebd6be38-e60c-332b-aab7-2e2f48b36194" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f738eaa-0c91-3249-a415-7f9b15f8d138" locEndPos="1" locType="sr" hash="972801700" locEndLn="111" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="111" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="111" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="402" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="402" unbViolId="6756e60d-3164-363e-a474-8caef449a00f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8328566-12f9-3aea-ab9f-a5933a71b6ce" locEndPos="1" locType="sr" hash="972801700" locEndLn="111" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="112" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="112" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="1506270258" rule.header="Tabs should be avoided" tool="c++test" lineHash="1506270258" unbViolId="a2c3988e-282b-3047-97ab-d4c46802c0e0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70926d1d-1bac-3e68-b8fc-a747fbd6fa78" locEndPos="1" locType="sr" hash="972801700" locEndLn="112" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="112" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="112" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="1506270258" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1506270258" unbViolId="907d3eaa-fdd2-32a2-8f70-83d77d45b785" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6501fe52-0e1e-3789-a9ba-6388796c2473" locEndPos="1" locType="sr" hash="972801700" locEndLn="112" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="112" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="112" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="1506270258" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1506270258" unbViolId="4b0b7d7c-da82-3357-b313-2f3406cf1a5d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c3f4294e-1aad-311f-8d49-2bcc8f3db595" locEndPos="1" locType="sr" hash="972801700" locEndLn="112" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="112" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="112" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="1506270258" rule.header="Tabs should be avoided" tool="c++test" lineHash="1506270258" unbViolId="254b515a-e253-3522-9364-1f0443bd1fab" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="039601ee-ff6c-3005-98b9-9cbb9e123aab" locEndPos="2" locType="sr" hash="972801700" locEndLn="112" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="112" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="112" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="1506270258" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1506270258" unbViolId="e249348a-8c9f-358f-bea5-5c617db0af39" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6d3a0bce-b4e9-31cf-99f6-23534b3e7b16" locEndPos="2" locType="sr" hash="972801700" locEndLn="112" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="112" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="112" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="1506270258" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1506270258" unbViolId="9822049b-8bcb-37ad-956a-753cb9ba2d35" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21a47277-3447-3e0e-8318-8e922edaf473" locEndPos="2" locType="sr" hash="972801700" locEndLn="112" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="113" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="113" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="404" rule.header="Tabs should be avoided" tool="c++test" lineHash="404" unbViolId="59dece52-47ab-3c2d-9c1d-b4e8b7a37068" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb8ec160-03b1-3bcb-9625-b4dfbd2ea74f" locEndPos="1" locType="sr" hash="972801700" locEndLn="113" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="113" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="113" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="d4e19670-8d4e-3b5f-a1ed-bf20d504cbcf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db065c9e-3398-3fc7-a766-1d196603408a" locEndPos="1" locType="sr" hash="972801700" locEndLn="113" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="113" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="113" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="ee348000-d909-3f19-9e84-fa854f63f23c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe79b479-bc0f-3142-84de-c1e4922cc511" locEndPos="1" locType="sr" hash="972801700" locEndLn="113" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="115" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="115" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1747693045" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1747693045" unbViolId="7d46c0e4-c311-331c-ae15-3508a20598b7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="575463ea-1559-36ea-9900-5b3c6bdde6d3" locEndPos="1" locType="sr" hash="972801700" locEndLn="115" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="115" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="115" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1747693045" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1747693045" unbViolId="986fec26-b60a-3bf8-94f4-1a2931977ecd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02640428-596b-3d78-9d0d-5bd559be49d0" locEndPos="1" locType="sr" hash="972801700" locEndLn="115" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="115" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="115" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1747693045" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1747693045" unbViolId="65604284-1e96-3689-aa15-c63df58d1774" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="298a0f96-adce-3d05-910b-3899cf3bb6f5" locEndPos="1" locType="sr" hash="972801700" locEndLn="115" goals="0,"/>
    <StdViol msg="The definition of the 'Render_Thread' function is not preceded by a comment" ln="115" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="115" sev="3" auth="lyao" locRef="1" rule="COMMENT-04" lnHash="-1747693045" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1747693045" unbViolId="abd3c4f4-9438-395c-b279-a008c3238c9e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b78a908-4733-363e-8ce2-8194828dba2e" locEndPos="8" locType="sr" hash="972801700" locEndLn="115" goals="0,"/>
    <StdViol msg="The definition of the 'Render_Thread' function is not preceded by a comment" ln="115" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="115" sev="4" auth="lyao" locRef="1" rule="JSF-134" lnHash="-1747693045" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1747693045" unbViolId="33bcbde5-4156-3654-bfb8-cd456774441d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb1e23c8-52bc-353a-9f3f-ee8c41c33762" locEndPos="8" locType="sr" hash="972801700" locEndLn="115" goals="0,"/>
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="115" sev="4" auth="lyao" locRef="1" rule="OWASP2019-API9-e" lnHash="-1747693045" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1747693045" unbViolId="b17ebe4b-a569-3e3e-bb92-f223d2e49c54" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87561af7-f95a-39c7-8eb4-09cfde3f24c6" locEndPos="8" locType="sr" hash="972801700" locEndLn="115" goals="0,"/>
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="115" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A3_3_1-a" lnHash="-1747693045" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1747693045" unbViolId="d287777f-490d-3796-8e09-909c043655e4" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f42c8e17-beb3-39e3-9a94-408a7cbe79a9" locEndPos="8" locType="sr" hash="972801700" locEndLn="115" goals="0,"/>
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="115" sev="4" auth="lyao" locRef="1" rule="JSF-137" lnHash="-1747693045" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-1747693045" unbViolId="5a45e81a-4124-31f4-9b53-98a61aa39f3e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae50a971-87f8-37af-865b-bab14aaf3e44" locEndPos="8" locType="sr" hash="972801700" locEndLn="115" goals="0,"/>
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="115" sev="4" auth="lyao" locRef="1" rule="MISRA-023" lnHash="-1747693045" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1747693045" unbViolId="bd33f80e-24de-3ce4-a9ee-0d39ffdc02bd" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85c26fb3-5a8f-349a-b419-a20dd1273425" locEndPos="8" locType="sr" hash="972801700" locEndLn="115" goals="0,"/>
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="115" sev="2" auth="lyao" locRef="1" rule="MISRA2008-3_3_1" lnHash="-1747693045" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1747693045" unbViolId="11630666-b96d-3764-a4b4-e583d82c842d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c77f054-551c-3f99-93ad-4cd4be694993" locEndPos="8" locType="sr" hash="972801700" locEndLn="115" goals="0,"/>
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="115" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL15-a" lnHash="-1747693045" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1747693045" unbViolId="e5899e05-402d-34b6-b931-ecfa41f7c510" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="520f17e9-61d3-3ab1-bd28-972535638811" locEndPos="8" locType="sr" hash="972801700" locEndLn="115" goals="0,"/>
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="115" sev="4" auth="lyao" locRef="1" rule="MISRA2004-8_10" lnHash="-1747693045" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1747693045" unbViolId="c591d66d-3d87-3f33-9839-6ff21001a725" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e4d21f9-88c3-3add-8f10-dfe9c7f1bdd8" locEndPos="8" locType="sr" hash="972801700" locEndLn="115" goals="0,"/>
    <StdViol msg="The name 'Render_Thread' should be composed only of lowercase letters" ln="115" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="115" sev="3" auth="lyao" locRef="1" rule="JSF-051" lnHash="-1747693045" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1747693045" unbViolId="dd3d6b88-cc36-3e57-9b46-e3d46d810598" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af354d25-bcc3-3489-8037-9e4f1c3e1051" locEndPos="8" locType="sr" hash="972801700" locEndLn="115" goals="0,"/>
    <StdViol msg="The name 'Render_Thread' should be composed only of lowercase letters" ln="115" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="115" sev="3" auth="lyao" locRef="1" rule="NAMING-44" lnHash="-1747693045" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1747693045" unbViolId="21bbf801-fdb3-3ec7-bcdf-ca1427f6567c" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55c2985f-610c-3cd6-9e29-a1da05b59ce6" locEndPos="8" locType="sr" hash="972801700" locEndLn="115" goals="0,"/>
    <StdViol msg="The 'Render_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="115" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="115" sev="3" auth="lyao" locRef="1" rule="COMMENT-14" lnHash="-1747693045" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1747693045" unbViolId="e4b4d26b-b215-32ca-aeb4-8401f133cd98" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d433f2a7-8ec3-394f-aa70-25387f1ce130" locEndPos="8" locType="sr" hash="972801700" locEndLn="115" goals="0,"/>
    <StdViol msg="The 'Render_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="115" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="115" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A2_7_3-a" lnHash="-1747693045" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1747693045" unbViolId="0db87e8d-6e52-3433-80e0-75eab914562c" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a43f53d6-4488-34dd-9628-14648c6caf1f" locEndPos="8" locType="sr" hash="972801700" locEndLn="115" goals="0,"/>
    <StdViol msg="The 'Render_Thread' function should be preceded by a comment that contains the '@return' tag" ln="115" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="115" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A2_7_3-b" lnHash="-1747693045" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1747693045" unbViolId="98f9da25-9ddf-39fa-bf89-c7c5b12adb11" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b986c59c-a070-3e08-8a95-d35d64d6b095" locEndPos="8" locType="sr" hash="972801700" locEndLn="115" goals="0,"/>
    <StdViol msg="The 'Render_Thread' function should be preceded by a comment that contains the '@return' tag" ln="115" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="115" sev="3" auth="lyao" locRef="1" rule="COMMENT-14_b" lnHash="-1747693045" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1747693045" unbViolId="e1bfdeab-1eda-399f-b985-cfd123a44b53" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="25722b3c-ed91-36f3-8318-e2bc11b28605" locEndPos="8" locType="sr" hash="972801700" locEndLn="115" goals="0,"/>
    <StdViol msg="Function 'Render_Thread' has Cyclomatic Complexity value: 3" ln="115" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="115" sev="5" auth="lyao" locRef="1" rule="METRICS-29" lnHash="-1747693045" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-1747693045" unbViolId="d1e465ff-73b5-3867-bad0-2a056b72a677" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="14dc1e6f-dc00-341b-b7ba-0b1a19a9b4d3" locEndPos="8" locType="sr" hash="972801700" locEndLn="115" goals="0,"/>
    <StdViol msg="Function 'Render_Thread' has Essential Complexity value: 1" ln="115" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="115" sev="5" auth="lyao" locRef="1" rule="METRICS-33" lnHash="-1747693045" rule.header="Report Essential Complexity" tool="c++test" lineHash="-1747693045" unbViolId="54d4205d-d493-3e1f-a1db-e5d54319823a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10d5b0eb-6913-3374-bd59-977970550e9d" locEndPos="8" locType="sr" hash="972801700" locEndLn="115" goals="0,"/>
    <StdViol msg="The incorrect global function name Render_Thread was found" ln="115" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="115" sev="3" auth="lyao" locRef="1" rule="NAMING-34" lnHash="-1747693045" rule.header="Global function names should start with lowercase" tool="c++test" lineHash="-1747693045" unbViolId="385b01d9-f95f-3a98-b9a0-ea8659a63928" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e6c88fb-4242-3aa6-886f-98b7b238036d" locEndPos="8" locType="sr" hash="972801700" locEndLn="115" goals="0,"/>
    <StdViol msg="The parameter of pointer or array type is declared" ln="115" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="115" sev="3" auth="lyao" locRef="1" rule="CODSTA-94" lnHash="-1747693045" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1747693045" unbViolId="04b4ad95-4bbe-3d6c-bc83-486e4756d97b" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b9d4089-147d-363b-b46e-66c334a6422e" locEndPos="22" locType="sr" hash="972801700" locEndLn="115" goals="0,"/>
    <StdViol msg="The parameter of pointer type is declared" ln="115" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="115" sev="3" auth="lyao" locRef="1" rule="CODSTA-95" lnHash="-1747693045" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1747693045" unbViolId="b7babb69-c21a-3930-9fa5-d7e27606ac8d" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="def8713e-9e3e-3bf2-8450-cba5053ab2cf" locEndPos="22" locType="sr" hash="972801700" locEndLn="115" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="116" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="116" sev="3" auth="lyao" locRef="1" rule="METRICS-19" lnHash="402" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="402" unbViolId="f802b748-6813-3f61-a5d9-e1a33a5b89f1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4db48b91-f47e-32ad-b9cc-ad29c03c33f2" locEndPos="1" locType="sr" hash="972801700" locEndLn="116" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="116" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="116" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="402" rule.header="Tabs should be avoided" tool="c++test" lineHash="402" unbViolId="c675f57a-5c34-3d8f-b1ea-e522c1b9f35a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6719e529-07d5-3b8e-b81e-3ffef7d125ef" locEndPos="1" locType="sr" hash="972801700" locEndLn="116" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="116" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="116" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="402" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="402" unbViolId="0da41528-7633-3d2b-8c88-4f777200b0b5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="512a56e0-5030-33af-b0a9-fff4fb2bfd07" locEndPos="1" locType="sr" hash="972801700" locEndLn="116" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="116" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="116" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="402" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="402" unbViolId="b388aacd-ae47-3c71-988a-18285e229025" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="223537fc-b27a-3f1f-b3d2-0f0f52b9e1e4" locEndPos="1" locType="sr" hash="972801700" locEndLn="116" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="117" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="117" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1229452372" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1229452372" unbViolId="7a1ef04d-ed00-357c-a08f-4b1f47b43cab" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5080e3c8-ba5e-315e-8e76-556c67fd01f2" locEndPos="1" locType="sr" hash="972801700" locEndLn="117" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="117" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="117" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="e3501394-8a05-3122-8cd5-38f7943c1100" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6726ba12-932d-34b3-8af8-fa0a18999f23" locEndPos="1" locType="sr" hash="972801700" locEndLn="117" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="117" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="117" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="3547cdbd-1e43-3791-ab4f-7c57f2cd784b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="159c5e00-f459-3b52-a714-73f95f1e0abb" locEndPos="1" locType="sr" hash="972801700" locEndLn="117" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="117" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="117" sev="3" auth="lyao" locRef="1" rule="JSF-061" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1229452372" unbViolId="fb1fa887-8cbe-36e4-892f-793b18d4a281" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3a81e24-cb9f-3ec1-ab08-bbee3b989e83" locEndPos="1" locType="sr" hash="972801700" locEndLn="117" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="117" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="117" sev="3" auth="lyao" locRef="1" rule="FORMAT-42" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1229452372" unbViolId="51f11b6d-68c0-333c-b00b-999f80c9b1ef" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dcf5c420-9e7f-3eb8-8d79-8f3750ce6952" locEndPos="1" locType="sr" hash="972801700" locEndLn="117" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="117" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="117" sev="3" auth="lyao" locRef="1" rule="JSF-060_a" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1229452372" unbViolId="bf53dec5-76b2-36dc-abe5-4651bdeebee3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc9a192a-af05-3a2f-a1a9-37a352b8a199" locEndPos="1" locType="sr" hash="972801700" locEndLn="117" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="117" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="117" sev="3" auth="lyao" locRef="1" rule="FORMAT-43" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1229452372" unbViolId="d9bbf036-1619-32e6-9805-1d110f929ca3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba52dc6a-d24f-3935-ba4e-8dbe808c4540" locEndPos="1" locType="sr" hash="972801700" locEndLn="117" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="117" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="117" sev="3" auth="lyao" locRef="1" rule="JSF-060_b" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1229452372" unbViolId="90277fea-faf3-3831-921a-19464506506c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2371b36a-7eb0-3023-9858-67b006b44453" locEndPos="1" locType="sr" hash="972801700" locEndLn="117" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="117" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="117" sev="3" auth="lyao" locRef="1" rule="FORMAT-02" lnHash="-1229452372" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-1229452372" unbViolId="3d29c05b-7d3a-317e-a71d-139904ae0748" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cbb9dd45-70c6-3bae-87f7-7516a4d339da" locEndPos="1" locType="sr" hash="972801700" locEndLn="117" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="117" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="117" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1229452372" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1229452372" unbViolId="b1f8c254-c0f3-3b52-b2de-794d35378443" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17af86d4-25f9-3c8f-99f4-a0d052c8e846" locEndPos="2" locType="sr" hash="972801700" locEndLn="117" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="117" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="117" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="c61f777b-9e50-3cee-b88f-5f20d48e8b01" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f4afc77-04b8-3930-83bd-6a6cc3060783" locEndPos="2" locType="sr" hash="972801700" locEndLn="117" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="117" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="117" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="9b02c4a6-2694-3b6d-8a42-8ac53af61752" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6eab38da-895a-38e2-bc42-e8f750053e12" locEndPos="2" locType="sr" hash="972801700" locEndLn="117" goals="0,"/>
    <StdViol msg="A loop does not have a fixed upper nor lower bound" ln="117" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="117" sev="3" auth="lyao" locRef="1" rule="CODSTA-83" lnHash="-1229452372" rule.header="All loops must have a fixed upper or lower bound" tool="c++test" lineHash="-1229452372" unbViolId="913cadee-accd-32c8-8acc-8fd9270ff5ab" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1bced2a3-91f7-3a8c-b920-6daae98a2116" locEndPos="3" locType="sr" hash="972801700" locEndLn="117" goals="0,"/>
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="117" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="117" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M5_3_1-a" lnHash="-1229452372" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-1229452372" unbViolId="b565f8e4-4e18-3b94-a07e-d4c3f7c4f14c" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="efa8e147-1b8d-3b5b-be2b-9dc71a4a74bb" locEndPos="10" locType="sr" hash="972801700" locEndLn="117" goals="0,"/>
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="117" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="117" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-67" lnHash="-1229452372" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-1229452372" unbViolId="25243af9-4a4d-36b5-ac6b-2c11e1ba974c" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be39ade1-cab4-31c1-944e-bc236f5d8d6e" locEndPos="10" locType="sr" hash="972801700" locEndLn="117" goals="0,"/>
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="117" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="117" sev="2" auth="lyao" locRef="1" rule="MISRA2008-5_3_1" lnHash="-1229452372" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-1229452372" unbViolId="a1f081af-d202-3304-8241-ba492958e6bd" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff98a644-2d67-3612-8adf-1ff359e1edae" locEndPos="10" locType="sr" hash="972801700" locEndLn="117" goals="0,"/>
    <StdViol msg="In 'Render_Thread' function use positive logic rather than negative logic whenever possible" ln="117" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="117" sev="5" auth="lyao" locRef="1" rule="CODSTA-46" lnHash="-1229452372" rule.header="Use positive logic rather than negative logic whenever practical" tool="c++test" lineHash="-1229452372" unbViolId="55147892-3e8f-3e1b-82b5-47dd6e35870d" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="972fe581-4c7d-3941-aef4-635df75bbdf7" locEndPos="10" locType="sr" hash="972801700" locEndLn="117" goals="0,"/>
    <StdViol msg="The operand of logical operator '!' is not 'effectively Boolean'" ln="117" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="117" sev="3" auth="lyao" locRef="1" rule="MISRA2004-12_6_a" lnHash="-1229452372" rule.header="The operands of logical operators (&amp;&amp;, || and !) should be effectively Boolean" tool="c++test" lineHash="-1229452372" unbViolId="a9b46b43-6a94-3bc6-bbc3-bfbae202e104" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5984f483-27e0-3765-a120-232554df6d25" locEndPos="10" locType="sr" hash="972801700" locEndLn="117" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="118" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-2061438629" rule.header="Tabs should be avoided" tool="c++test" lineHash="-2061438629" unbViolId="9b620a73-da78-3c61-a5fb-12677deb664b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="012d4b27-de17-3045-b408-a06eb4853f95" locEndPos="1" locType="sr" hash="972801700" locEndLn="118" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="118" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-2061438629" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2061438629" unbViolId="ba3ed2cb-4046-335d-b5b6-346a9dc1866d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c1c48b4f-d669-30ad-9f20-c5ed7c9aefab" locEndPos="1" locType="sr" hash="972801700" locEndLn="118" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="118" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-2061438629" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2061438629" unbViolId="cc894934-7596-3799-aa09-2c43d3704902" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76161f77-7f2e-3b15-b82d-44f1d71bcc0d" locEndPos="1" locType="sr" hash="972801700" locEndLn="118" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="118" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-2061438629" rule.header="Tabs should be avoided" tool="c++test" lineHash="-2061438629" unbViolId="0849576b-7e55-31aa-9419-9e9af50b01d5" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ab66d33-83ab-3e26-a9f6-3976823501b1" locEndPos="2" locType="sr" hash="972801700" locEndLn="118" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="118" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-2061438629" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2061438629" unbViolId="c469088f-1775-344f-8dcf-d25edcdeb98f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="123cf0ef-e114-3ae6-abf5-d922474b6ff6" locEndPos="2" locType="sr" hash="972801700" locEndLn="118" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="118" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-2061438629" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2061438629" unbViolId="48c102c5-2985-3e0a-a665-47f7ab05e5fe" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0c37fb0c-7137-346e-8156-7651db8600a9" locEndPos="2" locType="sr" hash="972801700" locEndLn="118" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="118" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-2061438629" rule.header="Tabs should be avoided" tool="c++test" lineHash="-2061438629" unbViolId="95d90ed4-0b47-3591-9197-0b22b68f1dfe" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96ab8c60-fd70-346e-9e12-6c16e8af11a2" locEndPos="3" locType="sr" hash="972801700" locEndLn="118" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="118" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-2061438629" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2061438629" unbViolId="f66317bb-ea08-3c74-993b-6571d543d3b0" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="765b494b-e710-3465-87d9-6a3752955f7f" locEndPos="3" locType="sr" hash="972801700" locEndLn="118" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="118" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-2061438629" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2061438629" unbViolId="5a38db33-996e-3f11-a080-75e96bc60ee1" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9672fc8-a899-3f8f-bb1b-482db09d453d" locEndPos="3" locType="sr" hash="972801700" locEndLn="118" goals="0,"/>
    <StdViol msg="The global function 'EnterCriticalSection' is called without scope resolution operator '::'" ln="118" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="118" sev="5" auth="lyao" locRef="1" rule="CODSTA-CPP-23" lnHash="-2061438629" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-2061438629" unbViolId="2e4a5519-3839-371c-80f5-4a09e57ad261" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91398e0d-88bf-3765-aee3-5a8df7e6b53e" locEndPos="4" locType="sr" hash="972801700" locEndLn="118" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="119" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1448027104" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1448027104" unbViolId="b8f17074-8168-3ed8-8e4b-4cf1668d752d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04b86ab7-8d15-381d-8856-2bd4b3065bfc" locEndPos="1" locType="sr" hash="972801700" locEndLn="119" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="119" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1448027104" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1448027104" unbViolId="9da10123-0fcd-3f99-b5c0-faa80ae38b5c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="30c81038-62c4-3846-8214-28566f96c475" locEndPos="1" locType="sr" hash="972801700" locEndLn="119" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="119" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1448027104" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1448027104" unbViolId="4c53930b-9344-31e0-a737-77905b7ee60b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3db20718-7c73-3c9b-8a49-f1b3990b460e" locEndPos="1" locType="sr" hash="972801700" locEndLn="119" goals="0,"/>
    <FlowViol msg="&quot;ring&quot; is used in two critical sections in context of single method, using one critical section will improve atomicity of operation" ln="119" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" ruleSAFMsg="Usage of &quot;ring&quot; in second critical section" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="120" rule="BD-TRS-DIFCS" FirstElSrcRngStartPos="0" lnHash="-1448027104" ruleSCSCMsg="Usage of &quot;ring&quot; in first critical section" pkg="Render" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" rule.header="Variable should be used in context of single critical section" FirstElSrcRngStartln="119" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1035907581" lang="cpp" violId="c10e5ac9-a9f7-326f-86ef-aa4a998fc57e" locEndPos="0" locEndLn="120" goals="0," locStartln="119" sev="2" locRef="1" tool="c++test" lineHash="-1448027104" unbViolId="1d485e27-665b-3175-96bb-6a6397e022fe" locType="sr" hash="972801700" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Variable used in critical section"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1229452372" ln="117" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="117" srcRngEndLn="118" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="while (!exitGame) {" ElType="." rngLn="117">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-2061438629" ln="118" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="118" srcRngEndLn="119" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="118">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1448027104" ln="119" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="119" srcRngEndLn="120" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="ring.getPosition()" ElType=".C" rngLn="119">
          <ElDescList>
            <ElDesc lineHash="-1486716559" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="Point&amp; getPosition() { return _position; }" ElType="." rngLn="10"/>
          </ElDescList>
          <Anns>
            <Ann msg="Usage of &quot;ring&quot; in first critical section" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1448027104" ln="119" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="119" srcRngEndLn="120" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="ring.getPosition().translate(*currentCameraVelocity);" ElType="." rngLn="119">
          <ElDescList>
            <ElDesc lineHash="931387847" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_x += vector._x;" ElType="." rngLn="15"/>
            <ElDesc lineHash="-1856027609" ln="16" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="16" srcRngEndLn="17" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_y += vector._y;" ElType="." rngLn="16"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1016738356" ln="120" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="120" srcRngEndLn="121" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="120">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" ln="122" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="122" srcRngEndLn="123" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="122">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming false)" kind="condEval"/>
            <Ann msg="Not entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1234365944" ln="128" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="128" srcRngEndLn="129" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="SLEEP(STEP);" ElType="." rngLn="128"/>
        <ElDesc lineHash="-1229452372" ln="117" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="117" srcRngEndLn="118" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="while (!exitGame) {" ElType="." rngLn="117">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-2061438629" ln="118" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="118" srcRngEndLn="119" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="118">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1448027104" ln="119" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="119" srcRngEndLn="120" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="ring.getPosition()" ElType=".P" rngLn="119">
          <Anns>
            <Ann msg="Usage of &quot;ring&quot; in second critical section" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="119" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1448027104" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1448027104" unbViolId="05e9918b-7b90-354e-845c-c4ed8b83d42b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be0ebf8b-44f0-3e58-8bd1-4b2261935c47" locEndPos="2" locType="sr" hash="972801700" locEndLn="119" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="119" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1448027104" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1448027104" unbViolId="1dd749fd-ed70-3037-8840-af0f16545ed0" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b75f33f-937e-35e2-951b-08ba5661c1ed" locEndPos="2" locType="sr" hash="972801700" locEndLn="119" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="119" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1448027104" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1448027104" unbViolId="0b5a6778-4508-3922-b5d0-84b41c04e7a8" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="885eaa03-ef36-3647-a6e9-8cb889be8bc2" locEndPos="2" locType="sr" hash="972801700" locEndLn="119" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="119" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1448027104" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1448027104" unbViolId="8fa52c41-d3d6-3bcb-82e0-83425c9b753e" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2bde4a9c-aded-3566-9a53-a6c372d53f51" locEndPos="3" locType="sr" hash="972801700" locEndLn="119" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="119" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1448027104" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1448027104" unbViolId="dade1a6f-291f-3ca5-89c3-247a0643991d" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9d20073-32a0-3028-8db2-a5b8999bd9ea" locEndPos="3" locType="sr" hash="972801700" locEndLn="119" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="119" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1448027104" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1448027104" unbViolId="4723680b-29c9-3d84-8ef8-a294d8a1e2cd" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba710ec1-3644-37c5-aef8-2d650be46686" locEndPos="3" locType="sr" hash="972801700" locEndLn="119" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="120" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1016738356" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1016738356" unbViolId="afd76e0e-0c6c-3cd7-b486-2ae05a1d88c7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f6ca7b6-e78a-3ea8-bb1e-c11e7ff881c1" locEndPos="1" locType="sr" hash="972801700" locEndLn="120" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="120" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1016738356" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1016738356" unbViolId="3191cde7-9449-3e3f-ae07-7ee267e9ab93" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed1b9a0c-363f-3d02-ae22-6106770ad545" locEndPos="1" locType="sr" hash="972801700" locEndLn="120" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="120" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1016738356" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1016738356" unbViolId="61dc5696-1dbb-3a6c-8c08-906c65cddff5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e5c7223-c8e7-35dd-b6e4-a677dd5dc701" locEndPos="1" locType="sr" hash="972801700" locEndLn="120" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="120" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1016738356" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1016738356" unbViolId="5c3d7182-acc2-33a6-a52f-d7487d44c979" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e865d4fa-5716-3e88-bcc5-d324ffeb0c74" locEndPos="2" locType="sr" hash="972801700" locEndLn="120" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="120" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1016738356" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1016738356" unbViolId="c7cdc0b2-6949-3cb5-b51c-1e7053891f79" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4694d57-de87-3e96-b8e5-e018fc23a7ef" locEndPos="2" locType="sr" hash="972801700" locEndLn="120" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="120" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1016738356" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1016738356" unbViolId="e2474b45-ad79-345e-bcad-7ddad37029a1" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="677cf66c-41c7-3e71-9ad4-4fb39b16f54a" locEndPos="2" locType="sr" hash="972801700" locEndLn="120" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="120" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1016738356" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1016738356" unbViolId="157368ae-8b55-316e-a6fc-3397572fac2b" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc328ba5-e638-38f7-a0ad-2c1bd395fb7f" locEndPos="3" locType="sr" hash="972801700" locEndLn="120" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="120" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1016738356" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1016738356" unbViolId="8f12f7f2-2805-3fd3-8345-f5e7a4dc12f3" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ea69ae2-b4c5-341d-aff9-cddabe6dd510" locEndPos="3" locType="sr" hash="972801700" locEndLn="120" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="120" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1016738356" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1016738356" unbViolId="e8af952a-7fc5-3317-a5e9-468c320061ab" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6805ff11-d541-3b5b-ba84-9237d3e9f920" locEndPos="3" locType="sr" hash="972801700" locEndLn="120" goals="0,"/>
    <StdViol msg="The global function 'LeaveCriticalSection' is called without scope resolution operator '::'" ln="120" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="120" sev="5" auth="lyao" locRef="1" rule="CODSTA-CPP-23" lnHash="-1016738356" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-1016738356" unbViolId="0f5bfac2-5780-34d8-a6fd-78f37e4ff573" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="809fd26f-13b4-3d28-a1e7-1cd9b9c4e493" locEndPos="4" locType="sr" hash="972801700" locEndLn="120" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="3" auth="lyao" locRef="1" rule="JSF-061" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1544355218" unbViolId="1a6c1e49-47a1-348c-8ffd-9d9901b61881" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0da6a208-757e-3454-a4ac-aed25732c537" locEndPos="1" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="3" auth="lyao" locRef="1" rule="FORMAT-42" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1544355218" unbViolId="b1f7b359-5d2d-3c5f-8c4b-b31c6d1a5462" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b772e1d-d20a-3049-b23e-ef90d61ad4cc" locEndPos="1" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="3" auth="lyao" locRef="1" rule="JSF-060_a" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1544355218" unbViolId="46b19c54-f508-3280-b4f8-f13cb748a5c2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="810f5f70-2e65-35e9-871e-789cd468ae9d" locEndPos="1" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="3" auth="lyao" locRef="1" rule="FORMAT-43" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="1544355218" unbViolId="7384cf7d-101e-3f79-8e47-51e9f238173d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e431f23-2d23-3cc6-a82d-a87aeec74477" locEndPos="1" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="3" auth="lyao" locRef="1" rule="JSF-060_b" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="1544355218" unbViolId="598e7c57-a909-3c6b-9832-61fdb3650f6d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31e349f8-2405-3df4-87a8-58b7c7598334" locEndPos="1" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="1544355218" rule.header="Tabs should be avoided" tool="c++test" lineHash="1544355218" unbViolId="f26ef4d1-b27e-37ea-8cf1-b29e35c64e79" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e645a4ae-8e00-310c-805f-bc154c825ed2" locEndPos="1" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="302c64c0-01a4-3b2d-a2f8-ed3c20882376" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f562b133-5ed9-3591-b02b-835dde195281" locEndPos="1" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="b2b24c0b-c20b-32e2-8675-9f8ac7539e36" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f35528a6-2eaf-3197-bead-9d73045d1c27" locEndPos="1" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="3" auth="lyao" locRef="1" rule="FORMAT-02" lnHash="1544355218" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="1544355218" unbViolId="69a0a9eb-14a1-3218-97a6-ade85d8f1372" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d1d44ca-06ed-3a41-9989-94ff59076227" locEndPos="1" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="1544355218" rule.header="Tabs should be avoided" tool="c++test" lineHash="1544355218" unbViolId="7cc47622-d996-31ac-905d-cb405a5464cb" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="08a02af1-4d56-3090-a358-4214cecb65b4" locEndPos="2" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="e55bc8e8-bc81-308f-a4e2-582bc44f2cec" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65df8aba-9603-3df1-badb-4a7432591963" locEndPos="2" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="fd457171-50e4-3f75-9265-7cea82a6308b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76095c3a-9d5c-3917-b63a-fa63331910b2" locEndPos="2" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="1544355218" rule.header="Tabs should be avoided" tool="c++test" lineHash="1544355218" unbViolId="7a0562dc-b2e3-327c-9869-a03f8386c8b6" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f46bf5d-6d32-381e-bd89-80182de37a7d" locEndPos="3" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="4f6c4330-00d8-3fbf-9450-eb3f1708d99a" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a873d50-66bc-3f20-b653-10285bfe0a50" locEndPos="3" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="0fb4b8eb-0fcf-3f8e-88de-6f441bd7dee0" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6085948f-e5d4-3db5-9010-e6d909eafa10" locEndPos="3" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="Between conditional statement 'for' and its opening parenthesis '(' should be exactly one space" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="3" auth="lyao" locRef="1" rule="FORMAT-12" lnHash="1544355218" rule.header="There shall be a single ASCII space character between a conditional statement keyword and its opening parenthesis" tool="c++test" lineHash="1544355218" unbViolId="b3637aab-6267-3f41-9cf9-476c181ad51e" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c5a8b76-56b4-3fb4-b9b1-006d9caee959" locEndPos="4" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="A loop does not have a fixed upper nor lower bound" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="3" auth="lyao" locRef="1" rule="CODSTA-83" lnHash="1544355218" rule.header="All loops must have a fixed upper or lower bound" tool="c++test" lineHash="1544355218" unbViolId="b3ca3dc4-9117-39f8-8566-44e170333fe6" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa2178df-032f-3105-8e0c-a2098c3a3a47" locEndPos="4" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="4" auth="lyao" locRef="1" rule="MISRA2008-3_9_2" lnHash="1544355218" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1544355218" unbViolId="6c73437d-a7e7-3313-8f46-2595bfa7a6f0" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6692c427-28f7-32dd-937a-107fdc759016" locEndPos="8" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="3" auth="lyao" locRef="1" rule="MISRA-013" lnHash="1544355218" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1544355218" unbViolId="341a12c2-8353-38f8-bffc-117124b71d30" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8efb38bd-46fd-36ce-83e9-2fd1ed8bcee6" locEndPos="8" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="3" auth="lyao" locRef="1" rule="CODSTA-223" lnHash="1544355218" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1544355218" unbViolId="3d7bb0b5-df74-32b6-8ed1-8a5e77abfc8b" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8e74a1b8-ca8c-37c6-a23d-cb95562481f9" locEndPos="8" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A3_9_1-b" lnHash="1544355218" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1544355218" unbViolId="23b158f6-2dfa-3404-9314-0595e9f8fea2" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75ed40bb-27ba-3f8a-8d2d-67038ceb40bb" locEndPos="8" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="3" auth="lyao" locRef="1" rule="HICPP-7_1_6-b" lnHash="1544355218" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="1544355218" unbViolId="d122754a-676d-397c-b623-a8866fbe9788" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="32d326b7-5849-318f-a947-4749fd0c93e6" locEndPos="8" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="4" auth="lyao" locRef="1" rule="MISRAC2012-DIR_4_6-b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="382b6f31-67d7-3600-87b4-d0c202b01684" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7396fb1e-0447-3cc7-904d-ee3a16e56d07" locEndPos="8" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="2" auth="lyao" locRef="1" rule="JSF-209_b" lnHash="1544355218" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="e841e7a5-e760-3a78-a271-bc93aa11b661" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="80c9dc8b-00c8-3e5f-bcf0-84278a9cfda9" locEndPos="8" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="3" auth="lyao" locRef="1" rule="MISRA2004-6_3_b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="756eb2bb-b79c-3af4-aee1-28dcf580e7b1" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e6d53e6-71d1-3ed8-942a-3fa99f1ecbe4" locEndPos="8" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="4" auth="lyao" locRef="1" rule="MISRA2012-DIR-4_6_b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="8854ba9c-c8b9-3842-a98e-20baca4db9dd" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="984dd5a3-80f5-3c72-8c19-2749e8746a7c" locEndPos="8" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="3" auth="lyao" locRef="1" rule="HICPP-3_5_1-b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="8782045f-e3c8-3616-876c-c4d51cb5e272" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="777eae69-3858-38ee-b010-4916ae153074" locEndPos="8" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A8_5_2-a" lnHash="1544355218" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1544355218" unbViolId="d1f51e21-5ec5-3967-89dd-1a5448961e8b" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db161f93-d8b7-3f0d-890c-4856c5e4fdf7" locEndPos="12" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="3" auth="lyao" locRef="1" rule="CODSTA-MCPP-38" lnHash="1544355218" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1544355218" unbViolId="851046d9-41c8-30d1-9ae5-781fe4ac6b72" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23c3eb5b-1a53-3b49-882a-f8f173ba1f63" locEndPos="12" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="'i' shall be declared as unsigned int or signed int" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="3" auth="lyao" locRef="1" rule="PORT-13" lnHash="1544355218" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="1544355218" unbViolId="ce1f0574-9195-38df-b0c6-df040088d563" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1980df9b-f4c2-325c-955f-c7e75e549f7e" locEndPos="12" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="Variable &quot;i&quot; declaration was found in control statement" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="3" auth="lyao" locRef="1" rule="OPT-10" lnHash="1544355218" rule.header="Do not declare variables in &quot;if&quot;, &quot;for&quot;, &quot;while&quot;, and &quot;do while&quot; statement" tool="c++test" lineHash="1544355218" unbViolId="d2025d30-654a-37de-8c77-4fb86f48cc55" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b1ae9aa5-8912-3bfe-82aa-9aef919e6315" locEndPos="12" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="The 'i' variable should be commented" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="3" auth="lyao" locRef="1" rule="JSF-132_a" lnHash="1544355218" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="1544355218" unbViolId="c2972748-7e2a-3dad-bace-9b7691d2631e" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2be7a974-3ea5-327e-983f-784272332df8" locEndPos="12" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="The 'i' variable should be commented" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="3" auth="lyao" locRef="1" rule="COMMENT-05" lnHash="1544355218" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="1544355218" unbViolId="de622c24-67d8-308c-93f5-9301d829d15b" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9bb751de-4e25-3401-95d3-119a68b8b066" locEndPos="12" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="Postfix operator applied to variable 'i'; prefer prefix type" ln="122" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="122" sev="3" auth="lyao" locRef="1" rule="OPT-04" lnHash="1544355218" rule.header="Prefer canonical form of ++ and --. Prefer calling the prefix forms" tool="c++test" lineHash="1544355218" unbViolId="bd088a99-814d-3b3b-871b-0eb523bb4595" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f400037-e851-3acc-a903-f2ae13584c42" locEndPos="42" locType="sr" hash="972801700" locEndLn="122" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="123" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="7e889cab-bd02-3587-9779-28f9bde27aea" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1735195c-6fd5-3d86-a1b4-0198ff824052" locEndPos="1" locType="sr" hash="972801700" locEndLn="123" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="123" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="24dc86ea-3135-3bfd-adcf-791f8aa094e3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="228c3245-5caa-3f1b-a3ca-60c0d6ca709a" locEndPos="1" locType="sr" hash="972801700" locEndLn="123" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="123" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="78ebc287-032b-3395-817a-479f100ef4aa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8caf0ef-4f35-3273-a07b-aabb2cfa9ae3" locEndPos="1" locType="sr" hash="972801700" locEndLn="123" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="123" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="09aa7595-f9f3-3e6e-b718-6d5e8cc367c0" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eae61cef-f4df-37a2-909d-ec066bdccc5d" locEndPos="2" locType="sr" hash="972801700" locEndLn="123" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="123" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="41da1995-94b6-393d-8673-15c858c5b062" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fee67ce9-eea1-32bb-891f-f264e023ffdf" locEndPos="2" locType="sr" hash="972801700" locEndLn="123" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="123" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="2b19912e-5eb4-3dd0-8e37-76dbdae97df1" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88e73cc7-6764-3c97-8f30-1b52b2fa08d8" locEndPos="2" locType="sr" hash="972801700" locEndLn="123" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="123" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="adadd8c7-1806-3897-810c-babc8a6137b6" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf7a1811-743d-384b-8913-501bde3926bb" locEndPos="3" locType="sr" hash="972801700" locEndLn="123" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="123" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="51a9571a-981a-3cc8-a403-0215f4a328f0" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db541779-5cd5-31f0-95eb-372efab28eae" locEndPos="3" locType="sr" hash="972801700" locEndLn="123" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="123" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="3884b170-d11c-35cd-b1a4-d7d3e666257b" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a1b407d-77b5-3b9f-8a32-a0db121102b5" locEndPos="3" locType="sr" hash="972801700" locEndLn="123" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="123" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="87ad3580-71ef-3063-858b-979ce7af8a81" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5434bceb-4236-357e-b51f-3201a72310d6" locEndPos="4" locType="sr" hash="972801700" locEndLn="123" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="123" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="1bebc449-f6a8-3220-82fb-65c778892048" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb033fdf-9a5f-3a4b-be52-4141a596574c" locEndPos="4" locType="sr" hash="972801700" locEndLn="123" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="123" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="75b2f937-e2cf-3f90-933b-127057fd943a" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="188ab8c5-42fe-32bf-aa53-ebe7776a2dc8" locEndPos="4" locType="sr" hash="972801700" locEndLn="123" goals="0,"/>
    <StdViol msg="The global function 'EnterCriticalSection' is called without scope resolution operator '::'" ln="123" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="123" sev="5" auth="lyao" locRef="1" rule="CODSTA-CPP-23" lnHash="-251104526" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-251104526" unbViolId="ecb25aff-a857-38e1-afee-7eed5a67fb90" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="72e24dee-e99a-3b50-a56d-5051f225f014" locEndPos="5" locType="sr" hash="972801700" locEndLn="123" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="124" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-864998869" rule.header="Tabs should be avoided" tool="c++test" lineHash="-864998869" unbViolId="e519aa51-fb22-3bf5-b44b-0f4519d720b7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e9a5a8d-d5fa-3ddb-b17b-44f716b1f65a" locEndPos="1" locType="sr" hash="972801700" locEndLn="124" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="124" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="0f12b9a1-cc84-3ea9-9e35-fa32673268e5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5db0168c-2b3b-37a3-a786-5c66b8887e34" locEndPos="1" locType="sr" hash="972801700" locEndLn="124" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="124" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="495c1c24-11a5-339d-b0c8-dd3a015888ad" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b39b714-f4e3-362f-9e92-d7c2d69a1fa5" locEndPos="1" locType="sr" hash="972801700" locEndLn="124" goals="0,"/>
    <FlowViol msg="&quot;participants&quot; is used in two critical sections in context of single method, using one critical section will improve atomicity of operation" ln="124" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" ruleSAFMsg="Usage of &quot;participants&quot; in second critical section" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="125" rule="BD-TRS-DIFCS" FirstElSrcRngStartPos="0" lnHash="-864998869" ruleSCSCMsg="Usage of &quot;participants&quot; in first critical section" pkg="Render" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" rule.header="Variable should be used in context of single critical section" FirstElSrcRngStartln="124" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="77138436" lang="cpp" violId="f976b567-55fe-3b76-b84a-b62a075a4272" locEndPos="0" locEndLn="125" goals="0," locStartln="124" sev="2" locRef="1" tool="c++test" lineHash="-864998869" unbViolId="2b38c9d8-058e-3392-b337-81bda14299d3" locType="sr" hash="972801700" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Variable used in critical section"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1229452372" ln="117" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="117" srcRngEndLn="118" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="while (!exitGame) {" ElType="." rngLn="117">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-2061438629" ln="118" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="118" srcRngEndLn="119" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="118">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1448027104" ln="119" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="119" srcRngEndLn="120" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="ring.getPosition()" ElType="." rngLn="119">
          <ElDescList>
            <ElDesc lineHash="-1486716559" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="Point&amp; getPosition() { return _position; }" ElType="." rngLn="10"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1448027104" ln="119" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="119" srcRngEndLn="120" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="ring.getPosition().translate(*currentCameraVelocity);" ElType="." rngLn="119">
          <ElDescList>
            <ElDesc lineHash="931387847" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_x += vector._x;" ElType="." rngLn="15"/>
            <ElDesc lineHash="-1856027609" ln="16" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="16" srcRngEndLn="17" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_y += vector._y;" ElType="." rngLn="16"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1016738356" ln="120" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="120" srcRngEndLn="121" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="120">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" ln="122" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="122" srcRngEndLn="123" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="122">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" ln="123" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="123" srcRngEndLn="124" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="123">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-864998869" ln="124" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="124" srcRngEndLn="125" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="participants[i]->getPosition()" ElType=".C" rngLn="124">
          <ElDescList>
            <ElDesc lineHash="-1486716559" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="Point&amp; getPosition() { return _position; }" ElType="." rngLn="10"/>
          </ElDescList>
          <Anns>
            <Ann msg="Usage of &quot;participants&quot; in first critical section" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-864998869" ln="124" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="124" srcRngEndLn="125" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="participants[i]->getPosition().translate(*currentCameraVelocity);" ElType="." rngLn="124">
          <ElDescList>
            <ElDesc lineHash="931387847" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_x += vector._x;" ElType="." rngLn="15"/>
            <ElDesc lineHash="-1856027609" ln="16" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="16" srcRngEndLn="17" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_y += vector._y;" ElType="." rngLn="16"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="793595747" ln="125" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="125" srcRngEndLn="126" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="125">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-596932643" ln="126" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="126" srcRngEndLn="127" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="draw(participants[i]);" ElType="!" rngLn="126"/>
        <ElDesc lineHash="1544355218" ln="122" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="122" srcRngEndLn="123" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="122">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" ln="123" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="123" srcRngEndLn="124" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="123">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-864998869" ln="124" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="124" srcRngEndLn="125" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="participants[i]->getPosition()" ElType=".P" rngLn="124">
          <Anns>
            <Ann msg="Usage of &quot;participants&quot; in second critical section" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;currentCameraVelocity&quot; is used in two critical sections in context of single method, using one critical section will improve atomicity of operation" ln="124" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" ruleSAFMsg="Usage of &quot;currentCameraVelocity&quot; in second critical section" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="120" rule="BD-TRS-DIFCS" FirstElSrcRngStartPos="0" lnHash="-864998869" ruleSCSCMsg="Usage of &quot;currentCameraVelocity&quot; in first critical section" pkg="Render" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" rule.header="Variable should be used in context of single critical section" FirstElSrcRngStartln="119" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="320514128" lang="cpp" violId="b728a512-d78f-3b96-8671-271029468245" locEndPos="0" locEndLn="125" goals="0," locStartln="124" sev="2" locRef="1" tool="c++test" lineHash="-864998869" unbViolId="52eb0078-d5f1-3853-ac6d-b4869efeb8c8" locType="sr" hash="972801700" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Variable used in critical section"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1229452372" ln="117" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="117" srcRngEndLn="118" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="while (!exitGame) {" ElType="." rngLn="117">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-2061438629" ln="118" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="118" srcRngEndLn="119" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="118">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1448027104" ln="119" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="119" srcRngEndLn="120" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="ring.getPosition()" ElType="." rngLn="119">
          <ElDescList>
            <ElDesc lineHash="-1486716559" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="Point&amp; getPosition() { return _position; }" ElType="." rngLn="10"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1448027104" ln="119" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="119" srcRngEndLn="120" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="ring.getPosition().translate(*currentCameraVelocity);" ElType=".C" rngLn="119">
          <ElDescList>
            <ElDesc lineHash="931387847" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_x += vector._x;" ElType="." rngLn="15"/>
            <ElDesc lineHash="-1856027609" ln="16" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="16" srcRngEndLn="17" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_y += vector._y;" ElType="." rngLn="16"/>
          </ElDescList>
          <Anns>
            <Ann msg="Usage of &quot;currentCameraVelocity&quot; in first critical section" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1016738356" ln="120" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="120" srcRngEndLn="121" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="120">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" ln="122" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="122" srcRngEndLn="123" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="122">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" ln="123" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="123" srcRngEndLn="124" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="123">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-864998869" ln="124" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="124" srcRngEndLn="125" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="participants[i]->getPosition()" ElType="." rngLn="124">
          <ElDescList>
            <ElDesc lineHash="-1486716559" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="Point&amp; getPosition() { return _position; }" ElType="." rngLn="10"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-864998869" ln="124" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="124" srcRngEndLn="125" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="participants[i]->getPosition().translate(*currentCameraVelocity);" ElType=".P" rngLn="124">
          <Anns>
            <Ann msg="Usage of &quot;currentCameraVelocity&quot; in second critical section" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="124" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-864998869" rule.header="Tabs should be avoided" tool="c++test" lineHash="-864998869" unbViolId="346c301d-4cc8-3f49-8388-ba85a0657059" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c79f17f-2d63-3f4b-814d-2d249037581c" locEndPos="2" locType="sr" hash="972801700" locEndLn="124" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="124" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="4b4bb310-16a3-387f-9b65-c5e8111793b0" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a68741dc-2372-39b4-90b1-77bec5ab0955" locEndPos="2" locType="sr" hash="972801700" locEndLn="124" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="124" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="faab27aa-7bf3-3df8-861e-faf5912614af" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="118672ac-ce2f-3fd7-a28a-ba5acd4535a3" locEndPos="2" locType="sr" hash="972801700" locEndLn="124" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="124" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-864998869" rule.header="Tabs should be avoided" tool="c++test" lineHash="-864998869" unbViolId="f76c9d01-3c10-3367-8c7f-6f70d8f08e01" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8dd285e8-55d7-3ec5-82dc-a4e68e65f9de" locEndPos="3" locType="sr" hash="972801700" locEndLn="124" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="124" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="3d5721e6-882c-3c28-9593-bb16883f9073" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="60342677-aa6a-3822-9ebc-55138ddddc15" locEndPos="3" locType="sr" hash="972801700" locEndLn="124" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="124" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="39dbddc7-7aa6-3991-ab07-6839e2f3243e" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0c72baae-732f-3403-a265-1ac11b7368bc" locEndPos="3" locType="sr" hash="972801700" locEndLn="124" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="124" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-864998869" rule.header="Tabs should be avoided" tool="c++test" lineHash="-864998869" unbViolId="aafd995c-238e-3b04-ba65-1dd28285fb43" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92c1ecac-bcb1-31f2-84e0-5c77b8c71b67" locEndPos="4" locType="sr" hash="972801700" locEndLn="124" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="124" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="594a9b6c-dd8a-3c12-b796-c0c522827d0f" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cef72c8f-a85e-373d-89ea-44a6c4ff7c97" locEndPos="4" locType="sr" hash="972801700" locEndLn="124" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="124" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="a2e58109-c177-315f-8867-b38676598523" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0289421a-1b1b-3267-a297-4da8cbbc7f33" locEndPos="4" locType="sr" hash="972801700" locEndLn="124" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="125" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="7b10e8dc-09f4-3af9-9fa7-2f48aeafb438" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71a3338c-45bf-3d7a-bc94-601db59d6445" locEndPos="1" locType="sr" hash="972801700" locEndLn="125" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="125" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="a3096402-4f07-36a4-bbf5-dbac432d3db7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="777c3689-0fe7-32f4-a7bc-a7ed7d27c7bb" locEndPos="1" locType="sr" hash="972801700" locEndLn="125" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="125" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="1d9de793-ad61-307e-b621-8ce0af8cbc3a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b925a68c-e66b-3965-b2b0-ead8d10d7b9d" locEndPos="1" locType="sr" hash="972801700" locEndLn="125" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="125" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="3ca7289f-18ae-337b-ba62-baa06fdca6f5" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed91d057-6027-376c-8942-3bf9d8605ba1" locEndPos="2" locType="sr" hash="972801700" locEndLn="125" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="125" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="950bba5d-2ad1-331c-b50e-523a4e995f19" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="953b5522-f8f6-3e71-bdf7-b3eb09403f1d" locEndPos="2" locType="sr" hash="972801700" locEndLn="125" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="125" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="174c6096-c4e7-388b-a7f9-ed7676a62cf3" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd19f4f5-5953-32f9-b3a4-09cbeaa89d7c" locEndPos="2" locType="sr" hash="972801700" locEndLn="125" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="125" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="87e53e25-6cab-385a-a1f5-818a285eac40" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e85dcfd5-3219-3d54-a55b-c958a771c53d" locEndPos="3" locType="sr" hash="972801700" locEndLn="125" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="125" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="53fa03d1-0ce0-3c7c-a174-84b19c7d0178" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99ffa5df-152e-3a56-95cd-826d7272a592" locEndPos="3" locType="sr" hash="972801700" locEndLn="125" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="125" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="c0a72735-f6bc-3d92-a023-50ea20084ad6" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76a5f712-5d9d-3df3-9b74-9ffcd35db494" locEndPos="3" locType="sr" hash="972801700" locEndLn="125" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="125" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="aaaceaa8-6580-3241-b831-35afca514f74" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5034fbf7-bdba-3b75-a09e-c3b0224bd803" locEndPos="4" locType="sr" hash="972801700" locEndLn="125" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="125" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="e0b1747b-6ab7-3edc-b5e0-61fdd9a4cd51" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48ee88a3-5ec1-3176-9a17-34ecf4b384d9" locEndPos="4" locType="sr" hash="972801700" locEndLn="125" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="125" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="3a18cb66-dc02-3830-b756-18a8748cfe1f" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a06cd9e9-c45b-3950-b266-493b05a2bf26" locEndPos="4" locType="sr" hash="972801700" locEndLn="125" goals="0,"/>
    <StdViol msg="The global function 'LeaveCriticalSection' is called without scope resolution operator '::'" ln="125" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="125" sev="5" auth="lyao" locRef="1" rule="CODSTA-CPP-23" lnHash="793595747" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="793595747" unbViolId="a88a1463-eff1-3fe9-b4c5-92aae2f9530a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="acb291fd-5df4-37b5-9090-3ff46bf29956" locEndPos="5" locType="sr" hash="972801700" locEndLn="125" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="126" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-596932643" rule.header="Tabs should be avoided" tool="c++test" lineHash="-596932643" unbViolId="ffd012c9-2bcb-3f90-9fa1-367a03439bb2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3df0c8bc-fb8d-3887-bbdb-e7055d5a04a1" locEndPos="1" locType="sr" hash="972801700" locEndLn="126" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="126" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="70cafe79-1324-3fc9-90f6-48172adb1c8d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="218f0995-87d8-32f5-b634-cfed307f0b05" locEndPos="1" locType="sr" hash="972801700" locEndLn="126" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="126" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="8017a320-84cc-34f1-985a-a4945ce18736" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e194e050-ecf4-3432-9abb-d31bf997d4fd" locEndPos="1" locType="sr" hash="972801700" locEndLn="126" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="126" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-596932643" rule.header="Tabs should be avoided" tool="c++test" lineHash="-596932643" unbViolId="700aee5b-9d31-3a98-b03e-8a30026af665" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a41ca90d-fdc5-302d-811c-c5eee669f902" locEndPos="2" locType="sr" hash="972801700" locEndLn="126" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="126" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="918226fc-09c2-3e38-932a-4b570685b3ea" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="679388a4-c0b2-3b1a-8350-1337ee4640c6" locEndPos="2" locType="sr" hash="972801700" locEndLn="126" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="126" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="ec6ea597-a564-3895-818c-95d48ff0ca4c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e07319a-9f72-3173-a5c5-42e5eb825919" locEndPos="2" locType="sr" hash="972801700" locEndLn="126" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="126" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-596932643" rule.header="Tabs should be avoided" tool="c++test" lineHash="-596932643" unbViolId="220cf4d4-2457-3e1a-bdb2-87844b755f49" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6d902af-ee9e-3a01-8de6-707139380bb8" locEndPos="3" locType="sr" hash="972801700" locEndLn="126" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="126" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="b134d5b8-4aac-3023-94a9-12c55c678d18" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ea1da93-ed15-3c9c-a83d-3d2d0a7ed093" locEndPos="3" locType="sr" hash="972801700" locEndLn="126" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="126" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="7683eeaf-311a-3edd-bf08-795d9f4017fc" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d9fef61-fc9a-3d68-99b9-955fcf2710da" locEndPos="3" locType="sr" hash="972801700" locEndLn="126" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="126" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-596932643" rule.header="Tabs should be avoided" tool="c++test" lineHash="-596932643" unbViolId="d5c907e8-3ff5-3d2b-874f-704c80344a26" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae738147-047a-314c-ac10-9efa91577e13" locEndPos="4" locType="sr" hash="972801700" locEndLn="126" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="126" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="24765f1e-6b7c-38c0-99c9-4193d02cbf38" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7506c98b-6828-36e9-bfe7-ede655fdc9f3" locEndPos="4" locType="sr" hash="972801700" locEndLn="126" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="126" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="cfab8a84-15ff-371a-affd-5431e9947339" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d50d6a3e-237f-3c93-826b-f47ec931c95b" locEndPos="4" locType="sr" hash="972801700" locEndLn="126" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="127" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="277172" rule.header="Tabs should be avoided" tool="c++test" lineHash="277172" unbViolId="86da0ed1-a849-3f0f-ae96-a453225ceecc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eba315ae-bea3-3bdc-98ac-b81ba52eb402" locEndPos="1" locType="sr" hash="972801700" locEndLn="127" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="127" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="dd0c5d4c-5142-3c21-aa99-fa9cdec373bf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc8ec48c-9510-3123-a21a-9a7f298327a5" locEndPos="1" locType="sr" hash="972801700" locEndLn="127" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="127" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="7f018944-4f87-30ce-b3d0-94a4b86a0a5b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be9e2af1-ec74-34f1-9dcb-df11577021a7" locEndPos="1" locType="sr" hash="972801700" locEndLn="127" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="127" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="277172" rule.header="Tabs should be avoided" tool="c++test" lineHash="277172" unbViolId="d3de994f-9523-36f6-8e38-3b7d86bb1c0a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e21ec5f7-f2a0-36c3-ae9d-3c2d81ad0bb3" locEndPos="2" locType="sr" hash="972801700" locEndLn="127" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="127" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="9a89615d-d3a6-3897-844c-e3d61bdf1030" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="45bf9ff4-f52a-34bb-9396-427aec6d4800" locEndPos="2" locType="sr" hash="972801700" locEndLn="127" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="127" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="e2f18860-813f-3ecd-868a-14e7fc3dd557" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cce4d8e3-7853-3958-bbd3-9d82d383131d" locEndPos="2" locType="sr" hash="972801700" locEndLn="127" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="127" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="277172" rule.header="Tabs should be avoided" tool="c++test" lineHash="277172" unbViolId="bc05e24f-026f-3f0d-be9a-7503d2e66ceb" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b40fe52c-18b6-359f-a769-8ac6322f94e9" locEndPos="3" locType="sr" hash="972801700" locEndLn="127" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="127" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="8e223844-7f03-3966-aa6d-25c0d9387e9f" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7149918-1bd7-359e-b87d-c1016905979c" locEndPos="3" locType="sr" hash="972801700" locEndLn="127" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="127" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="e781c1c5-5fba-3740-b0ed-4f70164d07f4" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="80cae7da-31de-36d3-a9f7-93f1922b4b9e" locEndPos="3" locType="sr" hash="972801700" locEndLn="127" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="128" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="1234365944" rule.header="Tabs should be avoided" tool="c++test" lineHash="1234365944" unbViolId="1a5fff20-c446-3389-ac79-64d7fc50a4ad" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="369378a9-917c-342a-8df9-d621f4dd6715" locEndPos="1" locType="sr" hash="972801700" locEndLn="128" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="128" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="8c7fabad-687c-3068-a7d8-8fb027127e07" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d276a06-b893-374e-b400-b7f88ad91ac6" locEndPos="1" locType="sr" hash="972801700" locEndLn="128" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="128" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="1ea2bbc0-f421-35e4-9ad4-09bea975160f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5302be17-3636-3251-b740-b9b2dacc3e99" locEndPos="1" locType="sr" hash="972801700" locEndLn="128" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="128" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="1234365944" rule.header="Tabs should be avoided" tool="c++test" lineHash="1234365944" unbViolId="1ebba7a0-5249-352b-8dbf-90e1e8b0e0c5" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70a2f8ac-3c76-38e3-8a64-b2b92a0734ea" locEndPos="2" locType="sr" hash="972801700" locEndLn="128" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="128" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="a74d9e8a-50b7-35ab-950d-9661e39df759" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8e8ff8d-f0bd-3a60-81b6-5dce2c5ee923" locEndPos="2" locType="sr" hash="972801700" locEndLn="128" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="128" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="e94b0ae7-26dc-3666-a4fe-98e2fbbbe01b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da936e14-b1fd-36b0-ab35-17c13cd9847f" locEndPos="2" locType="sr" hash="972801700" locEndLn="128" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="128" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="1234365944" rule.header="Tabs should be avoided" tool="c++test" lineHash="1234365944" unbViolId="8b29818f-3931-37a4-aad5-0c566256b94f" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e751d15b-b42c-347a-9840-6efb1772700d" locEndPos="3" locType="sr" hash="972801700" locEndLn="128" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="128" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="446bdea7-3fbc-3119-b095-3e2070fb3a39" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="044650cd-b9f6-3ec0-9542-5e7bdfbf64b5" locEndPos="3" locType="sr" hash="972801700" locEndLn="128" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="128" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="fb108ea9-a2c2-3f86-a2d9-c08063b43b7e" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e196af09-bbac-3ae2-b096-74b2c90cc0a9" locEndPos="3" locType="sr" hash="972801700" locEndLn="128" goals="0,"/>
    <StdViol msg="The global function 'Sleep' is called without scope resolution operator '::'" ln="128" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="128" sev="5" auth="lyao" locRef="1" rule="CODSTA-CPP-23" lnHash="1234365944" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="1234365944" unbViolId="60c83954-7b3b-385b-997c-17ba9ff79e56" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="014bbbce-7621-3941-84a4-8e1da3e52275" locEndPos="4" locType="sr" hash="972801700" locEndLn="128" goals="0,"/>
    <StdViol msg="The type 'int' of function argument number '1' does not match declared type 'unsigned long'" ln="128" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="128" sev="3" auth="lyao" locRef="1" rule="PB-11" lnHash="1234365944" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="1234365944" unbViolId="196cb413-550c-37b8-a916-1c7ba3ca8fb3" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5cb7265e-b0a4-3568-ae1a-9a1afcbfd361" locEndPos="4" locType="sr" hash="972801700" locEndLn="128" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used" ln="128" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="128" sev="2" auth="lyao" locRef="1" rule="MISRA2008-5_0_4_a" lnHash="1234365944" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="1234365944" unbViolId="73a98a98-c24d-3338-9873-16b61ab665b8" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f81c1db-600b-3e80-aec5-926361e7023f" locEndPos="10" locType="sr" hash="972801700" locEndLn="128" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used" ln="128" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="128" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M5_0_4-a" lnHash="1234365944" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="1234365944" unbViolId="e6ea8c29-9e41-3ebc-a9a6-3f1ab9a6ba5a" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a999bff9-cde1-3677-836f-a43ae1e3f5c3" locEndPos="10" locType="sr" hash="972801700" locEndLn="128" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used" ln="128" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="128" sev="3" auth="lyao" locRef="1" rule="MISRA2004-10_1_a" lnHash="1234365944" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="1234365944" unbViolId="4c8cf8ba-3660-3c67-89c0-c278473b05e8" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="801579f3-5c2d-3f63-8f26-eeea0fdfc529" locEndPos="10" locType="sr" hash="972801700" locEndLn="128" goals="0,"/>
    <StdViol msg="A 'U' suffix shall be applied to constant: 20" ln="128" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="128" sev="3" auth="lyao" locRef="1" rule="HICPP-4_2_1-a" lnHash="1234365944" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="1234365944" unbViolId="73c65b40-1bf4-3c08-b6ba-01569daaebb5" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db31da77-20a0-31e7-b509-1a51f93d4347" locEndPos="10" locType="sr" hash="972801700" locEndLn="128" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="129" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="129" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="9053" rule.header="Tabs should be avoided" tool="c++test" lineHash="9053" unbViolId="0ca10958-e75e-3aaf-a5ae-ebd72118e24d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8493f6fc-5642-3a18-a8f7-c48359168c0b" locEndPos="1" locType="sr" hash="972801700" locEndLn="129" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="129" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="129" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="9e1d38bb-1278-32b6-94e9-420d04cfe2d6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5faeb303-b546-30cf-881f-e2b4910af7cd" locEndPos="1" locType="sr" hash="972801700" locEndLn="129" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="129" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="129" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="00726aca-91d1-3560-bb24-6c40b99f5a00" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f61e108b-8df9-3714-96f8-7e5190dab03a" locEndPos="1" locType="sr" hash="972801700" locEndLn="129" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="129" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="129" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="9053" rule.header="Tabs should be avoided" tool="c++test" lineHash="9053" unbViolId="07da2ad6-442a-3632-9110-bd9acafad9f9" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a1a2d3a-66ba-38cd-91d1-06494a0de6d9" locEndPos="2" locType="sr" hash="972801700" locEndLn="129" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="129" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="129" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="90dc8627-8cd1-3a54-bbb1-15ae0129e139" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ad2ad30-b908-303a-bcc6-dfcaf09f28b6" locEndPos="2" locType="sr" hash="972801700" locEndLn="129" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="129" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="129" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="5779215e-baae-3028-94ee-ae181ebe1143" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b2591e5-1854-3c57-a093-029a93121375" locEndPos="2" locType="sr" hash="972801700" locEndLn="129" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="130" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="130" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1688062501" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1688062501" unbViolId="16ddbaca-8c99-3f33-9482-4420aa35562b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a701ad2-d8b2-3936-abfc-d9e29dcc79ca" locEndPos="1" locType="sr" hash="972801700" locEndLn="130" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="130" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="130" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="c0489bd5-2da2-32c3-856f-318c36bb4449" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ce2a619-c05b-31e6-b920-b429d5de1a1c" locEndPos="1" locType="sr" hash="972801700" locEndLn="130" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="130" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="130" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="8c996a0e-fc49-37cc-bf64-8202de4a2558" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e6002e8-b8fd-39bb-9954-fe9644218e39" locEndPos="1" locType="sr" hash="972801700" locEndLn="130" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="130" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="130" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1688062501" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1688062501" unbViolId="051c69da-53d6-3ce2-948a-af68982bd3a5" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b47ac819-bc9c-31b1-a870-e79a2636d1ab" locEndPos="2" locType="sr" hash="972801700" locEndLn="130" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="130" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="130" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="f4208bd9-5e36-3536-bbb1-15a95f83fc02" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="41cad3d3-f806-3beb-9b8b-4d14dd5b092a" locEndPos="2" locType="sr" hash="972801700" locEndLn="130" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="130" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="130" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="d22a19c0-f1d5-39d1-93f7-9c4c9f07d25a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3252e0bd-9ae7-37ad-97c0-4f96d0669860" locEndPos="2" locType="sr" hash="972801700" locEndLn="130" goals="0,"/>
    <StdViol msg="'return' statement should be used with parenthesis" ln="130" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="130" sev="3" auth="lyao" locRef="1" rule="FORMAT-25_b" lnHash="-1688062501" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="-1688062501" unbViolId="ddbf4f51-3473-3951-8d36-949fc8b9521b" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cbac4a45-31d9-3d98-9cfa-021b4e7e16cf" locEndPos="3" locType="sr" hash="972801700" locEndLn="130" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function return statement shall not be used" ln="130" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="130" sev="2" auth="lyao" locRef="1" rule="MISRA2008-5_0_4_a" lnHash="-1688062501" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-1688062501" unbViolId="fa60a339-0acb-3f7a-a070-853850ebddb4" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="008b27a8-3848-368c-a320-0b3813878f21" locEndPos="3" locType="sr" hash="972801700" locEndLn="130" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function return statement shall not be used" ln="130" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="130" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M5_0_4-a" lnHash="-1688062501" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1688062501" unbViolId="d5f373c4-9d07-3ffc-98cf-b4a56ba4cc31" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eca58671-fe91-33e5-9bb0-f622c99aff8a" locEndPos="3" locType="sr" hash="972801700" locEndLn="130" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function return statement shall not be used" ln="130" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="130" sev="3" auth="lyao" locRef="1" rule="MISRA2004-10_1_a" lnHash="-1688062501" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1688062501" unbViolId="49a16a5e-0834-3ff6-ad9a-c2854ea93c88" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26bf8331-af89-3153-802b-5d715e9763ec" locEndPos="3" locType="sr" hash="972801700" locEndLn="130" goals="0,"/>
    <StdViol msg="Function 'Render_Thread' has declared return type 'unsigned long' but returns value of type 'int'" ln="130" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="130" sev="3" auth="lyao" locRef="1" rule="PB-05" lnHash="-1688062501" rule.header="Return value of a function must match declared return type" tool="c++test" lineHash="-1688062501" unbViolId="9beb27d4-ab37-31ba-9bcf-845b77d60ec6" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4aeb0210-d93f-3966-9fd8-80025a9b9b9e" locEndPos="3" locType="sr" hash="972801700" locEndLn="130" goals="0,"/>
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="130" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="130" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M2_13_3-a" lnHash="-1688062501" rule.header="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" tool="c++test" lineHash="-1688062501" unbViolId="71786054-bf01-3263-bc1f-251238cdc8f7" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0cb7e62e-b7a5-3d1b-8a0a-751544fecc9f" locEndPos="10" locType="sr" hash="972801700" locEndLn="130" goals="0,"/>
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="130" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="130" sev="3" auth="lyao" locRef="1" rule="CODSTA-68" lnHash="-1688062501" rule.header="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" tool="c++test" lineHash="-1688062501" unbViolId="2ea6b7cd-4804-390f-94d2-911395b63d7c" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f9af7db-9225-3bb9-9f38-5623b6b07318" locEndPos="10" locType="sr" hash="972801700" locEndLn="130" goals="0,"/>
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="130" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="130" sev="2" auth="lyao" locRef="1" rule="MISRA2008-2_13_3" lnHash="-1688062501" rule.header="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" tool="c++test" lineHash="-1688062501" unbViolId="01ba43b1-cfa2-39e6-ad0e-6a1fd894ea6e" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dddf890e-32c8-348c-9e1f-ae535f45297e" locEndPos="10" locType="sr" hash="972801700" locEndLn="130" goals="0,"/>
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="130" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="130" sev="3" auth="lyao" locRef="1" rule="HICPP-4_2_1-a" lnHash="-1688062501" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-1688062501" unbViolId="96425ddb-cc3b-3d87-88df-ec6935985e8e" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5daaaac0-6b6f-3ee8-bbf8-44a7a30b1435" locEndPos="10" locType="sr" hash="972801700" locEndLn="130" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="131" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="131" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="404" rule.header="Tabs should be avoided" tool="c++test" lineHash="404" unbViolId="d26b4f6c-0063-39de-8e6b-596f84b3c425" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3667776d-d342-3f6e-b398-c217ae1b6b13" locEndPos="1" locType="sr" hash="972801700" locEndLn="131" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="131" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="131" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="3b6edb17-a976-3fa5-9920-216309dfd6b4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e279840b-e4d0-32f3-b765-d087f7caf854" locEndPos="1" locType="sr" hash="972801700" locEndLn="131" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="131" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="131" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="67598f15-9ca4-39c6-8698-ededaa2d3c5c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="739209a7-6ba5-3e4d-9196-2155e545ef60" locEndPos="1" locType="sr" hash="972801700" locEndLn="131" goals="0,"/>
    <StdViol msg="The definition of the 'runGameThreads' function is not preceded by a comment" ln="134" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="134" sev="3" auth="lyao" locRef="1" rule="COMMENT-04" lnHash="-106623271" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-106623271" unbViolId="c45cf4d4-268c-3180-9b5f-34ae31f81d8f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="56dc0b20-5626-3cf2-be1e-402e03f0e72b" locEndPos="6" locType="sr" hash="972801700" locEndLn="134" goals="0,"/>
    <StdViol msg="The definition of the 'runGameThreads' function is not preceded by a comment" ln="134" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="134" sev="4" auth="lyao" locRef="1" rule="JSF-134" lnHash="-106623271" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-106623271" unbViolId="d2dbe469-601b-3744-a522-77938c8fd950" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bcc00164-88af-33c5-a360-e4960276d1dd" locEndPos="6" locType="sr" hash="972801700" locEndLn="134" goals="0,"/>
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="134" sev="4" auth="lyao" locRef="1" rule="OWASP2019-API9-e" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="a01d7e29-c076-3c47-b660-d9dedf00038b" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f6b4352d-1c97-3ce9-bf40-f46cfa333ec8" locEndPos="6" locType="sr" hash="972801700" locEndLn="134" goals="0,"/>
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="134" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A3_3_1-a" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="00544741-2ea2-3552-b75d-3ea803f2b294" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79a4736e-9fcd-39ff-9551-88cd15a9f865" locEndPos="6" locType="sr" hash="972801700" locEndLn="134" goals="0,"/>
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="134" sev="4" auth="lyao" locRef="1" rule="JSF-137" lnHash="-106623271" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-106623271" unbViolId="831a6570-3201-39ea-8688-4c1d9db6aaf8" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b094a77c-853b-397e-88dd-24ad7ae475b3" locEndPos="6" locType="sr" hash="972801700" locEndLn="134" goals="0,"/>
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="134" sev="4" auth="lyao" locRef="1" rule="MISRA-023" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="4512e3cc-08a1-3edf-b1ed-191a4c9ededd" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="000be682-baff-3795-aed0-78c41420bf5f" locEndPos="6" locType="sr" hash="972801700" locEndLn="134" goals="0,"/>
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="134" sev="2" auth="lyao" locRef="1" rule="MISRA2008-3_3_1" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="1402420b-025b-3eb3-978b-09f470c58f8e" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac6c5d2e-28b1-3b3f-a213-1c14c37653a1" locEndPos="6" locType="sr" hash="972801700" locEndLn="134" goals="0,"/>
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="134" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL15-a" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="f1d31d7a-7dee-3da7-b2b1-54b01a1e666d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7327c79-ec50-3932-abb7-47680ac3242b" locEndPos="6" locType="sr" hash="972801700" locEndLn="134" goals="0,"/>
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="134" sev="4" auth="lyao" locRef="1" rule="MISRA2004-8_10" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="e96414d5-bb41-316d-9f99-124a35d0dd7d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="34037442-f085-3727-887f-bfc12bb9a0f5" locEndPos="6" locType="sr" hash="972801700" locEndLn="134" goals="0,"/>
    <StdViol msg="The name 'runGameThreads' should be composed only of lowercase letters" ln="134" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="134" sev="3" auth="lyao" locRef="1" rule="JSF-051" lnHash="-106623271" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-106623271" unbViolId="21e21ae3-f6c7-3334-8cda-9088f66b1194" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12fa7e81-1b9f-328f-89ab-b0bc01704449" locEndPos="6" locType="sr" hash="972801700" locEndLn="134" goals="0,"/>
    <StdViol msg="The name 'runGameThreads' should be composed only of lowercase letters" ln="134" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="134" sev="3" auth="lyao" locRef="1" rule="NAMING-44" lnHash="-106623271" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-106623271" unbViolId="d715a797-7279-30e3-9e61-fac3816fa6de" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0c180d4-a62c-3fa1-b9cc-993bb4b851cd" locEndPos="6" locType="sr" hash="972801700" locEndLn="134" goals="0,"/>
    <StdViol msg="Do not declare the 'runGameThreads' function in the global namespace" ln="134" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="134" sev="4" auth="lyao" locRef="1" rule="JSF-098" lnHash="-106623271" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-106623271" unbViolId="6a83aaf8-404e-3a4b-8f2d-6493138c2dfc" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e50d0af1-3278-32eb-8728-2473c0d9a3bc" locEndPos="6" locType="sr" hash="972801700" locEndLn="134" goals="0,"/>
    <StdViol msg="Do not declare the 'runGameThreads' function in the global namespace" ln="134" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="134" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M7_3_1-a" lnHash="-106623271" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-106623271" unbViolId="171972b2-598d-30a9-a254-5b5e5833e9ad" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="739c4a35-9207-3e19-889a-51ecd9e527be" locEndPos="6" locType="sr" hash="972801700" locEndLn="134" goals="0,"/>
    <StdViol msg="Do not declare the 'runGameThreads' function in the global namespace" ln="134" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="134" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-36" lnHash="-106623271" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-106623271" unbViolId="036b5132-bccd-345d-8f92-9afc548425af" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc5d9d69-f7cf-3ffe-ae26-bcece4cb9c69" locEndPos="6" locType="sr" hash="972801700" locEndLn="134" goals="0,"/>
    <StdViol msg="Do not declare the 'runGameThreads' function in the global namespace" ln="134" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="134" sev="2" auth="lyao" locRef="1" rule="MISRA2008-7_3_1" lnHash="-106623271" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-106623271" unbViolId="abff3b89-ef43-370d-b635-ab352a2f7a33" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff320785-dffc-3c0c-9a7c-61259a08aaea" locEndPos="6" locType="sr" hash="972801700" locEndLn="134" goals="0,"/>
    <StdViol msg="The 'runGameThreads' function should be preceded by a comment that contains the '@brief' tag" ln="134" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="134" sev="3" auth="lyao" locRef="1" rule="COMMENT-14" lnHash="-106623271" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-106623271" unbViolId="980f6180-8386-302d-bfc0-7a8ad1210572" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9ea8996-109c-3760-84bd-766365974c9b" locEndPos="6" locType="sr" hash="972801700" locEndLn="134" goals="0,"/>
    <StdViol msg="The 'runGameThreads' function should be preceded by a comment that contains the '@brief' tag" ln="134" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="134" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A2_7_3-a" lnHash="-106623271" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-106623271" unbViolId="9b369be7-ba2f-3dad-80c8-1feb909ba28b" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05dabb5b-a2ca-3ae9-891b-84074b9975c0" locEndPos="6" locType="sr" hash="972801700" locEndLn="134" goals="0,"/>
    <StdViol msg="Return type is not placed in line before function 'runGameThreads'" ln="134" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="134" sev="3" auth="lyao" locRef="1" rule="FORMAT-28" lnHash="-106623271" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-106623271" unbViolId="caeeef87-6fc9-3189-8066-e8a181b08b7e" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ca47993-4408-34d6-a9d3-64c8be44fdd6" locEndPos="6" locType="sr" hash="972801700" locEndLn="134" goals="0,"/>
    <StdViol msg="Function 'runGameThreads' has Cyclomatic Complexity value: 1" ln="134" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="134" sev="5" auth="lyao" locRef="1" rule="METRICS-29" lnHash="-106623271" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-106623271" unbViolId="b14ece4e-3fd0-342d-ad26-a9431d919f8c" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9572a266-e869-33f1-b03a-488270ad5a97" locEndPos="6" locType="sr" hash="972801700" locEndLn="134" goals="0,"/>
    <StdViol msg="Function 'runGameThreads' has Essential Complexity value: 1" ln="134" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="134" sev="5" auth="lyao" locRef="1" rule="METRICS-33" lnHash="-106623271" rule.header="Report Essential Complexity" tool="c++test" lineHash="-106623271" unbViolId="f26b151e-96c5-324f-bc49-c7f78acc5e00" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5cb2d7b-ecea-394e-b4f2-036b4dc3e138" locEndPos="6" locType="sr" hash="972801700" locEndLn="134" goals="0,"/>
    <StdViol msg="Naming convention not followed: runGameThreads" ln="134" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="134" sev="3" auth="lyao" locRef="1" rule="NAMING-17" lnHash="-106623271" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-106623271" unbViolId="eacdae7f-e4af-3ac9-8241-9969d14be3cb" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f77d0e3a-d341-365e-a01f-453693ec6986" locEndPos="6" locType="sr" hash="972801700" locEndLn="134" goals="0,"/>
    <StdViol msg="The 'runGameThreads' function is not used in the testing scope" ln="134" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="134" sev="3" auth="lyao" locRef="1" rule="GLOBAL-UNUSEDFUNC" lnHash="-106623271" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-106623271" unbViolId="f338e183-3fcb-3f63-b866-a96f9d3ae260" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="a63fbcf1-5ea8-3323-8ba6-38d25d4ce6da" locEndPos="6" locType="sr" hash="972801700" locEndLn="134" goals="0,"/>
    <StdViol msg="The 'runGameThreads' function is not used in the testing scope" ln="134" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="134" sev="4" auth="lyao" locRef="1" rule="AUTOSAR-M0_1_10-a" lnHash="-106623271" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-106623271" unbViolId="26be57c2-c461-3d63-880e-7f89443a6d28" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="9bdccbc1-7cc5-3286-a5f4-d863c2281b5a" locEndPos="6" locType="sr" hash="972801700" locEndLn="134" goals="0,"/>
    <StdViol msg="The 'runGameThreads' function is not used in the testing scope" ln="134" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="134" sev="2" auth="lyao" locRef="1" rule="MISRA2008-0_1_10_b" lnHash="-106623271" rule.header="Every defined function with external linkage shall be used" tool="c++test" lineHash="-106623271" unbViolId="e6c33447-9604-3642-87f7-066f01837512" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="031f2677-d058-3347-ba02-5d2ff740f469" locEndPos="6" locType="sr" hash="972801700" locEndLn="134" goals="0,"/>
    <DupViol msg="Duplicated function: 'void runGameThreads ( ) { exitGame = 0 ; THREAD thread1 ,...'" ln="135" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="135" sev="2" auth="lyao" locRef="1" rule="CDD-DUPM" lnHash="123" rule.header="Avoid function duplication" tool="c++test" lineHash="123" unbViolId="71f2506c-b3ca-3e90-8b63-0e8c3060c51d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="7f7a82a0-92d2-31c9-9300-9851a9153fa4" locType="sr" locEndPos="1" urgent="true" hash="972801700" locEndLn="142" goals="1,">
      <ElDescList>
        <ElDesc lineHash="123" ln="135" srcRngStartPos="0" srcRngEndPos="1" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="135" srcRngEndLn="142" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="[Line 135] Duplicated function in file 'DeadLock.cpp'" rngLn="135"/>
        <ElDesc lineHash="123" ln="145" srcRngStartPos="0" srcRngEndPos="1" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="145" srcRngEndLn="152" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="[Line 145] Duplicated function in file 'DeadLock.cpp'" rngLn="145"/>
      </ElDescList>
    </DupViol>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="135" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="135" sev="3" auth="lyao" locRef="1" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="80c6bc4c-469d-3f2d-9fd3-70843895f60f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5aaaf8ef-2628-3535-9a53-bb5063bb2e3b" locEndPos="1" locType="sr" hash="972801700" locEndLn="135" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="136" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="136" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="409232213" rule.header="Tabs should be avoided" tool="c++test" lineHash="409232213" unbViolId="3d319648-e414-30e5-91bf-9781050acaab" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7918192a-341f-3ca3-a9e6-fe606a26f0bf" locEndPos="1" locType="sr" hash="972801700" locEndLn="136" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="136" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="136" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="409232213" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="409232213" unbViolId="29b96aa9-ea76-36b1-a69b-0a0e6cee622e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b42a3dd3-d270-3c11-90dd-4b15a8f7daa5" locEndPos="1" locType="sr" hash="972801700" locEndLn="136" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="136" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="136" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="409232213" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="409232213" unbViolId="9c511e2b-a436-3897-92b9-c746be81cd16" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e55f9ef-7742-3c87-aa5f-705ee6dd761c" locEndPos="1" locType="sr" hash="972801700" locEndLn="136" goals="0,"/>
    <DupViol msg="Duplicated code: 'exitGame = 0;&#x9;THREAD thread1, thread2, thread3, thread4;&#x9;THR...'" ln="136" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="136" sev="3" auth="lyao" locRef="1" rule="CDD-DUPC" lnHash="409232213" rule.header="Avoid code duplication" tool="c++test" lineHash="409232213" unbViolId="0ec2a0cb-fa10-3abf-98f7-7bdb71168083" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="c4b46203-8bdc-3ea7-907a-019529fcdf2e" locType="sr" locEndPos="47" urgent="true" hash="972801700" locEndLn="141" goals="1,">
      <ElDescList>
        <ElDesc lineHash="409232213" ln="136" srcRngStartPos="1" srcRngEndPos="47" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="136" srcRngEndLn="141" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="[Line 136] Duplicated code in file 'DeadLock.cpp'" rngLn="136"/>
        <ElDesc lineHash="409232213" ln="146" srcRngStartPos="1" srcRngEndPos="47" locRef="1" locType="sr" srcRnghash="972801700" srcRngStartln="146" srcRngEndLn="151" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" desc="[Line 146] Duplicated code in file 'DeadLock.cpp'" rngLn="146"/>
      </ElDescList>
    </DupViol>
    <StdViol msg="Global variable 'exitGame' is modified in function 'runGameThreads'" ln="136" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="136" sev="3" auth="lyao" locRef="1" rule="CODSTA-27" lnHash="409232213" rule.header="Avoid functions that modify global variables" tool="c++test" lineHash="409232213" unbViolId="8bad81f2-e351-3df4-ac47-33a582a8b542" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c4989bd-2d44-36d5-a704-d00079aeb98d" locEndPos="2" locType="sr" hash="972801700" locEndLn="136" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1123182240" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1123182240" unbViolId="56222e7a-f2bd-3724-ba58-8dd817e1579e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5102515b-836f-306e-9d17-57f552676763" locEndPos="1" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1123182240" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1123182240" unbViolId="2c3b7240-e76f-34a2-b72b-7f3885bc4d33" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ca9a37b-2451-3a70-986b-8e169e394420" locEndPos="1" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1123182240" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1123182240" unbViolId="0ad7d031-6179-3720-97b4-a48cf24dd796" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87eb81d4-47a5-3e42-9826-7a6686011e15" locEndPos="1" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="W-552: variable &quot;thread1&quot; was set but never used" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="4" auth="lyao" locRef="1" rule="PARSER-WARNING" lnHash="-1123182240" rule.header="Parser warning" tool="c++test" lineHash="-1123182240" unbViolId="0cbb1aca-96bd-31db-85c3-4fcb591e1991" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0909e92b-2c2c-36dc-aa99-fb4edc4b7430" locEndPos="9" locType="sr" urgent="true" hash="972801700" locEndLn="137" goals="1,"/>
    <StdViol msg="The variable of pointer or array type is declared: thread1" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="f1e1b33b-a2b4-3f78-893e-eab9b1705b31" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="834fc708-c887-3c8c-9440-46c9744fdfe4" locEndPos="9" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="The variable of pointer type is declared: thread1" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="0031dd2a-8be5-379b-b7fd-b83756b45698" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a624ab77-5550-383e-a767-d1c4d4c772b8" locEndPos="9" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Pointer variable 'thread1' uninitialized when declared" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="2" auth="lyao" locRef="1" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="5c2ad345-4458-3513-88a3-bc63e7b66d05" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="240542a4-ffd7-3b21-968d-bc2d99a80bad" locEndPos="9" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Local variable 'thread1' declared in function 'runGameThreads' is unnecessary" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="CERT_C-MSC13-a" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="dd2ff663-e709-3bd9-8bbb-564e45ef86c7" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21bafc38-7b95-39d1-b7f0-0e121e43e322" locEndPos="9" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Local variable 'thread1' declared in function 'runGameThreads' is unnecessary" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="4" auth="lyao" locRef="1" rule="OPT-06" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="00b495d3-7e18-3ee6-aabb-57a82b7a707a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c3affc1f-ba79-3a84-9d41-7f8a6062f974" locEndPos="9" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread1' variable should be commented" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="8aad5671-eb53-390d-8ae7-6dfffacef0ee" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be027e60-092f-3298-a770-bfbfedab981e" locEndPos="9" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread1' variable should be commented" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="9c24f5dc-9a06-397c-a173-a62f9afd74ae" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64a2293b-a555-3a32-81dd-c5401f729fab" locEndPos="9" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread1' variable has only one use" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="bab90528-a21a-33e4-b5a6-7da2ad56f4ff" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="30f78b41-0e2b-3212-bde1-a79df59e1820" locEndPos="9" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread1' variable has only one use" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="2" auth="lyao" locRef="1" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="b1141b6f-4a39-33f1-9082-8831ab536ded" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="4d69d1a7-6536-358b-bc46-4b3be29d1d72" locEndPos="9" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread1' variable has only one use" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="9a65591f-2075-3ed2-aaf6-a726c8dad799" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="0654dc66-4208-3d5c-89c9-15ce200cb2ff" locEndPos="9" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread2' variable has only one use" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="a430c2dd-5035-33dc-9af9-26620a4658b5" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="5ed29c51-8f7d-34fb-8bd9-a32d14221d45" locEndPos="18" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread2' variable has only one use" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="2" auth="lyao" locRef="1" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="a2f77474-bc34-336e-ac7f-45022e2fc156" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="d8c7e1f9-1c0f-3e91-8f2b-47a45467464b" locEndPos="18" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread2' variable has only one use" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="8ca2724d-f51d-3172-9719-1f086ba053bf" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="57c3279b-712a-3cf0-9951-4b2d284ed63a" locEndPos="18" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="W-552: variable &quot;thread2&quot; was set but never used" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="4" auth="lyao" locRef="1" rule="PARSER-WARNING" lnHash="-1123182240" rule.header="Parser warning" tool="c++test" lineHash="-1123182240" unbViolId="844a2b9a-f09a-34e6-a8c6-69fefe53d365" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e75b94b4-7ac5-3756-8cfe-24ca5696e88f" locEndPos="18" locType="sr" urgent="true" hash="972801700" locEndLn="137" goals="1,"/>
    <StdViol msg="The variable of pointer or array type is declared: thread2" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="3b059887-7b03-315d-8fb3-85518c378dc9" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a4d708b9-5993-3f8a-9d9f-897896f58e75" locEndPos="18" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="The variable of pointer type is declared: thread2" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="6f139458-da42-3e9e-ab4c-50b8c52cfa3f" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="985e1869-4c79-34d4-815b-b27c98c50d87" locEndPos="18" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="2" auth="lyao" locRef="1" rule="JSF-152" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="b48c2574-889c-392b-b818-e821c0e3f346" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd6c5736-819f-3aaf-aa84-333f76e74b8e" locEndPos="18" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A7_1_7-b" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="4e36d046-b2e8-34e7-8529-35f529f85c78" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fffb219b-a53e-311d-a211-b8e80ff1e0b8" locEndPos="18" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="HICPP-7_1_1-a" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="abc8cfce-26b0-3194-bb0e-bc60b3252610" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90a774cc-37ed-3111-8b8e-b7b10a77df59" locEndPos="18" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="FORMAT-29" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="d23c9559-4325-3c6e-879b-4da81cdecc70" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="363ccf81-eb66-3a6d-9e30-635a40fb53ce" locEndPos="18" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A7_1_7-c" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="7aeafae7-9c16-3c8b-815a-7d51b6af1388" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51109770-5fc9-3cf3-be0d-d391404b8976" locEndPos="18" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="FORMAT-33" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="03874752-a69e-3dfd-a576-45e814e9c0f9" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a230f99-b97f-3b05-97a5-c305a2564302" locEndPos="18" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="2" auth="lyao" locRef="1" rule="MISRA2008-8_0_1" lnHash="-1123182240" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-1123182240" unbViolId="8b607f47-44dd-33c0-b152-3ce711fcef66" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77766e30-b671-346a-87c3-965eab790b82" locEndPos="18" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="HICPP-7_1_1-b" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="7af232df-d0ca-3640-ab5d-6912ad86fe99" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f4f034e0-7f20-3448-b37d-be0d9151c4c9" locEndPos="18" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M8_0_1-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="ff8463cf-5ef5-3329-9120-836e59878cfa" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c898f07-1fbf-3d20-9d73-fddc45c8a563" locEndPos="18" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL04-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="15e67163-9c1c-31b6-9ca4-a5c084f2277f" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8c4dee0-a75b-39cb-b912-da7a30e362af" locEndPos="18" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Pointer variable 'thread2' uninitialized when declared" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="2" auth="lyao" locRef="1" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="6cb7ad77-455c-3e53-8e42-2c95911fc6fe" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="073bc4ac-2690-31a1-89d9-82fe7b0e67f3" locEndPos="18" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Local variable 'thread2' declared in function 'runGameThreads' is unnecessary" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="CERT_C-MSC13-a" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="914f0e85-15ed-38f0-b88b-74da0a747dbb" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef415a62-aa81-35ff-9fda-246e1c0dc362" locEndPos="18" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Local variable 'thread2' declared in function 'runGameThreads' is unnecessary" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="4" auth="lyao" locRef="1" rule="OPT-06" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="aaf779cd-4f5a-3241-823c-91e97bda2e56" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="881eb13c-898c-3b92-862b-2e4d91043916" locEndPos="18" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread2' variable should be commented" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="fc71afad-61a7-3620-a534-30d151288dbd" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54ba9a94-0e1d-335e-b039-51d746ae5b70" locEndPos="18" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread2' variable should be commented" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="a8487b93-3f87-3c57-a7e2-c3156c262bf4" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ed04f40-f279-316f-926b-d423531f0119" locEndPos="18" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="W-552: variable &quot;thread3&quot; was set but never used" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="4" auth="lyao" locRef="1" rule="PARSER-WARNING" lnHash="-1123182240" rule.header="Parser warning" tool="c++test" lineHash="-1123182240" unbViolId="3483aabf-851f-38a1-9e04-f1544eb5e839" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f94e22c9-d537-3833-a192-8d1798339292" locEndPos="27" locType="sr" urgent="true" hash="972801700" locEndLn="137" goals="1,"/>
    <StdViol msg="The variable of pointer or array type is declared: thread3" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="03da1472-b385-3dfe-a8b5-111bc31eeb3b" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9cd933d-66d9-386a-9a1b-9f8eeff98b87" locEndPos="27" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="The variable of pointer type is declared: thread3" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="79fb1fb0-4bc3-3581-8df5-a5fee9da20cf" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2209b520-b9d3-32d4-b14f-babb61a62a90" locEndPos="27" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="2" auth="lyao" locRef="1" rule="JSF-152" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="97f8c0fc-66f6-3074-a112-e7455a48d63d" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de7a33e6-653b-38ae-85ea-727ba3ee7093" locEndPos="27" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A7_1_7-b" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="26b8eb01-f455-334e-a702-2c35e3efecaa" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d7f1f263-5952-3a9f-a50a-8a7d631157ec" locEndPos="27" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="HICPP-7_1_1-a" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="e31354ac-e1f0-37e2-9094-9f76e29b2535" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47fa13eb-94a5-33b4-92e0-349ed0b84e66" locEndPos="27" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="FORMAT-29" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="e08aa247-9dfe-3a08-98f0-31479f9c6f94" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae96c6aa-878a-3199-aae6-af21c14668f3" locEndPos="27" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A7_1_7-c" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="6dcc5b8c-9047-336c-b132-a0d231832f7d" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c55accc8-54a1-35e3-854f-cca3a1195193" locEndPos="27" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="FORMAT-33" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="95ae6829-becc-3998-bace-bb5d0fcd85e3" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31e8307d-281c-31f0-8813-ce51cfc75128" locEndPos="27" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="2" auth="lyao" locRef="1" rule="MISRA2008-8_0_1" lnHash="-1123182240" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-1123182240" unbViolId="e2185fd2-e94a-3580-951a-dd927709d150" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="575018f0-e6d1-3b9f-afbe-22a6c760da16" locEndPos="27" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="HICPP-7_1_1-b" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="ae3fc82c-f5cc-35de-a4bd-f41c25ccfdc7" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b986ae2f-cc35-3562-a6ee-76a3b26c9b5c" locEndPos="27" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M8_0_1-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="2d9b9fca-e980-3ac7-ac9f-2b60bdbc0ad6" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37eb6e3e-e149-3171-b297-a609c95c68d5" locEndPos="27" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL04-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="43dd1ae5-810e-395a-8c38-dda98ff03aba" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95ac6280-792a-388f-94e4-d079353c4b45" locEndPos="27" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Pointer variable 'thread3' uninitialized when declared" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="2" auth="lyao" locRef="1" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="f60ef3d3-3a34-3e14-9aa1-4dc19d799313" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9688c956-1697-3720-863b-4a2aac6111f8" locEndPos="27" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Local variable 'thread3' declared in function 'runGameThreads' is unnecessary" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="CERT_C-MSC13-a" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="caf2d2ff-42ac-335f-9b17-64df72e24e11" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0209e57-36a2-34b7-be51-3fdb980a44c0" locEndPos="27" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Local variable 'thread3' declared in function 'runGameThreads' is unnecessary" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="4" auth="lyao" locRef="1" rule="OPT-06" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="ff0de6a7-abae-3c2b-b2f5-43b83301e73d" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="464b1ade-a280-3d3b-a74b-350ee6b3bbed" locEndPos="27" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread3' variable should be commented" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="72ffacd5-22a0-34db-847a-67f8b5407780" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="946ee209-5676-35e6-8fc7-c7766f4ab6ed" locEndPos="27" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread3' variable should be commented" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="3b56f98d-792b-3977-bb5f-5263ec12aaa8" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="235e17fa-803d-3fb5-a736-7937e5a64ba2" locEndPos="27" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread3' variable has only one use" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="fe39bf83-2b20-332f-9351-102a045236d3" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="c3f72023-02ce-3efa-9da5-a8bd92e77943" locEndPos="27" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread3' variable has only one use" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="2" auth="lyao" locRef="1" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="2aaafaf6-6268-39dd-9291-bf8bc5b0293e" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="4c254fd1-1efb-359d-97ce-cd2681e1f9a8" locEndPos="27" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread3' variable has only one use" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="add916b8-7318-3e95-bb8a-372db9d326e3" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="a186ac87-f9b1-34d3-8e09-f93a9b3674fd" locEndPos="27" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread4' variable has only one use" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="b29017cf-f60b-3308-af77-8a6c69e9f27b" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="db30210b-7f58-3e4a-9a36-630c4d347e1c" locEndPos="36" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread4' variable has only one use" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="2" auth="lyao" locRef="1" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="c6120285-f25c-34e2-baef-ae66ac1d3b78" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="24ecbc46-f8a9-3f3e-a8d3-824c41319118" locEndPos="36" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread4' variable has only one use" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="2d40c34a-7c44-321b-ba6a-3564a9eea48d" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="72be5e88-c35e-3afc-94fa-3781951b8219" locEndPos="36" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="W-552: variable &quot;thread4&quot; was set but never used" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="4" auth="lyao" locRef="1" rule="PARSER-WARNING" lnHash="-1123182240" rule.header="Parser warning" tool="c++test" lineHash="-1123182240" unbViolId="0638e56e-4dc7-353d-89f8-341f99ed3099" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10d8aaae-f8c7-3044-a99d-2a2f7fdde878" locEndPos="36" locType="sr" urgent="true" hash="972801700" locEndLn="137" goals="1,"/>
    <StdViol msg="The variable of pointer or array type is declared: thread4" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="5c707861-bb16-3419-9dbf-90543cf80d90" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d295445d-a3e3-3c77-bcbd-c656d688a676" locEndPos="36" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="The variable of pointer type is declared: thread4" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="080130cc-ba04-3743-8f78-483066a85530" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e327858-ddac-35f3-a99c-738799cf6150" locEndPos="36" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="2" auth="lyao" locRef="1" rule="JSF-152" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="4c317456-0533-30f0-a6f7-1cba710b7e8e" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3bad0f21-8853-34e6-adad-fa42840b025e" locEndPos="36" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A7_1_7-b" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="1c189f84-5046-31c3-8617-94d80bfb7544" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="647a1aab-4ca3-399d-b6c0-f5d934af8f5d" locEndPos="36" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="HICPP-7_1_1-a" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="231df0ae-4ed8-3ddd-8a9a-a8ace45933ae" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7a4d4a6-7062-397d-bd14-92cb89a97a56" locEndPos="36" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="FORMAT-29" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="3940f947-685d-37b1-a1af-02b6359592c8" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d6c03dd-ec87-3920-821e-d42b47951ed5" locEndPos="36" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A7_1_7-c" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="33478ae8-8c5a-3cc9-8acd-ea500acb846e" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc156668-c0ab-307a-be6b-9019c8889e4e" locEndPos="36" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="FORMAT-33" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="5bb90d61-7532-343c-966b-58270d09bc51" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96fe2904-a9ad-3bc2-9ef7-d6f8b6cd4588" locEndPos="36" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="2" auth="lyao" locRef="1" rule="MISRA2008-8_0_1" lnHash="-1123182240" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-1123182240" unbViolId="50e5daf3-7c61-3fe0-aa7d-8d1788217316" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a528872-dcaf-3bc5-a1a0-bd72160b418f" locEndPos="36" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="HICPP-7_1_1-b" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="82f9b89d-aef2-386a-a317-b0dda8955644" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6aa383ec-a913-3f74-9402-d9b877bad9e8" locEndPos="36" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M8_0_1-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="6529f064-11a1-3dfa-9470-7f7ea3936d44" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95473df0-e63b-3c4c-9279-9001664f5e6e" locEndPos="36" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL04-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="48c99102-ac44-3300-8424-4b9642b0baab" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8f93f21-2e6c-3cc3-8bcc-55497250d763" locEndPos="36" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Pointer variable 'thread4' uninitialized when declared" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="2" auth="lyao" locRef="1" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="157c3e84-9893-3b10-b97a-cea6a31a394a" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b78efb3e-9c0a-3b33-b532-a570f525c30f" locEndPos="36" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Local variable 'thread4' declared in function 'runGameThreads' is unnecessary" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="CERT_C-MSC13-a" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="4f67c3e2-59b6-346e-b181-7e3b2b4e986c" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3458e1bf-40ee-3896-96a3-71ea839dca90" locEndPos="36" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Local variable 'thread4' declared in function 'runGameThreads' is unnecessary" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="4" auth="lyao" locRef="1" rule="OPT-06" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="dc151c39-e701-3ab3-b282-b0ea4d231e50" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c8e452e-f549-371b-8b27-71e982a7d4a9" locEndPos="36" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread4' variable should be commented" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="39cd0b80-5a2f-36cf-a7a9-211abec95231" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88b19f22-cf94-38e9-a2ae-7c28cdceeb66" locEndPos="36" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread4' variable should be commented" ln="137" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="137" sev="3" auth="lyao" locRef="1" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="2caf0ec5-e4cb-3bfc-9c84-7e1724c95611" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cbc03451-58cd-3742-b7f7-08d531d88e86" locEndPos="36" locType="sr" hash="972801700" locEndLn="137" goals="0,"/>
    <StdViol msg="Value of &quot;thread1&quot; is never used" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-2_2_b" lnHash="-2033288726" rule.header="Avoid unused values" tool="c++test" lineHash="-2033288726" unbViolId="b25e5417-aed8-3110-88e1-c0b32da7169a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="4e069147-cd87-3964-bd8f-9d1bff32c98d" locEndPos="0" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="Value of &quot;thread1&quot; is never used" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_2_2-b" lnHash="-2033288726" rule.header="Avoid unused values" tool="c++test" lineHash="-2033288726" unbViolId="741abf81-095b-35f0-b0d7-5cf0202aef45" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="c50d3c36-d634-3ffd-9c05-92862aaa6e3d" locEndPos="0" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="Value of &quot;thread1&quot; is never used" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A0_1_1-a" lnHash="-2033288726" rule.header="Avoid unused values" tool="c++test" lineHash="-2033288726" unbViolId="1572bc5c-a7c3-383d-87fa-0f2c646b2fd4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="90aebec3-ebf0-3d74-99bc-275bddc4c8df" locEndPos="0" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="Value of &quot;thread1&quot; is never used" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL22-a" lnHash="-2033288726" rule.header="Avoid unused values" tool="c++test" lineHash="-2033288726" unbViolId="c7e45318-6d7a-3891-9f89-5b20e09aefc5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="dfae2e46-4ed9-3aa6-ab49-f52a8badcef5" locEndPos="0" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="Value of &quot;thread1&quot; is never used" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="2" auth="lyao" locRef="1" rule="MISRA2008-0_1_6" lnHash="-2033288726" rule.header="Avoid unused values" tool="c++test" lineHash="-2033288726" unbViolId="11bcca32-7a9c-35b7-91ee-179bb2ca48eb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="a4699fcc-8697-3a7a-ba0e-0a8171c9de98" locEndPos="0" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-2033288726" rule.header="Tabs should be avoided" tool="c++test" lineHash="-2033288726" unbViolId="61c0495b-1a0e-3663-9c01-f55c82db4379" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="35e5e4d5-ffcd-3aed-ad31-cf12bd34e32d" locEndPos="1" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-2033288726" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2033288726" unbViolId="058b0b55-b807-30ff-9b08-dc2a6e5c80ee" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43fa7d6d-7bff-3ee3-90e6-8937b7fe6064" locEndPos="1" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-2033288726" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2033288726" unbViolId="07572b94-adaf-3b40-becc-8a0fd8d142d2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc656e6a-a511-34af-a59f-8dfc81538eab" locEndPos="1" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="Value of &quot;thread1&quot; is never used" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="3" auth="lyao" locRef="1" rule="BD-PB-VOVR" lnHash="-2033288726" rule.header="Avoid unused values" tool="c++test" lineHash="-2033288726" unbViolId="05cf835e-98f1-3cda-94ac-89413f0ae305" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="31e1e152-f411-3738-886b-280f5a56384e" locEndPos="0" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="The global function 'CreateThread' is called without scope resolution operator '::'" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="5" auth="lyao" locRef="1" rule="CODSTA-CPP-23" lnHash="-2033288726" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-2033288726" unbViolId="71a83229-bd92-39ab-93e3-7f8d23ce157d" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2885f1d4-3a43-397c-b6b3-ffeab3635403" locEndPos="12" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="The type 'int' of function argument number '2' does not match declared type 'unsigned long long'" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="3" auth="lyao" locRef="1" rule="PB-11" lnHash="-2033288726" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-2033288726" unbViolId="1432495a-f3f6-3f4c-832d-4795c80887a0" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="566b8bb2-3628-3667-a1d2-71074e738abe" locEndPos="12" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="The type 'int' of function argument number '5' does not match declared type 'unsigned long'" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="3" auth="lyao" locRef="1" rule="PB-11" lnHash="-2033288726" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-2033288726" unbViolId="b8074adc-fde2-302d-b3fd-75fbd181aad9" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e90c240-996b-39b7-b8a1-e7cef5b66050" locEndPos="12" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="The type 'DWORD (void *)*' of function argument number '3' does not match declared type 'DWORD (LPVOID)*'" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="3" auth="lyao" locRef="1" rule="PB-11" lnHash="-2033288726" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-2033288726" unbViolId="58426859-6864-3104-a254-b65a7523f6df" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="faf9b6da-4702-3860-896a-3acc98ce33d8" locEndPos="12" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A4_10_1-b" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="a03fd2c8-4a92-3bd3-9b24-d2cd527771e0" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dad431bb-8b96-376a-9ed8-17800c4be6c9" locEndPos="25" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="4" auth="lyao" locRef="1" rule="HICPP-2_5_3-a" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="cb323216-0220-3c34-814e-c4597a29aa5a" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91533b4b-bd7e-3740-ab83-dbd4679ce3f9" locEndPos="25" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="4" auth="lyao" locRef="1" rule="CODSTA-MCPP-04" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="c68fd764-401a-3a25-9882-5c5dda98c2f1" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70621309-2a8a-31f2-b465-98912e16b8e4" locEndPos="25" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="3" auth="lyao" locRef="1" rule="CODSTA-131" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="2b863410-5db8-3905-a79a-277b4d290095" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf92102c-f7c4-33e4-ad48-7a14d523dddb" locEndPos="25" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-2033288726" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-2033288726" unbViolId="e29a8195-e59d-3110-81d0-be3cc9a4e0ff" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ec39a16b-9423-30a0-805f-c9839fe3bbf5" locEndPos="25" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="3b7ff205-b6fe-3f63-b274-93d089fce5de" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9653bdc-3648-37ae-aba1-0a509f286e71" locEndPos="25" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="2" auth="lyao" locRef="1" rule="MISRA2008-5_0_4_a" lnHash="-2033288726" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-2033288726" unbViolId="6958ac40-701f-3927-8ac9-8c9165654d42" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eafca20b-ce4c-3e97-b270-f53e00e1e20f" locEndPos="28" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M5_0_4-a" lnHash="-2033288726" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-2033288726" unbViolId="f714f673-ab59-3080-a619-585fdb7efcdd" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e560b58-1d11-3815-9f52-e085452fd04b" locEndPos="28" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="3" auth="lyao" locRef="1" rule="MISRA2004-10_1_a" lnHash="-2033288726" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-2033288726" unbViolId="90936b59-e3a2-3c5c-8380-26d560f191e6" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f78833ad-de2a-350e-9f69-f37e1a5860cf" locEndPos="28" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="3" auth="lyao" locRef="1" rule="HICPP-4_2_1-a" lnHash="-2033288726" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-2033288726" unbViolId="2c83f758-cc79-3278-b378-022623fd0f09" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9054cac-5d19-3fed-81d9-0b18d2ca962a" locEndPos="28" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="3" auth="lyao" locRef="1" rule="CERT_CPP-EXP56-a" lnHash="-2033288726" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-2033288726" unbViolId="5273fc49-410f-3d2d-9396-df708e42ca8d" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e95185f-e877-3528-8003-11f35c5a4b21" locEndPos="31" locType="sr" urgent="true" hash="972801700" locEndLn="138" goals="1,"/>
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-96" lnHash="-2033288726" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-2033288726" unbViolId="443ab907-ed43-380e-9e24-494a3d4b588c" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5604e854-97fa-3139-99c9-c5b530e25fdb" locEndPos="31" locType="sr" urgent="true" hash="972801700" locEndLn="138" goals="1,"/>
    <StdViol msg="Pointer to function 'GameLogic_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="3" auth="lyao" locRef="1" rule="MISRA2004-16_9" lnHash="-2033288726" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-2033288726" unbViolId="7c3eaa12-28e5-3cf4-b762-b5a68a64e381" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d77f591d-daf4-3f07-89a8-9b81eccd608c" locEndPos="31" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="Pointer to function 'GameLogic_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M8_4_4-a" lnHash="-2033288726" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-2033288726" unbViolId="b5704e61-a301-3419-8eb0-94ef0b34abca" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ccab2e3b-daa6-3aa2-9033-396e63ecdaa3" locEndPos="31" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="Pointer to function 'GameLogic_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="2" auth="lyao" locRef="1" rule="MISRA2008-8_4_4" lnHash="-2033288726" rule.header="A function identifier shall either be used to call the function or it shall be preceded by '&amp;'" tool="c++test" lineHash="-2033288726" unbViolId="c17a4f38-32b8-3e30-9b06-380af12a1499" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e855267f-480a-3b98-94c9-a9d99b2e39cb" locEndPos="31" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A4_10_1-b" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="dbef27e1-a4bd-309e-b0ad-8a941101ac22" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8e0f5ffd-ac28-3d37-a422-5bdebe847393" locEndPos="42" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="4" auth="lyao" locRef="1" rule="HICPP-2_5_3-a" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="a1e59b8c-d588-3c2e-9d60-60318765509a" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cfbfe058-e314-3799-a9c7-f97f920c5557" locEndPos="42" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="4" auth="lyao" locRef="1" rule="CODSTA-MCPP-04" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="cd6bfcd7-a907-3df1-a4ca-818326d8e578" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf849349-131a-36e1-b9ec-e211e6e712bb" locEndPos="42" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="2" auth="lyao" locRef="1" rule="MISRA2008-5_0_4_a" lnHash="-2033288726" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-2033288726" unbViolId="1c5a93ff-4250-3c42-ad50-0ab27ac8314f" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d99cc9c8-f6d5-3b2c-a1d6-bf82a08f713f" locEndPos="42" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M5_0_4-a" lnHash="-2033288726" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-2033288726" unbViolId="bd5e4a99-dd5b-321e-8116-deecc90aa6c8" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d59666e-db7d-3f63-981c-80c4a4f88e6f" locEndPos="42" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="3" auth="lyao" locRef="1" rule="MISRA2004-10_1_a" lnHash="-2033288726" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-2033288726" unbViolId="70a9ece3-adec-3b7f-bf11-91d590cfdeea" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4af55406-e6a8-3b28-a5ad-bf0764cd99b3" locEndPos="42" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="3" auth="lyao" locRef="1" rule="CODSTA-131" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="9e2618c7-911a-3a8f-a135-292e2671ea33" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1418955f-0662-3653-bc20-4b5f6a3aebaa" locEndPos="42" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-2033288726" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-2033288726" unbViolId="aae9a786-9286-322b-8aae-5545ca7a11b7" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f796fa95-8e5b-35ae-a402-05d564cab43a" locEndPos="42" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="9716a1aa-9290-3c41-84c2-891551dfb98c" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="89dedcec-0fcc-3945-a528-c217fddb167e" locEndPos="42" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="3" auth="lyao" locRef="1" rule="CODSTA-131" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="ab29c445-4886-3d33-8861-02967bce55dd" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c68c45a1-4d21-3117-9a4e-1d017c9da49a" locEndPos="42" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-2033288726" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-2033288726" unbViolId="1aab7ebd-dd14-3857-9d21-b07547b690a6" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4095277-7f61-3b8d-9350-56152ec7fbcf" locEndPos="42" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="22f031f2-2269-3922-a385-c0287bfbfe7f" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54f6e3a8-c83c-3dbb-9624-a1cdc3d547aa" locEndPos="42" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="138" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="138" sev="3" auth="lyao" locRef="1" rule="HICPP-4_2_1-a" lnHash="-2033288726" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-2033288726" unbViolId="0c15f767-ea71-39ef-96fb-bef448e73fb9" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f6e1f98-319f-37a4-8b9a-3b506bace263" locEndPos="42" locType="sr" hash="972801700" locEndLn="138" goals="0,"/>
    <StdViol msg="Value of &quot;thread2&quot; is never used" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="3" auth="lyao" locRef="1" rule="BD-PB-VOVR" lnHash="-1824414877" rule.header="Avoid unused values" tool="c++test" lineHash="-1824414877" unbViolId="cb47469d-a2e1-3c4e-8714-5b5de91121c4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="1bdc7347-5aa1-3f90-b90f-97ec1c68f431" locEndPos="0" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1824414877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1824414877" unbViolId="ca7a471a-b7cf-326a-8fba-e2d69c1e53a1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b67c0d3a-3254-3840-94e9-fba339365781" locEndPos="1" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1824414877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1824414877" unbViolId="c511e458-7d91-3507-beb8-ac0ecb71caff" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0246db56-09bb-38a7-bf24-018e316fdf30" locEndPos="1" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1824414877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1824414877" unbViolId="3a5b1720-4fd7-3080-acfa-cce0b646fc52" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f288884-5ce2-33b8-a6a7-3098d55bfba3" locEndPos="1" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="Value of &quot;thread2&quot; is never used" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-2_2_b" lnHash="-1824414877" rule.header="Avoid unused values" tool="c++test" lineHash="-1824414877" unbViolId="088186c2-7ecf-3f47-b399-3856c54252f2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="700d1f04-5407-31ff-b62f-6c26ad9aa480" locEndPos="0" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="Value of &quot;thread2&quot; is never used" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_2_2-b" lnHash="-1824414877" rule.header="Avoid unused values" tool="c++test" lineHash="-1824414877" unbViolId="ac035aa4-c21b-3d35-9b02-40cdf96f81b9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="9e42c124-3c62-3e07-b577-06d0274b2183" locEndPos="0" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="Value of &quot;thread2&quot; is never used" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A0_1_1-a" lnHash="-1824414877" rule.header="Avoid unused values" tool="c++test" lineHash="-1824414877" unbViolId="0094777d-2be9-3baf-b867-7b4e0c246f0e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="874433d0-4323-3afe-b22f-bd6c3e1730eb" locEndPos="0" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="Value of &quot;thread2&quot; is never used" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL22-a" lnHash="-1824414877" rule.header="Avoid unused values" tool="c++test" lineHash="-1824414877" unbViolId="b21f72d7-428d-3c65-a6cf-af492a25be86" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="f36392d8-b089-38b6-9847-194249b1434d" locEndPos="0" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="Value of &quot;thread2&quot; is never used" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="2" auth="lyao" locRef="1" rule="MISRA2008-0_1_6" lnHash="-1824414877" rule.header="Avoid unused values" tool="c++test" lineHash="-1824414877" unbViolId="045880e3-861d-314e-8812-9d4704fabe5b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="92aa4d95-4802-364a-a696-5d2e28bb6583" locEndPos="0" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="The global function 'CreateThread' is called without scope resolution operator '::'" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="5" auth="lyao" locRef="1" rule="CODSTA-CPP-23" lnHash="-1824414877" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-1824414877" unbViolId="8a6610eb-4f33-368f-bf3c-6bbc326bb0cf" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6682c582-8091-3853-ac70-709bd3be7cc1" locEndPos="12" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="The type 'int' of function argument number '2' does not match declared type 'unsigned long long'" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="3" auth="lyao" locRef="1" rule="PB-11" lnHash="-1824414877" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-1824414877" unbViolId="50b2237d-bcc3-3914-80bd-5a96bc44b16d" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c02abbd0-f187-3740-bde9-5b2b21dcc04c" locEndPos="12" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="The type 'int' of function argument number '5' does not match declared type 'unsigned long'" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="3" auth="lyao" locRef="1" rule="PB-11" lnHash="-1824414877" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-1824414877" unbViolId="78a24b64-4e49-378d-b1e6-6844bb88b9b4" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="392fb2f6-c9e2-355d-a9a3-5ec7577fa669" locEndPos="12" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="The type 'DWORD (void *)*' of function argument number '3' does not match declared type 'DWORD (LPVOID)*'" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="3" auth="lyao" locRef="1" rule="PB-11" lnHash="-1824414877" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-1824414877" unbViolId="26963d84-95f6-33cd-8929-49f44a09abef" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d925242-8711-3f0f-9aa2-e026de02bdd4" locEndPos="12" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A4_10_1-b" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="52321e11-aa1a-3030-be77-a3e46a26d99c" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f1c0cede-e074-310a-a78f-2c3bd69c2d4a" locEndPos="25" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="4" auth="lyao" locRef="1" rule="HICPP-2_5_3-a" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="e335b99c-8093-3c88-bb86-075b08cc8e39" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a65ae93a-46fc-36d8-98fd-47a3c4475a2b" locEndPos="25" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="4" auth="lyao" locRef="1" rule="CODSTA-MCPP-04" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="ff9f6f29-25f8-3bdb-91c3-57238d0972fb" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd08dd38-5d41-32b4-bf75-d4a5e2d28b14" locEndPos="25" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="3" auth="lyao" locRef="1" rule="CODSTA-131" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="6315ad3e-8c2c-3b29-b7d4-d7261646f79f" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a70b9783-20eb-3d1b-b6ae-b98003269307" locEndPos="25" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-1824414877" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1824414877" unbViolId="b4682332-71ad-3ca2-9611-1a1da6a949fd" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3da33dbf-a762-3ed7-b849-8c183be80794" locEndPos="25" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="fdc834f8-3e5d-3103-b7df-1748cb49f5b5" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eefff20a-6396-3e19-8abd-041fb3895928" locEndPos="25" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="2" auth="lyao" locRef="1" rule="MISRA2008-5_0_4_a" lnHash="-1824414877" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-1824414877" unbViolId="9c2b44c9-d71b-3df5-a46e-91b2d7442751" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d8d44b8-c8f9-3f6d-8b55-edb8e62d742e" locEndPos="28" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M5_0_4-a" lnHash="-1824414877" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1824414877" unbViolId="268f338f-84f8-3a1d-ac0f-008a0b8d38c5" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95930fc3-31da-3b7c-be90-5659d77618ea" locEndPos="28" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="3" auth="lyao" locRef="1" rule="MISRA2004-10_1_a" lnHash="-1824414877" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1824414877" unbViolId="ba40bad1-0c52-38d4-a17c-d182ef1a4c2d" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff4928b9-c3fd-3226-8638-b3f0a5ce6c53" locEndPos="28" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="3" auth="lyao" locRef="1" rule="HICPP-4_2_1-a" lnHash="-1824414877" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-1824414877" unbViolId="9329a51e-526e-3a1b-a732-fbb6194fbb4d" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aed506d6-aaca-32aa-a5dc-6b06643cfcf7" locEndPos="28" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="3" auth="lyao" locRef="1" rule="CERT_CPP-EXP56-a" lnHash="-1824414877" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1824414877" unbViolId="abbb8140-4dc3-3cbf-a566-95143b7c51c8" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5dc08194-2577-338f-be69-2a54fb22bf3f" locEndPos="31" locType="sr" urgent="true" hash="972801700" locEndLn="139" goals="1,"/>
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-96" lnHash="-1824414877" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1824414877" unbViolId="e74d5af2-89a2-3834-acdd-970f73ddd4b3" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e69200dd-d781-34d5-9dea-74e7a0754d80" locEndPos="31" locType="sr" urgent="true" hash="972801700" locEndLn="139" goals="1,"/>
    <StdViol msg="Pointer to function 'Controller_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="3" auth="lyao" locRef="1" rule="MISRA2004-16_9" lnHash="-1824414877" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-1824414877" unbViolId="462fe46e-4cf7-3b2c-a610-e23ef5ddca8e" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87f371c0-403a-3ac7-adc1-0c689f231bc2" locEndPos="31" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="Pointer to function 'Controller_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M8_4_4-a" lnHash="-1824414877" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-1824414877" unbViolId="3184da1d-492f-39d4-80e5-42cab8898780" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="099ceb86-38d6-373c-9c2f-0eb09a08cd95" locEndPos="31" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="Pointer to function 'Controller_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="2" auth="lyao" locRef="1" rule="MISRA2008-8_4_4" lnHash="-1824414877" rule.header="A function identifier shall either be used to call the function or it shall be preceded by '&amp;'" tool="c++test" lineHash="-1824414877" unbViolId="27095afb-2a52-380f-b2b4-3a34d91de603" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce85ea7b-fb27-374a-92b3-85f924c35acc" locEndPos="31" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A4_10_1-b" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="3bf0b2b8-c893-33e1-a501-ee3e7e35d7f7" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b92e2bb1-92e2-3274-a173-4d15b2833acb" locEndPos="43" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="4" auth="lyao" locRef="1" rule="HICPP-2_5_3-a" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="51941437-42b6-3f36-95b7-d68ddf7001b2" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8574033f-2c81-38db-8845-16b43a2ab763" locEndPos="43" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="4" auth="lyao" locRef="1" rule="CODSTA-MCPP-04" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="d9fbe5da-42be-34a0-9e5c-35ec723e7719" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f370f5dc-ba4a-322b-b82e-b43e88f1d411" locEndPos="43" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="2" auth="lyao" locRef="1" rule="MISRA2008-5_0_4_a" lnHash="-1824414877" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-1824414877" unbViolId="f1a69d01-dfd3-3f43-bc2c-e7f5018e6287" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17b6376e-091a-32c9-8afc-56cfa9a1e013" locEndPos="43" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M5_0_4-a" lnHash="-1824414877" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1824414877" unbViolId="9eeb8698-2f10-3b76-a7f1-e9773e69ecaf" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0ec2311-950e-37a3-a48c-3564cf5e31b6" locEndPos="43" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="3" auth="lyao" locRef="1" rule="MISRA2004-10_1_a" lnHash="-1824414877" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1824414877" unbViolId="9242b598-35a5-31b1-98a2-8a8725cce5bd" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47bc981e-c850-35fb-b9da-f12c8df1f1c3" locEndPos="43" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="3" auth="lyao" locRef="1" rule="CODSTA-131" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="9d59bffd-aba6-3815-ba86-266bc9b4afab" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d8da041-8507-38b3-833a-d1154d2b6488" locEndPos="43" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-1824414877" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1824414877" unbViolId="0f345ea0-cb50-3b67-b8fd-2336e832c3cb" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eecc569b-89bc-3797-bc9f-cc2905ea763b" locEndPos="43" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="4544e91e-d51e-3284-8092-f0ec53bc5544" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2674b1c-4f55-331a-a4e4-07f827be1893" locEndPos="43" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="3" auth="lyao" locRef="1" rule="CODSTA-131" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="8bb4e9f1-69be-3fed-8ff6-7d5e961b1f1d" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="df29f701-a3b7-31b6-8fd7-e25b6fd4aa31" locEndPos="43" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-1824414877" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1824414877" unbViolId="4bcedb56-6345-38b3-a770-d58d74b780b9" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0736a314-1680-311d-b429-713d26b1289e" locEndPos="43" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="1a603804-9c7a-359f-a626-120964761437" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1f44dea-912f-32c8-b548-a644151b7136" locEndPos="43" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="139" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="139" sev="3" auth="lyao" locRef="1" rule="HICPP-4_2_1-a" lnHash="-1824414877" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-1824414877" unbViolId="d64684dd-cc75-37c6-8488-e95c9da342ef" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9b3cdeb0-c43f-38e6-9d82-30d7d2060897" locEndPos="43" locType="sr" hash="972801700" locEndLn="139" goals="0,"/>
    <StdViol msg="Value of &quot;thread3&quot; is never used" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-2_2_b" lnHash="-1305984162" rule.header="Avoid unused values" tool="c++test" lineHash="-1305984162" unbViolId="b957f816-a5fd-3820-9c5c-a0f7e7bf6034" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="337daf18-3477-3292-b72d-6e256dddfe11" locEndPos="0" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="Value of &quot;thread3&quot; is never used" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_2_2-b" lnHash="-1305984162" rule.header="Avoid unused values" tool="c++test" lineHash="-1305984162" unbViolId="f989f167-ad5a-32a2-a340-31079061df82" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="7ebf57b0-a5dd-3912-8552-22e5a0c04d4d" locEndPos="0" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="Value of &quot;thread3&quot; is never used" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A0_1_1-a" lnHash="-1305984162" rule.header="Avoid unused values" tool="c++test" lineHash="-1305984162" unbViolId="75fc5538-ae87-3d1f-9a88-80ed09430910" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="dc421d40-8813-3621-8b6c-a5d08cdcc8c4" locEndPos="0" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="Value of &quot;thread3&quot; is never used" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL22-a" lnHash="-1305984162" rule.header="Avoid unused values" tool="c++test" lineHash="-1305984162" unbViolId="5458f5c0-5f59-3e39-9dda-deb744482a03" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="f2572171-ed9c-3a35-ace4-5afcd352db73" locEndPos="0" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="Value of &quot;thread3&quot; is never used" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="2" auth="lyao" locRef="1" rule="MISRA2008-0_1_6" lnHash="-1305984162" rule.header="Avoid unused values" tool="c++test" lineHash="-1305984162" unbViolId="b98158a5-787b-30b3-859d-5f4a961864d7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="49a44acb-fdad-3163-8401-2171eaba4c7e" locEndPos="0" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1305984162" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1305984162" unbViolId="c193fba3-b75e-3e7a-bcc7-54169258ff17" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa95e0f3-a540-3b64-aaf4-a14102809a22" locEndPos="1" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1305984162" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1305984162" unbViolId="3083d676-ea3c-3011-a7b7-775103f4c05d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a239099-1451-3968-b20c-507e8da87c6a" locEndPos="1" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1305984162" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1305984162" unbViolId="c3835f9a-36b2-380a-8b96-309f95344983" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="123fc33d-79b2-3155-bae2-171be0f8d559" locEndPos="1" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="Value of &quot;thread3&quot; is never used" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="3" auth="lyao" locRef="1" rule="BD-PB-VOVR" lnHash="-1305984162" rule.header="Avoid unused values" tool="c++test" lineHash="-1305984162" unbViolId="6f56ed5e-a676-39ed-b33f-a4871a6c2093" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="95dd47b9-36b4-3734-85e4-cce202b4a79a" locEndPos="0" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="The type 'int' of function argument number '5' does not match declared type 'unsigned long'" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="3" auth="lyao" locRef="1" rule="PB-11" lnHash="-1305984162" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-1305984162" unbViolId="d6e1c936-71e2-3314-9be0-a4dca80071db" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="460388be-e9c4-3e94-a1b4-fd9c51aa4787" locEndPos="12" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="The type 'DWORD (void *)*' of function argument number '3' does not match declared type 'DWORD (LPVOID)*'" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="3" auth="lyao" locRef="1" rule="PB-11" lnHash="-1305984162" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-1305984162" unbViolId="8669bf1e-f23d-34c0-b222-ef2fcc47c321" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e79dc797-c133-3567-8d24-f1071fcbf703" locEndPos="12" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="The global function 'CreateThread' is called without scope resolution operator '::'" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="5" auth="lyao" locRef="1" rule="CODSTA-CPP-23" lnHash="-1305984162" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-1305984162" unbViolId="e7a89e5f-4d12-33bc-9f87-626cf669dd8e" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff8c5404-eb79-377a-bf76-efd3a1843340" locEndPos="12" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="The type 'int' of function argument number '2' does not match declared type 'unsigned long long'" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="3" auth="lyao" locRef="1" rule="PB-11" lnHash="-1305984162" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-1305984162" unbViolId="8e57c5ec-1a01-3f13-b249-f91918a7679c" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2273aa6-7cf4-3ac5-a462-b14a9e324a13" locEndPos="12" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A4_10_1-b" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="584e5d49-e09c-3e8c-8866-309ef9d2cda2" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16d9668f-8288-321f-9a81-7fcbd9fd55d0" locEndPos="25" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="4" auth="lyao" locRef="1" rule="HICPP-2_5_3-a" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="8e5f2988-dbcc-3f63-8138-0911aad7d8c7" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c262327-5dae-38fe-ad30-2a3916ddaee6" locEndPos="25" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="4" auth="lyao" locRef="1" rule="CODSTA-MCPP-04" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="b7fc24f2-cbf5-3b06-b62b-6082b6fdbb44" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="913117b7-0aea-3e90-91db-df8301ea43cb" locEndPos="25" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="3" auth="lyao" locRef="1" rule="CODSTA-131" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="bd684180-0715-3b6c-9198-051b8bd8e77b" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="187be416-3106-3390-a335-999fd3e71874" locEndPos="25" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-1305984162" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1305984162" unbViolId="5860fe5f-a6c5-3257-a2c4-93cb28012b13" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ffba38f-b22b-3012-b5a6-9091ea627956" locEndPos="25" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="cee9b048-8af7-3894-a9fc-b518b84e7518" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f462bf83-0ca6-3ed9-8916-48fbf3e33ba5" locEndPos="25" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="2" auth="lyao" locRef="1" rule="MISRA2008-5_0_4_a" lnHash="-1305984162" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-1305984162" unbViolId="0991891f-32eb-3705-becb-6c74b065df16" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4ddd132-6f8d-312b-bd94-51cbc984dd08" locEndPos="28" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M5_0_4-a" lnHash="-1305984162" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1305984162" unbViolId="37d8fecb-aba5-380f-ab75-cf51e7dcb0f1" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab66d4d7-4524-34b8-abc0-5ff20bcc484a" locEndPos="28" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="3" auth="lyao" locRef="1" rule="MISRA2004-10_1_a" lnHash="-1305984162" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1305984162" unbViolId="e6791661-6ae8-351a-8288-438c7514ffef" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88cdea09-e341-3dc3-bc26-967b6f49ed70" locEndPos="28" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="3" auth="lyao" locRef="1" rule="HICPP-4_2_1-a" lnHash="-1305984162" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-1305984162" unbViolId="45d015fd-fe3a-39ce-af9c-86ff61f58106" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="102101f2-73b9-3c35-bc31-7b051e987ad3" locEndPos="28" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="3" auth="lyao" locRef="1" rule="CERT_CPP-EXP56-a" lnHash="-1305984162" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1305984162" unbViolId="4618e6b6-d194-3c98-8309-0d340e1caf5b" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9874d384-ef3b-31df-8ba1-34454439f020" locEndPos="31" locType="sr" urgent="true" hash="972801700" locEndLn="140" goals="1,"/>
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-96" lnHash="-1305984162" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1305984162" unbViolId="989f1c07-20e7-3835-bb9d-d55e04a5112b" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23e305e7-70ec-3ae2-af3a-c403f17583ec" locEndPos="31" locType="sr" urgent="true" hash="972801700" locEndLn="140" goals="1,"/>
    <StdViol msg="Pointer to function 'Physics_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="3" auth="lyao" locRef="1" rule="MISRA2004-16_9" lnHash="-1305984162" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-1305984162" unbViolId="1c5f024e-caaf-34c3-8ac5-6d787995de6d" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52bc1ac9-38b6-3d14-98dd-ed9c9c3410e1" locEndPos="31" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="Pointer to function 'Physics_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M8_4_4-a" lnHash="-1305984162" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-1305984162" unbViolId="86c0fd58-36e3-3358-aa18-5c11cf631174" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a062f7c0-5e71-3a46-b403-0acf6ce3487b" locEndPos="31" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="Pointer to function 'Physics_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="2" auth="lyao" locRef="1" rule="MISRA2008-8_4_4" lnHash="-1305984162" rule.header="A function identifier shall either be used to call the function or it shall be preceded by '&amp;'" tool="c++test" lineHash="-1305984162" unbViolId="2ac98535-0ead-3a04-bc93-38a40f73c411" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="49a38982-95b6-393f-9dc8-7d8bbe2c55e2" locEndPos="31" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A4_10_1-b" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="f205cf3a-fcb4-387f-8be5-da8964b7737e" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85b08f01-b130-3771-a24c-dd8ba3f9545c" locEndPos="49" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="4" auth="lyao" locRef="1" rule="HICPP-2_5_3-a" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="e4100780-8add-3281-9a64-d4ff356c3fa8" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78208dcc-2c8f-379d-85f7-ad1fad253758" locEndPos="49" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="4" auth="lyao" locRef="1" rule="CODSTA-MCPP-04" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="c9bf4a41-cc5b-3fe8-8f74-f9558e4cb977" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10efd005-1ff7-37c6-823f-0fb6305d2cf6" locEndPos="49" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="2" auth="lyao" locRef="1" rule="MISRA2008-5_0_4_a" lnHash="-1305984162" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-1305984162" unbViolId="34891549-c585-3fd0-8de4-796a3a1a53c2" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e6d8c951-10f7-3048-a5df-883cb8347f1c" locEndPos="49" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M5_0_4-a" lnHash="-1305984162" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1305984162" unbViolId="ab062410-4e9f-3126-8ad0-8b8d4c751e97" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="819d91ca-5f75-37c5-88ce-f07748423312" locEndPos="49" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="3" auth="lyao" locRef="1" rule="MISRA2004-10_1_a" lnHash="-1305984162" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1305984162" unbViolId="4032e6c9-62e1-344b-a5a1-ec47f9067ec5" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23452b07-e5d7-36f7-840c-e83a338160f0" locEndPos="49" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="3" auth="lyao" locRef="1" rule="CODSTA-131" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="fbd17447-1fe3-3d61-99d1-85c9effd54a1" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1059bb00-6a0d-333d-b9a0-015938d2fee9" locEndPos="49" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-1305984162" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1305984162" unbViolId="645d4a74-fef2-34b9-9e2a-47bf5568d1f4" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f2ab3c9-e2c9-370c-afc9-44ac67cb8721" locEndPos="49" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="b9144751-5a5f-3daa-a0f1-3fc822537e1f" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68309d20-f8d5-3c5d-94a7-6248ba68be0f" locEndPos="49" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="3" auth="lyao" locRef="1" rule="CODSTA-131" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="55671f41-7876-372f-9d23-cee63920e398" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8333c04e-14d9-3599-906e-d820a6fb9815" locEndPos="49" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-1305984162" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1305984162" unbViolId="5b1213e9-feba-3cea-81f2-5f6f6d37dc97" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0bc08dce-6fd8-3a1b-9640-5fb7aef241cd" locEndPos="49" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="52619313-11c1-3be0-a917-e4073e6d4b1d" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aeb72628-26e5-30fd-bcf4-196425923d85" locEndPos="49" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="140" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="140" sev="3" auth="lyao" locRef="1" rule="HICPP-4_2_1-a" lnHash="-1305984162" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-1305984162" unbViolId="b5d0e58d-b392-378e-9438-69e1cf30eb6c" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="229960ad-e560-3472-955e-0f8ce62a16ad" locEndPos="49" locType="sr" hash="972801700" locEndLn="140" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-604051279" rule.header="Tabs should be avoided" tool="c++test" lineHash="-604051279" unbViolId="ed7ff2aa-d53f-3269-add6-630fcb4287e8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2534a2e6-0431-399b-b871-1dcc39a6c495" locEndPos="1" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-604051279" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-604051279" unbViolId="a3ef1a62-4641-340b-91b5-c02f37ed6349" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e3b6d93-dc24-382a-9a16-7f7f0fc8dff7" locEndPos="1" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-604051279" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-604051279" unbViolId="c4e39c2c-8e28-3041-9ccd-28b86d526b9d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06fb01f6-231d-3118-a6b3-42d8463f41d6" locEndPos="1" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="Value of &quot;thread4&quot; is never used" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="3" auth="lyao" locRef="1" rule="BD-PB-VOVR" lnHash="-604051279" rule.header="Avoid unused values" tool="c++test" lineHash="-604051279" unbViolId="ba591265-80fd-3748-9c4e-576573dc8d0b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="de220acf-170b-3fc3-95e8-4fc057a073b5" locEndPos="0" locType="sr" hash="972801700" locEndLn="142" goals="0,"/>
    <StdViol msg="Value of &quot;thread4&quot; is never used" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-2_2_b" lnHash="-604051279" rule.header="Avoid unused values" tool="c++test" lineHash="-604051279" unbViolId="0a0d4109-0bcb-3d22-92a7-2b870b542097" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="b088a9fe-6277-3279-a3aa-343b6e5fa59b" locEndPos="0" locType="sr" hash="972801700" locEndLn="142" goals="0,"/>
    <StdViol msg="Value of &quot;thread4&quot; is never used" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_2_2-b" lnHash="-604051279" rule.header="Avoid unused values" tool="c++test" lineHash="-604051279" unbViolId="40a67953-dcaf-38ad-8f28-3dac23593e15" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="0f8b5e8d-167d-3527-8978-e2a0b5d03f41" locEndPos="0" locType="sr" hash="972801700" locEndLn="142" goals="0,"/>
    <StdViol msg="Value of &quot;thread4&quot; is never used" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A0_1_1-a" lnHash="-604051279" rule.header="Avoid unused values" tool="c++test" lineHash="-604051279" unbViolId="fcedd223-b580-30a2-af7e-8373aff86b29" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="ea8631c1-371b-3059-9ac0-ba4a22ca384b" locEndPos="0" locType="sr" hash="972801700" locEndLn="142" goals="0,"/>
    <StdViol msg="Value of &quot;thread4&quot; is never used" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL22-a" lnHash="-604051279" rule.header="Avoid unused values" tool="c++test" lineHash="-604051279" unbViolId="c7685632-3881-3006-9450-08c03e8ef0d0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="99e85145-b828-32fe-a40c-855819e16e59" locEndPos="0" locType="sr" hash="972801700" locEndLn="142" goals="0,"/>
    <StdViol msg="Value of &quot;thread4&quot; is never used" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="2" auth="lyao" locRef="1" rule="MISRA2008-0_1_6" lnHash="-604051279" rule.header="Avoid unused values" tool="c++test" lineHash="-604051279" unbViolId="f8e433a2-bdf7-3064-a696-3b9bc792db99" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="7a9e9827-21a0-3528-9d86-57f553b1fc0d" locEndPos="0" locType="sr" hash="972801700" locEndLn="142" goals="0,"/>
    <StdViol msg="The type 'int' of function argument number '2' does not match declared type 'unsigned long long'" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="3" auth="lyao" locRef="1" rule="PB-11" lnHash="-604051279" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-604051279" unbViolId="ec8794b3-8b51-3b77-a607-56f1685a7202" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5f6af76-1bd9-342c-baa1-f7db1dcc9589" locEndPos="12" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="The type 'int' of function argument number '5' does not match declared type 'unsigned long'" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="3" auth="lyao" locRef="1" rule="PB-11" lnHash="-604051279" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-604051279" unbViolId="0f267818-f6ee-38d9-b359-02aeba1b2a4b" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa5febce-844d-34d1-91e9-56d2c1b6beb3" locEndPos="12" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="The type 'DWORD (void *)*' of function argument number '3' does not match declared type 'DWORD (LPVOID)*'" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="3" auth="lyao" locRef="1" rule="PB-11" lnHash="-604051279" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-604051279" unbViolId="ddea279c-844e-39b5-bf99-45e2b05645c1" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5d34754-db14-37a1-aa3c-aae1c16fa09d" locEndPos="12" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="The global function 'CreateThread' is called without scope resolution operator '::'" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="5" auth="lyao" locRef="1" rule="CODSTA-CPP-23" lnHash="-604051279" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-604051279" unbViolId="5d91d492-c9d3-311c-b5f4-b02ec7e13dc3" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="325b8a16-1b6a-3212-b9ef-aab09f0c1015" locEndPos="12" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A4_10_1-b" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="e3022039-c2e3-3ded-93d4-4f4eddcb202d" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bcb0ae67-76ec-338f-aec2-dac8207e38fa" locEndPos="25" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="4" auth="lyao" locRef="1" rule="HICPP-2_5_3-a" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="8dbb2162-2d14-32f9-a23e-afb09b2b9037" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5f4451f-c98c-311c-850d-c6a9b1ff4b1b" locEndPos="25" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="4" auth="lyao" locRef="1" rule="CODSTA-MCPP-04" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="994064bb-1fa6-3d18-b872-9da488af4349" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="649320cc-054a-3ec7-9ff3-9cc6ab34a129" locEndPos="25" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="3" auth="lyao" locRef="1" rule="CODSTA-131" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="23d0d24e-13e5-3de0-ad7d-c7c1baeff97a" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e51f29e-f114-3549-b7d7-2e31339400bf" locEndPos="25" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-604051279" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-604051279" unbViolId="470692b3-3ef1-3ce4-9418-6d123effa133" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="34fc1163-3192-31e9-bc38-df6ee7f70661" locEndPos="25" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="1506b7f0-2cbe-302e-8db2-f2e807200a0d" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ba8107c-5bfe-3b29-922a-8c4033d9b95a" locEndPos="25" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="2" auth="lyao" locRef="1" rule="MISRA2008-5_0_4_a" lnHash="-604051279" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-604051279" unbViolId="e6d36715-40ff-375e-bf7e-c0294831e76c" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7bea7ec8-750a-36b3-9e8c-3bb813f2a445" locEndPos="28" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M5_0_4-a" lnHash="-604051279" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-604051279" unbViolId="26468048-d553-3e4d-8652-6f3a00aaf105" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c3e925a-735c-34ac-979d-1fbfecdbea22" locEndPos="28" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="3" auth="lyao" locRef="1" rule="MISRA2004-10_1_a" lnHash="-604051279" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-604051279" unbViolId="c01009ae-d408-3c89-8676-e9394b6b0081" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="833706e1-a72f-3c60-a497-1e86940c8931" locEndPos="28" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="3" auth="lyao" locRef="1" rule="HICPP-4_2_1-a" lnHash="-604051279" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-604051279" unbViolId="d844290a-e9f5-3a94-a35d-b77594699d1b" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e90b70c-f8b7-3ba7-a88c-c4111603b12e" locEndPos="28" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="3" auth="lyao" locRef="1" rule="CERT_CPP-EXP56-a" lnHash="-604051279" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-604051279" unbViolId="5a3b2ba1-a593-3f4c-9743-f322645d3e45" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="30d7e839-308a-3595-97f6-a40e7b8e7558" locEndPos="31" locType="sr" urgent="true" hash="972801700" locEndLn="141" goals="1,"/>
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-96" lnHash="-604051279" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-604051279" unbViolId="1ae09fb0-fe4a-3eeb-8ed5-a04363501fa0" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="820657eb-b565-3e0f-b136-4829a90087d4" locEndPos="31" locType="sr" urgent="true" hash="972801700" locEndLn="141" goals="1,"/>
    <StdViol msg="Pointer to function 'Render_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="3" auth="lyao" locRef="1" rule="MISRA2004-16_9" lnHash="-604051279" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-604051279" unbViolId="24389e42-c915-3571-a771-fb45634c4546" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d475a5e0-b0c2-3f53-939d-84fbb37b7186" locEndPos="31" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="Pointer to function 'Render_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M8_4_4-a" lnHash="-604051279" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-604051279" unbViolId="93f1f835-6211-34ed-93a7-1fd94e0319ce" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69713f37-45c3-3cc0-b9cc-1987d5a445b9" locEndPos="31" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="Pointer to function 'Render_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="2" auth="lyao" locRef="1" rule="MISRA2008-8_4_4" lnHash="-604051279" rule.header="A function identifier shall either be used to call the function or it shall be preceded by '&amp;'" tool="c++test" lineHash="-604051279" unbViolId="69cc15c7-18de-399e-8b83-fe86c97c90ce" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="946f889b-01f2-34e0-8735-faccf0e99092" locEndPos="31" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A4_10_1-b" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="c40d436d-3270-3583-8723-900b44ddc641" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26d31024-fe06-3dcc-82ad-3e3ed288e5a7" locEndPos="47" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="4" auth="lyao" locRef="1" rule="HICPP-2_5_3-a" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="ed6f4345-a3e2-362a-8f1d-7a2ae2e7b850" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d29b359-dba0-3743-9d03-d64d979cdae2" locEndPos="47" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="4" auth="lyao" locRef="1" rule="CODSTA-MCPP-04" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="d60a7160-cf4e-3122-ae51-f991f99d7ffc" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="29c3579a-5e8f-325a-9734-5222920c24ef" locEndPos="47" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="2" auth="lyao" locRef="1" rule="MISRA2008-5_0_4_a" lnHash="-604051279" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-604051279" unbViolId="d1e3f212-191b-3244-9856-aab7d0e459ca" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9297920a-51b5-3d64-852f-426722a25b2c" locEndPos="47" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M5_0_4-a" lnHash="-604051279" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-604051279" unbViolId="ce5b91cf-1c6d-3d95-ab07-3af8b2aa75d3" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="055bc744-427a-3c5c-84a4-a11de7bdf281" locEndPos="47" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="3" auth="lyao" locRef="1" rule="MISRA2004-10_1_a" lnHash="-604051279" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-604051279" unbViolId="3a52963d-4e4e-3191-8141-f2ad2930c51c" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="56226fb3-7480-3758-96fb-ac261bb022ac" locEndPos="47" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="3" auth="lyao" locRef="1" rule="CODSTA-131" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="f2dffdd0-d7c5-355b-8465-b741efa8b392" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2962f9d-9a16-3fe6-a7f8-2ad3a1fb1538" locEndPos="47" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-604051279" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-604051279" unbViolId="25ec8e74-825b-3097-b36e-f881a47ba450" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2e6d606-d083-3dfe-98c1-52e8ac111f6f" locEndPos="47" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="7922bfd7-b8c6-35dc-9180-fd3d67d33cf7" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da16a22e-26c1-31d8-9a92-c6db3c288e28" locEndPos="47" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="3" auth="lyao" locRef="1" rule="CODSTA-131" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="af0c3f58-efed-326f-a9f2-f85ad8083504" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="34026f6d-624f-383a-8c8d-7700c85db0d6" locEndPos="47" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-604051279" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-604051279" unbViolId="e382a571-4c95-32a5-8858-7817976c0c20" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31155ca7-7cee-3c57-8f85-5d22fdee8fa3" locEndPos="47" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="431227bf-ddf5-3b28-9361-83a75dc1c361" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c92a1f82-2a62-37a5-8e08-1ab2127e551c" locEndPos="47" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="141" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="141" sev="3" auth="lyao" locRef="1" rule="HICPP-4_2_1-a" lnHash="-604051279" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-604051279" unbViolId="0672a740-9ee0-3093-a609-37b4d55823c1" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c1d8ed3-457c-3353-8a10-51f8b48d4c1a" locEndPos="47" locType="sr" hash="972801700" locEndLn="141" goals="0,"/>
    <StdViol msg="The definition of the 'runGameThreads2' function is not preceded by a comment" ln="144" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="144" sev="3" auth="lyao" locRef="1" rule="COMMENT-04" lnHash="989655515" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="989655515" unbViolId="c7c43993-7970-326c-98b8-f11cb4ca7497" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1724b121-c6b9-38a3-b9d8-8b2de918be06" locEndPos="6" locType="sr" hash="972801700" locEndLn="144" goals="0,"/>
    <StdViol msg="The definition of the 'runGameThreads2' function is not preceded by a comment" ln="144" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="144" sev="4" auth="lyao" locRef="1" rule="JSF-134" lnHash="989655515" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="989655515" unbViolId="10e818ef-671a-3ea2-9a9b-7884c3ecb7b3" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06fc9ea1-98af-36ad-92cd-9249a75da2a4" locEndPos="6" locType="sr" hash="972801700" locEndLn="144" goals="0,"/>
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="144" sev="4" auth="lyao" locRef="1" rule="OWASP2019-API9-e" lnHash="989655515" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="989655515" unbViolId="1b3d1122-3c7e-3872-a6c8-2cf51f8b6b4f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d94dfeb9-7b44-39bf-a254-60ecf05789c7" locEndPos="6" locType="sr" hash="972801700" locEndLn="144" goals="0,"/>
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="144" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A3_3_1-a" lnHash="989655515" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="989655515" unbViolId="f299b673-fb83-33c0-b7f5-8da472c7f959" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4a629b4-4fb7-3926-8a44-6221e64c2eb0" locEndPos="6" locType="sr" hash="972801700" locEndLn="144" goals="0,"/>
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="144" sev="4" auth="lyao" locRef="1" rule="JSF-137" lnHash="989655515" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="989655515" unbViolId="45b126a9-2a83-3289-b7f3-fad9c87f27ee" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fde81bed-a0bf-3d63-91a6-1829531dcf48" locEndPos="6" locType="sr" hash="972801700" locEndLn="144" goals="0,"/>
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="144" sev="4" auth="lyao" locRef="1" rule="MISRA-023" lnHash="989655515" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="989655515" unbViolId="3b1159c3-415e-3b13-bf00-f443ab1ffe2e" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4baf022d-9ae3-35a8-811e-36d94b6b1cd2" locEndPos="6" locType="sr" hash="972801700" locEndLn="144" goals="0,"/>
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="144" sev="2" auth="lyao" locRef="1" rule="MISRA2008-3_3_1" lnHash="989655515" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="989655515" unbViolId="7df167c8-7589-35ef-8928-d86c992dfeba" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9bc37cd4-27c4-3868-be6e-8b1e62d9cf31" locEndPos="6" locType="sr" hash="972801700" locEndLn="144" goals="0,"/>
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="144" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL15-a" lnHash="989655515" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="989655515" unbViolId="da1cad2a-1146-3b4a-afce-1db5a61fdba5" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1fceedd1-4298-3aba-a077-97789e82ffcb" locEndPos="6" locType="sr" hash="972801700" locEndLn="144" goals="0,"/>
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="144" sev="4" auth="lyao" locRef="1" rule="MISRA2004-8_10" lnHash="989655515" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="989655515" unbViolId="56aeadb2-6c84-34c2-981d-8a3d3c893d08" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5317391d-5e74-31bd-a9a0-6f0db7fdc851" locEndPos="6" locType="sr" hash="972801700" locEndLn="144" goals="0,"/>
    <StdViol msg="The name 'runGameThreads2' should be composed only of lowercase letters" ln="144" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="144" sev="3" auth="lyao" locRef="1" rule="JSF-051" lnHash="989655515" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="989655515" unbViolId="f61462f3-44c6-3ca3-b713-d028143a439a" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d89043b8-4ec7-3b32-a342-c87a1dbbefb4" locEndPos="6" locType="sr" hash="972801700" locEndLn="144" goals="0,"/>
    <StdViol msg="The name 'runGameThreads2' should be composed only of lowercase letters" ln="144" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="144" sev="3" auth="lyao" locRef="1" rule="NAMING-44" lnHash="989655515" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="989655515" unbViolId="3fa8ccc0-f032-3777-be4f-e0734722c899" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ab013cd-e16c-3a5f-87ab-eb200e42e508" locEndPos="6" locType="sr" hash="972801700" locEndLn="144" goals="0,"/>
    <StdViol msg="Do not declare the 'runGameThreads2' function in the global namespace" ln="144" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="144" sev="4" auth="lyao" locRef="1" rule="JSF-098" lnHash="989655515" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="989655515" unbViolId="de8d955b-5b09-3e88-837a-ba9be5010943" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f39e996-5809-3ac7-a90a-51a47476d0f7" locEndPos="6" locType="sr" hash="972801700" locEndLn="144" goals="0,"/>
    <StdViol msg="Do not declare the 'runGameThreads2' function in the global namespace" ln="144" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="144" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M7_3_1-a" lnHash="989655515" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="989655515" unbViolId="23288271-b130-31bc-ac78-fdaaac794b68" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10ff1009-284d-357b-a43f-cd404d92242f" locEndPos="6" locType="sr" hash="972801700" locEndLn="144" goals="0,"/>
    <StdViol msg="Do not declare the 'runGameThreads2' function in the global namespace" ln="144" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="144" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-36" lnHash="989655515" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="989655515" unbViolId="5622c022-731c-3baa-bcc7-4553f5ffbd98" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba57ae2a-0b9d-3188-9174-075149173a95" locEndPos="6" locType="sr" hash="972801700" locEndLn="144" goals="0,"/>
    <StdViol msg="Do not declare the 'runGameThreads2' function in the global namespace" ln="144" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="144" sev="2" auth="lyao" locRef="1" rule="MISRA2008-7_3_1" lnHash="989655515" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="989655515" unbViolId="1fe2f09d-b8b6-3275-b6d8-07bbed459ebc" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97a44ef0-6ead-34a1-8c3f-b404efcc7ea5" locEndPos="6" locType="sr" hash="972801700" locEndLn="144" goals="0,"/>
    <StdViol msg="The 'runGameThreads2' function should be preceded by a comment that contains the '@brief' tag" ln="144" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="144" sev="3" auth="lyao" locRef="1" rule="COMMENT-14" lnHash="989655515" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="989655515" unbViolId="b6b1e438-6dc1-34ec-8493-3fa0b0d8f2df" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ca9ec3c-bfdc-3940-82eb-f44280fcb8c2" locEndPos="6" locType="sr" hash="972801700" locEndLn="144" goals="0,"/>
    <StdViol msg="The 'runGameThreads2' function should be preceded by a comment that contains the '@brief' tag" ln="144" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="144" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A2_7_3-a" lnHash="989655515" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="989655515" unbViolId="a2822590-622f-3454-9f90-7ed7ef2eb82f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5f98a54-7de6-300d-8d06-97d4409eae25" locEndPos="6" locType="sr" hash="972801700" locEndLn="144" goals="0,"/>
    <StdViol msg="Return type is not placed in line before function 'runGameThreads2'" ln="144" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="144" sev="3" auth="lyao" locRef="1" rule="FORMAT-28" lnHash="989655515" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="989655515" unbViolId="29029061-48e6-33b5-970b-31dabc5982bf" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8efbee8f-1084-3803-a365-7da7b3e3a9f6" locEndPos="6" locType="sr" hash="972801700" locEndLn="144" goals="0,"/>
    <StdViol msg="Function 'runGameThreads2' has Cyclomatic Complexity value: 1" ln="144" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="144" sev="5" auth="lyao" locRef="1" rule="METRICS-29" lnHash="989655515" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="989655515" unbViolId="6ab23fb6-4181-30bb-a188-28692d3dc3c3" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e73a438-935a-336f-aa55-7c8e3d43fad9" locEndPos="6" locType="sr" hash="972801700" locEndLn="144" goals="0,"/>
    <StdViol msg="Function 'runGameThreads2' has Essential Complexity value: 1" ln="144" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="144" sev="5" auth="lyao" locRef="1" rule="METRICS-33" lnHash="989655515" rule.header="Report Essential Complexity" tool="c++test" lineHash="989655515" unbViolId="9978f956-4775-3020-8f3d-0b8aea4e1f97" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ee774cd-bda1-3528-811d-8c1aec87c0bb" locEndPos="6" locType="sr" hash="972801700" locEndLn="144" goals="0,"/>
    <StdViol msg="Naming convention not followed: runGameThreads2" ln="144" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="144" sev="3" auth="lyao" locRef="1" rule="NAMING-17" lnHash="989655515" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="989655515" unbViolId="b1c76d8e-0990-31fd-94eb-c6e0a34c37fb" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f7d8d68c-c10c-3af2-9f86-57d4ef059dcb" locEndPos="6" locType="sr" hash="972801700" locEndLn="144" goals="0,"/>
    <StdViol msg="The 'runGameThreads2' function is not used in the testing scope" ln="144" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="144" sev="3" auth="lyao" locRef="1" rule="GLOBAL-UNUSEDFUNC" lnHash="989655515" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="989655515" unbViolId="b21f4441-5987-3a44-bb03-44820943a52d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="b338aa84-8a3c-3c74-9483-5e5377665436" locEndPos="6" locType="sr" hash="972801700" locEndLn="144" goals="0,"/>
    <StdViol msg="The 'runGameThreads2' function is not used in the testing scope" ln="144" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="144" sev="4" auth="lyao" locRef="1" rule="AUTOSAR-M0_1_10-a" lnHash="989655515" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="989655515" unbViolId="346940fa-815f-372b-b43c-f2f421349697" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="3af67dde-32e0-37fb-bedc-3522d8992035" locEndPos="6" locType="sr" hash="972801700" locEndLn="144" goals="0,"/>
    <StdViol msg="The 'runGameThreads2' function is not used in the testing scope" ln="144" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="144" sev="2" auth="lyao" locRef="1" rule="MISRA2008-0_1_10_b" lnHash="989655515" rule.header="Every defined function with external linkage shall be used" tool="c++test" lineHash="989655515" unbViolId="6f14ca3b-495e-398d-b6a2-fb5c07c9b0ff" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="1f4a3b8f-2271-3551-99c4-8189e6facb4d" locEndPos="6" locType="sr" hash="972801700" locEndLn="144" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="145" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="145" sev="3" auth="lyao" locRef="1" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="4af64daf-3346-3c46-bfa7-cfa54bd6c368" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd040ab6-86e2-31b0-8655-f85d9c72bf17" locEndPos="1" locType="sr" hash="972801700" locEndLn="145" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="146" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="146" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="409232213" rule.header="Tabs should be avoided" tool="c++test" lineHash="409232213" unbViolId="d3ee38ca-0be7-36c4-81ca-f91430b44752" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8e377ba7-5dea-3eed-a70c-6bc67e7de09c" locEndPos="1" locType="sr" hash="972801700" locEndLn="146" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="146" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="146" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="409232213" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="409232213" unbViolId="1739990d-9153-3164-bd54-1f8fd98292fa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a10b1a3-9dc2-36ff-8d8f-a59a7e75bb5d" locEndPos="1" locType="sr" hash="972801700" locEndLn="146" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="146" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="146" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="409232213" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="409232213" unbViolId="ceed1aea-4c50-3746-9b38-2460ee5d7866" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="644a3c7f-bbbd-3132-8f1b-2eb2ef708b17" locEndPos="1" locType="sr" hash="972801700" locEndLn="146" goals="0,"/>
    <StdViol msg="Global variable 'exitGame' is modified in function 'runGameThreads2'" ln="146" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="146" sev="3" auth="lyao" locRef="1" rule="CODSTA-27" lnHash="409232213" rule.header="Avoid functions that modify global variables" tool="c++test" lineHash="409232213" unbViolId="107196b2-19f5-362e-86d8-4a0dd958841d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f2a5986-5f68-37b3-b47d-ef87e82c9fa5" locEndPos="2" locType="sr" hash="972801700" locEndLn="146" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1123182240" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1123182240" unbViolId="7b8829b1-bd48-3931-a446-5a46c7f2ba11" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aca7c2a1-8280-32bb-bde3-b91922436286" locEndPos="1" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1123182240" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1123182240" unbViolId="5e194f03-0edb-3d46-8d48-9eea04876ec1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7db717c7-2924-399f-8c6d-b55d8b4b40ae" locEndPos="1" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1123182240" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1123182240" unbViolId="c3f5a507-7e7d-3422-9157-9141569c2f01" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5ff8096-3d72-372d-b9a3-79941e34d7cf" locEndPos="1" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Local variable 'thread1' declared in function 'runGameThreads2' is unnecessary" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="CERT_C-MSC13-a" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="5b974ea7-3d31-310c-a3de-078fcc12a080" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f4f6d5de-df28-3cba-8e42-f7b048a44f8c" locEndPos="9" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Local variable 'thread1' declared in function 'runGameThreads2' is unnecessary" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="4" auth="lyao" locRef="1" rule="OPT-06" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="2374fc16-8545-3921-9321-c62f46451ccf" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e39abccd-385a-3cda-83a0-39c58f45beb8" locEndPos="9" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="The 'thread1' variable should be commented" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="e8cc83c3-eb3d-3550-ad07-159e34bbbc86" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0086b24-8ff3-3f5a-89f4-b24b61684746" locEndPos="9" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="The 'thread1' variable should be commented" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="23136550-42fc-3d71-b7e1-83118b2f926c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c3701c30-ee17-3948-ba52-5285962d3805" locEndPos="9" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="W-552: variable &quot;thread1&quot; was set but never used" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="4" auth="lyao" locRef="1" rule="PARSER-WARNING" lnHash="-1123182240" rule.header="Parser warning" tool="c++test" lineHash="-1123182240" unbViolId="070b7aa0-5528-3b79-903e-493b0d10a9d2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04c30ea3-2855-3782-b9f2-b4730fc03b9a" locEndPos="9" locType="sr" urgent="true" hash="972801700" locEndLn="147" goals="1,"/>
    <StdViol msg="The variable of pointer or array type is declared: thread1" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="c09e1b3c-03b2-3add-8e1a-af2d266bf945" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c4502e3-5d9f-3c40-ba18-a7545455b09b" locEndPos="9" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="The variable of pointer type is declared: thread1" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="d4bb166b-6e9f-3c54-98ef-004ae10a5e7a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="022ad0af-d91e-3e39-b202-59bc109a8e5a" locEndPos="9" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Pointer variable 'thread1' uninitialized when declared" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="2" auth="lyao" locRef="1" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="d5157001-3f09-3285-be32-4d598834dbda" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e8fc814-ed99-3df9-9b50-0b4743bd9bf1" locEndPos="9" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="The 'thread1' variable has only one use" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="e50eb6a8-8ec1-3132-a7bc-7134ebb2632a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="f26add51-1166-3358-a05e-78b7a75b8057" locEndPos="9" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="The 'thread1' variable has only one use" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="2" auth="lyao" locRef="1" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="3e86fdd1-3f00-34bc-a892-9db7e488e882" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="6d92cc21-a8bd-3f65-8369-1188569205c4" locEndPos="9" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="The 'thread1' variable has only one use" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="48786e72-d515-3afe-84d5-6a33b353157f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="3414949e-6385-302a-98cc-4310258586af" locEndPos="9" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="The 'thread2' variable has only one use" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="6a097b26-881f-3a2b-b1d5-3494c76eafb9" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="f6129261-d209-39e7-8465-ffcc9d73706a" locEndPos="18" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="The 'thread2' variable has only one use" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="2" auth="lyao" locRef="1" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="1279609c-edd3-3fa4-a220-d8cd1638f379" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="7dd66acb-bfb6-3120-b414-95fcbeea4e59" locEndPos="18" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="The 'thread2' variable has only one use" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="c61d3d25-68f9-3cb7-af04-16a7f8dc4f0c" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="6f48779b-d2d5-302e-aff0-cb6d63c8080b" locEndPos="18" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="W-552: variable &quot;thread2&quot; was set but never used" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="4" auth="lyao" locRef="1" rule="PARSER-WARNING" lnHash="-1123182240" rule.header="Parser warning" tool="c++test" lineHash="-1123182240" unbViolId="1a33ee8a-766d-3775-b31d-e3d534b9d82b" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b00b2056-728e-33da-920c-a5f28e70e65c" locEndPos="18" locType="sr" urgent="true" hash="972801700" locEndLn="147" goals="1,"/>
    <StdViol msg="The variable of pointer or array type is declared: thread2" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="8a0e3042-a4af-3c6d-9895-7ef8323a1ce4" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1b1640f3-8d1b-37d3-8eab-49fd45ffc474" locEndPos="18" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="The variable of pointer type is declared: thread2" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="2528dafc-79fd-3fb7-9ac0-9ec0aaf346a0" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cccadcba-05cb-38e1-a65a-b93e2d8e0469" locEndPos="18" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="2" auth="lyao" locRef="1" rule="JSF-152" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="1fb6e730-48ad-355f-a5ef-4f096f4a7fae" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af0ae4da-c882-32e2-b7cd-7c5053fc9626" locEndPos="18" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A7_1_7-b" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="dc9e3f1f-d9a0-37ed-b5fd-b2501321e4d9" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d365ae0a-8830-3821-92a2-665ca70f01e8" locEndPos="18" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="HICPP-7_1_1-a" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="78f9aea8-2af8-38c1-8052-2be6457cc869" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e760461a-1741-3a79-a128-a3a8c6ea5b4b" locEndPos="18" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="FORMAT-29" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="289609cc-5b0f-3248-a8d8-42c72ebca4cd" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="902abf54-e7fe-3877-95ce-92e0fe7741c9" locEndPos="18" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A7_1_7-c" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="9cdceffd-cf8a-3c1c-9018-deb3fde9ba14" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bbee723d-2c5d-37fb-a2eb-2ffb522ec95f" locEndPos="18" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="FORMAT-33" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="0076da76-504c-3f77-a4d5-69a53895322e" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4fe82fa-4845-3a14-be35-c143681f54a8" locEndPos="18" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="2" auth="lyao" locRef="1" rule="MISRA2008-8_0_1" lnHash="-1123182240" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-1123182240" unbViolId="60092def-41a2-3cfd-a421-55459190b63b" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="155c973b-d809-32bd-baaf-bf482daa927b" locEndPos="18" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="HICPP-7_1_1-b" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="25c2115e-503d-398d-a0b7-d3f7c0dc57f1" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b87b2f03-9a2f-3352-8a27-3dc78c42c1d4" locEndPos="18" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M8_0_1-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="0332d78d-0307-35db-9596-b36e5f379f72" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0bea8435-4097-393d-bddd-c2c2b1754562" locEndPos="18" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL04-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="52e5ddc6-0a2e-383e-bdaa-be7fc394971c" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97f6d700-f275-3614-ace6-8300c5f7db75" locEndPos="18" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Pointer variable 'thread2' uninitialized when declared" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="2" auth="lyao" locRef="1" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="021dafb8-5d87-3953-bed3-169977e2833a" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1a28063-f5f9-35a1-81f4-e84fb856cf48" locEndPos="18" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Local variable 'thread2' declared in function 'runGameThreads2' is unnecessary" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="CERT_C-MSC13-a" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="ae0898f4-9519-3b41-956e-18f9e84c3b2c" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98e4c67e-ed5b-3d9f-a842-d821c7dad350" locEndPos="18" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Local variable 'thread2' declared in function 'runGameThreads2' is unnecessary" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="4" auth="lyao" locRef="1" rule="OPT-06" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="d1357f60-876f-3a00-8fb9-8cea2e59d2ed" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22cea875-96ce-3b60-8ade-9b63abecd34f" locEndPos="18" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="The 'thread2' variable should be commented" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="c73b46eb-2fd9-37a0-a46b-755e22542e08" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1019b1df-f917-3e41-b9ef-2cae87c67885" locEndPos="18" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="The 'thread2' variable should be commented" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="62f1523c-6286-35f1-a188-2b2f9bb11ac8" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf6b7188-6f46-3352-bd86-467e8b483a57" locEndPos="18" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Local variable 'thread3' declared in function 'runGameThreads2' is unnecessary" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="CERT_C-MSC13-a" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="6f16adfe-b616-3709-8790-7d1984cb51b3" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e6bdecb-71cf-332a-bc92-90678126ec16" locEndPos="27" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Local variable 'thread3' declared in function 'runGameThreads2' is unnecessary" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="4" auth="lyao" locRef="1" rule="OPT-06" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="9f9e804d-a541-3c2f-b4e9-de723812cb34" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4945f6d0-a226-3552-a1b1-e0c65c223e68" locEndPos="27" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="The 'thread3' variable should be commented" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="278ba343-90a9-3ed3-b99f-110727634a94" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc7fb47c-11f8-3d7d-a803-0f646342b754" locEndPos="27" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="The 'thread3' variable should be commented" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="5512a6aa-3c60-3f0f-a7cb-01553fc189e5" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54b1f510-de67-3bdb-8010-3be255c45c10" locEndPos="27" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="W-552: variable &quot;thread3&quot; was set but never used" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="4" auth="lyao" locRef="1" rule="PARSER-WARNING" lnHash="-1123182240" rule.header="Parser warning" tool="c++test" lineHash="-1123182240" unbViolId="f9632d1b-b831-3694-99cb-f1e2a6b7cbc7" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aeb16c06-7241-3399-80e1-f2cebd1f9747" locEndPos="27" locType="sr" urgent="true" hash="972801700" locEndLn="147" goals="1,"/>
    <StdViol msg="The variable of pointer or array type is declared: thread3" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="49676412-7a4e-349f-82e8-a1e725116252" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d506bc7-1168-3d4a-b705-71690a2192be" locEndPos="27" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="The variable of pointer type is declared: thread3" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="f98bf0ce-b440-34ad-b69b-cdc9ea9bdc51" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4fbf6784-ec1c-31c0-8091-7ff2f80886ee" locEndPos="27" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="2" auth="lyao" locRef="1" rule="JSF-152" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="4fea85c4-bd16-39d4-848c-c0591e2ab7fe" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb6b178a-ee8c-34da-8693-9ff351850aa5" locEndPos="27" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A7_1_7-b" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="9fe0b5a6-8e3c-369b-bf79-ca70262bad56" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7453870d-92cf-3b32-bd12-00824568e2e9" locEndPos="27" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="HICPP-7_1_1-a" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="bce021b2-1dcf-38f3-aa4e-9fb979c5ed18" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8269d8d9-e7f3-3085-8648-e0168fffa7a7" locEndPos="27" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="FORMAT-29" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="8e2e844c-b17d-341f-9488-cb9aec4b7786" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d97424fa-7ebc-30cd-9647-6ee494459dab" locEndPos="27" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A7_1_7-c" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="b6fd9760-9ade-3cb5-ba7f-0a048c5d7b2c" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6c31625-ab31-3516-bd71-08318405910c" locEndPos="27" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="FORMAT-33" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="2e80f998-b7f2-376d-8c1f-de9c623ed00d" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b952a1b2-6e51-3971-822c-d62e9d6f3f05" locEndPos="27" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="2" auth="lyao" locRef="1" rule="MISRA2008-8_0_1" lnHash="-1123182240" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-1123182240" unbViolId="b1f0e740-8d1d-3d9f-a3fe-dcf6c2003b81" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ce2e042-47b4-38ee-9acb-cb0956dc488c" locEndPos="27" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="HICPP-7_1_1-b" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="a87e763c-a3d5-3d26-8297-13c4b42fbee1" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f14ac8dd-de78-3439-8b96-3d03181e2a10" locEndPos="27" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M8_0_1-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="a933033e-324d-3bb5-aa4c-bc5a66b70ab2" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b035f935-077a-3a23-98a0-9ac33a7631d6" locEndPos="27" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL04-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="6c3504fc-eb02-38c2-a0f1-67a999d39558" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da548917-48ac-3e24-bf28-7645f39aa631" locEndPos="27" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Pointer variable 'thread3' uninitialized when declared" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="2" auth="lyao" locRef="1" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="32de8bc6-4ef1-37d4-bd51-63ffe1f06c81" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e76bdd1b-858b-3121-a68a-a7b8f272484c" locEndPos="27" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="The 'thread3' variable has only one use" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="10ae8c8a-f516-3aa4-b48c-e5c9f3008157" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="019c645d-bbbe-35e7-8e1e-537568413e98" locEndPos="27" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="The 'thread3' variable has only one use" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="2" auth="lyao" locRef="1" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="11ce3676-7fcc-3767-918b-19d309ea319e" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="62a137c9-b45d-33d5-8b75-9faebdb6c1f9" locEndPos="27" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="The 'thread3' variable has only one use" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="43fac522-6c23-37e5-ae23-22652223979d" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="e03187de-d195-3ab4-9815-c780d7d32857" locEndPos="27" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="The 'thread4' variable has only one use" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="5792f990-76b8-3cd0-8955-f378092e5446" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="0ffc2107-4c83-374b-8283-3d1401a3e2cf" locEndPos="36" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="The 'thread4' variable has only one use" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="2" auth="lyao" locRef="1" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="5fc6ce04-fc3c-3edc-9850-e62b46d26f0a" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="e8fb49b4-4a48-39d7-8940-7751e1073c1e" locEndPos="36" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="The 'thread4' variable has only one use" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="336f3a15-de91-33b9-926a-b606ca7653b7" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="9203fd7f-7c82-336a-a0ff-f76b0a6c4c81" locEndPos="36" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="W-552: variable &quot;thread4&quot; was set but never used" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="4" auth="lyao" locRef="1" rule="PARSER-WARNING" lnHash="-1123182240" rule.header="Parser warning" tool="c++test" lineHash="-1123182240" unbViolId="b6d86615-f8bb-3893-980e-8eeb7c7cd617" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09d11e85-ab45-3fea-9a42-c952bb788c12" locEndPos="36" locType="sr" urgent="true" hash="972801700" locEndLn="147" goals="1,"/>
    <StdViol msg="The variable of pointer or array type is declared: thread4" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="9a1a7f46-8a88-3948-aa64-0036a934ac27" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0845aafe-2270-326b-9367-45621156bfd7" locEndPos="36" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="The variable of pointer type is declared: thread4" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="238e7aea-b97d-342a-b5d3-6e1ae0545be0" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70e20db9-5fc5-395f-9c32-2674e86939d6" locEndPos="36" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="2" auth="lyao" locRef="1" rule="JSF-152" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="b312ccbe-a1aa-3c21-9c82-1c717d155142" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc202ae0-d01d-3314-b0b8-3f919723ca01" locEndPos="36" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A7_1_7-b" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="a8551e84-14e2-3a9a-a68f-d4735c31e293" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e81e4ca1-8d71-3ff4-8021-4cdc0da4d797" locEndPos="36" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="HICPP-7_1_1-a" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="fe0cc462-7a10-3528-a74a-943c77bb88e1" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d12b894e-d5db-3715-94bf-45e291881e84" locEndPos="36" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="FORMAT-29" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="3cbf6d77-8ff1-35b0-8620-130caada0966" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db3c67ad-0d2c-3d6b-961d-b7845a4af78d" locEndPos="36" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A7_1_7-c" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="938edd3a-795a-3487-9233-035707e9bb1d" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b20e9c9-701d-34cd-95ee-935e17c52e72" locEndPos="36" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="FORMAT-33" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="3380d81e-54bc-31f5-823a-d87a572aef0b" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="774aad74-183a-3c82-81df-fd12b4618f34" locEndPos="36" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="2" auth="lyao" locRef="1" rule="MISRA2008-8_0_1" lnHash="-1123182240" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-1123182240" unbViolId="6c6e2170-ccf1-39b5-8927-015d02455d20" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1123b566-03a4-3fd3-a180-8b1c7e5998af" locEndPos="36" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="HICPP-7_1_1-b" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="adb849d3-d173-31de-ae48-5b7d74e9a4dc" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="72a9864d-0106-30a0-9dfb-293ed3111d59" locEndPos="36" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M8_0_1-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="9fc70a2a-6cfb-3554-bc99-2bc2b3eb29e8" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="14821e73-0d2d-3f3a-85a6-94a4e7445498" locEndPos="36" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL04-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="654c1568-34b4-38e7-a38e-c030762dcbae" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ea24787-b7b2-3fd9-b8b4-43b74f8fabfc" locEndPos="36" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Pointer variable 'thread4' uninitialized when declared" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="2" auth="lyao" locRef="1" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="ed94c8ac-c76f-3495-9322-4ac7c155d5c2" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="29b37aa9-a6af-36c0-b1a7-04cca18f8bed" locEndPos="36" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Local variable 'thread4' declared in function 'runGameThreads2' is unnecessary" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="CERT_C-MSC13-a" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="a693dd70-9ed6-3e9b-86c9-9566518a97e3" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38293042-e7ec-3faa-bcfa-45ca6150dd79" locEndPos="36" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Local variable 'thread4' declared in function 'runGameThreads2' is unnecessary" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="4" auth="lyao" locRef="1" rule="OPT-06" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="c9a564c8-6dcd-3f2f-bd3d-43b7940a6f76" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dbf0f194-3da7-34b4-9255-4d172e7e9c1d" locEndPos="36" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="The 'thread4' variable should be commented" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="31b76ad1-8cb2-3158-b53f-b0e0a11cd8d1" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf833a79-20f9-3dc3-a75b-b31b79076d4f" locEndPos="36" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="The 'thread4' variable should be commented" ln="147" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="147" sev="3" auth="lyao" locRef="1" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="e8e42ec6-a213-33ee-9641-9807a645e6e1" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="680fcd63-99a3-3626-a17c-13b6b83b890b" locEndPos="36" locType="sr" hash="972801700" locEndLn="147" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-2033288726" rule.header="Tabs should be avoided" tool="c++test" lineHash="-2033288726" unbViolId="a14c8c0d-6acb-3665-8039-2704c006ba30" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc33d8b2-224c-32e2-b7be-676f3f52e695" locEndPos="1" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-2033288726" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2033288726" unbViolId="59a851ca-ef62-3abc-a25e-991a0744eb4f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bfd4362e-029e-3c9c-89c5-d787ccc468a5" locEndPos="1" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-2033288726" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2033288726" unbViolId="5ab544a2-f6a1-3a1f-bae3-a4e9a8a7e592" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e63f4fb-593a-3e76-96a6-9cf39c57fa87" locEndPos="1" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="Value of &quot;thread1&quot; is never used" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-2_2_b" lnHash="-2033288726" rule.header="Avoid unused values" tool="c++test" lineHash="-2033288726" unbViolId="a67ded4b-f71d-3544-b1e0-a518c40705d0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="9cc412ac-5d39-35c4-b321-e73af9c7b380" locEndPos="0" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="Value of &quot;thread1&quot; is never used" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_2_2-b" lnHash="-2033288726" rule.header="Avoid unused values" tool="c++test" lineHash="-2033288726" unbViolId="5ecfa204-bc62-3683-8c92-434e5147c426" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="4e0fd89e-75f2-35a6-aaba-ac0b9e0c83d9" locEndPos="0" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="Value of &quot;thread1&quot; is never used" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A0_1_1-a" lnHash="-2033288726" rule.header="Avoid unused values" tool="c++test" lineHash="-2033288726" unbViolId="bf98871d-1d52-355c-8985-9344a2ed8985" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="2e4fbfbd-cf0f-3e79-9f02-5c44d09add32" locEndPos="0" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="Value of &quot;thread1&quot; is never used" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL22-a" lnHash="-2033288726" rule.header="Avoid unused values" tool="c++test" lineHash="-2033288726" unbViolId="b423dba4-26c3-375d-8eea-574fa64bf26e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="cee10160-8625-385e-b8a8-c43cf96a4b3c" locEndPos="0" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="Value of &quot;thread1&quot; is never used" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="2" auth="lyao" locRef="1" rule="MISRA2008-0_1_6" lnHash="-2033288726" rule.header="Avoid unused values" tool="c++test" lineHash="-2033288726" unbViolId="2d95f6dc-815b-356e-a9bf-3aa39508a035" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="cb86d8c1-80a9-3791-881d-722d0e3479e0" locEndPos="0" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="Value of &quot;thread1&quot; is never used" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="3" auth="lyao" locRef="1" rule="BD-PB-VOVR" lnHash="-2033288726" rule.header="Avoid unused values" tool="c++test" lineHash="-2033288726" unbViolId="64115d30-8e94-3393-af02-e36e001ee422" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="a548e32e-746d-36f0-a4e1-628a8d85f9c4" locEndPos="0" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="The global function 'CreateThread' is called without scope resolution operator '::'" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="5" auth="lyao" locRef="1" rule="CODSTA-CPP-23" lnHash="-2033288726" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-2033288726" unbViolId="26bbef74-0f7b-3fe6-8c43-a563891b431e" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="747cc295-072a-3c63-aaaa-a4e0de5cd6d9" locEndPos="12" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="The type 'int' of function argument number '2' does not match declared type 'unsigned long long'" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="3" auth="lyao" locRef="1" rule="PB-11" lnHash="-2033288726" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-2033288726" unbViolId="4e098f0f-ca92-376f-93d0-7f87b69ab4b3" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="660e0eb0-5048-3f9c-8170-ceabb813379a" locEndPos="12" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="The type 'int' of function argument number '5' does not match declared type 'unsigned long'" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="3" auth="lyao" locRef="1" rule="PB-11" lnHash="-2033288726" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-2033288726" unbViolId="faa24c39-1f0d-38d0-9a3a-1a2941ec8781" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd9f82e4-1b0a-3644-a1da-7f6092719993" locEndPos="12" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="The type 'DWORD (void *)*' of function argument number '3' does not match declared type 'DWORD (LPVOID)*'" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="3" auth="lyao" locRef="1" rule="PB-11" lnHash="-2033288726" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-2033288726" unbViolId="5141825b-2c42-3768-9d75-5beac6a74257" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69a627d3-e9be-37d7-85a9-979c15c4c860" locEndPos="12" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A4_10_1-b" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="afa21476-3ee0-3a0f-81ea-c143539dc16a" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="461e3e53-ced3-3b39-910f-29914cf9175a" locEndPos="25" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="4" auth="lyao" locRef="1" rule="HICPP-2_5_3-a" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="4610bfb6-7f6e-300c-82f9-665162343b7e" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af2f70a0-0571-3a43-b9d0-ba5201a73bea" locEndPos="25" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="4" auth="lyao" locRef="1" rule="CODSTA-MCPP-04" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="c0d39df8-edaa-3ab1-b0eb-1effc29e778f" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8e2c262c-e62a-36ba-aa28-315cab065113" locEndPos="25" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="3" auth="lyao" locRef="1" rule="CODSTA-131" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="d22e255f-90db-34e0-b740-49484d463d86" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2409fe67-da97-3ca7-897f-0e20687ffc00" locEndPos="25" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-2033288726" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-2033288726" unbViolId="3f6a569d-6069-3bd2-9c4d-77f7415d0358" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6b07859-90cf-3d23-9919-3f54690184e8" locEndPos="25" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="5d5c4771-413d-331a-8f91-357dd269f9bf" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa69d586-9f85-3a5c-81e9-5887847cd67c" locEndPos="25" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="2" auth="lyao" locRef="1" rule="MISRA2008-5_0_4_a" lnHash="-2033288726" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-2033288726" unbViolId="1955f45c-d220-3828-83fb-6a0c8bed5912" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="268a3c56-de15-3b60-b216-ebfa345e174e" locEndPos="28" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M5_0_4-a" lnHash="-2033288726" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-2033288726" unbViolId="dcd24ed4-139c-3335-afdd-0773f852a1b4" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab24dde3-3854-31ea-807c-49598bfa07f5" locEndPos="28" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="3" auth="lyao" locRef="1" rule="MISRA2004-10_1_a" lnHash="-2033288726" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-2033288726" unbViolId="40ad947a-e9b3-3769-9a48-483e404d3246" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f802c52-1c9e-318e-ad89-fffe358d3ab5" locEndPos="28" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="3" auth="lyao" locRef="1" rule="HICPP-4_2_1-a" lnHash="-2033288726" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-2033288726" unbViolId="f53f55ff-3057-36d1-8680-ab1938ac4c7c" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9f1bf64-2de7-3bf1-97de-bd6b58176130" locEndPos="28" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="3" auth="lyao" locRef="1" rule="CERT_CPP-EXP56-a" lnHash="-2033288726" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-2033288726" unbViolId="99d6a42b-bc9f-3021-b57f-d9ea03e8fbe3" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e6c59294-7870-36a9-9c0e-c6c3ea7d1354" locEndPos="31" locType="sr" urgent="true" hash="972801700" locEndLn="148" goals="1,"/>
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-96" lnHash="-2033288726" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-2033288726" unbViolId="c631ee3d-3627-3a8f-8771-d3853a594b68" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bdb44c8f-eff9-3796-a478-154af3fa0eba" locEndPos="31" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="Pointer to function 'GameLogic_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="3" auth="lyao" locRef="1" rule="MISRA2004-16_9" lnHash="-2033288726" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-2033288726" unbViolId="f7c07a21-44c4-3517-8864-09657a62be86" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="335e0db1-bfb4-3c6d-9998-308038457d36" locEndPos="31" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="Pointer to function 'GameLogic_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M8_4_4-a" lnHash="-2033288726" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-2033288726" unbViolId="a33a6d4d-dc1c-3a16-a73a-367636d2b15f" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab399193-a6ec-394e-9809-6e2c570dac86" locEndPos="31" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="Pointer to function 'GameLogic_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="2" auth="lyao" locRef="1" rule="MISRA2008-8_4_4" lnHash="-2033288726" rule.header="A function identifier shall either be used to call the function or it shall be preceded by '&amp;'" tool="c++test" lineHash="-2033288726" unbViolId="9edd9e9f-13c3-3e6f-a217-d05b4a66059c" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cfadc6b1-749c-3332-8b2a-0be674034046" locEndPos="31" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A4_10_1-b" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="59390125-c46f-3abc-b38e-6697b109b507" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e69bb6f-1e9d-351e-98f9-660676778757" locEndPos="42" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="4" auth="lyao" locRef="1" rule="HICPP-2_5_3-a" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="7d6a74f1-7d02-3a64-ac30-7fb6d0300823" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5b56d17-13f0-3091-86d0-ad261b605b3c" locEndPos="42" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="4" auth="lyao" locRef="1" rule="CODSTA-MCPP-04" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="dc479d2c-d059-3425-a9d4-44fd2029b911" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cfeddf74-8c17-3627-8659-0a99ee00c823" locEndPos="42" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="2" auth="lyao" locRef="1" rule="MISRA2008-5_0_4_a" lnHash="-2033288726" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-2033288726" unbViolId="93000ee8-dfb0-3fcf-b63f-84cf5f7fff4d" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f47365d-b5aa-3674-8889-419e2b16334e" locEndPos="42" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M5_0_4-a" lnHash="-2033288726" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-2033288726" unbViolId="e0271c20-c1ef-3c9d-83f6-22c69454790e" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b0c0730-546e-3618-9e88-211c21779ea5" locEndPos="42" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="3" auth="lyao" locRef="1" rule="MISRA2004-10_1_a" lnHash="-2033288726" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-2033288726" unbViolId="a72f95bd-1db1-3cc0-82d8-92ca8e923b73" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eaf064d7-63ff-3785-8e49-c7817b96864d" locEndPos="42" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="3" auth="lyao" locRef="1" rule="CODSTA-131" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="60d4066b-b6b8-3056-8cbb-e4e9df8990eb" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a205201-6fca-376e-a3a0-42eec230f186" locEndPos="42" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-2033288726" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-2033288726" unbViolId="89e55f5e-d7e7-3629-8547-11d12f1ad2b4" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1cde2a7c-bf90-31da-806c-5ae5cf70eb44" locEndPos="42" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="d795b288-b222-385d-a158-1655949103ea" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24c0a05d-4dd7-3ac1-b120-d9199f2ab0d0" locEndPos="42" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="3" auth="lyao" locRef="1" rule="CODSTA-131" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="f2f53753-5433-30d6-ae4f-96a8a617cc40" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="efce1576-15fa-3f43-872f-bde4353ff5e8" locEndPos="42" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-2033288726" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-2033288726" unbViolId="ef12882a-e449-3200-9718-5b2a1c00a785" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee7c9357-f154-3904-a839-25a3b53a403f" locEndPos="42" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="e790c4bd-3e75-32d2-98bc-dc2f35e88e1f" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bef1bc07-ceea-3860-a9b5-ea4891050cd3" locEndPos="42" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="148" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="148" sev="3" auth="lyao" locRef="1" rule="HICPP-4_2_1-a" lnHash="-2033288726" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-2033288726" unbViolId="6964d3ca-22e1-3bee-9477-a64efabebf58" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3dd93b4a-f946-3f80-9ecf-04eaf875acaa" locEndPos="42" locType="sr" hash="972801700" locEndLn="148" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1824414877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1824414877" unbViolId="bcfc475e-2700-31b2-93f8-c94add378bfb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8fef03a-6ccf-3874-82c6-02401bcfb7ff" locEndPos="1" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1824414877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1824414877" unbViolId="b9522c7f-be0a-3b4e-84be-f0c7151ef81f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d32ef8b-1366-30fa-99b8-fa134a7b0416" locEndPos="1" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1824414877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1824414877" unbViolId="442c9268-7b8e-3d40-b907-7e322abbb658" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d941d62a-72d8-36be-94d5-f0bd90e9f9da" locEndPos="1" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="Value of &quot;thread2&quot; is never used" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="3" auth="lyao" locRef="1" rule="BD-PB-VOVR" lnHash="-1824414877" rule.header="Avoid unused values" tool="c++test" lineHash="-1824414877" unbViolId="1f3edc0c-812c-31a8-a486-7c989a7a3292" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="663f4557-d3fd-3caa-8add-022d7297886f" locEndPos="0" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="Value of &quot;thread2&quot; is never used" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-2_2_b" lnHash="-1824414877" rule.header="Avoid unused values" tool="c++test" lineHash="-1824414877" unbViolId="ab7bd4ea-47eb-3c1e-839e-4c5f062803df" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="c690dcad-8dd3-3b67-afed-da19ae092711" locEndPos="0" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="Value of &quot;thread2&quot; is never used" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_2_2-b" lnHash="-1824414877" rule.header="Avoid unused values" tool="c++test" lineHash="-1824414877" unbViolId="492a0ebe-7f97-37b4-86f2-83eaabb9e034" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="393267e5-8cb4-3623-bf79-a5c1e6874898" locEndPos="0" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="Value of &quot;thread2&quot; is never used" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A0_1_1-a" lnHash="-1824414877" rule.header="Avoid unused values" tool="c++test" lineHash="-1824414877" unbViolId="20e52600-2988-38d3-9fa7-9406dfada556" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="492c787b-35a2-34fe-96de-838aa08dbdc0" locEndPos="0" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="Value of &quot;thread2&quot; is never used" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL22-a" lnHash="-1824414877" rule.header="Avoid unused values" tool="c++test" lineHash="-1824414877" unbViolId="894f7f84-4a0a-3b29-945a-ddaa35174495" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="db6526c3-d893-36ef-9938-a6897485ec1e" locEndPos="0" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="Value of &quot;thread2&quot; is never used" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="2" auth="lyao" locRef="1" rule="MISRA2008-0_1_6" lnHash="-1824414877" rule.header="Avoid unused values" tool="c++test" lineHash="-1824414877" unbViolId="4df56b7e-db08-37a9-8095-ca5edb192e59" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="bacaab33-7da2-38a6-9c36-0f065d7a4487" locEndPos="0" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="The global function 'CreateThread' is called without scope resolution operator '::'" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="5" auth="lyao" locRef="1" rule="CODSTA-CPP-23" lnHash="-1824414877" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-1824414877" unbViolId="a74a96e7-8b0e-389a-a4d2-4c47036638e1" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ce8eb83-613d-3b89-93f4-2f688dd2248c" locEndPos="12" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="The type 'int' of function argument number '2' does not match declared type 'unsigned long long'" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="3" auth="lyao" locRef="1" rule="PB-11" lnHash="-1824414877" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-1824414877" unbViolId="dfa66f93-f10f-39a6-a350-1b1474e77fd7" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fdb9bcb5-e3d7-3cb0-a95b-0c639d8c72e8" locEndPos="12" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="The type 'int' of function argument number '5' does not match declared type 'unsigned long'" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="3" auth="lyao" locRef="1" rule="PB-11" lnHash="-1824414877" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-1824414877" unbViolId="bc1481e0-2c91-34a2-bf67-acf9da1a500d" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3f16e38-4e0c-3a6f-a7ee-060e6aec43b3" locEndPos="12" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="The type 'DWORD (void *)*' of function argument number '3' does not match declared type 'DWORD (LPVOID)*'" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="3" auth="lyao" locRef="1" rule="PB-11" lnHash="-1824414877" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-1824414877" unbViolId="0303a9cd-45dd-3e41-959a-ab7f86cef118" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="731aaa9e-fc29-3b44-b9b0-93fb8246ffef" locEndPos="12" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A4_10_1-b" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="679cdbe1-97bb-356e-896b-37a341d93e5c" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="08900ca3-cee2-375a-8b6c-993ff278625c" locEndPos="25" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="4" auth="lyao" locRef="1" rule="HICPP-2_5_3-a" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="2a9db25a-0a4f-3db5-968f-16bbb18a3184" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c37ca271-9eef-311e-b5da-e7ceecc23530" locEndPos="25" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="4" auth="lyao" locRef="1" rule="CODSTA-MCPP-04" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="e7eff11d-20e8-3944-b932-7bc793cbb875" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="931703bf-039d-3912-873d-6524675d390c" locEndPos="25" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="3" auth="lyao" locRef="1" rule="CODSTA-131" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="75340343-857e-3af4-a4a0-57325c2bfabe" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b17864c9-d591-31fa-b9a9-1d8110e5d78b" locEndPos="25" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-1824414877" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1824414877" unbViolId="99d9e2b2-1063-371f-a331-40f32976a51a" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="35d97598-dd06-3c03-93c6-6e826439a9db" locEndPos="25" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="2ae00b8c-6c03-393c-a296-9af68e889d64" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="80ab3a1d-1f75-3033-ae7f-33df507a2747" locEndPos="25" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="2" auth="lyao" locRef="1" rule="MISRA2008-5_0_4_a" lnHash="-1824414877" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-1824414877" unbViolId="54b68dec-ca5e-3df0-b816-6059cdb952be" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5cef96e-276f-3e98-8b9b-489c38247b1e" locEndPos="28" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M5_0_4-a" lnHash="-1824414877" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1824414877" unbViolId="42fa19dd-858a-3ce9-bd07-5b666f9ae74f" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9235ae1-cc52-38d1-bd59-46f6d401770f" locEndPos="28" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="3" auth="lyao" locRef="1" rule="MISRA2004-10_1_a" lnHash="-1824414877" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1824414877" unbViolId="e4a3e03a-c8b0-3087-89e2-ad65d7114513" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8073b509-f433-3867-b7ac-8371c464b39f" locEndPos="28" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="3" auth="lyao" locRef="1" rule="HICPP-4_2_1-a" lnHash="-1824414877" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-1824414877" unbViolId="f488efab-ceff-3aa2-95c7-96350d14d956" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f24f3e7-3da5-314b-9bc1-d12f680cbde6" locEndPos="28" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="3" auth="lyao" locRef="1" rule="CERT_CPP-EXP56-a" lnHash="-1824414877" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1824414877" unbViolId="e83517ad-e9a3-3173-a882-ec11edd30bb6" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eacb1a03-0de9-362f-87c3-515668692d7f" locEndPos="31" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-96" lnHash="-1824414877" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1824414877" unbViolId="4fd820da-76ac-3c26-8e27-63ce46147b6c" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd53dfd1-42d4-3ab7-9116-8bbd87062ab2" locEndPos="31" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="Pointer to function 'Controller_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="3" auth="lyao" locRef="1" rule="MISRA2004-16_9" lnHash="-1824414877" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-1824414877" unbViolId="9141536a-398d-346f-b64f-e0419765387a" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0c7c019d-dbd3-394f-a751-b5e1c55e1522" locEndPos="31" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="Pointer to function 'Controller_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M8_4_4-a" lnHash="-1824414877" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-1824414877" unbViolId="a8a8d52e-e127-3d85-a01f-a3234988c069" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b700fd36-0aa4-351e-b3b0-f1112c87c2bc" locEndPos="31" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="Pointer to function 'Controller_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="2" auth="lyao" locRef="1" rule="MISRA2008-8_4_4" lnHash="-1824414877" rule.header="A function identifier shall either be used to call the function or it shall be preceded by '&amp;'" tool="c++test" lineHash="-1824414877" unbViolId="53d0393a-d369-3461-abda-6567f508b5c3" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8914926c-178b-3079-ad7e-114e6d3fe381" locEndPos="31" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A4_10_1-b" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="b12f33ba-88c9-3989-9b8d-ed1540410ea7" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="559431b4-2613-39d0-b200-df7e5488863d" locEndPos="43" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="4" auth="lyao" locRef="1" rule="HICPP-2_5_3-a" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="25d35490-c5af-3800-bac9-494bf35966e4" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40ebcefa-7ba7-31b9-a166-426028a42c31" locEndPos="43" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="4" auth="lyao" locRef="1" rule="CODSTA-MCPP-04" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="464b3285-e51f-3549-89fa-eea1b2796969" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a959a2bc-5240-33fb-9d14-f48394b0ccd3" locEndPos="43" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="2" auth="lyao" locRef="1" rule="MISRA2008-5_0_4_a" lnHash="-1824414877" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-1824414877" unbViolId="26fc7afb-557a-33bb-8ae9-792b92cdbc32" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d5e65df-8185-3803-8f47-bcd1bf9a2315" locEndPos="43" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M5_0_4-a" lnHash="-1824414877" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1824414877" unbViolId="e57b66e6-3ed8-39fe-8cc0-b91e18a5f137" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92b2f265-2b2a-3a34-99d3-ab34c6b1195e" locEndPos="43" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="3" auth="lyao" locRef="1" rule="MISRA2004-10_1_a" lnHash="-1824414877" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1824414877" unbViolId="1dad6f05-299e-31ae-bc3d-d9f5ea36ab13" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a1734fb-7c0f-3953-bc7f-e7d2c4be7a59" locEndPos="43" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="3" auth="lyao" locRef="1" rule="CODSTA-131" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="9943576e-4c17-383e-a2bd-5bb521e25985" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e269392d-65c1-3432-8b1d-e54ca7dcf0e5" locEndPos="43" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-1824414877" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1824414877" unbViolId="df5fb5f7-9d0f-35a1-ae7a-7ee9f262cf9b" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8f8bb43-4258-3009-b503-ad715d110deb" locEndPos="43" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="fa2d2b75-f702-3c78-ad0b-70c99a5827b4" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f1df772-f020-340e-8b31-fd7974820498" locEndPos="43" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="3" auth="lyao" locRef="1" rule="CODSTA-131" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="fa5c99d7-ae3a-30c1-8303-b02a41f1fa71" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54057528-5318-381f-bdc4-0fdc2525dc0b" locEndPos="43" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-1824414877" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1824414877" unbViolId="ae7f7296-cc82-3814-a8f8-0359ea75fc70" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9da7a88-bbfe-3f95-bd14-08b08a7df7a6" locEndPos="43" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="9509e51c-b66e-3a8c-b678-de543e127926" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0224f300-1aaa-396f-a69c-87d5110dc161" locEndPos="43" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="149" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="149" sev="3" auth="lyao" locRef="1" rule="HICPP-4_2_1-a" lnHash="-1824414877" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-1824414877" unbViolId="51c64dd4-ea17-3382-9566-9fee0c81cbc9" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dacc850a-81d5-352c-a347-e41c6d1d3494" locEndPos="43" locType="sr" hash="972801700" locEndLn="149" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-1305984162" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1305984162" unbViolId="9fd089cc-1de2-3d1b-b2a4-34bcfa1a59d6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="df05d0f0-cb9b-3206-a662-c2c54ef11017" locEndPos="1" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-1305984162" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1305984162" unbViolId="8d9c8f30-684a-3fce-8361-c0b860ffe615" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="58319157-46d9-3ce7-9c90-18dcb50fb93d" locEndPos="1" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1305984162" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1305984162" unbViolId="e930c306-a43d-3642-aec3-92de301ef7c8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c161b51-5f91-3272-a47d-0a95968ad44f" locEndPos="1" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="Value of &quot;thread3&quot; is never used" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-2_2_b" lnHash="-1305984162" rule.header="Avoid unused values" tool="c++test" lineHash="-1305984162" unbViolId="775d5a32-50c7-3d47-ae72-e143aaebbdf8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="97a5ccd4-6a6f-3b5b-b7a2-d4f9ae6ab869" locEndPos="0" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="Value of &quot;thread3&quot; is never used" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_2_2-b" lnHash="-1305984162" rule.header="Avoid unused values" tool="c++test" lineHash="-1305984162" unbViolId="6167a55c-cefc-3db7-8688-718cde3cd479" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="b3c2f3a2-a186-3b21-a8cc-153aff75bdbf" locEndPos="0" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="Value of &quot;thread3&quot; is never used" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A0_1_1-a" lnHash="-1305984162" rule.header="Avoid unused values" tool="c++test" lineHash="-1305984162" unbViolId="116a8d0a-0545-3613-b6b7-dd93bc2201d8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="45ba7614-cec8-3816-bc6d-2760cc05c0d9" locEndPos="0" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="Value of &quot;thread3&quot; is never used" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL22-a" lnHash="-1305984162" rule.header="Avoid unused values" tool="c++test" lineHash="-1305984162" unbViolId="c44f54bd-606b-3b17-82ed-ad2bff197f86" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="2ed04d82-e3a7-3592-ba6b-0c6292b4cc56" locEndPos="0" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="Value of &quot;thread3&quot; is never used" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="2" auth="lyao" locRef="1" rule="MISRA2008-0_1_6" lnHash="-1305984162" rule.header="Avoid unused values" tool="c++test" lineHash="-1305984162" unbViolId="6608d3e8-6f92-3dd1-909e-81ebbd50a10e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="062f16d5-30af-365a-ac19-1746b14c6685" locEndPos="0" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="Value of &quot;thread3&quot; is never used" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="3" auth="lyao" locRef="1" rule="BD-PB-VOVR" lnHash="-1305984162" rule.header="Avoid unused values" tool="c++test" lineHash="-1305984162" unbViolId="a75fc45c-438f-34ef-a88f-8bc7bbbe5334" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="736f9942-8c1d-37be-9a2e-2f71b624a9d9" locEndPos="0" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="The global function 'CreateThread' is called without scope resolution operator '::'" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="5" auth="lyao" locRef="1" rule="CODSTA-CPP-23" lnHash="-1305984162" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-1305984162" unbViolId="db5feb3e-5617-3ca7-98b0-f85bae7aff78" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36b3551e-936a-37e0-96a8-352f97996eca" locEndPos="12" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="The type 'int' of function argument number '2' does not match declared type 'unsigned long long'" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="3" auth="lyao" locRef="1" rule="PB-11" lnHash="-1305984162" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-1305984162" unbViolId="ede38a1d-a46e-3732-8c44-ba88ba35de99" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="871b9b6f-b33e-395f-932a-825e0ee1fe35" locEndPos="12" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="The type 'int' of function argument number '5' does not match declared type 'unsigned long'" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="3" auth="lyao" locRef="1" rule="PB-11" lnHash="-1305984162" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-1305984162" unbViolId="c0bfd0d7-c4db-3b9c-b38c-90f6583b9839" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da3ec1ae-af8a-371a-8c7f-869de82e02ac" locEndPos="12" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="The type 'DWORD (void *)*' of function argument number '3' does not match declared type 'DWORD (LPVOID)*'" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="3" auth="lyao" locRef="1" rule="PB-11" lnHash="-1305984162" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-1305984162" unbViolId="2d15e902-fdd7-36bc-8a09-9a95562f16d5" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="46277532-1a23-33b6-a37d-84710fd06d7e" locEndPos="12" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A4_10_1-b" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="d4c3f888-6f9d-3931-81ce-66cb8899c306" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb81766b-d410-35fa-a12d-0300fb60c7dc" locEndPos="25" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="4" auth="lyao" locRef="1" rule="HICPP-2_5_3-a" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="f1c73daa-1b86-3e3e-a11d-cbec09c676d1" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="19ca0853-8053-3ce2-ba69-186798960041" locEndPos="25" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="4" auth="lyao" locRef="1" rule="CODSTA-MCPP-04" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="9c5480bb-7621-3001-89c2-453664f5ec3c" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36091508-c4b3-35d7-b7b7-b793b869b363" locEndPos="25" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="3" auth="lyao" locRef="1" rule="CODSTA-131" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="b916ec7b-4688-3059-b984-0690d3f6f5a6" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1921e1b9-80b9-3ce1-b937-714618b57731" locEndPos="25" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-1305984162" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1305984162" unbViolId="173a466b-a0cc-363b-af7e-0a93313b3eab" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0234c7c0-c433-369f-b11c-065f37441e6b" locEndPos="25" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="770e7738-7c18-3226-9286-c28ea544054f" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78c01c4a-3c0a-3772-bb85-5826f997a311" locEndPos="25" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="2" auth="lyao" locRef="1" rule="MISRA2008-5_0_4_a" lnHash="-1305984162" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-1305984162" unbViolId="dc6d0e01-0740-3c5a-aa7a-302d81bab389" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f107bc74-3c09-3b84-9485-e329c1f61977" locEndPos="28" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M5_0_4-a" lnHash="-1305984162" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1305984162" unbViolId="84b71eb8-aa9e-347d-a31e-2f9c1a14361d" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a8ccb4a-450e-32a8-9c1d-fad3ce28205b" locEndPos="28" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="3" auth="lyao" locRef="1" rule="MISRA2004-10_1_a" lnHash="-1305984162" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1305984162" unbViolId="613d7a46-c386-3f73-ab37-efda8bd1876d" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48864f7d-5904-3c75-9bcf-e078e885717b" locEndPos="28" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="3" auth="lyao" locRef="1" rule="HICPP-4_2_1-a" lnHash="-1305984162" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-1305984162" unbViolId="028bbb36-e02e-36e1-a64f-52a825b24fee" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7cc6efa2-3d69-3141-a5b7-8bffb5928fa8" locEndPos="28" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="3" auth="lyao" locRef="1" rule="CERT_CPP-EXP56-a" lnHash="-1305984162" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1305984162" unbViolId="f66b0cf9-e7bc-38db-a3ab-91c8f315f5b3" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="076bdbd7-10a9-3770-a449-853f6c2292e8" locEndPos="31" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-96" lnHash="-1305984162" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1305984162" unbViolId="a307f17c-ae08-371b-9c65-46f8a2e5b895" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c38eb054-deaa-324d-b100-f19575e6c5b1" locEndPos="31" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="Pointer to function 'Physics_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="3" auth="lyao" locRef="1" rule="MISRA2004-16_9" lnHash="-1305984162" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-1305984162" unbViolId="11f31d8e-c512-38b0-9dbc-cd364b814f6e" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a784c3a-4615-3c15-8271-5b65b390bc40" locEndPos="31" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="Pointer to function 'Physics_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M8_4_4-a" lnHash="-1305984162" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-1305984162" unbViolId="8709f334-68cf-3bd1-a308-a097e3173bbb" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="859381b1-04ec-3661-b161-d0d63fe3ffd9" locEndPos="31" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="Pointer to function 'Physics_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="2" auth="lyao" locRef="1" rule="MISRA2008-8_4_4" lnHash="-1305984162" rule.header="A function identifier shall either be used to call the function or it shall be preceded by '&amp;'" tool="c++test" lineHash="-1305984162" unbViolId="a2499729-ee63-3a28-9adf-f88467c4fb7f" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c511ccc-2ecf-3f7d-8d80-41394758de14" locEndPos="31" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A4_10_1-b" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="8c191489-f4fe-3d73-a732-bff3e75572f3" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0c9e1e2a-3879-3982-beae-854560fd6259" locEndPos="49" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="4" auth="lyao" locRef="1" rule="HICPP-2_5_3-a" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="3032fb13-ea0a-3a3b-89b2-97a128041c7a" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c878ea35-1328-3303-a103-e97579b8a6d0" locEndPos="49" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="4" auth="lyao" locRef="1" rule="CODSTA-MCPP-04" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="683ea783-3786-338d-934b-491ae5f80866" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61264627-621c-374f-8dc1-85f62df262de" locEndPos="49" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="2" auth="lyao" locRef="1" rule="MISRA2008-5_0_4_a" lnHash="-1305984162" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-1305984162" unbViolId="57fb8850-cd78-3b98-9482-186635558e12" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fbfca439-9e5f-32a2-875c-069afaffc676" locEndPos="49" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M5_0_4-a" lnHash="-1305984162" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1305984162" unbViolId="f34921b7-ef24-3d8a-ad8e-06dc423e6bf4" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fcced589-8b31-3be2-ad6c-a804ffffc868" locEndPos="49" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="3" auth="lyao" locRef="1" rule="MISRA2004-10_1_a" lnHash="-1305984162" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1305984162" unbViolId="0ec4db24-c3fd-3ee9-a9df-48d80169c284" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="667f3570-58d2-3bda-bac0-d50294435291" locEndPos="49" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="3" auth="lyao" locRef="1" rule="CODSTA-131" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="fa73f33d-5e4a-331a-80e2-b910e09fce6a" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d4140a0-6b03-33d6-a1a0-8f8cd24e68ca" locEndPos="49" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-1305984162" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1305984162" unbViolId="7847a5c2-227d-3458-b93b-651c9a603114" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="19d96ee5-f1cf-3828-b3c5-5a7a1f18d41e" locEndPos="49" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="a48f427e-14a3-3625-a91e-230cea121964" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7978539b-b761-3fbf-8106-4af96c745c45" locEndPos="49" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="3" auth="lyao" locRef="1" rule="CODSTA-131" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="c32793d6-183e-34cf-9eda-bf943035fd24" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97ee2d0b-d610-3cc7-8911-ed4eeaa61dbc" locEndPos="49" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-1305984162" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1305984162" unbViolId="a22f608c-6e84-3c44-8d25-0d47c809354e" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="330aa7d4-62ed-360d-8ad7-c05c64800cd0" locEndPos="49" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="72578095-3546-3b1c-be5c-ff05ee42753b" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99d4090c-e767-3638-8e5b-c37505dd8bae" locEndPos="49" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="150" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="150" sev="3" auth="lyao" locRef="1" rule="HICPP-4_2_1-a" lnHash="-1305984162" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-1305984162" unbViolId="18b8d144-94c0-354e-b8a7-9a7d9912988b" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0a230fa-e52a-3fdf-866a-2e7ae5b0ff27" locEndPos="49" locType="sr" hash="972801700" locEndLn="150" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="4" auth="lyao" locRef="1" rule="JSF-043" lnHash="-604051279" rule.header="Tabs should be avoided" tool="c++test" lineHash="-604051279" unbViolId="1e1b3bb7-0736-3458-a9ba-7a4c072fe464" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6b4e247-0c3f-36b8-a1f6-66b2701399e1" locEndPos="1" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="5" auth="lyao" locRef="1" rule="FORMAT-01" lnHash="-604051279" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-604051279" unbViolId="0f6c2988-ff06-333b-83b2-9a4aeac63d58" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9179ee13-4670-3187-bd26-744551b7ddba" locEndPos="1" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="5" auth="lyao" locRef="1" rule="HICPP-2_1_1-a" lnHash="-604051279" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-604051279" unbViolId="8a73c497-ba40-3ac6-ad57-235cf2d0c000" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1443d3b-3d1f-3c16-90bf-9dcfbac19a86" locEndPos="1" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="Value of &quot;thread4&quot; is never used" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="3" auth="lyao" locRef="1" rule="BD-PB-VOVR" lnHash="-604051279" rule.header="Avoid unused values" tool="c++test" lineHash="-604051279" unbViolId="c77dc5a2-53cf-326b-b425-1685251b5d96" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="3981696f-85ba-3576-bcd8-b8bf5f935d26" locEndPos="0" locType="sr" hash="972801700" locEndLn="152" goals="0,"/>
    <StdViol msg="Value of &quot;thread4&quot; is never used" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-2_2_b" lnHash="-604051279" rule.header="Avoid unused values" tool="c++test" lineHash="-604051279" unbViolId="2c80d749-cac2-32e2-926d-2ff3801e47ab" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="d09bc5d7-e373-3ca5-b7ac-457522aa01d9" locEndPos="0" locType="sr" hash="972801700" locEndLn="152" goals="0,"/>
    <StdViol msg="Value of &quot;thread4&quot; is never used" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_2_2-b" lnHash="-604051279" rule.header="Avoid unused values" tool="c++test" lineHash="-604051279" unbViolId="d9f90824-c991-3a85-aa10-acef4257bbe7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="b5f5698f-ff4e-3805-825c-41ccdfaf1776" locEndPos="0" locType="sr" hash="972801700" locEndLn="152" goals="0,"/>
    <StdViol msg="Value of &quot;thread4&quot; is never used" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A0_1_1-a" lnHash="-604051279" rule.header="Avoid unused values" tool="c++test" lineHash="-604051279" unbViolId="f17e6926-01f3-306e-9c00-9f3185ef577a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="ec779e26-930f-3890-978a-c34029cfe47a" locEndPos="0" locType="sr" hash="972801700" locEndLn="152" goals="0,"/>
    <StdViol msg="Value of &quot;thread4&quot; is never used" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="3" auth="lyao" locRef="1" rule="CERT_C-DCL22-a" lnHash="-604051279" rule.header="Avoid unused values" tool="c++test" lineHash="-604051279" unbViolId="b8e3ca6d-b87b-3145-aa53-25ea00be4f38" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="cc611b4e-3553-3ec0-b9ce-ddce872469e8" locEndPos="0" locType="sr" hash="972801700" locEndLn="152" goals="0,"/>
    <StdViol msg="Value of &quot;thread4&quot; is never used" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="2" auth="lyao" locRef="1" rule="MISRA2008-0_1_6" lnHash="-604051279" rule.header="Avoid unused values" tool="c++test" lineHash="-604051279" unbViolId="a971d9e4-a2b6-384d-b15a-5d7f7fadb30a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="c81d14d4-02c9-3d8f-8a31-e81c360ff735" locEndPos="0" locType="sr" hash="972801700" locEndLn="152" goals="0,"/>
    <StdViol msg="The global function 'CreateThread' is called without scope resolution operator '::'" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="5" auth="lyao" locRef="1" rule="CODSTA-CPP-23" lnHash="-604051279" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-604051279" unbViolId="e520a421-333c-3fa4-9456-12af75199500" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91f35b94-2305-3fb8-90eb-9200f1632f10" locEndPos="12" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="The type 'int' of function argument number '2' does not match declared type 'unsigned long long'" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="3" auth="lyao" locRef="1" rule="PB-11" lnHash="-604051279" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-604051279" unbViolId="b05772b7-fc93-386b-bfbb-42dd48dc4994" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a608a8b-c4fb-3d37-a1a0-aaa90b88c1e0" locEndPos="12" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="The type 'int' of function argument number '5' does not match declared type 'unsigned long'" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="3" auth="lyao" locRef="1" rule="PB-11" lnHash="-604051279" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-604051279" unbViolId="61f6112b-b82e-3f21-9fc3-87e34548d92b" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3bf67345-e5cb-375a-b0ad-c02a19bd0abc" locEndPos="12" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="The type 'DWORD (void *)*' of function argument number '3' does not match declared type 'DWORD (LPVOID)*'" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="3" auth="lyao" locRef="1" rule="PB-11" lnHash="-604051279" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-604051279" unbViolId="a613e020-683e-3e77-bd3a-79d99c8e7ddc" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="930d1d1a-3453-3275-8094-0a792b279693" locEndPos="12" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A4_10_1-b" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="36501d12-4327-3b29-87f5-e9eb1f67f656" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="60de029d-ddad-34cd-a03d-be79a53691c6" locEndPos="25" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="4" auth="lyao" locRef="1" rule="HICPP-2_5_3-a" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="080c2b84-802f-383e-bb90-72f60a98d7e9" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="185140a0-489b-32c8-bed7-9b7594cc0176" locEndPos="25" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="4" auth="lyao" locRef="1" rule="CODSTA-MCPP-04" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="d11d5b11-56a0-3809-a863-a8d57d9da11a" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="518f795d-2288-3765-9667-c1f1c44d1ba0" locEndPos="25" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="3" auth="lyao" locRef="1" rule="CODSTA-131" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="e869d65c-b48c-32d7-9fdd-4f016b0088dc" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ba247bd-a866-363c-92f9-03b9a49ccb2c" locEndPos="25" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-604051279" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-604051279" unbViolId="c49e24fb-13f8-3593-8038-ce918fef2ad9" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="904a180f-9b47-3595-8ebd-0e9ad014e394" locEndPos="25" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="7f0dbe5f-e777-394d-803a-0712eac9731d" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0e15938-e75c-327a-9e2f-6bfb965445b2" locEndPos="25" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="2" auth="lyao" locRef="1" rule="MISRA2008-5_0_4_a" lnHash="-604051279" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-604051279" unbViolId="fd0c65f3-db38-338d-88f5-bf5abcb7c8a4" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5bbaefa2-659c-31e0-833c-b0d4de71f7bd" locEndPos="28" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M5_0_4-a" lnHash="-604051279" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-604051279" unbViolId="90c33808-4f32-30af-9544-b6c1f9fb494f" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a23a540-9372-310f-9caa-b552dedea533" locEndPos="28" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="3" auth="lyao" locRef="1" rule="MISRA2004-10_1_a" lnHash="-604051279" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-604051279" unbViolId="f72f5026-3c11-3370-9a61-5ca2911e1b4d" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="477f0ef9-78cc-3540-8952-5f513e733066" locEndPos="28" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="3" auth="lyao" locRef="1" rule="HICPP-4_2_1-a" lnHash="-604051279" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-604051279" unbViolId="b2031619-e4d3-37b8-a127-a113e7042c75" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af364db9-134c-3023-873c-f4a46be17c75" locEndPos="28" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="3" auth="lyao" locRef="1" rule="CERT_CPP-EXP56-a" lnHash="-604051279" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-604051279" unbViolId="339f4f07-f29d-393a-923b-78a294e503eb" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4325d62f-0fab-3c0b-87d4-cd10279e0bbb" locEndPos="31" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="3" auth="lyao" locRef="1" rule="CODSTA-CPP-96" lnHash="-604051279" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-604051279" unbViolId="7f88d2a0-9f7b-3f55-b001-d067f213f4e9" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba67074d-1d0b-3da6-9eb8-548586a4a876" locEndPos="31" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="Pointer to function 'Render_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="3" auth="lyao" locRef="1" rule="MISRA2004-16_9" lnHash="-604051279" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-604051279" unbViolId="f75df4da-d45e-37a3-976e-2ca1605009d3" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0cebf67-6aa4-36b3-8e9b-10e3f96c21da" locEndPos="31" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="Pointer to function 'Render_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M8_4_4-a" lnHash="-604051279" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-604051279" unbViolId="086412fe-2144-32eb-b1ce-010a90a6af2e" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59c5bb47-96d1-36d0-bd35-c9578454bbc2" locEndPos="31" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="Pointer to function 'Render_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="2" auth="lyao" locRef="1" rule="MISRA2008-8_4_4" lnHash="-604051279" rule.header="A function identifier shall either be used to call the function or it shall be preceded by '&amp;'" tool="c++test" lineHash="-604051279" unbViolId="e00976de-5add-3d86-a59a-15434539bd6f" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ef99ca1-1685-337e-9315-73bfbba06cde" locEndPos="31" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-A4_10_1-b" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="d90d308f-20f7-37f5-86e8-0f114a392d46" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b266e8f9-00da-371b-af8c-6cacac4827f2" locEndPos="47" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="4" auth="lyao" locRef="1" rule="HICPP-2_5_3-a" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="e645d723-4272-301d-8866-d7d352fe6866" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="528185ea-a0f3-3681-af93-5961a381d529" locEndPos="47" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="4" auth="lyao" locRef="1" rule="CODSTA-MCPP-04" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="8095a886-8590-3b35-b38e-9fd23d25bf7f" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0545f476-5a79-3f85-8c19-a0e7392d8571" locEndPos="47" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="2" auth="lyao" locRef="1" rule="MISRA2008-5_0_4_a" lnHash="-604051279" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-604051279" unbViolId="1b97b7a2-4d88-3f13-a043-7757a1ff7b4b" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ec828b5-a7f6-317a-a212-9e02a05fef07" locEndPos="47" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="2" auth="lyao" locRef="1" rule="AUTOSAR-M5_0_4-a" lnHash="-604051279" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-604051279" unbViolId="829c2a6c-7a8b-390b-97b5-6426bf4e07d9" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5450c0b7-6008-3d8d-9db1-5590b7403a91" locEndPos="47" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="3" auth="lyao" locRef="1" rule="MISRA2004-10_1_a" lnHash="-604051279" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-604051279" unbViolId="5f61568f-4c88-31bd-ad36-87d7280de197" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4b5a81b-b71d-3959-ae5a-d5e579d017e6" locEndPos="47" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="3" auth="lyao" locRef="1" rule="CODSTA-131" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="6cefdf9f-8b38-3e8e-a2d3-ee90d0017dc4" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6a190f0-a742-3667-b513-fc74f8e79360" locEndPos="47" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-604051279" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-604051279" unbViolId="707ad2a9-131b-32cc-b9da-db27e7622712" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d71bdf50-de5e-3fec-9325-eed2ab646821" locEndPos="47" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="75729593-52e5-3c2b-9712-7e9fa0a410e3" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1be72c8a-1f7e-33fe-b7b5-49494b8bef22" locEndPos="47" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="3" auth="lyao" locRef="1" rule="CODSTA-131" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="ccb72eec-cc56-3085-8a91-371ae934c1f7" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e5b9857-30ef-3e92-9da7-5ba427d2a4f2" locEndPos="47" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="2" auth="lyao" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-604051279" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-604051279" unbViolId="e02042ea-0d56-3966-b1a4-a8a27afa9e12" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f70f48d-c628-3d24-aed9-52c47cc2d847" locEndPos="47" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="2" auth="lyao" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="e8ec9480-dab0-372f-8b61-5abddb70da75" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04639e4a-02e9-3763-837b-b0ba6e2bf3f3" locEndPos="47" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="151" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locStartln="151" sev="3" auth="lyao" locRef="1" rule="HICPP-4_2_1-a" lnHash="-604051279" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-604051279" unbViolId="517c128b-a9fd-32dc-b0df-a5f2a82c8cc0" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4d3f893-39cd-378f-bdb4-6e13e2953cd7" locEndPos="47" locType="sr" hash="972801700" locEndLn="151" goals="0,"/>
    <StdViol msg="The assertion density is lower than two assertions per function" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="1" sev="3" auth="lyao" locRef="2" rule="METRICS-31" lnHash="329732047" rule.header="The assertion density of the code should average to a minimum of two assertions per function" tool="c++test" lineHash="329732047" unbViolId="2b62c1dc-7830-3d03-989e-c9a71f48b8ef" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b8013c5-b7df-3b1b-9d40-7cb1112c78e0" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0,"/>
    <StdViol msg="The filename 'DivisionByZero.cpp' should be in lowercase" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="1" sev="3" auth="lyao" locRef="2" rule="NAMING-03" lnHash="329732047" rule.header="Use lowercase for file names" tool="c++test" lineHash="329732047" unbViolId="1cadfeb1-b2b7-398b-a811-8835ebb2d7fa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="49846901-1581-3b36-b7f2-7e47e17a1489" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0,"/>
    <StdViol msg="Implementation file 'DivisionByZero.cpp' should have the file name extension &quot;.cc&quot;" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="1" sev="3" auth="lyao" locRef="2" rule="NAMING-38" lnHash="329732047" rule.header="Implementation files in C++ always have the file name extension &quot;.cc&quot;" tool="c++test" lineHash="329732047" unbViolId="d6336bf4-0646-3f70-8922-225c85017d00" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="431b997b-a2f6-3dcb-ba23-606ef0fe2611" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0,"/>
    <StdViol msg="Implementation file 'DivisionByZero.cpp' should declare a local constant string that begins from characters &quot;@(#)&quot; " ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="1" sev="5" auth="lyao" locRef="2" rule="PFO-04" lnHash="329732047" rule.header="Every implementation file should declare a local constant string that describes the file" tool="c++test" lineHash="329732047" unbViolId="439dac2d-8d13-37b1-bb78-7115e7052ef9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8ed0843-8070-33cd-92d3-7031c8af6fc7" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the copyright information at the begin of file 'DivisionByZero.cpp'" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="1" sev="3" auth="lyao" locRef="2" rule="COMMENT-02" lnHash="329732047" rule.header="Provide copyright information" tool="c++test" lineHash="329732047" unbViolId="669ae033-c3c0-3bb4-bc15-3e3631b3ba87" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ff32447-3f9b-3220-bece-04a50c82f239" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the copyright information at the begin of file 'DivisionByZero.cpp'" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="1" sev="3" auth="lyao" locRef="2" rule="JSF-133_b" lnHash="329732047" rule.header="Every source file will contain copyright information" tool="c++test" lineHash="329732047" unbViolId="70dd592e-6470-3268-92cb-82c21d2e2872" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64c773e8-88bb-362f-9ea0-e0496980728f" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the information on the file at the begin of file 'DivisionByZero.cpp'" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="1" sev="3" auth="lyao" locRef="2" rule="COMMENT-03" lnHash="329732047" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="329732047" unbViolId="c58538d0-1d3e-3795-8456-ea101cdfb724" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b6353af-cf3d-3077-b810-6dd24caa6cc3" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the information on the file at the begin of file 'DivisionByZero.cpp'" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="1" sev="3" auth="lyao" locRef="2" rule="JSF-133_a" lnHash="329732047" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="329732047" unbViolId="864810e0-e55c-316f-a551-bbdce68a8a51" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="25c5fee8-615c-32da-bd32-99c6c8f42e37" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0,"/>
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Shapes.hpp&quot;" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="1" sev="3" auth="lyao" locRef="2" rule="JSF-032" lnHash="329732047" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="329732047" unbViolId="3169432a-5461-3311-9fd0-6d6982a92f61" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d66cf026-2252-31fa-8f35-57ba8441e012" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0,"/>
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Shapes.hpp&quot;" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="1" sev="3" auth="lyao" locRef="2" rule="PREPROC-08" lnHash="329732047" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="329732047" unbViolId="54806830-af4b-310a-ab66-075da4d1a40f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="982efa46-8749-3577-a0ac-f46910cb8cba" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0,"/>
    <StdViol msg="Disallowed #include notation is being used: &quot;Shapes.hpp&quot;" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="1" sev="2" auth="lyao" locRef="2" rule="PREPROC-09" lnHash="329732047" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="329732047" unbViolId="dce364c6-a91d-3747-9dc7-74cb8ed17e03" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="713c89fc-c987-3e47-84f5-bb29e2d086d5" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0,"/>
    <StdViol msg="Disallowed #include notation is being used: &quot;Shapes.hpp&quot;" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="1" sev="2" auth="lyao" locRef="2" rule="JSF-033" lnHash="329732047" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="329732047" unbViolId="443ab1cc-3b06-3630-8c12-61b6735d4b53" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce5c83ad-01d2-362d-8c58-581dae7dbbe4" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="4" auth="lyao" locRef="2" rule="MISRA2008-3_9_2" lnHash="-1572071035" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1572071035" unbViolId="d51e57e5-d45e-3461-8046-6a3d2f300284" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88792757-8154-3b89-9562-36b59d1f861b" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="MISRA-013" lnHash="-1572071035" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1572071035" unbViolId="4f371479-a0d7-3761-9053-bf11a8ced180" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee3fdba6-cff8-391a-ac2e-0050c8b6a174" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="4" auth="lyao" locRef="2" rule="MISRAC2012-DIR_4_6-b" lnHash="-1572071035" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1572071035" unbViolId="aa228dad-ae6a-360f-a8a6-e80da8faa6db" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de2ba578-c5e2-3381-83cd-03191c77211a" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="2" auth="lyao" locRef="2" rule="JSF-209_b" lnHash="-1572071035" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-1572071035" unbViolId="85f40268-89fb-3672-9ceb-4f4e651df67f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bab81a03-765d-3c3d-b47d-6b3e4006edf3" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="MISRA2004-6_3_b" lnHash="-1572071035" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1572071035" unbViolId="5cd08bdf-6d0f-33c9-8bd1-5e69655a2e07" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca25ed37-755c-3da8-8f6b-00ca48cc5f84" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="4" auth="lyao" locRef="2" rule="MISRA2012-DIR-4_6_b" lnHash="-1572071035" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1572071035" unbViolId="2f3d4f79-5c64-3e08-8296-d3a77a283991" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00ce6b09-0cc3-353e-b839-85590ad1b895" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="HICPP-3_5_1-b" lnHash="-1572071035" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1572071035" unbViolId="760c8fed-a62a-35cc-b4f5-b938055a7ce9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="30f0cdc2-8351-3041-8603-d32263bcbb92" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <FlowViol msg="The &quot;shape1&quot; parameter of the &quot;getShapeRatio&quot; function cannot be NULL and should be passed by reference" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" ruleSAFMsg="Function header" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="6" rule="AUTOSAR-A8_4_10-a" FirstElSrcRngStartPos="0" lnHash="-1572071035" ruleSCSCMsg="Point where the parameter is dereferenced" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" rule.header="A parameter shall be passed by reference if it can't be NULL" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-938638073" lang="cpp" violId="92b41e24-c123-313c-aa95-8772cc075680" locEndPos="0" locEndLn="4" goals="0," locStartln="3" sev="2" locRef="2" tool="c++test" lineHash="-1572071035" unbViolId="2e050377-babf-35a5-b235-f7036747bb90" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="-1572071035" ln="3" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="3" srcRngEndLn="4" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="double getShapeRatio(Shape* shape1, Shape* shape2)" ElType=".P" rngLn="3">
          <Anns>
            <Ann msg="Function header" kind="point"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="shape1->getArea()" ElType=".C" rngLn="5">
          <Anns>
            <Ann msg="Point where the parameter is dereferenced" kind="cause"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="The &quot;shape1&quot; parameter of the &quot;getShapeRatio&quot; function cannot be NULL and should be passed by reference" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" ruleSAFMsg="Function header" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="6" rule="BD-PB-REFPARAM" FirstElSrcRngStartPos="0" lnHash="-1572071035" ruleSCSCMsg="Point where the parameter is dereferenced" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" rule.header="A parameter shall be passed by reference if it can't be NULL" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1776184541" lang="cpp" violId="8914a353-e01f-3959-be39-d7cd4d1f9598" locEndPos="0" locEndLn="4" goals="0," locStartln="3" sev="3" locRef="2" tool="c++test" lineHash="-1572071035" unbViolId="3f878971-e7bd-3356-8a4f-91f23d99a0c8" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="-1572071035" ln="3" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="3" srcRngEndLn="4" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="double getShapeRatio(Shape* shape1, Shape* shape2)" ElType=".P" rngLn="3">
          <Anns>
            <Ann msg="Function header" kind="point"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="shape1->getArea()" ElType=".C" rngLn="5">
          <Anns>
            <Ann msg="Point where the parameter is dereferenced" kind="cause"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="The &quot;shape2&quot; parameter of the &quot;getShapeRatio&quot; function cannot be NULL and should be passed by reference" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" ruleSAFMsg="Function header" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="6" rule="AUTOSAR-A8_4_10-a" FirstElSrcRngStartPos="0" lnHash="-1572071035" ruleSCSCMsg="Point where the parameter is dereferenced" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" rule.header="A parameter shall be passed by reference if it can't be NULL" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1613810146" lang="cpp" violId="65970622-9627-3110-a342-11af0b9807e4" locEndPos="0" locEndLn="4" goals="0," locStartln="3" sev="2" locRef="2" tool="c++test" lineHash="-1572071035" unbViolId="b6e08984-7334-346a-ba55-eff28f5055c7" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="-1572071035" ln="3" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="3" srcRngEndLn="4" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="double getShapeRatio(Shape* shape1, Shape* shape2)" ElType=".P" rngLn="3">
          <Anns>
            <Ann msg="Function header" kind="point"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <Anns>
            <Ann msg="Point where the parameter is dereferenced" kind="cause"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="The &quot;shape2&quot; parameter of the &quot;getShapeRatio&quot; function cannot be NULL and should be passed by reference" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" ruleSAFMsg="Function header" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="6" rule="BD-PB-REFPARAM" FirstElSrcRngStartPos="0" lnHash="-1572071035" ruleSCSCMsg="Point where the parameter is dereferenced" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" rule.header="A parameter shall be passed by reference if it can't be NULL" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1042079686" lang="cpp" violId="5992614c-f222-3b34-936c-c3bd530297a0" locEndPos="0" locEndLn="4" goals="0," locStartln="3" sev="3" locRef="2" tool="c++test" lineHash="-1572071035" unbViolId="39d95977-aea0-3d19-9ee6-7a4fee5f25a7" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="-1572071035" ln="3" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="3" srcRngEndLn="4" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="double getShapeRatio(Shape* shape1, Shape* shape2)" ElType=".P" rngLn="3">
          <Anns>
            <Ann msg="Function header" kind="point"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <Anns>
            <Ann msg="Point where the parameter is dereferenced" kind="cause"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="The return type of the 'getShapeRatio' function should be declared as 'auto'" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="2" auth="lyao" locRef="2" rule="CODSTA-MCPP-08_b" lnHash="-1572071035" rule.header="Prefer 'auto' to explicit type names for function return types" tool="c++test" lineHash="-1572071035" unbViolId="96ba9b9a-f6a6-379f-9e95-6fe6757073a0" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a557869b-8511-33ef-a7cb-4912e3cec0b4" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The definition of the 'getShapeRatio' function is not preceded by a comment" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="COMMENT-04" lnHash="-1572071035" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1572071035" unbViolId="1404f019-5e29-3f93-8add-8136d309c4a3" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b3cad39-09f6-3568-9509-eb8ea0e964ac" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The definition of the 'getShapeRatio' function is not preceded by a comment" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="4" auth="lyao" locRef="2" rule="JSF-134" lnHash="-1572071035" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1572071035" unbViolId="375d08a3-6ba0-3c90-9da7-2b2cf9d0ab22" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c25fcf45-4e3d-32af-9e31-1a022da1b2fe" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="4" auth="lyao" locRef="2" rule="OWASP2019-API9-e" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="4b8ea546-4466-3054-b308-e36c57bf1e10" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2fa6f914-2c21-3bb6-8cc7-db7bcd1bf1f7" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="2" auth="lyao" locRef="2" rule="AUTOSAR-A3_3_1-a" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="56ce5055-96e5-3d4a-ace4-c5f55c3caa04" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d2724a1-0f0b-3b5a-beeb-5476865248d3" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="4" auth="lyao" locRef="2" rule="JSF-137" lnHash="-1572071035" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-1572071035" unbViolId="4e2b68cb-8ee7-359f-89e9-21cb5c7307c0" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bcdaeb11-b102-3b6a-aa2f-ad859f2e3457" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="4" auth="lyao" locRef="2" rule="MISRA-023" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="d40a3d72-9d95-3e7c-b170-ebac7c479c06" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d72b135a-be92-33a1-a650-23767d6c61df" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="2" auth="lyao" locRef="2" rule="MISRA2008-3_3_1" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="1d3fc66d-f209-3fd9-91f0-9c5072936a85" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="15bf5090-2888-31e0-8072-7fb4c5009e95" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="CERT_C-DCL15-a" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="301b4e76-7445-3148-a51b-c7937da9c085" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c13cae32-5118-3901-977e-6c88c4923d37" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="4" auth="lyao" locRef="2" rule="MISRA2004-8_10" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="ac6e5762-2b1a-32e9-9882-3f6a78c9c2e4" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2fa2d645-5be1-31c8-9218-11697369d962" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The name 'getShapeRatio' should be composed only of lowercase letters" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="JSF-051" lnHash="-1572071035" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1572071035" unbViolId="eeec62bb-ef83-33ee-b651-1063042e329b" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99eaafd1-4496-3ea6-b1f8-df5590c6c8b2" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The name 'getShapeRatio' should be composed only of lowercase letters" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="NAMING-44" lnHash="-1572071035" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1572071035" unbViolId="2ab80fa2-3380-324c-b834-9c60dd99138f" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06df66fa-b529-3443-b556-c8f311d77ed8" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Do not declare the 'getShapeRatio' function in the global namespace" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="4" auth="lyao" locRef="2" rule="JSF-098" lnHash="-1572071035" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-1572071035" unbViolId="9b71cc69-f1c7-35af-9ae2-eea47aaa472e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e19bafc2-8f4c-3958-8848-478d28347e47" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Do not declare the 'getShapeRatio' function in the global namespace" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="2" auth="lyao" locRef="2" rule="AUTOSAR-M7_3_1-a" lnHash="-1572071035" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1572071035" unbViolId="a96bb18d-d676-3b3e-b5df-548b7d71db77" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd11ed50-cbf0-324d-80d3-0c61244c77d7" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Do not declare the 'getShapeRatio' function in the global namespace" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="CODSTA-CPP-36" lnHash="-1572071035" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1572071035" unbViolId="f6e1839e-d61c-3a89-b6aa-94bbfeaaa713" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="623d8986-5ce6-3093-829d-1d92d72c8158" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Do not declare the 'getShapeRatio' function in the global namespace" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="2" auth="lyao" locRef="2" rule="MISRA2008-7_3_1" lnHash="-1572071035" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-1572071035" unbViolId="acf9aaf8-c986-3ecc-b417-742f4832e691" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa9a008f-2abb-3c86-8eeb-beb44769f9ce" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The 'getShapeRatio' function should be preceded by a comment that contains the '@brief' tag" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="COMMENT-14" lnHash="-1572071035" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1572071035" unbViolId="38a81da9-c6df-3188-87c5-df615f50f412" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b021121d-407f-36bb-880b-8a3d1892d2fc" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The 'getShapeRatio' function should be preceded by a comment that contains the '@brief' tag" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="2" auth="lyao" locRef="2" rule="AUTOSAR-A2_7_3-a" lnHash="-1572071035" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1572071035" unbViolId="9d6f0d17-94f2-3d5d-8f9c-bbbfc1ece98f" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ab9d6e4-7af7-3a82-a349-f318c72edfb0" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The 'shape1' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="2" auth="lyao" locRef="2" rule="AUTOSAR-A2_7_3-b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="b20dca65-5884-37b5-bf19-eb0ea508fecd" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2cdcf141-47f5-3266-9eef-50e27a375e0a" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The 'shape1' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="COMMENT-14_b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="28ad1ec8-1fa7-3419-8db3-65c2c7e8df96" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c434d3aa-0dd0-33af-885f-08c621de5cba" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The 'shape2' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="2" auth="lyao" locRef="2" rule="AUTOSAR-A2_7_3-b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="5faf846a-042d-399d-bfff-8479c0a546d8" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c14f459-32fa-38ee-ae5e-86b1bcc328c2" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The 'shape2' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="COMMENT-14_b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="7d0b3c6d-049d-3f3a-8df2-1193a22988d0" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67fa1611-67a0-3504-afe6-1f564fbe45a0" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The 'getShapeRatio' function should be preceded by a comment that contains the '@return' tag" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="2" auth="lyao" locRef="2" rule="AUTOSAR-A2_7_3-b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="a1795c98-00d0-392b-b7d9-fe852ef8d7d9" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="765c26f1-7daf-3398-b03b-2950f91f16fd" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The 'getShapeRatio' function should be preceded by a comment that contains the '@return' tag" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="COMMENT-14_b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="b2a44ee7-5ed9-3284-92d8-7be61c411d7a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a89b97e6-da30-3b84-ae05-0a1b7676dedc" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Return type is not placed in line before function 'getShapeRatio'" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="FORMAT-28" lnHash="-1572071035" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-1572071035" unbViolId="4292fa48-af0d-3985-bf0c-66e46cad059a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc74dd7d-d09e-3831-ad98-6ba7e76f439e" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Function 'getShapeRatio' has Cyclomatic Complexity value: 1" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="5" auth="lyao" locRef="2" rule="METRICS-29" lnHash="-1572071035" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-1572071035" unbViolId="1b6d9d34-af13-3e1d-a9d3-836cd45c05d8" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5981a0d1-1b3b-3810-a382-ed70de719192" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Function 'getShapeRatio' has Essential Complexity value: 1" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="5" auth="lyao" locRef="2" rule="METRICS-33" lnHash="-1572071035" rule.header="Report Essential Complexity" tool="c++test" lineHash="-1572071035" unbViolId="fc1e906d-8797-37be-b600-11630b774ce1" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="648f592c-eadb-3358-8409-b51ecdfababa" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Naming convention not followed: getShapeRatio" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="NAMING-17" lnHash="-1572071035" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-1572071035" unbViolId="f1701176-792f-3ed5-bfe7-dc0a6ba286f3" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a5a6ff9-adb4-307b-b6e9-b88166e5ac1b" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The 'getShapeRatio' function is not used in the testing scope" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="GLOBAL-UNUSEDFUNC" lnHash="-1572071035" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-1572071035" unbViolId="608b79f3-0e4b-3230-9e08-cae567bfec69" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="7e66c59f-1ea7-31c3-87eb-abe444a523f9" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The 'getShapeRatio' function is not used in the testing scope" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="4" auth="lyao" locRef="2" rule="AUTOSAR-M0_1_10-a" lnHash="-1572071035" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-1572071035" unbViolId="10f8776e-6ff8-32a9-a80c-263c789d0bf1" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="3186cc8b-b622-3573-bcd7-7ba964590175" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The 'getShapeRatio' function is not used in the testing scope" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="2" auth="lyao" locRef="2" rule="MISRA2008-0_1_10_b" lnHash="-1572071035" rule.header="Every defined function with external linkage shall be used" tool="c++test" lineHash="-1572071035" unbViolId="3f27fa37-78fc-309d-894e-99f40b1030f5" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="8496150d-375c-3510-82cc-dae4c05396df" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The parameter of pointer or array type is declared: shape1" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="CODSTA-94" lnHash="-1572071035" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1572071035" unbViolId="e36c3ee2-eee6-3af0-bb60-e8ba88452aa6" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ebe0f16a-44e8-3808-bb98-11b343a12f5b" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The parameter of pointer type is declared: shape1" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="CODSTA-95" lnHash="-1572071035" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1572071035" unbViolId="19b80942-adac-32d4-b7a8-e30622c22ee7" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f7a51b6-266a-3102-aa01-30d4536b8cd7" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Parameter 'shape1' is not validated before use" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="CERT_C-API00-a" lnHash="-1572071035" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1572071035" unbViolId="7e3cdf5b-acdd-32f6-8218-585e923f7d52" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b1802519-bd73-3321-ac87-7b0b9281b5f8" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Parameter 'shape1' is not validated before use" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="CODSTA-86" lnHash="-1572071035" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1572071035" unbViolId="14647c25-3867-3486-b9f7-3692fbd2931c" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ccea455b-3eb5-38b4-bc37-26ed3dcae920" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="2" auth="lyao" locRef="2" rule="AUTOSAR-M7_1_2-b" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="285d75e0-0e02-39d4-a0e9-28b94f1e35ae" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f982a67c-d0e8-355c-8bee-64a38bed77dc" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="4" auth="lyao" locRef="2" rule="MISRAC2012-RULE_8_13-a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="2abc628f-ca9e-3b50-b810-ade56c3336cf" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85f6f7f7-162e-3a01-8486-e97dd5fc868a" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="CERT_C-DCL13-a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="13c54d31-5c6b-3857-9937-b6ef92498568" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a3a4033-5b11-3236-b37c-bd3910c2cd8d" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="MISRA2004-16_7" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="6798fd66-0c1a-3598-856a-a0b54e6495ef" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79e3e3f3-60c0-3c1c-8a4c-f7621de3210b" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="4" auth="lyao" locRef="2" rule="MISRA2012-RULE-8_13_a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="834d0a81-133e-377b-9492-3bbc1c958ae0" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c65ca82-162b-39c8-a0bd-336b7e78d28e" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="4" auth="lyao" locRef="2" rule="JSF-118" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="0b01fa8f-1aaa-3378-8936-35ac1124ac1f" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d6802143-0249-398c-9d6a-7e07cb7d2c24" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="2" auth="lyao" locRef="2" rule="MISRA2008-7_1_2_a" lnHash="-1572071035" rule.header="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" tool="c++test" lineHash="-1572071035" unbViolId="f1af2d1a-e387-381b-a6f1-115874c6b03f" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ebed8a8-f9e3-3cc6-938d-55287b53fcd1" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The 'shape1' identifier should have the 'p' prefix" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="NAMING-HN-34" lnHash="-1572071035" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="-1572071035" unbViolId="78d85a58-b965-30bf-9da2-008548084615" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="53623aa6-e48a-3283-af34-5b6b4c31e34d" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The parameter of pointer or array type is declared: shape2" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="CODSTA-94" lnHash="-1572071035" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1572071035" unbViolId="b6ddcc4e-95bc-3dd0-8e68-e00b7a1a22b3" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c11f1e8-bc0d-34e2-8663-e4a9f6516d86" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The parameter of pointer type is declared: shape2" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="CODSTA-95" lnHash="-1572071035" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1572071035" unbViolId="1c2c778e-4fa6-3052-88cc-a61c32aa37de" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98b2aaa3-9758-3100-969e-366c251f6725" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Parameter 'shape2' is not validated before use" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="CERT_C-API00-a" lnHash="-1572071035" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1572071035" unbViolId="07c0a19d-d30a-3d29-acd7-6880ea091ed5" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51184d22-8a3f-3825-a71a-ee4e1aee4273" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Parameter 'shape2' is not validated before use" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="CODSTA-86" lnHash="-1572071035" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1572071035" unbViolId="5e76fe06-38ed-33f7-961e-81fbead276f0" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9ff75fe-df86-303b-96e2-e810e1793022" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="2" auth="lyao" locRef="2" rule="AUTOSAR-M7_1_2-b" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="7a8a7488-c97b-3dab-9bd1-d9244719274b" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5feb5ea8-ff1a-3edb-8d12-1fa95845d8a7" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="4" auth="lyao" locRef="2" rule="MISRAC2012-RULE_8_13-a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="cabfc0c7-d67c-3f39-bca8-9a7fe4c23f87" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8c3754e-aaaf-309f-8498-8bbc1f4a957c" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="CERT_C-DCL13-a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="74d23471-42b1-32f8-9f99-642dc118cf99" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5e51519-bf27-39e1-b384-9ff06085845c" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="MISRA2004-16_7" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="dde38d8b-0330-3214-9303-1cb392e280db" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0ce956d-2eb5-3fdc-a534-0bba1d3cbf4c" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="4" auth="lyao" locRef="2" rule="MISRA2012-RULE-8_13_a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="17db9e7e-a0ff-3cfd-b0b3-c34cf3403145" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ae85050-fe47-3273-a3dc-37ebe3f5fd8e" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="4" auth="lyao" locRef="2" rule="JSF-118" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="1175cb49-006f-3ace-9691-0d071261df04" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62b84372-da89-344b-a4a4-511dabe28db1" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="2" auth="lyao" locRef="2" rule="MISRA2008-7_1_2_a" lnHash="-1572071035" rule.header="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" tool="c++test" lineHash="-1572071035" unbViolId="733778a3-a6e2-3dcd-9af1-75e7ad40d427" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e6530b2e-e2d9-3374-a5a6-d8e28bffd816" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The 'shape2' identifier should have the 'p' prefix" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="3" sev="3" auth="lyao" locRef="2" rule="NAMING-HN-34" lnHash="-1572071035" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="-1572071035" unbViolId="6f2e8c48-88df-3294-9461-7f51f32110dd" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce4fb293-ed9e-3e7a-9a50-0bac58011974" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="4" sev="3" auth="lyao" locRef="2" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="5133b5e5-7aa4-3c16-bfa9-657fa1a47e21" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68982340-87c1-39f8-9d89-cc683444bdc0" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="4" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="5" sev="4" auth="lyao" locRef="2" rule="JSF-043" lnHash="2070090220" rule.header="Tabs should be avoided" tool="c++test" lineHash="2070090220" unbViolId="42f3f7cd-6f1a-3bf3-9961-4eb572a24208" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5fa61b0-4932-3bf9-8d65-3e029e6c3499" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="5" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="5" sev="5" auth="lyao" locRef="2" rule="FORMAT-01" lnHash="2070090220" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="2070090220" unbViolId="2afbf3af-a81b-3068-aa98-7c56c463c7e7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef1170e5-d07a-34d4-8f58-612b0f8ddbfc" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="5" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="5" sev="5" auth="lyao" locRef="2" rule="HICPP-2_1_1-a" lnHash="2070090220" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="2070090220" unbViolId="7d1963d9-aa40-3b1c-ae5b-d7b393b26e88" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d8b814d-24d1-3caf-8fbb-a29a2ef56f69" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="5" goals="0,"/>
    <FlowViol msg="Division by &quot;shape2.getArea()&quot; which may possibly be zero" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" ruleSAFMsg="Point of division by zero" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="6" rule="AUTOSAR-A5_6_1-a" FirstElSrcRngStartPos="0" lnHash="2070090220" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" rule.header="Avoid division by zero" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1887152637" lang="cpp" violId="f0644182-95a3-3867-9468-fc1ca01a1104" locEndPos="0" locEndLn="6" goals="0," locStartln="5" sev="2" locRef="2" tool="c++test" lineHash="2070090220" unbViolId="b1b8c4d3-9d62-3eea-ad14-115aba013b3a" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <ElDescList>
            <ElDesc lineHash="-392957557" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="double getArea() const { return 0; }" ElType="!" rngLn="19"/>
          </ElDescList>
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="return shape1->getArea()/shape2->getArea();" ElType=".P" rngLn="5">
          <Anns>
            <Ann msg="Point of division by zero" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Division by &quot;shape2.getArea()&quot; which may possibly be zero" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" ruleSAFMsg="Point of division by zero" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="6" rule="AUTOSAR-M0_3_1-e" FirstElSrcRngStartPos="0" lnHash="2070090220" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" rule.header="Avoid division by zero" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-643759501" lang="cpp" violId="64c2d40b-3a2f-3a74-aa54-5a041d18cb64" locEndPos="0" locEndLn="6" goals="0," locStartln="5" sev="2" locRef="2" tool="c++test" lineHash="2070090220" unbViolId="434dc4e1-47cf-3eb3-8131-7cf2db67a5f3" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <ElDescList>
            <ElDesc lineHash="-392957557" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="double getArea() const { return 0; }" ElType="!" rngLn="19"/>
          </ElDescList>
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="return shape1->getArea()/shape2->getArea();" ElType=".P" rngLn="5">
          <Anns>
            <Ann msg="Point of division by zero" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Division by &quot;shape2.getArea()&quot; which may possibly be zero" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" ruleSAFMsg="Point of division by zero" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="6" rule="BD-PB-ZERO" FirstElSrcRngStartPos="0" lnHash="2070090220" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" rule.header="Avoid division by zero" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2097929330" lang="cpp" violId="4ed1981a-72ef-3038-b936-a0f92d4a5bdf" locEndPos="0" locEndLn="6" goals="0," locStartln="5" sev="1" locRef="2" tool="c++test" lineHash="2070090220" unbViolId="fe11b227-653f-3b64-9e57-bc3922d85fba" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <ElDescList>
            <ElDesc lineHash="-392957557" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="double getArea() const { return 0; }" ElType="!" rngLn="19"/>
          </ElDescList>
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="return shape1->getArea()/shape2->getArea();" ElType=".P" rngLn="5">
          <Anns>
            <Ann msg="Point of division by zero" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Division by &quot;shape2.getArea()&quot; which may possibly be zero" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" ruleSAFMsg="Point of division by zero" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="6" rule="CERT_C-FLP03-a" FirstElSrcRngStartPos="0" lnHash="2070090220" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" rule.header="Avoid division by zero" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1966890730" lang="cpp" violId="c02766fc-cb1a-39f8-96a1-95fd2044b59b" locEndPos="0" locEndLn="6" goals="0," locStartln="5" sev="3" locRef="2" tool="c++test" lineHash="2070090220" unbViolId="acd933d5-852f-3d09-90b8-7cdf30c39666" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <ElDescList>
            <ElDesc lineHash="-392957557" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="double getArea() const { return 0; }" ElType="!" rngLn="19"/>
          </ElDescList>
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="return shape1->getArea()/shape2->getArea();" ElType=".P" rngLn="5">
          <Anns>
            <Ann msg="Point of division by zero" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Division by &quot;shape2.getArea()&quot; which may possibly be zero" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" ruleSAFMsg="Point of division by zero" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="6" rule="CERT_C-INT33-a" FirstElSrcRngStartPos="0" lnHash="2070090220" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" rule.header="Avoid division by zero" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-395738124" lang="cpp" violId="64d4e9af-f290-3e75-a136-9c8ca604593c" locEndPos="0" locEndLn="6" goals="0," locStartln="5" sev="2" locRef="2" tool="c++test" lineHash="2070090220" unbViolId="55525081-6d1d-3524-8caa-d6885277a966" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <ElDescList>
            <ElDesc lineHash="-392957557" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="double getArea() const { return 0; }" ElType="!" rngLn="19"/>
          </ElDescList>
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="return shape1->getArea()/shape2->getArea();" ElType=".P" rngLn="5">
          <Anns>
            <Ann msg="Point of division by zero" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Division by &quot;shape2.getArea()&quot; which may possibly be zero" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" ruleSAFMsg="Point of division by zero" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="6" rule="HICPP-5_5_1-a" FirstElSrcRngStartPos="0" lnHash="2070090220" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" rule.header="Avoid division by zero" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="566822700" lang="cpp" violId="491cf22b-4540-39f3-8d5c-6911eaba144a" locEndPos="0" locEndLn="6" goals="0," locStartln="5" sev="1" locRef="2" tool="c++test" lineHash="2070090220" unbViolId="441417a8-7fa6-3fb2-a2cc-0fb2b47194d1" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <ElDescList>
            <ElDesc lineHash="-392957557" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="double getArea() const { return 0; }" ElType="!" rngLn="19"/>
          </ElDescList>
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="return shape1->getArea()/shape2->getArea();" ElType=".P" rngLn="5">
          <Anns>
            <Ann msg="Point of division by zero" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Division by &quot;shape2.getArea()&quot; which may possibly be zero" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" ruleSAFMsg="Point of division by zero" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="6" rule="MISRA2008-0_3_1_c" FirstElSrcRngStartPos="0" lnHash="2070090220" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" rule.header="Avoid division by zero" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-56152077" lang="cpp" violId="d7d3cd43-751a-32f1-b24a-558a033abbb7" locEndPos="0" locEndLn="6" goals="0," locStartln="5" sev="5" locRef="2" tool="c++test" lineHash="2070090220" unbViolId="0f0a0577-7675-3d3f-a539-a16f21bc59bf" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <ElDescList>
            <ElDesc lineHash="-392957557" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="double getArea() const { return 0; }" ElType="!" rngLn="19"/>
          </ElDescList>
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="return shape1->getArea()/shape2->getArea();" ElType=".P" rngLn="5">
          <Anns>
            <Ann msg="Point of division by zero" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Division by &quot;shape2.getArea()&quot; which may possibly be zero" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" ruleSAFMsg="Point of division by zero" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="6" rule="MISRA2012-DIR-4_1_c" FirstElSrcRngStartPos="0" lnHash="2070090220" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" rule.header="Avoid division by zero" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1579886536" lang="cpp" violId="de9f7098-bf41-3c48-bf0a-6dcf6f511b5b" locEndPos="0" locEndLn="6" goals="0," locStartln="5" sev="2" locRef="2" tool="c++test" lineHash="2070090220" unbViolId="108f4f72-f2fb-3e96-8f72-096c2b70b5ba" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <ElDescList>
            <ElDesc lineHash="-392957557" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="double getArea() const { return 0; }" ElType="!" rngLn="19"/>
          </ElDescList>
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="return shape1->getArea()/shape2->getArea();" ElType=".P" rngLn="5">
          <Anns>
            <Ann msg="Point of division by zero" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Division by &quot;shape2.getArea()&quot; which may possibly be zero" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" ruleSAFMsg="Point of division by zero" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="6" rule="MISRA2012-RULE-1_3_a" FirstElSrcRngStartPos="0" lnHash="2070090220" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" rule.header="Avoid division by zero" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1579699948" lang="cpp" violId="58b360fb-6506-3d7b-8972-7ea1c373bca9" locEndPos="0" locEndLn="6" goals="0," locStartln="5" sev="2" locRef="2" tool="c++test" lineHash="2070090220" unbViolId="c0e89c07-0946-3662-b72f-5f2ec1f66193" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <ElDescList>
            <ElDesc lineHash="-392957557" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="double getArea() const { return 0; }" ElType="!" rngLn="19"/>
          </ElDescList>
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="return shape1->getArea()/shape2->getArea();" ElType=".P" rngLn="5">
          <Anns>
            <Ann msg="Point of division by zero" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Division by &quot;shape2.getArea()&quot; which may possibly be zero" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" ruleSAFMsg="Point of division by zero" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="6" rule="MISRAC2012-DIR_4_1-c" FirstElSrcRngStartPos="0" lnHash="2070090220" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" rule.header="Avoid division by zero" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2109829747" lang="cpp" violId="e41213f2-e515-3654-aefd-1581ff26ef7d" locEndPos="0" locEndLn="6" goals="0," locStartln="5" sev="2" locRef="2" tool="c++test" lineHash="2070090220" unbViolId="48132907-f762-35dd-9df1-50560c46c438" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <ElDescList>
            <ElDesc lineHash="-392957557" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="double getArea() const { return 0; }" ElType="!" rngLn="19"/>
          </ElDescList>
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="return shape1->getArea()/shape2->getArea();" ElType=".P" rngLn="5">
          <Anns>
            <Ann msg="Point of division by zero" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Division by &quot;shape2.getArea()&quot; which may possibly be zero" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" ruleSAFMsg="Point of division by zero" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="6" rule="MISRAC2012-RULE_1_3-a" FirstElSrcRngStartPos="0" lnHash="2070090220" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" rule.header="Avoid division by zero" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1793694323" lang="cpp" violId="5689fb6c-ec95-3b59-9116-b2d4349c2c6c" locEndPos="0" locEndLn="6" goals="0," locStartln="5" sev="2" locRef="2" tool="c++test" lineHash="2070090220" unbViolId="81e60122-7e15-3403-950e-f89ccfe7478b" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <ElDescList>
            <ElDesc lineHash="-392957557" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" desc="double getArea() const { return 0; }" ElType="!" rngLn="19"/>
          </ElDescList>
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" desc="return shape1->getArea()/shape2->getArea();" ElType=".P" rngLn="5">
          <Anns>
            <Ann msg="Point of division by zero" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="'return' statement should be used with parenthesis" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="5" sev="3" auth="lyao" locRef="2" rule="FORMAT-25_b" lnHash="2070090220" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="2070090220" unbViolId="823954f0-ff67-300f-82fb-26643c2df5fb" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb069fbe-8cf8-367f-89e1-1f71c5eeceaf" locEndPos="2" locType="sr" hash="-1665970746" locEndLn="5" goals="0,"/>
    <StdViol msg="floating-point arithmetic is not documented" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="5" sev="5" auth="lyao" locRef="2" rule="MISRA2008-0_4_2" lnHash="2070090220" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="2070090220" unbViolId="3232a6cf-92d3-3905-9ed4-827e78d8d794" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a6dbccf-0fcf-34af-8549-9f8e5977650a" locEndPos="9" locType="sr" hash="-1665970746" locEndLn="5" goals="0,"/>
    <StdViol msg="floating-point arithmetic is not documented" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="5" sev="3" auth="lyao" locRef="2" rule="OWASP2019-API9-d" lnHash="2070090220" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="2070090220" unbViolId="8d3be039-712a-3f4c-832e-5a95554c9fa9" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="473b0f02-c40d-3aaf-bf8f-d5e4a12f6861" locEndPos="9" locType="sr" hash="-1665970746" locEndLn="5" goals="0,"/>
    <StdViol msg="floating-point arithmetic is not documented" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="5" sev="2" auth="lyao" locRef="2" rule="AUTOSAR-M0_4_2-a" lnHash="2070090220" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="2070090220" unbViolId="282e8f3d-120a-3028-9027-2e4ceeb3a94a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71a87138-5194-32f5-bfc4-81d6c83338f9" locEndPos="9" locType="sr" hash="-1665970746" locEndLn="5" goals="0,"/>
    <StdViol msg="floating-point arithmetic is not documented" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locStartln="5" sev="3" auth="lyao" locRef="2" rule="COMMENT-10" lnHash="2070090220" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="2070090220" unbViolId="e7cd8c91-fd7f-3339-8f2b-79426fae5ffc" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed62c27e-9f86-38da-9c22-450458a6282b" locEndPos="9" locType="sr" hash="-1665970746" locEndLn="5" goals="0,"/>
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="1" sev="3" auth="lyao" locRef="3" rule="PREPROC-18" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be included" tool="c++test" lineHash="1233725276" unbViolId="18bce7b6-4cf0-3b31-afd3-2c90f98c5c66" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a27bf3f-895c-3634-b444-4b208974b52f" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="1" sev="2" auth="lyao" locRef="3" rule="JSF-022" lnHash="1233725276" rule.header="The input/output library &lt;stdio.h> shall not be used" tool="c++test" lineHash="1233725276" unbViolId="39e5049c-ee74-3199-a4fa-23f084121ea4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2162f974-40e0-3dd5-bd28-6615a7245d78" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="The assertion density is lower than two assertions per function" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="1" sev="3" auth="lyao" locRef="3" rule="METRICS-31" lnHash="1233725276" rule.header="The assertion density of the code should average to a minimum of two assertions per function" tool="c++test" lineHash="1233725276" unbViolId="468ce302-b750-376c-8c37-07c7980bd4ea" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac739250-4e2d-3f6f-a5e0-510b15ba1067" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="The filename 'MemoryLeak.cpp' should be in lowercase" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="1" sev="3" auth="lyao" locRef="3" rule="NAMING-03" lnHash="1233725276" rule.header="Use lowercase for file names" tool="c++test" lineHash="1233725276" unbViolId="1a7152d4-224e-3203-abcf-9da0b8b111d0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fef2d162-b6a5-3ffc-8668-29a201e87942" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="Implementation file 'MemoryLeak.cpp' should have the file name extension &quot;.cc&quot;" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="1" sev="3" auth="lyao" locRef="3" rule="NAMING-38" lnHash="1233725276" rule.header="Implementation files in C++ always have the file name extension &quot;.cc&quot;" tool="c++test" lineHash="1233725276" unbViolId="9d0c5a00-4804-3b30-84ec-4bb83fed5f45" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5ce95e1-b0ca-3187-a217-40d6e0783dc9" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="Implementation file 'MemoryLeak.cpp' should declare a local constant string that begins from characters &quot;@(#)&quot; " ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="1" sev="5" auth="lyao" locRef="3" rule="PFO-04" lnHash="1233725276" rule.header="Every implementation file should declare a local constant string that describes the file" tool="c++test" lineHash="1233725276" unbViolId="acb3281a-0c6c-3f74-8e1d-6f2136608a67" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a4facd7c-7d58-3917-9757-9580b3e699a5" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="Instead of C library header '&lt;stdio.h>' the corresponding C++ library header should be used" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="1" sev="2" auth="lyao" locRef="3" rule="MISRA2008-18_0_1" lnHash="1233725276" rule.header="The C library shall not be used" tool="c++test" lineHash="1233725276" unbViolId="7a7a5b71-604e-3c8b-954d-bc1f24d3d8a3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b13d51f3-f7b0-3243-87c7-3d0c3ed86075" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="Instead of C library header '&lt;stdio.h>' the corresponding C++ library header should be used" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="1" sev="3" auth="lyao" locRef="3" rule="HICPP-1_3_3-a" lnHash="1233725276" rule.header="The C library shall not be used" tool="c++test" lineHash="1233725276" unbViolId="f1119544-8961-3b67-bbb4-d99c799eb2c3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0bf2c79-8bae-3c19-9f0c-b2390aa358a9" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="Instead of C library header '&lt;stdio.h>' the corresponding C++ library header should be used" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="1" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-A18_0_1-a" lnHash="1233725276" rule.header="The C library shall not be used" tool="c++test" lineHash="1233725276" unbViolId="c6862180-ba9e-3d5e-85f6-b077cd794689" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0346e2f7-6191-3d73-b981-aa0ef558cf28" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="Instead of C library header '&lt;stdio.h>' the corresponding C++ library header should be used" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="1" sev="3" auth="lyao" locRef="3" rule="CODSTA-CPP-59" lnHash="1233725276" rule.header="The C library shall not be used" tool="c++test" lineHash="1233725276" unbViolId="7391c7e5-17d0-37c2-aaf7-79f971d1fb86" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8bcf66c9-8ba0-3d52-9bd2-ed5a51f2c0f9" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="Instead of C library header '&lt;stdio.h>' the corresponding C++ library header should be used" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="1" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-A1_1_1-d" lnHash="1233725276" rule.header="The C library shall not be used" tool="c++test" lineHash="1233725276" unbViolId="b69c6110-ee80-3ed6-be11-744baafc48a0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05c9fb4e-a307-3fb6-a58c-863a888d69d9" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the copyright information at the begin of file 'MemoryLeak.cpp'" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="1" sev="3" auth="lyao" locRef="3" rule="COMMENT-02" lnHash="1233725276" rule.header="Provide copyright information" tool="c++test" lineHash="1233725276" unbViolId="8aa0e7db-7c06-3472-82f2-d087fe076004" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="edbdc998-5043-3761-9e0c-c5ee5e196ad7" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the copyright information at the begin of file 'MemoryLeak.cpp'" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="1" sev="3" auth="lyao" locRef="3" rule="JSF-133_b" lnHash="1233725276" rule.header="Every source file will contain copyright information" tool="c++test" lineHash="1233725276" unbViolId="7cabf3d6-a450-395d-b971-8141b6f11d3d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05eb2c9a-c712-3269-a799-2e8f55a44179" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the information on the file at the begin of file 'MemoryLeak.cpp'" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="1" sev="3" auth="lyao" locRef="3" rule="COMMENT-03" lnHash="1233725276" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="1233725276" unbViolId="870ca6ce-ba48-341b-a9a1-25b3c439815d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bfd0bc29-3e52-32ec-86dd-6afac1a424ed" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the information on the file at the begin of file 'MemoryLeak.cpp'" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="1" sev="3" auth="lyao" locRef="3" rule="JSF-133_a" lnHash="1233725276" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="1233725276" unbViolId="dd33be6d-9989-390b-9a5b-909e9571a399" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee304f9a-dc52-315d-858f-6c03da620dc6" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="Ensure that C Standard Library is securely used" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="1" sev="4" auth="lyao" locRef="3" rule="HICPP-17_2_1-a" lnHash="1233725276" rule.header="Wrap use of the C Standard Library" tool="c++test" lineHash="1233725276" unbViolId="f3271005-9112-30f8-bfc9-26b14b8f02a3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8a113dc-4b3f-3823-8d0f-2708f3f5e68e" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="1" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-M27_0_1-a" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be used" tool="c++test" lineHash="1233725276" unbViolId="bd6fa35a-2dd9-3446-9e31-88db14d32bb4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="33ba2bd8-010a-3446-96fc-053b1e1b2fdd" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="1" sev="2" auth="lyao" locRef="3" rule="MISRA2008-27_0_1" lnHash="1233725276" rule.header="The stream input/output library &lt;cstdio> shall not be used" tool="c++test" lineHash="1233725276" unbViolId="af792890-294f-3781-918a-65c7c0aedb94" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="44f0974e-844e-3260-915c-08dc9160c253" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="1" sev="3" auth="lyao" locRef="3" rule="MISRA2004-20_9" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be used" tool="c++test" lineHash="1233725276" unbViolId="05852872-065e-348a-b803-e3ebe4ffb97d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ad46f07-f900-3f6d-8831-67c70b4d7b11" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="Do not declare the 'IOException' type in the global namespace" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="3" sev="4" auth="lyao" locRef="3" rule="JSF-098" lnHash="-738024550" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-738024550" unbViolId="3af2c176-f306-3fc8-a62b-da32d14fcf13" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bfb72202-12df-3775-a5b8-72a34065a2ac" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Do not declare the 'IOException' type in the global namespace" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="3" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-M7_3_1-a" lnHash="-738024550" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-738024550" unbViolId="a85ca288-eb94-3942-a28a-55850ebfac70" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aba7306a-16b6-3dcb-9e2a-77a9028aca4e" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Do not declare the 'IOException' type in the global namespace" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="3" sev="3" auth="lyao" locRef="3" rule="CODSTA-CPP-36" lnHash="-738024550" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-738024550" unbViolId="3af1c1e5-7093-3722-a43e-56d23434b266" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10c9b657-e5dd-3c18-ab87-8215badaf425" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Do not declare the 'IOException' type in the global namespace" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="3" sev="2" auth="lyao" locRef="3" rule="MISRA2008-7_3_1" lnHash="-738024550" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-738024550" unbViolId="6303abab-6154-33fd-b997-863297156f76" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d35a0426-0595-32ec-858c-1dd63ba11322" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="The declaration of the 'IOException' type should be preceded by a comment that contains the '@brief' tag" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="3" sev="3" auth="lyao" locRef="3" rule="COMMENT-14" lnHash="-738024550" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-738024550" unbViolId="071cccd9-5c48-3bff-b565-88988760d4da" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1356ed48-ccc4-3fd1-938c-58048ae52c32" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="The declaration of the 'IOException' type should be preceded by a comment that contains the '@brief' tag" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="3" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-A2_7_3-a" lnHash="-738024550" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-738024550" unbViolId="e9657ae0-c521-3a13-b4b7-b266deda9125" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eeab342d-15b8-30e7-9341-bfea001feec0" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Class 'IOException' does not define any constructors" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="3" sev="2" auth="lyao" locRef="3" rule="CODSTA-CPP-19" lnHash="-738024550" rule.header="Declare at least one constructor to prevent the compiler from doing so" tool="c++test" lineHash="-738024550" unbViolId="8a99371f-c9fd-38f0-a04f-e2e1438580a2" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8cdc3031-b5af-3ce8-9f92-7683295ef53c" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Class 'IOException' should be final" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="3" sev="4" auth="lyao" locRef="3" rule="AUTOSAR-A12_4_2-a" lnHash="-738024550" rule.header="If a public destructor of a class is non-virtual, then the class should be declared final" tool="c++test" lineHash="-738024550" unbViolId="11cdc161-7126-37d5-8017-82d203950c62" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d492867-ecd0-3676-81c5-d4abbb325863" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Class 'IOException' should be final" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="3" sev="3" auth="lyao" locRef="3" rule="CODSTA-MCPP-23" lnHash="-738024550" rule.header="If a public destructor of a class is non-virtual, then the class should be declared final" tool="c++test" lineHash="-738024550" unbViolId="edf87d55-f337-3192-8159-bbcd08faabe2" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad14ae17-2f81-3a23-8355-13a4fcb2bc33" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Explicitly declare default constructor in 'IOException'" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="3" sev="3" auth="lyao" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="77b5edd6-47ff-308f-9b86-c8cc2eee9957" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67e88d20-aac9-3133-a19b-c329801dbb44" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Explicitly declare destructor in 'IOException'" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="3" sev="3" auth="lyao" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="dc0f4019-0d42-3d2d-a33e-baf193681337" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="399d29e3-cf1b-32ed-8bb6-a5ead8bd4a79" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Explicitly declare copy assignment operator in 'IOException'" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="3" sev="3" auth="lyao" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="35ed291c-4ad3-3660-8b53-e5af534c3e30" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b056be0e-8117-3fe0-ab29-0fe9942d1a2f" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Explicitly declare move assignment operator in 'IOException'" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="3" sev="3" auth="lyao" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="dda47c82-93ab-36ea-b617-1b3fdc96ac0f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d0fa837-37d5-300e-b864-77e6b24309ad" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Explicitly declare copy constructor in 'IOException'" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="3" sev="3" auth="lyao" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="d9435e63-f915-3693-b2b9-4de2fb68a3ab" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6536a0ac-a090-3ddb-8b2f-633088506c5a" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Explicitly declare move constructor in 'IOException'" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="3" sev="3" auth="lyao" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="01597a6e-30e0-3d47-be30-20a69dd2b5d9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a03b82a3-858d-3640-ba88-704f671a18b5" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Class 'IOException' missing assignment operator or special comment" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="3" sev="3" auth="lyao" locRef="3" rule="MRM-04" lnHash="-738024550" rule.header="All classes should contain the assignment operator or appropriate comment" tool="c++test" lineHash="-738024550" unbViolId="5da4f583-6973-3383-aa07-fc65c4251a38" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f7dcd6f9-4c75-39a7-80c0-eed919cbeec9" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Class 'IOException' missing copy constructor or special comment" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="3" sev="3" auth="lyao" locRef="3" rule="MRM-05" lnHash="-738024550" rule.header="All classes should contain the copy constructor or appropriate comment" tool="c++test" lineHash="-738024550" unbViolId="616fa34d-8d7d-35ff-ad89-2d37f742571a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d45cc617-474c-380b-a0ef-c9519cde689c" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="All letters beside the first one in name 'IOException' should be lowercase" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="3" sev="3" auth="lyao" locRef="3" rule="NAMING-40" lnHash="-738024550" rule.header="Only the first word of the name of a class, structure, namespace, enumeration, or typedef will begin with an uppercase letter" tool="c++test" lineHash="-738024550" unbViolId="581fc115-359d-38cb-bb4c-1467a8e3ce83" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ae6b272-6aaf-3b46-b85b-ac00de2887b2" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="The 'IOException' identifier should have the 'C' prefix" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="3" sev="3" auth="lyao" locRef="3" rule="NAMING-HN-19" lnHash="-738024550" rule.header="Hungarian notation for class declaration" tool="c++test" lineHash="-738024550" unbViolId="eb7a1e2b-9948-39dc-bab5-73502fa13a81" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8897bb4-40a1-3790-a566-e4d085377d97" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="4" auth="lyao" locRef="3" rule="MISRA2008-3_9_2" lnHash="-1086168919" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="13d3c6e3-345e-340d-bb4f-09d32157ad04" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="353d230e-818d-3589-8157-b5cecf689e25" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="MISRA-013" lnHash="-1086168919" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1086168919" unbViolId="4887ddf0-07e4-3543-8a71-e664a07532b8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8e689742-5907-35a2-8d1e-f3be54ba47c9" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="CODSTA-223" lnHash="-1086168919" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="2ff3f4c0-5de6-3093-903a-e7b64475771f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a78f2348-7640-3bcc-aeae-5983cb1a9f10" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="-1086168919" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="0435622c-3c2f-38fe-aaa7-7321dd3ebfac" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e7f9bd1f-8009-3a39-b44b-d61eddbd8821" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="HICPP-7_1_6-b" lnHash="-1086168919" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="-1086168919" unbViolId="fc5619e2-a78a-3e7f-a4dd-f398a09b8df2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="648a946e-6b72-3a56-956e-11296c0d39fe" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="4" auth="lyao" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="a3d00261-3bd9-3f12-be46-5dd39127093c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97fdd3fd-f363-39c6-ae1e-53e9ede83ad9" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="2" auth="lyao" locRef="3" rule="JSF-209_b" lnHash="-1086168919" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="f4730ede-2ccd-3e4a-add1-58b1a2bea955" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="15ecc9e5-ea3f-3a57-9012-e1753b9d502d" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="MISRA2004-6_3_b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="4157bac2-3a50-3ce9-8478-90e7f42a6163" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ba6dc76-8ced-34a7-8d0a-2b0ff742e0b9" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="4" auth="lyao" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="36107363-79d3-3439-9fcc-16ed36929077" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3cf98c3a-ee5f-30e7-a2e9-d040d673702c" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="HICPP-3_5_1-b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="36aea812-2718-396b-8519-4c29912a0224" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92b2adf7-6967-3c6d-8ac1-457c963300fc" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The return type of the 'readIntegerArray' function should be declared as 'auto'" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="2" auth="lyao" locRef="3" rule="CODSTA-MCPP-08_b" lnHash="-1086168919" rule.header="Prefer 'auto' to explicit type names for function return types" tool="c++test" lineHash="-1086168919" unbViolId="05bbb78d-85bb-30a4-b140-be58e1af37bf" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db5e618b-3b1f-33f7-9eb4-49cd366297e5" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The definition of the 'readIntegerArray' function is not preceded by a comment" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="COMMENT-04" lnHash="-1086168919" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1086168919" unbViolId="fe7c2b6e-9b0e-3f59-9528-a1f049a1ce62" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="058f90cb-05e8-37b4-b9e4-40c4ceab7d36" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The definition of the 'readIntegerArray' function is not preceded by a comment" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="4" auth="lyao" locRef="3" rule="JSF-134" lnHash="-1086168919" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1086168919" unbViolId="b833e458-64cc-3619-b003-6e10f0a7c760" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9347519a-a4a9-350c-88fe-2db93031f80d" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="4" auth="lyao" locRef="3" rule="OWASP2019-API9-e" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="d0fda93f-38be-3c51-900a-a5fc46c551c3" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61b805fc-956e-39dd-aa60-a6ec24727cf1" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-A3_3_1-a" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="bc1fad94-c613-371b-91c2-f798e6a91717" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dcfbdb1e-36e0-34e9-afa6-0c9cae666c45" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="4" auth="lyao" locRef="3" rule="JSF-137" lnHash="-1086168919" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-1086168919" unbViolId="01bbb09d-0d00-3841-9dfb-ef711ca1ff9e" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="913b0ee3-c79c-3f41-bd26-dd612f2f177a" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="4" auth="lyao" locRef="3" rule="MISRA-023" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="746d4b62-dd77-3952-8aa9-52cdbedc7745" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8dd79189-b806-3751-a468-a885168792eb" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="2" auth="lyao" locRef="3" rule="MISRA2008-3_3_1" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="a839c223-5882-3c42-8df1-b584327a19d8" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9531da1d-40e9-3dd6-8b37-00d4e1bd13b2" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="CERT_C-DCL15-a" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="0e232cbd-1332-34d5-9cc2-2acc7a2599b6" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="045bb0fc-3ff7-3278-bead-da94a4806b56" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="4" auth="lyao" locRef="3" rule="MISRA2004-8_10" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="e6ba9944-fd39-398e-8011-f4cc877daa86" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9e2c1b1-4193-333b-9f86-bc59fe3b9673" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The name 'readIntegerArray' should be composed only of lowercase letters" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="JSF-051" lnHash="-1086168919" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1086168919" unbViolId="d012d048-0d9c-3a37-894f-c639806b7bdd" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5dfde1b-ecbf-3e93-80b3-cd596d323532" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The name 'readIntegerArray' should be composed only of lowercase letters" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="NAMING-44" lnHash="-1086168919" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1086168919" unbViolId="bf8ccaf0-7b65-303e-a6ec-0efa699d0edf" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b0fd114-89b4-3247-af61-73a4266b34bb" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Do not declare the 'readIntegerArray' function in the global namespace" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="4" auth="lyao" locRef="3" rule="JSF-098" lnHash="-1086168919" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-1086168919" unbViolId="fd49a3aa-e3c8-3b8b-aca3-3e27dcbe7347" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a9d129f-f4a1-3e47-b071-c59ce0d5ef00" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Do not declare the 'readIntegerArray' function in the global namespace" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-M7_3_1-a" lnHash="-1086168919" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1086168919" unbViolId="461d1773-b649-36a8-bbc8-288bd5bf72da" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9400310e-dd8b-3c05-a092-b6da09556a86" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Do not declare the 'readIntegerArray' function in the global namespace" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="CODSTA-CPP-36" lnHash="-1086168919" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1086168919" unbViolId="83685ff5-03b0-38f6-b92c-a66782f38af3" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6254fcca-d8c2-3572-b703-06ba223679a0" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Do not declare the 'readIntegerArray' function in the global namespace" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="2" auth="lyao" locRef="3" rule="MISRA2008-7_3_1" lnHash="-1086168919" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-1086168919" unbViolId="5d168ad1-1ac0-3471-9b02-b691f22aec49" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7bd4526-bd2b-3224-a584-49747e28350b" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Function 'readIntegerArray' returns a pointer type" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="CODSTA-94" lnHash="-1086168919" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1086168919" unbViolId="83f96920-6cc3-3a83-9224-8ec4d5404fdc" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f5f6289-7f34-356a-899c-7acec22faa75" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Function 'readIntegerArray' returns a pointer type" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="CODSTA-95" lnHash="-1086168919" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1086168919" unbViolId="441fdd93-5f35-34d3-bbf5-86a4fd6bee62" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bbd92d85-a734-3178-87cd-e3cd25a13d6e" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'readIntegerArray' function should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="COMMENT-14" lnHash="-1086168919" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1086168919" unbViolId="8df11f8b-a04d-3f11-aa33-7ff3b9eb469a" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="86b57d92-55b8-3add-bf8d-1fb0fecebd7f" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'readIntegerArray' function should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-A2_7_3-a" lnHash="-1086168919" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1086168919" unbViolId="e7ad3138-77ca-354b-891b-1753ff5c312f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1e601db-4cc2-33ac-91da-3fd489ef3326" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'file' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-A2_7_3-b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="74d955ae-a6b4-3c16-bc9e-80f5b3349745" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="833da4b0-2817-3734-9c11-ae15e1c2936b" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'file' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="COMMENT-14_b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="9bf4007a-d69f-389c-9677-0b9544b14c21" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c04d4076-ca1d-3fd6-a9f2-c82533f9dc8a" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'pSize' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-A2_7_3-b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="fd569a1b-5781-391e-aa9d-78efc21ff4d5" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94c5cb86-f78b-324f-aaf0-8c230af65918" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'pSize' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="COMMENT-14_b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="c6003345-bde9-338b-8bd0-617ff75883d3" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e006a4c0-af24-3d0e-9f89-78ee256c1158" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'readIntegerArray' function should be preceded by a comment that contains the '@return' tag" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-A2_7_3-b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="71ad1940-fa68-3597-b185-8e72e89eb710" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f760405-cf7c-3210-9ce4-ea5f0cd26ba9" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'readIntegerArray' function should be preceded by a comment that contains the '@return' tag" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="COMMENT-14_b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="04735334-0b8b-31fa-84d9-21c7551f8a88" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13110c85-14b9-32b8-ae59-9ec44438fdfd" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Return type is not placed in line before function 'readIntegerArray'" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="FORMAT-28" lnHash="-1086168919" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-1086168919" unbViolId="e010d8a5-f7c5-34e0-be02-c36bdfaf2d5a" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c827ed95-97f1-31b6-a1ec-3ca5d5e0d091" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Function 'readIntegerArray' has Cyclomatic Complexity value: 3" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="5" auth="lyao" locRef="3" rule="METRICS-29" lnHash="-1086168919" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-1086168919" unbViolId="3cbb68be-3fae-354f-9f8e-7b38a49f6824" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8362f82d-e497-39f8-8c1a-cf231c5f3c6f" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Function 'readIntegerArray' has Essential Complexity value: 1" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="5" auth="lyao" locRef="3" rule="METRICS-33" lnHash="-1086168919" rule.header="Report Essential Complexity" tool="c++test" lineHash="-1086168919" unbViolId="265fa9c6-ec25-3f78-976d-eb2f4764f8f0" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a527411-ed79-3f52-bff1-ce2a86cf8e03" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Naming convention not followed: readIntegerArray" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="NAMING-17" lnHash="-1086168919" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-1086168919" unbViolId="f7bd77e8-2199-3365-ba3f-c9a7732470f0" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a88bd2f-bc2d-3d72-96f8-6def72200ca9" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'readIntegerArray' function is not used in the testing scope" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="GLOBAL-UNUSEDFUNC" lnHash="-1086168919" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-1086168919" unbViolId="4d100ac7-5522-3a44-be23-defb54a19c6d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="152684cc-6690-34fb-812c-38e0a6961c2e" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'readIntegerArray' function is not used in the testing scope" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="4" auth="lyao" locRef="3" rule="AUTOSAR-M0_1_10-a" lnHash="-1086168919" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-1086168919" unbViolId="d25af060-3ba0-3957-bd77-9d3eee7687c1" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="1c0b09bc-689c-37c9-a50c-ac65a23814f2" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'readIntegerArray' function is not used in the testing scope" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="2" auth="lyao" locRef="3" rule="MISRA2008-0_1_10_b" lnHash="-1086168919" rule.header="Every defined function with external linkage shall be used" tool="c++test" lineHash="-1086168919" unbViolId="bac7bf89-1dbe-3fdb-b268-caf4e2a31110" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="97151b36-1783-3faf-81cd-b2249ec12bbe" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The identifier 'file' differs only by case from identifier 'FILE' declared in file 'stdio.h'" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="NAMING-45" lnHash="-1086168919" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-1086168919" unbViolId="d0b68e1e-5259-36d2-8d1e-a57f0585ea59" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52c9dcf7-fc2d-390b-9116-bd7bb78b6006" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The identifier 'file' differs only by case from identifier 'FILE' declared in file 'stdio.h'" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="JSF-048" lnHash="-1086168919" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-1086168919" unbViolId="25b4b9e9-8d8c-3170-a9eb-ced1bf21a3d8" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a620402-d5bd-3b7a-8f44-eefc0471e163" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The parameter of pointer or array type is declared: file" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="CODSTA-94" lnHash="-1086168919" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1086168919" unbViolId="641c715f-39da-30cd-8652-b8f56feffbe5" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd67fdee-8a62-3766-875d-c65b3994829a" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The parameter of pointer type is declared: file" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="CODSTA-95" lnHash="-1086168919" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1086168919" unbViolId="eb1bbbe0-568f-3a18-9668-07e21a4d5d71" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31450c9d-8283-30ec-a696-2abffb3ce3e8" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Identifier name: 'file' differs only by case from its type name: 'FILE'" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="2" auth="lyao" locRef="3" rule="MISRA2008-2_10_1" lnHash="-1086168919" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-1086168919" unbViolId="eb3d99b8-6cdb-3ac5-a5ef-f52ae3bae20e" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f1495670-7482-3b5d-9334-980e60219222" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Identifier name: 'file' differs only by case from its type name: 'FILE'" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="HICPP-2_4_1-a" lnHash="-1086168919" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-1086168919" unbViolId="9d58e475-4f24-33cd-8687-31ef504942fd" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5998dc6f-f7a1-30ff-9356-cb5038f6c4e9" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Identifier name: 'file' differs only by case from its type name: 'FILE'" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-M2_10_1-a" lnHash="-1086168919" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-1086168919" unbViolId="363830dd-fd5c-34d2-9593-2730354aa720" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="980d6dff-7436-30f1-851f-5d433db17f29" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Identifier name: 'file' differs only by case from its type name: 'FILE'" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="NAMING-47" lnHash="-1086168919" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-1086168919" unbViolId="9e4fc11a-a671-3c2d-b3c2-459b1bd7b1c5" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91f38ecf-d86b-3527-ad8d-e56e9eb44e64" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Parameter 'file' is not validated before use" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="CERT_C-API00-a" lnHash="-1086168919" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1086168919" unbViolId="93864492-f82c-3244-95ac-20c9844339cf" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d4437b5-344f-3183-8d15-3996bda6fdf7" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Parameter 'file' is not validated before use" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="CODSTA-86" lnHash="-1086168919" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1086168919" unbViolId="6279ea3c-1757-3c04-8fa8-af39cae15d34" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31f42998-be61-3acb-9646-08303d94162c" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'file' identifier should have the 'p' prefix" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="NAMING-HN-34" lnHash="-1086168919" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="-1086168919" unbViolId="ef1f4196-b1d0-3e73-816c-33b31a0b22e1" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d702916-cb02-3847-952e-430b484364ca" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="4" auth="lyao" locRef="3" rule="MISRA2008-3_9_2" lnHash="-1086168919" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="82d3eada-bae6-38fc-954f-7adec2028cef" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59935297-3fa0-3db3-bdc9-64714c00de71" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="MISRA-013" lnHash="-1086168919" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1086168919" unbViolId="1b4a7391-0cd5-3f20-ac97-5045c6462a06" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f317560-ac3b-3824-ac4b-1c8eacc11bf0" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="CODSTA-223" lnHash="-1086168919" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="21e3a216-2b98-301f-a0e3-ece145319228" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e47832d-0589-38fc-93ea-1ef1523ea508" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="-1086168919" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="20dd04d2-f8db-3418-b130-2c550407d2b3" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37a8b3ce-e210-37ce-9670-dd18da2ea55a" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="HICPP-7_1_6-b" lnHash="-1086168919" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="-1086168919" unbViolId="443bd774-216e-3faa-b3b9-1a71dfe2a6b7" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ee832c1-28b6-31cd-909c-9580902dc891" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="4" auth="lyao" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="6667d52f-a997-3621-9bf4-760801d2244f" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02ec7198-5fe8-3084-a727-7ff85fda8761" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="2" auth="lyao" locRef="3" rule="JSF-209_b" lnHash="-1086168919" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="3803eef5-962b-30d8-9514-dac42af6868f" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67b88061-c5ca-3c18-acd0-fbfaf4af05f3" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="MISRA2004-6_3_b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="caae5845-8d3f-395e-9df3-1db525536554" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c88c9bc9-22a0-39fc-a0d0-065a64c8cfd2" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="4" auth="lyao" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="6fcbd3fa-f3fc-3368-a0e8-0d244db683d2" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="204aa9f4-cc96-3701-92a9-bee95d8f60eb" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="HICPP-3_5_1-b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="064be661-71d8-39d5-8256-7d7c287443d7" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d6c44e99-258d-30da-aeb2-34fafdd5b079" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The parameter of pointer or array type is declared: pSize" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="CODSTA-94" lnHash="-1086168919" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1086168919" unbViolId="d427c05f-b657-35b3-af7a-3cd459032081" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3022ec1e-bb59-385d-bdea-8f7117e3cd0c" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The parameter of pointer type is declared: pSize" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="CODSTA-95" lnHash="-1086168919" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1086168919" unbViolId="01e65c17-210b-3c6c-bdb7-719a3ec9b8a8" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b667d260-0e50-3aa8-b78d-bf11a63f00fb" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Parameter 'pSize' is not validated before use" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="CERT_C-API00-a" lnHash="-1086168919" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1086168919" unbViolId="6ab4f695-ff30-30ee-bf38-5902c66ef6b7" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4c7c2dc-f558-3995-a424-41eefbd7c2a8" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Parameter 'pSize' is not validated before use" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="CODSTA-86" lnHash="-1086168919" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1086168919" unbViolId="2970eb25-d2ff-30b5-a9e2-786675a73df0" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47767013-ce5c-3cfd-92a4-058f26e512c8" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-M7_1_2-b" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="b0f68e82-afe1-37d3-b105-3e1f10184a6b" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad06ab02-cdf3-3200-ab4e-f3326bbc7d0d" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="4" auth="lyao" locRef="3" rule="MISRAC2012-RULE_8_13-a" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="6f129a38-2d2c-34b5-8775-c1ae294dc979" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a043fdf4-b67f-39e6-9d3f-c10f31d395b7" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="CERT_C-DCL13-a" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="d1b01e04-c5f6-3f0d-a945-36050f081144" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85990d8b-4764-375e-9d42-85bb693d7dde" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="MISRA2004-16_7" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="b034ba3d-6a73-3bf4-b815-7ab2326b771a" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc52d78c-1cce-39db-99bc-fdbea962827a" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="4" auth="lyao" locRef="3" rule="MISRA2012-RULE-8_13_a" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="a9983e9b-581f-3eb2-a239-4224e0e4e641" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="969cea62-9d96-3bc2-9952-b32b6a3dd5a6" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="4" auth="lyao" locRef="3" rule="JSF-118" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="8b761b9f-8236-321f-83a9-48a224d60d9f" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6600b200-8141-32e7-992c-2b0163712c14" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="2" auth="lyao" locRef="3" rule="MISRA2008-7_1_2_a" lnHash="-1086168919" rule.header="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" tool="c++test" lineHash="-1086168919" unbViolId="6265e0c8-45b3-34bc-9ce8-003024f8c9df" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24ea3929-cff4-3157-b722-83d5720197f2" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'pSize' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="NAMING-HN-23" lnHash="-1086168919" rule.header="Hungarian notation for int pointer, array, or reference types" tool="c++test" lineHash="-1086168919" unbViolId="fd0349de-ecc2-3a3b-a4ed-088a4a8a5be2" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cca5613a-7256-3a75-9586-b5b596bdc885" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'pSize' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="NAMING-HN-31" lnHash="-1086168919" rule.header="Hungarian notation for int pointer, array, or reference types" tool="c++test" lineHash="-1086168919" unbViolId="90d91ece-0748-3281-b9b5-05194f378406" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21b869e6-2f88-3b3b-bf90-efeb91190a48" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'pSize' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="5" sev="3" auth="lyao" locRef="3" rule="NAMING-HN-44" lnHash="-1086168919" rule.header="Hungarian notation for word pointer, array, or reference types" tool="c++test" lineHash="-1086168919" unbViolId="ec3b1e7a-8cac-3283-b917-3d56c92d3e54" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d70d8099-b108-3c36-a17b-62a8d584227a" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="6" sev="3" auth="lyao" locRef="3" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="6c4de0ff-1a9b-32ac-b2cc-dd653855be69" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2a66891-9ab6-380d-9552-52b97e80f576" locEndPos="1" locType="sr" hash="1013754779" locEndLn="6" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="4" auth="lyao" locRef="3" rule="JSF-043" lnHash="-1844934654" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1844934654" unbViolId="ab65b10d-3ad8-393d-849e-b629b17269bc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="832592bb-ccaf-38ab-adfb-7970aa040e8f" locEndPos="1" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="5" auth="lyao" locRef="3" rule="FORMAT-01" lnHash="-1844934654" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="7c4c6fb7-629d-3138-bc88-5bceaf202c3c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed06ae35-b6cf-3846-bfff-57d5bebfbd31" locEndPos="1" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="5" auth="lyao" locRef="3" rule="HICPP-2_1_1-a" lnHash="-1844934654" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="15a17f00-9c5b-3ad1-8475-07be9bea6e6d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f3bf4cb-3cf0-3f6b-9e49-3de9732f97a5" locEndPos="1" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Value returned from method &quot;fscanf&quot; should be checked" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="1" auth="lyao" locRef="3" rule="CERT_C-ERR33-d" lnHash="-1844934654" rule.header="Always check the returned value of non-void function" tool="c++test" lineHash="-1844934654" unbViolId="158667c2-c2d3-3092-a00c-b8521218863f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="b90d355c-5281-3edc-b9ab-a7ecd3ec1084" locEndPos="0" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The 'fscanf' library function should not be used" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="2" auth="lyao" locRef="3" rule="MISRAC2012-RULE_21_6-a" lnHash="-1844934654" rule.header="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" tool="c++test" lineHash="-1844934654" unbViolId="8e676af0-0e86-3e5c-afcd-e2db1d3d8c7c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="80b4d3dc-ba01-36ec-9615-2cac62a04f48" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'fscanf' library function should not be used" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="2" auth="lyao" locRef="3" rule="MISRA2012-RULE-21_6" lnHash="-1844934654" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="82094e70-410d-37ea-b280-7209524253e0" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b361e206-c863-35c7-b7da-e1a47ad86cfd" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'fscanf' library function should not be used" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="3" auth="lyao" locRef="3" rule="CERT_C-ERR02-a" lnHash="-1844934654" rule.header="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" tool="c++test" lineHash="-1844934654" unbViolId="ec29955d-e82e-35ad-81dd-4806fc85a97c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="971183e0-f29b-3eb7-87e9-b2b4bf325606" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'fscanf' library function should not be used" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="3" auth="lyao" locRef="3" rule="CODSTA-110" lnHash="-1844934654" rule.header="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" tool="c++test" lineHash="-1844934654" unbViolId="7f66eeae-536b-33a8-aa65-ebadc7b41c49" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9dab8086-58e4-3159-8ddf-dcd79cfb378d" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="The value returned by the standard library function 'fscanf' should be used" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="1" auth="lyao" locRef="3" rule="CERT_C-ERR33-a" lnHash="-1844934654" rule.header="The value returned by a standard library function that may return an error should be used" tool="c++test" lineHash="-1844934654" unbViolId="e405dcb8-7b7c-3f24-b2bd-379274d5a091" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e4f7f81-9a85-31dd-922a-0dce75e97f21" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="The value returned by the POSIX library function 'fscanf' should be used" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="2" auth="lyao" locRef="3" rule="APSC_DV-003235-a" lnHash="-1844934654" rule.header="The value returned by a POSIX library function that may return an error should be used" tool="c++test" lineHash="-1844934654" unbViolId="172f97c9-9162-3a6c-9534-cd8d72d7e1a9" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06b2d55f-a23d-3c91-b130-13c34a445c77" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="The value returned by the POSIX library function 'fscanf' should be used" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="1" auth="lyao" locRef="3" rule="CERT_C-POS54-a" lnHash="-1844934654" rule.header="The value returned by a POSIX library function that may return an error should be used" tool="c++test" lineHash="-1844934654" unbViolId="1edeb49c-6aff-3a59-ad7b-70abb8aef89f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5834667f-7593-3d6b-8dad-c14319287780" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unused function's 'fscanf' return value" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-A0_1_2-a" lnHash="-1844934654" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1844934654" unbViolId="6ee6c4cb-c3b3-320c-83bf-4d0cf1563705" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79c15cab-1da1-38a6-b825-f85b6159c2cb" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unused function's 'fscanf' return value" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="3" auth="lyao" locRef="3" rule="CODSTA-CPP-58" lnHash="-1844934654" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1844934654" unbViolId="dced824e-d499-3f1f-a428-2f961c255d91" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a01a79c-3511-3d53-9bca-9093ec5c3d8e" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unused function's 'fscanf' return value" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="2" auth="lyao" locRef="3" rule="MISRA2008-0_1_7" lnHash="-1844934654" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1844934654" unbViolId="544dc567-c55a-3a78-afde-b13deccb5462" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d2246e1-b888-3d9b-89d1-67bc820c892f" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unused function's 'fscanf' return value" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="4" auth="lyao" locRef="3" rule="JSF-115_a" lnHash="-1844934654" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1844934654" unbViolId="2392ff02-d9b7-3bf5-b7d3-85558fed12f1" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c1458b60-2945-3f72-a124-852fcf2e3fcc" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="3" auth="lyao" locRef="3" rule="CODSTA-122_a" lnHash="-1844934654" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1844934654" unbViolId="8a687662-3e91-3018-b08b-95f3cc18835c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e5b064e-b7c2-39e6-9b31-a7fe09110ca3" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="2" auth="lyao" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-1844934654" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1844934654" unbViolId="95b5d20c-f10c-3a81-bb6d-4bf31ec531e6" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7e3b74d-8c02-3bbf-a178-3b2f2413a42f" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="3" auth="lyao" locRef="3" rule="CERT_C-EXP12-a" lnHash="-1844934654" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1844934654" unbViolId="a3e2ef88-11d0-3fe1-aa12-b1c337f15568" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="111454e4-e219-3c4a-b0b1-9844ec159f1a" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="2" auth="lyao" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="-1844934654" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1844934654" unbViolId="bc08d56a-97a8-3198-8ad1-9b3f20e8b023" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4ab7353-8cef-3a48-b36a-7c15bb5a802f" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="3" auth="lyao" locRef="3" rule="MISRA2004-16_10" lnHash="-1844934654" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1844934654" unbViolId="218c886b-e3ac-33ac-ad02-f895d86b4a24" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a05900ea-a774-389d-96ce-95f3a5187826" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-M0_3_2-a" lnHash="-1844934654" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1844934654" unbViolId="7e0057a3-35ab-3e54-8341-eeed5ec4de8d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a7d1573-b81a-32b6-b304-68c4fdc2f94c" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="2" auth="lyao" locRef="3" rule="MISRA2008-0_3_2" lnHash="-1844934654" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1844934654" unbViolId="7a711bb5-9e67-315c-a578-b99274a33795" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0fccd5d9-80b0-302f-b270-059a4a2d150c" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="3" auth="lyao" locRef="3" rule="JSF-115" lnHash="-1844934654" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-1844934654" unbViolId="30a51591-0932-3a62-8e6f-4c6769a420c4" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ecac949b-48e5-31e6-ad72-f21d9b49b1d0" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="There should be number describing size of variable in '%d' on position:1" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="2" auth="lyao" locRef="3" rule="APSC_DV-002390-c" lnHash="-1844934654" rule.header="Do not use scanf and fscanf functions without specifying variable size in format string" tool="c++test" lineHash="-1844934654" unbViolId="01ac1057-c526-3741-b1cc-4c08bec084ed" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5fb43e6-670f-3241-adb6-f8fe4f9c8fb7" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="There should be number describing size of variable in '%d' on position:1" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="2" auth="lyao" locRef="3" rule="SECURITY-14" lnHash="-1844934654" rule.header="Do not use scanf and fscanf functions without specifying variable size in format string" tool="c++test" lineHash="-1844934654" unbViolId="165d034b-fb6d-3346-bdfd-0bafc53d0cdf" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e506b40c-fbbc-39df-8865-30547e626836" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Prefer iostream.h to stdio.h" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="5" auth="lyao" locRef="3" rule="CODSTA-CPP-01" lnHash="-1844934654" rule.header="Prefer iostream.h to stdio.h" tool="c++test" lineHash="-1844934654" unbViolId="74e54981-5eaa-370a-acc6-484253bde663" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7558e6cd-b3f7-3028-8e14-e7560e3e5270" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="1" auth="lyao" locRef="3" rule="CERT_C-STR07-a" lnHash="-1844934654" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="-1844934654" unbViolId="fb95d7f8-98dc-386c-8eec-a2cd606d8695" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a34a1d3-98d3-34cc-8370-e3fc625b513d" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-A27_0_4-b" lnHash="-1844934654" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="-1844934654" unbViolId="a3519cdb-390c-3083-9efe-a60e893afcab" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7946e735-051c-3b3f-ba67-43bc17515be2" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="3" auth="lyao" locRef="3" rule="CERT_C-INT05-a" lnHash="-1844934654" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="-1844934654" unbViolId="797edf31-5f31-372c-b4ad-d89887c7d6c2" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b737b30b-0bda-30e6-99e5-aa8ae76761df" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="2" auth="lyao" locRef="3" rule="SECURITY-13" lnHash="-1844934654" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="-1844934654" unbViolId="9bebd9f1-aad8-3fd6-b581-5fecee8e2c99" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5cc10aae-3c2f-3935-ae33-549f43f12a5a" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="5" auth="lyao" locRef="3" rule="CWE-798-a" lnHash="-1844934654" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1844934654" unbViolId="1ec2f6c9-51fc-3468-81c7-51af7789d6ae" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b09f60c0-482a-354a-8e25-9b18d76160b7" locEndPos="15" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="5" auth="lyao" locRef="3" rule="CODSTA-203" lnHash="-1844934654" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1844934654" unbViolId="ec5a196c-c328-3725-8d1b-b105af5d2025" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="368f2c6c-ff1e-3f1b-97dc-9f2ec18c41d7" locEndPos="15" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="1" auth="lyao" locRef="3" rule="APSC_DV-003110-a" lnHash="-1844934654" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1844934654" unbViolId="8a193892-5cc9-38b0-8c2d-e9b469b99307" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="82ab5cd2-a330-3ede-9466-ec54feb271cd" locEndPos="15" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="1" auth="lyao" locRef="3" rule="CERT_C-MSC41-a" lnHash="-1844934654" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1844934654" unbViolId="290ed5fa-ea7c-3e17-bcec-7480368f7fd8" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5246cc4-1fc0-3976-9abf-399a95d1e5f0" locEndPos="15" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-A27_0_4-d" lnHash="-1844934654" rule.header="C-style strings shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="e1fd8590-3495-3ebf-ad48-8604cdafb9df" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fdd31a25-3cc2-37b2-9550-44d1109d9301" locEndPos="15" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="3" auth="lyao" locRef="3" rule="PB-76" lnHash="-1844934654" rule.header="C-style strings shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="a6722a48-07c9-383c-967c-12e1436ed8b6" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db3ec514-58f9-39e5-b239-0e793b87a056" locEndPos="15" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <DupViol msg="Duplicated string: '&quot;%d&quot;'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="7" sev="3" auth="lyao" locRef="3" rule="CDD-DUPS" lnHash="-1844934654" rule.header="Avoid string literal duplication" tool="c++test" lineHash="-1844934654" unbViolId="5230ed7b-6373-3549-8318-0cd87c67cae9" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="4a78e78c-4106-359b-8209-b6e1f61617c8" locType="sr" locEndPos="18" urgent="true" hash="1013754779" locEndLn="7" goals="1,">
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="14" srcRngEndPos="18" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="7" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="[Line 7] Duplicated string in file 'MemoryLeak.cpp'" rngLn="7"/>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="19" srcRngEndPos="23" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="[Line 10] Duplicated string in file 'MemoryLeak.cpp'" rngLn="10"/>
      </ElDescList>
    </DupViol>
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="4" auth="lyao" locRef="3" rule="JSF-043" lnHash="1773312110" rule.header="Tabs should be avoided" tool="c++test" lineHash="1773312110" unbViolId="8ef68f1b-33de-39a2-a361-9ec96e6a629d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9e7a46f-5109-3846-b4be-dac6b3ad04c1" locEndPos="1" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="5" auth="lyao" locRef="3" rule="FORMAT-01" lnHash="1773312110" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1773312110" unbViolId="0c926018-9bbd-3791-9d06-8d5a33c59c12" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b83e72b-f759-30a6-b69e-af47ffca26ac" locEndPos="1" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="5" auth="lyao" locRef="3" rule="HICPP-2_1_1-a" lnHash="1773312110" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1773312110" unbViolId="38b776bc-bc06-3c25-9bfc-d5a322f3d09d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4caea1fb-75de-31d1-8e34-5871452ac5ad" locEndPos="1" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <FlowViol msg="Data obtained from a file (&quot;*pSize&quot;) is used to determine the size of memory allocation" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" ruleSAFMsg="Point where the array is allocated" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="8" rule="BD-SECURITY-TDALLOC" FirstElSrcRngStartPos="0" lnHash="1773312110" ruleSCSCMsg="Tainting point" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" rule.header="Validate potentially tainted data before it is used to determine the size of memory allocation" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-862528737" lang="cpp" violId="ee4de49b-00fb-37f1-ba96-f78c73097eb8" locEndPos="0" locEndLn="9" goals="0," locStartln="8" sev="2" locRef="3" tool="c++test" lineHash="1773312110" unbViolId="a40e4274-573c-3f35-8729-38c5f8ffb0ec" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Tainted data"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Tainting point" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".P" rngLn="8">
          <Anns>
            <Ann msg="Point where the array is allocated" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Data obtained from a file (&quot;*pSize&quot;) is used to determine the size of memory allocation" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" ruleSAFMsg="Point where the array is allocated" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="8" rule="CWE-770-a" FirstElSrcRngStartPos="0" lnHash="1773312110" ruleSCSCMsg="Tainting point" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" rule.header="Validate potentially tainted data before it is used to determine the size of memory allocation" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1466367756" lang="cpp" violId="923088c6-5805-3dd0-a7ee-e15154135a23" locEndPos="0" locEndLn="9" goals="0," locStartln="8" sev="2" locRef="3" tool="c++test" lineHash="1773312110" unbViolId="6bf9634e-49bb-3526-88ea-7f425f73c41c" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Tainted data"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Tainting point" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".P" rngLn="8">
          <Anns>
            <Ann msg="Point where the array is allocated" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Data obtained from a file (&quot;*pSize&quot;) is used to determine the size of memory allocation" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" ruleSAFMsg="Point where the array is allocated" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="8" rule="OWASP2019-API4-a" FirstElSrcRngStartPos="0" lnHash="1773312110" ruleSCSCMsg="Tainting point" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" rule.header="Validate potentially tainted data before it is used to determine the size of memory allocation" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1519224323" lang="cpp" violId="99ea319b-55b2-3133-923d-5fcaddf2cb58" locEndPos="0" locEndLn="9" goals="0," locStartln="8" sev="2" locRef="3" tool="c++test" lineHash="1773312110" unbViolId="1c0e0620-bf66-3ff2-85bc-190571a73d2b" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Tainted data"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Tainting point" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".P" rngLn="8">
          <Anns>
            <Ann msg="Point where the array is allocated" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="4" auth="lyao" locRef="3" rule="MISRA2008-3_9_2" lnHash="1773312110" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="37ddd05c-2483-3fdf-b7ca-431fda0e941d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ffc433d-8481-30b6-a436-5ec133ab5c83" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="3" auth="lyao" locRef="3" rule="MISRA-013" lnHash="1773312110" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1773312110" unbViolId="a77d6cbf-0fef-3610-aef4-c7a5334a80cf" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d00eea12-a0a2-3b0e-bbbb-b42c2208b001" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="3" auth="lyao" locRef="3" rule="CODSTA-223" lnHash="1773312110" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="961f2d9f-3bf2-35fb-aa1a-0e666acbb2e3" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6aad5158-7ec3-3eb5-a429-d0b08a0eca14" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="1773312110" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="b4bec3c2-01b0-3131-98ab-6071b9a19570" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f26e8775-0da7-3e68-b979-c079f78e6fd1" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="3" auth="lyao" locRef="3" rule="HICPP-7_1_6-b" lnHash="1773312110" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="1773312110" unbViolId="e9c97bf4-a2b8-36aa-806d-cd7466c5f064" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="53160218-8445-3dfc-ab61-8adc6f6e5aeb" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="4" auth="lyao" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="91cbc121-baf2-33ad-8e4d-30ef869e3bed" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f02c0a3-f72d-3ffb-abd0-887486a3433b" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="2" auth="lyao" locRef="3" rule="JSF-209_b" lnHash="1773312110" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="af11309d-d1a5-367a-99fe-59a584636d41" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ec48fcfd-0430-3142-863e-e3243b40338f" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="3" auth="lyao" locRef="3" rule="MISRA2004-6_3_b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="47600be2-8f0c-3f14-9e76-aba6f0b99e47" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c258886-913e-37f4-8128-8d0af8e9476a" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="4" auth="lyao" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="b04cc6f0-4157-363f-a342-0b1e1f0d3f22" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5f81ba8-93b5-3f02-9263-733f940d1949" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="3" auth="lyao" locRef="3" rule="HICPP-3_5_1-b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="759abe8b-b717-3e74-b928-6e5afa66b55c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27d95a36-21c5-350b-9b34-276e6372ea59" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The definition of the 'data' variable should contain a braced initializer" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-A8_5_2-a" lnHash="1773312110" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1773312110" unbViolId="36814746-4c3f-3e95-9b29-5a8b323f9a1b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d7ec04c0-a62d-3430-b562-075d8208c617" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The definition of the 'data' variable should contain a braced initializer" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="3" auth="lyao" locRef="3" rule="CODSTA-MCPP-38" lnHash="1773312110" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1773312110" unbViolId="9db75eec-6aa2-31dd-9ea5-8ac6c987776b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a275f18-9bcd-36f8-b6de-fd18a5b0abe7" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The 'data' variable should be declared with the 'auto' type specifier" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="2" auth="lyao" locRef="3" rule="CODSTA-MCPP-08_a" lnHash="1773312110" rule.header="Prefer 'auto' to explicit type names in variable declarations" tool="c++test" lineHash="1773312110" unbViolId="1fdb4f90-bd08-32aa-b3f8-802190e18a4c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3982820f-298e-395f-884d-a22bc7005093" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The variable of pointer or array type is declared: data" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="3" auth="lyao" locRef="3" rule="CODSTA-94" lnHash="1773312110" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="1773312110" unbViolId="fef6e69a-8db1-35b0-82db-19c39b6a84df" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de074c67-a606-391f-9714-e0d357e03474" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The variable of pointer type is declared: data" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="3" auth="lyao" locRef="3" rule="CODSTA-95" lnHash="1773312110" rule.header="Do not declare pointer type" tool="c++test" lineHash="1773312110" unbViolId="32afdc20-c60a-39e9-bb71-c9e499b65db1" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a57232e2-737e-3cf1-aa5b-a0abbed1a468" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Declare local variable 'data' as const" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="3" auth="lyao" locRef="3" rule="CERT_C-DCL00-a" lnHash="1773312110" rule.header="Declare local variable as const whenever possible" tool="c++test" lineHash="1773312110" unbViolId="bbe51b89-a1de-3b95-a2c3-ec38b7a154a6" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88e402aa-046a-3d4b-b13a-aa9666beb2ab" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Declare local variable 'data' as const" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-A7_1_1-a" lnHash="1773312110" rule.header="Declare local variable as const whenever possible" tool="c++test" lineHash="1773312110" unbViolId="1c2b9786-3f7a-3b73-9e7a-8a97eea3b743" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="35ebfd9e-8731-3205-9226-5d6162a64da9" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Declare local variable 'data' as const" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="2" auth="lyao" locRef="3" rule="MISRA2008-7_1_1" lnHash="1773312110" rule.header="Declare local variable as const whenever possible" tool="c++test" lineHash="1773312110" unbViolId="4a81f343-1464-3428-8d8b-86f5da94bbc1" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5580c4c0-5e12-3784-ac01-039da0ea75a5" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Declare local variable 'data' as const" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="3" auth="lyao" locRef="3" rule="CODSTA-CPP-53" lnHash="1773312110" rule.header="Declare local variable as const whenever possible" tool="c++test" lineHash="1773312110" unbViolId="4b84f14c-f7d2-3d10-b442-61843c0970c5" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5342dc72-76ce-31dc-ad7a-4b17b935f285" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Declare local variable 'data' as const" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="3" auth="lyao" locRef="3" rule="HICPP-7_1_2-a" lnHash="1773312110" rule.header="Declare local variable as const whenever possible" tool="c++test" lineHash="1773312110" unbViolId="e1b9aa85-9da8-3d25-83fd-ebeb21f58ea9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e8a27ed-a6fb-3935-974d-6c4abccfab19" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The 'data' variable should be commented" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="3" auth="lyao" locRef="3" rule="JSF-132_a" lnHash="1773312110" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="1773312110" unbViolId="41c9e58f-63c7-32d5-befd-246bb36318fc" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aaa589d5-7bdd-3edb-97d2-8a8c86b3870d" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The 'data' variable should be commented" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="3" auth="lyao" locRef="3" rule="COMMENT-05" lnHash="1773312110" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="1773312110" unbViolId="7ff87e34-3842-3ad4-a607-216a832c7252" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c66a7ea6-3315-3c02-bdfa-b03f0e4f6636" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Check the return value of new" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="3" auth="lyao" locRef="3" rule="MRM-34" lnHash="1773312110" rule.header="Check the return value of new" tool="c++test" lineHash="1773312110" unbViolId="d42b21e7-b431-3f31-bd8a-4dec5a6bf8ce" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ab4f3f3-cfa3-31cb-addd-a7ece9b9d699" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Check the return value of new" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="1" auth="lyao" locRef="3" rule="CERT_CPP-MEM52-a" lnHash="1773312110" rule.header="Check the return value of new" tool="c++test" lineHash="1773312110" unbViolId="5175844a-d7d2-3ff2-a5aa-64b96dba5f32" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="063baf56-5825-3e6e-a39f-a0bf746ed589" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Naming convention not followed: data" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="3" auth="lyao" locRef="3" rule="NAMING-22" lnHash="1773312110" rule.header="Prefix a variable type 'pointer' with a 'p' character" tool="c++test" lineHash="1773312110" unbViolId="9657c6a7-dd79-378d-98e1-215b1f7dbd0d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84b2666c-30b2-3173-afed-c73095d4b134" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The 'data' identifier should have the 'prg' prefix" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="3" auth="lyao" locRef="3" rule="NAMING-HN-16" lnHash="1773312110" rule.header="Hungarian notation for dynamically allocated array" tool="c++test" lineHash="1773312110" unbViolId="d7c82a4b-27da-3751-86d6-3f690fb00dba" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6551b52e-ec0f-34a1-b81c-c00de4b142d8" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The 'data' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="3" auth="lyao" locRef="3" rule="NAMING-HN-23" lnHash="1773312110" rule.header="Hungarian notation for int pointer, array, or reference types" tool="c++test" lineHash="1773312110" unbViolId="4a6a8ede-a2b1-3cd3-bc0d-755349f9b815" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6d5023a1-feb8-39a5-9846-6fd39cb2c378" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The 'data' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="3" auth="lyao" locRef="3" rule="NAMING-HN-31" lnHash="1773312110" rule.header="Hungarian notation for int pointer, array, or reference types" tool="c++test" lineHash="1773312110" unbViolId="ee741542-e6a4-3623-a919-0c1c15c800f4" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83416aac-f225-31f2-b124-b5f3f95aa3b2" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The 'data' identifier should have the 'p' prefix" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="3" auth="lyao" locRef="3" rule="NAMING-HN-34" lnHash="1773312110" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="1773312110" unbViolId="b64a3a98-d27b-340e-bf5b-759ed30d77c7" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b279d952-3314-34b9-b692-ee3d785631ef" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The 'data' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="3" auth="lyao" locRef="3" rule="NAMING-HN-44" lnHash="1773312110" rule.header="Hungarian notation for word pointer, array, or reference types" tool="c++test" lineHash="1773312110" unbViolId="55faccaf-215e-3b69-aabc-9e1d7caf69b8" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c10f3db2-ec8b-3955-87f8-3cf3161e103b" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="2" auth="lyao" locRef="3" rule="MISRA2012-DIR-4_12" lnHash="1773312110" rule.header="Dynamic memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="2829d487-f186-364b-8d98-b6dd134d619b" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f8cbb6a-fc3a-33ed-8406-d21cff0559f0" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="2" auth="lyao" locRef="3" rule="MISRA2008-18_4_1" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="9c75105a-9453-369e-80ef-9a1f98eab8cc" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5d3fa10-5462-32e7-8bfb-04c5795dc281" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="2" auth="lyao" locRef="3" rule="MISRAC2012-RULE_21_3-a" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="2b1be19b-9675-339d-a5ac-a72cd6111cec" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="848743e7-1b5a-3c91-a485-1f2518ec8147" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-A18_5_2-a" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="f003c4dc-955f-3a42-9ea3-257b8894a684" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c824cb9-b625-3817-9f79-4ffa0e7ab780" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="2" auth="lyao" locRef="3" rule="JSF-206" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="4788c197-25c9-3106-bb32-5979c9d6d798" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77534ac9-262b-3a96-9bc0-3ec2b3176a11" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="2" auth="lyao" locRef="3" rule="MISRA2012-RULE-21_3" lnHash="1773312110" rule.header="The memory allocation and deallocation functions of &lt;stdlib.h> shall not be used" tool="c++test" lineHash="1773312110" unbViolId="a425613e-2d9d-36c0-960a-4002026baa60" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac39fd6d-3c9d-3353-9d55-bc38d4799f5f" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="3" auth="lyao" locRef="3" rule="MISRA2004-20_4" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="b301eaa6-011f-3020-b51b-2e6765bc082d" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="32d78cc3-1338-355e-8036-c81b99b14f5e" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="2" auth="lyao" locRef="3" rule="MISRAC2012-DIR_4_12-a" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="822e8739-c48e-3111-81c7-8f9dbe7ed30e" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="821eb2b7-bd5f-3e7f-9b76-37730c76fe05" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Use vector or string instead of dynamically allocated array" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="3" auth="lyao" locRef="3" rule="STL-10" lnHash="1773312110" rule.header="Prefer vector and string to dynamically allocated arrays" tool="c++test" lineHash="1773312110" unbViolId="ecc1f653-646e-3cc9-833e-075e9abec58d" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b120d281-6863-3333-a8cd-33296717d9e9" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="4" auth="lyao" locRef="3" rule="MISRA2008-3_9_2" lnHash="1773312110" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="ced983a8-3b6f-391f-9d24-8794c3d4b5af" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7bab248-9698-3434-a072-23f7c118bd91" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="3" auth="lyao" locRef="3" rule="MISRA-013" lnHash="1773312110" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1773312110" unbViolId="18ccf23d-10f2-343f-9c88-d953f91b5555" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="befa689c-c6ad-3676-8217-df39bfce9cde" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="3" auth="lyao" locRef="3" rule="CODSTA-223" lnHash="1773312110" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="b5aaa35e-29ad-3cb6-aa1b-5a8ceccf910e" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0bd507c3-8c8e-3401-b56f-7a77b72c7ff1" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="1773312110" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="a15f3c67-e8a9-37cf-bd40-00a5ff11abf9" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e84845a2-a453-3ec9-8aec-8235a18dcada" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="3" auth="lyao" locRef="3" rule="HICPP-7_1_6-b" lnHash="1773312110" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="1773312110" unbViolId="8bbed1bd-376c-3e56-9093-ab994fcee030" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="870bfced-6cff-331a-aa76-66035c5840f4" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="4" auth="lyao" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="6a1c6880-5107-3220-a62d-7525e0a0bf9f" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc2e7868-cc80-3fa0-b37e-07f3faf0d626" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="2" auth="lyao" locRef="3" rule="JSF-209_b" lnHash="1773312110" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="c081dc54-dcc2-3508-8882-345416f0661b" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="576a6ccc-6838-351f-bccf-3eb9ed8016da" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="3" auth="lyao" locRef="3" rule="MISRA2004-6_3_b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="85ac4387-9e36-309b-a913-2c6ffb64f7f2" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b26facd-e03e-3176-a9f3-014113060d3f" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="4" auth="lyao" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="f1c0612c-0eae-3782-bf14-8b2c82df18ca" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d88aaab1-f584-3a66-bcd3-8b1146ab3e31" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="8" sev="3" auth="lyao" locRef="3" rule="HICPP-3_5_1-b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="164089b1-7c8a-351e-8edd-f2561b3e9d62" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f3713ee-7807-3f8c-a457-3e4dfb37fe09" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="3" auth="lyao" locRef="3" rule="JSF-061" lnHash="616861252" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="616861252" unbViolId="9a0ddadd-0ed2-3819-8d7c-d8a449b934a5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="954a8fea-edbc-3baa-bb35-ab5dfaf46326" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="3" auth="lyao" locRef="3" rule="FORMAT-42" lnHash="616861252" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="616861252" unbViolId="5e3c6f28-f2f1-3f38-ad6b-01b9df9fe6d8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9d00caa-302c-3ba4-a378-1f9f880a3249" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="3" auth="lyao" locRef="3" rule="JSF-060_a" lnHash="616861252" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="616861252" unbViolId="8b95177c-0c22-3945-8c8f-f02ee3729763" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3945e141-f403-37d3-addd-ce82a5f8686f" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="3" auth="lyao" locRef="3" rule="FORMAT-43" lnHash="616861252" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="616861252" unbViolId="afaba1dc-e73e-3bbf-a658-ff7a3ee2bee9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c3bed05d-73f6-3ac8-a63b-6c8d64f34d11" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="3" auth="lyao" locRef="3" rule="JSF-060_b" lnHash="616861252" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="616861252" unbViolId="8c1201b5-dd73-3d61-b1c8-045e7c059a65" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8636c50-cc84-380e-bfcd-a68d14df61cd" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="4" auth="lyao" locRef="3" rule="JSF-043" lnHash="616861252" rule.header="Tabs should be avoided" tool="c++test" lineHash="616861252" unbViolId="368e98aa-dd39-36e6-9d41-5cb47382f701" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a955028-cdb6-367b-86e4-f9c1b360d763" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="5" auth="lyao" locRef="3" rule="FORMAT-01" lnHash="616861252" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="616861252" unbViolId="35ea71ff-f1d3-3109-b3fc-1dc229836451" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="730a1fb6-b3db-3e96-b2e4-c93efe012119" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="5" auth="lyao" locRef="3" rule="HICPP-2_1_1-a" lnHash="616861252" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="616861252" unbViolId="7a3784d1-f91c-30d4-9b11-baf4a333d538" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="81236b65-cb8d-38d8-8a1c-1e17f781c1fb" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="3" auth="lyao" locRef="3" rule="FORMAT-02" lnHash="616861252" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="616861252" unbViolId="d9841102-53b0-3ded-a932-eec33824bd9b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85dad95e-b79f-3d7e-91ae-1f37a9dac7eb" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <FlowViol msg="Data obtained from a file (&quot;*pSize&quot;) is used in a loop condition" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" ruleSAFMsg="Tainted data use in a loop condition" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="8" rule="BD-SECURITY-TDLOOP" FirstElSrcRngStartPos="0" lnHash="616861252" ruleSCSCMsg="Tainting point" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" rule.header="Validate potentially tainted data before it is used in the controlling expression of a loop" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2054996746" lang="cpp" violId="716665ff-fb73-3037-995d-87692e0e6571" locEndPos="0" locEndLn="10" goals="0," locStartln="9" sev="1" locRef="3" tool="c++test" lineHash="616861252" unbViolId="e9aea488-a49c-3eb6-8c14-3d6d91c30eb2" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Tainted data"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType=".C" rngLn="7">
          <Props>
            <Prop key="Tracked variables" val="pSize[]"/>
          </Props>
          <Anns>
            <Ann msg="Tainting point" kind="cause"/>
            <Ann msg="Tainted data: pSize[]" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType="!" rngLn="8"/>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType=".P" rngLn="9">
          <Props>
            <Prop key="Tracked variables" val="pSize[0]"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: pSize[0]" kind="var"/>
            <Ann msg="Tainted data use in a loop condition" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="A loop does not have a fixed upper nor lower bound" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="3" auth="lyao" locRef="3" rule="CODSTA-83" lnHash="616861252" rule.header="All loops must have a fixed upper or lower bound" tool="c++test" lineHash="616861252" unbViolId="eacfb25f-5071-369a-bbfe-143c502eb679" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f0842f2-dfd5-3161-923d-abcd7e8cea9e" locEndPos="2" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="4" auth="lyao" locRef="3" rule="MISRA2008-3_9_2" lnHash="616861252" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="616861252" unbViolId="7160f05f-de2e-3fb3-8a04-6c472d80f5fd" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d8fd891-9daa-3bc6-9701-314090e641da" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="3" auth="lyao" locRef="3" rule="MISRA-013" lnHash="616861252" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="616861252" unbViolId="c2bd5e33-62a4-3cd7-8293-1321b3e9c2ac" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="14acfff9-e092-3318-9b8e-6a493534956d" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="3" auth="lyao" locRef="3" rule="CODSTA-223" lnHash="616861252" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="616861252" unbViolId="d733a408-6355-35cc-896a-e1487bf50f93" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37b30cdd-336f-364f-b43c-e93228c83194" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="616861252" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="616861252" unbViolId="4cfda825-cd5d-3e29-b6b9-f5b47b2a1627" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f7973e8-73b8-3396-9217-a19a2c536228" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="3" auth="lyao" locRef="3" rule="HICPP-7_1_6-b" lnHash="616861252" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="616861252" unbViolId="f3460d92-c6c4-33d4-a1ae-480987a5c421" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c455a10a-d530-34db-8945-55ac4e324f1d" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="4" auth="lyao" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="616861252" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="616861252" unbViolId="fd5c4592-67c2-3032-9df8-1d377c8febc1" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ae940f0-77b8-34e3-8d14-7f51f033ef44" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="2" auth="lyao" locRef="3" rule="JSF-209_b" lnHash="616861252" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="616861252" unbViolId="c10233ef-fb71-3511-9ca8-8e18a2eeb264" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f4309f02-b850-3ee1-a0f9-58a9d6f09aae" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="3" auth="lyao" locRef="3" rule="MISRA2004-6_3_b" lnHash="616861252" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="616861252" unbViolId="f759ba8c-79de-3983-bdb7-53bbc78f5237" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="377841db-4c8e-3544-8b43-a853cb2d7511" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="4" auth="lyao" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="616861252" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="616861252" unbViolId="2cc29043-964e-34d9-b8a8-a193485c4a5c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52de5d3e-f54b-3b0c-b29c-f124c17a7422" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="3" auth="lyao" locRef="3" rule="HICPP-3_5_1-b" lnHash="616861252" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="616861252" unbViolId="c82a8217-167c-3b12-91bd-f5fccde3121c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7bc9a582-f0e2-30f6-b8d0-60d62504f86e" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-A8_5_2-a" lnHash="616861252" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="616861252" unbViolId="1f939f3d-ca5a-38df-b09a-1dc5bb120ef6" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94450c09-d568-3de8-9018-6418eeafaa36" locEndPos="11" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="3" auth="lyao" locRef="3" rule="CODSTA-MCPP-38" lnHash="616861252" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="616861252" unbViolId="b05968bd-008d-38ee-a8db-727ed4dc8fef" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9830bf9c-b616-3a54-80b1-61d2d91c1b37" locEndPos="11" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="'i' shall be declared as unsigned int or signed int" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="3" auth="lyao" locRef="3" rule="PORT-13" lnHash="616861252" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="616861252" unbViolId="3067f2b7-2df2-3e17-8a03-66f99689a14f" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e608c98-df89-38a9-8991-9531dd327c14" locEndPos="11" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="The 'i' variable should be commented" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="3" auth="lyao" locRef="3" rule="JSF-132_a" lnHash="616861252" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="616861252" unbViolId="fcd0987f-ea34-3a0a-a7ff-acecb9cc8a29" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd5a0509-0c7a-3810-ac1e-b8deaf614f0b" locEndPos="11" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="The 'i' variable should be commented" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="3" auth="lyao" locRef="3" rule="COMMENT-05" lnHash="616861252" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="616861252" unbViolId="a33520df-dd00-37da-bcab-d28f8b9237c1" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="664d00bd-b6c7-3187-8854-7086689841c0" locEndPos="11" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="1" auth="lyao" locRef="3" rule="APSC_DV-002560-k" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="698fe448-c5e1-3537-94c7-8d40969ef39d" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e56ecc1-1fb4-34b3-b0b0-422ce94a15e5" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="1" auth="lyao" locRef="3" rule="APSC_DV-002550-k" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="3a6b25f5-e190-39af-8b73-7ebc9950fb1f" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a017d428-f79e-3d56-9d87-53090e6df7d8" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="2" auth="lyao" locRef="3" rule="APSC_DV-001290-b" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="2aad6ee2-5ae4-38fb-a988-19abf3ef41dc" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="19d49319-36f0-3051-90f6-623be00f286c" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="2" auth="lyao" locRef="3" rule="SECURITY-38" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="8d9dc6e2-25ba-3b32-9c18-9df9c0692ae8" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="447151f1-80f7-3c1b-9bfa-57c74932bcbd" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="2" auth="lyao" locRef="3" rule="CWE-20-j" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="8b0da81c-bd76-3cd4-9747-3b0a15ec82fc" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ddb0366-799c-38a6-a3b6-816a479b4315" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="2" auth="lyao" locRef="3" rule="APSC_DV-002530-k" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="aaf21ed1-dc7b-393a-9f86-f3d962bd0823" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d4fa0ea-f6c1-395d-9ce3-039bbcd33c45" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="2" auth="lyao" locRef="3" rule="APSC_DV-002520-k" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="65dc112b-851c-3a5d-bd73-3bbd901845ed" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8567842-6837-3aad-8d92-a82891cfbb8a" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="Postfix operator applied to variable 'i'; prefer prefix type" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="9" sev="3" auth="lyao" locRef="3" rule="OPT-04" lnHash="616861252" rule.header="Prefer canonical form of ++ and --. Prefer calling the prefix forms" tool="c++test" lineHash="616861252" unbViolId="3ff1e6b0-f9e3-3ca9-9629-473a5327b75a" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6af6a4a6-569f-38ce-8915-08556293cb4b" locEndPos="30" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="3" auth="lyao" locRef="3" rule="JSF-061" lnHash="700522989" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="700522989" unbViolId="9024fa58-ec52-3ef7-9e4e-dd71d9162356" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="493c2bc0-67e3-3dfe-afa6-18253f538217" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="3" auth="lyao" locRef="3" rule="FORMAT-42" lnHash="700522989" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="700522989" unbViolId="757dff6d-9ef3-3a4d-a043-ff8a133b3cf3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9372c2c3-9b80-33ec-b5ef-64985d9e48b0" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="3" auth="lyao" locRef="3" rule="JSF-060_a" lnHash="700522989" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="700522989" unbViolId="6f223bf8-9ab8-3e4f-b4e7-356d0ead344d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb0cbdd9-0fc3-3138-b5de-0e0c224bee16" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="3" auth="lyao" locRef="3" rule="FORMAT-43" lnHash="700522989" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="700522989" unbViolId="573372b2-6dd4-3bf5-9d0a-9146e69aa20a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b35c5bdc-a367-3a64-8fa0-329a8b690be0" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="3" auth="lyao" locRef="3" rule="JSF-060_b" lnHash="700522989" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="700522989" unbViolId="da30a22e-bd7e-36cd-9850-bc23b1a56f08" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1ac642a-da09-379f-a417-e7eb8619389e" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="4" auth="lyao" locRef="3" rule="JSF-043" lnHash="700522989" rule.header="Tabs should be avoided" tool="c++test" lineHash="700522989" unbViolId="ecd47955-505c-3aca-98e0-f11dd96276f1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dfe1043c-4e91-35d2-a41c-e31402f31114" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="5" auth="lyao" locRef="3" rule="FORMAT-01" lnHash="700522989" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="700522989" unbViolId="d748d596-2a2c-32cb-aec9-0d58a88e877b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f219807-eba1-3dda-b67e-ea57a5052df9" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="5" auth="lyao" locRef="3" rule="HICPP-2_1_1-a" lnHash="700522989" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="700522989" unbViolId="5067e589-2b17-31bf-be49-0e46c53a481e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="194664a2-cfad-35ed-b5fb-5c8fbca2b599" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="3" auth="lyao" locRef="3" rule="FORMAT-02" lnHash="700522989" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="700522989" unbViolId="abee8e59-b2f9-34b9-8282-1fdc0c33eb86" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3529225b-f220-3d3a-a363-5143ac739c20" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="4" auth="lyao" locRef="3" rule="JSF-043" lnHash="700522989" rule.header="Tabs should be avoided" tool="c++test" lineHash="700522989" unbViolId="ba5990e7-7648-3f81-ae64-d560079af2a1" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9717351e-7253-33ab-a043-a3ac9d7eac5c" locEndPos="2" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="5" auth="lyao" locRef="3" rule="FORMAT-01" lnHash="700522989" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="700522989" unbViolId="cac065be-da4a-3706-aa9a-258ff55d9fa8" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3be3b5f9-25f2-3d8b-bb73-9631314c1efa" locEndPos="2" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="5" auth="lyao" locRef="3" rule="HICPP-2_1_1-a" lnHash="700522989" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="700522989" unbViolId="83e8ac08-2a0f-3421-aa89-4d88574efddc" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23678f41-38c0-3499-a50f-616e5c40af77" locEndPos="2" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="The 'if' statement doesn't have an 'else' clause" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="3" auth="lyao" locRef="3" rule="CODSTA-23" lnHash="700522989" rule.header="All 'if' statements should have an 'else' clause" tool="c++test" lineHash="700522989" unbViolId="699064f2-d6f7-3ada-8682-8182d344f571" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9727386e-b38e-3791-8c9c-26f6f6335419" locEndPos="3" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="The 'fscanf' library function should not be used" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="2" auth="lyao" locRef="3" rule="MISRAC2012-RULE_21_6-a" lnHash="700522989" rule.header="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" tool="c++test" lineHash="700522989" unbViolId="1d90dd65-e67a-3088-8fff-920a79d5d052" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e72625ef-911e-32d8-b448-446e6a79efbb" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="The 'fscanf' library function should not be used" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="2" auth="lyao" locRef="3" rule="MISRA2012-RULE-21_6" lnHash="700522989" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="700522989" unbViolId="75d766ce-de84-33e6-b891-d9188f322afa" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b90e391d-d8c3-3405-88bd-0b89fffc27ba" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="The 'fscanf' library function should not be used" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="3" auth="lyao" locRef="3" rule="CERT_C-ERR02-a" lnHash="700522989" rule.header="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" tool="c++test" lineHash="700522989" unbViolId="319577dc-28b9-3408-a800-b1f4b6bc135d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="785a7814-6382-3136-ad84-9261acb958d4" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="The 'fscanf' library function should not be used" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="3" auth="lyao" locRef="3" rule="CODSTA-110" lnHash="700522989" rule.header="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" tool="c++test" lineHash="700522989" unbViolId="09d5b26a-659c-34cc-8d08-931e2d07083a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78e21887-b453-31d5-bf4a-ef7fb9473578" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="There should be number describing size of variable in '%d' on position:1" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="2" auth="lyao" locRef="3" rule="APSC_DV-002390-c" lnHash="700522989" rule.header="Do not use scanf and fscanf functions without specifying variable size in format string" tool="c++test" lineHash="700522989" unbViolId="7abd94e3-790f-3bc3-8219-18bb86e7ef5f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4b9d223-3c38-3d3c-883b-962de5395df2" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="There should be number describing size of variable in '%d' on position:1" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="2" auth="lyao" locRef="3" rule="SECURITY-14" lnHash="700522989" rule.header="Do not use scanf and fscanf functions without specifying variable size in format string" tool="c++test" lineHash="700522989" unbViolId="81846eb3-32e4-3635-b70b-1ac419dfdf64" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="072188f8-d909-3fb6-a90c-5820b4a763ee" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Prefer iostream.h to stdio.h" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="5" auth="lyao" locRef="3" rule="CODSTA-CPP-01" lnHash="700522989" rule.header="Prefer iostream.h to stdio.h" tool="c++test" lineHash="700522989" unbViolId="b4405cf6-1b42-3552-a0bd-570c67c61f8f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bccade5c-05fe-3593-a301-99e987abc1fb" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="1" auth="lyao" locRef="3" rule="CERT_C-STR07-a" lnHash="700522989" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="700522989" unbViolId="f5c4faf5-314a-30ec-846d-11fcb2c8239f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27b36cd2-ee78-3ed7-9a69-dd07617b27e3" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-A27_0_4-b" lnHash="700522989" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="700522989" unbViolId="96c8d062-139d-30c3-af40-cebaf76ea80d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="11797e34-355a-3ed8-a7ce-5259b5f46629" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="3" auth="lyao" locRef="3" rule="CERT_C-INT05-a" lnHash="700522989" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="700522989" unbViolId="1fdfbd87-51c4-301b-9d53-4b83454265e4" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ec99948-66b9-30b1-8de9-35998e6d6bf9" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="2" auth="lyao" locRef="3" rule="SECURITY-13" lnHash="700522989" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="700522989" unbViolId="b4178ff9-399a-3b56-9bf9-1f156879980d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98c455fb-1471-383e-a0b4-ec7fcb41b4cc" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="5" auth="lyao" locRef="3" rule="CWE-798-a" lnHash="700522989" rule.header="Do not hard code string literals" tool="c++test" lineHash="700522989" unbViolId="ed3f73d3-1536-3920-9c9e-bac291726c64" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="285e1ebb-fba7-3950-b90d-262207bb3a8c" locEndPos="20" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="5" auth="lyao" locRef="3" rule="CODSTA-203" lnHash="700522989" rule.header="Do not hard code string literals" tool="c++test" lineHash="700522989" unbViolId="8cafaf80-1708-3060-84d9-cdcf93d3e16c" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47ad10b7-63a4-3c34-9f31-1762bc8239b5" locEndPos="20" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="1" auth="lyao" locRef="3" rule="APSC_DV-003110-a" lnHash="700522989" rule.header="Do not hard code string literals" tool="c++test" lineHash="700522989" unbViolId="9164f424-9fc4-345e-8b8d-5f061723de8c" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13474371-a1cb-39f4-9eb9-8cf431e02078" locEndPos="20" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="1" auth="lyao" locRef="3" rule="CERT_C-MSC41-a" lnHash="700522989" rule.header="Do not hard code string literals" tool="c++test" lineHash="700522989" unbViolId="53ea00c8-0b9b-3c08-ac37-bee68ae30f9f" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f7d94727-7bf2-3030-b052-43d9f5a79ac6" locEndPos="20" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-A27_0_4-d" lnHash="700522989" rule.header="C-style strings shall not be used" tool="c++test" lineHash="700522989" unbViolId="59d1aa1c-21a0-39e6-b4d1-2fd445e918df" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4c708d1-c5b8-3017-9083-dd27b2ba3be3" locEndPos="20" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="3" auth="lyao" locRef="3" rule="PB-76" lnHash="700522989" rule.header="C-style strings shall not be used" tool="c++test" lineHash="700522989" unbViolId="541d5eeb-a54a-3b2f-ac86-dff32e7052dd" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff64b64c-c1c1-324a-9536-0fcd85dde01f" locEndPos="20" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Avoid indexing non-array objects" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="3" auth="lyao" locRef="3" rule="MISRA2004-17_4" lnHash="700522989" rule.header="Array indexing shall be the only allowed form of pointer arithmetic" tool="c++test" lineHash="700522989" unbViolId="6d99b551-3b02-31f7-9750-056dfd480242" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc06319c-a94d-3298-91c5-d1f237e049ef" locEndPos="27" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Avoid indexing non-array objects" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="2" auth="lyao" locRef="3" rule="MISRA2008-5_0_15" lnHash="700522989" rule.header="Array indexing shall be the only form of pointer arithmetic" tool="c++test" lineHash="700522989" unbViolId="6f99f067-7636-3868-925f-2ed593ad68fe" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="017a1e93-3915-30a7-b96b-2f1505a561a2" locEndPos="27" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Avoid indexing non-array objects" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="10" sev="2" auth="lyao" locRef="3" rule="AUTOSAR-M5_0_15-a" lnHash="700522989" rule.header="Array indexing shall be the only allowed form of pointer arithmetic" tool="c++test" lineHash="700522989" unbViolId="4530b801-a5c9-3b56-bec0-934ded0f2266" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="34bb74ea-e415-3baa-8789-d60b139a6558" locEndPos="27" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="11" sev="4" auth="lyao" locRef="3" rule="JSF-043" lnHash="-541829676" rule.header="Tabs should be avoided" tool="c++test" lineHash="-541829676" unbViolId="1f526277-0903-34d7-87d3-ce50d813daf6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ac5c1de-af5b-3498-b1bf-1a6793ef40a5" locEndPos="1" locType="sr" hash="1013754779" locEndLn="11" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="11" sev="5" auth="lyao" locRef="3" rule="FORMAT-01" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="3205b347-5a08-39ca-b4b4-1f526c117a27" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6bb310d-e648-387e-9fea-6659bc6987ad" locEndPos="1" locType="sr" hash="1013754779" locEndLn="11" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="11" sev="5" auth="lyao" locRef="3" rule="HICPP-2_1_1-a" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="76a47b28-b19b-3238-844d-4417ba45563d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7548fe1d-653b-3d08-a6fb-2dcfb97a49ed" locEndPos="1" locType="sr" hash="1013754779" locEndLn="11" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="11" sev="4" auth="lyao" locRef="3" rule="JSF-043" lnHash="-541829676" rule.header="Tabs should be avoided" tool="c++test" lineHash="-541829676" unbViolId="bdbfe311-a842-33ea-9e8a-29b88489b876" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef5add17-691e-3061-a71d-0db9e3a9e0e1" locEndPos="2" locType="sr" hash="1013754779" locEndLn="11" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="11" sev="5" auth="lyao" locRef="3" rule="FORMAT-01" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="c5de304f-c7ce-3a3f-a6ed-c1b436f35459" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="390b90f5-3a67-38f4-9ff3-00b39a46e694" locEndPos="2" locType="sr" hash="1013754779" locEndLn="11" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="11" sev="5" auth="lyao" locRef="3" rule="HICPP-2_1_1-a" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="869c3ca6-0536-344e-ab42-87e57a46dc7c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10057a6a-946a-3ea3-b964-08a14c4bb895" locEndPos="2" locType="sr" hash="1013754779" locEndLn="11" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="11" sev="4" auth="lyao" locRef="3" rule="JSF-043" lnHash="-541829676" rule.header="Tabs should be avoided" tool="c++test" lineHash="-541829676" unbViolId="2d74d753-d7dc-37c6-978c-d90e0b2fd123" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f4d36415-c7c4-3cc1-8d13-9c5d3f8827ec" locEndPos="3" locType="sr" hash="1013754779" locEndLn="11" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="11" sev="5" auth="lyao" locRef="3" rule="FORMAT-01" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="9d35b4e1-c0bc-3b14-8aed-26b2b2173e1d" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09cad223-2bb1-3123-9f4e-e24ac0c44db1" locEndPos="3" locType="sr" hash="1013754779" locEndLn="11" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="11" sev="5" auth="lyao" locRef="3" rule="HICPP-2_1_1-a" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="e715ca27-2e74-32ea-8fc3-fc6189254067" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5234abc7-1a21-3003-a5a6-5750a1a2e89d" locEndPos="3" locType="sr" hash="1013754779" locEndLn="11" goals="0,"/>
    <StdViol msg="c++ exception handling structure is used in function 'readIntegerArray'" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="11" sev="2" auth="lyao" locRef="3" rule="JSF-208" lnHash="-541829676" rule.header="C++ exceptions shall not be used" tool="c++test" lineHash="-541829676" unbViolId="8817aae3-cc57-39a4-a281-467a711b6fed" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="29a90274-67d4-3384-a0c5-3e57204e6e07" locEndPos="4" locType="sr" hash="1013754779" locEndLn="11" goals="0,"/>
    <StdViol msg="c++ exception handling structure is used in function 'readIntegerArray'" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="11" sev="2" auth="lyao" locRef="3" rule="EXCEPT-05" lnHash="-541829676" rule.header="C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.)" tool="c++test" lineHash="-541829676" unbViolId="3b501813-200b-31e2-9234-34dc41899a25" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="675feabf-d43e-3e01-a5ea-696580b2bff0" locEndPos="4" locType="sr" hash="1013754779" locEndLn="11" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="12" sev="4" auth="lyao" locRef="3" rule="JSF-043" lnHash="9053" rule.header="Tabs should be avoided" tool="c++test" lineHash="9053" unbViolId="5daae81f-538e-36f2-bc9b-e436ce9a3370" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="143fc0af-39b1-30bd-921e-a8c16c9cb38a" locEndPos="1" locType="sr" hash="1013754779" locEndLn="12" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="12" sev="5" auth="lyao" locRef="3" rule="FORMAT-01" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="43ee6029-af60-37a3-ab0d-8359803b862c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="20401af2-691e-3419-9087-88937dbd2ed3" locEndPos="1" locType="sr" hash="1013754779" locEndLn="12" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="12" sev="5" auth="lyao" locRef="3" rule="HICPP-2_1_1-a" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="aefa0614-b408-32cc-a9d8-3f2e8374a32f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09fd7336-f50f-38ab-ae67-2553e7daeb6c" locEndPos="1" locType="sr" hash="1013754779" locEndLn="12" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="12" sev="4" auth="lyao" locRef="3" rule="JSF-043" lnHash="9053" rule.header="Tabs should be avoided" tool="c++test" lineHash="9053" unbViolId="27b00388-e00c-30b9-8855-d34ada38ab21" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d6cf4ac-0813-3b6e-b919-759a7e0f71d8" locEndPos="2" locType="sr" hash="1013754779" locEndLn="12" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="12" sev="5" auth="lyao" locRef="3" rule="FORMAT-01" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="d95da4d3-a059-36e4-862e-6a3e9492f359" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4d59142-be04-3ee2-bac0-ef78ac16cc52" locEndPos="2" locType="sr" hash="1013754779" locEndLn="12" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="12" sev="5" auth="lyao" locRef="3" rule="HICPP-2_1_1-a" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="3585bc18-4e81-382f-bd88-1f5c8937b85b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1fccd21d-55b8-38a1-a092-519389365370" locEndPos="2" locType="sr" hash="1013754779" locEndLn="12" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="13" sev="4" auth="lyao" locRef="3" rule="JSF-043" lnHash="404" rule.header="Tabs should be avoided" tool="c++test" lineHash="404" unbViolId="2209666d-436e-3e02-bee5-1b7dd146d7e6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3067737-cc2d-3a1d-bbab-3438d116b02d" locEndPos="1" locType="sr" hash="1013754779" locEndLn="13" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="13" sev="5" auth="lyao" locRef="3" rule="FORMAT-01" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="cee71f6a-f250-384b-8980-fb3dc03f525d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd2cbdaf-b545-35dc-bf53-63bb07c10a82" locEndPos="1" locType="sr" hash="1013754779" locEndLn="13" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="13" sev="5" auth="lyao" locRef="3" rule="HICPP-2_1_1-a" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="84d125bd-a8e1-3476-bf6b-fa5accd8d00b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85bcb7b4-e463-367d-ae8d-80874226f33b" locEndPos="1" locType="sr" hash="1013754779" locEndLn="13" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="14" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="14" sev="4" auth="lyao" locRef="3" rule="JSF-043" lnHash="1006431594" rule.header="Tabs should be avoided" tool="c++test" lineHash="1006431594" unbViolId="9757cfba-ab2e-3533-866e-453a1c02b054" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b36f6acb-e7ce-3205-a7f2-df0bbd5d7c16" locEndPos="1" locType="sr" hash="1013754779" locEndLn="14" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="14" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="14" sev="5" auth="lyao" locRef="3" rule="FORMAT-01" lnHash="1006431594" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1006431594" unbViolId="6a4e6d5d-a163-30de-96bf-556a8a1f0fe1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e261e18f-5e38-3c93-b377-afb6bf64730a" locEndPos="1" locType="sr" hash="1013754779" locEndLn="14" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="14" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="14" sev="5" auth="lyao" locRef="3" rule="HICPP-2_1_1-a" lnHash="1006431594" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1006431594" unbViolId="bc76a7f1-1a76-3c2d-9d92-0f6e19d4699f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4dc8e0f-2e08-3afb-bd5d-a2bd7b47f283" locEndPos="1" locType="sr" hash="1013754779" locEndLn="14" goals="0,"/>
    <StdViol msg="'return' statement should be used with parenthesis" ln="14" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locStartln="14" sev="3" auth="lyao" locRef="3" rule="FORMAT-25_b" lnHash="1006431594" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="1006431594" unbViolId="46c382bc-4a1a-37c7-bdba-9e77348ca840" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24dca82e-2abe-37eb-906f-a094a9aec999" locEndPos="2" locType="sr" hash="1013754779" locEndLn="14" goals="0,"/>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="9" rule="APSC_DV-002000-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1842545282" lang="cpp" violId="b3fb8f89-a2b5-3ab5-80b7-93a8fea719f3" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="279eef1e-7831-3930-a529-4cbe49c1cd53" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="9" rule="AUTOSAR-A15_0_2-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1331699030" lang="cpp" violId="25a6febc-4ed0-30ca-af41-69298e17dbb3" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="d68ef7b4-fa32-3e3b-9558-cdf85c83bcd3" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="9" rule="AUTOSAR-A15_1_4-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1332641371" lang="cpp" violId="141a4bc8-b3f4-3365-9334-dd8c080e11f1" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="4caf1254-84c9-320b-816b-3640fe048447" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="9" rule="BD-RES-LEAKS" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1151239445" lang="cpp" violId="dc86b8d7-d9d2-30aa-8172-57b26f2fe61a" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="1" locRef="3" tool="c++test" lineHash="125" unbViolId="cdcf01a6-65ab-33db-a9e4-55e11b29ca27" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="9" rule="CERT_C-CON30-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="103891581" lang="cpp" violId="a54839ec-efcb-319c-87e0-cd41948800d5" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="96b2fd31-e5ea-3f52-8fac-d2a75ac30cc0" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="9" rule="CERT_C-FIO22-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1112344312" lang="cpp" violId="d6d3aece-da85-3e43-99cc-ba5a55334e82" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="af64d153-d5fc-3971-9875-436b986fbed9" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="9" rule="CERT_C-FIO42-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1112174134" lang="cpp" violId="8b105c34-1f01-36b8-bc51-1ec6d1c3e340" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="312d7f71-0130-3935-9671-98ef8d30161d" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="9" rule="CERT_C-MEM00-e" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="116382779" lang="cpp" violId="1591a21e-fd3d-304f-8b98-29733b6b1696" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="1" locRef="3" tool="c++test" lineHash="125" unbViolId="d232c8f5-01a0-364b-92b3-bc919c90871a" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="9" rule="CERT_C-MEM12-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="116285462" lang="cpp" violId="dcc09293-b444-3910-95f9-42c11cd77290" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="ebd02cf6-c3a2-31ff-8773-0072f616bc9e" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="9" rule="CERT_C-MEM31-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="114391825" lang="cpp" violId="a9b4086b-944a-3427-a408-9c8a6135684e" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="42fb92a9-0757-3935-9535-4657f05ddc2b" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="9" rule="CERT_C-WIN30-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1055995355" lang="cpp" violId="9c85c126-ec4b-36a9-afc4-67602eefd878" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="09cf7e3f-2435-3b22-81d4-17422cd37856" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="9" rule="CERT_CPP-ERR57-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1542295099" lang="cpp" violId="f33168d0-8fe5-32e3-a54c-efbe5f0b8427" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="feba8474-ee56-3d34-aee1-f2e1a35ba190" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="9" rule="CERT_CPP-FIO51-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1119006820" lang="cpp" violId="f9c95df0-92b0-3e6f-8674-e95b7e2b21d8" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="e7de4ae0-25a9-3ec6-9bcd-62ad0ab3e2c3" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="9" rule="CWE-772-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2027493177" lang="cpp" violId="de777d44-eeb2-3ab7-a812-484f9f105fe7" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="1" locRef="3" tool="c++test" lineHash="125" unbViolId="d4c84633-4209-3cdb-8727-ce08998991ba" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="9" rule="MISRA2012-DIR-4_13_a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" rule.header="All resources obtained dynamically by means of Standard Library functions shall be explicitly released" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1431710396" lang="cpp" violId="3436f17f-fbf9-326e-a71f-ca11d9fecfb3" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="4" locRef="3" tool="c++test" lineHash="125" unbViolId="e4804989-db39-3dfb-908e-0c9ccd7a2d6e" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="9" rule="MISRA2012-RULE-22_1" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" rule.header="All resources obtained dynamically by means of Standard Library functions shall be explicitly released" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1251621320" lang="cpp" violId="e7487703-0e38-34f1-848e-47db1158dc8a" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="567360ec-1333-3cc1-9ceb-3f77b77368cd" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="9" rule="MISRAC2012-DIR_4_13-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2127420791" lang="cpp" violId="1f2eb642-1245-3cc4-b214-fb730e93dd49" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="4" locRef="3" tool="c++test" lineHash="125" unbViolId="02b515b0-ed19-388a-8e32-f6ad37a2e307" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="9" rule="MISRAC2012-RULE_22_1-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1043097931" lang="cpp" violId="197a7206-cb05-3840-8d6a-ff3b15deca91" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="1b43c445-4844-37c3-9ff9-61cfa8758aea" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="9" rule="OWASP2019-API4-b" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1966237325" lang="cpp" violId="c7974c01-f286-3456-b107-cc479b7fc3a7" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="1" locRef="3" tool="c++test" lineHash="125" unbViolId="70ac3218-00fc-343a-9376-3c82db16a6b8" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="The assertion density is lower than two assertions per function" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="1" sev="3" auth="lyao" locRef="4" rule="METRICS-31" lnHash="-1179647073" rule.header="The assertion density of the code should average to a minimum of two assertions per function" tool="c++test" lineHash="-1179647073" unbViolId="d7574248-e882-3586-895a-5efe00d7953b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f2eed021-6273-369c-835f-541d56f00a7b" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0,"/>
    <StdViol msg="The filename 'NullPointer.cpp' should be in lowercase" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="1" sev="3" auth="lyao" locRef="4" rule="NAMING-03" lnHash="-1179647073" rule.header="Use lowercase for file names" tool="c++test" lineHash="-1179647073" unbViolId="38a40d85-2f35-31e4-a40b-05361ce469fa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="014265e7-dea3-3f21-9f30-a8cc739b0a0b" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0,"/>
    <StdViol msg="Implementation file 'NullPointer.cpp' should have the file name extension &quot;.cc&quot;" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="1" sev="3" auth="lyao" locRef="4" rule="NAMING-38" lnHash="-1179647073" rule.header="Implementation files in C++ always have the file name extension &quot;.cc&quot;" tool="c++test" lineHash="-1179647073" unbViolId="381cde71-c374-3943-aa2f-b0517b76499a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="369d6e5d-6792-3329-a9ca-e055193a744d" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0,"/>
    <StdViol msg="Implementation file 'NullPointer.cpp' should declare a local constant string that begins from characters &quot;@(#)&quot; " ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="1" sev="5" auth="lyao" locRef="4" rule="PFO-04" lnHash="-1179647073" rule.header="Every implementation file should declare a local constant string that describes the file" tool="c++test" lineHash="-1179647073" unbViolId="40a84482-4978-31e7-9fd2-b3d46e904344" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="afe8bbd0-7c79-3e18-97d7-d9585a9b365c" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the copyright information at the begin of file 'NullPointer.cpp'" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="1" sev="3" auth="lyao" locRef="4" rule="COMMENT-02" lnHash="-1179647073" rule.header="Provide copyright information" tool="c++test" lineHash="-1179647073" unbViolId="0bf8bdd8-42a3-3ea7-87da-5ac62ab13847" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="496c8b8f-d057-34e6-94c8-e601122dd37f" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the copyright information at the begin of file 'NullPointer.cpp'" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="1" sev="3" auth="lyao" locRef="4" rule="JSF-133_b" lnHash="-1179647073" rule.header="Every source file will contain copyright information" tool="c++test" lineHash="-1179647073" unbViolId="ff8d667c-dfc0-386b-b9cd-25d3c4f19a1f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac51197f-c89f-3300-b7bd-282d5d401d6e" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the information on the file at the begin of file 'NullPointer.cpp'" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="1" sev="3" auth="lyao" locRef="4" rule="COMMENT-03" lnHash="-1179647073" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="-1179647073" unbViolId="4fdca382-21a8-3577-8d80-245011b42c78" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="590072b1-c50e-3465-85da-fc070d1984ae" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the information on the file at the begin of file 'NullPointer.cpp'" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="1" sev="3" auth="lyao" locRef="4" rule="JSF-133_a" lnHash="-1179647073" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="-1179647073" unbViolId="af713a23-d5e7-358c-b236-076749be56c0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71c70358-9bd8-3e5d-9605-5304d8dc0141" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0,"/>
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Point.hpp&quot;" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="1" sev="3" auth="lyao" locRef="4" rule="JSF-032" lnHash="-1179647073" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="-1179647073" unbViolId="d2cac3ca-0104-3c97-8fa7-fa7a7c816e4c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6906825-cb64-371b-8d92-e51b9b63aa21" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0,"/>
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Point.hpp&quot;" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="1" sev="3" auth="lyao" locRef="4" rule="PREPROC-08" lnHash="-1179647073" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="-1179647073" unbViolId="407ae428-3d38-370b-921e-c23c63bf82de" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3f54e30-7aef-3dc1-8798-bb2e06d24e82" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0,"/>
    <StdViol msg="Disallowed #include notation is being used: &quot;Point.hpp&quot;" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="1" sev="2" auth="lyao" locRef="4" rule="PREPROC-09" lnHash="-1179647073" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="-1179647073" unbViolId="04be904b-132e-3df6-8cb0-9db51f18bf3a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bef2271a-5afb-370d-adf5-7be8d1ffbe4f" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0,"/>
    <StdViol msg="Disallowed #include notation is being used: &quot;Point.hpp&quot;" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="1" sev="2" auth="lyao" locRef="4" rule="JSF-033" lnHash="-1179647073" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="-1179647073" unbViolId="7b9067a4-91ed-3a49-8967-d427ceda00df" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e2ac528-8c7c-334b-8f86-c14c1b872563" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0,"/>
    <StdViol msg="Instead of C library header '&lt;stdlib.h>' the corresponding C++ library header should be used" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="3" sev="2" auth="lyao" locRef="4" rule="MISRA2008-18_0_1" lnHash="-327381023" rule.header="The C library shall not be used" tool="c++test" lineHash="-327381023" unbViolId="63ec3d46-dd00-3a57-bec1-8b8cb24eb413" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5dbc8c6c-dda1-33ff-8eb2-49ae11823c44" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0,"/>
    <StdViol msg="Instead of C library header '&lt;stdlib.h>' the corresponding C++ library header should be used" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="3" sev="3" auth="lyao" locRef="4" rule="HICPP-1_3_3-a" lnHash="-327381023" rule.header="The C library shall not be used" tool="c++test" lineHash="-327381023" unbViolId="bc573662-fb5a-36ab-b210-d5cbe2c3c3a0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5758d690-c2bf-3667-9d84-d50c1acba915" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0,"/>
    <StdViol msg="Instead of C library header '&lt;stdlib.h>' the corresponding C++ library header should be used" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="3" sev="2" auth="lyao" locRef="4" rule="AUTOSAR-A18_0_1-a" lnHash="-327381023" rule.header="The C library shall not be used" tool="c++test" lineHash="-327381023" unbViolId="41dd6c64-71a9-3391-9d8c-3354f356dfea" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0da7acc8-01a8-3c6d-94d3-e5b687299b5d" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0,"/>
    <StdViol msg="Instead of C library header '&lt;stdlib.h>' the corresponding C++ library header should be used" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="3" sev="3" auth="lyao" locRef="4" rule="CODSTA-CPP-59" lnHash="-327381023" rule.header="The C library shall not be used" tool="c++test" lineHash="-327381023" unbViolId="45906b4a-39cb-3524-a5b6-aeae71ba352c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c191a3d-d454-353e-aff8-2adeae57557e" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0,"/>
    <StdViol msg="Instead of C library header '&lt;stdlib.h>' the corresponding C++ library header should be used" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="3" sev="2" auth="lyao" locRef="4" rule="AUTOSAR-A1_1_1-d" lnHash="-327381023" rule.header="The C library shall not be used" tool="c++test" lineHash="-327381023" unbViolId="913f17e9-ab69-328c-9e48-731dee18b9e7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95f893d9-4a24-3fb7-855e-0a96d5ea9df0" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0,"/>
    <StdViol msg="Ensure that C Standard Library is securely used" ln="3" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="3" sev="4" auth="lyao" locRef="4" rule="HICPP-17_2_1-a" lnHash="-327381023" rule.header="Wrap use of the C Standard Library" tool="c++test" lineHash="-327381023" unbViolId="d99b65aa-5f7e-39da-9041-4abe0ffbaefd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d59ec9a0-e738-3768-a5af-ab3440169d0d" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0,"/>
    <StdViol msg="The definition of the 'main' function is not preceded by a comment" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="3" auth="lyao" locRef="4" rule="COMMENT-04" lnHash="-332596053" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-332596053" unbViolId="1d925cf6-f421-32e8-a6c5-a6c87a1f6e6b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d2ed84c-0266-3892-ab3d-4be012b4a626" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The definition of the 'main' function is not preceded by a comment" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="4" auth="lyao" locRef="4" rule="JSF-134" lnHash="-332596053" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-332596053" unbViolId="73908da9-1515-38a7-ae57-298a4a933307" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="81ce3b30-6b95-31b2-a9ad-d82539f09dc9" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'main' function should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="3" auth="lyao" locRef="4" rule="COMMENT-14" lnHash="-332596053" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-332596053" unbViolId="96bdabb8-c575-3c33-9134-0aef6010b508" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="56689244-a5f5-3060-af45-60ee15ca864d" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'main' function should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="2" auth="lyao" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="-332596053" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-332596053" unbViolId="2658c3d8-1f10-37d8-9bb1-7de91162b8e5" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6d6b5745-50e2-3d0e-927e-c34bffffb927" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'argc' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="2" auth="lyao" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="a60e36bf-c543-3dac-96df-d3f81f083522" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6508e15b-a2c7-3e1f-b481-1985e1709310" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'argc' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="3" auth="lyao" locRef="4" rule="COMMENT-14_b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="c0e702a4-fec5-3889-bac7-7eccae0d78fa" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0cc905ce-72ba-3dd4-9698-6482cef6b1b9" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'argv' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="2" auth="lyao" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="f8ac98ac-45c0-31fd-88cd-8c94ab065201" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f182bde-e13d-34cd-a48f-572d6123859d" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'argv' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="3" auth="lyao" locRef="4" rule="COMMENT-14_b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="0b3fe538-b583-328f-a7e5-6aa318ee2186" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ffc977d8-376e-3db7-9167-cae8d9a7671a" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'main' function should be preceded by a comment that contains the '@return' tag" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="2" auth="lyao" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="41b99302-f9ec-3e18-a43b-9f58d34a7c39" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9833d52f-b3c9-35f1-a62b-36bcece09c16" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'main' function should be preceded by a comment that contains the '@return' tag" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="3" auth="lyao" locRef="4" rule="COMMENT-14_b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="08c6b95c-e6a9-355f-905a-c48ed8b3a769" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee6ee5fa-9bc1-3177-b9e5-7c382d0adac5" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="'main' shall be declared as unsigned int or signed int" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="3" auth="lyao" locRef="4" rule="PORT-13" lnHash="-332596053" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-332596053" unbViolId="e8b06fb7-a906-3f75-a3ef-040330dab1dc" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="884780c7-0da5-3403-b7c5-53c5aa088a10" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="3" auth="lyao" locRef="4" rule="CERT_CPP-ERR50-d" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="c8e6a608-46a9-3aa4-870e-c087a4a3c7f4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad77c091-7b2f-3f04-a0dc-c4850fe3a8b7" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="2" auth="lyao" locRef="4" rule="AUTOSAR-A15_3_3-a" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="ed583c53-d672-3bb1-9942-8266a5657e60" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ba75692-0468-3588-9ca9-7f71a491a983" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="3" auth="lyao" locRef="4" rule="HICPP-15_3_2-b" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="3bdb9fae-1ba4-3381-853d-dc0c86fc52b2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71969233-fc1c-3be0-b173-800030872c31" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="4" auth="lyao" locRef="4" rule="MISRA2008-15_3_2" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="e4c92b6c-cfa8-3e9c-9bb3-849ccc46b1ed" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="843281c8-4976-3222-9100-681cdc44ca18" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="2" auth="lyao" locRef="4" rule="AUTOSAR-A15_5_3-d" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="1a17f46a-7617-3b20-873f-6f873903b02b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb5f352e-d3f3-31a2-a856-65aa4a12ad46" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="3" auth="lyao" locRef="4" rule="EXCEPT-06" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="c4fc71da-255a-3077-af76-b617190b0494" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ccfab470-6295-3bbf-a525-b4ef59a96927" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="2" auth="lyao" locRef="4" rule="MISRA2008-15_5_3_d" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="8a84e075-56e5-364e-a086-598a23ec43ba" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3273c3f1-362c-3a4d-88a5-1e9b2093249e" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="Return type is not placed in line before function 'main'" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="3" auth="lyao" locRef="4" rule="FORMAT-28" lnHash="-332596053" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-332596053" unbViolId="3b8c5337-b721-32f4-8fd4-bef147a28b04" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a36c4376-f184-362c-836d-28597b03e7f0" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="Function 'main' has Cyclomatic Complexity value: 2" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="5" auth="lyao" locRef="4" rule="METRICS-29" lnHash="-332596053" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-332596053" unbViolId="4ac2ed0d-4513-3174-8630-3a2e861931d1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a040308a-d2cd-383c-97fd-f28a6b075bac" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="Function 'main' has Essential Complexity value: 1" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="5" auth="lyao" locRef="4" rule="METRICS-33" lnHash="-332596053" rule.header="Report Essential Complexity" tool="c++test" lineHash="-332596053" unbViolId="6a1be106-0cb7-3826-9136-78533f65d52f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8024068-8f4f-357a-be89-3fb476b29e13" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="4" auth="lyao" locRef="4" rule="MISRA2008-3_9_2" lnHash="-332596053" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-332596053" unbViolId="ae6852e6-e998-3f5b-bf98-b387dc2d4235" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68004f04-fc13-38b0-9005-c8d7a6045112" locEndPos="10" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="3" auth="lyao" locRef="4" rule="MISRA-013" lnHash="-332596053" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-332596053" unbViolId="a3da49f5-6bc3-3c45-9031-e59e5496f4d3" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9ceff93-b2b4-3fa4-a679-2d7d6896e685" locEndPos="10" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="'argc' shall be declared as unsigned int or signed int" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="3" auth="lyao" locRef="4" rule="PORT-13" lnHash="-332596053" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-332596053" unbViolId="fdde6392-7462-3234-a3be-d675288d4fe3" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0d9ae89-05d7-3667-8460-da41d8ba4e83" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'argc' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="3" auth="lyao" locRef="4" rule="NAMING-HN-22" lnHash="-332596053" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-332596053" unbViolId="58f505c9-7090-3f44-aab2-90db41788b79" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07ad0da1-bd85-37a3-b327-b590545aaf13" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'argc' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="3" auth="lyao" locRef="4" rule="NAMING-HN-30" lnHash="-332596053" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-332596053" unbViolId="c325733d-2c1c-3037-b7b5-a902ec81fd0d" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b630d944-62f4-37f5-9dc9-90bfc2ea2c7f" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'argc' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="3" auth="lyao" locRef="4" rule="NAMING-HN-43" lnHash="-332596053" rule.header="Hungarian notation for word types" tool="c++test" lineHash="-332596053" unbViolId="e8a0ad00-5952-36a5-ad92-ab9dc8088e8b" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="39f0095a-24b3-35fe-acd0-c619879f2867" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'char' should not be used" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="4" auth="lyao" locRef="4" rule="MISRA2008-3_9_2" lnHash="-332596053" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-332596053" unbViolId="aa86e30b-8ca9-36b3-96e5-5ce726e98fd5" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52715be3-08ec-326c-9db8-630e4da10bc3" locEndPos="20" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'char' should not be used" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="3" auth="lyao" locRef="4" rule="MISRA-013" lnHash="-332596053" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-332596053" unbViolId="35922090-3b6c-3ed9-8603-6120c925e70e" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a66e59fb-5924-3771-9236-f90255f0af06" locEndPos="20" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The parameter of pointer or array type is declared: argv" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="3" auth="lyao" locRef="4" rule="CODSTA-94" lnHash="-332596053" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-332596053" unbViolId="0833430e-b47b-30a0-9a36-3adb494e0ffd" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a88d1413-191f-3b4a-bd75-e97652bdb335" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The parameter of pointer type is declared: argv" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="3" auth="lyao" locRef="4" rule="CODSTA-95" lnHash="-332596053" rule.header="Do not declare pointer type" tool="c++test" lineHash="-332596053" unbViolId="d8f00e61-db8b-35a5-8fb5-0ea6f0742098" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e104872-ae7d-365d-9a76-0532d1770125" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="Parameter 'argv' with array type was found in 'main' function declaration" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="2" auth="lyao" locRef="4" rule="JSF-097_c" lnHash="-332596053" rule.header="Arrays shall not be used in global functions" tool="c++test" lineHash="-332596053" unbViolId="d4c8eda1-b81a-3ad6-9167-59c2698e473f" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3737f50b-890d-3622-929a-b05411c4f861" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="Parameter 'argv' with array type was found in 'main' function declaration" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="2" auth="lyao" locRef="4" rule="CODSTA-142" lnHash="-332596053" rule.header="Global functions shall not declare parameters with array type" tool="c++test" lineHash="-332596053" unbViolId="98857a25-10b6-3767-b886-e0b0e3a35241" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="214698ff-9715-3b9f-9ae2-01554cde916e" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="Parameter 'argv' is not validated before use" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="3" auth="lyao" locRef="4" rule="CERT_C-API00-a" lnHash="-332596053" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-332596053" unbViolId="5b73f2d6-cecc-3f6f-b7ea-afef3deda22a" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22c7892d-c84c-3791-ad43-9930641496af" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="Parameter 'argv' is not validated before use" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="5" sev="3" auth="lyao" locRef="4" rule="CODSTA-86" lnHash="-332596053" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-332596053" unbViolId="4db56ea2-b2b9-3854-b5d1-405e51f05c23" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a2c27a39-7335-3c82-a5e8-3619f0266b19" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="6" sev="3" auth="lyao" locRef="4" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="8765c43f-5f87-3c1b-8bff-64638513750f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78cd4829-6687-3537-96b0-8fbbd84f9950" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="6" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="4" auth="lyao" locRef="4" rule="JSF-043" lnHash="264435611" rule.header="Tabs should be avoided" tool="c++test" lineHash="264435611" unbViolId="8809e03f-e141-30b7-b191-c2b89384d69a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="141e2694-cb5f-3a78-82eb-8180c6f6cdba" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="5" auth="lyao" locRef="4" rule="FORMAT-01" lnHash="264435611" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="264435611" unbViolId="bbe19688-0864-3aac-8bbd-38bff0a7c715" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ab82c5c-7a0a-39cf-95cb-65244ecf65ac" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="5" auth="lyao" locRef="4" rule="HICPP-2_1_1-a" lnHash="264435611" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="264435611" unbViolId="4a1cf254-f2c1-312f-bb1a-19f8ed5f5509" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ec3563c2-98b5-367a-a479-5e518479917b" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="The definition of the 'point' variable should contain a braced initializer" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="2" auth="lyao" locRef="4" rule="AUTOSAR-A8_5_2-a" lnHash="264435611" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="264435611" unbViolId="d7f5b33c-9b84-33ba-8141-38e968001896" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e538748-b036-3bf2-91f2-356532d61a46" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="The definition of the 'point' variable should contain a braced initializer" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="3" auth="lyao" locRef="4" rule="CODSTA-MCPP-38" lnHash="264435611" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="264435611" unbViolId="b9544cbe-b925-33da-8599-2bad9be789ca" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27b26c48-e8dc-3546-8651-a85f63e67431" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="3" auth="lyao" locRef="4" rule="NAMING-45" lnHash="264435611" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="264435611" unbViolId="a896271e-4135-3ac2-8c6e-e04b0e37b37c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="df346a70-3f06-3df9-aa41-b1559f9e0c69" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="3" auth="lyao" locRef="4" rule="JSF-048" lnHash="264435611" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="264435611" unbViolId="b161a764-f217-3477-aa0f-85b7072fdab0" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f4a1f7e2-2e08-354e-ad7b-9e635d5a21bc" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="The variable of pointer or array type is declared: point" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="3" auth="lyao" locRef="4" rule="CODSTA-94" lnHash="264435611" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="264435611" unbViolId="663d51ba-82ca-3207-8b3a-ef30228a2711" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ff57ce4-9bc7-337a-910d-49c56d735d88" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="The variable of pointer type is declared: point" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="3" auth="lyao" locRef="4" rule="CODSTA-95" lnHash="264435611" rule.header="Do not declare pointer type" tool="c++test" lineHash="264435611" unbViolId="f2545288-46c3-3560-a419-fb529a45ec35" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64725b41-2281-3118-9b35-086dcb2b311e" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="2" auth="lyao" locRef="4" rule="MISRA2008-2_10_1" lnHash="264435611" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="264435611" unbViolId="21c42da7-d640-3e0f-bd12-7772e2a91646" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f3612ba-89e6-33b7-a24d-9560101256ef" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="3" auth="lyao" locRef="4" rule="HICPP-2_4_1-a" lnHash="264435611" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="264435611" unbViolId="99dd9cf5-dcca-3fc2-9bcf-8563806f19dc" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0828ba5-e417-3d9e-860b-1dafe32a084b" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="2" auth="lyao" locRef="4" rule="AUTOSAR-M2_10_1-a" lnHash="264435611" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="264435611" unbViolId="dff0ca63-4338-318e-98f2-c3f47c32dae3" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="184217cf-9ddb-3cb3-8db2-8e8e4d4288b4" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="3" auth="lyao" locRef="4" rule="NAMING-47" lnHash="264435611" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="264435611" unbViolId="59876f09-6297-36bf-8c34-e7ab0ad04d99" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c81646da-8044-3f46-904a-b46bdd19b85b" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Locally allocated memory is not deleted locally for : point" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="3" auth="lyao" locRef="4" rule="MRM-18" lnHash="264435611" rule.header="Do not allocate memory and expect that someone else will deallocate it later" tool="c++test" lineHash="264435611" unbViolId="0adef6b3-fe13-3664-b0e7-07b9040c55f4" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c03781cf-58fa-3e0a-b1a0-e303c36d8db4" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Locally allocated memory is not deleted locally for : point" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="1" auth="lyao" locRef="4" rule="CERT_C-MEM00-a" lnHash="264435611" rule.header="Do not allocate memory and expect that someone else will deallocate it later" tool="c++test" lineHash="264435611" unbViolId="a3535f52-604e-3ad9-8e36-7f6f7034f26d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="faf5e948-535c-39bb-ab0d-89442d348627" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'point' variable should be commented" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="3" auth="lyao" locRef="4" rule="JSF-132_a" lnHash="264435611" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="264435611" unbViolId="19dbda17-4a38-37bc-a171-64a053f32ee3" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c366f7e-bad0-3930-accd-db3b01ba4ab1" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'point' variable should be commented" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="3" auth="lyao" locRef="4" rule="COMMENT-05" lnHash="264435611" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="264435611" unbViolId="630944d4-4f89-313b-addc-46e96341571b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b7af28c-804e-34bc-a72b-bdb5ec186488" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="2" auth="lyao" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="264435611" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="264435611" unbViolId="1c4ecde6-a07f-3fab-a0cb-1aa7e86c1861" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ac16308-bc10-330e-a8a7-4121a718a399" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="4" auth="lyao" locRef="4" rule="HICPP-2_5_3-a" lnHash="264435611" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="264435611" unbViolId="ed6dfb60-7732-3972-8388-57b72e66e453" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5447e87c-2c48-31a1-baa2-4e8f01122066" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="4" auth="lyao" locRef="4" rule="CODSTA-MCPP-04" lnHash="264435611" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="264435611" unbViolId="5818ec17-d0c4-3da9-bc03-03f63f5339e4" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="486e7e1a-80fb-3f1c-bf5b-310088d62c24" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="2" auth="lyao" locRef="4" rule="MISRA2012-RULE-11_9_a" lnHash="264435611" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="264435611" unbViolId="88baac15-99ed-3982-a6af-8ae343a11d1e" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0bf5191-bbaa-32ee-8581-ed08ec561373" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="2" auth="lyao" locRef="4" rule="AUTOSAR-M4_10_2-a" lnHash="264435611" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="8552ad22-a6a5-33fb-973e-b5088696b103" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f3b23f6-9118-3c92-a69d-495699d65541" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="2" auth="lyao" locRef="4" rule="MISRA2008-4_10_2" lnHash="264435611" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="4cb52da2-7bc2-3f24-b4c0-f0f19f658243" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="20a6229a-91df-3731-a05f-d5d0cb7c1dab" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="3" auth="lyao" locRef="4" rule="CODSTA-CPP-63" lnHash="264435611" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="0c91a646-8b8f-3f69-9fa8-1ab73cf17be4" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c7f2832-a637-39c0-99d7-da0dc1d3d16d" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="2" auth="lyao" locRef="4" rule="MISRAC2012-RULE_11_9-a" lnHash="264435611" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="47eb2ca5-e2df-33ce-9f92-8264eb664a5e" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="422243db-7ac2-3766-bf93-1a26e4d4cd71" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="3" auth="lyao" locRef="4" rule="CODSTA-131" lnHash="264435611" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="09974971-dcc5-3c3a-9c18-5008cdb0bfb9" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d844f65-4ae8-3b05-87fa-ac12b3a2b03c" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="2" auth="lyao" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="264435611" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="264435611" unbViolId="506c97da-cf22-3960-89a2-e5303cd0ac10" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a56d872-d210-339b-96d8-7c90539e742a" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="7" sev="2" auth="lyao" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="264435611" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="bde24ad1-f8f9-30c4-9c84-db924cfcba12" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f9d88f5-aedb-31e3-b622-85257a2e7570" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="8" sev="3" auth="lyao" locRef="4" rule="JSF-061" lnHash="-620226472" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-620226472" unbViolId="95bdb294-265e-3323-b076-1a0a7c43bd75" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5fa2821d-3ace-3921-abfb-c955db729d8a" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="8" sev="3" auth="lyao" locRef="4" rule="FORMAT-42" lnHash="-620226472" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-620226472" unbViolId="6ee6ff90-dc36-38ca-877c-c4020ed803ac" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e450b16d-52a9-3907-9821-24efcd03317f" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="8" sev="3" auth="lyao" locRef="4" rule="JSF-060_a" lnHash="-620226472" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-620226472" unbViolId="5b39ecb4-147d-3201-97c3-d2fcf7c878d5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6f1e28e-4c1a-31cd-b82a-c13337d95c22" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="8" sev="3" auth="lyao" locRef="4" rule="FORMAT-43" lnHash="-620226472" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-620226472" unbViolId="0587615d-780e-3ba7-9d6e-898677f02404" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ec5d5a47-0f94-3d64-9d3d-15e197638fec" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="8" sev="3" auth="lyao" locRef="4" rule="JSF-060_b" lnHash="-620226472" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-620226472" unbViolId="7fbf1729-bc2a-3505-8a67-a8b84e206942" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e94a0a50-ee82-35b7-9667-99a995f1c100" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="8" sev="4" auth="lyao" locRef="4" rule="JSF-043" lnHash="-620226472" rule.header="Tabs should be avoided" tool="c++test" lineHash="-620226472" unbViolId="c0e7e140-f11e-3f21-8379-2d9304471cc3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36a20ea3-6163-3a20-a088-7de33dcf6bdb" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="8" sev="5" auth="lyao" locRef="4" rule="FORMAT-01" lnHash="-620226472" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-620226472" unbViolId="ceaf0355-c016-3f99-a935-4af7348bb042" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69282969-55ed-3061-9478-7a2e9ca026ed" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="8" sev="5" auth="lyao" locRef="4" rule="HICPP-2_1_1-a" lnHash="-620226472" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-620226472" unbViolId="5caa5a77-a56b-3cd1-90a7-e3178d71e315" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f8d7124-6650-3569-bf76-b502c7628661" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="8" sev="3" auth="lyao" locRef="4" rule="FORMAT-02" lnHash="-620226472" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-620226472" unbViolId="8a3981f3-d519-374c-9be6-87dced7bc8db" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e03e6fc-50da-3d9f-96b8-1aee3070355c" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="The 'if' statement doesn't have an 'else' clause" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="8" sev="3" auth="lyao" locRef="4" rule="CODSTA-23" lnHash="-620226472" rule.header="All 'if' statements should have an 'else' clause" tool="c++test" lineHash="-620226472" unbViolId="6b47e144-5ad9-3b38-bd43-758408ae70c0" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f736a139-d71d-3999-a7f4-117594d1bfd6" locEndPos="2" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="No value of command line should be trusted: argc" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="8" sev="2" auth="lyao" locRef="4" rule="SECURITY-35" lnHash="-620226472" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="-620226472" unbViolId="d0535bf9-a21f-3bed-b45d-1c5286142675" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="186cfd14-71f9-345d-abcb-b890f7f365b1" locEndPos="6" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="Literal constant '3' is used" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="8" sev="3" auth="lyao" locRef="4" rule="JSF-151" lnHash="-620226472" rule.header="Numeric values in code will not be used; symbolic values will be used instead" tool="c++test" lineHash="-620226472" unbViolId="05480f03-71ea-3bd2-8940-1649ce29b66a" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e287cbf6-94a2-37f7-99dd-21fad69f4d8c" locEndPos="13" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="Literal constant '3' is used" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="8" sev="3" auth="lyao" locRef="4" rule="CODSTA-26" lnHash="-620226472" rule.header="Avoid magic numbers" tool="c++test" lineHash="-620226472" unbViolId="ce7b31e6-be1f-3d06-9187-5b9aea6fb7d7" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13f0103a-f6a0-365a-90a3-24af81c2c9db" locEndPos="13" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="Literal constant '3' is used" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="8" sev="2" auth="lyao" locRef="4" rule="AUTOSAR-A5_1_1-a" lnHash="-620226472" rule.header="Avoid magic numbers" tool="c++test" lineHash="-620226472" unbViolId="5bd04cdc-5ac6-32a2-ac18-49ba00c6a2a0" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1f4f103-2b8b-39e3-a40d-f6c6378c3cff" locEndPos="13" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="Literal constant '3' is used" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="8" sev="3" auth="lyao" locRef="4" rule="HICPP-5_1_1-a" lnHash="-620226472" rule.header="Avoid magic numbers" tool="c++test" lineHash="-620226472" unbViolId="c135a10a-dfcc-34f6-910e-1c521a8b36b0" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98cb3239-9021-31b4-9a32-ada14c9e71bb" locEndPos="13" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="4" auth="lyao" locRef="4" rule="JSF-043" lnHash="212456074" rule.header="Tabs should be avoided" tool="c++test" lineHash="212456074" unbViolId="fbf255a5-3b18-39dd-ac80-361c0476bc16" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4075aa0b-5823-3ef6-9d53-7ca116b5dcd4" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="5" auth="lyao" locRef="4" rule="FORMAT-01" lnHash="212456074" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="212456074" unbViolId="93392e65-8612-34a8-b2d6-9027013c7414" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="15da6155-91b0-3495-8d33-b58914d88f75" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="5" auth="lyao" locRef="4" rule="HICPP-2_1_1-a" lnHash="212456074" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="212456074" unbViolId="12138454-babf-35b3-8dbb-d690ae3b197d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65cbea9a-886d-32f3-bfc3-139648453dd6" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="4" auth="lyao" locRef="4" rule="JSF-043" lnHash="212456074" rule.header="Tabs should be avoided" tool="c++test" lineHash="212456074" unbViolId="e9f9b9c6-fbbf-3df9-88ec-a57f17d99abb" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d74b98a1-cc38-3af3-966f-65561dc51809" locEndPos="2" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="5" auth="lyao" locRef="4" rule="FORMAT-01" lnHash="212456074" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="212456074" unbViolId="d6e6e250-01b7-3c58-a09b-9e530e6c8d5c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00714c81-8c90-321e-a36d-0c227e569bec" locEndPos="2" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="5" auth="lyao" locRef="4" rule="HICPP-2_1_1-a" lnHash="212456074" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="212456074" unbViolId="a69d7a66-90d1-3da9-b937-fb5fcb340976" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d94ceae8-b76c-3e23-a17b-7cead618ed53" locEndPos="2" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="2" auth="lyao" locRef="4" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="fbce0178-39a4-3b47-877a-9d9a10406de5" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4a1f29c-d97e-3e0f-9f21-8eb65c6ed2c2" locEndPos="3" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Check the return value of new" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="3" auth="lyao" locRef="4" rule="MRM-34" lnHash="212456074" rule.header="Check the return value of new" tool="c++test" lineHash="212456074" unbViolId="7ea1eda8-866b-3c33-aede-3a4ec9b0c0bc" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5c5beb52-0dee-33c8-8d1e-b9e7a4dfaa58" locEndPos="3" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Check the return value of new" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="1" auth="lyao" locRef="4" rule="CERT_CPP-MEM52-a" lnHash="212456074" rule.header="Check the return value of new" tool="c++test" lineHash="212456074" unbViolId="d02175f5-4b1e-37bc-a533-c9e266e0ba37" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="72b424fb-4fe9-3770-a8da-67fe594da701" locEndPos="3" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="2" auth="lyao" locRef="4" rule="MISRA2012-DIR-4_12" lnHash="212456074" rule.header="Dynamic memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="ae6a222a-dc1a-30ae-9044-a5a26bc2bb13" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="159c5895-6bb9-3655-b36e-6aa16626e26b" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="2" auth="lyao" locRef="4" rule="MISRA2008-18_4_1" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="bf807de4-c512-3bbc-8934-d4f76470d567" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a91b7e1c-ad56-3d8e-9bd2-58f3c4558665" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="2" auth="lyao" locRef="4" rule="MISRAC2012-RULE_21_3-a" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="2540a19c-6b4c-3c9d-9d9f-76972b13c8f8" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="686d4281-1edb-3df2-b22c-13cfba531cc4" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="2" auth="lyao" locRef="4" rule="AUTOSAR-A18_5_2-a" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="cdda492d-9898-36d6-884f-31d40236ca67" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca121bce-fc5d-378a-9d4b-e04c89d91ce2" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="2" auth="lyao" locRef="4" rule="JSF-206" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="de30d1d2-602c-3717-86fe-8328594866d5" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="595039cc-f637-35e3-abb2-95e65324258f" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="2" auth="lyao" locRef="4" rule="MISRA2012-RULE-21_3" lnHash="212456074" rule.header="The memory allocation and deallocation functions of &lt;stdlib.h> shall not be used" tool="c++test" lineHash="212456074" unbViolId="98c036cc-c67d-3a18-b1e0-8d50c0d6c631" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a608b0d-30e7-38a3-849d-6c43c94122a1" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="3" auth="lyao" locRef="4" rule="MISRA2004-20_4" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="13f5deb4-bf7a-30e0-ad15-d2049a94fad8" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9aec3eb6-0f68-3745-be2f-eb8bebb51341" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="2" auth="lyao" locRef="4" rule="MISRAC2012-DIR_4_12-a" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="85edb105-aa75-30f7-bd4b-68e6149d0d2c" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef5e4b8c-6565-3fb4-a84c-5e8c59ab8cdc" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="2" auth="lyao" locRef="4" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="78642179-c83e-39ac-98c9-abe0d00b43e8" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f88ffc0-0871-31b9-a73f-b3bee0cfd73c" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="2" auth="lyao" locRef="4" rule="MISRAC2012-RULE_21_7-a" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="bd45f2f4-90f2-3ad1-92dc-0fa0a39ab0b6" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ce73449-88d5-3bb7-bbd1-276f0f9b749b" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="3" auth="lyao" locRef="4" rule="CERT_CPP-ERR62-a" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="756b4fd4-ee8b-34af-8626-e068abc8d1ec" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22289e8c-27d1-3a1c-a7d5-ebab2f692c0b" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="2" auth="lyao" locRef="4" rule="MISRA2008-18_0_2" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library &lt;cstdlib> shall not be used" tool="c++test" lineHash="212456074" unbViolId="12550245-e5a2-344f-b323-282c6cdf4120" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="908c2f69-2db0-33ea-8631-0be09bb22ad3" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="3" auth="lyao" locRef="4" rule="CERT_C-ERR34-a" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="edd4dba1-bfe2-38b0-aa56-1bc92cfcb4d8" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d155549b-028f-307c-bf9f-e1daeb360e7f" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="3" auth="lyao" locRef="4" rule="MISRA2004-20_10" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="a1005115-af47-351e-836d-7a2b663d66ee" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e37f7ffb-49c6-3c46-a9b6-432cc1950340" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="3" auth="lyao" locRef="4" rule="CERT_C-MSC24-a" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="59b38f3b-3578-3229-8ee3-09db5f1ed823" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ecfe8a1-3821-3944-9107-a81fb20d2c96" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="2" auth="lyao" locRef="4" rule="CERT_C-ERR07-a" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="4f9122c4-2818-3d64-bb61-1cf90e0d9615" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4976640-5df7-3b9c-8497-762602df0f7c" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="2" auth="lyao" locRef="4" rule="AUTOSAR-A18_0_2-a" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="b3267f86-4850-30e0-978d-c3d6cd03477d" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bbf613cf-66a3-3321-b437-930cc3de70e3" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="2" auth="lyao" locRef="4" rule="MISRA2012-RULE-21_7" lnHash="212456074" rule.header="The atof, atoi, atol and atoll functions of &lt;stdlib.h> shall not be used" tool="c++test" lineHash="212456074" unbViolId="8be31c23-23e1-3626-8810-79458e619eec" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="013e957e-749a-3936-b39e-57803d5b3d4a" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="2" auth="lyao" locRef="4" rule="JSF-023" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library &lt;stdlib.h> shall not be used" tool="c++test" lineHash="212456074" unbViolId="c0e8365f-0a70-31cd-9fc6-eb206e50ee94" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4eb3eff9-2cbb-388c-b7f6-ff7a2d4f12f7" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="2" auth="lyao" locRef="4" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="b6a7298a-7560-3a09-95d4-e97b6e702de3" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8f0576b-f40c-369a-a1fb-1755181818ab" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="2" auth="lyao" locRef="4" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="e0133397-3318-3317-ae36-e555afc7a428" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31bcf756-758d-3ba8-9760-e639509bc515" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="2" auth="lyao" locRef="4" rule="MISRAC2012-RULE_21_7-a" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="8eeea4a1-0877-34be-9eba-af13f56f9059" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="394979f5-9169-3b63-b746-fc77fac524d1" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="3" auth="lyao" locRef="4" rule="CERT_CPP-ERR62-a" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="15b3e40f-7a56-3041-93bf-7d505783bf5d" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b0e7755-5aa5-3ac6-8e70-acec58d5a0dd" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="2" auth="lyao" locRef="4" rule="MISRA2008-18_0_2" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library &lt;cstdlib> shall not be used" tool="c++test" lineHash="212456074" unbViolId="36cd799d-1300-3dd8-8276-9deca7c3d015" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c99c53a3-7af3-3b96-a09c-d14a1c2d03d5" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="3" auth="lyao" locRef="4" rule="CERT_C-ERR34-a" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="42f75fe6-a49b-31da-a99e-685a7f426170" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="becb05f4-fc03-3b84-a330-2a6762b4c231" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="3" auth="lyao" locRef="4" rule="MISRA2004-20_10" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="68116ba9-a808-3ec8-8ae1-95c06890645d" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c625f178-1f89-3f69-b401-f0249319d77c" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="3" auth="lyao" locRef="4" rule="CERT_C-MSC24-a" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="c57dc2a7-6822-396b-90c4-d65182d9f21f" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a822c2a-207e-3b31-9d7f-64bf0e4c5274" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="2" auth="lyao" locRef="4" rule="CERT_C-ERR07-a" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="e2844691-dda0-3a86-94d6-698c97cfce22" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a644f7fa-a455-378f-889f-cbdf15289741" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="2" auth="lyao" locRef="4" rule="AUTOSAR-A18_0_2-a" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="d08161d7-3b9c-3d2e-8913-ef8008efe427" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99e1bbec-b2e2-31b1-b3f7-adc8a73868a6" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="2" auth="lyao" locRef="4" rule="MISRA2012-RULE-21_7" lnHash="212456074" rule.header="The atof, atoi, atol and atoll functions of &lt;stdlib.h> shall not be used" tool="c++test" lineHash="212456074" unbViolId="c0cf45a2-2c0e-3392-bbcd-02787d3b5b6e" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f18019fb-30a0-3260-82a1-7c4c291b3fc4" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="2" auth="lyao" locRef="4" rule="JSF-023" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library &lt;stdlib.h> shall not be used" tool="c++test" lineHash="212456074" unbViolId="afad7349-26e2-3bb2-a491-d4bb9bc116da" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d026fb95-172f-3177-b978-9587b5a19ae0" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="2" auth="lyao" locRef="4" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="44025147-efb9-3681-bd4a-df54d06f2552" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7532365b-5839-3ea2-9116-e2d58c31d777" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="2" auth="lyao" locRef="4" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="bb1cc185-0c30-3b81-bb39-9ec015113074" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e438e99d-c268-3551-b938-0da3c9ad418a" locEndPos="41" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Literal constant '2' is used" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="3" auth="lyao" locRef="4" rule="JSF-151" lnHash="212456074" rule.header="Numeric values in code will not be used; symbolic values will be used instead" tool="c++test" lineHash="212456074" unbViolId="83d8785f-e355-3c8e-987b-6b3b6266d8d9" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f76c1f2-7fab-3da2-85a3-e59f515569b8" locEndPos="46" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Literal constant '2' is used" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="3" auth="lyao" locRef="4" rule="CODSTA-26" lnHash="212456074" rule.header="Avoid magic numbers" tool="c++test" lineHash="212456074" unbViolId="b721e76e-3c2a-3956-85de-d34841415a1c" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb979fae-2ad9-396f-b054-9a084741127c" locEndPos="46" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Literal constant '2' is used" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="2" auth="lyao" locRef="4" rule="AUTOSAR-A5_1_1-a" lnHash="212456074" rule.header="Avoid magic numbers" tool="c++test" lineHash="212456074" unbViolId="0b68b026-96a8-3a94-8fcf-e42f806ac2b9" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="030b6cc2-e24d-34ea-b1c6-ccaf87308baa" locEndPos="46" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Literal constant '2' is used" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="9" sev="3" auth="lyao" locRef="4" rule="HICPP-5_1_1-a" lnHash="212456074" rule.header="Avoid magic numbers" tool="c++test" lineHash="212456074" unbViolId="96c1d6a8-3fb6-3ebf-bb1f-5f34bc7060ee" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f129aeb-8162-3f09-805f-e698f770d53e" locEndPos="46" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="10" sev="4" auth="lyao" locRef="4" rule="JSF-043" lnHash="404" rule.header="Tabs should be avoided" tool="c++test" lineHash="404" unbViolId="2fa5687e-5905-3894-91cf-0ee986b10a69" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42880119-b71e-3d40-a91e-1b27ca7b8319" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="10" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="10" sev="5" auth="lyao" locRef="4" rule="FORMAT-01" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="8913917d-86e0-3478-b807-dbb558b6710e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36eed7db-7a8b-328e-a322-766eb13c0b49" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="10" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="10" sev="5" auth="lyao" locRef="4" rule="HICPP-2_1_1-a" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="a194690b-952d-3187-ba42-7deddf3e672f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dfcb3453-fa89-373e-a15a-a249385202b2" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="10" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="11" sev="4" auth="lyao" locRef="4" rule="JSF-043" lnHash="1178067846" rule.header="Tabs should be avoided" tool="c++test" lineHash="1178067846" unbViolId="71b8d80a-2b9f-3ee3-8d35-65a2b454f56a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef4cd68c-6847-3664-b53b-fa64b19fe0ba" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="11" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="11" sev="5" auth="lyao" locRef="4" rule="FORMAT-01" lnHash="1178067846" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1178067846" unbViolId="d20156a3-1b6c-38b0-8fd0-04f7f6620c94" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a7a38bd-3d82-3ca9-b442-5751079d2c3f" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="11" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="11" sev="5" auth="lyao" locRef="4" rule="HICPP-2_1_1-a" lnHash="1178067846" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1178067846" unbViolId="d81d14e0-b129-3051-8514-a0463df50e0b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e51a5ff3-b3ae-378c-b73f-9ed994ee51c8" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="11" goals="0,"/>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="8" rule="AUTOSAR-A5_3_2-a" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1390236584" lang="cpp" violId="9cd2ee85-7dff-387c-ac26-50726e08ed2a" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="2" locRef="4" tool="c++test" lineHash="1178067846" unbViolId="753a48fe-84c1-3c2d-a9f9-816023fc8560" locType="sr" hash="-1257393797" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: point" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="8" rule="AUTOSAR-M0_3_1-f" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="78528533" lang="cpp" violId="03772a61-3587-3761-906b-d6e31b89b040" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="2" locRef="4" tool="c++test" lineHash="1178067846" unbViolId="9a3cdf58-4eaf-3285-841c-e68db76ec58c" locType="sr" hash="-1257393797" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: point" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="8" rule="BD-PB-NP" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="476450621" lang="cpp" violId="833c5289-f79f-3c42-b0f4-a9b440fdafc3" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="4" tool="c++test" lineHash="1178067846" unbViolId="490531e2-e1ec-3270-a7b3-cca66b21f1fa" locType="sr" hash="-1257393797" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: point" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="8" rule="CERT_C-EXP34-a" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1982312066" lang="cpp" violId="e8d4a90a-d67f-33db-8d80-b31e73b2be21" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="4" tool="c++test" lineHash="1178067846" unbViolId="16a957f1-c4b2-33e4-b0c4-2d32f24a88e8" locType="sr" hash="-1257393797" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: point" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="8" rule="CERT_C-MSC19-b" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-799733766" lang="cpp" violId="474fead6-20c5-35e9-85fe-eb6fddc73d22" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="3" locRef="4" tool="c++test" lineHash="1178067846" unbViolId="ebcef247-87f4-370c-9aa7-21e0c4005600" locType="sr" hash="-1257393797" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: point" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="8" rule="CERT_CPP-STR51-a" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1665615379" lang="cpp" violId="5ff59018-2bbe-3762-8bce-8ee4e90f500e" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="4" tool="c++test" lineHash="1178067846" unbViolId="e61ac9eb-61da-39bd-9cea-1ead8fb3e4bd" locType="sr" hash="-1257393797" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: point" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="8" rule="CWE-476-a" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1747021404" lang="cpp" violId="8041edfe-2a7c-39ad-b13d-e27660e69912" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="4" tool="c++test" lineHash="1178067846" unbViolId="1878020b-1746-3cca-b215-5337e05307b3" locType="sr" hash="-1257393797" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: point" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="8" rule="HICPP-5_2_1-c" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-15090486" lang="cpp" violId="5c3bb50c-7f6e-32a3-bd8d-e38f272b3ab4" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="4" tool="c++test" lineHash="1178067846" unbViolId="7fc0c547-cd71-31dc-bded-009f7600e40f" locType="sr" hash="-1257393797" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: point" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="8" rule="MISRA2008-0_3_1_b" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="564686231" lang="cpp" violId="974d5831-c278-3345-b140-7c8c949ad743" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="5" locRef="4" tool="c++test" lineHash="1178067846" unbViolId="fd7f6e6e-512e-3fa3-8d36-47c0f58951f1" locType="sr" hash="-1257393797" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: point" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="8" rule="MISRA2012-DIR-4_1_b" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-2094766674" lang="cpp" violId="3b5e8437-d8f8-3ba0-a2c9-b6b25a6238fa" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="2" locRef="4" tool="c++test" lineHash="1178067846" unbViolId="b80d04f8-14fc-32ce-8702-963ed7e07e83" locType="sr" hash="-1257393797" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: point" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="8" rule="MISRAC2012-DIR_4_1-b" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1597100009" lang="cpp" violId="14355d91-9b5c-370a-9ae2-62934890cbea" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="2" locRef="4" tool="c++test" lineHash="1178067846" unbViolId="aad3496b-630e-3e9f-982e-0f83553235b1" locType="sr" hash="-1257393797" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: point" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="12" sev="4" auth="lyao" locRef="4" rule="JSF-043" lnHash="0" rule.header="Tabs should be avoided" tool="c++test" lineHash="0" unbViolId="1ec131c7-22f1-3f50-a9a3-6576d4111eda" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dac935b1-a178-3a4e-93b7-4e374d2a2c6f" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="12" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="12" sev="5" auth="lyao" locRef="4" rule="FORMAT-01" lnHash="0" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="0" unbViolId="a2214c53-f164-36d2-bc3a-768de4b9f37f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6d504189-b734-3e41-b289-1ff24d8b16cd" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="12" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="12" sev="5" auth="lyao" locRef="4" rule="HICPP-2_1_1-a" lnHash="0" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="0" unbViolId="8f66c7a2-0cda-355d-a94e-de19125cefd1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9933bf43-e659-3729-b45a-02ca6fb752cd" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="12" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="13" sev="4" auth="lyao" locRef="4" rule="JSF-043" lnHash="1599597842" rule.header="Tabs should be avoided" tool="c++test" lineHash="1599597842" unbViolId="8a193bab-df21-3079-9ab5-091b5159a78b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="100f1d4c-66d0-3255-ba5e-8f9fc6401de1" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="13" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="13" sev="5" auth="lyao" locRef="4" rule="FORMAT-01" lnHash="1599597842" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1599597842" unbViolId="61f7e806-2876-3cd3-ae2b-4bb4693c0cee" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21e81602-59f2-3eff-8ed3-cb30e6884e17" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="13" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="13" sev="5" auth="lyao" locRef="4" rule="HICPP-2_1_1-a" lnHash="1599597842" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1599597842" unbViolId="8d5c558b-af81-356c-8a18-84fad0afff72" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4b1989e-27a7-3282-913e-e3e0905d22d2" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="13" goals="0,"/>
    <StdViol msg="'return' statement should be used with parenthesis" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locStartln="13" sev="3" auth="lyao" locRef="4" rule="FORMAT-25_b" lnHash="1599597842" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="1599597842" unbViolId="69c743e1-4f8e-3e9d-961d-de5bd3e0903f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e024dec7-834f-3ba3-9c62-a003fbbf0de9" locEndPos="2" locType="sr" hash="-1257393797" locEndLn="13" goals="0,"/>
    <StdViol msg="Add comment containing the copyright information at the begin of file 'Point.hpp'" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="1" sev="3" auth="lyao" locRef="5" rule="COMMENT-02" lnHash="-573060881" rule.header="Provide copyright information" tool="c++test" lineHash="-573060881" unbViolId="5f8206e4-650f-3a64-b62f-e49d0c36646d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dfe0fe2c-7f76-36a7-9d26-213a960faa98" locEndPos="1" locType="sr" hash="1950870755" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the copyright information at the begin of file 'Point.hpp'" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="1" sev="3" auth="lyao" locRef="5" rule="JSF-133_b" lnHash="-573060881" rule.header="Every source file will contain copyright information" tool="c++test" lineHash="-573060881" unbViolId="46e1ec91-9f84-32bc-8ece-3753c94b8071" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4729a489-23ec-3fb5-8454-7694b14f0a0b" locEndPos="1" locType="sr" hash="1950870755" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the information on the file at the begin of file 'Point.hpp'" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="1" sev="3" auth="lyao" locRef="5" rule="COMMENT-03" lnHash="-573060881" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="-573060881" unbViolId="1d3e5cf9-0149-3e77-aed6-d81e46792ae2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="177709ad-5e8d-31bc-aa21-ba4cf6ceaaa9" locEndPos="1" locType="sr" hash="1950870755" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the information on the file at the begin of file 'Point.hpp'" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="1" sev="3" auth="lyao" locRef="5" rule="JSF-133_a" lnHash="-573060881" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="-573060881" unbViolId="6ac34c4b-5ae7-37fb-a3a0-052041f8d9e2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="218b2b54-1e91-3b6d-bb4d-7066678b19db" locEndPos="1" locType="sr" hash="1950870755" locEndLn="1" goals="0,"/>
    <StdViol msg="The assertion density is lower than two assertions per function" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="1" sev="3" auth="lyao" locRef="5" rule="METRICS-31" lnHash="-573060881" rule.header="The assertion density of the code should average to a minimum of two assertions per function" tool="c++test" lineHash="-573060881" unbViolId="755222f4-23a9-3ce6-ade7-4e80c13218c2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="93570791-b4bb-3146-a34e-9e48c599db1c" locEndPos="1" locType="sr" hash="1950870755" locEndLn="1" goals="0,"/>
    <StdViol msg="The filename 'Point.hpp' should be in lowercase" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="1" sev="3" auth="lyao" locRef="5" rule="NAMING-03" lnHash="-573060881" rule.header="Use lowercase for file names" tool="c++test" lineHash="-573060881" unbViolId="737bef1f-6c28-38df-a9ee-aea80b245e0e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1bfe155e-7fdd-3d92-9478-455201c61e9a" locEndPos="1" locType="sr" hash="1950870755" locEndLn="1" goals="0,"/>
    <StdViol msg="Header file 'Point.hpp' should have the file name extension &quot;.hh&quot;" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="1" sev="3" auth="lyao" locRef="5" rule="NAMING-37" lnHash="-573060881" rule.header="Include files in C++ always have the file name extension '.hh'" tool="c++test" lineHash="-573060881" unbViolId="4e5daf06-f9ae-3df5-9d15-99383afdca1f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27e5e83d-8474-384d-ac91-5ebafdaa3df7" locEndPos="1" locType="sr" hash="1950870755" locEndLn="1" goals="0,"/>
    <StdViol msg="Header file 'Point.hpp' should have the file name extension &quot;.h&quot;" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="1" sev="3" auth="lyao" locRef="5" rule="JSF-053" lnHash="-573060881" rule.header="Header files will always have a file name extension of &quot;.h&quot;" tool="c++test" lineHash="-573060881" unbViolId="bf1dca9f-eac0-36fc-a93b-2fb0fb625e08" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cef1ebc6-d9e8-31cb-ad98-85f8e18fb925" locEndPos="1" locType="sr" hash="1950870755" locEndLn="1" goals="0,"/>
    <StdViol msg="Header file 'Point.hpp' should have the file name extension &quot;.h&quot;" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="1" sev="3" auth="lyao" locRef="5" rule="NAMING-41" lnHash="-573060881" rule.header="Header files will always have a file name extension of '.h'" tool="c++test" lineHash="-573060881" unbViolId="a07ef309-6220-3cc1-aa2d-cfd8f32320e6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9b0dbcb8-4d2d-391f-bafc-d355a7d5ef52" locEndPos="1" locType="sr" hash="1950870755" locEndLn="1" goals="0,"/>
    <StdViol msg="'Point.hpp' filename extension does not adhere to naming conventions" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="1" sev="3" auth="lyao" locRef="5" rule="NAMING-43" lnHash="-573060881" rule.header="File name extension, if present, should be &quot;*.cpp&quot; or &quot;*.h&quot;" tool="c++test" lineHash="-573060881" unbViolId="59ceee3b-07aa-3d6a-9635-910aed0a8907" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c66aaece-c5a6-3f5b-8180-ac5f10f8e2d0" locEndPos="1" locType="sr" hash="1950870755" locEndLn="1" goals="0,"/>
    <StdViol msg="POINT_HPP macro name should appear as first #ifndef or #if preprocessor directive" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="1" sev="3" auth="lyao" locRef="5" rule="PFO-07" lnHash="-573060881" rule.header="Use multiple include guards with pattern based on the header file name" tool="c++test" lineHash="-573060881" unbViolId="4aa6c163-1e03-3e15-b8cc-f1e3305b2867" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4203fcc-ba7f-3fa1-a733-346a2cbd9436" locEndPos="1" locType="sr" hash="1950870755" locEndLn="1" goals="0,"/>
    <StdViol msg="File 'Point.hpp'  should have the &quot;.icc&quot; file name extension" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="1" sev="3" auth="lyao" locRef="5" rule="NAMING-39" lnHash="-573060881" rule.header="Inline definition files always have the file name extension &quot;.icc&quot;" tool="c++test" lineHash="-573060881" unbViolId="309f8e03-5a50-36ed-9bb6-353db21074eb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac890772-30bf-30e6-bf32-b2e2f227cfb8" locEndPos="1" locType="sr" hash="1950870755" locEndLn="1" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="3" auth="lyao" locRef="5" rule="FORMAT-02" lnHash="-2055333085" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-2055333085" unbViolId="793a9ad2-c5a1-3798-a55b-9615ad366bb2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37addb0b-21fa-381e-8dd0-dbb126047dfe" locEndPos="1" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="3" auth="lyao" locRef="5" rule="FORMAT-34" lnHash="-2055333085" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="-2055333085" unbViolId="c8bc5fde-7845-3c0a-b65d-dc9ea7891a32" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ffa768e-1a37-39f3-bc23-66e46e2530c6" locEndPos="1" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="The identifier 'Point' differs only by case from identifier 'point' declared in file 'NullPointer.cpp'" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="3" auth="lyao" locRef="5" rule="NAMING-45" lnHash="-2055333085" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-2055333085" unbViolId="a9c73d8a-8545-386c-96e3-80ed961e87f4" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8cb5b810-3585-3518-8060-0ea587c2bc1e" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="The identifier 'Point' differs only by case from identifier 'point' declared in file 'NullPointer.cpp'" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="3" auth="lyao" locRef="5" rule="JSF-048" lnHash="-2055333085" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-2055333085" unbViolId="f0b2a06a-146a-3250-852c-d63069b52318" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a589317f-d633-363d-a439-1f68a55831c0" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Do not declare the 'Point' type in the global namespace" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="4" auth="lyao" locRef="5" rule="JSF-098" lnHash="-2055333085" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-2055333085" unbViolId="9675bbb7-a67c-3a78-b61b-fe0a1ffb8042" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c6d2ea1-2850-3eab-bab9-34abfed5f834" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Do not declare the 'Point' type in the global namespace" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-M7_3_1-a" lnHash="-2055333085" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-2055333085" unbViolId="7d63782d-623d-3c37-a49e-ee52079f13e8" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c1e225d-efcc-3900-8265-9f7f6286770e" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Do not declare the 'Point' type in the global namespace" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="3" auth="lyao" locRef="5" rule="CODSTA-CPP-36" lnHash="-2055333085" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-2055333085" unbViolId="3d074216-0381-3aee-ae88-0679804666de" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e7ccc3e-1c79-37d5-affb-74dbcba4ab71" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Do not declare the 'Point' type in the global namespace" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="2" auth="lyao" locRef="5" rule="MISRA2008-7_3_1" lnHash="-2055333085" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-2055333085" unbViolId="751a0022-ac58-3e7b-a7cd-e9dd8b9f46bc" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2eefe6a-66b7-3e16-907f-710ee9633de5" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="The declaration of the 'Point' type should be preceded by a comment that contains the '@brief' tag" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="3" auth="lyao" locRef="5" rule="COMMENT-14" lnHash="-2055333085" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-2055333085" unbViolId="96bc9509-186d-306d-8048-7e45eac31c58" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="064d39a2-4eb2-3733-820c-4b45dd79ad4c" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="The declaration of the 'Point' type should be preceded by a comment that contains the '@brief' tag" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-A2_7_3-a" lnHash="-2055333085" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-2055333085" unbViolId="cd66ae82-7c74-38e9-9dc1-bd601ead1aa9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4484bc43-7cdc-364a-a835-24b6c085425c" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Public section must be before protected and private sections" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="3" auth="lyao" locRef="5" rule="JSF-057_a" lnHash="-2055333085" rule.header="The public section of a class will be declared before the protected section and before the private section" tool="c++test" lineHash="-2055333085" unbViolId="a241a10a-472f-3486-9fe8-a3fdf9194421" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91426da5-8c0d-3aff-8a0c-0b6abc8b0dec" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Public section must be before protected and private sections" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="3" auth="lyao" locRef="5" rule="CODSTA-CPP-46" lnHash="-2055333085" rule.header="Order of scopes in class: public before all others" tool="c++test" lineHash="-2055333085" unbViolId="10983b64-8b24-3b3f-b607-1fed790933c1" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff94974e-a5fd-30ca-92d5-f2656092454c" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Class 'Point' should be final" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="4" auth="lyao" locRef="5" rule="AUTOSAR-A12_4_2-a" lnHash="-2055333085" rule.header="If a public destructor of a class is non-virtual, then the class should be declared final" tool="c++test" lineHash="-2055333085" unbViolId="8bbf08f1-29f2-38f8-8913-1690382db5cd" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b26218a2-d25e-334b-8df4-76ce4c9dc1f2" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Class 'Point' should be final" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="3" auth="lyao" locRef="5" rule="CODSTA-MCPP-23" lnHash="-2055333085" rule.header="If a public destructor of a class is non-virtual, then the class should be declared final" tool="c++test" lineHash="-2055333085" unbViolId="ab8a169b-00f7-38e0-b89c-86b210fd2683" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6617c628-b80b-3f84-8573-914cfe462dab" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Explicitly declare default constructor in 'Point'" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="3" auth="lyao" locRef="5" rule="HICPP-12_5_1-a" lnHash="-2055333085" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-2055333085" unbViolId="63c976b3-f9d4-315b-b776-fe2633d7dc65" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36ffe38e-c23e-305f-a39e-4931b3b43a4d" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Explicitly declare destructor in 'Point'" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="3" auth="lyao" locRef="5" rule="HICPP-12_5_1-a" lnHash="-2055333085" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-2055333085" unbViolId="e2958401-93d6-3299-b787-4bec2de2ef89" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b25dfa9-7fce-3777-a5ac-7cd0e019caf5" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Explicitly declare copy assignment operator in 'Point'" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="3" auth="lyao" locRef="5" rule="HICPP-12_5_1-a" lnHash="-2055333085" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-2055333085" unbViolId="592f8d8c-0b36-3033-b40f-fbdcafac69eb" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e171708-0e1b-35ab-bcd1-7067c2d37ca0" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Explicitly declare move assignment operator in 'Point'" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="3" auth="lyao" locRef="5" rule="HICPP-12_5_1-a" lnHash="-2055333085" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-2055333085" unbViolId="17439364-ae03-3a7f-86e4-6ba676fa97a3" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a82cdd96-e817-31cf-a8c0-6f95e7e0a44d" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Explicitly declare copy constructor in 'Point'" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="3" auth="lyao" locRef="5" rule="HICPP-12_5_1-a" lnHash="-2055333085" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-2055333085" unbViolId="e752eda4-423d-36c1-811a-b4ab301f10b4" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31ddd379-e3f9-3e73-8f77-62ae2f7c240c" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Explicitly declare move constructor in 'Point'" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="3" auth="lyao" locRef="5" rule="HICPP-12_5_1-a" lnHash="-2055333085" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-2055333085" unbViolId="b77befc1-2864-3e88-8a5a-ffd2dd05b4f1" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9be79b08-9818-3d77-bbdd-b9186b990046" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Class 'Point' missing assignment operator or special comment" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="3" auth="lyao" locRef="5" rule="MRM-04" lnHash="-2055333085" rule.header="All classes should contain the assignment operator or appropriate comment" tool="c++test" lineHash="-2055333085" unbViolId="360d0037-7eeb-3323-913e-c38a837001da" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd1c963b-2d5d-3729-8199-1f34d44f44e7" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Class 'Point' missing copy constructor or special comment" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="3" auth="lyao" locRef="5" rule="MRM-05" lnHash="-2055333085" rule.header="All classes should contain the copy constructor or appropriate comment" tool="c++test" lineHash="-2055333085" unbViolId="d315d818-c29f-350a-9d1d-34e0cfa09f4a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f761aff-bdce-3054-859e-16411d58ae96" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Class 'Point' missing assignment operator or special comment" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="3" auth="lyao" locRef="5" rule="MRM-47" lnHash="-2055333085" rule.header="Classes containing at least one non-static member variable should declare the assignment operator or contain appropriate comment" tool="c++test" lineHash="-2055333085" unbViolId="6ea190aa-4df1-3928-9b09-add59fbb6a3d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0648c823-77a3-3199-a493-78a918a09d9c" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Class 'Point' missing copy constructor or special comment" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="3" auth="lyao" locRef="5" rule="MRM-48" lnHash="-2055333085" rule.header="Classes containing at least one non-static member variable should declare the copy constructor or contain appropriate comment" tool="c++test" lineHash="-2055333085" unbViolId="f7a12b7b-31c0-302b-9381-66f5f96fa040" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="39edb0b0-94cc-3ebd-a240-31786bfd5060" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="The 'Point' identifier should have the 'C' prefix" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="3" auth="lyao" locRef="5" rule="NAMING-HN-19" lnHash="-2055333085" rule.header="Hungarian notation for class declaration" tool="c++test" lineHash="-2055333085" unbViolId="b12a140c-84b9-382a-90d0-b93ad85e29f4" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff796453-6a3e-3f15-a64b-f4ff6728750a" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="The type name 'Point' is not a unique identifier in the testing scope" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="2" auth="lyao" locRef="5" rule="MISRA2012-RULE-5_7_a" lnHash="-2055333085" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="-2055333085" unbViolId="0ca3e4a8-9f0a-3a8d-bc13-78f56a9a1341" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="c85e57b0-bd82-30c9-9796-b9ddd886f153" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="The type name 'Point' is not a unique identifier in the testing scope" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="2" auth="lyao" locRef="5" rule="MISRAC2012-RULE_5_7-a" lnHash="-2055333085" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="-2055333085" unbViolId="08c6fc8c-78d9-32fc-b396-a97f25f6c2a1" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="bc48e4b9-d32d-3e7a-aca1-3823b76e1d06" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="The identifier 'Point' differs only by case from identifier 'POINT' declared in file 'windef.h'" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="3" auth="lyao" locRef="5" rule="NAMING-45" lnHash="-2055333085" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-2055333085" unbViolId="0bd057fe-f1fb-3812-84d2-ad9825db48c4" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="265facad-487c-3c42-a880-97737266b8ad" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="The identifier 'Point' differs only by case from identifier 'POINT' declared in file 'windef.h'" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="3" auth="lyao" locRef="5" rule="JSF-048" lnHash="-2055333085" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-2055333085" unbViolId="fc21ca7f-87e5-37cb-89c7-b31d27a65ae3" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3710f638-46fa-35cb-bdbc-9254f941ba7a" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="The identifier 'Point' differs only by case from identifier 'point' declared in file 'Shapes.hpp'" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="3" auth="lyao" locRef="5" rule="NAMING-45" lnHash="-2055333085" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-2055333085" unbViolId="090083e5-f3dc-3d25-9328-6038696c14c9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fef09334-5cab-343b-9c18-fae1abfcf238" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="The identifier 'Point' differs only by case from identifier 'point' declared in file 'Shapes.hpp'" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="3" auth="lyao" locRef="5" rule="JSF-048" lnHash="-2055333085" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-2055333085" unbViolId="90ba9b96-b6db-37fa-8b87-371017ace130" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a2166821-e78c-37e5-b08f-0c343d25b00a" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="The identifier 'Point' differs only by case from identifier 'point' declared in file 'Point.hpp'" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="3" auth="lyao" locRef="5" rule="NAMING-45" lnHash="-2055333085" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-2055333085" unbViolId="19e4aeaf-fdde-3ffe-ba63-56ec3102eb6f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f1402d1a-da9f-3cad-a442-3e9855197c1c" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="The identifier 'Point' differs only by case from identifier 'point' declared in file 'Point.hpp'" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="4" sev="3" auth="lyao" locRef="5" rule="JSF-048" lnHash="-2055333085" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-2055333085" unbViolId="39a59443-9811-3549-bad3-f34a7308d470" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8988fbd-203a-33d4-9afa-7abe1d0f6a19" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="4" auth="lyao" locRef="5" rule="MISRA2008-3_9_2" lnHash="-487498237" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-487498237" unbViolId="e8187d81-7f3f-3152-bae9-3ba45b3c8bbc" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e546017e-9f34-3c77-956a-edcacb92027a" locEndPos="5" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="MISRA-013" lnHash="-487498237" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-487498237" unbViolId="6472058d-6040-3bd9-b5c5-689fc732d2ac" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="30b19d6e-806f-3a5b-a3cd-7ef2f72ec27c" locEndPos="5" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="CODSTA-223" lnHash="-487498237" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-487498237" unbViolId="ede79d15-d9c0-38b1-8b8a-0f6923f51a2e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3066ab0-b92d-39c4-a06a-916586c61405" locEndPos="5" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-A3_9_1-b" lnHash="-487498237" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-487498237" unbViolId="e9059f56-8533-38a3-80be-1470e4bf2494" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e7d9cdd2-96ea-32b6-8beb-6a8e38f46f3c" locEndPos="5" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="HICPP-7_1_6-b" lnHash="-487498237" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="-487498237" unbViolId="c13e3958-a979-3f48-82a0-b19d27a6daec" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cc3ccc7f-364f-32d8-9de4-fdfb4ad6bbcb" locEndPos="5" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="4" auth="lyao" locRef="5" rule="MISRAC2012-DIR_4_6-b" lnHash="-487498237" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-487498237" unbViolId="1033ff3a-c9fc-318c-9972-98f7bdf86209" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74683633-25d6-3fa1-9306-4d205d3762da" locEndPos="5" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="2" auth="lyao" locRef="5" rule="JSF-209_b" lnHash="-487498237" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-487498237" unbViolId="872c0da1-c640-33cd-9ed5-8f0ff419dde0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52c516fc-cd4c-3325-b985-61a2084418ff" locEndPos="5" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="MISRA2004-6_3_b" lnHash="-487498237" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-487498237" unbViolId="43f51a2d-bec4-3001-a121-f70755602dc2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b0046b9-c5c8-38a2-805a-ce6d6c42cd55" locEndPos="5" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="4" auth="lyao" locRef="5" rule="MISRA2012-DIR-4_6_b" lnHash="-487498237" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-487498237" unbViolId="d6425426-54a6-3ade-9cd7-4a7bd8910f20" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76211a45-2867-3604-912d-9fce7f127e7f" locEndPos="5" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="HICPP-3_5_1-b" lnHash="-487498237" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-487498237" unbViolId="18e9d2e5-bb64-3f2e-9805-d3edc6a6fa55" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8130a78-7231-3483-abb2-e51776e28b69" locEndPos="5" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The '_x' member variable should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="COMMENT-14" lnHash="-487498237" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-487498237" unbViolId="99e21cd9-b0e8-325e-80c7-49c463263278" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68034f64-dcd8-3133-a125-4af7efb17915" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The '_x' member variable should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-A2_7_3-a" lnHash="-487498237" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-487498237" unbViolId="a7676f92-f9b7-333e-96ee-d00791a8808a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eebcaff9-cd1c-3264-b9d9-a78a7dd15e57" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="'_x' shall be declared as unsigned int or signed int" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="PORT-13" lnHash="-487498237" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-487498237" unbViolId="347a9a96-2aa3-3be8-a2b3-46f86fd9bba3" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5b5ce0d-4070-3d11-8030-f214bd47f792" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Member variable '_x' shall begin with a lowercase letter" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="NAMING-07" lnHash="-487498237" rule.header="Begin member variable names with a lowercase letters" tool="c++test" lineHash="-487498237" unbViolId="305d8ea9-6664-3113-8d4b-0f3944cf6c2a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cdca3a15-5bde-3fd1-90f6-9198d5e01046" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Naming convention not followed: _x" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="NAMING-14" lnHash="-487498237" rule.header="Begin class data member names with 'its'" tool="c++test" lineHash="-487498237" unbViolId="79e652c2-d5ca-3604-90ee-ff199880de35" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9d023ce-b5f0-33be-ba1e-77add45eff92" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Naming convention not followed: _x" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="NAMING-19" lnHash="-487498237" rule.header="Begin all integer type variable with 'i'" tool="c++test" lineHash="-487498237" unbViolId="7f09afab-4ab7-376f-a38a-70be9e87c93c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8d2ba1b-7335-36a8-8165-b5098dc1a1a9" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Using underscore at the beginning of the name '_x' is not allowed" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="NAMING-33" lnHash="-487498237" rule.header="Do not use identifiers which begin with one or two underscores (`_' or `__')" tool="c++test" lineHash="-487498237" unbViolId="c141132e-c85a-331e-b7d5-b623634439d4" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a53cf175-b922-3dff-976e-4fa93fd6fc68" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Using underscore at the beginning of the name '_x' is not allowed" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="JSF-047" lnHash="-487498237" rule.header="Identifiers will not begin with the underscore character &quot;_&quot;" tool="c++test" lineHash="-487498237" unbViolId="e188b2f6-07ca-3fab-ab7a-cc2280f915f3" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="28323b96-fdd0-3c6b-92a1-bd38d73bbac2" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The '_x' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="NAMING-HN-22" lnHash="-487498237" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-487498237" unbViolId="6173ee3a-43ba-3436-bafc-1ab267b8ba88" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4076d7da-4976-3424-ab5a-6d8ac8130dd5" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The '_x' identifier should have the 'm_' prefix" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="NAMING-HN-29" lnHash="-487498237" rule.header="Hungarian notation for member variables" tool="c++test" lineHash="-487498237" unbViolId="7d939319-ca93-387f-a157-09094e566ea3" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="11e417d1-bae3-34a7-80f6-b6587921f0b7" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The '_x' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="NAMING-HN-30" lnHash="-487498237" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-487498237" unbViolId="ee9ab9af-838a-3bca-b5a7-19dcb8e59ffe" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8bebe20a-f949-3c97-afe0-bf80cce6c369" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The '_x' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="NAMING-HN-43" lnHash="-487498237" rule.header="Hungarian notation for word types" tool="c++test" lineHash="-487498237" unbViolId="3618e9e3-58c1-308b-8565-48986f81d47a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca1dfceb-8207-3003-b24a-e5bf2477793b" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The identifier '_x' differs only by presence/absence of the underscore character from identifier 'x' declared in file 'Point.hpp'" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="NAMING-45" lnHash="-487498237" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-487498237" unbViolId="bbc2c4dd-131b-3e66-ad0e-5b8923b721ef" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18030b1b-6643-39d8-8231-77d4532b7e92" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The identifier '_x' differs only by presence/absence of the underscore character from identifier 'x' declared in file 'Point.hpp'" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="JSF-048" lnHash="-487498237" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-487498237" unbViolId="ddfa9666-6ed9-38f5-83d6-db97a7e36c0d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="32f66acb-22a2-3add-9c20-a211f52c9244" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The identifier '_y' differs only by presence/absence of the underscore character from identifier 'y' declared in file 'Point.hpp'" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="NAMING-45" lnHash="-487498237" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-487498237" unbViolId="ec14bf8a-3033-3d68-a2b0-68d7914ff946" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7cc4f542-2333-3b9d-998a-0ec541496a82" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The identifier '_y' differs only by presence/absence of the underscore character from identifier 'y' declared in file 'Point.hpp'" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="JSF-048" lnHash="-487498237" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-487498237" unbViolId="b93ace15-b8f4-34d7-8bbb-9f1cbca44396" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21890f2e-d038-32c3-b04e-3283e620b7e6" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The '_y' member variable should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="COMMENT-14" lnHash="-487498237" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-487498237" unbViolId="3dea4560-e4b5-3a4d-9b3d-2dfd521b7aae" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06351829-298b-3fb6-a45f-0def7e52611f" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The '_y' member variable should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-A2_7_3-a" lnHash="-487498237" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-487498237" unbViolId="8648dcd4-df25-3d25-988b-edb248f5f890" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22dd2d92-d1b2-30f0-92a2-e593174e7fe7" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Declare variable '_y' in a separate line" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="2" auth="lyao" locRef="5" rule="JSF-152" lnHash="-487498237" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-487498237" unbViolId="9941703a-3133-38c6-87d9-10c0290acc44" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="369a5049-1458-300c-9154-35da2a64282f" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Declare variable '_y' in a separate line" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-A7_1_7-b" lnHash="-487498237" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-487498237" unbViolId="6fe0cd97-c30a-3069-acab-39c8f9cbe2ad" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5cb17ab6-98eb-3b95-be89-440b6972e0e7" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Declare variable '_y' in a separate line" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="HICPP-7_1_1-a" lnHash="-487498237" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-487498237" unbViolId="21bc867c-5156-3d93-9bdf-8e682e4fc18f" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95e3473c-4bcb-39be-8d2b-263ec80727e9" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Declare variable '_y' in a separate line" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="FORMAT-29" lnHash="-487498237" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-487498237" unbViolId="1b8e7754-5d95-3a7e-abe3-97ad28db05ea" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21c4630a-06ab-3042-82bd-8b2fe6b3f1b1" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Declare variable '_y' in a separate declaration statement" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-A7_1_7-c" lnHash="-487498237" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-487498237" unbViolId="0b1a93aa-fb0e-3410-b330-6871cbbd82f1" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f79a3c6-6587-3b18-a139-3412fb47ac39" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Declare variable '_y' in a separate declaration statement" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="FORMAT-33" lnHash="-487498237" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-487498237" unbViolId="737071c4-5659-3e90-9f30-f5802b3cd354" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a841dc1-3efa-3b9e-b137-9271bb8d8911" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Declare variable '_y' in a separate declaration statement" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="2" auth="lyao" locRef="5" rule="MISRA2008-8_0_1" lnHash="-487498237" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-487498237" unbViolId="8c3b8374-9e2e-3315-97cf-1322a60e944f" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4753c709-3981-3897-93d5-c5eeaab67ae3" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Declare variable '_y' in a separate declaration statement" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="HICPP-7_1_1-b" lnHash="-487498237" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-487498237" unbViolId="f98cff5a-2b48-3685-aafe-aa6540bd4cdc" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7eb79e26-03ae-32a7-90a0-e68c6c8b32bb" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Declare variable '_y' in a separate declaration statement" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-M8_0_1-a" lnHash="-487498237" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-487498237" unbViolId="ce1e9e76-216e-390c-acd0-ba07259f9727" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e276a8fa-d32a-3d49-b4d6-5a9c4ecfbaae" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Declare variable '_y' in a separate declaration statement" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="CERT_C-DCL04-a" lnHash="-487498237" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-487498237" unbViolId="7b974e77-06f3-3970-8ed2-3bd00e1cf114" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d232dd7-0761-34a7-a543-7b1121b2d9e7" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="'_y' shall be declared as unsigned int or signed int" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="PORT-13" lnHash="-487498237" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-487498237" unbViolId="0429b55c-795e-307f-a197-866583940714" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="969453d3-1868-373f-ae02-ff3d35c75251" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Member variable '_y' shall begin with a lowercase letter" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="NAMING-07" lnHash="-487498237" rule.header="Begin member variable names with a lowercase letters" tool="c++test" lineHash="-487498237" unbViolId="ce5aebb4-a082-3cf2-8ba9-05284f9a224a" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="749726c9-4e5c-37a9-b04d-17b40d149b51" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Naming convention not followed: _y" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="NAMING-14" lnHash="-487498237" rule.header="Begin class data member names with 'its'" tool="c++test" lineHash="-487498237" unbViolId="008de985-da9f-3e25-ba87-b3da9a09b639" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9e5a73c-e67d-3118-8e32-92ad1ce1a446" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Naming convention not followed: _y" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="NAMING-19" lnHash="-487498237" rule.header="Begin all integer type variable with 'i'" tool="c++test" lineHash="-487498237" unbViolId="54ebff45-56d6-3df0-b7e0-93e6f60e700c" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="166883a9-81f2-3449-bb51-ce24f14f49b5" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Using underscore at the beginning of the name '_y' is not allowed" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="NAMING-33" lnHash="-487498237" rule.header="Do not use identifiers which begin with one or two underscores (`_' or `__')" tool="c++test" lineHash="-487498237" unbViolId="4efeff23-36ab-358d-919c-cacbcb5c3c68" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9b890832-cf8f-3ce5-951d-9e6ef995f5f8" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Using underscore at the beginning of the name '_y' is not allowed" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="JSF-047" lnHash="-487498237" rule.header="Identifiers will not begin with the underscore character &quot;_&quot;" tool="c++test" lineHash="-487498237" unbViolId="b458624c-0203-3946-b788-3743f54485b4" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="57c95f8e-6598-3823-ac08-0d3296053951" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The '_y' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="NAMING-HN-22" lnHash="-487498237" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-487498237" unbViolId="c00c9b68-caac-3285-84fd-f095c77ce500" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6dbf94c7-f6ae-3ac3-9267-d77a12c3e7ed" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The '_y' identifier should have the 'm_' prefix" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="NAMING-HN-29" lnHash="-487498237" rule.header="Hungarian notation for member variables" tool="c++test" lineHash="-487498237" unbViolId="0d7db531-56e7-33a7-aa06-f9b6be1660db" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0c35ddd2-25dc-347d-98a5-23e8d675d0d4" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The '_y' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="NAMING-HN-30" lnHash="-487498237" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-487498237" unbViolId="21f74801-e8ea-38f2-9a56-969b3ed6d43e" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f04eb9e2-a481-3790-b382-56912cf6a915" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The '_y' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="5" sev="3" auth="lyao" locRef="5" rule="NAMING-HN-43" lnHash="-487498237" rule.header="Hungarian notation for word types" tool="c++test" lineHash="-487498237" unbViolId="4640183a-5ec3-3c7e-8e8d-4a73232ab31d" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bfe2d7be-811c-374f-b3f4-4341be925502" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="JSF-061" lnHash="-33300074" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-33300074" unbViolId="09b3ed89-b496-3f21-aba4-c13e30c3db25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="429649fe-2404-3a69-863c-b94530cac38f" locEndPos="1" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="FORMAT-42" lnHash="-33300074" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-33300074" unbViolId="3645d5a4-89f6-3f59-bfe6-4658ea59c3be" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="313d7659-0135-37a5-9cd1-271d156e7901" locEndPos="1" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="JSF-060_a" lnHash="-33300074" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-33300074" unbViolId="971c01af-85b2-38ad-8d7e-efd038f11a31" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d8be3cd-3b1f-3835-b272-4d9760995e6a" locEndPos="1" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="FORMAT-43" lnHash="-33300074" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-33300074" unbViolId="20e96992-1ce9-3548-b98f-00655013560d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="111522d2-0c0f-395c-b3a2-002941011b9d" locEndPos="1" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="JSF-060_b" lnHash="-33300074" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-33300074" unbViolId="7c126a6f-0845-3e53-b86a-b46e6e687498" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4a05095-f818-37ab-8e1b-96376f010222" locEndPos="1" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="METRICS-19" lnHash="-33300074" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="-33300074" unbViolId="a7753de6-d864-34a1-912e-cbf18b28a498" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1fb47e14-9956-387a-b8ff-e7ca24cbe492" locEndPos="1" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The definition of the 'Point' function is not preceded by a comment" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="COMMENT-04" lnHash="-33300074" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-33300074" unbViolId="596b3a9d-ed26-3f16-942e-42cc883ce0d3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6fc74e87-37ba-3719-8069-dd77c76e0d7f" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The definition of the 'Point' function is not preceded by a comment" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="4" auth="lyao" locRef="5" rule="JSF-134" lnHash="-33300074" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-33300074" unbViolId="ab9c1236-f251-3969-8460-ca5687834198" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa552209-0168-3d9e-9a94-26ac9507de10" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The identifier 'Point' differs only by case from identifier 'POINT' declared in file 'windef.h'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="NAMING-45" lnHash="-33300074" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-33300074" unbViolId="ef4ed45c-68fe-3fba-8227-8970c29775ce" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42ef1d85-9674-3312-b141-79504bd5c7bd" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The identifier 'Point' differs only by case from identifier 'POINT' declared in file 'windef.h'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="JSF-048" lnHash="-33300074" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-33300074" unbViolId="8b395409-611f-3f47-86d7-149ad30cafd9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d954cef-46e6-35a4-8d05-c2fc832bf452" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The identifier 'Point' differs only by case from identifier 'point' declared in file 'Point.hpp'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="NAMING-45" lnHash="-33300074" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-33300074" unbViolId="53195aec-9a21-3935-a7bc-cbcedd78f0e5" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="19b9228a-babf-306e-ad47-469f50fcdb8f" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The identifier 'Point' differs only by case from identifier 'point' declared in file 'Point.hpp'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="JSF-048" lnHash="-33300074" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-33300074" unbViolId="240e00f7-5c04-3d92-b82c-7f0cce18197c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cba96474-7211-396f-88de-f309300e3467" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'Point' function should be preceded by a comment that contains the '@brief' tag" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="COMMENT-14" lnHash="-33300074" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-33300074" unbViolId="0aa01a07-5542-35a2-9c4e-9a084d58aab7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95d936bd-9c0a-3925-ada7-c0086d272420" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'Point' function should be preceded by a comment that contains the '@brief' tag" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-A2_7_3-a" lnHash="-33300074" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-33300074" unbViolId="2f7707ab-583d-32a3-a077-2b7d4a90d6a8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e20e39bc-5d1b-33bd-a5ba-bdb911238d1c" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'x' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-A2_7_3-b" lnHash="-33300074" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-33300074" unbViolId="866b0940-097c-31ff-a24f-b1a78dd18516" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0bd2b905-b583-3a39-a56a-d3b0aec6d4ef" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'x' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="COMMENT-14_b" lnHash="-33300074" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-33300074" unbViolId="56a8946d-4250-39d9-a760-8adc0416e503" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="067ca9d1-99e7-36fe-b2df-ffa6af93bdce" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'y' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-A2_7_3-b" lnHash="-33300074" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-33300074" unbViolId="d9c8cb3c-e2a2-35c0-8cec-5e1ae8311692" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12a5f806-a673-34ca-a266-4f212b99e37c" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'y' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="COMMENT-14_b" lnHash="-33300074" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-33300074" unbViolId="2a8f45e7-bfc3-38eb-bb6f-0cc88eefd3cf" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83ecc92c-9ec9-338c-b84a-f5eb8f35c57c" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Class 'Point' defines an inline constructor" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="OPT-17" lnHash="-33300074" rule.header="Avoid inline constructors and destructors" tool="c++test" lineHash="-33300074" unbViolId="6cda4bab-8387-3418-99a3-8e5dfbfd0257" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="569e585d-9e9d-34d0-983b-0134dcf94cb6" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'Point' function should be declared 'noexcept'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-A15_4_4-a" lnHash="-33300074" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-33300074" unbViolId="90fefb40-fb83-317f-be5e-a05a64bb1a06" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="929d9bed-777c-350a-b978-5b764593acb7" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'Point' function should be declared 'noexcept'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="CODSTA-MCPP-09" lnHash="-33300074" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-33300074" unbViolId="3a25c9c6-8f31-3344-ac3b-4502f0dc8b89" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5590447f-3cf3-36a5-a3c4-424c1f106afb" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Function 'Point' has Cyclomatic Complexity value: 1" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="5" auth="lyao" locRef="5" rule="METRICS-29" lnHash="-33300074" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-33300074" unbViolId="ff9067e6-5925-38f6-881c-8a3144dec2a4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5343f2e2-3aff-370c-bd37-3ab53f3be011" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Function 'Point' has Essential Complexity value: 1" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="5" auth="lyao" locRef="5" rule="METRICS-33" lnHash="-33300074" rule.header="Report Essential Complexity" tool="c++test" lineHash="-33300074" unbViolId="20a1f99c-4415-3be6-9a60-f96fb2bb85c8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16556a81-34d6-370a-b6c7-2dee2416fc38" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'Point' identifier is the same as the name of a type defined in the testing scope" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="2" auth="lyao" locRef="5" rule="MISRA2012-RULE-5_7_a" lnHash="-33300074" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="-33300074" unbViolId="8046f216-92e7-3593-8599-dd360d82058a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="8eb52136-b1ed-36ac-b369-fbcdb44e653a" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'Point' identifier is the same as the name of a type defined in the testing scope" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="2" auth="lyao" locRef="5" rule="MISRAC2012-RULE_5_7-a" lnHash="-33300074" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="-33300074" unbViolId="e53de0f8-cd04-32ba-821c-b37da9952240" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="0ccdce27-bba0-3941-b2e3-866409166fd9" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="4" auth="lyao" locRef="5" rule="MISRA2008-3_9_2" lnHash="-33300074" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-33300074" unbViolId="7e3959bc-87db-303c-8e4f-bb11a80e14d0" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad904006-4b5a-3a71-9dd2-e8092d2c9291" locEndPos="11" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="MISRA-013" lnHash="-33300074" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-33300074" unbViolId="c0c1288c-f556-3d94-8900-e5c44f22e963" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7daa4761-e88f-3119-af18-a3bdb1934ec7" locEndPos="11" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="CODSTA-223" lnHash="-33300074" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-33300074" unbViolId="07c0b116-7ca6-335c-adf3-57705d893dfd" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca61de33-9191-3adc-867b-9f2fc7aed5b2" locEndPos="11" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-A3_9_1-b" lnHash="-33300074" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-33300074" unbViolId="94f39e86-ec44-3680-b804-d0610f11a7a9" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fba59461-e027-3b15-aca9-3a7f1076e4ce" locEndPos="11" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="HICPP-7_1_6-b" lnHash="-33300074" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="-33300074" unbViolId="f33de2b8-aa7a-30be-99c8-520b0fcca2b2" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26d707a4-e9e3-37af-9314-4a26bf8379f5" locEndPos="11" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="4" auth="lyao" locRef="5" rule="MISRAC2012-DIR_4_6-b" lnHash="-33300074" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-33300074" unbViolId="9ac13180-72fc-3356-b962-bd05fbc46471" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5f767fe-2ff4-3780-aa3f-600dcbfd0805" locEndPos="11" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="2" auth="lyao" locRef="5" rule="JSF-209_b" lnHash="-33300074" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-33300074" unbViolId="81df56ba-34bd-371b-8de1-296e5f495d03" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0c6800b6-6076-394f-b4f8-be231a96355d" locEndPos="11" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="MISRA2004-6_3_b" lnHash="-33300074" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-33300074" unbViolId="b4bf35dc-cfb5-3d91-883c-2f043506e4c3" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2567815-0f69-3cf3-9dff-9b3390be5ae4" locEndPos="11" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="4" auth="lyao" locRef="5" rule="MISRA2012-DIR-4_6_b" lnHash="-33300074" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-33300074" unbViolId="f6e39f96-c2fe-32c7-8d32-7f0fc37b5da3" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c63f19bb-7057-3cac-b0a7-b9963d2c14aa" locEndPos="11" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="HICPP-3_5_1-b" lnHash="-33300074" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-33300074" unbViolId="ae8a427d-d5a4-3631-82d0-21922cf31014" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd2df417-1f85-3335-8aa2-fb174ef87670" locEndPos="11" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Identifier name: 'x' differs only by presence/absence of the underscore character from identifier name: '_x' declared in class" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="2" auth="lyao" locRef="5" rule="MISRA2008-2_10_1" lnHash="-33300074" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-33300074" unbViolId="62a2d97c-d675-3482-a116-a96555fd20a4" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="acbb2af2-d2bc-356f-8e84-5ba4de6b3dc5" locEndPos="15" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Identifier name: 'x' differs only by presence/absence of the underscore character from identifier name: '_x' declared in class" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="HICPP-2_4_1-a" lnHash="-33300074" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-33300074" unbViolId="b1ca2670-8c19-3c09-a506-4928fe2c6117" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ea024dba-8448-3013-9f73-c381eda1e4dd" locEndPos="15" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Identifier name: 'x' differs only by presence/absence of the underscore character from identifier name: '_x' declared in class" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-M2_10_1-a" lnHash="-33300074" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-33300074" unbViolId="93014195-5538-3ced-a2cd-8ee713252590" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ba456e3-65d1-3408-8013-166aa4959f42" locEndPos="15" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Identifier name: 'x' differs only by presence/absence of the underscore character from identifier name: '_x' declared in class" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="NAMING-47" lnHash="-33300074" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-33300074" unbViolId="ca7592ad-b82b-34d6-8d60-8681b57c83b9" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="def07cf2-2b08-37a7-a256-f9b869043c0c" locEndPos="15" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="'x' shall be declared as unsigned int or signed int" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="PORT-13" lnHash="-33300074" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-33300074" unbViolId="22ced47e-cbcb-35da-b436-23bd8de14448" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5c8a8832-43b1-3f95-8f30-84068001c2cc" locEndPos="15" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The identifier 'x' differs only by presence/absence of the underscore character from identifier '_x' declared in file 'Point.hpp'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="NAMING-45" lnHash="-33300074" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-33300074" unbViolId="6835de0a-2b18-38fa-9148-0d94121693a0" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2bb54863-9467-31ea-9257-048feff88499" locEndPos="15" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The identifier 'x' differs only by presence/absence of the underscore character from identifier '_x' declared in file 'Point.hpp'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="JSF-048" lnHash="-33300074" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-33300074" unbViolId="a5242412-b5da-346b-afa9-1ee780bd69ba" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71e0e85b-3945-347d-8e00-145308a77762" locEndPos="15" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="4" auth="lyao" locRef="5" rule="MISRA2008-3_9_2" lnHash="-33300074" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-33300074" unbViolId="665197c7-bada-3e70-84b3-9f3d3906f4a8" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f6754d8f-e2ad-35f0-b0e2-7da3083b6239" locEndPos="18" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="MISRA-013" lnHash="-33300074" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-33300074" unbViolId="c67396c6-0452-372e-b6e6-789f0a545414" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e5b2796-d3a3-3fe8-af8a-937ea0830eb7" locEndPos="18" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="CODSTA-223" lnHash="-33300074" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-33300074" unbViolId="7575f592-7bc1-3868-b1b1-fd4a16fb4817" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0fe19c85-df4e-326d-baa8-04dbec41620e" locEndPos="18" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-A3_9_1-b" lnHash="-33300074" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-33300074" unbViolId="e337c1b2-7f7e-3d77-9ffc-86a8b1838e33" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3998b7ad-b46d-3812-bf73-9e16a555c05c" locEndPos="18" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="HICPP-7_1_6-b" lnHash="-33300074" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="-33300074" unbViolId="4eb4bba8-7bb6-3d3b-a0c4-18fbdb30ca22" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a671ad6-4317-356c-b063-f61c955ecb0e" locEndPos="18" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="4" auth="lyao" locRef="5" rule="MISRAC2012-DIR_4_6-b" lnHash="-33300074" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-33300074" unbViolId="46be5260-edb9-3474-a6b8-201fb7da58f4" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad057e4c-80f0-3e94-8af1-118b94b2df1c" locEndPos="18" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="2" auth="lyao" locRef="5" rule="JSF-209_b" lnHash="-33300074" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-33300074" unbViolId="89011c93-8d69-35ba-bbfc-3d6bb0810dd8" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b5c81f7-b4c4-3be8-af5b-75c4ef6da630" locEndPos="18" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="MISRA2004-6_3_b" lnHash="-33300074" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-33300074" unbViolId="840d7952-7005-3afc-8278-c5e159e8dd56" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5782c687-6045-3e61-99b5-d37051579a5c" locEndPos="18" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="4" auth="lyao" locRef="5" rule="MISRA2012-DIR-4_6_b" lnHash="-33300074" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-33300074" unbViolId="b90deeb1-0991-3992-b2ab-3a4304bda651" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7bd95b59-24fe-3bc3-a764-bbd0e7ed2ef5" locEndPos="18" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="HICPP-3_5_1-b" lnHash="-33300074" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-33300074" unbViolId="5d61e6b9-3166-3674-8280-2fec2f3ffe57" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be22cbfd-b039-3041-9497-07d9e57d4f3b" locEndPos="18" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Identifier name: 'y' differs only by presence/absence of the underscore character from identifier name: '_y' declared in class" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="2" auth="lyao" locRef="5" rule="MISRA2008-2_10_1" lnHash="-33300074" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-33300074" unbViolId="b4bb7f0e-7948-39ff-be9b-1118b8141935" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="436419cb-8f34-332a-ba08-0eaecfd55900" locEndPos="22" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Identifier name: 'y' differs only by presence/absence of the underscore character from identifier name: '_y' declared in class" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="HICPP-2_4_1-a" lnHash="-33300074" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-33300074" unbViolId="e2c01990-6b0e-3aea-a8ff-e2c23200168f" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="306cf4e0-498b-3c9b-8ff8-c845a895d8fa" locEndPos="22" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Identifier name: 'y' differs only by presence/absence of the underscore character from identifier name: '_y' declared in class" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-M2_10_1-a" lnHash="-33300074" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-33300074" unbViolId="13a976e3-954e-37c3-b337-d74408c611dc" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b10e405-6bbc-36cf-a538-eb613af7da7f" locEndPos="22" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Identifier name: 'y' differs only by presence/absence of the underscore character from identifier name: '_y' declared in class" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="NAMING-47" lnHash="-33300074" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-33300074" unbViolId="c4501d0a-59fe-33fd-8a1e-af374023d600" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04f437e2-2e68-3132-b8cf-70ae3e16dee4" locEndPos="22" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="'y' shall be declared as unsigned int or signed int" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="PORT-13" lnHash="-33300074" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-33300074" unbViolId="b28dc251-09b7-3327-a22a-e63d2eeb47cb" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68b1f2d4-bf9b-394a-bb88-df4a1c8253fd" locEndPos="22" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The identifier 'y' differs only by presence/absence of the underscore character from identifier '_y' declared in file 'Point.hpp'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="NAMING-45" lnHash="-33300074" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-33300074" unbViolId="732c8b19-5aa2-37ca-903f-7673d8074566" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="73470430-ae04-3cc0-a638-86a7b0be0994" locEndPos="22" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The identifier 'y' differs only by presence/absence of the underscore character from identifier '_y' declared in file 'Point.hpp'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="JSF-048" lnHash="-33300074" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-33300074" unbViolId="735b4a35-3885-3c43-8bb5-04a0c51236d0" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36e230b1-dff7-3104-897a-8b93f34a6e44" locEndPos="22" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="JSF-061" lnHash="-33300074" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-33300074" unbViolId="a23b1b31-6f83-3d00-9b55-4f68d0330e84" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb199774-84c2-30b2-862f-bfd9b6975ba6" locEndPos="41" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="FORMAT-42" lnHash="-33300074" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-33300074" unbViolId="324b5d80-6195-3e77-9a61-b1beb1bc9e75" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="32b98112-7b99-31bc-b8b3-d04406808194" locEndPos="41" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="7" sev="3" auth="lyao" locRef="5" rule="JSF-060_a" lnHash="-33300074" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-33300074" unbViolId="dd17fe25-b012-3bed-968e-a99aaabd5787" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="28039428-60cf-3cc5-9043-ac7213153019" locEndPos="41" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'reflectAcrossX' function should be preceded by a comment that contains the '@brief' tag" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="8" sev="3" auth="lyao" locRef="5" rule="COMMENT-14" lnHash="-1965707959" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1965707959" unbViolId="f1a94ec1-5494-3794-8329-450119806775" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21864464-caef-3b2b-a01a-e37793520298" locEndPos="10" locType="sr" hash="1950870755" locEndLn="8" goals="0,"/>
    <StdViol msg="The 'reflectAcrossX' function should be preceded by a comment that contains the '@brief' tag" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="8" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-A2_7_3-a" lnHash="-1965707959" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1965707959" unbViolId="9990f0f7-be69-3a15-8869-e267d8f2e9fc" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e37d0bb-d022-3811-96fb-11ac7099867e" locEndPos="10" locType="sr" hash="1950870755" locEndLn="8" goals="0,"/>
    <StdViol msg="The 'reflectAcrossX' function should be declared 'noexcept'" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="8" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-A15_4_4-a" lnHash="-1965707959" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-1965707959" unbViolId="53f7ac8a-25ac-3f56-9259-d5a7eb3e0b9e" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e106455-88a3-33e5-8c06-650fac049c86" locEndPos="10" locType="sr" hash="1950870755" locEndLn="8" goals="0,"/>
    <StdViol msg="The 'reflectAcrossX' function should be declared 'noexcept'" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="8" sev="3" auth="lyao" locRef="5" rule="CODSTA-MCPP-09" lnHash="-1965707959" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-1965707959" unbViolId="2d343c87-4b32-35b8-b50f-5efd4fadfad0" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e002dfb3-b487-3f39-ba27-6b456f814dd2" locEndPos="10" locType="sr" hash="1950870755" locEndLn="8" goals="0,"/>
    <StdViol msg="Return type is not placed in line before function 'reflectAcrossX'" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="8" sev="3" auth="lyao" locRef="5" rule="FORMAT-28" lnHash="-1965707959" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-1965707959" unbViolId="e4b4d6eb-b5af-3b63-bb14-a206c81e3ead" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ef4cb62-03c2-3fb9-8600-9da02e95166e" locEndPos="10" locType="sr" hash="1950870755" locEndLn="8" goals="0,"/>
    <StdViol msg="Function 'reflectAcrossX' has Cyclomatic Complexity value: 1" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="8" sev="5" auth="lyao" locRef="5" rule="METRICS-29" lnHash="-1965707959" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-1965707959" unbViolId="d00fdb9e-0be6-362b-834a-0b58aa415d65" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78bbcbe2-5a7c-37d2-8c33-d1802bc682aa" locEndPos="10" locType="sr" hash="1950870755" locEndLn="8" goals="0,"/>
    <StdViol msg="Function 'reflectAcrossX' has Essential Complexity value: 1" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="8" sev="5" auth="lyao" locRef="5" rule="METRICS-33" lnHash="-1965707959" rule.header="Report Essential Complexity" tool="c++test" lineHash="-1965707959" unbViolId="660c84ee-d1df-310f-8735-5f23f5c3d12b" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90c4c0d4-ad7c-38e1-8cec-88c32447f82e" locEndPos="10" locType="sr" hash="1950870755" locEndLn="8" goals="0,"/>
    <StdViol msg="Naming convention not followed: reflectAcrossX" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="8" sev="3" auth="lyao" locRef="5" rule="NAMING-17" lnHash="-1965707959" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-1965707959" unbViolId="677e7cb4-2ae4-3a4a-ad16-ae99a4485f34" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bcd41be3-122a-3eb9-9f1d-8c624a3c2300" locEndPos="10" locType="sr" hash="1950870755" locEndLn="8" goals="0,"/>
    <StdViol msg="The definition of the 'reflectAcrossX' function is not preceded by a comment" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="8" sev="3" auth="lyao" locRef="5" rule="COMMENT-04" lnHash="-1965707959" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1965707959" unbViolId="c36852b2-efd3-3795-8c3c-82d0fd5a3336" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="deefd05a-2bf2-3d72-b984-e366f0e24281" locEndPos="10" locType="sr" hash="1950870755" locEndLn="8" goals="0,"/>
    <StdViol msg="The definition of the 'reflectAcrossX' function is not preceded by a comment" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="8" sev="4" auth="lyao" locRef="5" rule="JSF-134" lnHash="-1965707959" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1965707959" unbViolId="a80f7e5a-6c09-3722-b24c-1018ebd15136" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52d38254-07dc-3354-9d66-dd786766bc55" locEndPos="10" locType="sr" hash="1950870755" locEndLn="8" goals="0,"/>
    <StdViol msg="The name 'reflectAcrossX' should be composed only of lowercase letters" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="8" sev="3" auth="lyao" locRef="5" rule="JSF-051" lnHash="-1965707959" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1965707959" unbViolId="9aa5b9c5-8120-3cd7-9d1d-4dda86168c66" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4321955e-6059-3570-a248-400b3514a55e" locEndPos="10" locType="sr" hash="1950870755" locEndLn="8" goals="0,"/>
    <StdViol msg="The name 'reflectAcrossX' should be composed only of lowercase letters" ln="8" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="8" sev="3" auth="lyao" locRef="5" rule="NAMING-44" lnHash="-1965707959" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1965707959" unbViolId="bdc92e3c-2a7d-3104-9826-d8d018ee5d88" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12b15823-4072-3bc6-b9d1-ca749fd449e1" locEndPos="10" locType="sr" hash="1950870755" locEndLn="8" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="9" sev="3" auth="lyao" locRef="5" rule="METRICS-19" lnHash="30537851" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="30537851" unbViolId="76391dfb-423c-3a87-b208-5e5c200fadaa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a33f0d4-d4e1-35f0-b65f-fecdf650c92d" locEndPos="1" locType="sr" hash="1950870755" locEndLn="9" goals="0,"/>
    <FlowViol msg="Evaluation of &quot;-this->_y&quot; may result in possible overflow/underflow" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" ruleSAFMsg="Point of possible overflow/underflow" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="6" rule="APSC_DV-002520-f" FirstElSrcRngStartPos="0" lnHash="-796707555" ruleSCSCMsg="Point where value is defined by tainting function" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" rule.header="Avoid potential integer overflow/underflow on tainted data" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-365915470" lang="cpp" violId="355fa089-f740-3ffd-babf-9ea7ef066742" locEndPos="0" locEndLn="11" goals="0," locStartln="10" sev="2" locRef="5" tool="c++test" lineHash="-796707555" unbViolId="8b33f0f6-abd9-39e8-ab99-768dd43734a9" locType="sr" hash="1950870755" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Tainted data"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-332596053" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="int main(int argc, char* argv[])" ElType=".C" rngLn="5">
          <Props>
            <Prop key="Tracked variables" val="argv[]"/>
          </Props>
          <Anns>
            <Ann msg="Point where value is defined by tainting function" kind="cause"/>
            <Ann msg="Tainted data: argv[]" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point* point = 0;" ElType="." rngLn="7"/>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="atoi(...)" ElType="!" rngLn="9"/>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point(...)" ElType="!" rngLn="9">
          <ElDescList>
            <ElDesc lineHash="-33300074" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="Point(int x, int y) : _x(x), _y(y) {}" ElType="!" rngLn="7">
              <Props>
                <Prop key="Tracked variables" val="y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: y" kind="var"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="atoi(...)"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: atoi(...)" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point = new Point(atoi(argv[1]), atoi(argv[2]));" ElType="!" rngLn="9">
          <Props>
            <Prop key="Tracked variables" val="new Point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: new Point->_y" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point->reflectAcrossX();" ElType="!" rngLn="11">
          <ElDescList>
            <ElDesc lineHash="-796707555" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_y = -_y;" ElType=".P" rngLn="10">
              <Props>
                <Prop key="Tracked variables" val="this->_y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: this->_y" kind="var"/>
                <Ann msg="Point of possible overflow/underflow" kind="point"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: point->_y" kind="var"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Evaluation of &quot;-this->_y&quot; may result in possible overflow/underflow" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" ruleSAFMsg="Point of possible overflow/underflow" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="6" rule="APSC_DV-002530-f" FirstElSrcRngStartPos="0" lnHash="-796707555" ruleSCSCMsg="Point where value is defined by tainting function" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" rule.header="Avoid potential integer overflow/underflow on tainted data" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-365943021" lang="cpp" violId="eec3a145-eab8-3851-b2de-270b9d0252f9" locEndPos="0" locEndLn="11" goals="0," locStartln="10" sev="2" locRef="5" tool="c++test" lineHash="-796707555" unbViolId="41af47f1-29c8-3147-9a41-8996e4efd08b" locType="sr" hash="1950870755" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Tainted data"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-332596053" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="int main(int argc, char* argv[])" ElType=".C" rngLn="5">
          <Props>
            <Prop key="Tracked variables" val="argv[]"/>
          </Props>
          <Anns>
            <Ann msg="Point where value is defined by tainting function" kind="cause"/>
            <Ann msg="Tainted data: argv[]" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point* point = 0;" ElType="." rngLn="7"/>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="atoi(...)" ElType="!" rngLn="9"/>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point(...)" ElType="!" rngLn="9">
          <ElDescList>
            <ElDesc lineHash="-33300074" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="Point(int x, int y) : _x(x), _y(y) {}" ElType="!" rngLn="7">
              <Props>
                <Prop key="Tracked variables" val="y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: y" kind="var"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="atoi(...)"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: atoi(...)" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point = new Point(atoi(argv[1]), atoi(argv[2]));" ElType="!" rngLn="9">
          <Props>
            <Prop key="Tracked variables" val="new Point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: new Point->_y" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point->reflectAcrossX();" ElType="!" rngLn="11">
          <ElDescList>
            <ElDesc lineHash="-796707555" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_y = -_y;" ElType=".P" rngLn="10">
              <Props>
                <Prop key="Tracked variables" val="this->_y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: this->_y" kind="var"/>
                <Ann msg="Point of possible overflow/underflow" kind="point"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: point->_y" kind="var"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Evaluation of &quot;-this->_y&quot; may result in possible overflow/underflow" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" ruleSAFMsg="Point of possible overflow/underflow" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="6" rule="APSC_DV-002550-f" FirstElSrcRngStartPos="0" lnHash="-796707555" ruleSCSCMsg="Point where value is defined by tainting function" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" rule.header="Avoid potential integer overflow/underflow on tainted data" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-365703211" lang="cpp" violId="08c554ab-928c-3416-a3cf-655c2a5c2110" locEndPos="0" locEndLn="11" goals="0," locStartln="10" sev="1" locRef="5" tool="c++test" lineHash="-796707555" unbViolId="aca74ba9-e24b-3aae-8b73-b0ed58d4a6ce" locType="sr" hash="1950870755" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Tainted data"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-332596053" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="int main(int argc, char* argv[])" ElType=".C" rngLn="5">
          <Props>
            <Prop key="Tracked variables" val="argv[]"/>
          </Props>
          <Anns>
            <Ann msg="Point where value is defined by tainting function" kind="cause"/>
            <Ann msg="Tainted data: argv[]" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point* point = 0;" ElType="." rngLn="7"/>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="atoi(...)" ElType="!" rngLn="9"/>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point(...)" ElType="!" rngLn="9">
          <ElDescList>
            <ElDesc lineHash="-33300074" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="Point(int x, int y) : _x(x), _y(y) {}" ElType="!" rngLn="7">
              <Props>
                <Prop key="Tracked variables" val="y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: y" kind="var"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="atoi(...)"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: atoi(...)" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point = new Point(atoi(argv[1]), atoi(argv[2]));" ElType="!" rngLn="9">
          <Props>
            <Prop key="Tracked variables" val="new Point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: new Point->_y" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point->reflectAcrossX();" ElType="!" rngLn="11">
          <ElDescList>
            <ElDesc lineHash="-796707555" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_y = -_y;" ElType=".P" rngLn="10">
              <Props>
                <Prop key="Tracked variables" val="this->_y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: this->_y" kind="var"/>
                <Ann msg="Point of possible overflow/underflow" kind="point"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: point->_y" kind="var"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Evaluation of &quot;-this->_y&quot; may result in possible overflow/underflow" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" ruleSAFMsg="Point of possible overflow/underflow" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="6" rule="APSC_DV-002560-f" FirstElSrcRngStartPos="0" lnHash="-796707555" ruleSCSCMsg="Point where value is defined by tainting function" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" rule.header="Avoid potential integer overflow/underflow on tainted data" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-365739978" lang="cpp" violId="a748d1dc-625e-3cbd-ae49-872b920c9621" locEndPos="0" locEndLn="11" goals="0," locStartln="10" sev="1" locRef="5" tool="c++test" lineHash="-796707555" unbViolId="a9f7490c-278e-34cf-8aaf-d9470e692b77" locType="sr" hash="1950870755" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Tainted data"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-332596053" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="int main(int argc, char* argv[])" ElType=".C" rngLn="5">
          <Props>
            <Prop key="Tracked variables" val="argv[]"/>
          </Props>
          <Anns>
            <Ann msg="Point where value is defined by tainting function" kind="cause"/>
            <Ann msg="Tainted data: argv[]" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point* point = 0;" ElType="." rngLn="7"/>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="atoi(...)" ElType="!" rngLn="9"/>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point(...)" ElType="!" rngLn="9">
          <ElDescList>
            <ElDesc lineHash="-33300074" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="Point(int x, int y) : _x(x), _y(y) {}" ElType="!" rngLn="7">
              <Props>
                <Prop key="Tracked variables" val="y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: y" kind="var"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="atoi(...)"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: atoi(...)" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point = new Point(atoi(argv[1]), atoi(argv[2]));" ElType="!" rngLn="9">
          <Props>
            <Prop key="Tracked variables" val="new Point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: new Point->_y" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point->reflectAcrossX();" ElType="!" rngLn="11">
          <ElDescList>
            <ElDesc lineHash="-796707555" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_y = -_y;" ElType=".P" rngLn="10">
              <Props>
                <Prop key="Tracked variables" val="this->_y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: this->_y" kind="var"/>
                <Ann msg="Point of possible overflow/underflow" kind="point"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: point->_y" kind="var"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Evaluation of &quot;-this->_y&quot; may result in possible overflow/underflow" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" ruleSAFMsg="Point of possible overflow/underflow" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="6" rule="APSC_DV-002590-g" FirstElSrcRngStartPos="0" lnHash="-796707555" ruleSCSCMsg="Point where value is defined by tainting function" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" rule.header="Avoid potential integer overflow/underflow on tainted data" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-365036216" lang="cpp" violId="c9daf363-7100-31c9-bb2d-26531eea6d96" locEndPos="0" locEndLn="11" goals="0," locStartln="10" sev="1" locRef="5" tool="c++test" lineHash="-796707555" unbViolId="8c1af8e9-7f1a-3133-adcc-d5458a770f51" locType="sr" hash="1950870755" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Tainted data"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-332596053" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="int main(int argc, char* argv[])" ElType=".C" rngLn="5">
          <Props>
            <Prop key="Tracked variables" val="argv[]"/>
          </Props>
          <Anns>
            <Ann msg="Point where value is defined by tainting function" kind="cause"/>
            <Ann msg="Tainted data: argv[]" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point* point = 0;" ElType="." rngLn="7"/>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="atoi(...)" ElType="!" rngLn="9"/>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point(...)" ElType="!" rngLn="9">
          <ElDescList>
            <ElDesc lineHash="-33300074" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="Point(int x, int y) : _x(x), _y(y) {}" ElType="!" rngLn="7">
              <Props>
                <Prop key="Tracked variables" val="y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: y" kind="var"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="atoi(...)"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: atoi(...)" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point = new Point(atoi(argv[1]), atoi(argv[2]));" ElType="!" rngLn="9">
          <Props>
            <Prop key="Tracked variables" val="new Point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: new Point->_y" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point->reflectAcrossX();" ElType="!" rngLn="11">
          <ElDescList>
            <ElDesc lineHash="-796707555" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_y = -_y;" ElType=".P" rngLn="10">
              <Props>
                <Prop key="Tracked variables" val="this->_y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: this->_y" kind="var"/>
                <Ann msg="Point of possible overflow/underflow" kind="point"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: point->_y" kind="var"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Evaluation of &quot;-this->_y&quot; may result in possible overflow/underflow" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" ruleSAFMsg="Point of possible overflow/underflow" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="6" rule="CERT_C-INT04-a" FirstElSrcRngStartPos="0" lnHash="-796707555" ruleSCSCMsg="Point where value is defined by tainting function" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" rule.header="Avoid potential integer overflow/underflow on tainted data" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1571687099" lang="cpp" violId="ad6b846a-365b-3e9e-841f-5836bd138855" locEndPos="0" locEndLn="11" goals="0," locStartln="10" sev="2" locRef="5" tool="c++test" lineHash="-796707555" unbViolId="4bc43586-0372-3cd4-b72c-b8d0a5d32ad2" locType="sr" hash="1950870755" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Tainted data"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-332596053" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="int main(int argc, char* argv[])" ElType=".C" rngLn="5">
          <Props>
            <Prop key="Tracked variables" val="argv[]"/>
          </Props>
          <Anns>
            <Ann msg="Point where value is defined by tainting function" kind="cause"/>
            <Ann msg="Tainted data: argv[]" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point* point = 0;" ElType="." rngLn="7"/>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="atoi(...)" ElType="!" rngLn="9"/>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point(...)" ElType="!" rngLn="9">
          <ElDescList>
            <ElDesc lineHash="-33300074" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="Point(int x, int y) : _x(x), _y(y) {}" ElType="!" rngLn="7">
              <Props>
                <Prop key="Tracked variables" val="y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: y" kind="var"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="atoi(...)"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: atoi(...)" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point = new Point(atoi(argv[1]), atoi(argv[2]));" ElType="!" rngLn="9">
          <Props>
            <Prop key="Tracked variables" val="new Point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: new Point->_y" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point->reflectAcrossX();" ElType="!" rngLn="11">
          <ElDescList>
            <ElDesc lineHash="-796707555" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_y = -_y;" ElType=".P" rngLn="10">
              <Props>
                <Prop key="Tracked variables" val="this->_y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: this->_y" kind="var"/>
                <Ann msg="Point of possible overflow/underflow" kind="point"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: point->_y" kind="var"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Evaluation of &quot;-this->_y&quot; may result in possible overflow/underflow" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" ruleSAFMsg="Point of possible overflow/underflow" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="6" rule="CWE-20-b" FirstElSrcRngStartPos="0" lnHash="-796707555" ruleSCSCMsg="Point where value is defined by tainting function" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" rule.header="Avoid potential integer overflow/underflow on tainted data" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="262760584" lang="cpp" violId="867cc24c-3422-3f1c-a57e-dff0b15a0581" locEndPos="0" locEndLn="11" goals="0," locStartln="10" sev="1" locRef="5" tool="c++test" lineHash="-796707555" unbViolId="658b3d26-e6b4-3e7a-a58b-fd15481a73c0" locType="sr" hash="1950870755" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Tainted data"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-332596053" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="int main(int argc, char* argv[])" ElType=".C" rngLn="5">
          <Props>
            <Prop key="Tracked variables" val="argv[]"/>
          </Props>
          <Anns>
            <Ann msg="Point where value is defined by tainting function" kind="cause"/>
            <Ann msg="Tainted data: argv[]" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point* point = 0;" ElType="." rngLn="7"/>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="atoi(...)" ElType="!" rngLn="9"/>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point(...)" ElType="!" rngLn="9">
          <ElDescList>
            <ElDesc lineHash="-33300074" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="Point(int x, int y) : _x(x), _y(y) {}" ElType="!" rngLn="7">
              <Props>
                <Prop key="Tracked variables" val="y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: y" kind="var"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="atoi(...)"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: atoi(...)" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point = new Point(atoi(argv[1]), atoi(argv[2]));" ElType="!" rngLn="9">
          <Props>
            <Prop key="Tracked variables" val="new Point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: new Point->_y" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point->reflectAcrossX();" ElType="!" rngLn="11">
          <ElDescList>
            <ElDesc lineHash="-796707555" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_y = -_y;" ElType=".P" rngLn="10">
              <Props>
                <Prop key="Tracked variables" val="this->_y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: this->_y" kind="var"/>
                <Ann msg="Point of possible overflow/underflow" kind="point"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: point->_y" kind="var"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Evaluation of &quot;-this->_y&quot; may result in possible overflow/underflow" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" ruleSAFMsg="Point of possible overflow/underflow" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="6" rule="MISRA2012-DIR-4_14_b" FirstElSrcRngStartPos="0" lnHash="-796707555" ruleSCSCMsg="Point where value is defined by tainting function" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" rule.header="Protect against integer overflow/underflow from tainted data" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-758293474" lang="cpp" violId="842dfbf3-d5d8-3ba7-afba-380a26faac23" locEndPos="0" locEndLn="11" goals="0," locStartln="10" sev="2" locRef="5" tool="c++test" lineHash="-796707555" unbViolId="74230a38-387d-3380-bc95-ef76b3edc291" locType="sr" hash="1950870755" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Tainted data"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-332596053" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="int main(int argc, char* argv[])" ElType=".C" rngLn="5">
          <Props>
            <Prop key="Tracked variables" val="argv[]"/>
          </Props>
          <Anns>
            <Ann msg="Point where value is defined by tainting function" kind="cause"/>
            <Ann msg="Tainted data: argv[]" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point* point = 0;" ElType="." rngLn="7"/>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="atoi(...)" ElType="!" rngLn="9"/>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point(...)" ElType="!" rngLn="9">
          <ElDescList>
            <ElDesc lineHash="-33300074" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="Point(int x, int y) : _x(x), _y(y) {}" ElType="!" rngLn="7">
              <Props>
                <Prop key="Tracked variables" val="y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: y" kind="var"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="atoi(...)"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: atoi(...)" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point = new Point(atoi(argv[1]), atoi(argv[2]));" ElType="!" rngLn="9">
          <Props>
            <Prop key="Tracked variables" val="new Point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: new Point->_y" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point->reflectAcrossX();" ElType="!" rngLn="11">
          <ElDescList>
            <ElDesc lineHash="-796707555" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_y = -_y;" ElType=".P" rngLn="10">
              <Props>
                <Prop key="Tracked variables" val="this->_y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: this->_y" kind="var"/>
                <Ann msg="Point of possible overflow/underflow" kind="point"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: point->_y" kind="var"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Evaluation of &quot;-this->_y&quot; may result in possible overflow/underflow" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" ruleSAFMsg="Point of possible overflow/underflow" FirstElSrcRngEndPos="0" auth="lyao" FirstElSrcRngEndLn="6" rule="MISRAC2012-DIR_4_14-b" FirstElSrcRngStartPos="0" lnHash="-796707555" ruleSCSCMsg="Point where value is defined by tainting function" FirstElSrcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" rule.header="Avoid potential integer overflow/underflow on tainted data" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="111760417" lang="cpp" violId="273414d8-b58f-37c4-b14c-e41df748d03d" locEndPos="0" locEndLn="11" goals="0," locStartln="10" sev="2" locRef="5" tool="c++test" lineHash="-796707555" unbViolId="22ff0f02-c67b-3695-8765-63c71bc3c7b5" locType="sr" hash="1950870755" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Tainted data"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-332596053" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="int main(int argc, char* argv[])" ElType=".C" rngLn="5">
          <Props>
            <Prop key="Tracked variables" val="argv[]"/>
          </Props>
          <Anns>
            <Ann msg="Point where value is defined by tainting function" kind="cause"/>
            <Ann msg="Tainted data: argv[]" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point* point = 0;" ElType="." rngLn="7"/>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="atoi(...)" ElType="!" rngLn="9"/>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="Point(...)" ElType="!" rngLn="9">
          <ElDescList>
            <ElDesc lineHash="-33300074" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="Point(int x, int y) : _x(x), _y(y) {}" ElType="!" rngLn="7">
              <Props>
                <Prop key="Tracked variables" val="y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: y" kind="var"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="atoi(...)"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: atoi(...)" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point = new Point(atoi(argv[1]), atoi(argv[2]));" ElType="!" rngLn="9">
          <Props>
            <Prop key="Tracked variables" val="new Point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: new Point->_y" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" desc="point->reflectAcrossX();" ElType="!" rngLn="11">
          <ElDescList>
            <ElDesc lineHash="-796707555" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" desc="_y = -_y;" ElType=".P" rngLn="10">
              <Props>
                <Prop key="Tracked variables" val="this->_y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: this->_y" kind="var"/>
                <Ann msg="Point of possible overflow/underflow" kind="point"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: point->_y" kind="var"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="The definition of the 'translate' function is not preceded by a comment" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="13" sev="3" auth="lyao" locRef="5" rule="COMMENT-04" lnHash="-1158187041" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1158187041" unbViolId="3330e3f6-72a1-3196-8932-e9506513143c" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2625365e-5254-3fd4-9d07-396bd42db205" locEndPos="10" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="The definition of the 'translate' function is not preceded by a comment" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="13" sev="4" auth="lyao" locRef="5" rule="JSF-134" lnHash="-1158187041" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1158187041" unbViolId="9306f41f-9c9b-3b9d-83e5-7ca4bd6c9ad4" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="11236767-45e7-3f58-b7d4-c860740ce822" locEndPos="10" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="The 'translate' function should be preceded by a comment that contains the '@brief' tag" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="13" sev="3" auth="lyao" locRef="5" rule="COMMENT-14" lnHash="-1158187041" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1158187041" unbViolId="f375fcaa-a734-3420-87d2-4934bf61b40c" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e380e3e8-70b1-3c42-9eeb-7f1f48478821" locEndPos="10" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="The 'translate' function should be preceded by a comment that contains the '@brief' tag" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="13" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-A2_7_3-a" lnHash="-1158187041" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1158187041" unbViolId="feb3b867-8be9-3ca4-b3e7-3456c824f02e" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b721ea49-1b12-3c6f-9fe8-ca96fda56ce4" locEndPos="10" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="The 'vector' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="13" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-A2_7_3-b" lnHash="-1158187041" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1158187041" unbViolId="4c3f06fa-3c12-34ce-a908-9601b83e5cbf" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8e5fe66d-a48d-35ae-9e03-ec88ed184792" locEndPos="10" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="The 'vector' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="13" sev="3" auth="lyao" locRef="5" rule="COMMENT-14_b" lnHash="-1158187041" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1158187041" unbViolId="17edca79-4ff1-3f6d-8a43-6c2f3643abb0" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0499da2c-de79-32cb-87e3-30f2f08e0e16" locEndPos="10" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="The 'translate' function should be declared 'noexcept'" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="13" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-A15_4_4-a" lnHash="-1158187041" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-1158187041" unbViolId="5e073e05-8138-39f1-aaee-1bc75b501d99" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99c6a753-d860-3e8d-89f3-bc03766d5f10" locEndPos="10" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="The 'translate' function should be declared 'noexcept'" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="13" sev="3" auth="lyao" locRef="5" rule="CODSTA-MCPP-09" lnHash="-1158187041" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-1158187041" unbViolId="cc3fed18-32f4-35e7-aac1-9bdeb8352102" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f4cf64c-1a89-3c3a-be4c-ce1840616787" locEndPos="10" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="Return type is not placed in line before function 'translate'" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="13" sev="3" auth="lyao" locRef="5" rule="FORMAT-28" lnHash="-1158187041" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-1158187041" unbViolId="78d1fe9a-1849-3357-b07a-6a08cf74a397" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d7ec2da6-7bd4-35f1-b586-e32c45d3d058" locEndPos="10" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="Function 'translate' has Cyclomatic Complexity value: 1" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="13" sev="5" auth="lyao" locRef="5" rule="METRICS-29" lnHash="-1158187041" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-1158187041" unbViolId="d04d1d1e-2a2f-398e-a732-5a0aff22a2b6" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab7b9148-7186-3680-a645-8b87e625ddb1" locEndPos="10" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="Function 'translate' has Essential Complexity value: 1" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="13" sev="5" auth="lyao" locRef="5" rule="METRICS-33" lnHash="-1158187041" rule.header="Report Essential Complexity" tool="c++test" lineHash="-1158187041" unbViolId="6951a3e8-6c8a-32e6-81cc-e4f4261a1f0e" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf989e7a-2339-3c62-96da-f52be197af5b" locEndPos="10" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="Naming convention not followed: translate" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="13" sev="3" auth="lyao" locRef="5" rule="NAMING-17" lnHash="-1158187041" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-1158187041" unbViolId="b50b4283-0dc1-39f7-892a-4a0eec274f45" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1cd3a752-b718-3903-bc2c-c3f06f987cca" locEndPos="10" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="The 'const' qualifier should be placed on the right hand side of the type" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="13" sev="3" auth="lyao" locRef="5" rule="FORMAT-47_a" lnHash="-1158187041" rule.header="Place CV-qualifiers on the right hand side of the type they apply to" tool="c++test" lineHash="-1158187041" unbViolId="107aae23-5102-3bdc-a4d9-d06b851cd907" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8fee763-0d64-3cbc-bfa5-1437a825e3c6" locEndPos="20" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="The 'const' qualifier should be placed on the right hand side of the type" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="13" sev="3" auth="lyao" locRef="5" rule="HICPP-7_1_4-a" lnHash="-1158187041" rule.header="Place CV-qualifiers on the right hand side of the type they apply to" tool="c++test" lineHash="-1158187041" unbViolId="1add82e4-b691-3ff0-a716-9051e7143896" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="456b759d-0920-3672-a943-75724efee00b" locEndPos="20" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="Consider passing the 'vector' parameter by value instead of by const reference" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="13" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-A8_4_7-a" lnHash="-1158187041" rule.header="A parameter of const reference to a 'cheap to copy' type should be passed by value" tool="c++test" lineHash="-1158187041" unbViolId="9d9e2884-cafb-3506-9b74-f114e9f3583a" locStartPos="32" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="201a87b9-7340-35ff-83d5-e842f2f4a2d1" locEndPos="33" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="The 'vector' parameter should be passed by value instead of by const reference" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="13" sev="3" auth="lyao" locRef="5" rule="HICPP-8_2_3-a" lnHash="-1158187041" rule.header="Pass small objects with a trivial copy constructor by value" tool="c++test" lineHash="-1158187041" unbViolId="3062529c-1466-32af-b47c-de3529bc83f1" locStartPos="32" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00afb93f-5a8f-3ce8-85db-7a27ad16d4de" locEndPos="33" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="Parameter 'vector' is not validated before use" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="13" sev="3" auth="lyao" locRef="5" rule="CERT_C-API00-a" lnHash="-1158187041" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1158187041" unbViolId="c4736fe8-0481-3c6a-bd1e-4a98b9f87b92" locStartPos="32" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7ffd204-0f33-3e89-8efc-b4ea93f0d918" locEndPos="33" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="Parameter 'vector' is not validated before use" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="13" sev="3" auth="lyao" locRef="5" rule="CODSTA-86" lnHash="-1158187041" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1158187041" unbViolId="4a73c8d0-5b39-326d-aa1d-7e395b72c3f1" locStartPos="32" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c739c09-a22a-3419-9bcf-154cfaa7ee24" locEndPos="33" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="The 'vector' identifier should have the 'k' prefix" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="13" sev="3" auth="lyao" locRef="5" rule="NAMING-HN-11" lnHash="-1158187041" rule.header="Hungarian notation for constant parameters" tool="c++test" lineHash="-1158187041" unbViolId="76d17e94-6440-3ee9-b9bf-a82b963f6360" locStartPos="32" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00abe658-b89f-384e-a10d-6fdf55d8001d" locEndPos="33" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="The 'vector' identifier should have the 'r' prefix" ln="13" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="13" sev="3" auth="lyao" locRef="5" rule="NAMING-HN-35" lnHash="-1158187041" rule.header="Hungarian notation for reference parameters" tool="c++test" lineHash="-1158187041" unbViolId="6bf6c885-67a3-3171-8a7d-7dca6a83f70a" locStartPos="32" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="333187c4-92a5-37a8-b6a9-25ded0b99c2c" locEndPos="33" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="14" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="14" sev="3" auth="lyao" locRef="5" rule="METRICS-19" lnHash="30537851" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="30537851" unbViolId="56ca6b94-36aa-39fa-a2e2-f56b3b674855" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="238b21d1-6731-3653-8fa1-9bc5795e6d47" locEndPos="1" locType="sr" hash="1950870755" locEndLn="14" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="15" sev="4" auth="lyao" locRef="5" rule="JSF-043" lnHash="931387847" rule.header="Tabs should be avoided" tool="c++test" lineHash="931387847" unbViolId="8615f6a8-bd58-3ec8-b2fb-bb3c77c0bca8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc4b41dc-d4b6-3390-a7d5-383554fd4825" locEndPos="5" locType="sr" hash="1950870755" locEndLn="15" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="15" sev="5" auth="lyao" locRef="5" rule="FORMAT-01" lnHash="931387847" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="931387847" unbViolId="096b5837-4c85-3dd9-8ad3-46bca4913ece" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90ad6727-371f-3f20-a00e-630e517ba3ff" locEndPos="5" locType="sr" hash="1950870755" locEndLn="15" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="15" sev="5" auth="lyao" locRef="5" rule="HICPP-2_1_1-a" lnHash="931387847" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="931387847" unbViolId="16735777-d486-3ca4-bfd2-df707dbf0943" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2104fcc0-82d1-3183-a71b-9c279bddab9e" locEndPos="5" locType="sr" hash="1950870755" locEndLn="15" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="16" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="16" sev="4" auth="lyao" locRef="5" rule="JSF-043" lnHash="-1856027609" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1856027609" unbViolId="d58c4c20-a481-37cf-b52c-9f8a62658e9f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="80ca83e6-2e8f-357e-ad66-590b49ef720b" locEndPos="5" locType="sr" hash="1950870755" locEndLn="16" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="16" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="16" sev="5" auth="lyao" locRef="5" rule="FORMAT-01" lnHash="-1856027609" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1856027609" unbViolId="919c5a51-6de5-3e05-8e6f-5579b2cfd034" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b399b1d1-b979-3222-8b86-d3c2455bceae" locEndPos="5" locType="sr" hash="1950870755" locEndLn="16" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="16" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="16" sev="5" auth="lyao" locRef="5" rule="HICPP-2_1_1-a" lnHash="-1856027609" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1856027609" unbViolId="cf56b7f7-ab08-387d-9d66-8c2bd251ac00" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7452f2fb-e5d1-3939-ba10-2ff60f998e5a" locEndPos="5" locType="sr" hash="1950870755" locEndLn="16" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="CODSTA-223" lnHash="905451388" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="905451388" unbViolId="3f850598-669b-3f30-9e48-9f5cbe5d1690" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5eaeec3-31c7-3da8-bded-a39df1d07015" locEndPos="5" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-A3_9_1-b" lnHash="905451388" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="905451388" unbViolId="941506b9-ddf2-30e6-a451-ccda0f887b54" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7df6d2c1-f0fe-3dee-94f2-287d448f896a" locEndPos="5" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="HICPP-7_1_6-b" lnHash="905451388" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="905451388" unbViolId="328c19d1-859f-356d-b700-750172a89793" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74bc5a69-1fb2-3a43-ab67-6b3989e45d97" locEndPos="5" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="4" auth="lyao" locRef="5" rule="MISRAC2012-DIR_4_6-b" lnHash="905451388" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="905451388" unbViolId="071d1b99-1b79-31ec-bb58-fb8b4973709a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="375551a9-737b-30ff-9f2a-ef7d743d8668" locEndPos="5" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="2" auth="lyao" locRef="5" rule="JSF-209_b" lnHash="905451388" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="905451388" unbViolId="6ef5764c-bbf6-33db-a149-1338d095ae7c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9554854c-e99c-3236-99a9-3c0bdfa70efd" locEndPos="5" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="MISRA2004-6_3_b" lnHash="905451388" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="905451388" unbViolId="52c88af5-86c4-350b-9c1d-31ce16bda87b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="655e8f59-01fc-38db-990d-8218204d966e" locEndPos="5" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="4" auth="lyao" locRef="5" rule="MISRA2012-DIR-4_6_b" lnHash="905451388" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="905451388" unbViolId="663fead4-1036-39e3-b35b-1dcd8c27021e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d7d96245-a180-3b54-af15-f9e57da12282" locEndPos="5" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="HICPP-3_5_1-b" lnHash="905451388" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="905451388" unbViolId="bba0aae6-b071-3636-9cf6-6281f5867cba" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06a8693b-469e-36f6-ae2a-97f75712e506" locEndPos="5" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="4" auth="lyao" locRef="5" rule="MISRA2008-3_9_2" lnHash="905451388" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="905451388" unbViolId="f2867863-cf47-3fd6-9374-27560fa11122" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b8a1a83-68a8-3c57-ac18-9f7db7e087e2" locEndPos="5" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="MISRA-013" lnHash="905451388" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="905451388" unbViolId="6d7ef451-2eef-3902-834b-7c5d50835e5a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="afd82c34-7c1a-310c-9599-1c5a39239b88" locEndPos="5" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'squareDistanceTo' function should be preceded by a comment that contains the '@brief' tag" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="COMMENT-14" lnHash="905451388" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="905451388" unbViolId="ca7462d7-9b8e-370a-864e-03d98443b84a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f223f866-b81d-326e-896f-164fa28dc2c2" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'squareDistanceTo' function should be preceded by a comment that contains the '@brief' tag" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-A2_7_3-a" lnHash="905451388" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="905451388" unbViolId="4f662ce1-d564-3134-b20f-82d4c2f7b349" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9def67d7-b7ac-3c3e-9cd3-db8d7abce582" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'point' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-A2_7_3-b" lnHash="905451388" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="905451388" unbViolId="0da40ab5-dfd7-3e9a-8c6d-68348de83a6b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="682be251-5ba6-33e3-acd1-9659867f48a4" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'point' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="COMMENT-14_b" lnHash="905451388" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="905451388" unbViolId="2fdee9e0-c952-3f77-a5c6-4327be558059" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d8e1100-f7f7-3aa7-8914-0bdec026d4ae" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'squareDistanceTo' function should be preceded by a comment that contains the '@return' tag" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-A2_7_3-b" lnHash="905451388" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="905451388" unbViolId="97fd5c46-34d6-3068-ac28-dc3ff7ca70d1" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c7bf91e-e3f6-3a73-9d9c-434982cb9e6a" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'squareDistanceTo' function should be preceded by a comment that contains the '@return' tag" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="COMMENT-14_b" lnHash="905451388" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="905451388" unbViolId="f230358b-b6ab-3ba6-ad4e-26695a5712ad" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="801a8261-bc54-3793-a2d1-283c670232a0" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="'squareDistanceTo' shall be declared as unsigned int or signed int" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="PORT-13" lnHash="905451388" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="905451388" unbViolId="e02cb4b5-906c-3c25-b604-c9dc2156230a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="73f39075-6489-35be-929b-fc043f99c5d5" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Member function 'squareDistanceTo' should be declared as const" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="CODSTA-CPP-54" lnHash="905451388" rule.header="Member functions shall be declared const whenever possible" tool="c++test" lineHash="905451388" unbViolId="999178a8-1ab6-3b41-b77f-cd98a4f02ecb" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="375f5ac6-2f46-3414-a579-a9e7078d2dfc" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Member function 'squareDistanceTo' should be declared as const" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="JSF-069" lnHash="905451388" rule.header="A member function that does not affect the state of an object will be declared const" tool="c++test" lineHash="905451388" unbViolId="03daec28-3e27-3e5f-83a0-4baf955d6994" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="93060ec3-5f77-3adb-bfa6-29121a999878" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Member function 'squareDistanceTo' should be declared as const" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="HICPP-9_1_1-a" lnHash="905451388" rule.header="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" tool="c++test" lineHash="905451388" unbViolId="a0688335-b0b0-3fdd-9ae4-6c59ce9ed32a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="322edd43-4512-3ca8-b4c0-8ba0a8ef7fd4" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Member function 'squareDistanceTo' should be declared as const" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-M9_3_3-a" lnHash="905451388" rule.header="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" tool="c++test" lineHash="905451388" unbViolId="0cd23980-0875-3cc9-802a-967918ca270a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0dd1b5e-b550-33f1-b60d-629e8598e32d" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Member function 'squareDistanceTo' should be declared as const" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="CODSTA-CPP-78" lnHash="905451388" rule.header="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" tool="c++test" lineHash="905451388" unbViolId="f8548455-ff26-32c8-86fa-1fb7a7285375" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="243f4ea8-1c46-3d90-bc58-c61805abfda5" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Member function 'squareDistanceTo' should be declared as const" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="2" auth="lyao" locRef="5" rule="MISRA2008-9_3_3" lnHash="905451388" rule.header="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" tool="c++test" lineHash="905451388" unbViolId="0a147a29-8ce4-3ba0-b5ec-5912bf561e4f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f707fd0-f401-3d88-b05c-fc3eb6527f62" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'squareDistanceTo' function should be declared 'noexcept'" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-A15_4_4-a" lnHash="905451388" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="905451388" unbViolId="683314c8-705c-376e-b032-cb358eeb66a9" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f3690b4-8d57-3ced-958c-02f1c9747704" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'squareDistanceTo' function should be declared 'noexcept'" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="CODSTA-MCPP-09" lnHash="905451388" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="905451388" unbViolId="12859fdd-74bc-30e7-b771-9a817bab60bc" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="34d81c7f-d64e-3246-a5bd-144f74b09ad2" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Return type is not placed in line before function 'squareDistanceTo'" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="FORMAT-28" lnHash="905451388" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="905451388" unbViolId="2558aa5c-458f-3333-ad52-fa86d000e511" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="279e3d9e-4d5b-3bce-9344-a371fb209405" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Function 'squareDistanceTo' has Cyclomatic Complexity value: 1" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="5" auth="lyao" locRef="5" rule="METRICS-29" lnHash="905451388" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="905451388" unbViolId="dcb41f0c-9b86-3395-b276-b9a0b67fc62e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1a7d656-7e9f-3212-8bf1-cfe4e2c1cad9" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Function 'squareDistanceTo' has Essential Complexity value: 1" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="5" auth="lyao" locRef="5" rule="METRICS-33" lnHash="905451388" rule.header="Report Essential Complexity" tool="c++test" lineHash="905451388" unbViolId="5363c0f8-1139-3db3-8de3-9f71db892fbd" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8aa77985-18b3-3543-9405-4bc916aff3b7" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Naming convention not followed: squareDistanceTo" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="NAMING-17" lnHash="905451388" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="905451388" unbViolId="8ac6cd5f-247b-3258-883e-f40fb7768493" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a66f498-6a15-3729-9de1-f6459223ebf0" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The return type of the 'squareDistanceTo' function should be declared as 'auto'" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="2" auth="lyao" locRef="5" rule="CODSTA-MCPP-08_b" lnHash="905451388" rule.header="Prefer 'auto' to explicit type names for function return types" tool="c++test" lineHash="905451388" unbViolId="9267a308-b2e6-36ee-901f-20d5429bbdef" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79c6926d-fa62-3f4e-89b9-06964ff52604" locEndPos="9" locType="sr" urgent="true" hash="1950870755" locEndLn="19" goals="1,"/>
    <StdViol msg="The definition of the 'squareDistanceTo' function is not preceded by a comment" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="COMMENT-04" lnHash="905451388" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="905451388" unbViolId="e6a8f2b9-aa32-3a91-b273-b478ef15edda" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b26bbaf8-55b6-3baa-a1ec-5bfee5e84f92" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The definition of the 'squareDistanceTo' function is not preceded by a comment" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="4" auth="lyao" locRef="5" rule="JSF-134" lnHash="905451388" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="905451388" unbViolId="e15216c9-a898-30b6-ae80-d3281bea73fe" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74855e1b-430f-3404-91bd-de3562ee20ba" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The name 'squareDistanceTo' should be composed only of lowercase letters" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="JSF-051" lnHash="905451388" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="905451388" unbViolId="a57a2e3b-1597-3e83-85ad-0f63c92f314d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed384092-3281-3d76-a428-87b27f3e3b69" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The name 'squareDistanceTo' should be composed only of lowercase letters" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="NAMING-44" lnHash="905451388" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="905451388" unbViolId="76a75148-59f2-34a1-817c-e10e2ec73030" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="348f6025-afe4-3be3-bdbf-390b9d80917f" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'const' qualifier should be placed on the right hand side of the type" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="FORMAT-47_a" lnHash="905451388" rule.header="Place CV-qualifiers on the right hand side of the type they apply to" tool="c++test" lineHash="905451388" unbViolId="19d680ff-eb51-3390-8af4-f0b861edd6ca" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ea5962ad-fc91-3334-8104-a646774dadf7" locEndPos="26" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'const' qualifier should be placed on the right hand side of the type" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="HICPP-7_1_4-a" lnHash="905451388" rule.header="Place CV-qualifiers on the right hand side of the type they apply to" tool="c++test" lineHash="905451388" unbViolId="a2dc86ed-dc57-34e7-94ee-50327094b499" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8449616e-aa05-386d-9edb-3abd088c070d" locEndPos="26" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The identifier 'point' differs only by case from identifier 'POINT' declared in file 'windef.h'" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="NAMING-45" lnHash="905451388" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="905451388" unbViolId="c6219835-9f84-3373-97d5-ba75cd19a92e" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a215e8e6-ecc1-3b0f-9606-2deee1aea1cb" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The identifier 'point' differs only by case from identifier 'POINT' declared in file 'windef.h'" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="JSF-048" lnHash="905451388" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="905451388" unbViolId="d5994f89-b8ee-3b12-9d09-2bdebcdd705e" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="80366e52-78b2-37ff-9817-3da10901d7c0" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="NAMING-45" lnHash="905451388" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="905451388" unbViolId="3c4db69e-179d-3c91-ab56-c1b875bcbbf1" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3146fe3-966a-361a-b54c-b9f41cf302a6" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="JSF-048" lnHash="905451388" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="905451388" unbViolId="7bba87f0-d195-384a-a4cb-dd91de17ecbc" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37920fc6-728a-3f64-992c-18029ef7c9fe" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from identifier name: 'Point' ( line: '4')" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="2" auth="lyao" locRef="5" rule="MISRA2008-2_10_1" lnHash="905451388" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="905451388" unbViolId="e7b8567c-1fbc-3851-af58-b73d85a69186" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f51c59c-8b78-3292-a7c6-fccf2d6f74d1" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from identifier name: 'Point' ( line: '4')" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="HICPP-2_4_1-a" lnHash="905451388" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="905451388" unbViolId="f6e7a6ce-fd08-3f89-803c-a0027a2adc8b" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09c11498-ef67-353c-aa34-2509d78babe9" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from identifier name: 'Point' ( line: '4')" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-M2_10_1-a" lnHash="905451388" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="905451388" unbViolId="98226e1b-b2f1-3bf5-9f46-a41bf67104c6" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4bb6faf9-4222-3e6a-9ebc-73b125b877df" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from identifier name: 'Point' ( line: '4')" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="NAMING-47" lnHash="905451388" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="905451388" unbViolId="4f5556ab-a7a0-324e-a160-321ed94d108d" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a2422e1-ca4d-3980-88c8-4f0d3450fa85" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from identifier name: 'Point' declared in class" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="2" auth="lyao" locRef="5" rule="MISRA2008-2_10_1" lnHash="905451388" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="905451388" unbViolId="ad950033-9c21-3faf-90a3-bea823757d2f" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="befd3b30-04de-36f3-a925-37564033a815" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from identifier name: 'Point' declared in class" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="HICPP-2_4_1-a" lnHash="905451388" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="905451388" unbViolId="1a880ee1-2c8d-3625-a65b-9170a1e3d0b9" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0607e106-6685-398e-93eb-1d50327ba9c6" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from identifier name: 'Point' declared in class" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-M2_10_1-a" lnHash="905451388" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="905451388" unbViolId="69f4700c-9076-30b5-b427-b28a02c62bf8" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="19e0cf26-e44b-3203-8461-f8a5cbec3f65" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from identifier name: 'Point' declared in class" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="NAMING-47" lnHash="905451388" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="905451388" unbViolId="42c69a9f-8793-3508-8cbf-7bdb194e7752" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="733ffb1a-144c-3929-b247-14a04faad8bd" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="2" auth="lyao" locRef="5" rule="MISRA2008-2_10_1" lnHash="905451388" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="905451388" unbViolId="a102eebb-5685-3f1b-8af0-73c60e22722e" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6bc26510-b09a-395c-8fde-fb0b442fb767" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="HICPP-2_4_1-a" lnHash="905451388" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="905451388" unbViolId="0385d65e-1b12-3fb3-afe5-32691e3805c3" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="994fca6a-19ba-3c50-9e25-119c2c15cd9e" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-M2_10_1-a" lnHash="905451388" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="905451388" unbViolId="bebb313e-a98a-36ae-96bf-47ac994532c7" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc796af9-4d38-3a09-b619-f510efc7a555" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="NAMING-47" lnHash="905451388" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="905451388" unbViolId="5f9111b3-e236-351e-92a6-f1d9a3827c21" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f751b4b-009a-37be-8e83-f90e50d0e8a1" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Consider passing the 'point' parameter by value instead of by const reference" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="2" auth="lyao" locRef="5" rule="AUTOSAR-A8_4_7-a" lnHash="905451388" rule.header="A parameter of const reference to a 'cheap to copy' type should be passed by value" tool="c++test" lineHash="905451388" unbViolId="fe9a67c4-218d-3f9e-8c89-cfd8a187a7bc" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ead3424-6a63-3003-afd0-2dbdf03baf13" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'point' parameter should be passed by value instead of by const reference" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="HICPP-8_2_3-a" lnHash="905451388" rule.header="Pass small objects with a trivial copy constructor by value" tool="c++test" lineHash="905451388" unbViolId="f3519473-277a-3a4d-832d-e3a703ab67dd" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="092681fd-e6d1-3453-8bce-18156ef80864" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Parameter 'point' is not validated before use" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="CERT_C-API00-a" lnHash="905451388" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="905451388" unbViolId="8b48218b-8770-3a75-866f-66f57b55045a" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="320b79be-91e6-31d3-a250-247fe6a092db" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Parameter 'point' is not validated before use" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="CODSTA-86" lnHash="905451388" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="905451388" unbViolId="185b0ce5-cd97-37d4-a005-18e4b95ef5d3" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a4eacfb-55b7-3f89-bcc1-39a280aa5f65" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'point' identifier should have the 'k' prefix" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="NAMING-HN-11" lnHash="905451388" rule.header="Hungarian notation for constant parameters" tool="c++test" lineHash="905451388" unbViolId="27b1c638-c378-3acd-a9da-8619131a276f" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12970f10-9ad7-3c0e-92c9-a5160dea666a" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'point' identifier should have the 'r' prefix" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="19" sev="3" auth="lyao" locRef="5" rule="NAMING-HN-35" lnHash="905451388" rule.header="Hungarian notation for reference parameters" tool="c++test" lineHash="905451388" unbViolId="a24701ef-98f4-3c49-bb91-1ceca9975fca" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7be15cd-ead9-3c2e-a6ab-d40d7b2f6822" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="20" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="20" sev="3" auth="lyao" locRef="5" rule="METRICS-19" lnHash="30537851" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="30537851" unbViolId="69835ab7-eb1b-3b7a-81fd-b8b8640ad755" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bba164e7-049d-358a-82e7-5958a7f08adf" locEndPos="1" locType="sr" hash="1950870755" locEndLn="20" goals="0,"/>
    <StdViol msg="Line has over 79 characters" ln="21" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="21" sev="3" auth="lyao" locRef="5" rule="FORMAT-04" lnHash="150478121" rule.header="Physical lines should be less than eighty characters" tool="c++test" lineHash="150478121" unbViolId="b0307283-0f71-339c-9eee-f6d1272e2834" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b938e779-7f2b-3035-b4df-19ca10a2efdb" locEndPos="1" locType="sr" hash="1950870755" locEndLn="21" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="21" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="21" sev="4" auth="lyao" locRef="5" rule="JSF-043" lnHash="150478121" rule.header="Tabs should be avoided" tool="c++test" lineHash="150478121" unbViolId="dfe6680e-ed10-3368-9b49-aff3f4cb1ca0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="475c2e33-0aa4-39f6-bf92-71cc3c6c5ade" locEndPos="5" locType="sr" hash="1950870755" locEndLn="21" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="21" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="21" sev="5" auth="lyao" locRef="5" rule="FORMAT-01" lnHash="150478121" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="150478121" unbViolId="f560655f-2875-36e6-a59b-2d50de73d95a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f7f5653-b429-3fad-8d58-33686c126578" locEndPos="5" locType="sr" hash="1950870755" locEndLn="21" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="21" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="21" sev="5" auth="lyao" locRef="5" rule="HICPP-2_1_1-a" lnHash="150478121" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="150478121" unbViolId="ce3e6a51-2385-3edd-ba79-206258639062" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9abbda2-aece-31e5-b2c6-31bdd41e51a2" locEndPos="5" locType="sr" hash="1950870755" locEndLn="21" goals="0,"/>
    <StdViol msg="'return' statement should be used with parenthesis" ln="21" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="21" sev="3" auth="lyao" locRef="5" rule="FORMAT-25_b" lnHash="150478121" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="150478121" unbViolId="265f7eba-e3f8-3feb-9e7f-62c05e449245" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c872aa39-b58c-3830-af11-b5fb4e6f8bd2" locEndPos="6" locType="sr" hash="1950870755" locEndLn="21" goals="0,"/>
    <StdViol msg="Use // comments only" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="25" sev="3" auth="lyao" locRef="5" rule="HICPP-2_3_1-a" lnHash="1963129393" rule.header="Prefer C++ style comment" tool="c++test" lineHash="1963129393" unbViolId="e6863149-a2a9-303d-9faa-99c105207ff9" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="994d68a9-2dee-3e12-99b3-2f38b1030b3e" locEndPos="8" locType="sr" hash="1950870755" locEndLn="25" goals="0,"/>
    <StdViol msg="Use // comments only" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="25" sev="2" auth="lyao" locRef="5" rule="JSF-126" lnHash="1963129393" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="1963129393" unbViolId="06b73586-ad6f-3b60-8e2b-34f8a3782420" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2733ce2d-0eed-3271-bd54-abeb5cfe8a45" locEndPos="8" locType="sr" hash="1950870755" locEndLn="25" goals="0,"/>
    <StdViol msg="Use // comments only" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locStartln="25" sev="3" auth="lyao" locRef="5" rule="COMMENT-01" lnHash="1963129393" rule.header="Prefer C++ style comment" tool="c++test" lineHash="1963129393" unbViolId="b6d049f2-41cb-3897-be07-a3bc8cacc24f" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cfe4d8f5-a0bf-3c23-8098-fa75238cadb5" locEndPos="8" locType="sr" hash="1950870755" locEndLn="25" goals="0,"/>
    <StdViol msg="Add comment containing the copyright information at the begin of file 'Shapes.hpp'" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="1" sev="3" auth="lyao" locRef="6" rule="COMMENT-02" lnHash="-290124037" rule.header="Provide copyright information" tool="c++test" lineHash="-290124037" unbViolId="a9279055-9844-3946-b8d6-81d8985a3f3b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9066a191-96b6-3d88-8b23-f6e6e105e6d3" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the copyright information at the begin of file 'Shapes.hpp'" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="1" sev="3" auth="lyao" locRef="6" rule="JSF-133_b" lnHash="-290124037" rule.header="Every source file will contain copyright information" tool="c++test" lineHash="-290124037" unbViolId="932b4ff4-6062-3316-9063-fc128e9a7f86" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d8f976e-6371-3c51-a560-7df3bfc187bb" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the information on the file at the begin of file 'Shapes.hpp'" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="1" sev="3" auth="lyao" locRef="6" rule="COMMENT-03" lnHash="-290124037" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="-290124037" unbViolId="2b1d1dd1-d3db-3817-a6d9-622d4cb86f39" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="560c8d24-8b7e-388f-bf47-e83df694ce14" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the information on the file at the begin of file 'Shapes.hpp'" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="1" sev="3" auth="lyao" locRef="6" rule="JSF-133_a" lnHash="-290124037" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="-290124037" unbViolId="c42b660e-846e-3f9f-88eb-21ccc52b3bc1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a262e736-e0b5-3112-a12a-01acee289053" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="The assertion density is lower than two assertions per function" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="1" sev="3" auth="lyao" locRef="6" rule="METRICS-31" lnHash="-290124037" rule.header="The assertion density of the code should average to a minimum of two assertions per function" tool="c++test" lineHash="-290124037" unbViolId="6443ba0d-7a82-3430-9f3e-e55c65bb03d1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="110cd4f9-7069-37c3-b3e0-d597133ed234" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="The filename 'Shapes.hpp' should be in lowercase" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="1" sev="3" auth="lyao" locRef="6" rule="NAMING-03" lnHash="-290124037" rule.header="Use lowercase for file names" tool="c++test" lineHash="-290124037" unbViolId="3206f1f2-7786-33f1-8f44-3baac0ab7da4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cda1a828-0f05-31ee-a372-bc726d8bb74d" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="Header file 'Shapes.hpp' should have the file name extension &quot;.hh&quot;" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="1" sev="3" auth="lyao" locRef="6" rule="NAMING-37" lnHash="-290124037" rule.header="Include files in C++ always have the file name extension '.hh'" tool="c++test" lineHash="-290124037" unbViolId="0d5059fe-45b6-3ed3-9781-cbc11fa6cf5e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70d54831-f9eb-33cc-b36d-806df0d050c1" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="Header file 'Shapes.hpp' should have the file name extension &quot;.h&quot;" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="1" sev="3" auth="lyao" locRef="6" rule="JSF-053" lnHash="-290124037" rule.header="Header files will always have a file name extension of &quot;.h&quot;" tool="c++test" lineHash="-290124037" unbViolId="dcb24c7f-c125-3cb6-98d7-199e9899ab5e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ac35152-c6e4-3f6d-9c95-361c90a98866" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="Header file 'Shapes.hpp' should have the file name extension &quot;.h&quot;" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="1" sev="3" auth="lyao" locRef="6" rule="NAMING-41" lnHash="-290124037" rule.header="Header files will always have a file name extension of '.h'" tool="c++test" lineHash="-290124037" unbViolId="7807730e-c54e-3caf-945c-6b166141e8f8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7bba6a1-2902-34a4-9a2a-a1992b74ad01" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="'Shapes.hpp' filename extension does not adhere to naming conventions" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="1" sev="3" auth="lyao" locRef="6" rule="NAMING-43" lnHash="-290124037" rule.header="File name extension, if present, should be &quot;*.cpp&quot; or &quot;*.h&quot;" tool="c++test" lineHash="-290124037" unbViolId="657cdb46-4d16-36f8-8ed4-1978bab41676" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6931018b-6a00-3758-befb-5fb975347d1f" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="File 'Shapes.hpp' contains more than one class definition" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="1" sev="3" auth="lyao" locRef="6" rule="PFO-03" lnHash="-290124037" rule.header="An include file should not contain more than one class definition" tool="c++test" lineHash="-290124037" unbViolId="5c2c8589-b851-30f4-8099-13e475ca0029" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b9f7390-d152-392d-bcea-6f1a1e4fd6ba" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="SHAPES_HPP macro name should appear as first #ifndef or #if preprocessor directive" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="1" sev="3" auth="lyao" locRef="6" rule="PFO-07" lnHash="-290124037" rule.header="Use multiple include guards with pattern based on the header file name" tool="c++test" lineHash="-290124037" unbViolId="f6381012-f47c-328a-8974-7309cc9f8748" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ec6008e8-0345-3131-872b-5309d1397e67" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="Header file 'Shapes.hpp' contains more than one class declaration: 'Shape, LineSegment, Circle'" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="1" sev="3" auth="lyao" locRef="6" rule="PFO-10" lnHash="-290124037" rule.header="Do not define more than on class in a header file" tool="c++test" lineHash="-290124037" unbViolId="6c22d5f8-1152-396a-bd18-138a3a19d2a0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="874fc879-245d-3f14-8328-ebd31efb0b65" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="File 'Shapes.hpp'  should have the &quot;.icc&quot; file name extension" ln="1" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="1" sev="3" auth="lyao" locRef="6" rule="NAMING-39" lnHash="-290124037" rule.header="Inline definition files always have the file name extension &quot;.icc&quot;" tool="c++test" lineHash="-290124037" unbViolId="4c2d2168-0f74-3487-8d19-322f60590270" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b070701-9edc-3174-bc91-2108fffa1091" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Point.hpp&quot;" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="4" sev="3" auth="lyao" locRef="6" rule="JSF-032" lnHash="-1179647073" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="-1179647073" unbViolId="869a16c6-4b7a-39fc-9640-caf2c343b266" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="710925b7-8581-3f1a-8b5e-b2297690c276" locEndPos="1" locType="sr" hash="1537905639" locEndLn="4" goals="0,"/>
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Point.hpp&quot;" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="4" sev="3" auth="lyao" locRef="6" rule="PREPROC-08" lnHash="-1179647073" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="-1179647073" unbViolId="6fb3a00f-ff0c-33fa-b162-21eb4e370d88" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e594eba0-e79d-32c2-84ae-86a80d791f34" locEndPos="1" locType="sr" hash="1537905639" locEndLn="4" goals="0,"/>
    <StdViol msg="Disallowed #include notation is being used: &quot;Point.hpp&quot;" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="4" sev="2" auth="lyao" locRef="6" rule="PREPROC-09" lnHash="-1179647073" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="-1179647073" unbViolId="36cdfd30-9ca7-3361-9d3b-62349724681e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1d4c2b6-78f5-31fb-a84f-1e87992e06e8" locEndPos="1" locType="sr" hash="1537905639" locEndLn="4" goals="0,"/>
    <StdViol msg="Disallowed #include notation is being used: &quot;Point.hpp&quot;" ln="4" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="4" sev="2" auth="lyao" locRef="6" rule="JSF-033" lnHash="-1179647073" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="-1179647073" unbViolId="f59fdb3b-eb73-3a2c-be17-e9784a9d62c6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="20514755-8159-394f-a389-10fdd37c57b8" locEndPos="1" locType="sr" hash="1537905639" locEndLn="4" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="3" auth="lyao" locRef="6" rule="FORMAT-02" lnHash="399430900" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="399430900" unbViolId="9f176a64-cb4a-302e-9151-ab54b7599fdb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e38e4879-d789-3fdf-98e3-df5057ef1bf3" locEndPos="1" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="3" auth="lyao" locRef="6" rule="FORMAT-34" lnHash="399430900" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="399430900" unbViolId="db05a0f3-9a14-3095-a5b6-8806a438fe40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="82c849fe-754f-30b4-8d05-b7557f55cfc4" locEndPos="1" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Do not declare the 'Shape' type in the global namespace" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="4" auth="lyao" locRef="6" rule="JSF-098" lnHash="399430900" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="399430900" unbViolId="7a243121-09ae-36ce-b75b-aa7fd290f8b9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d11be33f-0232-3536-8e2d-4fea155eb54a" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Do not declare the 'Shape' type in the global namespace" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-M7_3_1-a" lnHash="399430900" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="399430900" unbViolId="06c071db-2041-344c-ba8b-51e6ff6b6a9f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8e0a5787-2dea-301f-9db2-f50d05e48ed4" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Do not declare the 'Shape' type in the global namespace" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="3" auth="lyao" locRef="6" rule="CODSTA-CPP-36" lnHash="399430900" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="399430900" unbViolId="3e69d682-cbae-34c0-8dca-ddb8b90574e1" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="348a3635-5060-3fca-a58f-da3da61ec1cb" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Do not declare the 'Shape' type in the global namespace" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="2" auth="lyao" locRef="6" rule="MISRA2008-7_3_1" lnHash="399430900" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="399430900" unbViolId="271152d8-97b7-37ac-8e33-d63c219319b5" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c8dd86d-cc63-3d08-912b-599867a83144" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="The declaration of the 'Shape' type should be preceded by a comment that contains the '@brief' tag" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="3" auth="lyao" locRef="6" rule="COMMENT-14" lnHash="399430900" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="399430900" unbViolId="3437acf2-c7bc-3fb4-ba51-d253fbeec9e0" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d97a3c2-5647-3d86-828f-ea64df9a826f" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="The declaration of the 'Shape' type should be preceded by a comment that contains the '@brief' tag" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="399430900" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="399430900" unbViolId="7471e2a5-d4c8-3986-9fc5-4d1e16444322" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6f5575b-6d7a-3648-ba9f-63217c1ec0bd" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Public section must be before protected and private sections" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="3" auth="lyao" locRef="6" rule="JSF-057_a" lnHash="399430900" rule.header="The public section of a class will be declared before the protected section and before the private section" tool="c++test" lineHash="399430900" unbViolId="0f6d3088-bd1f-3cc0-8c46-3ad4a6a892a3" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e2bc25b-a1ba-3a8f-95d2-adb87429c352" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Public section must be before protected and private sections" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="3" auth="lyao" locRef="6" rule="CODSTA-CPP-46" lnHash="399430900" rule.header="Order of scopes in class: public before all others" tool="c++test" lineHash="399430900" unbViolId="7f41da4c-9668-3ff9-8f1e-ccf2af73f95f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0e6c691-0692-39f8-bb03-c0189c1ef95b" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Protected section must be before private section" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="3" auth="lyao" locRef="6" rule="JSF-057_b" lnHash="399430900" rule.header="The protected section of a class will be declared before the private section" tool="c++test" lineHash="399430900" unbViolId="8157bbb9-8655-30b8-84b5-4b31a3763e31" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="765133ab-6bd7-376a-8ff3-fafb9d994b84" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Protected section must be before private section" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="3" auth="lyao" locRef="6" rule="CODSTA-CPP-47" lnHash="399430900" rule.header="Order of scopes in classes: protected before private" tool="c++test" lineHash="399430900" unbViolId="6cb022c0-371f-3cd0-843f-d3f4e77db79b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90663846-59d3-3b3d-a510-b6c098649977" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Class 'Shape' should be final" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="4" auth="lyao" locRef="6" rule="AUTOSAR-A12_4_2-a" lnHash="399430900" rule.header="If a public destructor of a class is non-virtual, then the class should be declared final" tool="c++test" lineHash="399430900" unbViolId="aa6ed9b7-ef1c-3b7b-a6e7-8184c81b2c5a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2479bb20-4270-3b7f-9e67-9a2350bd9dda" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Class 'Shape' should be final" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="3" auth="lyao" locRef="6" rule="CODSTA-MCPP-23" lnHash="399430900" rule.header="If a public destructor of a class is non-virtual, then the class should be declared final" tool="c++test" lineHash="399430900" unbViolId="19dc9da3-a04c-3315-a75c-891acc0ba29e" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b0cda38-4529-3475-91d6-bc83cf7ef462" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Explicitly declare default constructor in 'Shape'" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="3" auth="lyao" locRef="6" rule="HICPP-12_5_1-a" lnHash="399430900" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="399430900" unbViolId="d18b76cd-e9fd-3e0c-b40f-197c49f71fcf" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c3413dd-f311-38ea-b42e-4ea236641e32" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Explicitly declare destructor in 'Shape'" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="3" auth="lyao" locRef="6" rule="HICPP-12_5_1-a" lnHash="399430900" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="399430900" unbViolId="93751bcc-0a6b-3e66-b47f-95aa0ae8ebd9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7caa47a7-4f3c-3929-9cff-ebed88da43fe" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Explicitly declare copy assignment operator in 'Shape'" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="3" auth="lyao" locRef="6" rule="HICPP-12_5_1-a" lnHash="399430900" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="399430900" unbViolId="18510fad-5fa5-3ff0-adda-8dfb509d7d11" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="11a53770-5442-3cd0-9d5d-e248326c9a72" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Explicitly declare move assignment operator in 'Shape'" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="3" auth="lyao" locRef="6" rule="HICPP-12_5_1-a" lnHash="399430900" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="399430900" unbViolId="8719f8f3-7033-3d40-bb2f-d39e081b34fb" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d02b12f0-7318-3cc9-a5c1-8637b2958dbe" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Explicitly declare copy constructor in 'Shape'" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="3" auth="lyao" locRef="6" rule="HICPP-12_5_1-a" lnHash="399430900" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="399430900" unbViolId="2053cc90-0668-347f-9d2d-9f0788938eb2" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78621ce7-c43c-3cde-ad78-04ae5cc12c76" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Explicitly declare move constructor in 'Shape'" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="3" auth="lyao" locRef="6" rule="HICPP-12_5_1-a" lnHash="399430900" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="399430900" unbViolId="035c4dbd-7b76-3567-bb81-126ee9163df8" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55a9a4c4-6216-3cd5-9fa8-9ad767f00151" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Class 'Shape' missing assignment operator or special comment" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="3" auth="lyao" locRef="6" rule="MRM-04" lnHash="399430900" rule.header="All classes should contain the assignment operator or appropriate comment" tool="c++test" lineHash="399430900" unbViolId="a2a23ee5-a46f-3025-b517-2ee8514e0efe" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="df48bd63-a895-328d-9de4-2787e7c9611d" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Class 'Shape' missing copy constructor or special comment" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="3" auth="lyao" locRef="6" rule="MRM-05" lnHash="399430900" rule.header="All classes should contain the copy constructor or appropriate comment" tool="c++test" lineHash="399430900" unbViolId="ea23e5e3-7971-3bed-999a-0263f921868c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f40adab-4dcf-3777-98dc-00bb15b1a265" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Class 'Shape' missing assignment operator or special comment" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="3" auth="lyao" locRef="6" rule="MRM-47" lnHash="399430900" rule.header="Classes containing at least one non-static member variable should declare the assignment operator or contain appropriate comment" tool="c++test" lineHash="399430900" unbViolId="61e26c2c-4dda-3468-a42b-ba4d954e97a6" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9accb77c-204a-3d7b-b0dc-57d2be389a0c" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Class 'Shape' missing copy constructor or special comment" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="3" auth="lyao" locRef="6" rule="MRM-48" lnHash="399430900" rule.header="Classes containing at least one non-static member variable should declare the copy constructor or contain appropriate comment" tool="c++test" lineHash="399430900" unbViolId="cbf73e76-27a7-3dbe-8f84-341dac6ef012" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23815177-4ca3-3e14-ad3c-62af6e1b285f" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="The 'Shape' identifier should have the 'C' prefix" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="3" auth="lyao" locRef="6" rule="NAMING-HN-19" lnHash="399430900" rule.header="Hungarian notation for class declaration" tool="c++test" lineHash="399430900" unbViolId="dd0c13e6-9682-351e-a827-5f61f80d6ab9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c49d34b-469d-335c-bfce-7470a185ec05" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Class 'Shape' has virtual functions without a virtual destructor" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="2" auth="lyao" locRef="6" rule="OOP-23" lnHash="399430900" rule.header="If a class has virtual functions it shall have a virtual destructor" tool="c++test" lineHash="399430900" unbViolId="0e9e3312-35ad-325c-93a9-200f92ee84ef" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8e7c1acd-c203-3eec-b9ad-852fa46e9086" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="In a class 'Shape' number of accessor functions (2) exceeds number of member variables (1)" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="4" auth="lyao" locRef="6" rule="OPT-27" lnHash="399430900" rule.header="The number of accessor and mutator functions should be minimized" tool="c++test" lineHash="399430900" unbViolId="cf605d39-55be-324b-9c08-2f233054dfdc" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="60d778a6-b821-3d19-8d85-f4e57c148cda" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Put base class 'Shape' into separate file" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="3" auth="lyao" locRef="6" rule="CODSTA-CPP-12" lnHash="399430900" rule.header="Put classes that are used as base classes and classes that are used as member variables into separate include files" tool="c++test" lineHash="399430900" unbViolId="a06660c0-e46d-30ab-b815-ac07b603b66c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8daf51f7-2648-34b3-80e2-389c3583fd32" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Class 'Shape' must define a virtual destructor" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="1" auth="lyao" locRef="6" rule="OOP-22" lnHash="399430900" rule.header="Define a virtual destructor in classes used as base classes which have virtual functions" tool="c++test" lineHash="399430900" unbViolId="a53a22d0-38d1-3aeb-8b41-485f4e35a159" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="209b4300-2373-3bd5-88f4-affdcf2957c2" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Class 'Shape' must define a virtual destructor" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="1" auth="lyao" locRef="6" rule="CWE-772-b" lnHash="399430900" rule.header="Define a virtual destructor in classes used as base classes which have virtual functions" tool="c++test" lineHash="399430900" unbViolId="d141a8d8-c228-3ff6-b56d-9b0c820808ce" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b4d613e-9425-35da-b088-5dda454c3a26" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Class 'Shape' must define a virtual destructor" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="2" auth="lyao" locRef="6" rule="CERT_CPP-OOP52-a" lnHash="399430900" rule.header="Define a virtual destructor in classes used as base classes which have virtual functions" tool="c++test" lineHash="399430900" unbViolId="6586a943-1ab3-331a-8421-e0cf6b1f651c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="81b9c8ef-0c35-3421-9a35-b1eb224f5f1f" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Class 'Shape' must define a virtual destructor" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="2" auth="lyao" locRef="6" rule="JSF-078" lnHash="399430900" rule.header="All base classes with a virtual function shall define a virtual destructor" tool="c++test" lineHash="399430900" unbViolId="0d38d885-057d-3e83-8be3-41ef492c2278" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="56f41f34-5e87-3ffd-b4ad-3db49761ebc2" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="The type name 'Shape' is not a unique identifier in the testing scope" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="2" auth="lyao" locRef="6" rule="MISRA2012-RULE-5_7_a" lnHash="399430900" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="399430900" unbViolId="3d4bd352-929b-3256-9b47-f9a764d26ece" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="ee959b09-1cf3-3b6f-87f1-71ec11f4f16d" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="The type name 'Shape' is not a unique identifier in the testing scope" ln="6" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="6" sev="2" auth="lyao" locRef="6" rule="MISRAC2012-RULE_5_7-a" lnHash="399430900" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="399430900" unbViolId="1ffef57e-426a-3946-b646-af2c68da23e5" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="fc98c7eb-5791-3367-b1dc-336fd000395c" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="7" sev="4" auth="lyao" locRef="6" rule="JSF-043" lnHash="-1878228628" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1878228628" unbViolId="06c7504e-44cb-3b69-88a4-839856ffa701" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b1facf4-7bc1-34d6-ad82-836d4117eff5" locEndPos="1" locType="sr" hash="1537905639" locEndLn="7" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="7" sev="5" auth="lyao" locRef="6" rule="FORMAT-01" lnHash="-1878228628" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1878228628" unbViolId="c705f560-edca-3631-bf5b-caf57278a32a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ca80fc2-cfc0-3d34-bd48-a45acd467f22" locEndPos="1" locType="sr" hash="1537905639" locEndLn="7" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="7" sev="5" auth="lyao" locRef="6" rule="HICPP-2_1_1-a" lnHash="-1878228628" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1878228628" unbViolId="b37f6506-918a-3a5c-8609-e6e5be08875c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5153f19e-3d88-37f9-a9b9-9ab69eea4ff2" locEndPos="1" locType="sr" hash="1537905639" locEndLn="7" goals="0,"/>
    <StdViol msg="The '_position' member variable should be preceded by a comment that contains the '@brief' tag" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="7" sev="3" auth="lyao" locRef="6" rule="COMMENT-14" lnHash="-1878228628" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1878228628" unbViolId="79b38fef-1228-344a-b5ef-7437f9ee4e5c" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38854c42-6f43-332b-b1e6-094258a17f0a" locEndPos="8" locType="sr" hash="1537905639" locEndLn="7" goals="0,"/>
    <StdViol msg="The '_position' member variable should be preceded by a comment that contains the '@brief' tag" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="7" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="-1878228628" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1878228628" unbViolId="506a4d9c-2ded-39c4-b223-cfa96c321090" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0c591e77-81a8-3a66-bef6-9e22758831a4" locEndPos="8" locType="sr" hash="1537905639" locEndLn="7" goals="0,"/>
    <StdViol msg="Member variable '_position' shall begin with a lowercase letter" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="7" sev="3" auth="lyao" locRef="6" rule="NAMING-07" lnHash="-1878228628" rule.header="Begin member variable names with a lowercase letters" tool="c++test" lineHash="-1878228628" unbViolId="e9a10393-b98d-3312-a2f7-1443875a6b39" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5375a1c-c722-3840-98fa-ba33a786890c" locEndPos="8" locType="sr" hash="1537905639" locEndLn="7" goals="0,"/>
    <StdViol msg="Naming convention not followed: _position" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="7" sev="3" auth="lyao" locRef="6" rule="NAMING-14" lnHash="-1878228628" rule.header="Begin class data member names with 'its'" tool="c++test" lineHash="-1878228628" unbViolId="915551d3-6925-34ea-a3df-a48cce4059c3" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84c2512e-6cf3-35ee-94da-9de8b6aa7d07" locEndPos="8" locType="sr" hash="1537905639" locEndLn="7" goals="0,"/>
    <StdViol msg="Using underscore at the beginning of the name '_position' is not allowed" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="7" sev="3" auth="lyao" locRef="6" rule="NAMING-33" lnHash="-1878228628" rule.header="Do not use identifiers which begin with one or two underscores (`_' or `__')" tool="c++test" lineHash="-1878228628" unbViolId="3ea7eedc-6e70-35f0-a677-f242e0ebd6c3" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43f647f8-7ce2-332c-9341-656b06bc91a7" locEndPos="8" locType="sr" hash="1537905639" locEndLn="7" goals="0,"/>
    <StdViol msg="Using underscore at the beginning of the name '_position' is not allowed" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="7" sev="3" auth="lyao" locRef="6" rule="JSF-047" lnHash="-1878228628" rule.header="Identifiers will not begin with the underscore character &quot;_&quot;" tool="c++test" lineHash="-1878228628" unbViolId="112b5a90-f1f2-3802-aef8-e3301a07bb5e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="20e0f611-62ac-3494-aec7-4d014596b0a3" locEndPos="8" locType="sr" hash="1537905639" locEndLn="7" goals="0,"/>
    <StdViol msg="The '_position' identifier should have the 'm_' prefix" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="7" sev="3" auth="lyao" locRef="6" rule="NAMING-HN-29" lnHash="-1878228628" rule.header="Hungarian notation for member variables" tool="c++test" lineHash="-1878228628" unbViolId="4ccc6abf-6846-3d84-ab73-16f72906104d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d703572-a5d8-3358-a456-2eabe29ac58a" locEndPos="8" locType="sr" hash="1537905639" locEndLn="7" goals="0,"/>
    <StdViol msg="The identifier '_position' differs only by presence/absence of the underscore character from identifier 'position' declared in file 'Shapes.hpp'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="7" sev="3" auth="lyao" locRef="6" rule="NAMING-45" lnHash="-1878228628" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-1878228628" unbViolId="528a1057-3cfc-3c8a-ac69-94a69d5c51fc" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36f24058-c942-359f-aa42-ca1629ec419d" locEndPos="8" locType="sr" hash="1537905639" locEndLn="7" goals="0,"/>
    <StdViol msg="The identifier '_position' differs only by presence/absence of the underscore character from identifier 'position' declared in file 'Shapes.hpp'" ln="7" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="7" sev="3" auth="lyao" locRef="6" rule="JSF-048" lnHash="-1878228628" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-1878228628" unbViolId="f7ca90ba-9932-3b45-8d9c-f4c04c73d1a5" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9dece15-affe-3867-b6d9-630b5346c02b" locEndPos="8" locType="sr" hash="1537905639" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="9" sev="4" auth="lyao" locRef="6" rule="MISRA2008-3_9_2" lnHash="1257077025" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1257077025" unbViolId="66f3b382-9e5e-3249-834d-467b874b702a" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5904d7c-bd43-3c08-9ec0-6eb6e56ea55a" locEndPos="13" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="9" sev="3" auth="lyao" locRef="6" rule="MISRA-013" lnHash="1257077025" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1257077025" unbViolId="279b1da5-7fc6-3d2b-b7de-cd3df33694d5" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6403f866-73cd-3a63-8971-07fe5e7d8370" locEndPos="13" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="9" sev="4" auth="lyao" locRef="6" rule="MISRAC2012-DIR_4_6-b" lnHash="1257077025" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1257077025" unbViolId="d660a511-0956-3361-bc58-37cbcb8d0dd3" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="171844f3-a455-3cbb-a783-cc141132f64e" locEndPos="13" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="9" sev="2" auth="lyao" locRef="6" rule="JSF-209_b" lnHash="1257077025" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1257077025" unbViolId="7a798ebc-dd5f-3ff8-90c5-8b405f90f690" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="73014565-4c96-3f6b-8fe9-93c43a0da401" locEndPos="13" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="9" sev="3" auth="lyao" locRef="6" rule="MISRA2004-6_3_b" lnHash="1257077025" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1257077025" unbViolId="8e1b0f35-9213-3b00-9521-4673e717817e" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="93470b5c-6b6b-3784-aa2b-38091fb659eb" locEndPos="13" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="9" sev="4" auth="lyao" locRef="6" rule="MISRA2012-DIR-4_6_b" lnHash="1257077025" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1257077025" unbViolId="74d10673-8ea6-3b0c-bfe2-c687af5b7d97" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92153c64-385b-3953-ac9a-d1380076d1af" locEndPos="13" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="9" sev="3" auth="lyao" locRef="6" rule="HICPP-3_5_1-b" lnHash="1257077025" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1257077025" unbViolId="10e2c8fd-1422-3e40-8039-5efb9b56129a" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba3a80fc-e140-39f6-8816-e4ecaba07bed" locEndPos="13" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The declaration of the 'getArea' function is not preceded by a comment" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="9" sev="4" auth="lyao" locRef="6" rule="JSF-134_b" lnHash="1257077025" rule.header="Document functions in comments that precede function declarations" tool="c++test" lineHash="1257077025" unbViolId="c817b402-e716-3a84-825b-f29a0b0af6ce" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2dfd4516-42d6-33f2-985a-18a352a92261" locEndPos="20" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The declaration of the 'getArea' function is not preceded by a comment" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="9" sev="3" auth="lyao" locRef="6" rule="COMMENT-04_b" lnHash="1257077025" rule.header="Document functions in comments that precede function declarations" tool="c++test" lineHash="1257077025" unbViolId="170902e7-ec87-3064-8e26-767db2d8c895" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af1c152f-952a-36a4-b901-6fbd9b2558e5" locEndPos="20" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The 'getArea' function should be preceded by a comment that contains the '@brief' tag" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="9" sev="3" auth="lyao" locRef="6" rule="COMMENT-14" lnHash="1257077025" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1257077025" unbViolId="df10b207-be87-3db8-9873-4b1609a08d3a" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bfae3506-cabb-30b4-b6c1-38b73ac6f5d1" locEndPos="20" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The 'getArea' function should be preceded by a comment that contains the '@brief' tag" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="9" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="1257077025" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1257077025" unbViolId="e483556c-1529-3a05-ac9d-db72fe84ecc5" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="124928c9-3c21-344a-affc-cdce22744ae7" locEndPos="20" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The 'getArea' function should be preceded by a comment that contains the '@return' tag" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="9" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="1257077025" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1257077025" unbViolId="b24aa45c-85e7-3fc7-ac43-9f450ba0f746" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c60bb845-8d4c-37e3-ba44-d143491ab84b" locEndPos="20" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The 'getArea' function should be preceded by a comment that contains the '@return' tag" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="9" sev="3" auth="lyao" locRef="6" rule="COMMENT-14_b" lnHash="1257077025" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1257077025" unbViolId="c2153baa-cf21-393a-8df9-350865a9ddf0" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a9fddba-3d58-33a9-8f21-2b73185a756f" locEndPos="20" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="Make virtual functions nonpublic, and public functions nonvirtual: getArea" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="9" sev="3" auth="lyao" locRef="6" rule="CODSTA-CPP-25" lnHash="1257077025" rule.header="Consider making virtual functions nonpublic, and public functions nonvirtual" tool="c++test" lineHash="1257077025" unbViolId="53d1d6bd-b384-36a4-896b-046b8f0f6880" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba3719b5-1ca8-3236-a775-1297999f8c97" locEndPos="20" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="Naming convention not followed: getArea" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="9" sev="3" auth="lyao" locRef="6" rule="NAMING-17" lnHash="1257077025" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="1257077025" unbViolId="ec284528-c84b-3e7b-9125-3a3457655e24" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4eaba133-03ec-3820-90f7-5e6531c81ea6" locEndPos="20" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The name 'getArea' should be composed only of lowercase letters" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="9" sev="3" auth="lyao" locRef="6" rule="JSF-051" lnHash="1257077025" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="1257077025" unbViolId="5146ce5b-50a9-38be-b0fd-ef0a804f52d0" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8e90167f-7567-3c92-bbac-6283f8ac0cb4" locEndPos="20" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The name 'getArea' should be composed only of lowercase letters" ln="9" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="9" sev="3" auth="lyao" locRef="6" rule="NAMING-44" lnHash="1257077025" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="1257077025" unbViolId="547f80e0-0057-3ff3-915a-2b001ee09473" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c540eb4d-eda7-3711-9cd5-dfc939ea796d" locEndPos="20" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="3" auth="lyao" locRef="6" rule="METRICS-19" lnHash="-1486716559" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="-1486716559" unbViolId="27455a44-ea07-3f8b-b32a-58e6c9077a2f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="082a36c0-06a6-3c1d-9f5c-468e157efd74" locEndPos="1" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="3" auth="lyao" locRef="6" rule="JSF-061" lnHash="-1486716559" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1486716559" unbViolId="90aa95aa-c4bd-3de2-9441-58f6f5dd0425" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62f022ad-9170-338a-ab1e-b304c61b5ee9" locEndPos="1" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="3" auth="lyao" locRef="6" rule="FORMAT-42" lnHash="-1486716559" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1486716559" unbViolId="7e39aafa-cb33-3d16-b080-7fe378a4edd0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fef7e071-948c-3ec7-853b-bb6bcd9947ca" locEndPos="1" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="3" auth="lyao" locRef="6" rule="JSF-060_a" lnHash="-1486716559" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1486716559" unbViolId="3f68ec82-59d1-3a78-92e7-4ef88db36d69" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a2ba25f6-8a75-3069-9b0f-104277d65a48" locEndPos="1" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="3" auth="lyao" locRef="6" rule="FORMAT-43" lnHash="-1486716559" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1486716559" unbViolId="2f6ee337-ff05-3b5e-a7d2-5b6d579a4ed1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b5aca04-1b03-3d8c-9766-5610233210b2" locEndPos="1" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="3" auth="lyao" locRef="6" rule="JSF-060_b" lnHash="-1486716559" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1486716559" unbViolId="f5e34bb4-3aef-3f22-84ed-28d4abb3032f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7da7159-f7b8-361f-90c4-b5c819332dc3" locEndPos="1" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="3" auth="lyao" locRef="6" rule="FORMAT-02" lnHash="-1486716559" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-1486716559" unbViolId="0a624cac-7687-3f67-bc82-4831c70c9210" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c1d300a4-0ddc-363a-b0c7-d8b92ce23436" locEndPos="1" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="3" auth="lyao" locRef="6" rule="FORMAT-34" lnHash="-1486716559" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="-1486716559" unbViolId="82fb1012-1d16-3ba1-a26b-70dc78ccf346" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5dc97655-8400-3e07-a9d6-f4a1eb151f51" locEndPos="1" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="The 'getPosition' function should be preceded by a comment that contains the '@brief' tag" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="3" auth="lyao" locRef="6" rule="COMMENT-14" lnHash="-1486716559" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1486716559" unbViolId="4a31ed07-c44a-32a0-81ed-090782395341" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb4f0e07-903f-30b8-8868-0d03c44bd205" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="The 'getPosition' function should be preceded by a comment that contains the '@brief' tag" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="-1486716559" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1486716559" unbViolId="c699f62b-897a-3230-be03-aa270b33e690" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f59e59c5-b3ee-3d39-b229-eab58f4e37ad" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="The 'getPosition' function should be preceded by a comment that contains the '@return' tag" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="-1486716559" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1486716559" unbViolId="ce573abf-ee7d-3967-97ea-a3e48a35fff3" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c692bb51-3658-3ed5-a5f1-d0f852905a28" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="The 'getPosition' function should be preceded by a comment that contains the '@return' tag" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="3" auth="lyao" locRef="6" rule="COMMENT-14_b" lnHash="-1486716559" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1486716559" unbViolId="55320271-bad7-39ca-b94d-6f8c8e8e98ab" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e735549c-238a-3cce-bd84-a81e3edf2254" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="The 'getPosition' function should be declared 'noexcept'" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A15_4_4-a" lnHash="-1486716559" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-1486716559" unbViolId="4b25f912-225a-37e3-9ec8-c4c3aba05aad" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84f5f113-8f12-320b-9c7d-616abb0c0204" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="The 'getPosition' function should be declared 'noexcept'" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="3" auth="lyao" locRef="6" rule="CODSTA-MCPP-09" lnHash="-1486716559" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-1486716559" unbViolId="2b82ac52-3ff9-335c-8838-fb3554f04663" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b1c39b0-5098-307b-948c-bbb986327d06" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Return type is not placed in line before function 'getPosition'" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="3" auth="lyao" locRef="6" rule="FORMAT-28" lnHash="-1486716559" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-1486716559" unbViolId="735193b2-42d9-362b-b501-e70906d13304" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1610c7b-9698-3806-85f4-7aa11ebb548a" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Function 'getPosition' has Cyclomatic Complexity value: 1" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="5" auth="lyao" locRef="6" rule="METRICS-29" lnHash="-1486716559" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-1486716559" unbViolId="07290d9b-d1db-32da-b5f8-10595e8cfa54" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c69d88a-95cd-3b64-8e45-a2997251655f" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Function 'getPosition' has Essential Complexity value: 1" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="5" auth="lyao" locRef="6" rule="METRICS-33" lnHash="-1486716559" rule.header="Report Essential Complexity" tool="c++test" lineHash="-1486716559" unbViolId="5c12960f-d2f2-3ab0-a832-4b8532febe9e" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="df1cc6d5-a87b-3722-b8c2-f69e78f4274d" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Naming convention not followed: getPosition" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="3" auth="lyao" locRef="6" rule="NAMING-17" lnHash="-1486716559" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-1486716559" unbViolId="a9fe9679-333d-367d-91dc-09ef415fccd3" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9ad4073-a87e-3ead-a3b6-bae3a0e0007b" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="The return type of the 'getPosition' function should be declared as 'auto&amp;'" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="2" auth="lyao" locRef="6" rule="CODSTA-MCPP-08_b" lnHash="-1486716559" rule.header="Prefer 'auto' to explicit type names for function return types" tool="c++test" lineHash="-1486716559" unbViolId="853781a8-f9a5-32ba-ace9-9a27f4f1192a" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0536587-92df-35e5-9c9b-b7f580b2ded8" locEndPos="12" locType="sr" urgent="true" hash="1537905639" locEndLn="10" goals="1,"/>
    <StdViol msg="The definition of the 'getPosition' function is not preceded by a comment" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="3" auth="lyao" locRef="6" rule="COMMENT-04" lnHash="-1486716559" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1486716559" unbViolId="77b5f6d8-8d2d-3a27-9ed8-043d181ad1a9" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db5a0d22-bef3-3e7a-a1ce-f7b5f6b0cf82" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="The definition of the 'getPosition' function is not preceded by a comment" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="4" auth="lyao" locRef="6" rule="JSF-134" lnHash="-1486716559" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1486716559" unbViolId="67909bc2-5752-38e8-b5e5-5693f95b6034" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="532f3344-5393-33b7-a1f5-7af4f23d11ef" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="The name 'getPosition' should be composed only of lowercase letters" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="3" auth="lyao" locRef="6" rule="JSF-051" lnHash="-1486716559" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1486716559" unbViolId="9e0278e5-218f-3cef-9d0d-4e0e628691b8" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4961ff31-d410-328c-96b2-958066b8aa32" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="The name 'getPosition' should be composed only of lowercase letters" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="3" auth="lyao" locRef="6" rule="NAMING-44" lnHash="-1486716559" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1486716559" unbViolId="2a28771b-4d21-3a7d-b142-9e8310ec5981" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="93c48ad2-418a-3955-8d8e-24447ea2300f" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Member function 'getPosition' returns handles to member data: '_position'" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="3" auth="lyao" locRef="6" rule="CODSTA-CPP-06" lnHash="-1486716559" rule.header="Avoid returning handles to class data from member functions" tool="c++test" lineHash="-1486716559" unbViolId="a5ac63af-bb21-37cb-9d19-f4ca64ddb2a7" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96002bae-ae55-31ad-b5f9-96895f3f1a8b" locEndPos="28" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Public member function 'getPosition' returns non-const handles to member data: '_position'" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="2" auth="lyao" locRef="6" rule="MISRA2008-9_3_2_b" lnHash="-1486716559" rule.header="Public member functions shall not return non-const handles to class-data" tool="c++test" lineHash="-1486716559" unbViolId="509b2538-5336-3931-8f50-68773dbc1996" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d80139c2-b549-36b7-a5e8-eb8f2726164a" locEndPos="28" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Public member function 'getPosition' returns non-const handles to member data: '_position'" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="3" auth="lyao" locRef="6" rule="HICPP-9_1_4-a" lnHash="-1486716559" rule.header="Public member functions shall not return non-const handles to private/protected class-data" tool="c++test" lineHash="-1486716559" unbViolId="a17ddc23-520d-3763-8c54-ca3fab59e726" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4cfc30f7-715d-396b-bc46-1a5a3364132b" locEndPos="28" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Public member function 'getPosition' returns non-const handles to member data: '_position'" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A9_3_1-a" lnHash="-1486716559" rule.header="Public member functions shall not return non-const handles to private/protected class-data" tool="c++test" lineHash="-1486716559" unbViolId="e8f60270-a9e5-3719-9a09-15ae7f6463fa" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a1392c4-9dd4-329c-be2b-2706bcc1ab81" locEndPos="28" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Public member function 'getPosition' returns non-const handles to member data: '_position'" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="3" auth="lyao" locRef="6" rule="OOP-36" lnHash="-1486716559" rule.header="Public member functions shall not return non-const handles to private/protected class-data" tool="c++test" lineHash="-1486716559" unbViolId="d8b288e4-77d1-38ee-8cb5-4e16310a8208" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="749919b9-7f03-397d-823e-2f32581ab939" locEndPos="28" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="'return' statement should be used with parenthesis" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="3" auth="lyao" locRef="6" rule="FORMAT-25_b" lnHash="-1486716559" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="-1486716559" unbViolId="f65d3af9-0343-3c72-84e0-7a63b92893a1" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a4aa2123-0407-340e-b76f-63b2f84170ef" locEndPos="28" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="3" auth="lyao" locRef="6" rule="FORMAT-03" lnHash="-1486716559" rule.header="Place a closing brace '}' on its own line" tool="c++test" lineHash="-1486716559" unbViolId="170e91a5-6efa-3de1-9d26-8e510110afbe" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c8ba2e1-50a1-3d3f-b2a8-b3fca5cae065" locEndPos="46" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="3" auth="lyao" locRef="6" rule="JSF-061" lnHash="-1486716559" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1486716559" unbViolId="d749aefb-6ed6-3052-bcc4-5814f6605213" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a12e06a-04cf-3c99-a46a-5a9d1fc4aa19" locEndPos="46" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="3" auth="lyao" locRef="6" rule="FORMAT-42" lnHash="-1486716559" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1486716559" unbViolId="95f0da64-aace-3737-ab7a-e1578c246685" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e29e03b7-ba9a-3871-8716-8d2481664693" locEndPos="46" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="10" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="10" sev="3" auth="lyao" locRef="6" rule="JSF-060_a" lnHash="-1486716559" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1486716559" unbViolId="fe816d57-257e-373a-9790-c545999eb76e" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e13938df-3880-315a-9e00-b333560a7540" locEndPos="46" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="3" auth="lyao" locRef="6" rule="JSF-061" lnHash="469057311" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="469057311" unbViolId="55f551e4-f650-3429-b863-d35ebd3c68fb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55267f19-e1f6-3560-b706-049033de912f" locEndPos="1" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="3" auth="lyao" locRef="6" rule="FORMAT-42" lnHash="469057311" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="469057311" unbViolId="bd6ffee1-e38f-38c3-a290-412db6486628" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8217dd54-2716-3b5d-b4b6-ce08718f36b8" locEndPos="1" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="3" auth="lyao" locRef="6" rule="JSF-060_a" lnHash="469057311" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="469057311" unbViolId="eff1dd9d-679b-3028-b388-25352676cbbe" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e8e8b3e-4330-394c-ab4b-52373f035253" locEndPos="1" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="3" auth="lyao" locRef="6" rule="FORMAT-43" lnHash="469057311" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="469057311" unbViolId="db97da89-9ddb-3994-b7ca-994206139d8b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e091021-df83-31ca-9545-5978377a79e1" locEndPos="1" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="3" auth="lyao" locRef="6" rule="JSF-060_b" lnHash="469057311" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="469057311" unbViolId="daa3adce-c9c9-3507-a64c-b0dab344663f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff0819eb-3faa-34e6-ab73-4912faea3fb0" locEndPos="1" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="3" auth="lyao" locRef="6" rule="METRICS-19" lnHash="469057311" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="469057311" unbViolId="f092d1b2-09de-3b8c-ae12-3e924127c24f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6bd58f70-1107-3497-acaf-30536c806a85" locEndPos="1" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="The definition of the 'Shape' function is not preceded by a comment" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="3" auth="lyao" locRef="6" rule="COMMENT-04" lnHash="469057311" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="469057311" unbViolId="2a643728-6854-3029-868b-312d55da7e23" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6652d550-e438-306e-bbcc-5b342776f4f0" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="The definition of the 'Shape' function is not preceded by a comment" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="4" auth="lyao" locRef="6" rule="JSF-134" lnHash="469057311" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="469057311" unbViolId="6acb3692-a227-3b48-9e4f-ea672ba3cecf" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8135cdbc-d762-38b9-94d3-f0c63b6e1d2c" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="The 'Shape' function should be preceded by a comment that contains the '@brief' tag" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="3" auth="lyao" locRef="6" rule="COMMENT-14" lnHash="469057311" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="469057311" unbViolId="1efeab18-fc84-3f75-9615-a637094f0155" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="563c3463-2c92-32a4-92d7-76e9389e2d76" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="The 'Shape' function should be preceded by a comment that contains the '@brief' tag" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="469057311" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="469057311" unbViolId="40a61076-eb69-3fe2-9895-6c4251fa7a59" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83303963-05ab-38cf-b8e5-8d029679a03f" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="469057311" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="469057311" unbViolId="1be1daac-61e8-3b9b-a67c-4e9b241e3f66" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="60f0fb74-46dc-32eb-a29f-01c6a97bc7d2" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="3" auth="lyao" locRef="6" rule="COMMENT-14_b" lnHash="469057311" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="469057311" unbViolId="fe8461ab-c212-37d6-a9ac-fe93dab98ddb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="19a510a7-9880-3a3d-8e37-064e93feee27" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Class 'Shape' defines an inline constructor" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="3" auth="lyao" locRef="6" rule="OPT-17" lnHash="469057311" rule.header="Avoid inline constructors and destructors" tool="c++test" lineHash="469057311" unbViolId="ac900397-3695-39ca-a184-2e3ffca5a841" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f712e19c-a8e7-3154-855d-200d7a47c57c" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Constructor 'Shape' allowing conversion should be made explicit" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="4" auth="lyao" locRef="6" rule="JSF-177_b" lnHash="469057311" rule.header="Constructors allowing for conversion should be made explicit" tool="c++test" lineHash="469057311" unbViolId="2957d75e-24ab-31ac-90bc-ea25b810d28a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f2659b5-dc23-3889-b220-f159823597fa" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Constructor 'Shape' allowing conversion should be made explicit" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="1" auth="lyao" locRef="6" rule="CODSTA-CPP-04" lnHash="469057311" rule.header="Constructors allowing for conversion should be made explicit" tool="c++test" lineHash="469057311" unbViolId="a2089620-467a-389e-9056-8f699efa4de4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="866ad991-f4bc-3413-aefe-b0ba140427dc" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Constructor 'Shape' allowing conversion should be made explicit" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="1" auth="lyao" locRef="6" rule="HICPP-12_1_1-a" lnHash="469057311" rule.header="Constructors allowing for conversion should be made explicit" tool="c++test" lineHash="469057311" unbViolId="56afc76b-5d25-3ac0-a9a4-22a754060037" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c291a39-c5b0-3b2e-8957-9108b29d4d29" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Function 'Shape' has Cyclomatic Complexity value: 1" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="5" auth="lyao" locRef="6" rule="METRICS-29" lnHash="469057311" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="469057311" unbViolId="7e0e6b62-1121-394a-baa5-27f00359ef05" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cbf1c93c-82ac-3e09-aa1e-bacb6f398f4c" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Function 'Shape' has Essential Complexity value: 1" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="5" auth="lyao" locRef="6" rule="METRICS-33" lnHash="469057311" rule.header="Report Essential Complexity" tool="c++test" lineHash="469057311" unbViolId="88dd969b-c891-3235-8bbf-b844be02518c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de04f125-2fbc-3910-abbd-37753effce04" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="The 'Shape' identifier is the same as the name of a type defined in the testing scope" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="2" auth="lyao" locRef="6" rule="MISRA2012-RULE-5_7_a" lnHash="469057311" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="469057311" unbViolId="bc3b6dfd-eeb5-3991-99bb-80e451ef2331" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="402b29c9-3bbb-34fd-93f0-2c7fd79bfe70" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="The 'Shape' identifier is the same as the name of a type defined in the testing scope" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="2" auth="lyao" locRef="6" rule="MISRAC2012-RULE_5_7-a" lnHash="469057311" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="469057311" unbViolId="14f65822-4a9a-3347-b0fc-0f44df0e8795" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="5f0e889a-1c56-3831-a5ee-374ca5540ec5" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Identifier name: 'position' differs only by presence/absence of the underscore character from identifier name: '_position' declared in class" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="2" auth="lyao" locRef="6" rule="MISRA2008-2_10_1" lnHash="469057311" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="469057311" unbViolId="90fd86d7-57ba-3192-82d2-9e78f4d92d21" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb2c4994-b360-35c3-a574-a333e560796f" locEndPos="17" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Identifier name: 'position' differs only by presence/absence of the underscore character from identifier name: '_position' declared in class" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="3" auth="lyao" locRef="6" rule="HICPP-2_4_1-a" lnHash="469057311" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="469057311" unbViolId="2dc38398-dd84-359c-88ca-4afe4b36a0d0" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d52ede09-b5bf-3629-820c-da45e81137e3" locEndPos="17" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Identifier name: 'position' differs only by presence/absence of the underscore character from identifier name: '_position' declared in class" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-M2_10_1-a" lnHash="469057311" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="469057311" unbViolId="424d0ec4-3660-3155-a403-23d0745a3c21" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f5c1f8a-aa88-3d0d-8361-76a6cea36c6d" locEndPos="17" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Identifier name: 'position' differs only by presence/absence of the underscore character from identifier name: '_position' declared in class" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="3" auth="lyao" locRef="6" rule="NAMING-47" lnHash="469057311" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="469057311" unbViolId="12954ac3-3196-36e0-9069-79707cc0f16e" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="996052bd-30ba-31e1-a6ad-23386deddccd" locEndPos="17" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="The parameter 'position' of function 'Shape' is passed by value" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="3" auth="lyao" locRef="6" rule="OPT-14" lnHash="469057311" rule.header="Pass objects by reference instead of by value" tool="c++test" lineHash="469057311" unbViolId="ddf5720d-ea65-3e98-95fd-8bcf8ea7b913" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3eb7351-08e0-3970-821b-551985be808a" locEndPos="17" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="The parameter 'position' of function 'Shape' is passed by value" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="4" auth="lyao" locRef="6" rule="JSF-125_a" lnHash="469057311" rule.header="Pass and return by reference when possible" tool="c++test" lineHash="469057311" unbViolId="b997fe59-827a-36e8-93fd-4fa2443c5612" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a808da5-5ddf-31f5-b366-9d5f6210b863" locEndPos="17" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="The parameter 'position' of function 'Shape' is passed by value" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="4" auth="lyao" locRef="6" rule="JSF-117" lnHash="469057311" rule.header="Arguments should be passed by reference" tool="c++test" lineHash="469057311" unbViolId="f0b28c43-d692-3b2b-9752-20b72ca7743c" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9241af4f-e2ef-3462-be3d-cf0eb0e58e45" locEndPos="17" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="The identifier 'position' differs only by presence/absence of the underscore character from identifier '_position' declared in file 'Shapes.hpp'" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="3" auth="lyao" locRef="6" rule="NAMING-45" lnHash="469057311" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="469057311" unbViolId="e1b6d89a-cc97-32ac-b769-3217650f9d5a" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="356b0594-4221-3afb-b318-11c16a707035" locEndPos="17" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="The identifier 'position' differs only by presence/absence of the underscore character from identifier '_position' declared in file 'Shapes.hpp'" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="3" auth="lyao" locRef="6" rule="JSF-048" lnHash="469057311" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="469057311" unbViolId="b646fba4-8de2-3eed-90ce-47fe99b780bf" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51a39452-f7aa-380c-9c24-9439c7340719" locEndPos="17" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="3" auth="lyao" locRef="6" rule="JSF-061" lnHash="469057311" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="469057311" unbViolId="01efdae9-560f-3b36-93ad-c29badc0e649" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21e320dd-c6ca-3788-8096-0efbb0b71653" locEndPos="50" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="3" auth="lyao" locRef="6" rule="FORMAT-42" lnHash="469057311" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="469057311" unbViolId="8e25a763-28e7-315b-823e-67545a552871" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac80f81d-68ef-35d5-92f0-fa14924484c5" locEndPos="50" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="12" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="12" sev="3" auth="lyao" locRef="6" rule="JSF-060_a" lnHash="469057311" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="469057311" unbViolId="878b81cf-d1ea-30d9-8105-49000383d3c6" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f18dd80e-f3b4-3c96-b036-9827ad0b8b02" locEndPos="50" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="3" auth="lyao" locRef="6" rule="FORMAT-02" lnHash="-769770316" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-769770316" unbViolId="cd8e839b-6fd7-3527-ba02-fd7a378421b0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="72810fa0-e960-3890-97f8-7feb2bf35c0e" locEndPos="1" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="3" auth="lyao" locRef="6" rule="FORMAT-34" lnHash="-769770316" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="-769770316" unbViolId="4a0f417a-77b8-3481-b6d5-3b830e8d656b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d26b27f-aebd-3534-8188-af3531d612b5" locEndPos="1" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Do not declare the 'LineSegment' type in the global namespace" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="4" auth="lyao" locRef="6" rule="JSF-098" lnHash="-769770316" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-769770316" unbViolId="47104c2f-06b2-3f03-be23-289e31dd92e5" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27072d5b-d067-3b0d-8ab4-e90ce56c8a28" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Do not declare the 'LineSegment' type in the global namespace" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-M7_3_1-a" lnHash="-769770316" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-769770316" unbViolId="a1f58ee3-4e8e-33df-aa2b-fbf2a492a52a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6403a39e-34ba-3375-9b1f-a49748c34fda" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Do not declare the 'LineSegment' type in the global namespace" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="3" auth="lyao" locRef="6" rule="CODSTA-CPP-36" lnHash="-769770316" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-769770316" unbViolId="2a129892-dfa9-3de7-9c4a-393566073d80" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f4f1011-a99f-30fb-b215-8ed4da39fa4e" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Do not declare the 'LineSegment' type in the global namespace" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="2" auth="lyao" locRef="6" rule="MISRA2008-7_3_1" lnHash="-769770316" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-769770316" unbViolId="bc0d7f7d-f9bb-348c-9129-bfffa2cfa69f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d7fd419-1509-3614-96a9-3032ecd47b2d" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="The declaration of the 'LineSegment' type should be preceded by a comment that contains the '@brief' tag" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="3" auth="lyao" locRef="6" rule="COMMENT-14" lnHash="-769770316" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-769770316" unbViolId="7993c777-a147-386c-a6ac-6995f5a3bd6e" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ea1a51d-db70-3aa2-b4ec-3d45ee9b8ea5" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="The declaration of the 'LineSegment' type should be preceded by a comment that contains the '@brief' tag" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="-769770316" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-769770316" unbViolId="cb05233f-54ff-393d-8b8b-1170a699f839" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f314b4e-b0ca-3ce8-9f8a-cefb6a314a00" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Public section must be before protected and private sections" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="3" auth="lyao" locRef="6" rule="JSF-057_a" lnHash="-769770316" rule.header="The public section of a class will be declared before the protected section and before the private section" tool="c++test" lineHash="-769770316" unbViolId="192d5339-ac7b-3431-ba90-9853d2484240" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1359c707-c721-3e23-9580-44222916b6d8" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Public section must be before protected and private sections" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="3" auth="lyao" locRef="6" rule="CODSTA-CPP-46" lnHash="-769770316" rule.header="Order of scopes in class: public before all others" tool="c++test" lineHash="-769770316" unbViolId="ecd674d9-0270-3a20-a93d-66daab246c5c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac7c6fb3-262c-3195-ab06-77585b4b1954" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Class 'LineSegment' should be final" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="4" auth="lyao" locRef="6" rule="AUTOSAR-A12_4_2-a" lnHash="-769770316" rule.header="If a public destructor of a class is non-virtual, then the class should be declared final" tool="c++test" lineHash="-769770316" unbViolId="a95a7dbb-3c88-3846-b622-2daedf006cdd" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4923f71-3830-3cb1-a756-54b5d919aef7" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Class 'LineSegment' should be final" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="3" auth="lyao" locRef="6" rule="CODSTA-MCPP-23" lnHash="-769770316" rule.header="If a public destructor of a class is non-virtual, then the class should be declared final" tool="c++test" lineHash="-769770316" unbViolId="83cf1012-3961-3bf1-b913-e48c50f2a132" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="895502db-b907-3272-a4d4-048bd89d0133" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Explicitly declare default constructor in 'LineSegment'" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="3" auth="lyao" locRef="6" rule="HICPP-12_5_1-a" lnHash="-769770316" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-769770316" unbViolId="6993893a-ca27-3e8e-9f81-623b557858fc" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ca1d4de-fcef-3122-b887-79e7c15db1f8" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Explicitly declare destructor in 'LineSegment'" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="3" auth="lyao" locRef="6" rule="HICPP-12_5_1-a" lnHash="-769770316" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-769770316" unbViolId="ef9e5d0c-3b07-396b-b9c4-709ea0f8f796" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="064c9673-4baa-34a9-a69a-41ed9c7e6402" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Explicitly declare copy assignment operator in 'LineSegment'" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="3" auth="lyao" locRef="6" rule="HICPP-12_5_1-a" lnHash="-769770316" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-769770316" unbViolId="b580226f-e67b-3cc1-a8f9-30fd22cb0391" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ddf0dac1-4f4d-3b3b-857d-223031f1745a" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Explicitly declare move assignment operator in 'LineSegment'" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="3" auth="lyao" locRef="6" rule="HICPP-12_5_1-a" lnHash="-769770316" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-769770316" unbViolId="7a1794f1-8fa4-3709-a0b9-61c3f2829944" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e75b5599-22f9-3c5e-a15b-dd302de29ce1" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Explicitly declare copy constructor in 'LineSegment'" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="3" auth="lyao" locRef="6" rule="HICPP-12_5_1-a" lnHash="-769770316" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-769770316" unbViolId="5c6eda47-8f20-323c-bf41-2d1aeefe916e" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="086e647c-41d7-3e90-80ef-0ccafd823ba6" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Explicitly declare move constructor in 'LineSegment'" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="3" auth="lyao" locRef="6" rule="HICPP-12_5_1-a" lnHash="-769770316" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-769770316" unbViolId="291a3693-d2c3-3fd1-a477-cdaa56e44845" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4cd9758-ea4f-3e9b-806d-b05792c9c9f7" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Class 'LineSegment' missing assignment operator or special comment" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="3" auth="lyao" locRef="6" rule="MRM-04" lnHash="-769770316" rule.header="All classes should contain the assignment operator or appropriate comment" tool="c++test" lineHash="-769770316" unbViolId="cb9e48f9-2806-329c-bb6e-f6b4950c8245" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05305cb6-190a-3d3a-a3e9-6112b67e4861" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Class 'LineSegment' missing copy constructor or special comment" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="3" auth="lyao" locRef="6" rule="MRM-05" lnHash="-769770316" rule.header="All classes should contain the copy constructor or appropriate comment" tool="c++test" lineHash="-769770316" unbViolId="d89418e0-f3f7-32bf-875b-afa3e81f1f6b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6dc88c58-406c-3b0d-9b3b-044703406ed0" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Class 'LineSegment' missing assignment operator or special comment" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="3" auth="lyao" locRef="6" rule="MRM-47" lnHash="-769770316" rule.header="Classes containing at least one non-static member variable should declare the assignment operator or contain appropriate comment" tool="c++test" lineHash="-769770316" unbViolId="b104834f-e60e-3cb5-86b7-d19d777ab738" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ca2cc3a-2b9f-35e9-a393-85d464b3c57e" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Class 'LineSegment' missing copy constructor or special comment" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="3" auth="lyao" locRef="6" rule="MRM-48" lnHash="-769770316" rule.header="Classes containing at least one non-static member variable should declare the copy constructor or contain appropriate comment" tool="c++test" lineHash="-769770316" unbViolId="6045154d-4938-3f79-a492-25b2ecd92b16" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65ff21fa-83ad-33f2-9445-c33640c91064" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="All letters beside the first one in name 'LineSegment' should be lowercase" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="3" auth="lyao" locRef="6" rule="NAMING-40" lnHash="-769770316" rule.header="Only the first word of the name of a class, structure, namespace, enumeration, or typedef will begin with an uppercase letter" tool="c++test" lineHash="-769770316" unbViolId="d3fa7c02-d1dc-356a-8402-06801f4a7410" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92133755-4c8e-338d-b4e8-f281b553958b" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="The 'LineSegment' identifier should have the 'C' prefix" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="3" auth="lyao" locRef="6" rule="NAMING-HN-19" lnHash="-769770316" rule.header="Hungarian notation for class declaration" tool="c++test" lineHash="-769770316" unbViolId="79672e72-1c70-346e-86a2-e7249bfae85c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa7e1aae-9570-306f-a3ea-24c2a65d0039" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Class 'LineSegment' has virtual functions without a virtual destructor" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="2" auth="lyao" locRef="6" rule="OOP-23" lnHash="-769770316" rule.header="If a class has virtual functions it shall have a virtual destructor" tool="c++test" lineHash="-769770316" unbViolId="bcecf20b-5637-356f-ac67-465e96191909" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac24de44-13d1-3ddf-9efc-529ce45c365c" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="The type name 'LineSegment' is not a unique identifier in the testing scope" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="2" auth="lyao" locRef="6" rule="MISRA2012-RULE-5_7_a" lnHash="-769770316" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="-769770316" unbViolId="43208020-a8e2-3834-a219-97ea1f9ec14b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="b2b4ef1d-2c11-3ef7-ade7-815e2d448b2f" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="The type name 'LineSegment' is not a unique identifier in the testing scope" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="2" auth="lyao" locRef="6" rule="MISRAC2012-RULE_5_7-a" lnHash="-769770316" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="-769770316" unbViolId="0f6244a3-709a-3ccf-9150-8a62037e5b8f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="40011d7f-926f-38c8-9bb0-44fd2b14e062" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="A declaration of the 'LineSegment' type which is not used has been found" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="4" auth="lyao" locRef="6" rule="AUTOSAR-A0_1_6-a" lnHash="-769770316" rule.header="A project shall not contain unused type declarations" tool="c++test" lineHash="-769770316" unbViolId="b848def1-a8a0-3cd6-9527-bd16fb824d8a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="e070dc74-e0e7-312d-8d89-ae41c5241ea2" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="A declaration of the 'LineSegment' type which is not used has been found" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="3" auth="lyao" locRef="6" rule="GLOBAL-UNUSEDTYPE" lnHash="-769770316" rule.header="A project shall not contain unused type declarations" tool="c++test" lineHash="-769770316" unbViolId="96e0ef97-d20d-32f4-a6c2-6393da51827b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="8b47f0a4-d978-3ecd-9833-3c33de3fee69" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="A declaration of the 'LineSegment' type which is not used has been found" ln="15" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="15" sev="2" auth="lyao" locRef="6" rule="MISRA2008-0_1_5" lnHash="-769770316" rule.header="A project shall not contain unused type declarations" tool="c++test" lineHash="-769770316" unbViolId="04cfef39-8398-3b6b-9536-19c315228dc1" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="a65dae13-531b-35eb-9dee-d50c2f5d6b01" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="16" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="16" sev="4" auth="lyao" locRef="6" rule="JSF-043" lnHash="1606009158" rule.header="Tabs should be avoided" tool="c++test" lineHash="1606009158" unbViolId="6d6a6921-c04b-3dac-b548-906d68393863" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47270084-c2b3-305a-bf7d-bd3598c82301" locEndPos="1" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="16" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="16" sev="5" auth="lyao" locRef="6" rule="FORMAT-01" lnHash="1606009158" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1606009158" unbViolId="9debb589-00e3-3624-bee2-27312283d8f5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31a3a6ab-95ba-3645-a09d-ff627d0ed369" locEndPos="1" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="16" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="16" sev="5" auth="lyao" locRef="6" rule="HICPP-2_1_1-a" lnHash="1606009158" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1606009158" unbViolId="c5191063-eb3f-38e9-8079-3419893a7269" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="707ca43e-7470-3b17-ba54-276112ca8deb" locEndPos="1" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="The '_end' member variable should be preceded by a comment that contains the '@brief' tag" ln="16" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="16" sev="3" auth="lyao" locRef="6" rule="COMMENT-14" lnHash="1606009158" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1606009158" unbViolId="bd8cdc9d-aeb8-35ca-89b8-48812cd757b8" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9393977b-4376-3a6d-a5cb-6a13edcb9071" locEndPos="8" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="The '_end' member variable should be preceded by a comment that contains the '@brief' tag" ln="16" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="16" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="1606009158" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1606009158" unbViolId="fbc1242b-df29-315f-8867-05a380befd9f" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="729943e1-b2af-3ebd-8209-563f2c993a28" locEndPos="8" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="Member variable '_end' shall begin with a lowercase letter" ln="16" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="16" sev="3" auth="lyao" locRef="6" rule="NAMING-07" lnHash="1606009158" rule.header="Begin member variable names with a lowercase letters" tool="c++test" lineHash="1606009158" unbViolId="5dace876-377d-3f25-ad18-caa386e762fe" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51ab0d6a-f293-3931-8a36-7d9fc5182be6" locEndPos="8" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="Naming convention not followed: _end" ln="16" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="16" sev="3" auth="lyao" locRef="6" rule="NAMING-14" lnHash="1606009158" rule.header="Begin class data member names with 'its'" tool="c++test" lineHash="1606009158" unbViolId="d02d78c3-89a8-3631-b188-0d498f31f001" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="815f5a1d-6cbb-3d6d-924e-e3bd789c1549" locEndPos="8" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="Using underscore at the beginning of the name '_end' is not allowed" ln="16" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="16" sev="3" auth="lyao" locRef="6" rule="NAMING-33" lnHash="1606009158" rule.header="Do not use identifiers which begin with one or two underscores (`_' or `__')" tool="c++test" lineHash="1606009158" unbViolId="8243d6bd-d2ef-3d6e-89eb-22ab6d448507" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6c87567-5930-32c5-b9ba-83b09890fa35" locEndPos="8" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="Using underscore at the beginning of the name '_end' is not allowed" ln="16" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="16" sev="3" auth="lyao" locRef="6" rule="JSF-047" lnHash="1606009158" rule.header="Identifiers will not begin with the underscore character &quot;_&quot;" tool="c++test" lineHash="1606009158" unbViolId="d001c0b8-5ff2-33fc-aff2-f9aa8aee9994" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f706f40a-3315-390b-9658-42f3079588cd" locEndPos="8" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="The '_end' identifier should have the 'm_' prefix" ln="16" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="16" sev="3" auth="lyao" locRef="6" rule="NAMING-HN-29" lnHash="1606009158" rule.header="Hungarian notation for member variables" tool="c++test" lineHash="1606009158" unbViolId="ae99b854-dfed-3792-867f-9a18a917d290" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5da59cc1-184e-31ec-aedd-e0c9f371520b" locEndPos="8" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="The identifier '_end' differs only by presence/absence of the underscore character from identifier 'end' declared in file 'Shapes.hpp'" ln="16" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="16" sev="3" auth="lyao" locRef="6" rule="NAMING-45" lnHash="1606009158" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="1606009158" unbViolId="ffcc1ea1-06f7-3e79-9067-bb650eda1168" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="806db511-97e1-36b7-a8d8-e217eaf2093f" locEndPos="8" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="The identifier '_end' differs only by presence/absence of the underscore character from identifier 'end' declared in file 'Shapes.hpp'" ln="16" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="16" sev="3" auth="lyao" locRef="6" rule="JSF-048" lnHash="1606009158" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="1606009158" unbViolId="149233df-4b19-3108-bb78-5fc47a656804" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1da7e2f-1718-3648-b149-15f5bc47b47d" locEndPos="8" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="Private member variable '_end' is declared but not used" ln="16" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="16" sev="3" auth="lyao" locRef="6" rule="OPT-05" lnHash="1606009158" rule.header="Avoid unused private member variables" tool="c++test" lineHash="1606009158" unbViolId="329f51f7-3206-3dd7-8b90-58098554e16e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9064416-d9eb-3e6b-b724-ea01d719e5e3" locEndPos="8" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="Private member variable '_end' is declared but not used" ln="16" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="16" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-M0_1_3-c" lnHash="1606009158" rule.header="Avoid unused private member variables" tool="c++test" lineHash="1606009158" unbViolId="8b7e79b6-92d5-33db-9bb3-9ca2c589575a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cdb6eb19-e458-3a99-8e41-716686255d3b" locEndPos="8" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="Private member variable '_end' is declared but not used" ln="16" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="16" sev="2" auth="lyao" locRef="6" rule="MISRA2008-0_1_3_c" lnHash="1606009158" rule.header="Eliminate unused private member variables" tool="c++test" lineHash="1606009158" unbViolId="8462f932-4fa2-3e52-834f-7725be2e81e2" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b559398e-72a0-3ef6-8b1a-4fcf7815a150" locEndPos="8" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="3" auth="lyao" locRef="6" rule="METRICS-19" lnHash="460467427" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="460467427" unbViolId="f746221f-bb59-377e-8e49-03d5248a7b84" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="14931044-3046-3724-bf63-a1a014b0cea6" locEndPos="1" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="3" auth="lyao" locRef="6" rule="JSF-061" lnHash="460467427" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="460467427" unbViolId="9fd8973f-c16e-3d04-ae65-cf532acecf98" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="785ae481-39d7-3e68-b82e-3c2296ba0583" locEndPos="1" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="3" auth="lyao" locRef="6" rule="FORMAT-42" lnHash="460467427" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="460467427" unbViolId="1e25750b-dc1d-3b53-a023-96f8e4f126ee" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77d883c1-9500-3229-a88c-1340ee37e9e1" locEndPos="1" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="3" auth="lyao" locRef="6" rule="JSF-060_a" lnHash="460467427" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="460467427" unbViolId="9f6ff130-bc64-32c3-bbc6-9394f0f64481" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47c95dc8-e841-32a5-b299-0c92c976ae87" locEndPos="1" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="3" auth="lyao" locRef="6" rule="FORMAT-43" lnHash="460467427" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="460467427" unbViolId="0c6c48c0-a052-3239-807a-b96e3e745bef" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8eb8106-1769-3f41-9203-a0cf38ce5143" locEndPos="1" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="3" auth="lyao" locRef="6" rule="JSF-060_b" lnHash="460467427" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="460467427" unbViolId="09774a91-fd86-3383-a4ca-5f62c02eac3a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a0fabd4-da02-3773-94f2-71a70bce3fe7" locEndPos="1" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The 'LineSegment' function should be preceded by a comment that contains the '@brief' tag" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="3" auth="lyao" locRef="6" rule="COMMENT-14" lnHash="460467427" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="460467427" unbViolId="b00071a9-894f-3c10-9ab2-affb1cc1ea40" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94db01aa-d4eb-3e38-b877-eb0c61945018" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The 'LineSegment' function should be preceded by a comment that contains the '@brief' tag" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="460467427" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="460467427" unbViolId="9f05e654-286d-3d34-ade1-7cb2a94cdcf4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f08c4ae0-55e6-354f-a83d-135631af13b0" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="460467427" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="460467427" unbViolId="718ee058-fff3-33f4-8a05-6ca51adedf76" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52b4694a-f91a-3305-82c9-1f1b9300b50c" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="3" auth="lyao" locRef="6" rule="COMMENT-14_b" lnHash="460467427" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="460467427" unbViolId="01e863ba-8aa6-3894-9667-8f4a84c7bad7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ea9d65d-f7ff-3d8b-9c11-8fe63c867204" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The 'end' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="460467427" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="460467427" unbViolId="0c21e186-20cc-31c3-a4c9-fccad00e2c1b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="56381c3f-517b-3c5f-90f8-872b33f478cc" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The 'end' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="3" auth="lyao" locRef="6" rule="COMMENT-14_b" lnHash="460467427" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="460467427" unbViolId="73ac9a03-a720-3ff6-b3d7-176b44137e56" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0877bbf1-bbbd-3601-ad03-c9bc9b1e4dd1" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Class 'LineSegment' defines an inline constructor" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="3" auth="lyao" locRef="6" rule="OPT-17" lnHash="460467427" rule.header="Avoid inline constructors and destructors" tool="c++test" lineHash="460467427" unbViolId="d158bdc2-8864-35e2-88b8-e0088475a006" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9de7527e-6828-31e6-a4e3-b4329a6d31d9" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Function 'LineSegment' has Cyclomatic Complexity value: 1" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="5" auth="lyao" locRef="6" rule="METRICS-29" lnHash="460467427" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="460467427" unbViolId="5ed417b3-60b1-3b1e-b3a4-955d0d747f25" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17c5c8e8-efa8-3ef0-8643-a68f62347e88" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Function 'LineSegment' has Essential Complexity value: 1" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="5" auth="lyao" locRef="6" rule="METRICS-33" lnHash="460467427" rule.header="Report Essential Complexity" tool="c++test" lineHash="460467427" unbViolId="8661d17b-a4a1-3838-9b52-a4de85224392" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5c76fe32-c787-3f37-839a-6940cb7bf12c" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The definition of the 'LineSegment' function is not preceded by a comment" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="3" auth="lyao" locRef="6" rule="COMMENT-04" lnHash="460467427" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="460467427" unbViolId="616d94c1-1d1f-3280-bbde-acea8ff41ef6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05b7327e-ca1f-37f0-a872-681ed2b83597" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The definition of the 'LineSegment' function is not preceded by a comment" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="4" auth="lyao" locRef="6" rule="JSF-134" lnHash="460467427" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="460467427" unbViolId="243f3dac-25ed-3d55-a2d5-410c84e40b21" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7e8886f-fac7-3696-b35c-b1fbf564fc19" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The 'LineSegment' identifier is the same as the name of a type defined in the testing scope" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="2" auth="lyao" locRef="6" rule="MISRA2012-RULE-5_7_a" lnHash="460467427" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="460467427" unbViolId="c211c006-5415-372a-a0d4-907c561035f9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="69324cbf-3561-3bb3-87e8-4226ded86af7" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The 'LineSegment' identifier is the same as the name of a type defined in the testing scope" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="2" auth="lyao" locRef="6" rule="MISRAC2012-RULE_5_7-a" lnHash="460467427" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="460467427" unbViolId="00415c85-0702-3197-bfb6-db3d84917ba4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="b6211b3e-c783-30e7-842d-a43912e20632" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The 'LineSegment' function is not used in the testing scope" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="3" auth="lyao" locRef="6" rule="GLOBAL-UNUSEDFUNC" lnHash="460467427" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="460467427" unbViolId="37baf484-c60e-39e4-9522-3159259e46c8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="fb71e8db-9e7e-3244-a2e9-0b88b3eb8cff" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The 'LineSegment' function is not used in the testing scope" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="4" auth="lyao" locRef="6" rule="AUTOSAR-M0_1_10-a" lnHash="460467427" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="460467427" unbViolId="2957aecf-fa3e-3974-ac79-07a97ae350f9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="445c5df9-f252-3f13-8271-e595dca1b250" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The 'LineSegment' function is not used in the testing scope" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="2" auth="lyao" locRef="6" rule="MISRA2008-0_1_10_b" lnHash="460467427" rule.header="Every defined function with external linkage shall be used" tool="c++test" lineHash="460467427" unbViolId="b0df7c3a-ea01-3b07-b6cf-77e479554b38" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="6c601512-8a4e-34dc-9b7e-22d4bbaa5a39" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The identifier 'position' differs only by presence/absence of the underscore character from identifier '_position' declared in file 'Shapes.hpp'" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="3" auth="lyao" locRef="6" rule="NAMING-45" lnHash="460467427" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="460467427" unbViolId="7d4dad9b-13d7-3f5f-b95a-d4f93cdc90a5" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f998e3f1-cea0-33f2-ab5a-2cca194f964d" locEndPos="23" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The identifier 'position' differs only by presence/absence of the underscore character from identifier '_position' declared in file 'Shapes.hpp'" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="3" auth="lyao" locRef="6" rule="JSF-048" lnHash="460467427" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="460467427" unbViolId="63301f2f-d3e4-3a01-a4ec-1fb86c701d31" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="baf8f0fa-a3fc-30d3-8d68-6c5be9c8b430" locEndPos="23" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Identifier name: 'position' differs only by presence/absence of the underscore character from identifier name: '_position' declared in base class" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="2" auth="lyao" locRef="6" rule="MISRA2008-2_10_1" lnHash="460467427" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="460467427" unbViolId="36f2d2ce-c469-356b-b24d-a63c9c55fe4c" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="80ac82be-67be-3f8f-be67-a1b065e69fa9" locEndPos="23" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Identifier name: 'position' differs only by presence/absence of the underscore character from identifier name: '_position' declared in base class" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="3" auth="lyao" locRef="6" rule="HICPP-2_4_1-a" lnHash="460467427" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="460467427" unbViolId="5508af50-5f8a-39b2-9891-73a6ba1f433c" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="49be3fff-f8f7-3c32-8681-54711dbd0ac8" locEndPos="23" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Identifier name: 'position' differs only by presence/absence of the underscore character from identifier name: '_position' declared in base class" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-M2_10_1-a" lnHash="460467427" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="460467427" unbViolId="f4f96864-d567-3f43-aa9b-14cd8ee5e0d7" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="41c782d3-c0fe-38a6-a18e-829f2d8e2645" locEndPos="23" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Identifier name: 'position' differs only by presence/absence of the underscore character from identifier name: '_position' declared in base class" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="3" auth="lyao" locRef="6" rule="NAMING-47" lnHash="460467427" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="460467427" unbViolId="5bea2710-589e-3040-a917-9512abca2115" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="effd0f5c-3945-3e40-b22f-d201de268cd3" locEndPos="23" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The parameter 'position' of function 'LineSegment' is passed by value" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="3" auth="lyao" locRef="6" rule="OPT-14" lnHash="460467427" rule.header="Pass objects by reference instead of by value" tool="c++test" lineHash="460467427" unbViolId="73432b5d-9ecf-3f04-a334-7d275ab91972" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c14ef2a-1f4c-39ff-ac0c-6f0793d7c3a4" locEndPos="23" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The parameter 'position' of function 'LineSegment' is passed by value" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="4" auth="lyao" locRef="6" rule="JSF-125_a" lnHash="460467427" rule.header="Pass and return by reference when possible" tool="c++test" lineHash="460467427" unbViolId="d5f4dfe4-b9ba-3f38-8f1a-81062ecbf665" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9d4900a-0b6a-3398-9427-2e6aaa7bb19b" locEndPos="23" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The parameter 'position' of function 'LineSegment' is passed by value" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="4" auth="lyao" locRef="6" rule="JSF-117" lnHash="460467427" rule.header="Arguments should be passed by reference" tool="c++test" lineHash="460467427" unbViolId="90de0967-6910-3532-8aa9-067c90db5739" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc67cd71-4c6a-31d7-b8c6-79fac6f7ebac" locEndPos="23" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Identifier name: 'end' differs only by presence/absence of the underscore character from identifier name: '_end' declared in class" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="2" auth="lyao" locRef="6" rule="MISRA2008-2_10_1" lnHash="460467427" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="460467427" unbViolId="e3298a11-2607-3ac1-aad1-70e2bea7f9b5" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bca48cab-8736-3860-9f36-07ef0d632503" locEndPos="39" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Identifier name: 'end' differs only by presence/absence of the underscore character from identifier name: '_end' declared in class" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="3" auth="lyao" locRef="6" rule="HICPP-2_4_1-a" lnHash="460467427" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="460467427" unbViolId="b319067a-5a1c-3d14-b7fa-ad68b9d5d18e" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3c55450-e548-3319-8dab-83d95ac72ead" locEndPos="39" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Identifier name: 'end' differs only by presence/absence of the underscore character from identifier name: '_end' declared in class" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-M2_10_1-a" lnHash="460467427" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="460467427" unbViolId="b84f839e-5301-3054-9901-de1381dd2ecd" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16996d4a-bad7-37ca-8e2a-8789f8848819" locEndPos="39" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Identifier name: 'end' differs only by presence/absence of the underscore character from identifier name: '_end' declared in class" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="3" auth="lyao" locRef="6" rule="NAMING-47" lnHash="460467427" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="460467427" unbViolId="15925bad-3e3c-3e35-81c3-c293ebbccf18" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0970bcf8-f03a-3cea-a158-a832927a41d1" locEndPos="39" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The parameter 'end' of function 'LineSegment' is passed by value" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="3" auth="lyao" locRef="6" rule="OPT-14" lnHash="460467427" rule.header="Pass objects by reference instead of by value" tool="c++test" lineHash="460467427" unbViolId="9a777ebb-fdaf-333c-aab2-0f353d1e1390" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa2600f9-e9a2-312d-9de8-19decb33892d" locEndPos="39" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The parameter 'end' of function 'LineSegment' is passed by value" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="4" auth="lyao" locRef="6" rule="JSF-125_a" lnHash="460467427" rule.header="Pass and return by reference when possible" tool="c++test" lineHash="460467427" unbViolId="ddc45010-7cce-305e-b7f2-da7c8a9e9525" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd3a4e60-1931-35bd-a2c7-2e50df45bfa4" locEndPos="39" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The parameter 'end' of function 'LineSegment' is passed by value" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="4" auth="lyao" locRef="6" rule="JSF-117" lnHash="460467427" rule.header="Arguments should be passed by reference" tool="c++test" lineHash="460467427" unbViolId="1321da24-e814-3cd3-a665-bc962f56ba8c" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d054104-2222-3806-80f9-688244a9b97b" locEndPos="39" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The identifier 'end' differs only by presence/absence of the underscore character from identifier '_end' declared in file 'Shapes.hpp'" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="3" auth="lyao" locRef="6" rule="NAMING-45" lnHash="460467427" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="460467427" unbViolId="a4e87832-1b7d-32fb-9c1c-2928955b7f5e" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="324bce99-cead-326b-936b-7067c0dcc8c3" locEndPos="39" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The identifier 'end' differs only by presence/absence of the underscore character from identifier '_end' declared in file 'Shapes.hpp'" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="3" auth="lyao" locRef="6" rule="JSF-048" lnHash="460467427" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="460467427" unbViolId="b5ddac51-3688-369a-8ac1-d4b5b62e3a61" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="985c5729-0ffc-3d65-98de-64c8d282edcc" locEndPos="39" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="3" auth="lyao" locRef="6" rule="JSF-061" lnHash="460467427" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="460467427" unbViolId="5b0696ed-ca11-3f63-81c7-abed54ffcfa7" locStartPos="73" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="214b8afd-42ea-31ec-93df-ad6819bd65a3" locEndPos="74" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="3" auth="lyao" locRef="6" rule="FORMAT-42" lnHash="460467427" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="460467427" unbViolId="ea678c1b-0c7c-37d5-8f00-2ab7315a2ae9" locStartPos="73" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e17e1d1-af62-3681-b3df-592d2a07d6ea" locEndPos="74" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="18" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="18" sev="3" auth="lyao" locRef="6" rule="JSF-060_a" lnHash="460467427" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="460467427" unbViolId="8e0456c9-a787-35e3-81b3-094cb473c7d3" locStartPos="73" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4665a356-817e-328c-ae95-5a6bf7485770" locEndPos="74" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="JSF-061" lnHash="-392957557" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-392957557" unbViolId="2fcb979e-e1ca-3473-89f9-8a73b46a3af5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="439c7483-9712-3369-b984-cd67890d6fc7" locEndPos="1" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="FORMAT-42" lnHash="-392957557" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-392957557" unbViolId="f2f72fd5-5895-3242-892d-78e8188b5cd6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ceef9a9c-e14b-31ef-8a62-8675a5845c17" locEndPos="1" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="JSF-060_a" lnHash="-392957557" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-392957557" unbViolId="4323de29-51b4-3893-acf5-3c63f99d6224" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="568f8f17-212d-30e1-aadf-b4e181273e80" locEndPos="1" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="FORMAT-43" lnHash="-392957557" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-392957557" unbViolId="bb0f38c9-2db8-31a4-ba3e-5a077b11bc90" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83be36d1-0d5f-3bf7-8dc6-21c1b78e5451" locEndPos="1" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="JSF-060_b" lnHash="-392957557" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-392957557" unbViolId="f9c115a4-f7cf-3d8e-ba73-491821456498" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6716f49b-2494-3c57-95e2-9fab74504c92" locEndPos="1" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="METRICS-19" lnHash="-392957557" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="-392957557" unbViolId="0c9e0120-17f8-37a1-b116-63e0a1661381" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd1f660b-8012-3544-b5d0-39591f546e3a" locEndPos="1" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="FORMAT-02" lnHash="-392957557" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-392957557" unbViolId="3cb93d27-f352-3cbf-b3fd-2a4e5d2e89dd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b650eea-24e1-3250-b906-64d0f238ce6f" locEndPos="1" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="FORMAT-34" lnHash="-392957557" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="-392957557" unbViolId="d45b74d5-d917-3822-b1f0-6232850cccaa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7dc0b78a-9a74-3633-8cd9-7707d71af66a" locEndPos="1" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="4" auth="lyao" locRef="6" rule="MISRAC2012-DIR_4_6-b" lnHash="-392957557" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-392957557" unbViolId="0b13bfd1-2ef0-3028-a66f-c965082758b7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="73c48548-53b3-3d00-b7de-0e8332f301a1" locEndPos="5" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="2" auth="lyao" locRef="6" rule="JSF-209_b" lnHash="-392957557" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-392957557" unbViolId="b140bdfc-7c63-33c8-8027-5fc3a7cf07f0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8fa96cde-77c0-30af-badb-6c91327bf018" locEndPos="5" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="MISRA2004-6_3_b" lnHash="-392957557" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-392957557" unbViolId="ff63a39a-7f57-36b7-b00d-d409e2627e2e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9155a231-0222-3fdb-8a84-afe9ef8b205c" locEndPos="5" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="4" auth="lyao" locRef="6" rule="MISRA2012-DIR-4_6_b" lnHash="-392957557" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-392957557" unbViolId="62e3252f-bc91-3939-a201-1da29fca4f23" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="483932fe-a732-3280-8046-546f7adf84c8" locEndPos="5" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="HICPP-3_5_1-b" lnHash="-392957557" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-392957557" unbViolId="38c4c96a-752f-3be4-8822-082e79eb4897" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2319206-bd62-3173-b365-312f5957b9de" locEndPos="5" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="4" auth="lyao" locRef="6" rule="MISRA2008-3_9_2" lnHash="-392957557" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-392957557" unbViolId="b54ecc44-5b87-3b94-9d41-458a1e6dcb8f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f84a2e0e-1071-38cf-a93f-d4de481eeaaf" locEndPos="5" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="MISRA-013" lnHash="-392957557" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-392957557" unbViolId="79f742d7-04fb-39d2-8860-f3499a337010" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b1d1e11-a108-336e-b315-1c1073cb7c1c" locEndPos="5" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'getArea' function should be preceded by a comment that contains the '@brief' tag" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="COMMENT-14" lnHash="-392957557" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-392957557" unbViolId="e466103f-efd1-330f-96ac-eb5560337323" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48de3145-dcf5-37f4-9ee8-85d097dbe2f2" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'getArea' function should be preceded by a comment that contains the '@brief' tag" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="-392957557" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-392957557" unbViolId="9a4fef16-fe80-3223-90be-d45baab3df19" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d6e846bc-ae2c-3cda-8b52-34c7b480fabc" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'getArea' function should be preceded by a comment that contains the '@return' tag" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="-392957557" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-392957557" unbViolId="a1825197-3b9e-30e9-b020-158f8a4ddab9" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0320ea8-ec7b-3b07-8456-c103febc832c" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'getArea' function should be preceded by a comment that contains the '@return' tag" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="COMMENT-14_b" lnHash="-392957557" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-392957557" unbViolId="a84353f3-3155-365d-ada5-7666fafd279d" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="085ff500-a8af-3fc4-8142-ff4604a61812" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Make virtual functions nonpublic, and public functions nonvirtual: getArea" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="CODSTA-CPP-25" lnHash="-392957557" rule.header="Consider making virtual functions nonpublic, and public functions nonvirtual" tool="c++test" lineHash="-392957557" unbViolId="048b0f76-909c-3f1e-b1e9-6c004dc9648d" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="603d9911-ac06-35f4-a5e2-956341292e8a" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'getArea' function should be declared with the 'override' specifier" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="CODSTA-MCPP-05" lnHash="-392957557" rule.header="Each overriding virtual function shall be declared with the override or final specifier" tool="c++test" lineHash="-392957557" unbViolId="f2ee3ea3-0d25-3156-8088-1fed4dee06ec" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0496e38-c8f9-3cde-9916-72e94be45d61" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'getArea' function should be declared with the 'override' specifier" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A10_3_2-a" lnHash="-392957557" rule.header="Each overriding virtual function shall be declared with the override or final specifier" tool="c++test" lineHash="-392957557" unbViolId="1a0cf01d-bae4-36fc-a029-612f222e1b4f" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a22cb6b-792f-3af8-8f27-64a5d36eeee7" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'getArea' function should be declared with the 'override' specifier" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="HICPP-10_2_1-a" lnHash="-392957557" rule.header="Each overriding virtual function shall be declared with the override or final specifier" tool="c++test" lineHash="-392957557" unbViolId="44f0e80f-7d74-3afb-9c02-d35321924369" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="380d4b8c-20e6-3315-925b-2077e61537a4" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Declaration of virtual function 'getArea' should have 'override' or 'final' specifier" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="CODSTA-MCPP-24" lnHash="-392957557" rule.header="Only one of virtual, override or final should be specified in a member function declaration" tool="c++test" lineHash="-392957557" unbViolId="d39bf5a6-ad97-3da6-8994-35c8ae75c1e5" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1b596722-3512-3f82-b0cb-53f0b7fba374" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Declaration of virtual function 'getArea' should have 'override' or 'final' specifier" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A10_3_1-a" lnHash="-392957557" rule.header="Only one of virtual, override or final should be specified in a member function declaration" tool="c++test" lineHash="-392957557" unbViolId="8514ca1a-b389-32fe-8276-3f9b00667259" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="19127cd7-d398-3056-948f-ef798280314a" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Return type is not placed in line before function 'getArea'" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="FORMAT-28" lnHash="-392957557" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-392957557" unbViolId="f99de73b-d439-31bd-9ac0-7282d6e6fa15" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0486febb-bef1-36e4-bb0c-760cfbe9e311" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Function 'getArea' has Cyclomatic Complexity value: 1" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="5" auth="lyao" locRef="6" rule="METRICS-29" lnHash="-392957557" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-392957557" unbViolId="1d568f9d-b235-3415-b7e0-bd0b622c585a" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91427001-a42a-314d-a0f2-4f4893931784" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Function 'getArea' has Essential Complexity value: 1" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="5" auth="lyao" locRef="6" rule="METRICS-33" lnHash="-392957557" rule.header="Report Essential Complexity" tool="c++test" lineHash="-392957557" unbViolId="b180e506-b5a7-3552-a3ce-19c88263f9a6" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee64baed-ef14-3964-b8f0-574f4269f1c5" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Naming convention not followed: getArea" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="NAMING-17" lnHash="-392957557" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-392957557" unbViolId="1ceb2aa2-2561-3994-80ae-d766eabcc029" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5d7ba56-ad93-3084-a11a-a22fcc4286db" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Use the virtual keyword for 'getArea' function" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="OOP-21" lnHash="-392957557" rule.header="Use the virtual keyword if a subclass implements a virtual function" tool="c++test" lineHash="-392957557" unbViolId="7bbf0a40-9332-30c1-951b-4df1f0e6d828" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5c597b3-af69-3779-b44d-2a60693fca1a" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Use the virtual keyword for 'getArea' function" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="2" auth="lyao" locRef="6" rule="MISRA2008-10_3_2" lnHash="-392957557" rule.header="Each overriding virtual function shall be declared with the virtual keyword" tool="c++test" lineHash="-392957557" unbViolId="3d3edd8a-aaeb-36c8-8652-f5a5beb5c584" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b1db5190-f675-32ca-911c-5530ee7d7a6f" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Function 'getArea' is both virtual and inline" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="OOP-25" lnHash="-392957557" rule.header="Avoid declaring virtual functions inline" tool="c++test" lineHash="-392957557" unbViolId="eb3606df-43a0-36ec-a92b-f6b330a08930" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dffd7290-ff1c-397c-9614-6deafa84fc5c" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The definition of the 'getArea' function is not preceded by a comment" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="COMMENT-04" lnHash="-392957557" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-392957557" unbViolId="3f7b9185-03ee-3d4d-8636-b7471be1a703" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b487836-a7be-391f-9ec0-da87dadabc9c" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The definition of the 'getArea' function is not preceded by a comment" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="4" auth="lyao" locRef="6" rule="JSF-134" lnHash="-392957557" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-392957557" unbViolId="3c535e17-12f0-3067-afa8-10d930ee22ab" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c70f341-b0a7-3301-b356-d0ccf382ed32" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The name 'getArea' should be composed only of lowercase letters" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="JSF-051" lnHash="-392957557" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-392957557" unbViolId="6c57a7c4-3d33-3ce9-8190-3b796008e331" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b307041-8fc3-392a-8e74-8f26edf6ed4d" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The name 'getArea' should be composed only of lowercase letters" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="NAMING-44" lnHash="-392957557" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-392957557" unbViolId="6c6689be-a692-3d9d-b730-93ddb8a0fdca" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a45cce14-4efc-3d0b-9af4-9f8e9549776e" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Implicit conversion from integral to floating type in function's return" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="2" auth="lyao" locRef="6" rule="MISRA2008-5_0_5_b" lnHash="-392957557" rule.header="There shall be no implicit floating-integral conversions" tool="c++test" lineHash="-392957557" unbViolId="03e00f6c-d430-3ba9-a2b9-befad4ef7825" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad315d9a-6935-3e11-828c-a3d5001904be" locEndPos="30" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Implicit conversion from integral to floating type in function's return" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="CERT_C-EXP39-a" lnHash="-392957557" rule.header="There shall be no implicit conversions from integral to floating type" tool="c++test" lineHash="-392957557" unbViolId="4ec62830-7803-32c9-a501-8cc552d70d5f" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="830f1fd7-d96e-3405-91f9-3484bf4a80fe" locEndPos="30" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Implicit conversion from integral to floating type in function's return" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-M5_0_5-a" lnHash="-392957557" rule.header="There shall be no implicit conversions from integral to floating type" tool="c++test" lineHash="-392957557" unbViolId="4ad2a0c7-1fbe-3b13-81b5-b7bd15d9f5a9" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ec15b76-ad01-3b9b-9d1a-62b186c39d8b" locEndPos="30" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Implicit conversion from integral to floating type in function's return" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="MISRA2004-10_1_b" lnHash="-392957557" rule.header="There shall be no implicit conversions from integral to floating type" tool="c++test" lineHash="-392957557" unbViolId="da2bdd2f-d6de-3d5c-bd62-a489798e9017" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27c5b004-c7e7-3be5-a086-6a86613e8b3a" locEndPos="30" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Function 'getArea' has declared return type 'double' but returns value of type 'int'" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="PB-05" lnHash="-392957557" rule.header="Return value of a function must match declared return type" tool="c++test" lineHash="-392957557" unbViolId="c452c367-2404-3af0-8699-f4b19fd965c1" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f463518-187b-38f9-ba3b-aea23f7cddce" locEndPos="30" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="'return' statement should be used with parenthesis" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="FORMAT-25_b" lnHash="-392957557" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="-392957557" unbViolId="7d8a3f5f-175e-384e-8566-b12c97ecab33" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e9bb041-c060-3005-8f7e-c90e991500d5" locEndPos="30" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="FORMAT-03" lnHash="-392957557" rule.header="Place a closing brace '}' on its own line" tool="c++test" lineHash="-392957557" unbViolId="3d9427ae-7ca4-3bbe-8f87-d964347357e7" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="494e6554-4b6c-3865-bcc1-fb094bb1d1d9" locEndPos="40" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="JSF-061" lnHash="-392957557" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-392957557" unbViolId="5df59bdd-922c-3583-af8b-63b2e77ada83" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f7e96e6-f852-3893-86eb-e945494fa325" locEndPos="40" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="FORMAT-42" lnHash="-392957557" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-392957557" unbViolId="8364332a-45df-3736-aaa6-29fa8a97df0c" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9750b2c-22f8-3a70-b171-fd2e57f7eda5" locEndPos="40" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="19" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="19" sev="3" auth="lyao" locRef="6" rule="JSF-060_a" lnHash="-392957557" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-392957557" unbViolId="de523585-c3c3-3063-b8b8-7ede18f70227" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ad87f2f-165b-354c-9248-c5c89e1591e0" locEndPos="40" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="22" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="22" sev="3" auth="lyao" locRef="6" rule="FORMAT-02" lnHash="2093521939" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="2093521939" unbViolId="c792a927-1734-359b-a860-f29911b7b49b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3de257e9-5753-345d-b841-f2f507976186" locEndPos="1" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="22" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="22" sev="3" auth="lyao" locRef="6" rule="FORMAT-34" lnHash="2093521939" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="2093521939" unbViolId="12c51572-fdb3-3010-85ed-b98571b258d4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b48e3c3-ed5e-3f37-b990-69513333cc13" locEndPos="1" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Do not declare the 'Circle' type in the global namespace" ln="22" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="22" sev="4" auth="lyao" locRef="6" rule="JSF-098" lnHash="2093521939" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="2093521939" unbViolId="2aa677d9-147c-3ba5-9bc4-7583a8bdf03e" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bcecad7f-3706-3e36-bd68-bc0559e9b359" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Do not declare the 'Circle' type in the global namespace" ln="22" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="22" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-M7_3_1-a" lnHash="2093521939" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="2093521939" unbViolId="7a841724-94dd-3651-9bab-289b850fe8ff" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4806e96c-1ef5-3dae-9648-ab824627c59f" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Do not declare the 'Circle' type in the global namespace" ln="22" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="22" sev="3" auth="lyao" locRef="6" rule="CODSTA-CPP-36" lnHash="2093521939" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="2093521939" unbViolId="56d72ce3-97c9-3045-967f-d519d69da339" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7bf5b0f-2f5c-3651-bd9c-0ea67bc9a539" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Do not declare the 'Circle' type in the global namespace" ln="22" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="22" sev="2" auth="lyao" locRef="6" rule="MISRA2008-7_3_1" lnHash="2093521939" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="2093521939" unbViolId="72a75ff1-2fb8-373a-941c-074ad57afef8" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ac210e4-9e02-319b-9623-b046242bf320" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="The declaration of the 'Circle' type should be preceded by a comment that contains the '@brief' tag" ln="22" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="22" sev="3" auth="lyao" locRef="6" rule="COMMENT-14" lnHash="2093521939" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="2093521939" unbViolId="856b9eff-031a-38fa-829e-0b4b8b5e2c16" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5deadffe-8470-3047-b0c3-31dc7f1112ab" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="The declaration of the 'Circle' type should be preceded by a comment that contains the '@brief' tag" ln="22" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="22" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="2093521939" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="2093521939" unbViolId="976e3606-b5e8-3595-9340-f8c57149f954" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3d7d47c-3c00-32cc-9747-d51ddff217a3" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Public section must be before protected and private sections" ln="22" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="22" sev="3" auth="lyao" locRef="6" rule="JSF-057_a" lnHash="2093521939" rule.header="The public section of a class will be declared before the protected section and before the private section" tool="c++test" lineHash="2093521939" unbViolId="0ccc1972-a7f8-35e2-8752-7a93bab21cb3" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="724afb7b-f2d9-3f11-8a5b-723826a503cb" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Public section must be before protected and private sections" ln="22" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="22" sev="3" auth="lyao" locRef="6" rule="CODSTA-CPP-46" lnHash="2093521939" rule.header="Order of scopes in class: public before all others" tool="c++test" lineHash="2093521939" unbViolId="d12c67bc-1a20-3780-be0b-2dae75de9b95" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="625ecb81-3526-383f-8948-e3faf556f718" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Class 'Circle' should be final" ln="22" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="22" sev="4" auth="lyao" locRef="6" rule="AUTOSAR-A12_4_2-a" lnHash="2093521939" rule.header="If a public destructor of a class is non-virtual, then the class should be declared final" tool="c++test" lineHash="2093521939" unbViolId="bab82572-8ccd-3d5e-9e79-f170e1110be8" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0c8c93c-5562-3f89-be66-c5d4c39e7d4a" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Class 'Circle' should be final" ln="22" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="22" sev="3" auth="lyao" locRef="6" rule="CODSTA-MCPP-23" lnHash="2093521939" rule.header="If a public destructor of a class is non-virtual, then the class should be declared final" tool="c++test" lineHash="2093521939" unbViolId="e9a05679-0617-3391-b785-08b8aac7864d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a39c904e-cce6-3e5c-8b4d-b942aebc81d2" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Explicitly declare default constructor in 'Circle'" ln="22" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="22" sev="3" auth="lyao" locRef="6" rule="HICPP-12_5_1-a" lnHash="2093521939" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="2093521939" unbViolId="4d59b8b1-e105-3d61-bea2-90b19c9f8b85" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c0f1ca7-02eb-31d6-a74c-19a90ea8142b" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Explicitly declare destructor in 'Circle'" ln="22" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="22" sev="3" auth="lyao" locRef="6" rule="HICPP-12_5_1-a" lnHash="2093521939" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="2093521939" unbViolId="fe26786a-4dcd-36a0-888a-95e416cad072" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="539c3382-28b2-31a3-95ff-661bb2b130da" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Explicitly declare copy assignment operator in 'Circle'" ln="22" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="22" sev="3" auth="lyao" locRef="6" rule="HICPP-12_5_1-a" lnHash="2093521939" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="2093521939" unbViolId="16e5044f-f65b-325b-9ea2-9d1dbac07ec8" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f4227a53-7335-34ff-9558-11843d5d7bc8" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Explicitly declare move assignment operator in 'Circle'" ln="22" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="22" sev="3" auth="lyao" locRef="6" rule="HICPP-12_5_1-a" lnHash="2093521939" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="2093521939" unbViolId="3d9fb98d-8922-3f34-8b96-466de6f567ca" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f963e3af-d18e-346e-a9f8-7a45752fe38f" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Explicitly declare copy constructor in 'Circle'" ln="22" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="22" sev="3" auth="lyao" locRef="6" rule="HICPP-12_5_1-a" lnHash="2093521939" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="2093521939" unbViolId="60e5273e-51d1-3e68-9c70-1aa014b2723b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b6fb633-ff71-30eb-aaeb-35b4e76ae6f9" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Explicitly declare move constructor in 'Circle'" ln="22" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="22" sev="3" auth="lyao" locRef="6" rule="HICPP-12_5_1-a" lnHash="2093521939" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="2093521939" unbViolId="781816b5-2ed0-3eac-b728-aa09f0c1609c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="506a4a52-0050-3ebe-9de9-68b997f3e19b" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Class 'Circle' missing assignment operator or special comment" ln="22" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="22" sev="3" auth="lyao" locRef="6" rule="MRM-04" lnHash="2093521939" rule.header="All classes should contain the assignment operator or appropriate comment" tool="c++test" lineHash="2093521939" unbViolId="b0a346cb-91fa-3295-a2dc-3e456537e8bc" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43af9f22-2fa0-35bc-83f1-03c9069d4887" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Class 'Circle' missing copy constructor or special comment" ln="22" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="22" sev="3" auth="lyao" locRef="6" rule="MRM-05" lnHash="2093521939" rule.header="All classes should contain the copy constructor or appropriate comment" tool="c++test" lineHash="2093521939" unbViolId="2a709637-a1b8-3568-8eff-bbb661c9edd2" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="315ae00e-1035-3ffa-8bf7-562969c7aa45" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Class 'Circle' missing assignment operator or special comment" ln="22" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="22" sev="3" auth="lyao" locRef="6" rule="MRM-47" lnHash="2093521939" rule.header="Classes containing at least one non-static member variable should declare the assignment operator or contain appropriate comment" tool="c++test" lineHash="2093521939" unbViolId="a2ed8512-3f9f-38a4-9729-183664b62a89" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="34d09041-a80c-3b07-978f-c19a7c6914c0" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Class 'Circle' missing copy constructor or special comment" ln="22" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="22" sev="3" auth="lyao" locRef="6" rule="MRM-48" lnHash="2093521939" rule.header="Classes containing at least one non-static member variable should declare the copy constructor or contain appropriate comment" tool="c++test" lineHash="2093521939" unbViolId="e2c7018d-68e7-3b01-85c2-2fd677450041" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7030f3f4-ce46-3885-99da-59bbeffe7a07" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Class 'Circle' has virtual functions without a virtual destructor" ln="22" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="22" sev="2" auth="lyao" locRef="6" rule="OOP-23" lnHash="2093521939" rule.header="If a class has virtual functions it shall have a virtual destructor" tool="c++test" lineHash="2093521939" unbViolId="ddba2f08-4df1-31f3-b480-d2a8b152c129" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b89ebe34-4301-3b54-b5c2-b05c20a3c06c" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="The type name 'Circle' is not a unique identifier in the testing scope" ln="22" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="22" sev="2" auth="lyao" locRef="6" rule="MISRA2012-RULE-5_7_a" lnHash="2093521939" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="2093521939" unbViolId="b7b122ae-c3c6-31e6-815e-caded36cf2d7" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="39b4c150-2355-3202-83b4-2fafa7bd042c" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="The type name 'Circle' is not a unique identifier in the testing scope" ln="22" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="22" sev="2" auth="lyao" locRef="6" rule="MISRAC2012-RULE_5_7-a" lnHash="2093521939" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="2093521939" unbViolId="97572d86-a1c3-3159-820e-87895c31721a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="97cb8fc7-8c9d-3677-955b-809291c18ced" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="23" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="23" sev="4" auth="lyao" locRef="6" rule="JSF-043" lnHash="1798682864" rule.header="Tabs should be avoided" tool="c++test" lineHash="1798682864" unbViolId="e0f6fdf2-ee3f-3f30-9012-ab9d1aa1f3b5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="57369f6a-74ea-32af-adc9-24b996c68889" locEndPos="1" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="23" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="23" sev="5" auth="lyao" locRef="6" rule="FORMAT-01" lnHash="1798682864" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1798682864" unbViolId="74e76ac7-9e1a-37c0-a97d-5ca24e845648" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9a3d345-f8cd-3328-ba95-659cb2623fc6" locEndPos="1" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="23" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="23" sev="5" auth="lyao" locRef="6" rule="HICPP-2_1_1-a" lnHash="1798682864" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1798682864" unbViolId="10527a22-f361-3b64-92cd-423a75c8a370" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8d04e39-11b7-3fc8-afd5-34e106488d60" locEndPos="1" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="23" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="23" sev="4" auth="lyao" locRef="6" rule="MISRAC2012-DIR_4_6-b" lnHash="1798682864" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1798682864" unbViolId="a0fba808-63bf-3970-9b69-3fb89ec01d50" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9dfc7da-1077-33a6-865d-9405ce07b3b1" locEndPos="2" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="23" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="23" sev="2" auth="lyao" locRef="6" rule="JSF-209_b" lnHash="1798682864" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1798682864" unbViolId="cd27c747-f7aa-37cc-998b-354399f2e1b7" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2117d4c3-9d5a-34a9-94f5-d6b7176bd350" locEndPos="2" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="23" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="23" sev="3" auth="lyao" locRef="6" rule="MISRA2004-6_3_b" lnHash="1798682864" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1798682864" unbViolId="ef850702-caa2-3c03-8943-ab0c51ef452b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc652f23-5f42-3628-91c9-ece110297409" locEndPos="2" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="23" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="23" sev="4" auth="lyao" locRef="6" rule="MISRA2012-DIR-4_6_b" lnHash="1798682864" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1798682864" unbViolId="7b8a6c99-26de-3c3c-9b38-9e8322e65895" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b88ef0c3-7591-35cb-916a-885eeb06db27" locEndPos="2" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="23" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="23" sev="3" auth="lyao" locRef="6" rule="HICPP-3_5_1-b" lnHash="1798682864" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1798682864" unbViolId="4ff16dcb-ddb5-35b2-a60d-2340886fa0a8" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="50ef06eb-51ab-372a-9ca1-e2a09f16b371" locEndPos="2" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="23" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="23" sev="4" auth="lyao" locRef="6" rule="MISRA2008-3_9_2" lnHash="1798682864" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1798682864" unbViolId="398e4e73-c0fe-3559-a71d-26babf4e8357" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="66e632b0-1320-3f07-b5ed-0f5ceac1d704" locEndPos="2" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="23" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="23" sev="3" auth="lyao" locRef="6" rule="MISRA-013" lnHash="1798682864" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1798682864" unbViolId="cb4b668f-0039-3690-84e6-c83a9ba65155" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ae96fca-e5ac-3369-8082-024e65657a32" locEndPos="2" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="The '_radius' member variable should be preceded by a comment that contains the '@brief' tag" ln="23" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="23" sev="3" auth="lyao" locRef="6" rule="COMMENT-14" lnHash="1798682864" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1798682864" unbViolId="85c8279d-27fa-3b1f-a710-cbf8d5a73446" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f16019a-57bf-3852-9d2b-ff4b766e0dfd" locEndPos="9" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="The '_radius' member variable should be preceded by a comment that contains the '@brief' tag" ln="23" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="23" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="1798682864" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1798682864" unbViolId="12e6c7a2-5dd9-3c6a-b298-049787f4b732" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0a8eda1-698f-3dc2-b4f2-7dc59be5426e" locEndPos="9" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="Member variable '_radius' shall begin with a lowercase letter" ln="23" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="23" sev="3" auth="lyao" locRef="6" rule="NAMING-07" lnHash="1798682864" rule.header="Begin member variable names with a lowercase letters" tool="c++test" lineHash="1798682864" unbViolId="d061710f-6b3b-3048-a405-988e0e6cbac2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3f1d49f-8991-3991-81f9-eedb9f855ac6" locEndPos="9" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="Naming convention not followed: _radius" ln="23" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="23" sev="3" auth="lyao" locRef="6" rule="NAMING-14" lnHash="1798682864" rule.header="Begin class data member names with 'its'" tool="c++test" lineHash="1798682864" unbViolId="40aa6973-d8aa-3c4d-8f31-ad824ba88de4" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da4f9ef3-62a8-3b58-984f-ae1308cad333" locEndPos="9" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="Naming convention not followed: _radius" ln="23" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="23" sev="3" auth="lyao" locRef="6" rule="NAMING-15" lnHash="1798682864" rule.header="Begin all double type variable with 'd'" tool="c++test" lineHash="1798682864" unbViolId="b5477a20-ff59-3901-b4b2-efc180ca644e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee7ff81e-78f9-3c2b-9983-e62ec9e87713" locEndPos="9" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="Using underscore at the beginning of the name '_radius' is not allowed" ln="23" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="23" sev="3" auth="lyao" locRef="6" rule="NAMING-33" lnHash="1798682864" rule.header="Do not use identifiers which begin with one or two underscores (`_' or `__')" tool="c++test" lineHash="1798682864" unbViolId="b33b99f1-3c51-3a35-8b59-40a02d5b6e81" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a1c828e-6d81-36dd-9801-8aa06f600493" locEndPos="9" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="Using underscore at the beginning of the name '_radius' is not allowed" ln="23" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="23" sev="3" auth="lyao" locRef="6" rule="JSF-047" lnHash="1798682864" rule.header="Identifiers will not begin with the underscore character &quot;_&quot;" tool="c++test" lineHash="1798682864" unbViolId="8c3c30da-c8bc-3197-be0d-604e99d08c7f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a83b07e-9307-380c-a06d-9f458975f4aa" locEndPos="9" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="The '_radius' identifier should have the 'd' prefix followed by a capital letter or an underscore" ln="23" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="23" sev="3" auth="lyao" locRef="6" rule="NAMING-HN-12" lnHash="1798682864" rule.header="Hungarian notation for double-precision floating point types" tool="c++test" lineHash="1798682864" unbViolId="7621c0e7-280e-3a4f-9eea-e893ad84cf2c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c27f80bc-ff57-342c-bb24-e36154581d08" locEndPos="9" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="The '_radius' identifier should have the 'm_' prefix" ln="23" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="23" sev="3" auth="lyao" locRef="6" rule="NAMING-HN-29" lnHash="1798682864" rule.header="Hungarian notation for member variables" tool="c++test" lineHash="1798682864" unbViolId="43d37a8a-b6a1-3ba9-9a12-e7ae710073fb" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="32b568da-b097-3500-baf1-a02656bccabb" locEndPos="9" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="The identifier '_radius' differs only by presence/absence of the underscore character from identifier 'radius' declared in file 'Shapes.hpp'" ln="23" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="23" sev="3" auth="lyao" locRef="6" rule="NAMING-45" lnHash="1798682864" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="1798682864" unbViolId="1b3a9a82-b5c7-3cd6-a6e3-ca044dbd5d10" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="931d77b8-a9c6-393f-b59c-ea201f71fca6" locEndPos="9" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="The identifier '_radius' differs only by presence/absence of the underscore character from identifier 'radius' declared in file 'Shapes.hpp'" ln="23" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="23" sev="3" auth="lyao" locRef="6" rule="JSF-048" lnHash="1798682864" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="1798682864" unbViolId="af60f396-1113-3c3a-b5d0-31b76ff742b9" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ed710eb-cf36-31e3-bb5b-84e8833b3fb7" locEndPos="9" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="3" auth="lyao" locRef="6" rule="METRICS-19" lnHash="1689459350" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="1689459350" unbViolId="83b3216e-7f56-3f34-bf3e-13e083227f83" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed61d5e7-6eac-3525-86ec-9c08beb4fa9d" locEndPos="1" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="3" auth="lyao" locRef="6" rule="JSF-061" lnHash="1689459350" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1689459350" unbViolId="6ddc0bfb-01d4-3743-a180-c3834a0fb375" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d40d91f0-dfeb-3c1e-997b-c8476c4d22fe" locEndPos="1" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="3" auth="lyao" locRef="6" rule="FORMAT-42" lnHash="1689459350" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1689459350" unbViolId="9584585b-03b9-30e8-9af9-c2c35899fe08" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="32ed4424-f876-302a-8c49-fe624965b78f" locEndPos="1" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="3" auth="lyao" locRef="6" rule="JSF-060_a" lnHash="1689459350" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1689459350" unbViolId="01a75ea1-0350-3a35-8f5b-12d077ced4b8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5618431-8905-3e64-9e2a-6b0cbcca4095" locEndPos="1" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="3" auth="lyao" locRef="6" rule="FORMAT-43" lnHash="1689459350" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="1689459350" unbViolId="10d681d2-5f71-3877-93ca-eaf5fbcffc60" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a607f06e-df2d-3339-8510-f232e7191891" locEndPos="1" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="3" auth="lyao" locRef="6" rule="JSF-060_b" lnHash="1689459350" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="1689459350" unbViolId="2a652659-1a8f-322d-ac61-de19c798989c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c79e03ca-bc14-3115-a12a-56fd506cc65a" locEndPos="1" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The 'Circle' function should be preceded by a comment that contains the '@brief' tag" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="3" auth="lyao" locRef="6" rule="COMMENT-14" lnHash="1689459350" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1689459350" unbViolId="0d6ea433-7380-3070-aad8-22524a8a7a85" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="313fdfbb-3ff2-3b4f-87e2-9d30ad78df8b" locEndPos="5" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The 'Circle' function should be preceded by a comment that contains the '@brief' tag" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="1689459350" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1689459350" unbViolId="03733a02-ef47-3a11-80f4-6213eab21959" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1936f36-5fa8-31ab-bdcf-37f0e22b9409" locEndPos="5" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="1689459350" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1689459350" unbViolId="e9aea795-7edc-3e55-9c25-be36e1006f7d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5adb1c42-60ae-37e5-834a-75c3e2fb029f" locEndPos="5" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="3" auth="lyao" locRef="6" rule="COMMENT-14_b" lnHash="1689459350" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1689459350" unbViolId="d6eb0fe9-f526-3970-9f4d-3e69e4816f85" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94f9905a-2a99-3387-89d1-83733ee213cb" locEndPos="5" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The 'radius' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="1689459350" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1689459350" unbViolId="ccdc118a-e984-36da-af69-0f2bee73e059" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="89c60030-3bf2-3693-8545-34890bd32c6a" locEndPos="5" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The 'radius' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="3" auth="lyao" locRef="6" rule="COMMENT-14_b" lnHash="1689459350" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1689459350" unbViolId="1223ec42-9c7c-3f8e-9cb0-ee72d1f984ba" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="894d6e1e-203c-3d57-b564-4c9d93893e84" locEndPos="5" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Class 'Circle' defines an inline constructor" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="3" auth="lyao" locRef="6" rule="OPT-17" lnHash="1689459350" rule.header="Avoid inline constructors and destructors" tool="c++test" lineHash="1689459350" unbViolId="55bee1e8-db70-3cc2-8b44-2188ddcf4ad6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4133042d-807d-3f7a-ad20-3ffcae749bf3" locEndPos="5" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Function 'Circle' has Cyclomatic Complexity value: 1" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="5" auth="lyao" locRef="6" rule="METRICS-29" lnHash="1689459350" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="1689459350" unbViolId="8356e27d-2391-3ee4-a6f4-4330d4e66a3d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51dffa83-2010-363b-90f7-12710b94cc51" locEndPos="5" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Function 'Circle' has Essential Complexity value: 1" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="5" auth="lyao" locRef="6" rule="METRICS-33" lnHash="1689459350" rule.header="Report Essential Complexity" tool="c++test" lineHash="1689459350" unbViolId="c478bcf2-a720-3ed8-9600-e32b413fb1d5" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="691c254d-04af-3200-9596-099ffc05ebaa" locEndPos="5" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The definition of the 'Circle' function is not preceded by a comment" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="3" auth="lyao" locRef="6" rule="COMMENT-04" lnHash="1689459350" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="1689459350" unbViolId="373a2d00-8462-3726-91bc-d2f17e6a3cc2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1e386c4-3cb0-3787-a567-dd8603607ea6" locEndPos="5" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The definition of the 'Circle' function is not preceded by a comment" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="4" auth="lyao" locRef="6" rule="JSF-134" lnHash="1689459350" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="1689459350" unbViolId="b4a6151d-436d-3ab6-b4d6-58c9a06b2519" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97f37441-a547-3079-bfe8-ba03b1d5f21f" locEndPos="5" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The 'Circle' identifier is the same as the name of a type defined in the testing scope" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="2" auth="lyao" locRef="6" rule="MISRA2012-RULE-5_7_a" lnHash="1689459350" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="1689459350" unbViolId="d177858a-6fac-333a-b3ee-94bd41f81831" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="b1d85a37-d500-327e-8671-3b65a495edf4" locEndPos="5" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The 'Circle' identifier is the same as the name of a type defined in the testing scope" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="2" auth="lyao" locRef="6" rule="MISRAC2012-RULE_5_7-a" lnHash="1689459350" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="1689459350" unbViolId="f4e4e691-ce63-3880-a12a-e712ced11839" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="d69b2d5a-8625-3ce9-8a2e-e0b90d2078fd" locEndPos="5" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/><StdViol msg="The identifier 'position' differs only by presence/absence of the underscore character from identifier '_position' declared in file 'Shapes.hpp'" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="3" auth="lyao" locRef="6" rule="NAMING-45" lnHash="1689459350" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="1689459350" unbViolId="cfbed156-2b29-3807-93f5-a1de082e072a" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02a923f2-b9eb-32c7-a32a-8e9092769e6a" locEndPos="18" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The identifier 'position' differs only by presence/absence of the underscore character from identifier '_position' declared in file 'Shapes.hpp'" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="3" auth="lyao" locRef="6" rule="JSF-048" lnHash="1689459350" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="1689459350" unbViolId="071fce26-eed2-3ed9-a6d8-d340eddc101e" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="020ab399-0eef-3dcc-b6b0-56de9617f1cc" locEndPos="18" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Identifier name: 'position' differs only by presence/absence of the underscore character from identifier name: '_position' declared in base class" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="2" auth="lyao" locRef="6" rule="MISRA2008-2_10_1" lnHash="1689459350" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="1689459350" unbViolId="72ba2a3d-66e3-35f6-a2c5-aadad4e36aa6" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="01e685d9-04a7-3dab-bcca-0667955abbc2" locEndPos="18" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Identifier name: 'position' differs only by presence/absence of the underscore character from identifier name: '_position' declared in base class" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="3" auth="lyao" locRef="6" rule="HICPP-2_4_1-a" lnHash="1689459350" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="1689459350" unbViolId="3b6cf7f8-d8fb-38c9-afe3-7279685e8a21" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e5f7f6e-67e2-39b0-8ace-2e9d2577167d" locEndPos="18" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Identifier name: 'position' differs only by presence/absence of the underscore character from identifier name: '_position' declared in base class" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-M2_10_1-a" lnHash="1689459350" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="1689459350" unbViolId="9668538f-c4cb-3514-a854-fe7daab34302" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad0e849b-3a72-3ac6-8ec5-340d077df0eb" locEndPos="18" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Identifier name: 'position' differs only by presence/absence of the underscore character from identifier name: '_position' declared in base class" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="3" auth="lyao" locRef="6" rule="NAMING-47" lnHash="1689459350" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="1689459350" unbViolId="34380c04-5a5b-3585-8989-784cb590ac52" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="20601b80-51da-33ce-8fcc-57930505ee4f" locEndPos="18" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The parameter 'position' of function 'Circle' is passed by value" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="3" auth="lyao" locRef="6" rule="OPT-14" lnHash="1689459350" rule.header="Pass objects by reference instead of by value" tool="c++test" lineHash="1689459350" unbViolId="1a1be728-1793-3587-9c03-14b52d262e56" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4c46008-ee52-3bac-a010-556279a9da21" locEndPos="18" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The parameter 'position' of function 'Circle' is passed by value" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="4" auth="lyao" locRef="6" rule="JSF-125_a" lnHash="1689459350" rule.header="Pass and return by reference when possible" tool="c++test" lineHash="1689459350" unbViolId="6816a222-4cba-3445-8b78-f92184891c63" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3c681d6-56d8-35ec-8e65-54317c5a6e4e" locEndPos="18" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The parameter 'position' of function 'Circle' is passed by value" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="4" auth="lyao" locRef="6" rule="JSF-117" lnHash="1689459350" rule.header="Arguments should be passed by reference" tool="c++test" lineHash="1689459350" unbViolId="3ff103f7-34d9-38f0-a31f-925ca33710d3" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e4a650d-2478-3908-b232-08471e7de563" locEndPos="18" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="4" auth="lyao" locRef="6" rule="MISRA2008-3_9_2" lnHash="1689459350" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1689459350" unbViolId="005084f8-3a5a-36c5-9e9a-492f322e18ca" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17e7bf9d-d50e-3790-9866-0e3264a53892" locEndPos="28" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="3" auth="lyao" locRef="6" rule="MISRA-013" lnHash="1689459350" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1689459350" unbViolId="68d9b08d-5a07-32a9-be13-fab8fc5647e0" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bbbbd490-aa58-35c4-94e0-b1116aa3f74d" locEndPos="28" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="4" auth="lyao" locRef="6" rule="MISRAC2012-DIR_4_6-b" lnHash="1689459350" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1689459350" unbViolId="96e825cd-1f18-32b9-940b-d86ffa77111c" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5b8fb96-78e7-36c8-8209-17837fc6e2ef" locEndPos="28" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="2" auth="lyao" locRef="6" rule="JSF-209_b" lnHash="1689459350" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1689459350" unbViolId="c3f95d1c-b84b-32f0-97e4-0f3f9ecac35d" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ac8d85a-5c8f-3307-9b91-62680ddb4caa" locEndPos="28" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="3" auth="lyao" locRef="6" rule="MISRA2004-6_3_b" lnHash="1689459350" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1689459350" unbViolId="90cbfd8d-6315-35a5-91b9-256bc9c3db36" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fce9d0cc-aa32-3140-96c3-3c3ba6de32dc" locEndPos="28" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="4" auth="lyao" locRef="6" rule="MISRA2012-DIR-4_6_b" lnHash="1689459350" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1689459350" unbViolId="addc403c-0bdf-3ea7-8660-6574d88aa8a4" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8fd6f186-60c3-3536-82c1-05b955a02c91" locEndPos="28" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="3" auth="lyao" locRef="6" rule="HICPP-3_5_1-b" lnHash="1689459350" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1689459350" unbViolId="db44aa1d-0848-34c1-870c-84c7edbaa3e1" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a70e9df-47a8-31e6-8501-61d7c132d24d" locEndPos="28" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Identifier name: 'radius' differs only by presence/absence of the underscore character from identifier name: '_radius' declared in class" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="2" auth="lyao" locRef="6" rule="MISRA2008-2_10_1" lnHash="1689459350" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="1689459350" unbViolId="0650bbc3-e0a6-39be-a7d6-eac690164e04" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37c4ba54-bfbd-32cc-9d36-fa06d79a9266" locEndPos="35" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Identifier name: 'radius' differs only by presence/absence of the underscore character from identifier name: '_radius' declared in class" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="3" auth="lyao" locRef="6" rule="HICPP-2_4_1-a" lnHash="1689459350" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="1689459350" unbViolId="70ed29e7-99da-3ddf-b839-e2419e325d52" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e73f4681-0188-3155-a279-5e93cf247ce7" locEndPos="35" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Identifier name: 'radius' differs only by presence/absence of the underscore character from identifier name: '_radius' declared in class" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-M2_10_1-a" lnHash="1689459350" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="1689459350" unbViolId="ebf8f0d8-bf23-349d-beae-8bdf7a3dbd67" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba88e9f4-d475-34f5-b0af-5ec79d041d86" locEndPos="35" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Identifier name: 'radius' differs only by presence/absence of the underscore character from identifier name: '_radius' declared in class" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="3" auth="lyao" locRef="6" rule="NAMING-47" lnHash="1689459350" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="1689459350" unbViolId="09852d02-6b88-33f3-a502-682c976b5fae" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00450e71-b04d-3be8-a5b2-c79a513b83ae" locEndPos="35" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The 'radius' identifier should have the 'd' prefix followed by a capital letter or an underscore" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="3" auth="lyao" locRef="6" rule="NAMING-HN-12" lnHash="1689459350" rule.header="Hungarian notation for double-precision floating point types" tool="c++test" lineHash="1689459350" unbViolId="cff954b7-d7e1-3db7-bbf7-f2d4325abe89" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71e21ac7-ee8f-3893-874f-37f6eaab3855" locEndPos="35" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The identifier 'radius' differs only by presence/absence of the underscore character from identifier '_radius' declared in file 'Shapes.hpp'" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="3" auth="lyao" locRef="6" rule="NAMING-45" lnHash="1689459350" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="1689459350" unbViolId="c4be9b26-a5cb-303b-b26d-c2b5e0124f2e" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22d54cb6-dcb1-3bfe-872d-38a2fd4a16a8" locEndPos="35" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The identifier 'radius' differs only by presence/absence of the underscore character from identifier '_radius' declared in file 'Shapes.hpp'" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="3" auth="lyao" locRef="6" rule="JSF-048" lnHash="1689459350" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="1689459350" unbViolId="bdfafbb1-06ed-3a71-99ba-02e2e304183c" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1920673c-cd5e-356c-aec7-a7adc17d7901" locEndPos="35" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="3" auth="lyao" locRef="6" rule="JSF-061" lnHash="1689459350" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1689459350" unbViolId="58125e92-d3d0-3b2d-aec6-cbf88f5006bb" locStartPos="78" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a361d362-6ef5-35ce-a2df-6a489389bcd3" locEndPos="79" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="3" auth="lyao" locRef="6" rule="FORMAT-42" lnHash="1689459350" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1689459350" unbViolId="3f595720-4347-3687-948d-6af63870dff6" locStartPos="78" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="261792f0-28f8-3db5-af1e-e529bd348aee" locEndPos="79" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="25" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="25" sev="3" auth="lyao" locRef="6" rule="JSF-060_a" lnHash="1689459350" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1689459350" unbViolId="0a19bf39-5e5e-3a2f-a569-63dc6511b7e0" locStartPos="78" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3aac9e13-3ee5-3683-be72-edac269e4a62" locEndPos="79" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="JSF-061" lnHash="-535658836" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-535658836" unbViolId="a5ab54be-f636-3589-b90e-5104e983c477" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="14d35e70-45de-38bc-9c42-7953be43ff43" locEndPos="1" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="FORMAT-42" lnHash="-535658836" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-535658836" unbViolId="40f39720-f72e-3b96-abbd-49995cac0a23" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5214faed-aeea-3b42-a4ba-f4d0231b03e1" locEndPos="1" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="JSF-060_a" lnHash="-535658836" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-535658836" unbViolId="ea38564a-196c-3ac0-8e7b-64bcce28b4aa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd434653-aff8-33b2-aaa6-95a5f1e00511" locEndPos="1" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="FORMAT-43" lnHash="-535658836" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-535658836" unbViolId="9af04986-9772-3cd6-9060-755cffa6d07e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="585d3a58-c2fb-3780-9726-cbfffca05ad2" locEndPos="1" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="JSF-060_b" lnHash="-535658836" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-535658836" unbViolId="f5de9b7c-5e8f-3f9a-83f5-764a0ae5c6f1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d47f6fab-0c00-3511-8fd3-2e31def25aea" locEndPos="1" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="METRICS-19" lnHash="-535658836" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="-535658836" unbViolId="cdb629ae-91c6-35b4-84fa-cef7d4f5d932" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a7008f2-09d6-3097-a647-dccb233e1fea" locEndPos="1" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="FORMAT-02" lnHash="-535658836" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-535658836" unbViolId="67b589fd-5ce3-3934-9c16-8254d968644a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cefaccd9-c877-344d-b9b8-5c644c07eaae" locEndPos="1" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="FORMAT-34" lnHash="-535658836" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="-535658836" unbViolId="393febba-d7b6-330a-be57-094dbaf07740" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b78da15e-482b-3707-b82e-f8e8d8005e29" locEndPos="1" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="4" auth="lyao" locRef="6" rule="MISRAC2012-DIR_4_6-b" lnHash="-535658836" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-535658836" unbViolId="b4ce3321-92a0-3687-925e-1ac883fdbb16" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c2a6ce6-a9d7-3798-b392-a987e5f627fd" locEndPos="5" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="2" auth="lyao" locRef="6" rule="JSF-209_b" lnHash="-535658836" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-535658836" unbViolId="e862c2c5-ed96-35eb-8d2b-283acd894917" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf0d0b6e-b78a-33f7-a7f9-ed5f8a3b8f65" locEndPos="5" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="MISRA2004-6_3_b" lnHash="-535658836" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-535658836" unbViolId="5e01b3e0-4d87-3a25-a9b3-3172670c3886" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c462e30-7873-354f-9e85-34de44eacf6b" locEndPos="5" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="4" auth="lyao" locRef="6" rule="MISRA2012-DIR-4_6_b" lnHash="-535658836" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-535658836" unbViolId="e80e8684-b763-3739-a353-807bb22c85a2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7faaa3fa-39bf-3807-86df-5d7f96810821" locEndPos="5" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="HICPP-3_5_1-b" lnHash="-535658836" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-535658836" unbViolId="4910d127-3f3e-33f0-b5a0-27dd6528a4d5" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2be757e8-ce46-3cb4-9631-1819ad480ce3" locEndPos="5" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="4" auth="lyao" locRef="6" rule="MISRA2008-3_9_2" lnHash="-535658836" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-535658836" unbViolId="f27918a7-81dd-3e1c-8fa8-ff1501b98713" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6d6cbbc9-917c-3c34-a1ca-503c998c0060" locEndPos="5" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="MISRA-013" lnHash="-535658836" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-535658836" unbViolId="4cc6e7e9-75e4-3f2a-baae-4e93116de121" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="33e23331-d0bf-3f2d-a0c3-92ff01c75f42" locEndPos="5" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The 'getArea' function should be preceded by a comment that contains the '@brief' tag" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="COMMENT-14" lnHash="-535658836" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-535658836" unbViolId="629f75eb-9742-39ef-81a2-e6d321012871" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9647ae5-6e8d-3e1f-b6c4-c25ba12186f6" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The 'getArea' function should be preceded by a comment that contains the '@brief' tag" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="-535658836" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-535658836" unbViolId="c96da428-1ba8-3bc5-8ca2-f89c4f8abc8b" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb6261a0-cd64-348b-acd7-f48afd623761" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The 'getArea' function should be preceded by a comment that contains the '@return' tag" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="-535658836" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-535658836" unbViolId="f5b4a23a-7c20-3295-b085-61793c5b39ca" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a394d2b0-2c54-3a75-854e-bd3efd9ea5a9" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The 'getArea' function should be preceded by a comment that contains the '@return' tag" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="COMMENT-14_b" lnHash="-535658836" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-535658836" unbViolId="64083020-b45a-3a94-bb40-5fda4b4aeaa2" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e172f6a-33e1-3944-a441-0af526ad022a" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Make virtual functions nonpublic, and public functions nonvirtual: getArea" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="CODSTA-CPP-25" lnHash="-535658836" rule.header="Consider making virtual functions nonpublic, and public functions nonvirtual" tool="c++test" lineHash="-535658836" unbViolId="0c635a27-71ce-302c-b50e-6028802098fd" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09af18e7-dcac-3137-ad97-077c651a95b4" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The 'getArea' function should be declared with the 'override' specifier" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="CODSTA-MCPP-05" lnHash="-535658836" rule.header="Each overriding virtual function shall be declared with the override or final specifier" tool="c++test" lineHash="-535658836" unbViolId="cade98d6-3a10-3397-ada3-2de043b3bf7e" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1954a6f4-5d9e-3296-bc51-3d10da4df45a" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The 'getArea' function should be declared with the 'override' specifier" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A10_3_2-a" lnHash="-535658836" rule.header="Each overriding virtual function shall be declared with the override or final specifier" tool="c++test" lineHash="-535658836" unbViolId="bc2fce9d-9593-31c4-bf45-995657ae6e20" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="57e03828-88cb-31ac-9eb9-8a545d20d669" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The 'getArea' function should be declared with the 'override' specifier" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="HICPP-10_2_1-a" lnHash="-535658836" rule.header="Each overriding virtual function shall be declared with the override or final specifier" tool="c++test" lineHash="-535658836" unbViolId="792ee2ca-2f5f-3af0-97a1-794bc6fa927d" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4048a548-9f2f-368a-9059-1af9e0a1c67a" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Declaration of virtual function 'getArea' should have 'override' or 'final' specifier" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="CODSTA-MCPP-24" lnHash="-535658836" rule.header="Only one of virtual, override or final should be specified in a member function declaration" tool="c++test" lineHash="-535658836" unbViolId="09f6e013-b681-361a-a7c6-a909b35e76a6" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8824e787-2a9f-3f8a-b451-5084ea2ead13" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Declaration of virtual function 'getArea' should have 'override' or 'final' specifier" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A10_3_1-a" lnHash="-535658836" rule.header="Only one of virtual, override or final should be specified in a member function declaration" tool="c++test" lineHash="-535658836" unbViolId="3c27dfc9-ad7b-3429-b0f5-4371fd18b820" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="083d7ae2-e5fb-3cbc-a9f3-ab149c118cd6" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Return type is not placed in line before function 'getArea'" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="FORMAT-28" lnHash="-535658836" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-535658836" unbViolId="d437d1c1-b6b9-37e7-aae3-bc6e804b0db6" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ff60ed8-9351-3840-965e-f1ce0d97f7a7" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Function 'getArea' has Cyclomatic Complexity value: 1" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="5" auth="lyao" locRef="6" rule="METRICS-29" lnHash="-535658836" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-535658836" unbViolId="417f6a30-7a5c-3d53-b3ac-77f4fbb1db45" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf742e92-ce14-31f8-8813-226c879a20ea" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Function 'getArea' has Essential Complexity value: 1" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="5" auth="lyao" locRef="6" rule="METRICS-33" lnHash="-535658836" rule.header="Report Essential Complexity" tool="c++test" lineHash="-535658836" unbViolId="4141706f-9331-3a39-ae73-dd7a2511ec85" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="824b9b93-3ed0-35d7-a6b2-d21458e30edb" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Naming convention not followed: getArea" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="NAMING-17" lnHash="-535658836" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-535658836" unbViolId="8827ac20-8e2f-39e8-83f5-75d7ce504f8e" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31f6ca86-c265-3026-916a-6333ed07123d" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Use the virtual keyword for 'getArea' function" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="OOP-21" lnHash="-535658836" rule.header="Use the virtual keyword if a subclass implements a virtual function" tool="c++test" lineHash="-535658836" unbViolId="f302b602-9e9b-3cf2-a0b7-a3ae7828a44d" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9b8a600d-8321-31d6-a36f-0c32b2c8c7b1" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Use the virtual keyword for 'getArea' function" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="2" auth="lyao" locRef="6" rule="MISRA2008-10_3_2" lnHash="-535658836" rule.header="Each overriding virtual function shall be declared with the virtual keyword" tool="c++test" lineHash="-535658836" unbViolId="0c74816f-fe5b-300c-8c94-9fe986ca773b" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="036054bf-0610-3a71-b50c-0a7ed906ebbc" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Function 'getArea' is both virtual and inline" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="OOP-25" lnHash="-535658836" rule.header="Avoid declaring virtual functions inline" tool="c++test" lineHash="-535658836" unbViolId="37b58b13-742e-362c-84ee-eabdf7b7be95" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f1722774-b8fb-3b2d-97a7-5a5628a01332" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The definition of the 'getArea' function is not preceded by a comment" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="COMMENT-04" lnHash="-535658836" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-535658836" unbViolId="0101e5a7-aca8-3824-a493-79fca81ccaf0" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e6ffa81-882f-39d6-93c0-4852b400b5ef" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The definition of the 'getArea' function is not preceded by a comment" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="4" auth="lyao" locRef="6" rule="JSF-134" lnHash="-535658836" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-535658836" unbViolId="49b466cf-3e3a-38c8-8ec4-fd0b17bb1799" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="decbf77c-b750-3c99-b8ad-cc1aaabbe22d" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The name 'getArea' should be composed only of lowercase letters" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="JSF-051" lnHash="-535658836" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-535658836" unbViolId="d69b5b3d-7378-3e1e-a4da-99249858291f" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98337111-1c8c-3c3a-8858-199b6117f1d9" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The name 'getArea' should be composed only of lowercase letters" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="NAMING-44" lnHash="-535658836" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-535658836" unbViolId="786588f5-08a6-3056-998e-62e2f7ee0461" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b4ad31f-d3e2-3685-8dd5-014b4657dd89" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="'return' statement should be used with parenthesis" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="FORMAT-25_b" lnHash="-535658836" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="-535658836" unbViolId="a0da2ada-0b3f-3db6-af97-5ceaded2ec07" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ce8d497-f24e-3a30-97da-b34db8e4611a" locEndPos="30" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Literal constant '3.141592653' is used" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="JSF-151" lnHash="-535658836" rule.header="Numeric values in code will not be used; symbolic values will be used instead" tool="c++test" lineHash="-535658836" unbViolId="f6b3278c-dc3b-3adf-ac64-c57dd5941019" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be123f82-2a19-3b82-8395-13b216ad3d74" locEndPos="37" locType="sr" urgent="true" hash="1537905639" locEndLn="26" goals="1,"/>
    <StdViol msg="Literal constant '3.141592653' is used" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="CODSTA-26" lnHash="-535658836" rule.header="Avoid magic numbers" tool="c++test" lineHash="-535658836" unbViolId="2c2f453c-6125-3b22-8494-042e205700ba" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3aae61a5-ec54-3ade-9371-fdf75770d50e" locEndPos="37" locType="sr" urgent="true" hash="1537905639" locEndLn="26" goals="1,"/>
    <StdViol msg="Literal constant '3.141592653' is used" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A5_1_1-a" lnHash="-535658836" rule.header="Avoid magic numbers" tool="c++test" lineHash="-535658836" unbViolId="46d4c53d-3efa-33fa-b241-7cf24ea37139" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3fc1899-80d6-35f6-8594-1f05b5e98c51" locEndPos="37" locType="sr" urgent="true" hash="1537905639" locEndLn="26" goals="1,"/>
    <StdViol msg="Literal constant '3.141592653' is used" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="HICPP-5_1_1-a" lnHash="-535658836" rule.header="Avoid magic numbers" tool="c++test" lineHash="-535658836" unbViolId="72e7ddf5-81d3-310f-b44e-f33a9973c100" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="443ed378-6b92-3451-9ee3-279e4cb8074e" locEndPos="37" locType="sr" urgent="true" hash="1537905639" locEndLn="26" goals="1,"/>
    <StdViol msg="floating-point arithmetic is not documented" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="5" auth="lyao" locRef="6" rule="MISRA2008-0_4_2" lnHash="-535658836" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="-535658836" unbViolId="d1a6e2ae-0389-3ab4-a721-822b381e03a2" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="34c723ce-88fb-347c-8b3e-f8e770ac0f3a" locEndPos="37" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="floating-point arithmetic is not documented" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="OWASP2019-API9-d" lnHash="-535658836" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="-535658836" unbViolId="9fb1bfd2-ee9b-3ed6-8d27-fb0902cee520" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ecd9e6c2-3611-3f7b-8746-a960416c3c6c" locEndPos="37" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="floating-point arithmetic is not documented" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-M0_4_2-a" lnHash="-535658836" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="-535658836" unbViolId="5401c724-012c-3219-8b4b-a9911b9c1268" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2cb9206-116b-37ba-842a-9e860765a522" locEndPos="37" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="floating-point arithmetic is not documented" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="COMMENT-10" lnHash="-535658836" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="-535658836" unbViolId="c6e3a5f5-582d-30a2-9855-12b0bf083adc" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b39f5db-c99d-33cf-8fd9-e1c4a7fbade6" locEndPos="37" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="JSF-061" lnHash="-535658836" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-535658836" unbViolId="f377ad13-3a24-3399-91d3-da09e8c2b30e" locStartPos="69" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b0717fe-af56-3910-ad21-c03bc82fa838" locEndPos="70" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="FORMAT-42" lnHash="-535658836" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-535658836" unbViolId="f35e2039-4101-37dc-ace3-9a6f14456f70" locStartPos="69" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b36886d2-ac95-3adc-9995-6f1c1d5e101f" locEndPos="70" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="JSF-060_a" lnHash="-535658836" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-535658836" unbViolId="4bc81fef-f2ae-3cbd-b608-511653174382" locStartPos="69" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ec79ebc5-36b3-3805-bcd7-47f943e16ee0" locEndPos="70" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="26" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="26" sev="3" auth="lyao" locRef="6" rule="FORMAT-03" lnHash="-535658836" rule.header="Place a closing brace '}' on its own line" tool="c++test" lineHash="-535658836" unbViolId="dbdfe487-7da9-3f6f-b758-83a41eec15de" locStartPos="69" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1002e573-86ef-303e-999b-f422485af935" locEndPos="70" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="3" auth="lyao" locRef="6" rule="CODSTA-223" lnHash="398250049" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="398250049" unbViolId="deb57eb5-c3d7-3439-8409-8c12e84e47c4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10013e52-a2ff-3579-bcf7-ddf7a7faed23" locEndPos="5" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A3_9_1-b" lnHash="398250049" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="398250049" unbViolId="bfc675a9-c16d-384e-8f7e-5253a84a10ca" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51283510-a63e-3746-9866-b217f46b0034" locEndPos="5" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="3" auth="lyao" locRef="6" rule="HICPP-7_1_6-b" lnHash="398250049" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="398250049" unbViolId="c8d0cdd6-f995-30cd-b80a-d0e8843e24df" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b330576f-517a-3434-8e77-4de4b7f06db6" locEndPos="5" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="4" auth="lyao" locRef="6" rule="MISRAC2012-DIR_4_6-b" lnHash="398250049" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="398250049" unbViolId="1e4756e6-0f4b-3bbe-b66e-fa450399dc59" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9980b48b-1e24-39ea-a971-8c3973d85d9d" locEndPos="5" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="2" auth="lyao" locRef="6" rule="JSF-209_b" lnHash="398250049" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="398250049" unbViolId="3b346dff-c969-3227-a861-8f08da1030c5" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eff1fe3d-9348-3aca-9872-b5089c04013d" locEndPos="5" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="3" auth="lyao" locRef="6" rule="MISRA2004-6_3_b" lnHash="398250049" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="398250049" unbViolId="7627cc55-755b-3b6e-b0df-e932d5835459" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e623d54c-6d43-3259-8bd6-296c0886950b" locEndPos="5" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="4" auth="lyao" locRef="6" rule="MISRA2012-DIR-4_6_b" lnHash="398250049" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="398250049" unbViolId="e01c59ca-e9c0-3996-a606-c213a07896d2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ec1db85a-6bbf-3ff4-a131-ec08961c0f70" locEndPos="5" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="3" auth="lyao" locRef="6" rule="HICPP-3_5_1-b" lnHash="398250049" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="398250049" unbViolId="653549b8-8c48-3789-b179-3a6cc673bab6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7291f7ee-2649-3b43-9606-d173bfb9c071" locEndPos="5" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="4" auth="lyao" locRef="6" rule="MISRA2008-3_9_2" lnHash="398250049" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="398250049" unbViolId="ba1a5382-f449-379a-8567-a5599cae66e5" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a899e29-9d23-3dc9-aa4e-81414adeee5b" locEndPos="5" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="3" auth="lyao" locRef="6" rule="MISRA-013" lnHash="398250049" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="398250049" unbViolId="06d9406d-68fe-358b-b0a4-8a845a865df0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aac22ad0-a48b-35f2-8035-0ef6f412887b" locEndPos="5" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The 'contains' function should be preceded by a comment that contains the '@brief' tag" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="3" auth="lyao" locRef="6" rule="COMMENT-14" lnHash="398250049" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="398250049" unbViolId="da9a71a0-b551-3c8b-83d1-f3789a5fc74e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7855549b-f528-3465-bc0e-88734d93b85c" locEndPos="9" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The 'contains' function should be preceded by a comment that contains the '@brief' tag" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="398250049" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="398250049" unbViolId="bc6f975b-a9aa-355c-8430-bcc9a6789ca9" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb4fe329-324c-31bc-8e3d-4f9bb2e593cb" locEndPos="9" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The 'point' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="398250049" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="398250049" unbViolId="cc3779fc-5976-3008-bb8f-7699545b9973" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f1e36c66-5947-3af2-9d2a-7ac6126a0d72" locEndPos="9" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The 'point' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="3" auth="lyao" locRef="6" rule="COMMENT-14_b" lnHash="398250049" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="398250049" unbViolId="d8efdccb-3322-3c9e-a376-7b569399b52c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21fdd201-adfa-3871-ac72-48512d176688" locEndPos="9" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The 'contains' function should be preceded by a comment that contains the '@return' tag" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="398250049" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="398250049" unbViolId="e5a1ba29-0e60-3b7a-a39d-8e3fbbda252d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f5ed0ad-042f-3d8b-a328-25debcd3e809" locEndPos="9" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The 'contains' function should be preceded by a comment that contains the '@return' tag" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="3" auth="lyao" locRef="6" rule="COMMENT-14_b" lnHash="398250049" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="398250049" unbViolId="03df3596-83ff-3b8c-8a9c-ca545a36293e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="93a06603-be24-38f6-b50a-be80e479e1a9" locEndPos="9" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="'contains' shall be declared as unsigned int or signed int" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="3" auth="lyao" locRef="6" rule="PORT-13" lnHash="398250049" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="398250049" unbViolId="bebda40a-8e2a-3176-bf9b-a68d3feeb423" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2cf1c9ba-055a-362d-ac78-43d9818c0332" locEndPos="9" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="Return type is not placed in line before function 'contains'" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="3" auth="lyao" locRef="6" rule="FORMAT-28" lnHash="398250049" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="398250049" unbViolId="096e799d-6271-343f-814c-3e06aaf59375" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b92ab655-18e4-326d-a7ef-51f390dc277d" locEndPos="9" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="Function 'contains' has Cyclomatic Complexity value: 1" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="5" auth="lyao" locRef="6" rule="METRICS-29" lnHash="398250049" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="398250049" unbViolId="76dc7d5d-0828-311e-ac65-bb1c1281458b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8e29f2da-b950-32ef-bd1f-586796d17684" locEndPos="9" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="Function 'contains' has Essential Complexity value: 1" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="5" auth="lyao" locRef="6" rule="METRICS-33" lnHash="398250049" rule.header="Report Essential Complexity" tool="c++test" lineHash="398250049" unbViolId="766511a2-4bd2-317f-a3f1-34333a94f573" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3e1de09-ff86-30da-bb80-34151fae704c" locEndPos="9" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="Naming convention not followed: contains" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="3" auth="lyao" locRef="6" rule="NAMING-17" lnHash="398250049" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="398250049" unbViolId="1a54e3d6-69ee-3a53-b854-051aa5a8f985" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="456b5eae-435f-36ea-bed9-de6cb9424c73" locEndPos="9" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The definition of the 'contains' function is not preceded by a comment" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="3" auth="lyao" locRef="6" rule="COMMENT-04" lnHash="398250049" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="398250049" unbViolId="4b533338-f104-3783-85ea-428f8880a36e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c1717882-8299-3a26-9422-a63b0e61c5f2" locEndPos="9" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The definition of the 'contains' function is not preceded by a comment" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="4" auth="lyao" locRef="6" rule="JSF-134" lnHash="398250049" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="398250049" unbViolId="db82d1a0-6627-3974-8303-39a2d8f4809a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="20a841ff-583e-3781-85b4-cd983f87b318" locEndPos="9" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The identifier 'point' differs only by case from identifier 'POINT' declared in file 'windef.h'" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="3" auth="lyao" locRef="6" rule="NAMING-45" lnHash="398250049" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="398250049" unbViolId="11f81ea8-a638-3ab4-a0b5-949e388da223" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4417b4f4-46c5-3da7-9f1c-15c7b9b69e3d" locEndPos="24" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The identifier 'point' differs only by case from identifier 'POINT' declared in file 'windef.h'" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="3" auth="lyao" locRef="6" rule="JSF-048" lnHash="398250049" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="398250049" unbViolId="a9952920-ca5f-3bb8-b7d8-5689be8f8561" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e63199a7-d680-3989-8462-3ef0d6b84396" locEndPos="24" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="3" auth="lyao" locRef="6" rule="NAMING-45" lnHash="398250049" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="398250049" unbViolId="f69b818d-fc11-3335-a972-3ca724c9685b" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23f288d4-202e-3228-b5be-96a625bdaa18" locEndPos="24" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="3" auth="lyao" locRef="6" rule="JSF-048" lnHash="398250049" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="398250049" unbViolId="174406a2-c13c-3bae-bf07-7d26a3560b1b" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06d6bec2-abd3-3d5f-a979-606d9a09a513" locEndPos="24" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="2" auth="lyao" locRef="6" rule="MISRA2008-2_10_1" lnHash="398250049" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="398250049" unbViolId="9aeb6b79-8185-32a7-97fb-c59704454c89" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f7da89a-8988-3b35-a513-ac84e3204214" locEndPos="24" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="3" auth="lyao" locRef="6" rule="HICPP-2_4_1-a" lnHash="398250049" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="398250049" unbViolId="c50088a9-feea-3ea9-9cfa-6138bf1fc9f6" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ae28294-65c2-3133-a9f6-1ebb0b821cec" locEndPos="24" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-M2_10_1-a" lnHash="398250049" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="398250049" unbViolId="cc7853b4-a8a9-3a20-a81c-f57ee2eef8f9" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bdd72919-75bf-3dda-8c4e-d3e4de14e954" locEndPos="24" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="3" auth="lyao" locRef="6" rule="NAMING-47" lnHash="398250049" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="398250049" unbViolId="d4f7aac3-1b22-3ff3-b38e-4f69c7cd2596" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94684263-1cae-3f97-b776-8f4a8636a8e3" locEndPos="24" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The parameter 'point' of function 'contains' is passed by value" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="3" auth="lyao" locRef="6" rule="OPT-14" lnHash="398250049" rule.header="Pass objects by reference instead of by value" tool="c++test" lineHash="398250049" unbViolId="4a285fb2-0954-385b-8f40-ff7f8d92c0f1" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9c96fba-4c2a-3565-9b45-0505b11743b3" locEndPos="24" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The parameter 'point' of function 'contains' is passed by value" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="4" auth="lyao" locRef="6" rule="JSF-125_a" lnHash="398250049" rule.header="Pass and return by reference when possible" tool="c++test" lineHash="398250049" unbViolId="fa9a27f4-d3a2-3f5e-96f0-f1b695582b3d" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ccc7483-a3dd-330f-9811-db570abc8914" locEndPos="24" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The parameter 'point' of function 'contains' is passed by value" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="4" auth="lyao" locRef="6" rule="JSF-117" lnHash="398250049" rule.header="Arguments should be passed by reference" tool="c++test" lineHash="398250049" unbViolId="29ac9049-c039-3330-8185-ebf136d98a67" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce12ac0e-8246-335b-a46e-9f912495cf38" locEndPos="24" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="Parameter 'point' is not validated before use" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="3" auth="lyao" locRef="6" rule="CERT_C-API00-a" lnHash="398250049" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="398250049" unbViolId="60c9698f-672f-36be-b5e4-c548c48c7679" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="278ac494-2317-3f7f-b30e-650467f099c2" locEndPos="24" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="Parameter 'point' is not validated before use" ln="27" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="27" sev="3" auth="lyao" locRef="6" rule="CODSTA-86" lnHash="398250049" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="398250049" unbViolId="49094a74-f885-32a7-a4fa-4b2c982e9453" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d6e90fb7-47fa-36ca-9788-5663866c5893" locEndPos="24" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="28" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="28" sev="3" auth="lyao" locRef="6" rule="METRICS-19" lnHash="30537851" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="30537851" unbViolId="936c798a-90bb-383d-a5e6-db5c12a7041d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="60866714-c6ea-360f-9529-34108bf336c8" locEndPos="1" locType="sr" hash="1537905639" locEndLn="28" goals="0,"/><StdViol msg="Non-ascii tab found" ln="29" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="29" sev="4" auth="lyao" locRef="6" rule="JSF-043" lnHash="538754804" rule.header="Tabs should be avoided" tool="c++test" lineHash="538754804" unbViolId="d4434579-4015-32a9-b59d-8f4988746dac" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d758fb23-5926-36f6-9244-5b1c76230267" locEndPos="5" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="29" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="29" sev="5" auth="lyao" locRef="6" rule="FORMAT-01" lnHash="538754804" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="538754804" unbViolId="af32ce13-4f4d-3745-bbb9-d6c3cc2e78e1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f4815111-f778-3ec2-afbd-e72bce21fd91" locEndPos="5" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="29" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="29" sev="5" auth="lyao" locRef="6" rule="HICPP-2_1_1-a" lnHash="538754804" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="538754804" unbViolId="52baeb61-3da6-314b-91bf-a2f92230adf4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9f7c135-78d7-342e-a79e-bb0db5041be2" locEndPos="5" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/>
    <StdViol msg="'return' statement should be used with parenthesis" ln="29" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="29" sev="3" auth="lyao" locRef="6" rule="FORMAT-25_b" lnHash="538754804" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="538754804" unbViolId="b77830e3-0d28-3306-9e9d-a92e26a75b05" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d5c7a96-0b9f-333b-ba5c-3c0933648ad0" locEndPos="6" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/>
    <StdViol msg="Function 'contains' has declared return type 'int' but returns value of type 'bool'" ln="29" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="29" sev="3" auth="lyao" locRef="6" rule="PB-05" lnHash="538754804" rule.header="Return value of a function must match declared return type" tool="c++test" lineHash="538754804" unbViolId="67b48e56-b930-36af-a969-2d58864db3f7" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f6377d6-26f1-3fd1-8739-aa6545d93969" locEndPos="6" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/>
    <StdViol msg="Implicit conversion from integral to floating type in comparison expression" ln="29" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="29" sev="2" auth="lyao" locRef="6" rule="MISRA2008-5_0_5_b" lnHash="538754804" rule.header="There shall be no implicit floating-integral conversions" tool="c++test" lineHash="538754804" unbViolId="a6f0c0b5-cacb-3401-a5ec-8180b5010b43" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="136c9b8b-06b0-37e9-8b97-f3e21c5ca01e" locEndPos="13" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/>
    <StdViol msg="Implicit conversion from integral to floating type in comparison expression" ln="29" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="29" sev="3" auth="lyao" locRef="6" rule="CERT_C-EXP39-a" lnHash="538754804" rule.header="There shall be no implicit conversions from integral to floating type" tool="c++test" lineHash="538754804" unbViolId="4833dd14-dd7e-3d3e-96c2-db10149e6bd4" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42a4364a-1c23-3fa0-ad43-489c298f3635" locEndPos="13" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/>
    <StdViol msg="Implicit conversion from integral to floating type in comparison expression" ln="29" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="29" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-M5_0_5-a" lnHash="538754804" rule.header="There shall be no implicit conversions from integral to floating type" tool="c++test" lineHash="538754804" unbViolId="9d6ad810-283c-34d9-b8e4-25ebe31204be" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3361efdb-e3b8-3f7f-a0d0-8fb7f236e8ca" locEndPos="13" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/>
    <StdViol msg="Implicit conversion from integral to floating type in comparison expression" ln="29" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="29" sev="3" auth="lyao" locRef="6" rule="MISRA2004-10_1_b" lnHash="538754804" rule.header="There shall be no implicit conversions from integral to floating type" tool="c++test" lineHash="538754804" unbViolId="ebf6975e-86d4-3072-a31f-ef3f4d711ec5" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ce2134f-0280-3d1e-9319-2c67a327ce30" locEndPos="13" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/>
    <StdViol msg="Put function 'getPosition' that are used in the body of inline member function into separate file" ln="29" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="29" sev="3" auth="lyao" locRef="6" rule="CODSTA-CPP-15" lnHash="538754804" rule.header="Put functions that are used in the body of inline member function into separate include file" tool="c++test" lineHash="538754804" unbViolId="552acc99-e401-3b91-ae5f-8d55b449fa19" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="15bda139-701b-3ae5-85fe-5d2e836ead65" locEndPos="36" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/>
    <StdViol msg="floating-point arithmetic is not documented" ln="29" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="29" sev="5" auth="lyao" locRef="6" rule="MISRA2008-0_4_2" lnHash="538754804" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="538754804" unbViolId="773cb9e0-ba59-3581-a045-24a89e8fa0e4" locStartPos="54" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90c05c56-c4ec-3d19-b197-95b274bbd728" locEndPos="55" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/>
    <StdViol msg="floating-point arithmetic is not documented" ln="29" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="29" sev="3" auth="lyao" locRef="6" rule="OWASP2019-API9-d" lnHash="538754804" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="538754804" unbViolId="17718308-63fc-32a5-90c9-32850d0d068f" locStartPos="54" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f362956e-8e34-37c4-ba86-61ecaacdf174" locEndPos="55" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/>
    <StdViol msg="floating-point arithmetic is not documented" ln="29" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="29" sev="2" auth="lyao" locRef="6" rule="AUTOSAR-M0_4_2-a" lnHash="538754804" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="538754804" unbViolId="7add7426-c9bd-3ddd-b20c-a733d21aae0d" locStartPos="54" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f3d8143-4032-35c3-864c-af659dec2dbe" locEndPos="55" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/>
    <StdViol msg="floating-point arithmetic is not documented" ln="29" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="29" sev="3" auth="lyao" locRef="6" rule="COMMENT-10" lnHash="538754804" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="538754804" unbViolId="c3e31877-7965-3c52-926f-7ebe436de726" locStartPos="54" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b248b7d2-9093-36f7-934e-85b4aaec92b4" locEndPos="55" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/><StdViol msg="Use // comments only" ln="33" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="33" sev="3" auth="lyao" locRef="6" rule="HICPP-2_3_1-a" lnHash="652807523" rule.header="Prefer C++ style comment" tool="c++test" lineHash="652807523" unbViolId="ef3c7c3d-76b0-3301-8fb6-d13e645c2f4f" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5a39fa6-f2d1-3b10-b97f-3a8777234510" locEndPos="8" locType="sr" hash="1537905639" locEndLn="33" goals="0,"/>
    <StdViol msg="Use // comments only" ln="33" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="33" sev="2" auth="lyao" locRef="6" rule="JSF-126" lnHash="652807523" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="652807523" unbViolId="89b0bb90-8238-3952-a7c6-7fe274ea5e63" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d18df40c-24d0-3c0c-8c7f-312cd1f70602" locEndPos="8" locType="sr" hash="1537905639" locEndLn="33" goals="0,"/>
    <StdViol msg="Use // comments only" ln="33" locFile="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locStartln="33" sev="3" auth="lyao" locRef="6" rule="COMMENT-01" lnHash="652807523" rule.header="Prefer C++ style comment" tool="c++test" lineHash="652807523" unbViolId="7484c5ac-dcba-3525-8bad-eeb510f46d72" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eca30a39-88b7-321d-a3f8-e6cf4dd166fb" locEndPos="8" locType="sr" hash="1537905639" locEndLn="33" goals="0,"/></StdViols>
      <TestedFilesDetails>
         <Total name="Total (Suppressed)" supp="0" total="3136">
            <Project id="flowanalysiscpp-2" name="flowanalysiscpp-2" supp="0" total="3136">
               <Res name="flowanalysiscpp (1)" supp="0" total="3136">
                  <Res loc="/flowanalysiscpp-2/flowanalysiscpp (1)/DeadLock.cpp" locRef="1" locType="sr" name="DeadLock.cpp" supp="0" total="1807"/>
                  <Res loc="/flowanalysiscpp-2/flowanalysiscpp (1)/DivisionByZero.cpp" locRef="2" locType="sr" name="DivisionByZero.cpp" supp="0" total="98"/>
                  <Res loc="/flowanalysiscpp-2/flowanalysiscpp (1)/MemoryLeak.cpp" locRef="3" locType="sr" name="MemoryLeak.cpp" supp="0" total="319"/>
                  <Res loc="/flowanalysiscpp-2/flowanalysiscpp (1)/NullPointer.cpp" locRef="4" locType="sr" name="NullPointer.cpp" supp="0" total="167"/>
                  <Res loc="/flowanalysiscpp-2/flowanalysiscpp (1)/Point.hpp" locRef="5" locType="sr" name="Point.hpp" supp="0" total="271"/>
                  <Res loc="/flowanalysiscpp-2/flowanalysiscpp (1)/Shapes.hpp" locRef="6" locType="sr" name="Shapes.hpp" supp="0" total="474"/>
               </Res>
            </Project>
         </Total>
      </TestedFilesDetails>
   </CodingStandards>
   <Statistics>
      
   </Statistics>
</ResultsSession>